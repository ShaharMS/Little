class little.tools.Data {

	@:has_untyped
	public static macro function getClassInfo(e:haxe.macro.Expr) {
		var stats = [];
		var getTypeString = [null];
		getTypeString[0] = function(t:haxe.macro.Type) {
			return @:ast(switch t {
	case TMono(t):
		getTypeString(t.get());	
	case TEnum(t, params):
		t.get().name + "${if (params.length != 0) \"<\" else \"\"}" + params.map(function(a) ->  @:implicitReturn return getTypeString(a)).join(",") + "${if (params.length != 0) \">\" else \"\"}";	
	case TInst(t, params):
		t.get().name + "${if (params.length != 0) \"<\" else \"\"}" + params.map(function(a) ->  @:implicitReturn return getTypeString(a)).join(",") + "${if (params.length != 0) \">\" else \"\"}";	
	case TType(t, params):
		t.get().name + "${if (params.length != 0) \"<\" else \"\"}" + params.map(function(a) ->  @:implicitReturn return getTypeString(a)).join(",") + "${if (params.length != 0) \">\" else \"\"}";	
	case TFun(args, ret):
		args.map(function(a) ->  @:implicitReturn return getTypeString(a.t)).join("->") + "->" + getTypeString(ret);	
	case TAnonymous(a):
		Json.stringify(a);	
	case TDynamic(t):
		"Dynamic";	
	case TLazy(f):
		getTypeString(f());	
	case TAbstract(t, params):
		t.get().name + "${if (params.length != 0) \"<\" else \"\"}" + params.map(function(a) ->  @:implicitReturn return getTypeString(a)).join(",") + "${if (params.length != 0) \">\" else \"\"}";	
	case _:
		"Dynamic";	
}) switch (@:exhaustive enumIndex t) {
				case 0: {
					var ` = t[0];
					{
						var t = `;
						{
							getTypeString[0](t.get());
						};
					};
				};
				case 1: {
					var ` = t[0];
					var ` = t[1];
					{
						var t = `;
						var params = `;
						{
							t.get().name + "" + if (params.length != 0) {
								"<";
							} else {
								"";
							} + {
								var ` = [];
								{
									var ` = 0;
									var ` = params;
									while (` < `.length) {
										var v = `[`];
										++ `;
										`.push(function(a:haxe.macro.Type) {
											return getTypeString[0](a);
										}(v));
									};
								};
								`;
							}.join(",") + "" + if (params.length != 0) {
								">";
							} else {
								"";
							};
						};
					};
				};
				case 2: {
					var ` = t[0];
					var ` = t[1];
					{
						var t = `;
						var params = `;
						{
							t.get().name + "" + if (params.length != 0) {
								"<";
							} else {
								"";
							} + {
								var ` = [];
								{
									var ` = 0;
									var ` = params;
									while (` < `.length) {
										var v = `[`];
										++ `;
										`.push(function(a:haxe.macro.Type) {
											return getTypeString[0](a);
										}(v));
									};
								};
								`;
							}.join(",") + "" + if (params.length != 0) {
								">";
							} else {
								"";
							};
						};
					};
				};
				case 3: {
					var ` = t[0];
					var ` = t[1];
					{
						var t = `;
						var params = `;
						{
							t.get().name + "" + if (params.length != 0) {
								"<";
							} else {
								"";
							} + {
								var ` = [];
								{
									var ` = 0;
									var ` = params;
									while (` < `.length) {
										var v = `[`];
										++ `;
										`.push(function(a:haxe.macro.Type) {
											return getTypeString[0](a);
										}(v));
									};
								};
								`;
							}.join(",") + "" + if (params.length != 0) {
								">";
							} else {
								"";
							};
						};
					};
				};
				case 4: {
					var ` = t[0];
					var ` = t[1];
					{
						var args = `;
						var ret = `;
						{
							{
								var ` = [];
								{
									var ` = 0;
									var ` = args;
									while (` < `.length) {
										var v = `[`];
										++ `;
										`.push(function(a:{ t : haxe.macro.Type, opt : Bool, name : String }) {
											return getTypeString[0](a.t);
										}(v));
									};
								};
								`;
							}.join("->") + "->" + getTypeString[0](ret);
						};
					};
				};
				case 5: {
					var ` = t[0];
					{
						var a = `;
						{
							{
								var replacer = null;
								var space = null;
								haxe.format.JsonPrinter.print(cast a, replacer, space);
							};
						};
					};
				};
				case 6: {
					var ` = t[0];
					{
						var t = `;
						{
							"Dynamic";
						};
					};
				};
				case 7: {
					var ` = t[0];
					{
						var f = `;
						{
							getTypeString[0](f());
						};
					};
				};
				case 8: {
					var ` = t[0];
					var ` = t[1];
					{
						var t = `;
						var params = `;
						{
							t.get().name + "" + if (params.length != 0) {
								"<";
							} else {
								"";
							} + {
								var ` = [];
								{
									var ` = 0;
									var ` = params;
									while (` < `.length) {
										var v = `[`];
										++ `;
										`.push(function(a:haxe.macro.Type) {
											return getTypeString[0](a);
										}(v));
									};
								};
								`;
							}.join(",") + "" + if (params.length != 0) {
								">";
							} else {
								"";
							};
						};
					};
				};
			};
		};
		var getWriteAccess = function(k:haxe.macro.FieldKind) {
			return @:ast(switch k {
	case FVar(read, write):
		{
			switch write {
				case AccNormal:
					true;				
				case AccNo:
					false;				
				case AccNever:
					false;				
				case AccResolve:
					false;				
				case AccCall:
					true;				
				case AccInline:
					true;				
				case AccRequire(r, msg):
					false;				
				case AccCtor:
					false;				
			};
		};	
	case FMethod(kind):
		{
			switch kind {
				case MethDynamic:
					true;				
				case _:
					false;				
			};
		};	
}) switch (@:exhaustive enumIndex k) {
				case 0: {
					var ` = k[0];
					var ` = k[1];
					{
						var read = `;
						var write = `;
						{
							{
								@:ast(switch write {
	case AccNormal:
		true;	
	case AccNo:
		false;	
	case AccNever:
		false;	
	case AccResolve:
		false;	
	case AccCall:
		true;	
	case AccInline:
		true;	
	case AccRequire(r, msg):
		false;	
	case AccCtor:
		false;	
}) switch (@:exhaustive enumIndex write) {
									case 0: {
										{
											true;
										};
									};
									case 1: {
										{
											false;
										};
									};
									case 2: {
										{
											false;
										};
									};
									case 3: {
										{
											false;
										};
									};
									case 4: {
										{
											true;
										};
									};
									case 5: {
										{
											true;
										};
									};
									case 6: {
										var ` = write[0];
										var ` = write[1];
										{
											var r = `;
											var msg = `;
											{
												false;
											};
										};
									};
									case 7: {
										{
											false;
										};
									};
								};
							};
						};
					};
				};
				case 1: {
					var ` = k[0];
					{
						var kind = `;
						{
							{
								@:ast(switch kind {
	case MethDynamic:
		true;	
	case _:
		false;	
}) if (enumIndex kind == 2) {
									{
										true;
									};
								} else {
									false;
								};
							};
						};
					};
				};
			};
		};
		@:ast(switch e.expr {
	case EConst(CString(path)):
		var t:haxe.macro.Type;
		try {
			t = haxe.macro.Context.getType(path);
		} catch(_) {
			haxe.macro.Context.error(path + " Is not a class. Did you misspell the type/package?", e.pos);
		};
		switch t {
			case TInst(inst, _):
				{
					var statics = inst.get().statics.get();
					var publics = inst.get().fields.get();
					var processingStatics = false;
					for (arr  in  [publics, statics]) {
						for (field  in  arr) {
							var type = field.type;
							switch type {
								case TFun(args, ret):
									{
										stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2420, 2424)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2448, 2458)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 2481, 2490)), quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl(args.map(function(param) ->  @:implicitReturn return ({ expr : EObjectDecl([{ field : "name", expr : haxe.macro.Context.makeExpr(param.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2583, 2593)), quotes : Unquoted }, { field : "type", expr : haxe.macro.Context.makeExpr(getTypeString(param.t), untyped $__mk_pos__("src/little/tools/Data.hx", 2619, 2641)), quotes : Unquoted }, { field : "optional", expr : haxe.macro.Context.makeExpr(param.opt, untyped $__mk_pos__("src/little/tools/Data.hx", 2671, 2680)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2558, 2696) } : haxe.macro.Expr))), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2519, 2711) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(ret), untyped $__mk_pos__("src/little/tools/Data.hx", 2740, 2758)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("function", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2784, 2794) }, quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 2823, 2849)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 2877, 2894)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2392, 2908) } : haxe.macro.Expr));
									};								
								case _:
									{
										stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2999, 3003)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 3027, 3037)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 3060, 3069)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("var", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3095, 3100) }, quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl([]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3126, 3128) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(field.type), untyped $__mk_pos__("src/little/tools/Data.hx", 3157, 3182)), quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 3212, 3238)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 3266, 3283)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2971, 3297) } : haxe.macro.Expr));
									};								
							};
						};
						processingStatics = true;
					};
					return ({ expr : EParenthesis({ expr : ECheckType({ expr : EArrayDecl(stats), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3407, 3414) }, TPath({ pack : [], name : "Array", params : [TPType(TAnonymous([{ name : "className", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3424, 3440) }, { name : "name", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3442, 3453) }, { name : "doc", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3455, 3465) }, { name : "parameters", kind : FVar(TPath({ pack : [], name : "Array", params : [TPType(TAnonymous([{ name : "name", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3485, 3496) }, { name : "type", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3498, 3509) }, { name : "optional", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3511, 3524) }]))] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3467, 3526) }, { name : "returnType", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3528, 3545) }, { name : "fieldType", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3547, 3563) }, { name : "allowWrite", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3565, 3580) }, { name : "isStatic", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3582, 3595) }]))] })), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3404, 3598) }), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3404, 3598) } : haxe.macro.Expr);
				};			
			case _:
				haxe.macro.Context.error(e + "Is not a class. Did you misspell the type/package?", e.pos);			
		};	
	case _:
		haxe.macro.Context.error("Expected string constant, found ${e.expr} instead", e.pos);	
}) {
			var ` = e.expr;
			if (enumIndex ` == 0) {
				var ` = `[0];
				if (enumIndex ` == 2) {
					var ` = `[0];
					var ` = `[1];
					{
						var path = `;
						{
							var t;
							try {
								t = haxe.macro.Context.getType(path);
							} catch (`:Dynamic) {
								{};
								{};
								if (true) {
									haxe.macro.Context.error(path + " Is not a class. Did you misspell the type/package?", e.pos, null);
								} else throw `;
							};
							@:ast(switch t {
	case TInst(inst, _):
		{
			var statics = inst.get().statics.get();
			var publics = inst.get().fields.get();
			var processingStatics = false;
			for (arr  in  [publics, statics]) {
				for (field  in  arr) {
					var type = field.type;
					switch type {
						case TFun(args, ret):
							{
								stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2420, 2424)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2448, 2458)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 2481, 2490)), quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl(args.map(function(param) ->  @:implicitReturn return ({ expr : EObjectDecl([{ field : "name", expr : haxe.macro.Context.makeExpr(param.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2583, 2593)), quotes : Unquoted }, { field : "type", expr : haxe.macro.Context.makeExpr(getTypeString(param.t), untyped $__mk_pos__("src/little/tools/Data.hx", 2619, 2641)), quotes : Unquoted }, { field : "optional", expr : haxe.macro.Context.makeExpr(param.opt, untyped $__mk_pos__("src/little/tools/Data.hx", 2671, 2680)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2558, 2696) } : haxe.macro.Expr))), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2519, 2711) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(ret), untyped $__mk_pos__("src/little/tools/Data.hx", 2740, 2758)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("function", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2784, 2794) }, quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 2823, 2849)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 2877, 2894)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2392, 2908) } : haxe.macro.Expr));
							};						
						case _:
							{
								stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2999, 3003)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 3027, 3037)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 3060, 3069)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("var", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3095, 3100) }, quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl([]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3126, 3128) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(field.type), untyped $__mk_pos__("src/little/tools/Data.hx", 3157, 3182)), quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 3212, 3238)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 3266, 3283)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2971, 3297) } : haxe.macro.Expr));
							};						
					};
				};
				processingStatics = true;
			};
			return ({ expr : EParenthesis({ expr : ECheckType({ expr : EArrayDecl(stats), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3407, 3414) }, TPath({ pack : [], name : "Array", params : [TPType(TAnonymous([{ name : "className", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3424, 3440) }, { name : "name", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3442, 3453) }, { name : "doc", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3455, 3465) }, { name : "parameters", kind : FVar(TPath({ pack : [], name : "Array", params : [TPType(TAnonymous([{ name : "name", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3485, 3496) }, { name : "type", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3498, 3509) }, { name : "optional", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3511, 3524) }]))] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3467, 3526) }, { name : "returnType", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3528, 3545) }, { name : "fieldType", kind : FVar(TPath({ pack : [], name : "String", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3547, 3563) }, { name : "allowWrite", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3565, 3580) }, { name : "isStatic", kind : FVar(TPath({ pack : [], name : "Bool", params : [] }), null), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3582, 3595) }]))] })), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3404, 3598) }), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3404, 3598) } : haxe.macro.Expr);
		};	
	case _:
		haxe.macro.Context.error(e + "Is not a class. Did you misspell the type/package?", e.pos);	
}) if (enumIndex t == 2) {
								var ` = t[0];
								var ` = t[1];
								{
									var inst = `;
									{
										{
											var statics = inst.get().statics.get();
											var publics = inst.get().fields.get();
											var processingStatics = false;
											{
												var ` = 0;
												var ` = [publics, statics];
												while (` < `.length) {
													var arr = `[`];
													++ `;
													{
														var ` = 0;
														while (` < arr.length) {
															var field = arr[`];
															++ `;
															var type = field.type;
															@:ast(switch type {
	case TFun(args, ret):
		{
			stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2420, 2424)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2448, 2458)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 2481, 2490)), quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl(args.map(function(param) ->  @:implicitReturn return ({ expr : EObjectDecl([{ field : "name", expr : haxe.macro.Context.makeExpr(param.name, untyped $__mk_pos__("src/little/tools/Data.hx", 2583, 2593)), quotes : Unquoted }, { field : "type", expr : haxe.macro.Context.makeExpr(getTypeString(param.t), untyped $__mk_pos__("src/little/tools/Data.hx", 2619, 2641)), quotes : Unquoted }, { field : "optional", expr : haxe.macro.Context.makeExpr(param.opt, untyped $__mk_pos__("src/little/tools/Data.hx", 2671, 2680)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2558, 2696) } : haxe.macro.Expr))), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2519, 2711) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(ret), untyped $__mk_pos__("src/little/tools/Data.hx", 2740, 2758)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("function", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2784, 2794) }, quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 2823, 2849)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 2877, 2894)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2392, 2908) } : haxe.macro.Expr));
		};	
	case _:
		{
			stats.push(({ expr : EObjectDecl([{ field : "className", expr : haxe.macro.Context.makeExpr(path, untyped $__mk_pos__("src/little/tools/Data.hx", 2999, 3003)), quotes : Unquoted }, { field : "name", expr : haxe.macro.Context.makeExpr(field.name, untyped $__mk_pos__("src/little/tools/Data.hx", 3027, 3037)), quotes : Unquoted }, { field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, untyped $__mk_pos__("src/little/tools/Data.hx", 3060, 3069)), quotes : Unquoted }, { field : "fieldType", expr : { expr : EConst(CString("var", DoubleQuotes)), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3095, 3100) }, quotes : Unquoted }, { field : "parameters", expr : { expr : EArrayDecl([]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 3126, 3128) }, quotes : Unquoted }, { field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString(field.type), untyped $__mk_pos__("src/little/tools/Data.hx", 3157, 3182)), quotes : Unquoted }, { field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), untyped $__mk_pos__("src/little/tools/Data.hx", 3212, 3238)), quotes : Unquoted }, { field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, untyped $__mk_pos__("src/little/tools/Data.hx", 3266, 3283)), quotes : Unquoted }]), pos : untyped $__mk_pos__("src/little/tools/Data.hx", 2971, 3297) } : haxe.macro.Expr));
		};	
}) if (enumIndex type == 4) {
																var ` = type[0];
																var ` = type[1];
																{
																	var args = `;
																	var ret = `;
																	{
																		{
																			stats.push(cast {expr : haxe.macro.ExprDef.EObjectDecl([{field : "className", expr : haxe.macro.Context.makeExpr(path, $__mk_pos__("src/little/tools/Data.hx", 2420, 2424)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "name", expr : haxe.macro.Context.makeExpr(field.name, $__mk_pos__("src/little/tools/Data.hx", 2448, 2458)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, $__mk_pos__("src/little/tools/Data.hx", 2481, 2490)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "parameters", expr : {expr : haxe.macro.ExprDef.EArrayDecl({
																				var ` = [];
																				{
																					var ` = 0;
																					var ` = args;
																					while (` < `.length) {
																						var v = `[`];
																						++ `;
																						`.push(function(param:{ t : haxe.macro.Type, opt : Bool, name : String }) {
																							return cast {expr : haxe.macro.ExprDef.EObjectDecl([{field : "name", expr : haxe.macro.Context.makeExpr(param.name, $__mk_pos__("src/little/tools/Data.hx", 2583, 2593)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "type", expr : haxe.macro.Context.makeExpr(getTypeString[0](param.t), $__mk_pos__("src/little/tools/Data.hx", 2619, 2641)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "optional", expr : haxe.macro.Context.makeExpr(param.opt, $__mk_pos__("src/little/tools/Data.hx", 2671, 2680)), quotes : haxe.macro.QuoteStatus.Unquoted}]), pos : $__mk_pos__("src/little/tools/Data.hx", 2558, 2696)};
																						}(v));
																					};
																				};
																				`;
																			}), pos : $__mk_pos__("src/little/tools/Data.hx", 2519, 2711)}, quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString[0](ret), $__mk_pos__("src/little/tools/Data.hx", 2740, 2758)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "fieldType", expr : {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("function", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("src/little/tools/Data.hx", 2784, 2794)}, quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), $__mk_pos__("src/little/tools/Data.hx", 2823, 2849)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, $__mk_pos__("src/little/tools/Data.hx", 2877, 2894)), quotes : haxe.macro.QuoteStatus.Unquoted}]), pos : $__mk_pos__("src/little/tools/Data.hx", 2392, 2908)});
																		};
																	};
																};
															} else {
																{
																	stats.push(cast {expr : haxe.macro.ExprDef.EObjectDecl([{field : "className", expr : haxe.macro.Context.makeExpr(path, $__mk_pos__("src/little/tools/Data.hx", 2999, 3003)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "name", expr : haxe.macro.Context.makeExpr(field.name, $__mk_pos__("src/little/tools/Data.hx", 3027, 3037)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "doc", expr : haxe.macro.Context.makeExpr(field.doc, $__mk_pos__("src/little/tools/Data.hx", 3060, 3069)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "fieldType", expr : {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("var", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("src/little/tools/Data.hx", 3095, 3100)}, quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "parameters", expr : {expr : haxe.macro.ExprDef.EArrayDecl([]), pos : $__mk_pos__("src/little/tools/Data.hx", 3126, 3128)}, quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "returnType", expr : haxe.macro.Context.makeExpr(getTypeString[0](field.type), $__mk_pos__("src/little/tools/Data.hx", 3157, 3182)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "allowWrite", expr : haxe.macro.Context.makeExpr(getWriteAccess(field.kind), $__mk_pos__("src/little/tools/Data.hx", 3212, 3238)), quotes : haxe.macro.QuoteStatus.Unquoted}, {field : "isStatic", expr : haxe.macro.Context.makeExpr(processingStatics, $__mk_pos__("src/little/tools/Data.hx", 3266, 3283)), quotes : haxe.macro.QuoteStatus.Unquoted}]), pos : $__mk_pos__("src/little/tools/Data.hx", 2971, 3297)});
																};
															};
														};
													};
													processingStatics = true;
												};
											};
											return cast {expr : haxe.macro.ExprDef.EParenthesis({expr : haxe.macro.ExprDef.ECheckType({expr : haxe.macro.ExprDef.EArrayDecl(stats), pos : $__mk_pos__("src/little/tools/Data.hx", 3407, 3414)}, haxe.macro.ComplexType.TPath({pack : [], name : "Array", params : [haxe.macro.TypeParam.TPType(haxe.macro.ComplexType.TAnonymous([{name : "className", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3424, 3440)}, {name : "name", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3442, 3453)}, {name : "doc", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3455, 3465)}, {name : "parameters", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "Array", params : [haxe.macro.TypeParam.TPType(haxe.macro.ComplexType.TAnonymous([{name : "name", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3485, 3496)}, {name : "type", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3498, 3509)}, {name : "optional", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "Bool", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3511, 3524)}]))]}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3467, 3526)}, {name : "returnType", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3528, 3545)}, {name : "fieldType", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "String", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3547, 3563)}, {name : "allowWrite", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "Bool", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3565, 3580)}, {name : "isStatic", kind : haxe.macro.FieldType.FVar(haxe.macro.ComplexType.TPath({pack : [], name : "Bool", params : []}), null), pos : $__mk_pos__("src/little/tools/Data.hx", 3582, 3595)}]))]})), pos : $__mk_pos__("src/little/tools/Data.hx", 3404, 3598)}), pos : $__mk_pos__("src/little/tools/Data.hx", 3404, 3598)};
										};
									};
								};
							} else {
								haxe.macro.Context.error(Std.string(e) + "Is not a class. Did you misspell the type/package?", e.pos, null);
							};
						};
					};
				} else {
					haxe.macro.Context.error("Expected string constant, found " + Std.string(e.expr) + " instead", e.pos, null);
				};
			} else {
				haxe.macro.Context.error("Expected string constant, found " + Std.string(e.expr) + " instead", e.pos, null);
			};
		};
		return cast {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("null")), pos : $__mk_pos__("src/little/tools/Data.hx", 3844, 3848)};
	}
}