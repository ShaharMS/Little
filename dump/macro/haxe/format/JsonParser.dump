class haxe.format.JsonParser {

	function new(str:String) {
		this.str = str;
		this.pos = 0;
	}

	var str:String;

	var pos:Int;

	function doParse() {
		var result = this.parseRec();
		var c;
		while (! {
			var c = c = StringTools.fastCodeAt(this.str, this.pos ++);
			c == null;
		}) {
			@:ast(switch (c) {
	case " ".code, "\r".code, "\n".code, "\t".code:
	default:
		invalidChar();	
}) switch (c) {
				case 9, 10, 13, 32: {
					{};
				};
				default: {
					this.invalidChar();
				}
			};
		};
		return result;
	}

	function parseRec() {
		while (true) {
			var c = StringTools.fastCodeAt(this.str, this.pos ++);
			@:ast(switch (c) {
	case " ".code, "\r".code, "\n".code, "\t".code:
	case "{".code:
		var obj = { }, field = null, comma:Null<Bool> = null;
		while (true) {
			var c = nextChar();
			switch (c) {
				case " ".code, "\r".code, "\n".code, "\t".code:
				case "}".code:
					if (field != null || comma == false) invalidChar();
					return obj;				
				case ":".code:
					if (field == null) invalidChar();
					Reflect.setField(obj, field, parseRec());
					field = null;
					comma = true;				
				case ",".code:
					if (comma) comma = false else invalidChar();				
				case "\"".code:
					if (field != null || comma) invalidChar();
					field = parseString();				
				default:
					invalidChar();				
			};
		};	
	case "[".code:
		var arr = [], comma:Null<Bool> = null;
		while (true) {
			var c = nextChar();
			switch (c) {
				case " ".code, "\r".code, "\n".code, "\t".code:
				case "]".code:
					if (comma == false) invalidChar();
					return arr;				
				case ",".code:
					if (comma) comma = false else invalidChar();				
				default:
					if (comma) invalidChar();
					pos--;
					arr.push(parseRec());
					comma = true;				
			};
		};	
	case "t".code:
		var save = pos;
		if (nextChar() != "r".code || nextChar() != "u".code || nextChar() != "e".code) {
			pos = save;
			invalidChar();
		};
		return true;	
	case "f".code:
		var save = pos;
		if (nextChar() != "a".code || nextChar() != "l".code || nextChar() != "s".code || nextChar() != "e".code) {
			pos = save;
			invalidChar();
		};
		return false;	
	case "n".code:
		var save = pos;
		if (nextChar() != "u".code || nextChar() != "l".code || nextChar() != "l".code) {
			pos = save;
			invalidChar();
		};
		return null;	
	case "\"".code:
		return parseString();	
	case "0".code, "1".code, "2".code, "3".code, "4".code, "5".code, "6".code, "7".code, "8".code, "9".code, "-".code:
		return parseNumber(c);	
	default:
		invalidChar();	
}) switch (c) {
				case 9, 10, 13, 32: {
					{};
				};
				case 34: {
					{
						return this.parseString();
					};
				};
				case 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57: {
					{
						return {
							var c = c;
							var start = this.pos - 1;
							var minus = c == 45;
							var digit = ! minus;
							var zero = c == 48;
							var point = false;
							var e = false;
							var pm = false;
							var end = false;
							while (true) {
								c = StringTools.fastCodeAt(this.str, this.pos ++);
								@:ast(switch (c) {
	case "0".code:
		if (zero && !point) invalidNumber(start);
		if (minus) {
			minus = false;
			zero = true;
		};
		digit = true;	
	case "1".code, "2".code, "3".code, "4".code, "5".code, "6".code, "7".code, "8".code, "9".code:
		if (zero && !point) invalidNumber(start);
		if (minus) minus = false;
		digit = true;
		zero = false;	
	case ".".code:
		if (minus || point || e) invalidNumber(start);
		digit = false;
		point = true;	
	case "e".code, "E".code:
		if (minus || zero || e) invalidNumber(start);
		digit = false;
		e = true;	
	case "+".code, "-".code:
		if (!e || pm) invalidNumber(start);
		digit = false;
		pm = true;	
	default:
		if (!digit) invalidNumber(start);
		pos--;
		end = true;	
}) switch (c) {
									case 43, 45: {
										{
											if (! e || pm) {
												this.invalidNumber(start);
											};
											digit = false;
											pm = true;
										};
									};
									case 46: {
										{
											if (minus || point || e) {
												this.invalidNumber(start);
											};
											digit = false;
											point = true;
										};
									};
									case 48: {
										{
											if (zero && ! point) {
												this.invalidNumber(start);
											};
											if (minus) {
												minus = false;
												zero = true;
											};
											digit = true;
										};
									};
									case 49, 50, 51, 52, 53, 54, 55, 56, 57: {
										{
											if (zero && ! point) {
												this.invalidNumber(start);
											};
											if (minus) {
												minus = false;
											};
											digit = true;
											zero = false;
										};
									};
									case 69, 101: {
										{
											if (minus || zero || e) {
												this.invalidNumber(start);
											};
											digit = false;
											e = true;
										};
									};
									default: {
										if (! digit) {
											this.invalidNumber(start);
										};
										this.pos --;
										end = true;
									}
								};
								if (end) {
									break;
								};
							};
							var f = Std.parseFloat(this.str.substr(start, this.pos - start));
							if (point) {
								f;
							} else {
								var i = Std.int(f);
								if (i == f) {
									i;
								} else {
									f;
								};
							};
						};
					};
				};
				case 91: {
					{
						var arr = [];
						var comma = null;
						while (true) {
							var c = StringTools.fastCodeAt(this.str, this.pos ++);
							@:ast(switch (c) {
	case " ".code, "\r".code, "\n".code, "\t".code:
	case "]".code:
		if (comma == false) invalidChar();
		return arr;	
	case ",".code:
		if (comma) comma = false else invalidChar();	
	default:
		if (comma) invalidChar();
		pos--;
		arr.push(parseRec());
		comma = true;	
}) switch (c) {
								case 9, 10, 13, 32: {
									{};
								};
								case 44: {
									{
										if (comma) {
											comma = false;
										} else {
											this.invalidChar();
										};
									};
								};
								case 93: {
									{
										if (comma == false) {
											this.invalidChar();
										};
										return arr;
									};
								};
								default: {
									if (comma) {
										this.invalidChar();
									};
									this.pos --;
									arr.push(this.parseRec());
									comma = true;
								}
							};
						};
					};
				};
				case 102: {
					{
						var save = this.pos;
						if (StringTools.fastCodeAt(this.str, this.pos ++) != 97 || StringTools.fastCodeAt(this.str, this.pos ++) != 108 || StringTools.fastCodeAt(this.str, this.pos ++) != 115 || StringTools.fastCodeAt(this.str, this.pos ++) != 101) {
							this.pos = save;
							this.invalidChar();
						};
						return false;
					};
				};
				case 110: {
					{
						var save = this.pos;
						if (StringTools.fastCodeAt(this.str, this.pos ++) != 117 || StringTools.fastCodeAt(this.str, this.pos ++) != 108 || StringTools.fastCodeAt(this.str, this.pos ++) != 108) {
							this.pos = save;
							this.invalidChar();
						};
						return null;
					};
				};
				case 116: {
					{
						var save = this.pos;
						if (StringTools.fastCodeAt(this.str, this.pos ++) != 114 || StringTools.fastCodeAt(this.str, this.pos ++) != 117 || StringTools.fastCodeAt(this.str, this.pos ++) != 101) {
							this.pos = save;
							this.invalidChar();
						};
						return true;
					};
				};
				case 123: {
					{
						var obj = {};
						var field = null;
						var comma = null;
						while (true) {
							var c = StringTools.fastCodeAt(this.str, this.pos ++);
							@:ast(switch (c) {
	case " ".code, "\r".code, "\n".code, "\t".code:
	case "}".code:
		if (field != null || comma == false) invalidChar();
		return obj;	
	case ":".code:
		if (field == null) invalidChar();
		Reflect.setField(obj, field, parseRec());
		field = null;
		comma = true;	
	case ",".code:
		if (comma) comma = false else invalidChar();	
	case "\"".code:
		if (field != null || comma) invalidChar();
		field = parseString();	
	default:
		invalidChar();	
}) switch (c) {
								case 9, 10, 13, 32: {
									{};
								};
								case 34: {
									{
										if (field != null || comma) {
											this.invalidChar();
										};
										field = this.parseString();
									};
								};
								case 44: {
									{
										if (comma) {
											comma = false;
										} else {
											this.invalidChar();
										};
									};
								};
								case 58: {
									{
										if (field == null) {
											this.invalidChar();
										};
										Reflect.setField(obj, field, this.parseRec());
										field = null;
										comma = true;
									};
								};
								case 125: {
									{
										if (field != null || comma == false) {
											this.invalidChar();
										};
										return obj;
									};
								};
								default: {
									this.invalidChar();
								}
							};
						};
					};
				};
				default: {
					this.invalidChar();
				}
			};
		};
	}

	function parseString() {
		var start = this.pos;
		var buf = null;
		var prev = -1;
		{};
		while (true) {
			var c = StringTools.fastCodeAt(this.str, this.pos ++);
			if (c == 34) {
				break;
			};
			if (c == 92) {
				if (buf == null) {
					buf = new StringBuf();
				};
				buf.addSub(this.str, start, this.pos - start - 1);
				c = StringTools.fastCodeAt(this.str, this.pos ++);
				if (c != 117 && prev != -1) {
					{
						buf.addChar(65533);
						prev = -1;
					};
				};
				@:ast(switch (c) {
	case "r".code:
		buf.addChar("\r".code);	
	case "n".code:
		buf.addChar("\n".code);	
	case "t".code:
		buf.addChar("\t".code);	
	case "b".code:
		buf.addChar(8);	
	case "f".code:
		buf.addChar(12);	
	case "/".code, "\\".code, "\"".code:
		buf.addChar(c);	
	case "u".code:
		var uc:Int = Std.parseInt("0x" + str.substr(pos, 4));
		pos += 4;
		if (prev != -1) {
			if (uc < 0xDC00 || uc > 0xDFFF) cancelSurrogate() else {
				buf.addChar(((prev - 0xD800) << 10) + (uc - 0xDC00) + 0x10000);
				prev = -1;
			};
		} else if (uc >= 0xD800 && uc <= 0xDBFF) prev = uc else buf.addChar(uc);	
	default:
		throw "Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (pos - 1);	
}) switch (c) {
					case 34, 47, 92: {
						{
							buf.addChar(c);
						};
					};
					case 98: {
						{
							buf.addChar(8);
						};
					};
					case 102: {
						{
							buf.addChar(12);
						};
					};
					case 110: {
						{
							buf.addChar(10);
						};
					};
					case 114: {
						{
							buf.addChar(13);
						};
					};
					case 116: {
						{
							buf.addChar(9);
						};
					};
					case 117: {
						{
							var uc = Std.parseInt("0x" + this.str.substr(this.pos, 4));
							this.pos += 4;
							if (prev != -1) {
								if (uc < 56320 || uc > 57343) {
									{
										buf.addChar(65533);
										prev = -1;
									};
								} else {
									buf.addChar(((prev - 55296) << 10) + (uc - 56320) + 65536);
									prev = -1;
								};
							} else {
								if (uc >= 55296 && uc <= 56319) {
									prev = uc;
								} else {
									buf.addChar(uc);
								};
							};
						};
					};
					default: {
						throw throw "Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1);
					}
				};
				start = this.pos;
			} else {
				if (c == null) {
					throw throw "Unclosed string";
				};
			};
		};
		if (prev != -1) {
			{
				buf.addChar(65533);
				prev = -1;
			};
		};
		if (buf == null) {
			return this.str.substr(start, this.pos - start - 1);
		} else {
			buf.addSub(this.str, start, this.pos - start - 1);
			return buf.toString();
		};
	}

	inline function parseNumber(c:Int) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = ! minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while (true) {
			c = StringTools.fastCodeAt(this.str, this.pos ++);
			@:ast(switch (c) {
	case "0".code:
		if (zero && !point) invalidNumber(start);
		if (minus) {
			minus = false;
			zero = true;
		};
		digit = true;	
	case "1".code, "2".code, "3".code, "4".code, "5".code, "6".code, "7".code, "8".code, "9".code:
		if (zero && !point) invalidNumber(start);
		if (minus) minus = false;
		digit = true;
		zero = false;	
	case ".".code:
		if (minus || point || e) invalidNumber(start);
		digit = false;
		point = true;	
	case "e".code, "E".code:
		if (minus || zero || e) invalidNumber(start);
		digit = false;
		e = true;	
	case "+".code, "-".code:
		if (!e || pm) invalidNumber(start);
		digit = false;
		pm = true;	
	default:
		if (!digit) invalidNumber(start);
		pos--;
		end = true;	
}) switch (c) {
				case 43, 45: {
					{
						if (! e || pm) {
							this.invalidNumber(start);
						};
						digit = false;
						pm = true;
					};
				};
				case 46: {
					{
						if (minus || point || e) {
							this.invalidNumber(start);
						};
						digit = false;
						point = true;
					};
				};
				case 48: {
					{
						if (zero && ! point) {
							this.invalidNumber(start);
						};
						if (minus) {
							minus = false;
							zero = true;
						};
						digit = true;
					};
				};
				case 49, 50, 51, 52, 53, 54, 55, 56, 57: {
					{
						if (zero && ! point) {
							this.invalidNumber(start);
						};
						if (minus) {
							minus = false;
						};
						digit = true;
						zero = false;
					};
				};
				case 69, 101: {
					{
						if (minus || zero || e) {
							this.invalidNumber(start);
						};
						digit = false;
						e = true;
					};
				};
				default: {
					if (! digit) {
						this.invalidNumber(start);
					};
					this.pos --;
					end = true;
				}
			};
			if (end) {
				break;
			};
		};
		var f = Std.parseFloat(this.str.substr(start, this.pos - start));
		if (point) {
			return f;
		} else {
			var i = Std.int(f);
			return if (i == f) {
				i;
			} else {
				f;
			};
		};
	}

	inline function nextChar() {
		return StringTools.fastCodeAt(this.str, this.pos ++);
	}

	function invalidChar() {
		this.pos --;
		throw throw "Invalid char " + StringTools.fastCodeAt(this.str, this.pos) + " at position " + this.pos;
	}

	function invalidNumber(start:Int) {
		throw throw "Invalid number at position " + start + ": " + this.str.substr(start, this.pos - start);
	}

	public static inline function parse(str:String) {
		return new haxe.format.JsonParser(str).doParse();
	}
}