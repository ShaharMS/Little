class haxe.format.JsonPrinter {

	function new(replacer:(key : Dynamic, value : Dynamic) -> Dynamic, space:String) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}

	var buf:StringBuf;

	var replacer:(key : Dynamic, value : Dynamic) -> Dynamic;

	var indent:String;

	var pretty:Bool;

	var nind:Int;

	inline function ipad() {
		if (this.pretty) {
			{
				var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
				this.buf.add(v);
			};
		};
	}

	inline function newl() {
		if (this.pretty) {
			{
				this.buf.addChar(10);
			};
		};
	}

	function write(k:Dynamic, v:Dynamic) {
		if (this.replacer != null) {
			v = this.replacer(k, v);
		};
		@:ast(switch (Type.typeof(v)) {
	case TUnknown:
		add("\"???\"");	
	case TObject:
		objString(v);	
	case TInt:
		add(v);	
	case TFloat:
		add(Math.isFinite(v) ? Std.string(v) : "null");	
	case TFunction:
		add("\"<fun>\"");	
	case TClass(c):
		if (c == String) quote(v) else if (c == Array) {
			var v:Array<Dynamic> = v;
			addChar("[".code);
			var len = v.length;
			var last = len - 1;
			for (i  in  0 ... len) {
				if (i > 0) addChar(",".code) else nind++;
				newl();
				ipad();
				write(i, v[i]);
				if (i == last) {
					nind--;
					newl();
					ipad();
				};
			};
			addChar("]".code);
		} else if (c == haxe.ds.StringMap) {
			var v:haxe.ds.StringMap<Dynamic> = v;
			var o = { };
			for (k  in  v.keys()) Reflect.setField(o, k, v.get(k));
			objString(o);
		} else if (c == Date) {
			var v:Date = v;
			quote(v.toString());
		} else classString(v);	
	case TEnum(_):
		var i = Type.enumIndex(v);
		add(Std.string(i));	
	case TBool:
		add(v);	
	case TNull:
		add("null");	
}) {
			var ` = Type.typeof(v);
			switch (@:exhaustive enumIndex `) {
				case 0: {
					{
						{
							this.buf.add("null");
						};
					};
				};
				case 1: {
					{
						{
							this.buf.add(cast v);
						};
					};
				};
				case 2: {
					{
						{
							var v = if ((Math.isFinite(v))) Std.string(v) else "null";
							this.buf.add(v);
						};
					};
				};
				case 3: {
					{
						{
							this.buf.add(cast v);
						};
					};
				};
				case 4: {
					{
						{
							this.fieldsString(v, Reflect.fields(v));
						};
					};
				};
				case 5: {
					{
						{
							this.buf.add("\"<fun>\"");
						};
					};
				};
				case 6: {
					var ` = `[0];
					{
						var c = `;
						{
							if (c == String) {
								this.quote(v);
							} else {
								if (c == Array) {
									var v = v;
									{
										this.buf.addChar(91);
									};
									var len = v.length;
									var last = len - 1;
									{
										var ` = 0;
										var ` = len;
										while (` < `) {
											var i = ` ++;
											if (i > 0) {
												{
													this.buf.addChar(44);
												};
											} else {
												this.nind ++;
											};
											{
												if (this.pretty) {
													{
														this.buf.addChar(10);
													};
												};
											};
											{
												if (this.pretty) {
													{
														var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
														this.buf.add(v);
													};
												};
											};
											this.write(i, v[i]);
											if (i == last) {
												this.nind --;
												{
													if (this.pretty) {
														{
															this.buf.addChar(10);
														};
													};
												};
												{
													if (this.pretty) {
														{
															var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
															this.buf.add(v);
														};
													};
												};
											};
										};
									};
									{
										this.buf.addChar(93);
									};
								} else {
									if (c == haxe.ds.StringMap) {
										var v = v;
										var o = {};
										for (k in v.keys()) {
											Reflect.setField(o, k, v.get(k));
										};
										{
											var v = cast o;
											this.fieldsString(v, Reflect.fields(v));
										};
									} else {
										if (c == Date) {
											var v = v;
											this.quote(v.toString());
										} else {
											this.classString(v);
										};
									};
								};
							};
						};
					};
				};
				case 7: {
					var ` = `[0];
					{
						var i = Type.enumIndex(v);
						{
							var v = Std.string(i);
							this.buf.add(v);
						};
					};
				};
				case 8: {
					{
						{
							this.buf.add("\"???\"");
						};
					};
				};
			};
		};
	}

	inline function addChar(c:Int) {
		this.buf.addChar(c);
	}

	inline function add(v:String) {
		this.buf.add(v);
	}

	function classString(v:Dynamic) {
		this.fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
	}

	inline function objString(v:Dynamic) {
		this.fieldsString(v, Reflect.fields(v));
	}

	function fieldsString(v:Dynamic, fields:Array<String>) {
		{
			this.buf.addChar(123);
		};
		var len = fields.length;
		var last = len - 1;
		var first = true;
		{
			var ` = 0;
			var ` = len;
			while (` < `) {
				var i = ` ++;
				var f = fields[i];
				var value = Reflect.field(v, f);
				if (Reflect.isFunction(value)) {
					continue;
				};
				if (first) {
					this.nind ++;
					first = false;
				} else {
					{
						this.buf.addChar(44);
					};
				};
				{
					if (this.pretty) {
						{
							this.buf.addChar(10);
						};
					};
				};
				{
					if (this.pretty) {
						{
							var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
							this.buf.add(v);
						};
					};
				};
				this.quote(f);
				{
					this.buf.addChar(58);
				};
				if (this.pretty) {
					{
						this.buf.addChar(32);
					};
				};
				this.write(f, value);
				if (i == last) {
					this.nind --;
					{
						if (this.pretty) {
							{
								this.buf.addChar(10);
							};
						};
					};
					{
						if (this.pretty) {
							{
								var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
								this.buf.add(v);
							};
						};
					};
				};
			};
		};
		{
			this.buf.addChar(125);
		};
	}

	function quote(s:String) {
		{
			this.buf.addChar(34);
		};
		var i = 0;
		var length = s.length;
		while (i < length) {
			var c = StringTools.unsafeCodeAt(s, i ++);
			@:ast(switch (c) {
	case "\"".code:
		add("\\\"");	
	case "\\".code:
		add("\\\\");	
	case "\n".code:
		add("\\n");	
	case "\r".code:
		add("\\r");	
	case "\t".code:
		add("\\t");	
	case 8:
		add("\\b");	
	case 12:
		add("\\f");	
	default:
		addChar(c);	
}) switch (c) {
				case 8: {
					{
						{
							this.buf.add("\\b");
						};
					};
				};
				case 9: {
					{
						{
							this.buf.add("\\t");
						};
					};
				};
				case 10: {
					{
						{
							this.buf.add("\\n");
						};
					};
				};
				case 12: {
					{
						{
							this.buf.add("\\f");
						};
					};
				};
				case 13: {
					{
						{
							this.buf.add("\\r");
						};
					};
				};
				case 34: {
					{
						{
							this.buf.add("\\\"");
						};
					};
				};
				case 92: {
					{
						{
							this.buf.add("\\\\");
						};
					};
				};
				default: {
					{
						this.buf.addChar(c);
					};
				}
			};
		};
		{
			this.buf.addChar(34);
		};
	}

	public static function print(o:Dynamic, replacer:Null<(key : Dynamic, value : Dynamic) -> Dynamic> = null, space:Null<String> = null) {
		var printer = new haxe.format.JsonPrinter(replacer, space);
		printer.write("", o);
		return printer.buf.toString();
	}
}