@:directlyUsed @:used
class little.Keywords {

	@:value("define")
	public static var VARIABLE_DECLARATION:String = "define";

	@:value("action")
	public static var FUNCTION_DECLARATION:String = "action";

	@:value("as")
	public static var TYPE_DECL_OR_CAST:String = "as";

	@:value("return")
	public static var FUNCTION_RETURN:String = "return";

	@:value("nothing")
	public static var NULL_VALUE:String = "nothing";

	@:value("true")
	public static var TRUE_VALUE:String = "true";

	@:value("false")
	public static var FALSE_VALUE:String = "false";

	@:value("Anything")
	public static var TYPE_DYNAMIC:String = "Anything";

	@:value("Void")
	public static var TYPE_VOID:String = "Void";

	@:value("Number")
	public static var TYPE_INT:String = "Number";

	@:value("Decimal")
	public static var TYPE_FLOAT:String = "Decimal";

	@:value("Boolean")
	public static var TYPE_BOOLEAN:String = "Boolean";

	@:value("Characters")
	public static var TYPE_STRING:String = "Characters";

	@:value("Type")
	public static var TYPE_MODULE:String = "Type";

	@:value("Sign")
	public static var TYPE_SIGN:String = "Sign";

	@:value("Main")
	public static var MAIN_MODULE_NAME:String = "Main";

	@:value("Registered")
	public static var REGISTERED_MODULE_NAME:String = "Registered";

	@:value("print")
	public static var PRINT_FUNCTION_NAME:String = "print";

	@:value("error")
	public static var RAISE_ERROR_FUNCTION_NAME:String = "error";

	@:value("read")
	public static var READ_FUNCTION_NAME:String = "read";

	@:value("run")
	public static var RUN_CODE_FUNCTION_NAME:String = "run";

	@:value("Unknown")
	public static var TYPE_UNKNOWN:String = "Unknown";

	@:value([])
	public static var CONDITION_TYPES:Array<String> = [];

	@:value("else")
	public static var ELSE:String = "else";

	@:value(["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="])
	public static var SPECIAL_OR_MULTICHAR_SIGNS:Array<String> = ["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="];

	@:value(".")
	public static var PROPERTY_ACCESS_SIGN:String = ".";

	@:value("==")
	public static var EQUALS_SIGN:String = "==";

	@:value("!=")
	public static var NOT_EQUALS_SIGN:String = "!=";

	@:value("^^")
	public static var XOR_SIGN:String = "^^";

	@:value("||")
	public static var OR_SIGN:String = "||";

	@:value("&&")
	public static var AND_SIGN:String = "&&";

	@:value("from")
	public static var FOR_LOOP_FROM:String = "from";

	@:value("to")
	public static var FOR_LOOP_TO:String = "to";

	@:value("jump")
	public static var FOR_LOOP_JUMP:String = "jump";

	@:value("to")
	public static var TYPE_CAST_FUNCTION_PREFIX:String = "to";

	@:value({ VARIABLE_DECLARATION : "define", FUNCTION_DECLARATION : "action", TYPE_DECL_OR_CAST : "as", FUNCTION_RETURN : "return", NULL_VALUE : "nothing", TRUE_VALUE : "true", FALSE_VALUE : "false", TYPE_DYNAMIC : "Anything", TYPE_VOID : "Void", TYPE_INT : "Number", TYPE_FLOAT : "Decimal", TYPE_BOOLEAN : "Boolean", TYPE_STRING : "Characters", TYPE_MODULE : "Type", TYPE_SIGN : "Sign", MAIN_MODULE_NAME : "Main", REGISTERED_MODULE_NAME : "Registered", PRINT_FUNCTION_NAME : "print", RAISE_ERROR_FUNCTION_NAME : "error", READ_FUNCTION_NAME : "read", RUN_CODE_FUNCTION_NAME : "run", TYPE_UNKNOWN : "Unknown", SPECIAL_OR_MULTICHAR_SIGNS : ["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="], PROPERTY_ACCESS_SIGN : ".", EQUALS_SIGN : "==", NOT_EQUALS_SIGN : "!=", XOR_SIGN : "^^", OR_SIGN : "||", AND_SIGN : "&&", FOR_LOOP_FROM : "from", FOR_LOOP_TO : "to", FOR_LOOP_JUMP : "jump", TYPE_CAST_FUNCTION_PREFIX : "to" })
	public static var defaultKeywordSet:little.interpreter.KeywordConfig = new little.interpreter.KeywordConfig("define", "action", "as", "return", "nothing", "true", "false", "Anything", "Void", "Number", "Decimal", "Boolean", "Characters", "Type", "Sign", "Main", "Registered", "print", "error", "read", "run", "Unknown", null, ["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="], ".", "==", "!=", "^^", "||", "&&", "from", "to", "jump", "to");

	public static function switchSet(set:little.interpreter.KeywordConfig) {
		little.Keywords.VARIABLE_DECLARATION = set.VARIABLE_DECLARATION;
		little.Keywords.FUNCTION_DECLARATION = set.FUNCTION_DECLARATION;
		little.Keywords.TYPE_DECL_OR_CAST = set.TYPE_DECL_OR_CAST;
		little.Keywords.FUNCTION_RETURN = set.FUNCTION_RETURN;
		little.Keywords.NULL_VALUE = set.NULL_VALUE;
		little.Keywords.TRUE_VALUE = set.TRUE_VALUE;
		little.Keywords.FALSE_VALUE = set.FALSE_VALUE;
		little.Keywords.TYPE_DYNAMIC = set.TYPE_DYNAMIC;
		little.Keywords.TYPE_VOID = set.TYPE_VOID;
		little.Keywords.TYPE_INT = set.TYPE_INT;
		little.Keywords.TYPE_FLOAT = set.TYPE_FLOAT;
		little.Keywords.TYPE_BOOLEAN = set.TYPE_BOOLEAN;
		little.Keywords.TYPE_STRING = set.TYPE_STRING;
		little.Keywords.TYPE_MODULE = set.TYPE_MODULE;
		little.Keywords.TYPE_SIGN = set.TYPE_SIGN;
		little.Keywords.MAIN_MODULE_NAME = set.MAIN_MODULE_NAME;
		little.Keywords.REGISTERED_MODULE_NAME = set.REGISTERED_MODULE_NAME;
		little.Keywords.PRINT_FUNCTION_NAME = set.PRINT_FUNCTION_NAME;
		little.Keywords.RAISE_ERROR_FUNCTION_NAME = set.RAISE_ERROR_FUNCTION_NAME;
		little.Keywords.READ_FUNCTION_NAME = set.READ_FUNCTION_NAME;
		little.Keywords.RUN_CODE_FUNCTION_NAME = set.RAISE_ERROR_FUNCTION_NAME;
		little.Keywords.TYPE_UNKNOWN = set.TYPE_UNKNOWN;
		little.Keywords.SPECIAL_OR_MULTICHAR_SIGNS = set.SPECIAL_OR_MULTICHAR_SIGNS;
		little.Keywords.PROPERTY_ACCESS_SIGN = set.PROPERTY_ACCESS_SIGN;
		little.Keywords.EQUALS_SIGN = set.EQUALS_SIGN;
		little.Keywords.NOT_EQUALS_SIGN = set.NOT_EQUALS_SIGN;
		little.Keywords.XOR_SIGN = set.XOR_SIGN;
		little.Keywords.OR_SIGN = set.OR_SIGN;
		little.Keywords.AND_SIGN = set.AND_SIGN;
		little.Keywords.FOR_LOOP_FROM = set.FOR_LOOP_FROM;
		little.Keywords.FOR_LOOP_TO = set.FOR_LOOP_TO;
		little.Keywords.FOR_LOOP_JUMP = set.FOR_LOOP_JUMP;
		little.Keywords.TYPE_CAST_FUNCTION_PREFIX = set.TYPE_CAST_FUNCTION_PREFIX;
	}
}