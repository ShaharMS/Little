@:directlyUsed @:used @:structInit
class little.interpreter.KeywordConfig {

	@:compilerGenerated @:inheritDoc
	public function new(VARIABLE_DECLARATION:Null<String>, FUNCTION_DECLARATION:Null<String>, TYPE_DECL_OR_CAST:Null<String>, FUNCTION_RETURN:Null<String>, NULL_VALUE:Null<String>, TRUE_VALUE:Null<String>, FALSE_VALUE:Null<String>, TYPE_DYNAMIC:Null<String>, TYPE_VOID:Null<String>, TYPE_INT:Null<String>, TYPE_FLOAT:Null<String>, TYPE_BOOLEAN:Null<String>, TYPE_STRING:Null<String>, TYPE_MODULE:Null<String>, TYPE_SIGN:Null<String>, MAIN_MODULE_NAME:Null<String>, REGISTERED_MODULE_NAME:Null<String>, PRINT_FUNCTION_NAME:Null<String>, RAISE_ERROR_FUNCTION_NAME:Null<String>, READ_FUNCTION_NAME:Null<String>, RUN_CODE_FUNCTION_NAME:Null<String>, TYPE_UNKNOWN:Null<String>, CONDITION_TYPES:Null<Array<String>>, SPECIAL_OR_MULTICHAR_SIGNS:Null<Array<String>>, PROPERTY_ACCESS_SIGN:Null<String>, EQUALS_SIGN:Null<String>, NOT_EQUALS_SIGN:Null<String>, XOR_SIGN:Null<String>, OR_SIGN:Null<String>, AND_SIGN:Null<String>, FOR_LOOP_FROM:Null<String>, FOR_LOOP_TO:Null<String>, FOR_LOOP_JUMP:Null<String>, TYPE_CAST_FUNCTION_PREFIX:Null<String>) {
		this.TYPE_CAST_FUNCTION_PREFIX = "to";
		this.FOR_LOOP_JUMP = "jump";
		this.FOR_LOOP_TO = "to";
		this.FOR_LOOP_FROM = "from";
		this.AND_SIGN = "&&";
		this.OR_SIGN = "||";
		this.XOR_SIGN = "^^";
		this.NOT_EQUALS_SIGN = "!=";
		this.EQUALS_SIGN = "==";
		this.PROPERTY_ACCESS_SIGN = ".";
		this.SPECIAL_OR_MULTICHAR_SIGNS = ["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="];
		this.CONDITION_TYPES = [];
		this.TYPE_UNKNOWN = "Unknown";
		this.RUN_CODE_FUNCTION_NAME = "run";
		this.READ_FUNCTION_NAME = "read";
		this.RAISE_ERROR_FUNCTION_NAME = "error";
		this.PRINT_FUNCTION_NAME = "print";
		this.REGISTERED_MODULE_NAME = "Registered";
		this.MAIN_MODULE_NAME = "Main";
		this.TYPE_SIGN = "Sign";
		this.TYPE_MODULE = "Type";
		this.TYPE_STRING = "Characters";
		this.TYPE_BOOLEAN = "Boolean";
		this.TYPE_FLOAT = "Decimal";
		this.TYPE_INT = "Number";
		this.TYPE_VOID = "Void";
		this.TYPE_DYNAMIC = "Anything";
		this.FALSE_VALUE = "false";
		this.TRUE_VALUE = "true";
		this.NULL_VALUE = "nothing";
		this.FUNCTION_RETURN = "return";
		this.TYPE_DECL_OR_CAST = "as";
		this.FUNCTION_DECLARATION = "action";
		this.VARIABLE_DECLARATION = "define";
		if ((VARIABLE_DECLARATION != null)) this.VARIABLE_DECLARATION = VARIABLE_DECLARATION;
		if ((FUNCTION_DECLARATION != null)) this.FUNCTION_DECLARATION = FUNCTION_DECLARATION;
		if ((TYPE_DECL_OR_CAST != null)) this.TYPE_DECL_OR_CAST = TYPE_DECL_OR_CAST;
		if ((FUNCTION_RETURN != null)) this.FUNCTION_RETURN = FUNCTION_RETURN;
		if ((NULL_VALUE != null)) this.NULL_VALUE = NULL_VALUE;
		if ((TRUE_VALUE != null)) this.TRUE_VALUE = TRUE_VALUE;
		if ((FALSE_VALUE != null)) this.FALSE_VALUE = FALSE_VALUE;
		if ((TYPE_DYNAMIC != null)) this.TYPE_DYNAMIC = TYPE_DYNAMIC;
		if ((TYPE_VOID != null)) this.TYPE_VOID = TYPE_VOID;
		if ((TYPE_INT != null)) this.TYPE_INT = TYPE_INT;
		if ((TYPE_FLOAT != null)) this.TYPE_FLOAT = TYPE_FLOAT;
		if ((TYPE_BOOLEAN != null)) this.TYPE_BOOLEAN = TYPE_BOOLEAN;
		if ((TYPE_STRING != null)) this.TYPE_STRING = TYPE_STRING;
		if ((TYPE_MODULE != null)) this.TYPE_MODULE = TYPE_MODULE;
		if ((TYPE_SIGN != null)) this.TYPE_SIGN = TYPE_SIGN;
		if ((MAIN_MODULE_NAME != null)) this.MAIN_MODULE_NAME = MAIN_MODULE_NAME;
		if ((REGISTERED_MODULE_NAME != null)) this.REGISTERED_MODULE_NAME = REGISTERED_MODULE_NAME;
		if ((PRINT_FUNCTION_NAME != null)) this.PRINT_FUNCTION_NAME = PRINT_FUNCTION_NAME;
		if ((RAISE_ERROR_FUNCTION_NAME != null)) this.RAISE_ERROR_FUNCTION_NAME = RAISE_ERROR_FUNCTION_NAME;
		if ((READ_FUNCTION_NAME != null)) this.READ_FUNCTION_NAME = READ_FUNCTION_NAME;
		if ((RUN_CODE_FUNCTION_NAME != null)) this.RUN_CODE_FUNCTION_NAME = RUN_CODE_FUNCTION_NAME;
		if ((TYPE_UNKNOWN != null)) this.TYPE_UNKNOWN = TYPE_UNKNOWN;
		if ((CONDITION_TYPES != null)) this.CONDITION_TYPES = CONDITION_TYPES;
		if ((SPECIAL_OR_MULTICHAR_SIGNS != null)) this.SPECIAL_OR_MULTICHAR_SIGNS = SPECIAL_OR_MULTICHAR_SIGNS;
		if ((PROPERTY_ACCESS_SIGN != null)) this.PROPERTY_ACCESS_SIGN = PROPERTY_ACCESS_SIGN;
		if ((EQUALS_SIGN != null)) this.EQUALS_SIGN = EQUALS_SIGN;
		if ((NOT_EQUALS_SIGN != null)) this.NOT_EQUALS_SIGN = NOT_EQUALS_SIGN;
		if ((XOR_SIGN != null)) this.XOR_SIGN = XOR_SIGN;
		if ((OR_SIGN != null)) this.OR_SIGN = OR_SIGN;
		if ((AND_SIGN != null)) this.AND_SIGN = AND_SIGN;
		if ((FOR_LOOP_FROM != null)) this.FOR_LOOP_FROM = FOR_LOOP_FROM;
		if ((FOR_LOOP_TO != null)) this.FOR_LOOP_TO = FOR_LOOP_TO;
		if ((FOR_LOOP_JUMP != null)) this.FOR_LOOP_JUMP = FOR_LOOP_JUMP;
		if ((TYPE_CAST_FUNCTION_PREFIX != null)) this.TYPE_CAST_FUNCTION_PREFIX = TYPE_CAST_FUNCTION_PREFIX;
	}

	@:value("define") @:optional
	public var VARIABLE_DECLARATION:String;

	@:value("action") @:optional
	public var FUNCTION_DECLARATION:String;

	@:value("as") @:optional
	public var TYPE_DECL_OR_CAST:String;

	@:value("return") @:optional
	public var FUNCTION_RETURN:String;

	@:value("nothing") @:optional
	public var NULL_VALUE:String;

	@:value("true") @:optional
	public var TRUE_VALUE:String;

	@:value("false") @:optional
	public var FALSE_VALUE:String;

	@:value("Anything") @:optional
	public var TYPE_DYNAMIC:String;

	@:value("Void") @:optional
	public var TYPE_VOID:String;

	@:value("Number") @:optional
	public var TYPE_INT:String;

	@:value("Decimal") @:optional
	public var TYPE_FLOAT:String;

	@:value("Boolean") @:optional
	public var TYPE_BOOLEAN:String;

	@:value("Characters") @:optional
	public var TYPE_STRING:String;

	@:value("Type") @:optional
	public var TYPE_MODULE:String;

	@:value("Sign") @:optional
	public var TYPE_SIGN:String;

	@:value("Main") @:optional
	public var MAIN_MODULE_NAME:String;

	@:value("Registered") @:optional
	public var REGISTERED_MODULE_NAME:String;

	@:value("print") @:optional
	public var PRINT_FUNCTION_NAME:String;

	@:value("error") @:optional
	public var RAISE_ERROR_FUNCTION_NAME:String;

	@:value("read") @:optional
	public var READ_FUNCTION_NAME:String;

	@:value("run") @:optional
	public var RUN_CODE_FUNCTION_NAME:String;

	@:value("Unknown") @:optional
	public var TYPE_UNKNOWN:String;

	@:value([]) @:optional
	public var CONDITION_TYPES:Array<String>;

	@:value(["++", "--", "**", "+=", "-=", ">=", "<=", "==", "&&", "||", "^^", "!="]) @:optional
	public var SPECIAL_OR_MULTICHAR_SIGNS:Array<String>;

	@:value(".") @:optional
	public var PROPERTY_ACCESS_SIGN:String;

	@:value("==") @:optional
	public var EQUALS_SIGN:String;

	@:value("!=") @:optional
	public var NOT_EQUALS_SIGN:String;

	@:value("^^") @:optional
	public var XOR_SIGN:String;

	@:value("||") @:optional
	public var OR_SIGN:String;

	@:value("&&") @:optional
	public var AND_SIGN:String;

	@:value("from") @:optional
	public var FOR_LOOP_FROM:String;

	@:value("to") @:optional
	public var FOR_LOOP_TO:String;

	@:value("jump") @:optional
	public var FOR_LOOP_JUMP:String;

	@:value("to") @:optional
	public var TYPE_CAST_FUNCTION_PREFIX:String;
}