@:directlyUsed @:used
class little.interpreter.memory.MemoryTreeBase {

	public function new(m:little.interpreter.memory.MemoryObject) {
		this.map = new haxe.ds.StringMap();
		if ((m == null)) m = new little.interpreter.memory.MemoryObject(little.parser.ParserTokens.NullValue, null, null, null, null, null, null, m, null);
		this.objType = if ((m.type != null && ! Type.enumEq(m.type, little.parser.ParserTokens.NullValue))) little.interpreter.Interpreter.stringifyTokenValue(m.type, null) else if ((m.value != null && ! Type.enumEq(m.value, little.parser.ParserTokens.NullValue))) little.interpreter.Interpreter.stringifyTokenValue(little.interpreter.Interpreter.getValueType(m.value), null) else little.Keywords.TYPE_DYNAMIC;
		this.obj = m;
	}

	@:value([])
	public var map:Map<String, little.interpreter.memory.MemoryObject>;

	public var objType:String;

	public var obj:little.interpreter.memory.MemoryObject;
}