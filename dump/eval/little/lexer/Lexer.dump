@:directlyUsed @:used
class little.lexer.Lexer {

	@:value(["!", "#", "$", "%", "&", "'", "(", ")", "*", "+", "-", ".", "/", ":", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~", "^", "√"])
	static var signs:Array<String> = ["!", "#", "$", "%", "&", "'", "(", ")", "*", "+", "-", ".", "/", ":", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~", "^", "√"];

	public static function lex(code:String) {
		var tokens = [];
		var i = 0;
		while ((i < code.length)) {
			var char = code.charAt(i);
			if ((i < code.length - 2 && little.tools.TextTools.replace(code.substr(i, 3), "\"", "").length == 0)) {
				var string = "";
				var queuedNewlines = 0;
				i += 3;
				while ((i < code.length - 2 && little.tools.TextTools.replace(code.substr(i, 3), "\"", "").length != 0)) {
					string += code.charAt(i);
					if ((code.charAt(i) == "\n")) ++ queuedNewlines;
					++ i;
				};
				i += 2;
				{
					var ` = 0;
					var ` = queuedNewlines;
					while ((` < `)) {
						var j = ` ++;
						tokens.push(little.lexer.LexerTokens.Newline);
					};
				};
				tokens.push(little.lexer.LexerTokens.Documentation(StringTools.trim(little.tools.TextTools.replace(little.tools.TextTools.replace(string, "<br>", "\n"), "</br>", "\n"))));
			} else if ((char == "\"")) {
				var string = "";
				++ i;
				while ((i < code.length && code.charAt(i) != "\"")) {
					string += code.charAt(i);
					++ i;
				};
				tokens.push(little.lexer.LexerTokens.Characters(string));
			} else if ((little.tools.TextTools.contains("1234567890.", char))) {
				var num = char;
				++ i;
				while ((i < code.length && little.tools.TextTools.contains("1234567890.", code.charAt(i)))) {
					num += code.charAt(i);
					++ i;
				};
				-- i;
				if ((num == ".")) tokens.push(little.lexer.LexerTokens.Sign(".")) else if ((StringTools.endsWith(num, "."))) {
					tokens.push(little.lexer.LexerTokens.Number(little.tools.TextTools.replaceLast(num, ".", "")));
					tokens.push(little.lexer.LexerTokens.Sign("."));
				} else tokens.push(little.lexer.LexerTokens.Number(num));
			} else if ((char == "\n")) tokens.push(little.lexer.LexerTokens.Newline) else if ((char == ";" || char == ",")) tokens.push(little.lexer.LexerTokens.SplitLine) else if ((little.lexer.Lexer.signs.contains(char))) {
				var sign = char;
				++ i;
				while ((i < code.length && little.lexer.Lexer.signs.contains(code.charAt(i)))) {
					sign += code.charAt(i);
					++ i;
				};
				-- i;
				tokens.push(little.lexer.LexerTokens.Sign(sign));
			} else if ((new EReg("[^+-.!@#$%%^&*0-9 \t\n\r;,\\(\\)\\[\\]\\{\\}]", "").match(char))) {
				var name = char;
				++ i;
				while ((i < code.length && new EReg("[^+-.!@#$%%^&* \t\n\r;,\\(\\)\\[\\]\\{\\}]", "").match(code.charAt(i)))) {
					name += code.charAt(i);
					++ i;
				};
				-- i;
				tokens.push(little.lexer.LexerTokens.Identifier(name));
			};
			++ i;
		};
		tokens = little.lexer.Lexer.separateBooleanIdentifiers(tokens);
		tokens = little.lexer.Lexer.mergeOrSplitKnownSigns(tokens);
		return tokens;
	}

	public static function separateBooleanIdentifiers(tokens:Array<little.lexer.LexerTokens>) {
		var ` = [];
		{
			var ` = 0;
			var ` = tokens;
			while ((` < `.length)) {
				var v = `[`];
				++ `;
				`.push(if ((Type.enumEq(v, little.lexer.LexerTokens.Identifier(little.Keywords.TRUE_VALUE)) || Type.enumEq(v, little.lexer.LexerTokens.Identifier(little.Keywords.FALSE_VALUE)))) little.lexer.LexerTokens.Boolean(Type.enumParameters(v)[0]) else if ((Type.enumEq(v, little.lexer.LexerTokens.Identifier(little.Keywords.NULL_VALUE)))) little.lexer.LexerTokens.NullValue else v);
			};
		};
		return `;
	}

	public static function mergeOrSplitKnownSigns(tokens:Array<little.lexer.LexerTokens>) {
		var post = [];
		var i = 0;
		while ((i < tokens.length)) {
			var token = tokens[i];
			if ((enumIndex token == 1)) {
				var char = token[0];
				{
					little.Keywords.SPECIAL_OR_MULTICHAR_SIGNS = little.tools.TextTools.sortByLength(little.Keywords.SPECIAL_OR_MULTICHAR_SIGNS);
					little.Keywords.SPECIAL_OR_MULTICHAR_SIGNS.reverse();
					var shouldContinue = false;
					while ((char.length > 0)) {
						shouldContinue = false;
						{
							var ` = 0;
							var ` = little.Keywords.SPECIAL_OR_MULTICHAR_SIGNS;
							while ((` < `.length)) {
								var sign = `[`];
								++ `;
								if ((StringTools.startsWith(char, sign))) {
									char = char.substring(sign.length, null);
									post.push(little.lexer.LexerTokens.Sign(sign));
									shouldContinue = true;
									break;
								};
							};
						};
						if ((shouldContinue)) continue;
						post.push(little.lexer.LexerTokens.Sign(char.charAt(0)));
						char = char.substring(1, null);
					};
				};
			} else post.push(token);
			++ i;
		};
		return post;
	}
}