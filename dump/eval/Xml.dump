@:keep @:directlyUsed @:used
class Xml {

	function new(nodeType:XmlType) {
		this.nodeType = nodeType;
		this.children = [];
		this.attributeMap = new haxe.ds.StringMap();
	}

	public var nodeType(default,null):XmlType;

	@:isVar
	public var nodeName(never,never):String;

	@:isVar
	public var nodeValue(never,never):String;

	var children:Array<Xml>;

	var attributeMap:Map<String, String>;

	public function get(att:String) {
		if ((this.nodeType != Xml.Element)) throw "Bad node type, expected Element but found " + (if ((this.nodeType == null)) "null" else _Xml.XmlType_Impl_.toString(this.nodeType));
		return cast cast this.attributeMap.get(att);
	}

	public function attributes() {
		if ((this.nodeType != Xml.Element)) throw "Bad node type, expected Element but found " + (if ((this.nodeType == null)) "null" else _Xml.XmlType_Impl_.toString(this.nodeType));
		return cast cast this.attributeMap.keys();
	}

	public inline function toString() {
		return haxe.xml.Printer.print(this, null);
	}

	@:value(XmlType.Element)
	public static var Element(default,never):XmlType = cast 0;

	@:value(XmlType.Document)
	public static var Document(default,never):XmlType = cast 6;

	public static function createDocument() {
		return new Xml(Xml.Document);
	}
}