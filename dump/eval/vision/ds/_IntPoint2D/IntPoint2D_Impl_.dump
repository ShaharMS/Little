@:used
private class vision.ds._IntPoint2D.IntPoint2D_Impl_ {

	public static var x(get,set):Int;

	public static var y(get,set):Int;

	static inline function get_y(this:vision.ds._IntPoint2D.Impl) {
		return this.y;
	}

	static inline function get_x(this:vision.ds._IntPoint2D.Impl) {
		return this.x;
	}

	static inline function set_y(this:vision.ds._IntPoint2D.Impl, y:Int) {
		this.y = y;
		return y;
	}

	static inline function set_x(this:vision.ds._IntPoint2D.Impl, x:Int) {
		this.x = x;
		return x;
	}

	@:to
	public static inline function toPoint2D(this:vision.ds._IntPoint2D.Impl) {
		return new vision.ds.Point2D(cast this.x, cast this.y);
	}

	@:from
	public static inline function fromPoint2D(p:vision.ds.Point2D) {
		return cast new vision.ds._IntPoint2D.Impl(Std.int(p.x), Std.int(p.y));
	}

	public static inline function toString(this:vision.ds._IntPoint2D.Impl) {
		return "(" + cast this.x + ", " + cast this.y + ")";
	}

	public static inline function copy(this:vision.ds._IntPoint2D.Impl) {
		return cast new vision.ds._IntPoint2D.Impl(cast this.x, cast this.y);
	}

	public static inline function distanceTo(this:vision.ds._IntPoint2D.Impl, point:vision.ds.IntPoint2D) {
		return Math.sqrt(Math.pow(cast this.x - cast point.x, 2) + Math.pow(cast this.y - cast point.y, 2));
	}

	public static inline function degreesTo(this:vision.ds._IntPoint2D.Impl, point:vision.ds.Point2D) {
		var point1 = cast (this,vision.ds._IntPoint2D.Impl);
		var x = point.x - cast point1.x;
		var y = point.y - cast point1.y;
		return Math.atan2(x, y) * 180 / Math.PI;
	}

	public static inline function radiansTo(this:vision.ds._IntPoint2D.Impl, point:vision.ds.Point2D) {
		var point1 = cast (this,vision.ds._IntPoint2D.Impl);
		var x = point.x - cast point1.x;
		var y = point.y - cast point1.y;
		return Math.atan2(x, y) * 180 / Math.PI;
	}
}