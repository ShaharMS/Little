package little.interpreter;

import haxe.Unserializer;
import haxe.Serializer;
import little.interpreter.Tokens.InterpTokens;

/**
	A class containing functions to compile and decompile Little code into ByteCode.
**/
class ByteCode {

    /**
    	Compiles an array of `InterpTokens` into a compact, executable string, or, ByteCode.
    	@param ...tokens a Rest-array of `InterpTokens`. Use ... to pass an array of `InterpTokens`
    	@return The compiled string
    **/
    public static function compile(...tokens:InterpTokens):String {
        return Serializer.run(tokens); // Simple, for now.
    }
    /**
		Decompiles a string representing executable bytecode into an array of `InterpTokens`.

		Warning: this will only work on strings that are generated by the `compile` function. Any other string will result in unexpected behavior.

    	@param bytecode a string representing executable bytecode
    	@return an array of `InterpTokens`
    **/
    public static function decompile(bytecode:String):Array<InterpTokens> {
        return Unserializer.run(bytecode);
    }
}