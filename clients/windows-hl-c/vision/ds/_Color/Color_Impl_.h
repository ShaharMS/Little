// Generated by HLC 4.3.4 (HL v5)
#ifndef INC_vision__ds___Color__Color_Impl_
#define INC_vision__ds___Color__Color_Impl_
typedef struct _vision__ds___Color__$Color_Impl_ *vision__ds___Color__$Color_Impl_;
typedef struct _vision__ds___Color__Color_Impl_ *vision__ds___Color__Color_Impl_;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <_std/EReg.h>
#include <hl/types/ArrayBytes_Int.h>


struct _vision__ds___Color__$Color_Impl_ {
	hl_type *$type;
	hl_type* _hx___type__;
	vdynamic* _hx___meta__;
	varray* _hx___implementedBy__;
	String _hx___name__;
	vdynamic* _hx___constructor__;
	int TRANSPARENT;
	int WHITE;
	int GRAY;
	int BLACK;
	int GREEN;
	int YELLOW;
	int ORANGE;
	int RED;
	int PURPLE;
	int BLUE;
	int BROWN;
	int PINK;
	int MAGENTA;
	int CYAN;
	int SILVER;
	int GOLD;
	int OLIVE;
	int MAROON;
	int BORDEAUX;
	int NAVY;
	int TEAL;
	int FUCHSIA;
	int AQUA;
	int LIME;
	int CHARCOAL;
	int ONYX;
	int JET;
	int JET_BLACK;
	int ROYAL_BLUE;
	EReg COLOR_REGEX;
	vclosure* fromInt;
	vclosure* fromRGBA;
	vclosure* from8Bit;
	vclosure* fromRGBAFloat;
	vclosure* fromCMYK;
	vclosure* fromHSB;
	vclosure* fromHSL;
	vclosure* fromString;
	vclosure* getHSBColorWheel;
	vclosure* interpolate;
	vclosure* gradient;
	vclosure* makeRandom;
	vclosure* multiply;
	vclosure* add;
	vclosure* subtract;
	vclosure* divide;
	vclosure* getComplementHarmony;
	vclosure* getAnalogousHarmony;
	vclosure* getSplitComplementHarmony;
	vclosure* getTriadicHarmony;
	vclosure* to24Bit;
	vclosure* toHexString;
	vclosure* toWebString;
	vclosure* darken;
	vclosure* lighten;
	vclosure* invert;
	vclosure* setRGBA;
	vclosure* setRGBAFloat;
	vclosure* setCMYK;
	vclosure* setHSB;
	vclosure* setHSL;
	vclosure* setHSChromaMatch;
	vclosure* grayscale;
	vclosure* blackOrWhite;
	vclosure* _new;
	vclosure* getThis;
	vclosure* validate;
	vclosure* get_red;
	vclosure* get_green;
	vclosure* get_blue;
	vclosure* get_alpha;
	vclosure* get_redFloat;
	vclosure* get_greenFloat;
	vclosure* get_blueFloat;
	vclosure* get_alphaFloat;
	vclosure* set_red;
	vclosure* set_green;
	vclosure* set_blue;
	vclosure* set_alpha;
	vclosure* set_redFloat;
	vclosure* set_greenFloat;
	vclosure* set_blueFloat;
	vclosure* set_alphaFloat;
	vclosure* get_cyan;
	vclosure* get_magenta;
	vclosure* get_yellow;
	vclosure* get_black;
	vclosure* set_cyan;
	vclosure* set_magenta;
	vclosure* set_yellow;
	vclosure* set_black;
	vclosure* get_hue;
	vclosure* get_brightness;
	vclosure* get_saturation;
	vclosure* get_lightness;
	vclosure* set_hue;
	vclosure* set_saturation;
	vclosure* set_brightness;
	vclosure* set_lightness;
	vclosure* set_rgb;
	vclosure* get_rgb;
	vclosure* maxColor;
	vclosure* minColor;
	vclosure* boundChannel;
	vclosure* toString;
	vclosure* toInt;
	vclosure* color_greater_than_color;
	vclosure* color_greater_than_int;
	vclosure* int_greater_than_color;
	vclosure* color_greater_than_float;
	vclosure* float_greater_than_color;
	vclosure* color_greater_than_equal_color;
	vclosure* color_greater_than_equal_int;
	vclosure* int_greater_than_equal_color;
	vclosure* color_greater_than_equal_float;
	vclosure* float_greater_than_equal_color;
	vclosure* color_less_than_color;
	vclosure* color_less_than_int;
	vclosure* int_less_than_color;
	vclosure* color_less_than_float;
	vclosure* float_less_than_color;
	vclosure* color_less_than_equal_color;
	vclosure* color_less_than_equal_int;
	vclosure* int_less_than_equal_color;
	vclosure* color_less_than_equal_float;
	vclosure* float_less_than_equal_color;
	vclosure* color_equal_color;
	vclosure* color_equal_int;
	vclosure* int_equal_color;
	vclosure* color_equal_float;
	vclosure* float_equal_color;
	vclosure* color_not_equal_color;
	vclosure* color_not_equal_int;
	vclosure* int_not_equal_color;
	vclosure* color_not_equal_float;
	vclosure* float_not_equal_color;
	vclosure* color_bitwise_and_color;
	vclosure* color_bitwise_and_int;
	vclosure* int_bitwise_and_color;
	vclosure* color_bitwise_or_color;
	vclosure* color_bitwise_or_int;
	vclosure* int_bitwise_or_color;
	vclosure* color_bitwise_xor_color;
	vclosure* color_bitwise_xor_int;
	vclosure* int_bitwise_xor_color;
	vclosure* color_bitwise_left_shift_color;
	vclosure* color_bitwise_left_shift_int;
	vclosure* int_bitwise_left_shift_color;
	vclosure* color_bitwise_right_shift_color;
	vclosure* color_bitwise_right_shift_int;
	vclosure* int_bitwise_right_shift_color;
	vclosure* color_bitwise_unsigned_right_shift_color;
	vclosure* color_bitwise_unsigned_right_shift_int;
	vclosure* int_bitwise_unsigned_right_shift_color;
};
struct _vision__ds___Color__Color_Impl_ {
	hl_type *$type;
};
#endif

