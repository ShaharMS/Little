// Generated by HLC 4.3.4 (HL v5)
#ifndef INC_vision__tools__MathTools
#define INC_vision__tools__MathTools
typedef struct _vision__tools__$MathTools *vision__tools__$MathTools;
typedef struct _vision__tools__MathTools *vision__tools__MathTools;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <vision/ds/Ray2D.h>
#include <vision/ds/Point2D.h>
#include <vision/ds/Line2D.h>
#include <vision/ds/Rectangle.h>
#include <hl/types/ArrayObj.h>


struct _vision__tools__$MathTools {
	hl_type *$type;
	hl_type* _hx___type__;
	vdynamic* _hx___meta__;
	varray* _hx___implementedBy__;
	String _hx___name__;
	vdynamic* _hx___constructor__;
	double PI;
	double NEGATIVE_INFINITY;
	double POSITIVE_INFINITY;
	double NaN;
	vclosure* distanceFromRayToPoint2D;
	vclosure* intersectionBetweenRay2Ds;
	vclosure* distanceBetweenRays2D;
	vclosure* findPointAtDistanceUsingX;
	vclosure* findPointAtDistanceUsingY;
	vclosure* distanceFromLineToPoint2D;
	vclosure* distanceBetweenLines2D;
	vclosure* radiansFromLineToPoint2D;
	vclosure* intersectionBetweenLine2Ds;
	vclosure* mirrorInsideRectangle;
	vclosure* flipInsideRectangle;
	vclosure* invertInsideRectangle;
	vclosure* clamp;
	vclosure* isBetweenRanges;
	vclosure* isBetweenRange;
	vclosure* wrapInt;
	vclosure* wrapFloat;
	vclosure* boundInt;
	vclosure* boundFloat;
	vclosure* gamma;
	vclosure* factorial;
	vclosure* slopeToDegrees;
	vclosure* slopeToRadians;
	vclosure* degreesToSlope;
	vclosure* degreesToRadians;
	vclosure* radiansToDegrees;
	vclosure* radiansToSlope;
	vclosure* cotan;
	vclosure* cosec;
	vclosure* sec;
	vclosure* sind;
	vclosure* cosd;
	vclosure* tand;
	vclosure* cotand;
	vclosure* cosecd;
	vclosure* secd;
	vclosure* truncate;
	vclosure* cropDecimal;
	vclosure* isInt;
	vclosure* get_NEGATIVE_INFINITY;
	vclosure* get_POSITIVE_INFINITY;
	vclosure* get_NaN;
	vclosure* get_PI_OVER_2;
	vclosure* get_PI;
	vclosure* abs;
	vclosure* acos;
	vclosure* asin;
	vclosure* atan;
	vclosure* atan2;
	vclosure* ceil;
	vclosure* cos;
	vclosure* exp;
	vclosure* floor;
	vclosure* log;
	vclosure* pow;
	vclosure* random;
	vclosure* round;
	vclosure* sin;
	vclosure* sqrt;
	vclosure* tan;
	vclosure* ffloor;
	vclosure* fceil;
	vclosure* fround;
	vclosure* isFinite;
	vclosure* isNaN;
	vclosure* parseFloat;
	vclosure* parseInt;
	vclosure* parseBool;
};
struct _vision__tools__MathTools {
	hl_type *$type;
};
#endif

