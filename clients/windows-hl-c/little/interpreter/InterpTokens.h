// Generated by HLC 4.3.4 (HL v5)
#ifndef INC_little__interpreter__InterpTokens
#define INC_little__interpreter__InterpTokens
typedef struct _little__interpreter__$InterpTokens *little__interpreter__$InterpTokens;
#include <hl/Enum.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hl/natives.h>
#include <hl/types/ArrayObj.h>
#include <little/interpreter/InterpTokens.h>
#include <haxe/ds/ObjectMap.h>
#include <little/tools/BaseOrderedMap.h>
#include <haxe/ds/StringMap.h>


struct _little__interpreter__$InterpTokens {
	hl_type *$type;
	hl_type* _hx___type__;
	vdynamic* _hx___meta__;
	varray* _hx___implementedBy__;
	String _hx___ename__;
	hl_bytes_map* _hx___emap__;
	hl__types__ArrayObj _hx___constructs__;
	varray* _hx___evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} little_interpreter_InterpTokens_SetLine;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_SetModule;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
	venum* p2;
} little_interpreter_InterpTokens_VariableDeclaration;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
	venum* p2;
	venum* p3;
} little_interpreter_InterpTokens_FunctionDeclaration;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__ds__ObjectMap p0;
} little_interpreter_InterpTokens_ConditionCode;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
	venum* p2;
} little_interpreter_InterpTokens_ConditionCall;
typedef struct {
	HL__ENUM_CONSTRUCT__
	little__tools__BaseOrderedMap p0;
	venum* p1;
} little_interpreter_InterpTokens_FunctionCode;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} little_interpreter_InterpTokens_FunctionCall;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} little_interpreter_InterpTokens_FunctionReturn;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	venum* p1;
} little_interpreter_InterpTokens_Write;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} little_interpreter_InterpTokens_TypeCast;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	venum* p1;
} little_interpreter_InterpTokens_Expression;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	venum* p1;
} little_interpreter_InterpTokens_Block;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} little_interpreter_InterpTokens_PartArray;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} little_interpreter_InterpTokens_PropertyAccess;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} little_interpreter_InterpTokens_Number;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} little_interpreter_InterpTokens_Decimal;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_Characters;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_Documentation;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} little_interpreter_InterpTokens_ClassPointer;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_Sign;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_Identifier;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__ds__StringMap p0;
	String p1;
} little_interpreter_InterpTokens_Object;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} little_interpreter_InterpTokens_ErrorMessage;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
} little_interpreter_InterpTokens_HaxeExtern;
#endif

