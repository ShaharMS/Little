// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_exceptions_VisionException
#define INCLUDED_vision_exceptions_VisionException

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
HX_DECLARE_CLASS1(haxe,Exception)
HX_DECLARE_CLASS2(vision,exceptions,VisionException)

namespace vision{
namespace exceptions{


class HXCPP_CLASS_ATTRIBUTES VisionException_obj : public  ::haxe::Exception_obj
{
	public:
		typedef  ::haxe::Exception_obj super;
		typedef VisionException_obj OBJ_;
		VisionException_obj();

	public:
		enum { _hx_ClassId = 0x7cf1c557 };

		void __construct(::String message,::String type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.exceptions.VisionException")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.exceptions.VisionException"); }
		static ::hx::ObjectPtr< VisionException_obj > __new(::String message,::String type);
		static ::hx::ObjectPtr< VisionException_obj > __alloc(::hx::Ctx *_hx_ctx,::String message,::String type);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VisionException_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VisionException",27,27,78,9e); }

};

} // end namespace vision
} // end namespace exceptions

#endif /* INCLUDED_vision_exceptions_VisionException */ 
