// Generated by Haxe 4.3.4
#ifndef INCLUDED_vision_exceptions_OutOfBounds
#define INCLUDED_vision_exceptions_OutOfBounds

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
HX_DECLARE_CLASS1(haxe,Exception)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(vision,ds,Point2D)
HX_DECLARE_CLASS2(vision,exceptions,OutOfBounds)
HX_DECLARE_CLASS2(vision,exceptions,VisionException)

namespace vision{
namespace exceptions{


class HXCPP_CLASS_ATTRIBUTES OutOfBounds_obj : public  ::vision::exceptions::VisionException_obj
{
	public:
		typedef  ::vision::exceptions::VisionException_obj super;
		typedef OutOfBounds_obj OBJ_;
		OutOfBounds_obj();

	public:
		enum { _hx_ClassId = 0x78c0788e };

		void __construct( ::haxe::io::Bytes image, ::vision::ds::Point2D position);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.exceptions.OutOfBounds")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.exceptions.OutOfBounds"); }
		static ::hx::ObjectPtr< OutOfBounds_obj > __new( ::haxe::io::Bytes image, ::vision::ds::Point2D position);
		static ::hx::ObjectPtr< OutOfBounds_obj > __alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes image, ::vision::ds::Point2D position);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OutOfBounds_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OutOfBounds",7a,f9,df,0e); }

};

} // end namespace vision
} // end namespace exceptions

#endif /* INCLUDED_vision_exceptions_OutOfBounds */ 
