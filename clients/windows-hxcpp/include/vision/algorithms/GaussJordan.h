// Generated by Haxe 4.3.4
#ifndef INCLUDED_vision_algorithms_GaussJordan
#define INCLUDED_vision_algorithms_GaussJordan

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,algorithms,GaussJordan)
HX_DECLARE_CLASS2(vision,ds,Array2D)

namespace vision{
namespace algorithms{


class HXCPP_CLASS_ATTRIBUTES GaussJordan_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GaussJordan_obj OBJ_;
		GaussJordan_obj();

	public:
		enum { _hx_ClassId = 0x02957853 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.algorithms.GaussJordan")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.algorithms.GaussJordan"); }

		inline static ::hx::ObjectPtr< GaussJordan_obj > __new() {
			::hx::ObjectPtr< GaussJordan_obj > __this = new GaussJordan_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< GaussJordan_obj > __alloc(::hx::Ctx *_hx_ctx) {
			GaussJordan_obj *__this = (GaussJordan_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GaussJordan_obj), false, "vision.algorithms.GaussJordan"));
			*(void **)__this = GaussJordan_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GaussJordan_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GaussJordan",1f,65,93,2d); }

		static  ::vision::ds::Array2D invert( ::vision::ds::Array2D matrix);
		static ::Dynamic invert_dyn();

		static  ::vision::ds::Array2D createIdentityMatrix(int size);
		static ::Dynamic createIdentityMatrix_dyn();

		static  ::vision::ds::Array2D augmentMatrix(::Array< ::Dynamic> matrix,::Array< ::Dynamic> augmentation);
		static ::Dynamic augmentMatrix_dyn();

		static void swapRows(::Array< ::Dynamic> matrix,int row1,int row2);
		static ::Dynamic swapRows_dyn();

		static  ::vision::ds::Array2D extractMatrix( ::vision::ds::Array2D matrix,int rows,::Array< int > columns);
		static ::Dynamic extractMatrix_dyn();

};

} // end namespace vision
} // end namespace algorithms

#endif /* INCLUDED_vision_algorithms_GaussJordan */ 
