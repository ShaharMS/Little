// Generated by Haxe 4.3.4
#ifndef INCLUDED_vision_algorithms_BilinearInterpolation
#define INCLUDED_vision_algorithms_BilinearInterpolation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(vision,algorithms,BilinearInterpolation)

namespace vision{
namespace algorithms{


class HXCPP_CLASS_ATTRIBUTES BilinearInterpolation_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BilinearInterpolation_obj OBJ_;
		BilinearInterpolation_obj();

	public:
		enum { _hx_ClassId = 0x6d14f4c8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.algorithms.BilinearInterpolation")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.algorithms.BilinearInterpolation"); }

		inline static ::hx::ObjectPtr< BilinearInterpolation_obj > __new() {
			::hx::ObjectPtr< BilinearInterpolation_obj > __this = new BilinearInterpolation_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< BilinearInterpolation_obj > __alloc(::hx::Ctx *_hx_ctx) {
			BilinearInterpolation_obj *__this = (BilinearInterpolation_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BilinearInterpolation_obj), false, "vision.algorithms.BilinearInterpolation"));
			*(void **)__this = BilinearInterpolation_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BilinearInterpolation_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BilinearInterpolation",78,96,5a,32); }

		static  ::haxe::io::Bytes interpolate( ::haxe::io::Bytes image,int width,int height);
		static ::Dynamic interpolate_dyn();

		static  ::haxe::io::Bytes interpolateMissingPixels( ::haxe::io::Bytes image,int kernelRadiusX,int kernelRadiusY,int minX,int minY);
		static ::Dynamic interpolateMissingPixels_dyn();

};

} // end namespace vision
} // end namespace algorithms

#endif /* INCLUDED_vision_algorithms_BilinearInterpolation */ 
