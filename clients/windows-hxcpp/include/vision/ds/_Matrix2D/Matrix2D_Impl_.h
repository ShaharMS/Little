// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_
#define INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,ds,Array2D)
HX_DECLARE_CLASS2(vision,ds,Point2D)
HX_DECLARE_CLASS3(vision,ds,_Matrix2D,Matrix2D_Impl_)
HX_DECLARE_CLASS3(vision,ds,specifics,PointTransformationPair)

namespace vision{
namespace ds{
namespace _Matrix2D{


class HXCPP_CLASS_ATTRIBUTES Matrix2D_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Matrix2D_Impl__obj OBJ_;
		Matrix2D_Impl__obj();

	public:
		enum { _hx_ClassId = 0x6e448b8e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.ds._Matrix2D.Matrix2D_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.ds._Matrix2D.Matrix2D_Impl_"); }

		inline static ::hx::ObjectPtr< Matrix2D_Impl__obj > __new() {
			::hx::ObjectPtr< Matrix2D_Impl__obj > __this = new Matrix2D_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Matrix2D_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Matrix2D_Impl__obj *__this = (Matrix2D_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Matrix2D_Impl__obj), false, "vision.ds._Matrix2D.Matrix2D_Impl_"));
			*(void **)__this = Matrix2D_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Matrix2D_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Matrix2D_Impl_",53,85,a6,6d); }

		static  ::vision::ds::Array2D get_underlying( ::vision::ds::Array2D this1);
		static ::Dynamic get_underlying_dyn();

		static  ::vision::ds::Array2D set_underlying( ::vision::ds::Array2D this1, ::vision::ds::Array2D arr2d);
		static ::Dynamic set_underlying_dyn();

		static int get_rows( ::vision::ds::Array2D this1);
		static ::Dynamic get_rows_dyn();

		static int set_rows( ::vision::ds::Array2D this1,int amount);
		static ::Dynamic set_rows_dyn();

		static int get_columns( ::vision::ds::Array2D this1);
		static ::Dynamic get_columns_dyn();

		static int set_columns( ::vision::ds::Array2D this1,int amount);
		static ::Dynamic set_columns_dyn();

		static  ::vision::ds::Array2D _new(int width,int height);
		static ::Dynamic _new_dyn();

		static  ::vision::ds::Array2D invert( ::vision::ds::Array2D this1);
		static ::Dynamic invert_dyn();

		static Float getDeterminant( ::vision::ds::Array2D this1);
		static ::Dynamic getDeterminant_dyn();

		static Float getTrace( ::vision::ds::Array2D this1);
		static ::Dynamic getTrace_dyn();

		static  ::vision::ds::Array2D multiplyWithScalar( ::vision::ds::Array2D this1,Float scalar);
		static ::Dynamic multiplyWithScalar_dyn();

		static  ::vision::ds::Array2D clone( ::vision::ds::Array2D this1);
		static ::Dynamic clone_dyn();

		static  ::vision::ds::Array2D map( ::vision::ds::Array2D this1, ::Dynamic mappingFunction);
		static ::Dynamic map_dyn();

		static  ::vision::ds::Array2D getSubMatrix( ::vision::ds::Array2D this1,::hx::Null< int >  fromX,::hx::Null< int >  fromY, ::Dynamic toX, ::Dynamic toY);
		static ::Dynamic getSubMatrix_dyn();

		static ::Array< Float > getColumn( ::vision::ds::Array2D this1,int x);
		static ::Dynamic getColumn_dyn();

		static ::Array< Float > getRow( ::vision::ds::Array2D this1,int y);
		static ::Dynamic getRow_dyn();

		static void setColumn( ::vision::ds::Array2D this1,int x,::Array< Float > arr);
		static ::Dynamic setColumn_dyn();

		static void setRow( ::vision::ds::Array2D this1,int y,::Array< Float > arr);
		static ::Dynamic setRow_dyn();

		static  ::vision::ds::Array2D insertColumn( ::vision::ds::Array2D this1,int x,::Array< Float > arr);
		static ::Dynamic insertColumn_dyn();

		static  ::vision::ds::Array2D insertRow( ::vision::ds::Array2D this1,int y,::Array< Float > arr);
		static ::Dynamic insertRow_dyn();

		static  ::vision::ds::Array2D removeColumn( ::vision::ds::Array2D this1,int x);
		static ::Dynamic removeColumn_dyn();

		static  ::vision::ds::Array2D removeRow( ::vision::ds::Array2D this1,int y);
		static ::Dynamic removeRow_dyn();

		static ::String toString( ::vision::ds::Array2D this1,::hx::Null< int >  precision,::hx::Null< bool >  pretty);
		static ::Dynamic toString_dyn();

		static  ::vision::ds::Array2D IDENTITY();
		static ::Dynamic IDENTITY_dyn();

		static  ::vision::ds::Array2D ROTATION(Float angle, ::Dynamic degrees, ::vision::ds::Point2D origin);
		static ::Dynamic ROTATION_dyn();

		static  ::vision::ds::Array2D TRANSLATION(::hx::Null< Float >  x,::hx::Null< Float >  y);
		static ::Dynamic TRANSLATION_dyn();

		static  ::vision::ds::Array2D SCALE(::hx::Null< Float >  scaleX,::hx::Null< Float >  scaleY);
		static ::Dynamic SCALE_dyn();

		static  ::vision::ds::Array2D SHEAR(::hx::Null< Float >  shearX,::hx::Null< Float >  shearY);
		static ::Dynamic SHEAR_dyn();

		static  ::vision::ds::Array2D REFLECTION(Float angle, ::Dynamic degrees, ::vision::ds::Point2D origin);
		static ::Dynamic REFLECTION_dyn();

		static  ::vision::ds::Array2D PERSPECTIVE(::Array< ::Dynamic> pointPairs);
		static ::Dynamic PERSPECTIVE_dyn();

		static  ::vision::ds::Array2D DEPTH(Float z, ::vision::ds::Point2D towards);
		static ::Dynamic DEPTH_dyn();

		static  ::vision::ds::Array2D createFilled(::Array< ::Dynamic> rows);
		static ::Dynamic createFilled_dyn();

		static  ::vision::ds::Array2D createTransformation(::Array< Float > xRow,::Array< Float > yRow,::Array< Float > homogeneousRow);
		static ::Dynamic createTransformation_dyn();

		static  ::vision::ds::Array2D multiplyMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b);
		static ::Dynamic multiplyMatrices_dyn();

		static  ::vision::ds::Array2D addMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b);
		static ::Dynamic addMatrices_dyn();

		static  ::vision::ds::Array2D subtractMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b);
		static ::Dynamic subtractMatrices_dyn();

		static  ::vision::ds::Array2D divideMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b);
		static ::Dynamic divideMatrices_dyn();

		static  ::vision::ds::Array2D multiply( ::vision::ds::Array2D this1, ::vision::ds::Array2D b);
		static ::Dynamic multiply_dyn();

		static  ::Dynamic add( ::vision::ds::Array2D this1, ::vision::ds::Array2D b);
		static ::Dynamic add_dyn();

		static  ::Dynamic subtract( ::vision::ds::Array2D this1, ::vision::ds::Array2D b);
		static ::Dynamic subtract_dyn();

		static  ::vision::ds::Array2D divide( ::vision::ds::Array2D this1, ::vision::ds::Array2D b);
		static ::Dynamic divide_dyn();

		static ::Array< ::Dynamic> to_array_array_float( ::vision::ds::Array2D this1);
		static ::Dynamic to_array_array_float_dyn();

		static  ::vision::ds::Array2D from_array_array_float(::Array< ::Dynamic> array);
		static ::Dynamic from_array_array_float_dyn();

		static  ::vision::ds::Array2D from_array_array_int(::Array< ::Dynamic> array);
		static ::Dynamic from_array_array_int_dyn();

};

} // end namespace vision
} // end namespace ds
} // end namespace _Matrix2D

#endif /* INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_ */ 
