// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_ds_Array2D
#define INCLUDED_vision_ds_Array2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,iterators,ArrayIterator)
HX_DECLARE_CLASS2(vision,ds,Array2D)

namespace vision{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES Array2D_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Array2D_obj OBJ_;
		Array2D_obj();

	public:
		enum { _hx_ClassId = 0x4bbde2f4 };

		void __construct(int width,int height, ::Dynamic fillWith);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.ds.Array2D")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.ds.Array2D"); }
		static ::hx::ObjectPtr< Array2D_obj > __new(int width,int height, ::Dynamic fillWith);
		static ::hx::ObjectPtr< Array2D_obj > __alloc(::hx::Ctx *_hx_ctx,int width,int height, ::Dynamic fillWith);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Array2D_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Array2D",8b,19,ca,07); }

		::cpp::VirtualArray inner;
		int width;
		int height;
		 ::Dynamic get(int x,int y);
		::Dynamic get_dyn();

		 ::Dynamic set(int x,int y, ::Dynamic val);
		::Dynamic set_dyn();

		void setMultiple(::Array< ::cpp::Int64 > points, ::Dynamic val);
		::Dynamic setMultiple_dyn();

		::cpp::VirtualArray row(int y);
		::Dynamic row_dyn();

		::cpp::VirtualArray column(int x);
		::Dynamic column_dyn();

		 ::haxe::iterators::ArrayIterator iterator();
		::Dynamic iterator_dyn();

		 ::vision::ds::Array2D fill( ::Dynamic value);
		::Dynamic fill_dyn();

		 ::vision::ds::Array2D clone();
		::Dynamic clone_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		int set_length(int value);
		::Dynamic set_length_dyn();

		int set_width(int value);
		::Dynamic set_width_dyn();

		int set_height(int value);
		::Dynamic set_height_dyn();

		 ::Dynamic get_item(::Array< int > index);
		::Dynamic get_item_dyn();

		 ::Dynamic set_item(::Array< int > index, ::Dynamic value);
		::Dynamic set_item_dyn();

		::Array< ::Dynamic> to2DArray();
		::Dynamic to2DArray_dyn();

};

} // end namespace vision
} // end namespace ds

#endif /* INCLUDED_vision_ds_Array2D */ 
