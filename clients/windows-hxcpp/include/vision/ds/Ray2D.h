// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_ds_Ray2D
#define INCLUDED_vision_ds_Ray2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,ds,Point2D)
HX_DECLARE_CLASS2(vision,ds,Ray2D)

namespace vision{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES Ray2D_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Ray2D_obj OBJ_;
		Ray2D_obj();

	public:
		enum { _hx_ClassId = 0x7f7d3855 };

		void __construct( ::vision::ds::Point2D point, ::Dynamic m, ::Dynamic degrees, ::Dynamic radians);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.ds.Ray2D")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.ds.Ray2D"); }
		static ::hx::ObjectPtr< Ray2D_obj > __new( ::vision::ds::Point2D point, ::Dynamic m, ::Dynamic degrees, ::Dynamic radians);
		static ::hx::ObjectPtr< Ray2D_obj > __alloc(::hx::Ctx *_hx_ctx, ::vision::ds::Point2D point, ::Dynamic m, ::Dynamic degrees, ::Dynamic radians);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Ray2D_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Ray2D",1c,40,55,77); }

		static  ::vision::ds::Ray2D from2Points( ::vision::ds::Point2D point1, ::vision::ds::Point2D point2);
		static ::Dynamic from2Points_dyn();

		 ::vision::ds::Point2D point;
		Float slope;
		Float degrees;
		Float radians;
		 ::vision::ds::Point2D getPointAtX(Float x);
		::Dynamic getPointAtX_dyn();

		 ::vision::ds::Point2D getPointAtY(Float y);
		::Dynamic getPointAtY_dyn();

		 ::vision::ds::Point2D intersect( ::vision::ds::Ray2D ray);
		::Dynamic intersect_dyn();

		Float distanceTo( ::vision::ds::Ray2D ray);
		::Dynamic distanceTo_dyn();

		Float set_slope(Float value);
		::Dynamic set_slope_dyn();

		Float set_degrees(Float value);
		::Dynamic set_degrees_dyn();

		Float set_radians(Float value);
		::Dynamic set_radians_dyn();

		Float get_yIntercept();
		::Dynamic get_yIntercept_dyn();

		Float get_xIntercept();
		::Dynamic get_xIntercept_dyn();

};

} // end namespace vision
} // end namespace ds

#endif /* INCLUDED_vision_ds_Ray2D */ 
