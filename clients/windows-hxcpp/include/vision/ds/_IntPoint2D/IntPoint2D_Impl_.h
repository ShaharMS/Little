// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_ds__IntPoint2D_IntPoint2D_Impl_
#define INCLUDED_vision_ds__IntPoint2D_IntPoint2D_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,ds,Point2D)
HX_DECLARE_CLASS3(vision,ds,_IntPoint2D,IntPoint2D_Impl_)

namespace vision{
namespace ds{
namespace _IntPoint2D{


class HXCPP_CLASS_ATTRIBUTES IntPoint2D_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef IntPoint2D_Impl__obj OBJ_;
		IntPoint2D_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1ef91f8e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.ds._IntPoint2D.IntPoint2D_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.ds._IntPoint2D.IntPoint2D_Impl_"); }

		inline static ::hx::ObjectPtr< IntPoint2D_Impl__obj > __new() {
			::hx::ObjectPtr< IntPoint2D_Impl__obj > __this = new IntPoint2D_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< IntPoint2D_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			IntPoint2D_Impl__obj *__this = (IntPoint2D_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IntPoint2D_Impl__obj), false, "vision.ds._IntPoint2D.IntPoint2D_Impl_"));
			*(void **)__this = IntPoint2D_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IntPoint2D_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IntPoint2D_Impl_",f3,0b,40,ea); }

		static int get_y(::cpp::Int64 this1);
		static ::Dynamic get_y_dyn();

		static int get_x(::cpp::Int64 this1);
		static ::Dynamic get_x_dyn();

		static int set_y(::cpp::Int64 this1,int y);
		static ::Dynamic set_y_dyn();

		static int set_x(::cpp::Int64 this1,int x);
		static ::Dynamic set_x_dyn();

		static  ::vision::ds::Point2D toPoint2D(::cpp::Int64 this1);
		static ::Dynamic toPoint2D_dyn();

		static ::cpp::Int64 fromPoint2D( ::vision::ds::Point2D p);
		static ::Dynamic fromPoint2D_dyn();

		static ::String toString(::cpp::Int64 this1);
		static ::Dynamic toString_dyn();

		static ::cpp::Int64 copy(::cpp::Int64 this1);
		static ::Dynamic copy_dyn();

		static Float distanceTo(::cpp::Int64 this1,::cpp::Int64 point);
		static ::Dynamic distanceTo_dyn();

		static Float degreesTo(::cpp::Int64 this1, ::vision::ds::Point2D point);
		static ::Dynamic degreesTo_dyn();

		static Float radiansTo(::cpp::Int64 this1, ::vision::ds::Point2D point);
		static ::Dynamic radiansTo_dyn();

};

} // end namespace vision
} // end namespace ds
} // end namespace _IntPoint2D

#endif /* INCLUDED_vision_ds__IntPoint2D_IntPoint2D_Impl_ */ 
