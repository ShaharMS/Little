// Generated by Haxe 4.3.3
#ifndef INCLUDED_vision_helpers_TextDrawer
#define INCLUDED_vision_helpers_TextDrawer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(vision,helpers,TextDrawer)

namespace vision{
namespace helpers{


class HXCPP_CLASS_ATTRIBUTES TextDrawer_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextDrawer_obj OBJ_;
		TextDrawer_obj();

	public:
		enum { _hx_ClassId = 0x1e5cadab };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.helpers.TextDrawer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.helpers.TextDrawer"); }

		inline static ::hx::ObjectPtr< TextDrawer_obj > __new() {
			::hx::ObjectPtr< TextDrawer_obj > __this = new TextDrawer_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TextDrawer_obj > __alloc(::hx::Ctx *_hx_ctx) {
			TextDrawer_obj *__this = (TextDrawer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextDrawer_obj), false, "vision.helpers.TextDrawer"));
			*(void **)__this = TextDrawer_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextDrawer_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextDrawer",1e,12,78,0d); }

		static void reportDependencies();
		static ::Dynamic reportDependencies_dyn();

		static void drawTextOnImage( ::haxe::io::Bytes image,int x,int y,int size,::String text, ::haxe::io::Bytes font);
		static ::Dynamic drawTextOnImage_dyn();

};

} // end namespace vision
} // end namespace helpers

#endif /* INCLUDED_vision_helpers_TextDrawer */ 
