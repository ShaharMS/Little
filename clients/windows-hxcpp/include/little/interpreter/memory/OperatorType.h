// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_interpreter_memory_OperatorType
#define INCLUDED_little_interpreter_memory_OperatorType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(little,interpreter,memory,OperatorType)
namespace little{
namespace interpreter{
namespace memory{


class OperatorType_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef OperatorType_obj OBJ_;

	public:
		OperatorType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("little.interpreter.memory.OperatorType",ff,21,48,cc); }
		::String __ToString() const { return HX_("OperatorType.",d0,61,db,e5) + _hx_tag; }

		static ::little::interpreter::memory::OperatorType LHS_ONLY;
		static inline ::little::interpreter::memory::OperatorType LHS_ONLY_dyn() { return LHS_ONLY; }
		static ::little::interpreter::memory::OperatorType LHS_RHS;
		static inline ::little::interpreter::memory::OperatorType LHS_RHS_dyn() { return LHS_RHS; }
		static ::little::interpreter::memory::OperatorType RHS_ONLY;
		static inline ::little::interpreter::memory::OperatorType RHS_ONLY_dyn() { return RHS_ONLY; }
};

} // end namespace little
} // end namespace interpreter
} // end namespace memory

#endif /* INCLUDED_little_interpreter_memory_OperatorType */ 
