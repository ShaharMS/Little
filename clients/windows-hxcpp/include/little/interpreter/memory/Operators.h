// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_interpreter_memory_Operators
#define INCLUDED_little_interpreter_memory_Operators

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(little,interpreter,memory,OperatorType)
HX_DECLARE_CLASS3(little,interpreter,memory,Operators)

namespace little{
namespace interpreter{
namespace memory{


class HXCPP_CLASS_ATTRIBUTES Operators_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Operators_obj OBJ_;
		Operators_obj();

	public:
		enum { _hx_ClassId = 0x2e96ce4a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.interpreter.memory.Operators")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.interpreter.memory.Operators"); }
		static ::hx::ObjectPtr< Operators_obj > __new();
		static ::hx::ObjectPtr< Operators_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Operators_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Operators",2f,f4,17,42); }

		 ::haxe::ds::IntMap priority;
		 ::haxe::ds::StringMap standard;
		 ::haxe::ds::StringMap rhsOnly;
		 ::haxe::ds::StringMap lhsOnly;
		void setPriority(::String op, ::little::interpreter::memory::OperatorType type,::String opPriority);
		::Dynamic setPriority_dyn();

		int getPriority(::String op, ::little::interpreter::memory::OperatorType type);
		::Dynamic getPriority_dyn();

		 ::Dynamic iterateByPriority();
		::Dynamic iterateByPriority_dyn();

		void add(::String op, ::little::interpreter::memory::OperatorType operatorType,::String priority, ::Dynamic callback);
		::Dynamic add_dyn();

		 ::Dynamic signPosToObject(::String signPos);
		::Dynamic signPosToObject_dyn();

};

} // end namespace little
} // end namespace interpreter
} // end namespace memory

#endif /* INCLUDED_little_interpreter_memory_Operators */ 
