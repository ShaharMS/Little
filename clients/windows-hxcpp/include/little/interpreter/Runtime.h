// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_interpreter_Runtime
#define INCLUDED_little_interpreter_Runtime

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,interpreter,FieldDeclarationType)
HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,interpreter,Runtime)
HX_DECLARE_CLASS2(little,interpreter,StdOut)

namespace little{
namespace interpreter{


class HXCPP_CLASS_ATTRIBUTES Runtime_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Runtime_obj OBJ_;
		Runtime_obj();

	public:
		enum { _hx_ClassId = 0x46e9dbf4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.interpreter.Runtime")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.interpreter.Runtime"); }
		static ::hx::ObjectPtr< Runtime_obj > __new();
		static ::hx::ObjectPtr< Runtime_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,Runtime_obj *_hx_obj);
		//~Runtime_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Runtime",b8,dc,b1,bc); }

		int line;
		int linePart;
		 ::little::interpreter::InterpTokens currentToken;
		::String module;
		 ::little::interpreter::InterpTokens previousToken;
		int exitCode;
		bool errorThrown;
		 ::little::interpreter::InterpTokens errorToken;
		::Array< ::Dynamic> onLineChanged;
		::Array< ::Dynamic> onModuleChanged;
		::Array< ::Dynamic> onLineSplit;
		::Array< ::Dynamic> onTokenInterpreted;
		::Array< ::Dynamic> onErrorThrown;
		::Array< ::Dynamic> onWarningPrinted;
		::Array< ::Dynamic> onWriteValue;
		::Array< ::Dynamic> onFunctionCalled;
		::Array< ::Dynamic> onConditionCalled;
		::Array< ::Dynamic> onFieldDeclared;
		::Array< ::Dynamic> onTypeCast;
		 ::little::interpreter::StdOut _hx_stdout;
		::Array< ::Dynamic> callStack;
		 ::little::interpreter::InterpTokens throwError( ::little::interpreter::InterpTokens token,::String layer);
		::Dynamic throwError_dyn();

		void warn( ::little::interpreter::InterpTokens token,::String layer);
		::Dynamic warn_dyn();

		void print(::String item);
		::Dynamic print_dyn();

		::Dynamic broadcast;
		inline ::Dynamic &broadcast_dyn() {return broadcast; }

		::Dynamic _hx___broadcast;
		inline ::Dynamic &_hx___broadcast_dyn() {return _hx___broadcast; }

		void _hx___print(::String item, ::little::interpreter::InterpTokens representativeToken);
		::Dynamic _hx___print_dyn();

};

} // end namespace little
} // end namespace interpreter

#endif /* INCLUDED_little_interpreter_Runtime */ 
