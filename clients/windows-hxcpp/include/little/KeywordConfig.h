// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_KeywordConfig
#define INCLUDED_little_KeywordConfig

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(little,KeywordConfig)

namespace little{


class HXCPP_CLASS_ATTRIBUTES KeywordConfig_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef KeywordConfig_obj OBJ_;
		KeywordConfig_obj();

	public:
		enum { _hx_ClassId = 0x2e5378ed };

		void __construct( ::little::KeywordConfig config,::hx::Null< bool >  __o_nullifyDefaults);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.KeywordConfig")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.KeywordConfig"); }
		static ::hx::ObjectPtr< KeywordConfig_obj > __new( ::little::KeywordConfig config,::hx::Null< bool >  __o_nullifyDefaults);
		static ::hx::ObjectPtr< KeywordConfig_obj > __alloc(::hx::Ctx *_hx_ctx, ::little::KeywordConfig config,::hx::Null< bool >  __o_nullifyDefaults);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KeywordConfig_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KeywordConfig",6b,f6,95,d5); }

		static void __boot();
		static  ::little::KeywordConfig defaultConfig;
		static ::Array< ::String > recognizedOperators;
		void change( ::little::KeywordConfig config);
		::Dynamic change_dyn();

		::String VARIABLE_DECLARATION;
		::String FUNCTION_DECLARATION;
		::String TYPE_DECL_OR_CAST;
		::String FUNCTION_RETURN;
		::String NULL_VALUE;
		::String TRUE_VALUE;
		::String FALSE_VALUE;
		::String TYPE_DYNAMIC;
		::String TYPE_INT;
		::String TYPE_FLOAT;
		::String TYPE_BOOLEAN;
		::String TYPE_STRING;
		::String TYPE_OBJECT;
		::String TYPE_MEMORY;
		::String TYPE_ARRAY;
		::String TYPE_FUNCTION;
		::String TYPE_CONDITION;
		::String TYPE_MODULE;
		::String TYPE_SIGN;
		::String MAIN_MODULE_NAME;
		::String OBJECT_TYPE_PROPERTY_NAME;
		::String OBJECT_ADDRESS_PROPERTY_NAME;
		::String PRINT_FUNCTION_NAME;
		::String RAISE_ERROR_FUNCTION_NAME;
		::String READ_FUNCTION_NAME;
		::String RUN_CODE_FUNCTION_NAME;
		::String CONDITION_PATTERN_PARAMETER_NAME;
		::String CONDITION_BODY_PARAMETER_NAME;
		::String CONDITION__FOR_LOOP;
		::String CONDITION__WHILE_LOOP;
		::String CONDITION__IF;
		::String CONDITION__ELSE;
		::String CONDITION__WHENEVER;
		::String CONDITION__AFTER;
		::String TYPE_UNKNOWN;
		::Array< ::String > RECOGNIZED_SIGNS;
		::String PROPERTY_ACCESS_SIGN;
		::String EQUALS_SIGN;
		::String NOT_EQUALS_SIGN;
		::String LARGER_SIGN;
		::String SMALLER_SIGN;
		::String LARGER_EQUALS_SIGN;
		::String SMALLER_EQUALS_SIGN;
		::String XOR_SIGN;
		::String OR_SIGN;
		::String AND_SIGN;
		::String NOT_SIGN;
		::String ADD_SIGN;
		::String SUBTRACT_SIGN;
		::String MULTIPLY_SIGN;
		::String DIVIDE_SIGN;
		::String MOD_SIGN;
		::String POW_SIGN;
		::String FACTORIAL_SIGN;
		::String SQRT_SIGN;
		::String NEGATE_SIGN;
		::String POSITIVE_SIGN;
		::String STDLIB__FLOAT_isWhole;
		::String STDLIB__STRING_length;
		::String STDLIB__STRING_toLowerCase;
		::String STDLIB__STRING_toUpperCase;
		::String STDLIB__STRING_trim;
		::String STDLIB__STRING_substring;
		::String STDLIB__STRING_charAt;
		::String STDLIB__STRING_split;
		::String STDLIB__STRING_replace;
		::String STDLIB__STRING_remove;
		::String STDLIB__STRING_contains;
		::String STDLIB__STRING_indexOf;
		::String STDLIB__STRING_lastIndexOf;
		::String STDLIB__STRING_startsWith;
		::String STDLIB__STRING_endsWith;
		::String STDLIB__STRING_fromCharCode;
		::String STDLIB__ARRAY_length;
		::String STDLIB__ARRAY_elementType;
		::String STDLIB__ARRAY_get;
		::String STDLIB__ARRAY_set;
		::String STDLIB__MEMORY_allocate;
		::String STDLIB__MEMORY_free;
		::String STDLIB__MEMORY_read;
		::String STDLIB__MEMORY_write;
		::String STDLIB__MEMORY_size;
		::String STDLIB__MEMORY_maxSize;
		::String FOR_LOOP_FROM;
		::String FOR_LOOP_TO;
		::String FOR_LOOP_JUMP;
		::String TYPE_CAST_FUNCTION_PREFIX;
		::String INSTANTIATE_FUNCTION_NAME;
};

} // end namespace little

#endif /* INCLUDED_little_KeywordConfig */ 
