// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_tools_BaseOrderedMap
#define INCLUDED_little_tools_BaseOrderedMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,iterators,ArrayIterator)
HX_DECLARE_CLASS2(little,tools,BaseOrderedMap)
HX_DECLARE_CLASS2(little,tools,OrderedMapKeyValueIterator)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES BaseOrderedMap_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BaseOrderedMap_obj OBJ_;
		BaseOrderedMap_obj();

	public:
		enum { _hx_ClassId = 0x2a079ae5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.tools.BaseOrderedMap")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.tools.BaseOrderedMap"); }
		static ::hx::ObjectPtr< BaseOrderedMap_obj > __new();
		static ::hx::ObjectPtr< BaseOrderedMap_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BaseOrderedMap_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BaseOrderedMap",c0,9b,01,04); }

		::cpp::VirtualArray _ks;
		::cpp::VirtualArray _vs;
		int get_length();
		::Dynamic get_length_dyn();

		 ::Dynamic get( ::Dynamic k);
		::Dynamic get_dyn();

		void set( ::Dynamic k, ::Dynamic v);
		::Dynamic set_dyn();

		bool remove( ::Dynamic k);
		::Dynamic remove_dyn();

		bool iremove(int id);
		::Dynamic iremove_dyn();

		bool clear();
		::Dynamic clear_dyn();

		 ::haxe::iterators::ArrayIterator keys();
		::Dynamic keys_dyn();

		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

		 ::little::tools::OrderedMapKeyValueIterator keyValueIterator();
		::Dynamic keyValueIterator_dyn();

		bool has( ::Dynamic k);
		::Dynamic has_dyn();

		bool exists( ::Dynamic k);
		::Dynamic exists_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_BaseOrderedMap */ 
