// Generated by Haxe 4.3.3
#ifndef INCLUDED_little_tools_InterpTokensSimple
#define INCLUDED_little_tools_InterpTokensSimple

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,tools,InterpTokensSimple)
namespace little{
namespace tools{


class InterpTokensSimple_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef InterpTokensSimple_obj OBJ_;

	public:
		InterpTokensSimple_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("little.tools.InterpTokensSimple",2b,90,fc,7c); }
		::String __ToString() const { return HX_("InterpTokensSimple.",ee,70,e4,c0) + _hx_tag; }

		static ::little::tools::InterpTokensSimple BLOCK;
		static inline ::little::tools::InterpTokensSimple BLOCK_dyn() { return BLOCK; }
		static ::little::tools::InterpTokensSimple CHARACTERS;
		static inline ::little::tools::InterpTokensSimple CHARACTERS_dyn() { return CHARACTERS; }
		static ::little::tools::InterpTokensSimple CLASS;
		static inline ::little::tools::InterpTokensSimple CLASS_dyn() { return CLASS; }
		static ::little::tools::InterpTokensSimple CLASS_DECLARATION;
		static inline ::little::tools::InterpTokensSimple CLASS_DECLARATION_dyn() { return CLASS_DECLARATION; }
		static ::little::tools::InterpTokensSimple CLASS_POINTER;
		static inline ::little::tools::InterpTokensSimple CLASS_POINTER_dyn() { return CLASS_POINTER; }
		static ::little::tools::InterpTokensSimple CONDITION_CALL;
		static inline ::little::tools::InterpTokensSimple CONDITION_CALL_dyn() { return CONDITION_CALL; }
		static ::little::tools::InterpTokensSimple CONDITION_CODE;
		static inline ::little::tools::InterpTokensSimple CONDITION_CODE_dyn() { return CONDITION_CODE; }
		static ::little::tools::InterpTokensSimple CONDITION_DECLARATION;
		static inline ::little::tools::InterpTokensSimple CONDITION_DECLARATION_dyn() { return CONDITION_DECLARATION; }
		static ::little::tools::InterpTokensSimple DECIMAL;
		static inline ::little::tools::InterpTokensSimple DECIMAL_dyn() { return DECIMAL; }
		static ::little::tools::InterpTokensSimple DOCUMENTATION;
		static inline ::little::tools::InterpTokensSimple DOCUMENTATION_dyn() { return DOCUMENTATION; }
		static ::little::tools::InterpTokensSimple ERROR_MESSAGE;
		static inline ::little::tools::InterpTokensSimple ERROR_MESSAGE_dyn() { return ERROR_MESSAGE; }
		static ::little::tools::InterpTokensSimple EXPRESSION;
		static inline ::little::tools::InterpTokensSimple EXPRESSION_dyn() { return EXPRESSION; }
		static ::little::tools::InterpTokensSimple FALSE_VALUE;
		static inline ::little::tools::InterpTokensSimple FALSE_VALUE_dyn() { return FALSE_VALUE; }
		static ::little::tools::InterpTokensSimple FUNCTION_CALL;
		static inline ::little::tools::InterpTokensSimple FUNCTION_CALL_dyn() { return FUNCTION_CALL; }
		static ::little::tools::InterpTokensSimple FUNCTION_CODE;
		static inline ::little::tools::InterpTokensSimple FUNCTION_CODE_dyn() { return FUNCTION_CODE; }
		static ::little::tools::InterpTokensSimple FUNCTION_DECLARATION;
		static inline ::little::tools::InterpTokensSimple FUNCTION_DECLARATION_dyn() { return FUNCTION_DECLARATION; }
		static ::little::tools::InterpTokensSimple FUNCTION_RETURN;
		static inline ::little::tools::InterpTokensSimple FUNCTION_RETURN_dyn() { return FUNCTION_RETURN; }
		static ::little::tools::InterpTokensSimple HAXE_EXTERN;
		static inline ::little::tools::InterpTokensSimple HAXE_EXTERN_dyn() { return HAXE_EXTERN; }
		static ::little::tools::InterpTokensSimple IDENTIFIER;
		static inline ::little::tools::InterpTokensSimple IDENTIFIER_dyn() { return IDENTIFIER; }
		static ::little::tools::InterpTokensSimple NULL_VALUE;
		static inline ::little::tools::InterpTokensSimple NULL_VALUE_dyn() { return NULL_VALUE; }
		static ::little::tools::InterpTokensSimple NUMBER;
		static inline ::little::tools::InterpTokensSimple NUMBER_dyn() { return NUMBER; }
		static ::little::tools::InterpTokensSimple OBJECT;
		static inline ::little::tools::InterpTokensSimple OBJECT_dyn() { return OBJECT; }
		static ::little::tools::InterpTokensSimple PART_ARRAY;
		static inline ::little::tools::InterpTokensSimple PART_ARRAY_dyn() { return PART_ARRAY; }
		static ::little::tools::InterpTokensSimple PROPERTY_ACCESS;
		static inline ::little::tools::InterpTokensSimple PROPERTY_ACCESS_dyn() { return PROPERTY_ACCESS; }
		static ::little::tools::InterpTokensSimple SET_LINE;
		static inline ::little::tools::InterpTokensSimple SET_LINE_dyn() { return SET_LINE; }
		static ::little::tools::InterpTokensSimple SET_MODULE;
		static inline ::little::tools::InterpTokensSimple SET_MODULE_dyn() { return SET_MODULE; }
		static ::little::tools::InterpTokensSimple SIGN;
		static inline ::little::tools::InterpTokensSimple SIGN_dyn() { return SIGN; }
		static ::little::tools::InterpTokensSimple SPLIT_LINE;
		static inline ::little::tools::InterpTokensSimple SPLIT_LINE_dyn() { return SPLIT_LINE; }
		static ::little::tools::InterpTokensSimple TRUE_VALUE;
		static inline ::little::tools::InterpTokensSimple TRUE_VALUE_dyn() { return TRUE_VALUE; }
		static ::little::tools::InterpTokensSimple TYPE_CAST;
		static inline ::little::tools::InterpTokensSimple TYPE_CAST_dyn() { return TYPE_CAST; }
		static ::little::tools::InterpTokensSimple TYPE_REFERENCE;
		static inline ::little::tools::InterpTokensSimple TYPE_REFERENCE_dyn() { return TYPE_REFERENCE; }
		static ::little::tools::InterpTokensSimple VARIABLE_DECLARATION;
		static inline ::little::tools::InterpTokensSimple VARIABLE_DECLARATION_dyn() { return VARIABLE_DECLARATION; }
		static ::little::tools::InterpTokensSimple WRITE;
		static inline ::little::tools::InterpTokensSimple WRITE_dyn() { return WRITE; }
};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_InterpTokensSimple */ 
