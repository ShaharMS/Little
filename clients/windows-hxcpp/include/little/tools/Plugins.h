// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_tools_Plugins
#define INCLUDED_little_tools_Plugins

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS3(little,interpreter,memory,Memory)
HX_DECLARE_CLASS2(little,tools,Plugins)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES Plugins_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Plugins_obj OBJ_;
		Plugins_obj();

	public:
		enum { _hx_ClassId = 0x0c3214df };

		void __construct( ::little::interpreter::memory::Memory memory);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.tools.Plugins")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.tools.Plugins"); }
		static ::hx::ObjectPtr< Plugins_obj > __new( ::little::interpreter::memory::Memory memory);
		static ::hx::ObjectPtr< Plugins_obj > __alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Plugins_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Plugins",40,fa,86,cf); }

		static bool _hx___noTypeCreation;
		static bool combosHas(::Array< ::Dynamic> combos,::String lhs,::String rhs);
		static ::Dynamic combosHas_dyn();

		static bool containsCombo(::Array< ::Dynamic> array,::String lhs,::String rhs);
		static ::Dynamic containsCombo_dyn();

		 ::little::interpreter::memory::Memory memory;
		void registerType(::String typeName, ::haxe::ds::StringMap fields);
		::Dynamic registerType_dyn();

		void registerVariable(::String variableName,::String variableType,::String documentation, ::little::interpreter::InterpTokens staticValue, ::Dynamic valueGetter);
		::Dynamic registerVariable_dyn();

		void registerFunction(::String functionName,::String documentation, ::Dynamic expectedParameters, ::Dynamic callback,::String returnType);
		::Dynamic registerFunction_dyn();

		void registerCondition(::String conditionName,::String documentation, ::Dynamic callback);
		::Dynamic registerCondition_dyn();

		void registerInstanceVariable(::String propertyName,::String propertyType,::String onType,::String documentation, ::little::interpreter::InterpTokens staticValue, ::Dynamic valueGetter);
		::Dynamic registerInstanceVariable_dyn();

		void registerInstanceFunction(::String propertyName,::String onType,::String documentation, ::Dynamic expectedParameters, ::Dynamic callback,::String returnType);
		::Dynamic registerInstanceFunction_dyn();

		void registerOperator(::String symbol, ::Dynamic info);
		::Dynamic registerOperator_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_Plugins */ 
