// Generated by Haxe 4.3.3
#ifndef INCLUDED_little_tools__TextTools_MultilangFonts
#define INCLUDED_little_tools__TextTools_MultilangFonts

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_46e1c4301d43db10_509_new)
HX_DECLARE_CLASS3(little,tools,_TextTools,MultilangFonts)

namespace little{
namespace tools{
namespace _TextTools{


class HXCPP_CLASS_ATTRIBUTES MultilangFonts_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MultilangFonts_obj OBJ_;
		MultilangFonts_obj();

	public:
		enum { _hx_ClassId = 0x387e88cd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.tools._TextTools.MultilangFonts")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.tools._TextTools.MultilangFonts"); }

		inline static ::hx::ObjectPtr< MultilangFonts_obj > __new() {
			::hx::ObjectPtr< MultilangFonts_obj > __this = new MultilangFonts_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MultilangFonts_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MultilangFonts_obj *__this = (MultilangFonts_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MultilangFonts_obj), true, "little.tools._TextTools.MultilangFonts"));
			*(void **)__this = MultilangFonts_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_46e1c4301d43db10_509_new)
HXLINE( 532)		( ( ::little::tools::_TextTools::MultilangFonts)(__this) )->serif = HX_("assets/texter/TextTools/serif.ttf",cb,44,c2,51);
HXLINE( 523)		( ( ::little::tools::_TextTools::MultilangFonts)(__this) )->sans = HX_("assets/texter/TextTools/sans.ttf",b5,ba,5a,79);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MultilangFonts_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MultilangFonts",7d,55,e1,bd); }

		::String sans;
		::String serif;
};

} // end namespace little
} // end namespace tools
} // end namespace _TextTools

#endif /* INCLUDED_little_tools__TextTools_MultilangFonts */ 
