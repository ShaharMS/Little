// Generated by Haxe 4.3.3
#ifndef INCLUDED_little_tools_Extensions
#define INCLUDED_little_tools_Extensions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,tools,Extensions)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES Extensions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Extensions_obj OBJ_;
		Extensions_obj();

	public:
		enum { _hx_ClassId = 0x6945c8d9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.tools.Extensions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.tools.Extensions"); }

		inline static ::hx::ObjectPtr< Extensions_obj > __new() {
			::hx::ObjectPtr< Extensions_obj > __this = new Extensions_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Extensions_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Extensions_obj *__this = (Extensions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Extensions_obj), false, "little.tools.Extensions"));
			*(void **)__this = Extensions_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Extensions_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Extensions",34,80,21,80); }

		static ::Array< ::Dynamic> tokenize(::String code);
		static ::Dynamic tokenize_dyn();

		static  ::little::interpreter::InterpTokens eval(::String code);
		static ::Dynamic eval_dyn();

		static bool passedByValue( ::little::interpreter::InterpTokens token);
		static ::Dynamic passedByValue_dyn();

		static bool passedByReference( ::little::interpreter::InterpTokens token);
		static ::Dynamic passedByReference_dyn();

		static bool staticallyStorable( ::little::interpreter::InterpTokens token);
		static ::Dynamic staticallyStorable_dyn();

		static ::String extractIdentifier( ::little::interpreter::InterpTokens token);
		static ::Dynamic extractIdentifier_dyn();

		static ::Array< ::String > asStringPath( ::little::interpreter::InterpTokens token);
		static ::Dynamic asStringPath_dyn();

		static ::String asJoinedStringPath( ::little::interpreter::InterpTokens token);
		static ::Dynamic asJoinedStringPath_dyn();

		static ::String type( ::little::interpreter::InterpTokens token);
		static ::Dynamic type_dyn();

		static  ::little::interpreter::InterpTokens asObjectToken( ::haxe::ds::StringMap o,::String typeName);
		static ::Dynamic asObjectToken_dyn();

		static  ::little::interpreter::InterpTokens asEmptyObject(::cpp::VirtualArray a,::String typeName);
		static ::Dynamic asEmptyObject_dyn();

		static  ::little::interpreter::InterpTokens asTokenPath(::String string);
		static ::Dynamic asTokenPath_dyn();

		static  ::little::interpreter::InterpTokens extractValue(int address,::String type);
		static ::Dynamic extractValue_dyn();

		static void writeInPlace(int address, ::little::interpreter::InterpTokens value);
		static ::Dynamic writeInPlace_dyn();

		static ::Array< ::Dynamic> toIdentifierPath( ::little::interpreter::InterpTokens propertyAccess);
		static ::Dynamic toIdentifierPath_dyn();

		static bool containsAny(::cpp::VirtualArray array, ::Dynamic func);
		static ::Dynamic containsAny_dyn();

		static ::cpp::VirtualArray toArray( ::Dynamic iter);
		static ::Dynamic toArray_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_Extensions */ 
