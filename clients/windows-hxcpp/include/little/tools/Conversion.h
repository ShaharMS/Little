// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_tools_Conversion
#define INCLUDED_little_tools_Conversion

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ValueType)
HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,tools,Conversion)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES Conversion_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Conversion_obj OBJ_;
		Conversion_obj();

	public:
		enum { _hx_ClassId = 0x33a2e9f7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.tools.Conversion")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.tools.Conversion"); }

		inline static ::hx::ObjectPtr< Conversion_obj > __new() {
			::hx::ObjectPtr< Conversion_obj > __this = new Conversion_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Conversion_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Conversion_obj *__this = (Conversion_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Conversion_obj), false, "little.tools.Conversion"));
			*(void **)__this = Conversion_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Conversion_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Conversion",36,d7,c8,da); }

		static ::String extractHaxeType( ::ValueType type);
		static ::Dynamic extractHaxeType_dyn();

		static  ::little::interpreter::InterpTokens toLittleValue( ::Dynamic val);
		static ::Dynamic toLittleValue_dyn();

		static  ::Dynamic toHaxeValue( ::little::interpreter::InterpTokens val);
		static ::Dynamic toHaxeValue_dyn();

		static ::String toLittleType(::String type);
		static ::Dynamic toLittleType_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_Conversion */ 
