// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_tools_PrepareRun
#define INCLUDED_little_tools_PrepareRun

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,tools,PrepareRun)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES PrepareRun_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PrepareRun_obj OBJ_;
		PrepareRun_obj();

	public:
		enum { _hx_ClassId = 0x6182c8c9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.tools.PrepareRun")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.tools.PrepareRun"); }

		inline static ::hx::ObjectPtr< PrepareRun_obj > __new() {
			::hx::ObjectPtr< PrepareRun_obj > __this = new PrepareRun_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< PrepareRun_obj > __alloc(::hx::Ctx *_hx_ctx) {
			PrepareRun_obj *__this = (PrepareRun_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PrepareRun_obj), false, "little.tools.PrepareRun"));
			*(void **)__this = PrepareRun_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PrepareRun_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PrepareRun",24,80,5e,78); }

		static void __boot();
		static bool prepared;
		static void addTypes();
		static ::Dynamic addTypes_dyn();

		static void addFunctions();
		static ::Dynamic addFunctions_dyn();

		static void addProps();
		static ::Dynamic addProps_dyn();

		static void addSigns();
		static ::Dynamic addSigns_dyn();

		static void addConditions();
		static ::Dynamic addConditions_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_PrepareRun */ 
