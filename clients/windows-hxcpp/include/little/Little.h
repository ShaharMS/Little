// Generated by Haxe 4.3.4
#ifndef INCLUDED_little_Little
#define INCLUDED_little_Little

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(little,KeywordConfig)
HX_DECLARE_CLASS1(little,Little)
HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,interpreter,Runtime)
HX_DECLARE_CLASS3(little,interpreter,memory,Memory)
HX_DECLARE_CLASS2(little,tools,Plugins)
HX_DECLARE_CLASS2(vision,ds,Queue_String)

namespace little{


class HXCPP_CLASS_ATTRIBUTES Little_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Little_obj OBJ_;
		Little_obj();

	public:
		enum { _hx_ClassId = 0x2369c2b8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.Little")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.Little"); }

		inline static ::hx::ObjectPtr< Little_obj > __new() {
			::hx::ObjectPtr< Little_obj > __this = new Little_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Little_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Little_obj *__this = (Little_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Little_obj), false, "little.Little"));
			*(void **)__this = Little_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Little_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Little",16,79,37,25); }

		static void __boot();
		static  ::little::KeywordConfig keywords;
		static  ::little::interpreter::Runtime runtime;
		static  ::little::interpreter::memory::Memory memory;
		static  ::little::tools::Plugins plugin;
		static  ::vision::ds::Queue_String queue;
		static bool debug;
		static ::String version;
		static void loadModule(::String code,::String name,::hx::Null< bool >  debug,::hx::Null< bool >  runRightBeforeMain);
		static ::Dynamic loadModule_dyn();

		static void run(::String code, ::Dynamic debug);
		static ::Dynamic run_dyn();

		static ::Array< ::Dynamic> compile(::String code);
		static ::Dynamic compile_dyn();

		static ::String format(::String code);
		static ::Dynamic format_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

};

} // end namespace little

#endif /* INCLUDED_little_Little */ 
