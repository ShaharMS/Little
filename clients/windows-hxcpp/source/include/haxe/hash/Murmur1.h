// Generated by Haxe 4.3.1
#ifndef INCLUDED_haxe_hash_Murmur1
#define INCLUDED_haxe_hash_Murmur1

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_ffe01fa47c0de20d_9_new)
HX_DECLARE_CLASS2(haxe,hash,Murmur1)
HX_DECLARE_CLASS2(haxe,io,Bytes)

namespace haxe{
namespace hash{


class HXCPP_CLASS_ATTRIBUTES Murmur1_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Murmur1_obj OBJ_;
		Murmur1_obj();

	public:
		enum { _hx_ClassId = 0x33c697b9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.hash.Murmur1")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe.hash.Murmur1"); }

		inline static ::hx::ObjectPtr< Murmur1_obj > __new() {
			::hx::ObjectPtr< Murmur1_obj > __this = new Murmur1_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Murmur1_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Murmur1_obj *__this = (Murmur1_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Murmur1_obj), false, "haxe.hash.Murmur1"));
			*(void **)__this = Murmur1_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_ffe01fa47c0de20d_9_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Murmur1_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Murmur1",d1,7d,c9,35); }

		static void __boot();
		static int m;
		static int hash( ::haxe::io::Bytes b,::hx::Null< int >  seed);
		static ::Dynamic hash_dyn();

};

} // end namespace haxe
} // end namespace hash

#endif /* INCLUDED_haxe_hash_Murmur1 */ 
