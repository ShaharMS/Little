// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_exceptions_MultithreadFailure
#define INCLUDED_vision_exceptions_MultithreadFailure

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
HX_DECLARE_CLASS1(haxe,Exception)
HX_DECLARE_CLASS2(vision,exceptions,MultithreadFailure)
HX_DECLARE_CLASS2(vision,exceptions,VisionException)

namespace vision{
namespace exceptions{


class HXCPP_CLASS_ATTRIBUTES MultithreadFailure_obj : public  ::vision::exceptions::VisionException_obj
{
	public:
		typedef  ::vision::exceptions::VisionException_obj super;
		typedef MultithreadFailure_obj OBJ_;
		MultithreadFailure_obj();

	public:
		enum { _hx_ClassId = 0x2637b53f };

		void __construct(int count, ::Dynamic reason);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.exceptions.MultithreadFailure")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.exceptions.MultithreadFailure"); }
		static ::hx::ObjectPtr< MultithreadFailure_obj > __new(int count, ::Dynamic reason);
		static ::hx::ObjectPtr< MultithreadFailure_obj > __alloc(::hx::Ctx *_hx_ctx,int count, ::Dynamic reason);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MultithreadFailure_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MultithreadFailure",a7,2c,ce,7f); }

};

} // end namespace vision
} // end namespace exceptions

#endif /* INCLUDED_vision_exceptions_MultithreadFailure */ 
