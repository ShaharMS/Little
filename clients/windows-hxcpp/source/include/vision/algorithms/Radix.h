// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_algorithms_Radix
#define INCLUDED_vision_algorithms_Radix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,algorithms,Radix)

namespace vision{
namespace algorithms{


class HXCPP_CLASS_ATTRIBUTES Radix_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Radix_obj OBJ_;
		Radix_obj();

	public:
		enum { _hx_ClassId = 0x483c7518 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.algorithms.Radix")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.algorithms.Radix"); }

		inline static ::hx::ObjectPtr< Radix_obj > __new() {
			::hx::ObjectPtr< Radix_obj > __this = new Radix_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Radix_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Radix_obj *__this = (Radix_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Radix_obj), false, "vision.algorithms.Radix"));
			*(void **)__this = Radix_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Radix_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Radix",e4,80,45,77); }

		static  ::Dynamic getMax(::cpp::VirtualArray array, ::Dynamic endIndex);
		static ::Dynamic getMax_dyn();

		static ::cpp::VirtualArray countingSort(::cpp::VirtualArray array,int exp, ::Dynamic endIndex);
		static ::Dynamic countingSort_dyn();

		static ::cpp::VirtualArray sort(::cpp::VirtualArray main);
		static ::Dynamic sort_dyn();

};

} // end namespace vision
} // end namespace algorithms

#endif /* INCLUDED_vision_algorithms_Radix */ 
