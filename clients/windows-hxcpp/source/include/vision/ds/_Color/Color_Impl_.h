// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_ds__Color_Color_Impl_
#define INCLUDED_vision_ds__Color_Color_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS3(vision,ds,_Color,Color_Impl_)

namespace vision{
namespace ds{
namespace _Color{


class HXCPP_CLASS_ATTRIBUTES Color_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Color_Impl__obj OBJ_;
		Color_Impl__obj();

	public:
		enum { _hx_ClassId = 0x19955d80 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.ds._Color.Color_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.ds._Color.Color_Impl_"); }

		inline static ::hx::ObjectPtr< Color_Impl__obj > __new() {
			::hx::ObjectPtr< Color_Impl__obj > __this = new Color_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Color_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Color_Impl__obj *__this = (Color_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Color_Impl__obj), false, "vision.ds._Color.Color_Impl_"));
			*(void **)__this = Color_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Color_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Color_Impl_",23,f2,4f,b6); }

		static void __boot();
		static int TRANSPARENT;
		static int WHITE;
		static int GRAY;
		static int BLACK;
		static int GREEN;
		static int YELLOW;
		static int ORANGE;
		static int RED;
		static int PURPLE;
		static int BLUE;
		static int BROWN;
		static int PINK;
		static int MAGENTA;
		static int CYAN;
		static int SILVER;
		static int GOLD;
		static int OLIVE;
		static int MAROON;
		static int BORDEAUX;
		static int NAVY;
		static int TEAL;
		static int FUCHSIA;
		static int AQUA;
		static int LIME;
		static int CHARCOAL;
		static int ONYX;
		static int JET;
		static int JET_BLACK;
		static int ROYAL_BLUE;
		static  ::EReg COLOR_REGEX;
		static int fromInt(int value);
		static ::Dynamic fromInt_dyn();

		static int fromRGBA(int Red,int Green,int Blue,::hx::Null< int >  Alpha);
		static ::Dynamic fromRGBA_dyn();

		static int from8Bit(int Value);
		static ::Dynamic from8Bit_dyn();

		static int fromRGBAFloat(Float Red,Float Green,Float Blue,::hx::Null< Float >  Alpha);
		static ::Dynamic fromRGBAFloat_dyn();

		static int fromCMYK(Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  Alpha);
		static ::Dynamic fromCMYK_dyn();

		static int fromHSB(Float Hue,Float Saturation,Float Brightness,::hx::Null< Float >  Alpha);
		static ::Dynamic fromHSB_dyn();

		static int fromHSL(Float Hue,Float Saturation,Float Lightness,::hx::Null< Float >  Alpha);
		static ::Dynamic fromHSL_dyn();

		static  ::Dynamic fromString(::String str);
		static ::Dynamic fromString_dyn();

		static ::Array< int > getHSBColorWheel(::hx::Null< int >  Alpha);
		static ::Dynamic getHSBColorWheel_dyn();

		static int interpolate(int Color1,int Color2,::hx::Null< Float >  Factor);
		static ::Dynamic interpolate_dyn();

		static ::Array< int > gradient(int Color1,int Color2,int Steps, ::Dynamic Ease);
		static ::Dynamic gradient_dyn();

		static int makeRandom( ::Dynamic alphaLock,::hx::Null< int >  alphaValue);
		static ::Dynamic makeRandom_dyn();

		static int multiply(int lhs,int rhs);
		static ::Dynamic multiply_dyn();

		static int add(int lhs,int rhs);
		static ::Dynamic add_dyn();

		static int subtract(int lhs,int rhs);
		static ::Dynamic subtract_dyn();

		static int divide(int lhs,int rhs);
		static ::Dynamic divide_dyn();

		static int getComplementHarmony(int this1);
		static ::Dynamic getComplementHarmony_dyn();

		static  ::Dynamic getAnalogousHarmony(int this1,::hx::Null< int >  Threshold);
		static ::Dynamic getAnalogousHarmony_dyn();

		static  ::Dynamic getSplitComplementHarmony(int this1,::hx::Null< int >  Threshold);
		static ::Dynamic getSplitComplementHarmony_dyn();

		static  ::Dynamic getTriadicHarmony(int this1);
		static ::Dynamic getTriadicHarmony_dyn();

		static int to24Bit(int this1);
		static ::Dynamic to24Bit_dyn();

		static ::String toHexString(int this1,::hx::Null< bool >  Alpha,::hx::Null< bool >  Prefix);
		static ::Dynamic toHexString_dyn();

		static ::String toWebString(int this1);
		static ::Dynamic toWebString_dyn();

		static int darken(int this1,::hx::Null< Float >  Factor);
		static ::Dynamic darken_dyn();

		static int lighten(int this1,::hx::Null< Float >  Factor);
		static ::Dynamic lighten_dyn();

		static int invert(int this1);
		static ::Dynamic invert_dyn();

		static int setRGBA(int this1,int Red,int Green,int Blue,::hx::Null< int >  Alpha);
		static ::Dynamic setRGBA_dyn();

		static int setRGBAFloat(int this1,Float Red,Float Green,Float Blue,::hx::Null< Float >  Alpha);
		static ::Dynamic setRGBAFloat_dyn();

		static int setCMYK(int this1,Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  Alpha);
		static ::Dynamic setCMYK_dyn();

		static int setHSB(int this1,Float Hue,Float Saturation,Float Brightness,Float Alpha);
		static ::Dynamic setHSB_dyn();

		static int setHSL(int this1,Float Hue,Float Saturation,Float Lightness,Float Alpha);
		static ::Dynamic setHSL_dyn();

		static int setHSChromaMatch(int this1,Float Hue,Float Saturation,Float Chroma,Float Match,Float Alpha);
		static ::Dynamic setHSChromaMatch_dyn();

		static int grayscale(int this1,::hx::Null< bool >  simple);
		static ::Dynamic grayscale_dyn();

		static int blackOrWhite(int this1,::hx::Null< int >  threshold);
		static ::Dynamic blackOrWhite_dyn();

		static int _new(::hx::Null< int >  value);
		static ::Dynamic _new_dyn();

		static int getThis(int this1);
		static ::Dynamic getThis_dyn();

		static void validate(int this1);
		static ::Dynamic validate_dyn();

		static int get_red(int this1);
		static ::Dynamic get_red_dyn();

		static int get_green(int this1);
		static ::Dynamic get_green_dyn();

		static int get_blue(int this1);
		static ::Dynamic get_blue_dyn();

		static int get_alpha(int this1);
		static ::Dynamic get_alpha_dyn();

		static Float get_redFloat(int this1);
		static ::Dynamic get_redFloat_dyn();

		static Float get_greenFloat(int this1);
		static ::Dynamic get_greenFloat_dyn();

		static Float get_blueFloat(int this1);
		static ::Dynamic get_blueFloat_dyn();

		static Float get_alphaFloat(int this1);
		static ::Dynamic get_alphaFloat_dyn();

		static int set_red(int this1,int value);
		static ::Dynamic set_red_dyn();

		static int set_green(int this1,int value);
		static ::Dynamic set_green_dyn();

		static int set_blue(int this1,int value);
		static ::Dynamic set_blue_dyn();

		static int set_alpha(int this1,int value);
		static ::Dynamic set_alpha_dyn();

		static Float set_redFloat(int this1,Float value);
		static ::Dynamic set_redFloat_dyn();

		static Float set_greenFloat(int this1,Float value);
		static ::Dynamic set_greenFloat_dyn();

		static Float set_blueFloat(int this1,Float value);
		static ::Dynamic set_blueFloat_dyn();

		static Float set_alphaFloat(int this1,Float value);
		static ::Dynamic set_alphaFloat_dyn();

		static Float get_cyan(int this1);
		static ::Dynamic get_cyan_dyn();

		static Float get_magenta(int this1);
		static ::Dynamic get_magenta_dyn();

		static Float get_yellow(int this1);
		static ::Dynamic get_yellow_dyn();

		static Float get_black(int this1);
		static ::Dynamic get_black_dyn();

		static Float set_cyan(int this1,Float value);
		static ::Dynamic set_cyan_dyn();

		static Float set_magenta(int this1,Float value);
		static ::Dynamic set_magenta_dyn();

		static Float set_yellow(int this1,Float value);
		static ::Dynamic set_yellow_dyn();

		static Float set_black(int this1,Float value);
		static ::Dynamic set_black_dyn();

		static Float get_hue(int this1);
		static ::Dynamic get_hue_dyn();

		static Float get_brightness(int this1);
		static ::Dynamic get_brightness_dyn();

		static Float get_saturation(int this1);
		static ::Dynamic get_saturation_dyn();

		static Float get_lightness(int this1);
		static ::Dynamic get_lightness_dyn();

		static Float set_hue(int this1,Float value);
		static ::Dynamic set_hue_dyn();

		static Float set_saturation(int this1,Float value);
		static ::Dynamic set_saturation_dyn();

		static Float set_brightness(int this1,Float value);
		static ::Dynamic set_brightness_dyn();

		static Float set_lightness(int this1,Float value);
		static ::Dynamic set_lightness_dyn();

		static int set_rgb(int this1,int value);
		static ::Dynamic set_rgb_dyn();

		static int get_rgb(int this1);
		static ::Dynamic get_rgb_dyn();

		static Float maxColor(int this1);
		static ::Dynamic maxColor_dyn();

		static Float minColor(int this1);
		static ::Dynamic minColor_dyn();

		static int boundChannel(int this1,int value);
		static ::Dynamic boundChannel_dyn();

		static ::String toString(int this1);
		static ::Dynamic toString_dyn();

		static int toInt(int this1);
		static ::Dynamic toInt_dyn();

		static bool color_greater_than_color(int lhs,int rhs);
		static ::Dynamic color_greater_than_color_dyn();

		static bool color_greater_than_int(int lhs,int rhs);
		static ::Dynamic color_greater_than_int_dyn();

		static bool int_greater_than_color(int lhs,int rhs);
		static ::Dynamic int_greater_than_color_dyn();

		static bool color_greater_than_float(int lhs,Float rhs);
		static ::Dynamic color_greater_than_float_dyn();

		static bool float_greater_than_color(Float lhs,int rhs);
		static ::Dynamic float_greater_than_color_dyn();

		static bool color_greater_than_equal_color(int lhs,int rhs);
		static ::Dynamic color_greater_than_equal_color_dyn();

		static bool color_greater_than_equal_int(int lhs,int rhs);
		static ::Dynamic color_greater_than_equal_int_dyn();

		static bool int_greater_than_equal_color(int lhs,int rhs);
		static ::Dynamic int_greater_than_equal_color_dyn();

		static bool color_greater_than_equal_float(int lhs,Float rhs);
		static ::Dynamic color_greater_than_equal_float_dyn();

		static bool float_greater_than_equal_color(Float lhs,int rhs);
		static ::Dynamic float_greater_than_equal_color_dyn();

		static bool color_less_than_color(int lhs,int rhs);
		static ::Dynamic color_less_than_color_dyn();

		static bool color_less_than_int(int lhs,int rhs);
		static ::Dynamic color_less_than_int_dyn();

		static bool int_less_than_color(int lhs,int rhs);
		static ::Dynamic int_less_than_color_dyn();

		static bool color_less_than_float(int lhs,Float rhs);
		static ::Dynamic color_less_than_float_dyn();

		static bool float_less_than_color(Float lhs,int rhs);
		static ::Dynamic float_less_than_color_dyn();

		static bool color_less_than_equal_color(int lhs,int rhs);
		static ::Dynamic color_less_than_equal_color_dyn();

		static bool color_less_than_equal_int(int lhs,int rhs);
		static ::Dynamic color_less_than_equal_int_dyn();

		static bool int_less_than_equal_color(int lhs,int rhs);
		static ::Dynamic int_less_than_equal_color_dyn();

		static bool color_less_than_equal_float(int lhs,Float rhs);
		static ::Dynamic color_less_than_equal_float_dyn();

		static bool float_less_than_equal_color(Float lhs,int rhs);
		static ::Dynamic float_less_than_equal_color_dyn();

		static bool color_equal_color(int lhs,int rhs);
		static ::Dynamic color_equal_color_dyn();

		static bool color_equal_int(int lhs,int rhs);
		static ::Dynamic color_equal_int_dyn();

		static bool int_equal_color(int lhs,int rhs);
		static ::Dynamic int_equal_color_dyn();

		static bool color_equal_float(int lhs,Float rhs);
		static ::Dynamic color_equal_float_dyn();

		static bool float_equal_color(Float lhs,int rhs);
		static ::Dynamic float_equal_color_dyn();

		static bool color_not_equal_color(int lhs,int rhs);
		static ::Dynamic color_not_equal_color_dyn();

		static bool color_not_equal_int(int lhs,int rhs);
		static ::Dynamic color_not_equal_int_dyn();

		static bool int_not_equal_color(int lhs,int rhs);
		static ::Dynamic int_not_equal_color_dyn();

		static bool color_not_equal_float(int lhs,Float rhs);
		static ::Dynamic color_not_equal_float_dyn();

		static bool float_not_equal_color(Float lhs,int rhs);
		static ::Dynamic float_not_equal_color_dyn();

		static int color_bitwise_and_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_and_color_dyn();

		static int color_bitwise_and_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_and_int_dyn();

		static int int_bitwise_and_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_and_color_dyn();

		static int color_bitwise_or_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_or_color_dyn();

		static int color_bitwise_or_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_or_int_dyn();

		static int int_bitwise_or_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_or_color_dyn();

		static int color_bitwise_xor_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_xor_color_dyn();

		static int color_bitwise_xor_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_xor_int_dyn();

		static int int_bitwise_xor_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_xor_color_dyn();

		static int color_bitwise_left_shift_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_left_shift_color_dyn();

		static int color_bitwise_left_shift_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_left_shift_int_dyn();

		static int int_bitwise_left_shift_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_left_shift_color_dyn();

		static int color_bitwise_right_shift_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_right_shift_color_dyn();

		static int color_bitwise_right_shift_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_right_shift_int_dyn();

		static int int_bitwise_right_shift_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_right_shift_color_dyn();

		static int color_bitwise_unsigned_right_shift_color(int lhs,int rhs);
		static ::Dynamic color_bitwise_unsigned_right_shift_color_dyn();

		static int color_bitwise_unsigned_right_shift_int(int lhs,int rhs);
		static ::Dynamic color_bitwise_unsigned_right_shift_int_dyn();

		static int int_bitwise_unsigned_right_shift_color(int lhs,int rhs);
		static ::Dynamic int_bitwise_unsigned_right_shift_color_dyn();

};

} // end namespace vision
} // end namespace ds
} // end namespace _Color

#endif /* INCLUDED_vision_ds__Color_Color_Impl_ */ 
