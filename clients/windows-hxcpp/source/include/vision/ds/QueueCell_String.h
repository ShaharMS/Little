// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_ds_QueueCell_String
#define INCLUDED_vision_ds_QueueCell_String

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_c04346d07d9096ac_11_new)
HX_DECLARE_CLASS2(vision,ds,QueueCell_String)

namespace vision{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES QueueCell_String_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef QueueCell_String_obj OBJ_;
		QueueCell_String_obj();

	public:
		enum { _hx_ClassId = 0x197b92e0 };

		void __construct(::String value, ::vision::ds::QueueCell_String next, ::vision::ds::QueueCell_String previous);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vision.ds.QueueCell_String")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"vision.ds.QueueCell_String"); }

		inline static ::hx::ObjectPtr< QueueCell_String_obj > __new(::String value, ::vision::ds::QueueCell_String next, ::vision::ds::QueueCell_String previous) {
			::hx::ObjectPtr< QueueCell_String_obj > __this = new QueueCell_String_obj();
			__this->__construct(value,next,previous);
			return __this;
		}

		inline static ::hx::ObjectPtr< QueueCell_String_obj > __alloc(::hx::Ctx *_hx_ctx,::String value, ::vision::ds::QueueCell_String next, ::vision::ds::QueueCell_String previous) {
			QueueCell_String_obj *__this = (QueueCell_String_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QueueCell_String_obj), true, "vision.ds.QueueCell_String"));
			*(void **)__this = QueueCell_String_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_c04346d07d9096ac_11_new)
HXLINE(  12)		( ( ::vision::ds::QueueCell_String)(__this) )->previous = previous;
HXLINE(  13)		( ( ::vision::ds::QueueCell_String)(__this) )->value = value;
HXLINE(  14)		( ( ::vision::ds::QueueCell_String)(__this) )->next = next;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~QueueCell_String_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("QueueCell_String",3d,03,12,28); }

		 ::vision::ds::QueueCell_String previous;
		::String value;
		 ::vision::ds::QueueCell_String next;
		::String getValue();
		::Dynamic getValue_dyn();

};

} // end namespace vision
} // end namespace ds

#endif /* INCLUDED_vision_ds_QueueCell_String */ 
