// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_ds_Point2D
#define INCLUDED_vision_ds_Point2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(vision,ds,Point2D)

namespace vision{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES Point2D_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Point2D_obj OBJ_;
		Point2D_obj();

	public:
		enum { _hx_ClassId = 0x6266856b };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.ds.Point2D")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.ds.Point2D"); }
		static ::hx::ObjectPtr< Point2D_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static ::hx::ObjectPtr< Point2D_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Point2D_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Point2D",02,bc,72,1e); }

		Float x;
		Float y;
		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::vision::ds::Point2D copy();
		::Dynamic copy_dyn();

		Float distanceTo( ::vision::ds::Point2D point);
		::Dynamic distanceTo_dyn();

		Float degreesTo( ::vision::ds::Point2D point);
		::Dynamic degreesTo_dyn();

		Float radiansTo( ::vision::ds::Point2D point);
		::Dynamic radiansTo_dyn();

};

} // end namespace vision
} // end namespace ds

#endif /* INCLUDED_vision_ds_Point2D */ 
