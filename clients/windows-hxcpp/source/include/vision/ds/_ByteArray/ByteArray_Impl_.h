// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_ds__ByteArray_ByteArray_Impl_
#define INCLUDED_vision_ds__ByteArray_ByteArray_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(vision,ds,_ByteArray,ByteArray_Impl_)

namespace vision{
namespace ds{
namespace _ByteArray{


class HXCPP_CLASS_ATTRIBUTES ByteArray_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ByteArray_Impl__obj OBJ_;
		ByteArray_Impl__obj();

	public:
		enum { _hx_ClassId = 0x15913ba4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.ds._ByteArray.ByteArray_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.ds._ByteArray.ByteArray_Impl_"); }

		inline static ::hx::ObjectPtr< ByteArray_Impl__obj > __new() {
			::hx::ObjectPtr< ByteArray_Impl__obj > __this = new ByteArray_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ByteArray_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			ByteArray_Impl__obj *__this = (ByteArray_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ByteArray_Impl__obj), false, "vision.ds._ByteArray.ByteArray_Impl_"));
			*(void **)__this = ByteArray_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ByteArray_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ByteArray_Impl_",b1,b0,f9,e1); }

		static int read( ::haxe::io::Bytes this1,int index);
		static ::Dynamic read_dyn();

		static void write( ::haxe::io::Bytes this1,int index,int value);
		static ::Dynamic write_dyn();

		static void setUInt8( ::haxe::io::Bytes this1,int pos,int v);
		static ::Dynamic setUInt8_dyn();

		static int getUInt8( ::haxe::io::Bytes this1,int pos);
		static ::Dynamic getUInt8_dyn();

		static void setUInt32( ::haxe::io::Bytes this1,int pos,int value);
		static ::Dynamic setUInt32_dyn();

		static int getUInt32( ::haxe::io::Bytes this1,int pos);
		static ::Dynamic getUInt32_dyn();

		static void setInt8( ::haxe::io::Bytes this1,int pos,int v);
		static ::Dynamic setInt8_dyn();

		static int getInt8( ::haxe::io::Bytes this1,int pos);
		static ::Dynamic getInt8_dyn();

		static void setBytes( ::haxe::io::Bytes this1,int pos, ::haxe::io::Bytes array);
		static ::Dynamic setBytes_dyn();

		static  ::haxe::io::Bytes getBytes( ::haxe::io::Bytes this1,int pos,int length);
		static ::Dynamic getBytes_dyn();

		static  ::haxe::io::Bytes _new(int length,::hx::Null< int >  fillWith);
		static ::Dynamic _new_dyn();

		static void resize( ::haxe::io::Bytes this1,int length);
		static ::Dynamic resize_dyn();

		static  ::haxe::io::Bytes concat( ::haxe::io::Bytes this1, ::haxe::io::Bytes array);
		static ::Dynamic concat_dyn();

		static bool isEmpty( ::haxe::io::Bytes this1);
		static ::Dynamic isEmpty_dyn();

		static ::Array< int > toArray( ::haxe::io::Bytes this1);
		static ::Dynamic toArray_dyn();

};

} // end namespace vision
} // end namespace ds
} // end namespace _ByteArray

#endif /* INCLUDED_vision_ds__ByteArray_ByteArray_Impl_ */ 
