// Generated by Haxe 4.3.1
#ifndef INCLUDED_vision_tools_ImageTools
#define INCLUDED_vision_tools_ImageTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(vision,ds,Array2D)
HX_DECLARE_CLASS2(vision,tools,ImageTools)

namespace vision{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES ImageTools_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ImageTools_obj OBJ_;
		ImageTools_obj();

	public:
		enum { _hx_ClassId = 0x1915f5d3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="vision.tools.ImageTools")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"vision.tools.ImageTools"); }

		inline static ::hx::ObjectPtr< ImageTools_obj > __new() {
			::hx::ObjectPtr< ImageTools_obj > __this = new ImageTools_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ImageTools_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ImageTools_obj *__this = (ImageTools_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageTools_obj), false, "vision.tools.ImageTools"));
			*(void **)__this = ImageTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImageTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageTools",e0,5c,ad,16); }

		static void __boot();
		static int defaultResizeAlgorithm;
		static void loadFromFile( ::haxe::io::Bytes image,::String path, ::Dynamic onComplete);
		static ::Dynamic loadFromFile_dyn();

		static void saveToFile( ::haxe::io::Bytes image,::String pathWithFileName,::hx::Null< int >  saveFormat);
		static ::Dynamic saveToFile_dyn();

		static  ::haxe::io::Bytes addToScreen( ::haxe::io::Bytes image,int x,int y, ::Dynamic units);
		static ::Dynamic addToScreen_dyn();

		static  ::vision::ds::Array2D getNeighborsOfPixel( ::haxe::io::Bytes image,int x,int y,int kernelSize);
		static ::Dynamic getNeighborsOfPixel_dyn();

		static int grayscalePixel(int pixel);
		static ::Dynamic grayscalePixel_dyn();

};

} // end namespace vision
} // end namespace tools

#endif /* INCLUDED_vision_tools_ImageTools */ 
