// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_interpreter_memory_HashTables
#define INCLUDED_little_interpreter_memory_HashTables

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(little,interpreter,memory,HashTables)
HX_DECLARE_CLASS3(little,interpreter,memory,Storage)

namespace little{
namespace interpreter{
namespace memory{


class HXCPP_CLASS_ATTRIBUTES HashTables_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HashTables_obj OBJ_;
		HashTables_obj();

	public:
		enum { _hx_ClassId = 0x4c3dc8b8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.interpreter.memory.HashTables")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.interpreter.memory.HashTables"); }

		inline static ::hx::ObjectPtr< HashTables_obj > __new() {
			::hx::ObjectPtr< HashTables_obj > __this = new HashTables_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< HashTables_obj > __alloc(::hx::Ctx *_hx_ctx) {
			HashTables_obj *__this = (HashTables_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HashTables_obj), false, "little.interpreter.memory.HashTables"));
			*(void **)__this = HashTables_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HashTables_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HashTables",33,cb,bd,49); }

		static void __boot();
		static int OBJECT_HASH_TABLE_CELL_SIZE;
		static  ::haxe::io::Bytes generateObjectHashTable(::Array< ::Dynamic> pairs);
		static ::Dynamic generateObjectHashTable_dyn();

		static ::Array< ::Dynamic> readObjectHashTable( ::haxe::io::Bytes bytes, ::little::interpreter::memory::Storage storage);
		static ::Dynamic readObjectHashTable_dyn();

		static bool hashTableHasKey( ::haxe::io::Bytes hashTable,::String key, ::little::interpreter::memory::Storage storage);
		static ::Dynamic hashTableHasKey_dyn();

		static  ::Dynamic hashTableGetKey( ::haxe::io::Bytes hashTable,::String key, ::little::interpreter::memory::Storage storage);
		static ::Dynamic hashTableGetKey_dyn();

		static void objectAddKey(int object,::String key,int value,int type,int doc, ::little::interpreter::memory::Storage storage);
		static ::Dynamic objectAddKey_dyn();

		static void objectSetKey(int object,::String key, ::Dynamic pair, ::little::interpreter::memory::Storage storage);
		static ::Dynamic objectSetKey_dyn();

		static  ::Dynamic objectGetKey(int object,::String key, ::little::interpreter::memory::Storage storage);
		static ::Dynamic objectGetKey_dyn();

		static  ::haxe::io::Bytes getHashTableOf(int objectPointer, ::little::interpreter::memory::Storage storage);
		static ::Dynamic getHashTableOf_dyn();

};

} // end namespace little
} // end namespace interpreter
} // end namespace memory

#endif /* INCLUDED_little_interpreter_memory_HashTables */ 
