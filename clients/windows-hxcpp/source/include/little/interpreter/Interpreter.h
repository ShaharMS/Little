// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_interpreter_Interpreter
#define INCLUDED_little_interpreter_Interpreter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,interpreter,Interpreter)
HX_DECLARE_CLASS2(little,parser,ParserTokens)

namespace little{
namespace interpreter{


class HXCPP_CLASS_ATTRIBUTES Interpreter_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Interpreter_obj OBJ_;
		Interpreter_obj();

	public:
		enum { _hx_ClassId = 0x1531483a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.interpreter.Interpreter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.interpreter.Interpreter"); }

		inline static ::hx::ObjectPtr< Interpreter_obj > __new() {
			::hx::ObjectPtr< Interpreter_obj > __this = new Interpreter_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Interpreter_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Interpreter_obj *__this = (Interpreter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interpreter_obj), false, "little.interpreter.Interpreter"));
			*(void **)__this = Interpreter_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Interpreter_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Interpreter",9a,09,07,b9); }

		static ::Array< ::Dynamic> convert(::Array< ::Dynamic> pre);
		static ::Dynamic convert_dyn();

		static  ::little::interpreter::InterpTokens error(::String message,::String layer);
		static ::Dynamic error_dyn();

		static  ::little::interpreter::InterpTokens warn(::String message,::String layer);
		static ::Dynamic warn_dyn();

		static  ::little::interpreter::InterpTokens _hx_assert( ::little::interpreter::InterpTokens token, ::Dynamic isType,::String errorMessage);
		static ::Dynamic _hx_assert_dyn();

		static void setLine(int l);
		static ::Dynamic setLine_dyn();

		static void setModule(::String m);
		static ::Dynamic setModule_dyn();

		static void splitLine();
		static ::Dynamic splitLine_dyn();

		static void declareVariable( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens type, ::little::interpreter::InterpTokens doc);
		static ::Dynamic declareVariable_dyn();

		static void declareFunction( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens params, ::little::interpreter::InterpTokens doc);
		static ::Dynamic declareFunction_dyn();

		static  ::little::interpreter::InterpTokens condition( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens pattern, ::little::interpreter::InterpTokens body);
		static ::Dynamic condition_dyn();

		static  ::little::interpreter::InterpTokens write(::Array< ::Dynamic> assignees, ::little::interpreter::InterpTokens value);
		static ::Dynamic write_dyn();

		static  ::little::interpreter::InterpTokens call( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens params);
		static ::Dynamic call_dyn();

		static  ::little::interpreter::InterpTokens read( ::little::interpreter::InterpTokens name);
		static ::Dynamic read_dyn();

		static  ::little::interpreter::InterpTokens typeCast( ::little::interpreter::InterpTokens value, ::little::interpreter::InterpTokens type);
		static ::Dynamic typeCast_dyn();

		static  ::little::interpreter::InterpTokens run(::Array< ::Dynamic> body,::hx::Null< bool >  propagateReturns);
		static ::Dynamic run_dyn();

		static  ::little::interpreter::InterpTokens evaluate( ::little::interpreter::InterpTokens exp, ::Dynamic dontThrow);
		static ::Dynamic evaluate_dyn();

		static  ::little::interpreter::InterpTokens calculate(::Array< ::Dynamic> p);
		static ::Dynamic calculate_dyn();

		static ::Array< ::Dynamic> group(::Array< ::Dynamic> tokens);
		static ::Dynamic group_dyn();

};

} // end namespace little
} // end namespace interpreter

#endif /* INCLUDED_little_interpreter_Interpreter */ 
