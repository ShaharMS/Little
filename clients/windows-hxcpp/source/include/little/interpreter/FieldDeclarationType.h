// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_interpreter_FieldDeclarationType
#define INCLUDED_little_interpreter_FieldDeclarationType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,interpreter,FieldDeclarationType)
namespace little{
namespace interpreter{


class FieldDeclarationType_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef FieldDeclarationType_obj OBJ_;

	public:
		FieldDeclarationType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("little.interpreter.FieldDeclarationType",06,1f,39,84); }
		::String __ToString() const { return HX_("FieldDeclarationType.",94,a5,eb,c6) + _hx_tag; }

		static ::little::interpreter::FieldDeclarationType CLASS;
		static inline ::little::interpreter::FieldDeclarationType CLASS_dyn() { return CLASS; }
		static ::little::interpreter::FieldDeclarationType CONDITION;
		static inline ::little::interpreter::FieldDeclarationType CONDITION_dyn() { return CONDITION; }
		static ::little::interpreter::FieldDeclarationType FUNCTION;
		static inline ::little::interpreter::FieldDeclarationType FUNCTION_dyn() { return FUNCTION; }
		static ::little::interpreter::FieldDeclarationType OPERATOR;
		static inline ::little::interpreter::FieldDeclarationType OPERATOR_dyn() { return OPERATOR; }
		static ::little::interpreter::FieldDeclarationType VARIABLE;
		static inline ::little::interpreter::FieldDeclarationType VARIABLE_dyn() { return VARIABLE; }
};

} // end namespace little
} // end namespace interpreter

#endif /* INCLUDED_little_interpreter_FieldDeclarationType */ 
