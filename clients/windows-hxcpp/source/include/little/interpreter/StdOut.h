// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_interpreter_StdOut
#define INCLUDED_little_interpreter_StdOut

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,interpreter,InterpTokens)
HX_DECLARE_CLASS2(little,interpreter,StdOut)

namespace little{
namespace interpreter{


class HXCPP_CLASS_ATTRIBUTES StdOut_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef StdOut_obj OBJ_;
		StdOut_obj();

	public:
		enum { _hx_ClassId = 0x015ca80f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="little.interpreter.StdOut")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"little.interpreter.StdOut"); }
		static ::hx::ObjectPtr< StdOut_obj > __new();
		static ::hx::ObjectPtr< StdOut_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~StdOut_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("StdOut",cb,eb,6f,3c); }

		::String output;
		::Array< ::Dynamic> stdoutTokens;
		void reset();
		::Dynamic reset_dyn();

};

} // end namespace little
} // end namespace interpreter

#endif /* INCLUDED_little_interpreter_StdOut */ 
