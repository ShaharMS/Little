// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_tools_PrettyOutput
#define INCLUDED_little_tools_PrettyOutput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,tools,PrettyOutput)

namespace little{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES PrettyOutput_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PrettyOutput_obj OBJ_;
		PrettyOutput_obj();

	public:
		enum { _hx_ClassId = 0x06ce4378 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.tools.PrettyOutput")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.tools.PrettyOutput"); }

		inline static ::hx::ObjectPtr< PrettyOutput_obj > __new() {
			::hx::ObjectPtr< PrettyOutput_obj > __this = new PrettyOutput_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< PrettyOutput_obj > __alloc(::hx::Ctx *_hx_ctx) {
			PrettyOutput_obj *__this = (PrettyOutput_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PrettyOutput_obj), false, "little.tools.PrettyOutput"));
			*(void **)__this = PrettyOutput_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PrettyOutput_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PrettyOutput",77,3e,39,35); }

		static ::String generateAstHtml(::String code);
		static ::Dynamic generateAstHtml_dyn();

};

} // end namespace little
} // end namespace tools

#endif /* INCLUDED_little_tools_PrettyOutput */ 
