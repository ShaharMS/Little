// Generated by Haxe 4.3.1
#ifndef INCLUDED_little_parser_Parser
#define INCLUDED_little_parser_Parser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(little,lexer,LexerTokens)
HX_DECLARE_CLASS2(little,parser,Parser)
HX_DECLARE_CLASS2(little,parser,ParserTokens)

namespace little{
namespace parser{


class HXCPP_CLASS_ATTRIBUTES Parser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Parser_obj OBJ_;
		Parser_obj();

	public:
		enum { _hx_ClassId = 0x54a57e14 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="little.parser.Parser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"little.parser.Parser"); }

		inline static ::hx::ObjectPtr< Parser_obj > __new() {
			::hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Parser_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Parser_obj *__this = (Parser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), false, "little.parser.Parser"));
			*(void **)__this = Parser_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Parser_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Parser",ff,10,1d,22); }

		static void __boot();
		static ::Array< ::Dynamic> additionalParsingLevels;
		static ::Dynamic parse;
		static inline ::Dynamic &parse_dyn() {return parse; }

		static ::Array< ::Dynamic> convert(::Array< ::Dynamic> lexerTokens);
		static ::Dynamic convert_dyn();

		static ::Array< ::Dynamic> mergeBlocks(::Array< ::Dynamic> pre);
		static ::Dynamic mergeBlocks_dyn();

		static ::Array< ::Dynamic> mergeExpressions(::Array< ::Dynamic> pre);
		static ::Dynamic mergeExpressions_dyn();

		static ::Array< ::Dynamic> mergePropertyOperations(::Array< ::Dynamic> pre);
		static ::Dynamic mergePropertyOperations_dyn();

		static ::Array< ::Dynamic> mergeTypeDecls(::Array< ::Dynamic> pre);
		static ::Dynamic mergeTypeDecls_dyn();

		static ::Array< ::Dynamic> mergeComplexStructures(::Array< ::Dynamic> pre);
		static ::Dynamic mergeComplexStructures_dyn();

		static ::Array< ::Dynamic> mergeCalls(::Array< ::Dynamic> pre);
		static ::Dynamic mergeCalls_dyn();

		static ::Array< ::Dynamic> mergeWrites(::Array< ::Dynamic> pre);
		static ::Dynamic mergeWrites_dyn();

		static ::Array< ::Dynamic> mergeValuesWithTypeDeclarations(::Array< ::Dynamic> pre);
		static ::Dynamic mergeValuesWithTypeDeclarations_dyn();

		static ::Array< ::Dynamic> mergeNonBlockBodies(::Array< ::Dynamic> pre);
		static ::Dynamic mergeNonBlockBodies_dyn();

		static ::Array< ::Dynamic> mergeElses(::Array< ::Dynamic> pre);
		static ::Dynamic mergeElses_dyn();

		static int get_line();
		static ::Dynamic get_line_dyn();

		static int set_line(int l);
		static ::Dynamic set_line_dyn();

		static ::String get_module();
		static ::Dynamic get_module_dyn();

		static ::String set_module(::String l);
		static ::Dynamic set_module_dyn();

		static int linePart;
		static void setLine(int l);
		static ::Dynamic setLine_dyn();

		static void nextPart();
		static ::Dynamic nextPart_dyn();

		static void resetLines();
		static ::Dynamic resetLines_dyn();

};

} // end namespace little
} // end namespace parser

#endif /* INCLUDED_little_parser_Parser */ 
