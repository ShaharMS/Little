// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ConstantPool
#include <little/interpreter/memory/ConstantPool.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExtTree
#include <little/interpreter/memory/ExtTree.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExternalInterfacing
#include <little/interpreter/memory/ExternalInterfacing.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_HashTables
#include <little/interpreter/memory/HashTables.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Operators
#include <little/interpreter/memory/Operators.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Referrer
#include <little/interpreter/memory/Referrer.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_Extensions
#include <little/tools/Extensions.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_PrettyPrinter
#include <little/tools/PrettyPrinter.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_059d4a78092f8378_13_new,"little.interpreter.memory.Memory","new",0x06d1b3b4,"little.interpreter.memory.Memory.new","little/interpreter/memory/Memory.hx",13,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_33_get_currentMemorySize,"little.interpreter.memory.Memory","get_currentMemorySize",0xf3757926,"little.interpreter.memory.Memory.get_currentMemorySize","little/interpreter/memory/Memory.hx",33,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_50_reset,"little.interpreter.memory.Memory","reset",0xf304aa23,"little.interpreter.memory.Memory.reset","little/interpreter/memory/Memory.hx",50,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_69_store,"little.interpreter.memory.Memory","store",0x90527435,"little.interpreter.memory.Memory.store","little/interpreter/memory/Memory.hx",69,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_98_retrieve,"little.interpreter.memory.Memory","retrieve",0x187ca6a8,"little.interpreter.memory.Memory.retrieve","little/interpreter/memory/Memory.hx",98,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_184_valueFromType,"little.interpreter.memory.Memory","valueFromType",0x74b82a29,"little.interpreter.memory.Memory.valueFromType","little/interpreter/memory/Memory.hx",184,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_212_read,"little.interpreter.memory.Memory","read",0xf3505182,"little.interpreter.memory.Memory.read","little/interpreter/memory/Memory.hx",212,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_347_readFrom,"little.interpreter.memory.Memory","readFrom",0x59000c0c,"little.interpreter.memory.Memory.readFrom","little/interpreter/memory/Memory.hx",347,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_447_write,"little.interpreter.memory.Memory","write",0xdc95cd33,"little.interpreter.memory.Memory.write","little/interpreter/memory/Memory.hx",447,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_508_set,"little.interpreter.memory.Memory","set",0x06d57ef6,"little.interpreter.memory.Memory.set","little/interpreter/memory/Memory.hx",508,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_561_allocate,"little.interpreter.memory.Memory","allocate",0x7e305ee9,"little.interpreter.memory.Memory.allocate","little/interpreter/memory/Memory.hx",561,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_572_free,"little.interpreter.memory.Memory","free",0xeb6ba2d8,"little.interpreter.memory.Memory.free","little/interpreter/memory/Memory.hx",572,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_593_sizeOf,"little.interpreter.memory.Memory","sizeOf",0x69a64164,"little.interpreter.memory.Memory.sizeOf","little/interpreter/memory/Memory.hx",593,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_625_getTypeInformation,"little.interpreter.memory.Memory","getTypeInformation",0x04a64108,"little.interpreter.memory.Memory.getTypeInformation","little/interpreter/memory/Memory.hx",625,0x2caed79d)
HX_LOCAL_STACK_FRAME(_hx_pos_059d4a78092f8378_700_getTypeName,"little.interpreter.memory.Memory","getTypeName",0x6e8d902f,"little.interpreter.memory.Memory.getTypeName","little/interpreter/memory/Memory.hx",700,0x2caed79d)
namespace little{
namespace interpreter{
namespace memory{

void Memory_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_059d4a78092f8378_13_new)
HXLINE(  25)		this->maxMemorySize = ((int)1073741824 * 2);
HXLINE(  20)		this->memoryChunkSize = 512;
HXLINE(  40)		this->storage =  ::little::interpreter::memory::Storage_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  41)		this->referrer =  ::little::interpreter::memory::Referrer_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  42)		this->constants =  ::little::interpreter::memory::ConstantPool_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  43)		this->externs =  ::little::interpreter::memory::ExternalInterfacing_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  44)		this->operators =  ::little::interpreter::memory::Operators_obj::__alloc( HX_CTX );
            	}

Dynamic Memory_obj::__CreateEmpty() { return new Memory_obj; }

void *Memory_obj::_hx_vtable = 0;

Dynamic Memory_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Memory_obj > _hx_result = new Memory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Memory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19bbd626;
}

int Memory_obj::get_currentMemorySize(){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_33_get_currentMemorySize)
HXDLIN(  33)		return (this->storage->reserved->length + this->referrer->bytes->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Memory_obj,get_currentMemorySize,return )

void Memory_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_059d4a78092f8378_50_reset)
HXLINE(  51)		this->storage =  ::little::interpreter::memory::Storage_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  52)		this->referrer =  ::little::interpreter::memory::Referrer_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  53)		this->externs =  ::little::interpreter::memory::ExternalInterfacing_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  55)		this->operators->lhsOnly->clear();
HXLINE(  56)		this->operators->rhsOnly->clear();
HXLINE(  57)		this->operators->standard->clear();
HXLINE(  58)		this->operators->priority->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Memory_obj,reset,(void))

int Memory_obj::store( ::little::interpreter::InterpTokens token){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_69_store)
HXLINE(  70)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(3)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->copy();
HXDLIN(  70)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  70)		{
HXLINE(  70)			int _g = 0;
HXDLIN(  70)			int _g1 = _this->length;
HXDLIN(  70)			while((_g < _g1)){
HXLINE(  70)				_g = (_g + 1);
HXDLIN(  70)				int i = (_g - 1);
HXDLIN(  70)				{
HXLINE(  70)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  70)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN(  70)		if (result->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE(  71)			return this->constants->get(token);
            		}
            		else {
HXLINE(  72)			bool _hx_tmp;
HXDLIN(  72)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(7)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->init(3,::little::tools::InterpTokensSimple_obj::NUMBER_dyn())->init(4,::little::tools::InterpTokensSimple_obj::DECIMAL_dyn())->init(5,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->init(6,::little::tools::InterpTokensSimple_obj::CHARACTERS_dyn())->copy();
HXDLIN(  72)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN(  72)			{
HXLINE(  72)				int _g2 = 0;
HXDLIN(  72)				int _g3 = _this1->length;
HXDLIN(  72)				while((_g2 < _g3)){
HXLINE(  72)					_g2 = (_g2 + 1);
HXDLIN(  72)					int i1 = (_g2 - 1);
HXDLIN(  72)					{
HXLINE(  72)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  72)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN(  72)			if (!(result1->contains(::Type_obj::enumConstructor(token).toLowerCase()))) {
HXLINE(  72)				::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CHARACTERS_dyn())->copy();
HXDLIN(  72)				::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN(  72)				{
HXLINE(  72)					int _g4 = 0;
HXDLIN(  72)					int _g5 = _this2->length;
HXDLIN(  72)					while((_g4 < _g5)){
HXLINE(  72)						_g4 = (_g4 + 1);
HXDLIN(  72)						int i2 = (_g4 - 1);
HXDLIN(  72)						{
HXLINE(  72)							::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  72)							result2->__unsafe_set(i2,inValue2);
            						}
            					}
            				}
HXDLIN(  72)				_hx_tmp = result2->contains(::Type_obj::enumConstructor(token).toLowerCase());
            			}
            			else {
HXLINE(  72)				_hx_tmp = true;
            			}
HXDLIN(  72)			if (_hx_tmp) {
HXLINE(  73)				return this->storage->storeStatic(token);
            			}
            			else {
HXLINE(  74)				::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->copy();
HXDLIN(  74)				::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN(  74)				{
HXLINE(  74)					int _g6 = 0;
HXDLIN(  74)					int _g7 = _this3->length;
HXDLIN(  74)					while((_g6 < _g7)){
HXLINE(  74)						_g6 = (_g6 + 1);
HXDLIN(  74)						int i3 = (_g6 - 1);
HXDLIN(  74)						{
HXLINE(  74)							::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  74)							result3->__unsafe_set(i3,inValue3);
            						}
            					}
            				}
HXDLIN(  74)				if (result3->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE(  75)					return this->storage->storeObject(token);
            				}
            				else {
HXLINE(  76)					::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::FUNCTION_CODE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN(  76)					::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN(  76)					{
HXLINE(  76)						int _g8 = 0;
HXDLIN(  76)						int _g9 = _this4->length;
HXDLIN(  76)						while((_g8 < _g9)){
HXLINE(  76)							_g8 = (_g8 + 1);
HXDLIN(  76)							int i4 = (_g8 - 1);
HXDLIN(  76)							{
HXLINE(  76)								::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  76)								result4->__unsafe_set(i4,inValue4);
            							}
            						}
            					}
HXDLIN(  76)					if (result4->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE(  77)						return this->storage->storeCodeBlock(token);
            					}
            					else {
HXLINE(  78)						::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CONDITION_CODE_dyn())->copy();
HXDLIN(  78)						::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN(  78)						{
HXLINE(  78)							int _g10 = 0;
HXDLIN(  78)							int _g11 = _this5->length;
HXDLIN(  78)							while((_g10 < _g11)){
HXLINE(  78)								_g10 = (_g10 + 1);
HXDLIN(  78)								int i5 = (_g10 - 1);
HXDLIN(  78)								{
HXLINE(  78)									::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  78)									result5->__unsafe_set(i5,inValue5);
            								}
            							}
            						}
HXDLIN(  78)						if (result5->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE(  79)							return this->storage->storeCondition(token);
            						}
            						else {
HXLINE(  80)							::Array< ::Dynamic> _this6 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN(  80)							::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this6->length);
HXDLIN(  80)							{
HXLINE(  80)								int _g12 = 0;
HXDLIN(  80)								int _g13 = _this6->length;
HXDLIN(  80)								while((_g12 < _g13)){
HXLINE(  80)									_g12 = (_g12 + 1);
HXDLIN(  80)									int i6 = (_g12 - 1);
HXDLIN(  80)									{
HXLINE(  80)										::String inValue6 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this6,i6)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  80)										result6->__unsafe_set(i6,inValue6);
            									}
            								}
            							}
HXDLIN(  80)							if (result6->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE(  81)								return ( (int)(::Type_obj::enumParameters(token)->__get(0)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  84)		 ::little::interpreter::Runtime _hx_tmp1 = ::little::Little_obj::runtime;
HXDLIN(  84)		_hx_tmp1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Unable to allocate memory for token `",0e,6a,a4,48) + ::Std_obj::string(token)) + HX_("`.",ce,53,00,00))),HX_("Memory, Storage",e6,ab,0b,93));
HXLINE(  85)		return this->constants->_hx_NULL;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,store,return )

int Memory_obj::retrieve( ::little::interpreter::InterpTokens token){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_98_retrieve)
HXLINE( 100)		bool _hx_tmp;
HXDLIN( 100)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(8)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->init(3,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->init(4,::little::tools::InterpTokensSimple_obj::FUNCTION_CODE_dyn())->init(5,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->init(6,::little::tools::InterpTokensSimple_obj::CONDITION_CODE_dyn())->init(7,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN( 100)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 100)		{
HXLINE( 100)			int _g = 0;
HXDLIN( 100)			int _g1 = _this->length;
HXDLIN( 100)			while((_g < _g1)){
HXLINE( 100)				_g = (_g + 1);
HXDLIN( 100)				int i = (_g - 1);
HXDLIN( 100)				{
HXLINE( 100)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 100)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 100)		if (!(result->contains(::Type_obj::enumConstructor(token).toLowerCase()))) {
HXLINE( 101)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(7)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->init(3,::little::tools::InterpTokensSimple_obj::NUMBER_dyn())->init(4,::little::tools::InterpTokensSimple_obj::DECIMAL_dyn())->init(5,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->init(6,::little::tools::InterpTokensSimple_obj::CHARACTERS_dyn())->copy();
HXDLIN( 101)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 101)			{
HXLINE( 101)				int _g2 = 0;
HXDLIN( 101)				int _g3 = _this1->length;
HXDLIN( 101)				while((_g2 < _g3)){
HXLINE( 101)					_g2 = (_g2 + 1);
HXDLIN( 101)					int i1 = (_g2 - 1);
HXDLIN( 101)					{
HXLINE( 101)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 101)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXLINE( 100)			_hx_tmp = result1->contains(::Type_obj::enumConstructor(token).toLowerCase());
            		}
            		else {
HXLINE( 100)			_hx_tmp = true;
            		}
HXLINE(  99)		if (_hx_tmp) {
HXLINE( 103)			return this->store(token);
            		}
            		else {
HXLINE(  99)			switch((int)(token->_hx_getIndex())){
            				case (int)12: {
HXLINE( 165)					::Array< ::Dynamic> _g4 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 165)					 ::little::interpreter::InterpTokens _g5 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 166)					{
HXLINE( 167)						 ::little::interpreter::InterpTokens result2 = ::little::interpreter::Interpreter_obj::evaluate(token,null());
HXLINE( 168)						switch((int)(result2->_hx_getIndex())){
            							case (int)15: {
HXLINE( 169)								 ::little::interpreter::InterpTokens _g6 = result2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 169)								 ::little::interpreter::InterpTokens _g7 = result2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 169)								this->retrieve(result2);
            							}
            							break;
            							case (int)25: {
HXLINE( 169)								::String _g8 = result2->_hx_getString(0);
HXDLIN( 169)								this->retrieve(result2);
            							}
            							break;
            							default:{
HXLINE( 171)								 ::little::interpreter::Runtime _hx_tmp1 = ::little::Little_obj::runtime;
HXDLIN( 171)								_hx_tmp1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Code block returned a value that cannot be read from (for value: ",a4,1c,c3,ea) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),result2)) + HX_(")",29,00,00,00))),null());
HXLINE( 172)								HX_STACK_DO_THROW((HX_("Unable to retrieve a pointer to token ",fe,92,8d,ce) + ::Std_obj::string(result2)));
            							}
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 165)					::Array< ::Dynamic> _g9 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 165)					 ::little::interpreter::InterpTokens _g10 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 166)					{
HXLINE( 167)						 ::little::interpreter::InterpTokens result3 = ::little::interpreter::Interpreter_obj::evaluate(token,null());
HXLINE( 168)						switch((int)(result3->_hx_getIndex())){
            							case (int)15: {
HXLINE( 169)								 ::little::interpreter::InterpTokens _g11 = result3->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 169)								 ::little::interpreter::InterpTokens _g12 = result3->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 169)								this->retrieve(result3);
            							}
            							break;
            							case (int)25: {
HXLINE( 169)								::String _g13 = result3->_hx_getString(0);
HXDLIN( 169)								this->retrieve(result3);
            							}
            							break;
            							default:{
HXLINE( 171)								 ::little::interpreter::Runtime _hx_tmp2 = ::little::Little_obj::runtime;
HXDLIN( 171)								_hx_tmp2->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Code block returned a value that cannot be read from (for value: ",a4,1c,c3,ea) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),result3)) + HX_(")",29,00,00,00))),null());
HXLINE( 172)								HX_STACK_DO_THROW((HX_("Unable to retrieve a pointer to token ",fe,92,8d,ce) + ::Std_obj::string(result3)));
            							}
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE( 105)					 ::little::interpreter::InterpTokens _g14 = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 105)					 ::little::interpreter::InterpTokens _g15 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 107)					::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::PROPERTY_ACCESS_dyn())->copy();
HXDLIN( 107)					::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 107)					{
HXLINE( 107)						int _g16 = 0;
HXDLIN( 107)						int _g17 = _this2->length;
HXDLIN( 107)						while((_g16 < _g17)){
HXLINE( 107)							_g16 = (_g16 + 1);
HXDLIN( 107)							int i2 = (_g16 - 1);
HXDLIN( 107)							{
HXLINE( 107)								::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 107)								result4->__unsafe_set(i2,inValue2);
            							}
            						}
            					}
HXDLIN( 107)					if (result4->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE( 109)						 ::little::interpreter::InterpTokens temp = token;
HXLINE( 110)						while(true){
HXLINE( 110)							::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::PROPERTY_ACCESS_dyn())->copy();
HXDLIN( 110)							::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 110)							{
HXLINE( 110)								int _g18 = 0;
HXDLIN( 110)								int _g19 = _this3->length;
HXDLIN( 110)								while((_g18 < _g19)){
HXLINE( 110)									_g18 = (_g18 + 1);
HXDLIN( 110)									int i3 = (_g18 - 1);
HXDLIN( 110)									{
HXLINE( 110)										::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 110)										result5->__unsafe_set(i3,inValue3);
            									}
            								}
            							}
HXDLIN( 110)							if (!(result5->contains(::Type_obj::enumConstructor(temp).toLowerCase()))) {
HXLINE( 110)								goto _hx_goto_14;
            							}
HXLINE( 111)							temp = ::Type_obj::enumParameters(temp)->__get(0);
            						}
            						_hx_goto_14:;
HXLINE( 114)						::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 114)						::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 114)						{
HXLINE( 114)							int _g20 = 0;
HXDLIN( 114)							int _g21 = _this4->length;
HXDLIN( 114)							while((_g20 < _g21)){
HXLINE( 114)								_g20 = (_g20 + 1);
HXDLIN( 114)								int i4 = (_g20 - 1);
HXDLIN( 114)								{
HXLINE( 114)									::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 114)									result6->__unsafe_set(i4,inValue4);
            								}
            							}
            						}
HXDLIN( 114)						if (result6->contains(::Type_obj::enumConstructor(temp).toLowerCase())) {
HXLINE( 115)							temp = ::little::interpreter::Interpreter_obj::run(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(temp)->__get(0)) ),null());
            						}
HXLINE( 116)						::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::EXPRESSION_dyn())->copy();
HXDLIN( 116)						::Array< ::String > result7 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 116)						{
HXLINE( 116)							int _g22 = 0;
HXDLIN( 116)							int _g23 = _this5->length;
HXDLIN( 116)							while((_g22 < _g23)){
HXLINE( 116)								_g22 = (_g22 + 1);
HXDLIN( 116)								int i5 = (_g22 - 1);
HXDLIN( 116)								{
HXLINE( 116)									::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 116)									result7->__unsafe_set(i5,inValue5);
            								}
            							}
            						}
HXDLIN( 116)						if (result7->contains(::Type_obj::enumConstructor(temp).toLowerCase())) {
HXLINE( 117)							temp = ::little::interpreter::Interpreter_obj::calculate(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(temp)->__get(0)) ));
            						}
HXLINE( 118)						::Array< ::Dynamic> _this6 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 118)						::Array< ::String > result8 = ::Array_obj< ::String >::__new(_this6->length);
HXDLIN( 118)						{
HXLINE( 118)							int _g24 = 0;
HXDLIN( 118)							int _g25 = _this6->length;
HXDLIN( 118)							while((_g24 < _g25)){
HXLINE( 118)								_g24 = (_g24 + 1);
HXDLIN( 118)								int i6 = (_g24 - 1);
HXDLIN( 118)								{
HXLINE( 118)									::String inValue6 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this6,i6)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 118)									result8->__unsafe_set(i6,inValue6);
            								}
            							}
            						}
HXDLIN( 118)						if (!(result8->contains(::Type_obj::enumConstructor(temp).toLowerCase()))) {
HXLINE( 119)							int p = this->store(temp);
HXLINE( 121)							::Array< ::String > path = ::little::tools::Extensions_obj::asStringPath(token);
HXLINE( 122)							path->shift();
HXLINE( 123)							 ::Dynamic cell = this->readFrom( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("objectAddress",b5,00,cc,8b),p)
            								->setFixed(1,HX_("objectValue",32,9c,e7,a0),temp)),path);
HXLINE( 124)							if (::hx::IsEq( cell->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic),this->constants->EXTERN )) {
HXLINE( 125)								 ::little::tools::BaseOrderedMap params = ( ( ::little::tools::BaseOrderedMap)(::Type_obj::enumParameters(cell->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) );
HXLINE( 126)								::Array< ::Dynamic> forwardedParams = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 127)								{
HXLINE( 127)									 ::haxe::iterators::ArrayIterator _g26 = params->keys();
HXDLIN( 127)									while((_g26->current < _g26->array->get_length())){
HXLINE( 127)										::String key = ( (::String)(_g26->array->__get(_g26->current++)) );
HXLINE( 128)										forwardedParams->push(::little::interpreter::InterpTokens_obj::Identifier(key));
HXLINE( 129)										forwardedParams->push(::little::interpreter::InterpTokens_obj::SplitLine_dyn());
            									}
            								}
HXLINE( 131)								forwardedParams->pop().StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 133)								::Array< ::Dynamic> fin = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::FunctionCall(token,::little::interpreter::InterpTokens_obj::PartArray(forwardedParams)),::little::tools::Extensions_obj::asTokenPath(( (::String)(cell->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXDLIN( 133)								 ::little::interpreter::InterpTokens fin1 = ::little::interpreter::InterpTokens_obj::FunctionCode(params,::little::interpreter::InterpTokens_obj::Block(fin,::little::tools::Extensions_obj::asTokenPath(( (::String)(cell->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXLINE( 136)								return this->store(fin1);
            							}
            							else {
HXLINE( 138)								return ( (int)(this->readFrom( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("objectAddress",b5,00,cc,8b),p)
            									->setFixed(1,HX_("objectValue",32,9c,e7,a0),temp)),path)->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
            							}
            						}
            					}
HXLINE( 142)					::Array< ::String > path1 = ::little::tools::Extensions_obj::asStringPath(token);
HXLINE( 143)					 ::Dynamic cell1 = this->read(path1);
HXLINE( 144)					 ::little::interpreter::InterpTokens token1 = cell1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 144)					::Array< ::Dynamic> _this7 = ::Array_obj< ::Dynamic>::__new(7)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->init(3,::little::tools::InterpTokensSimple_obj::NUMBER_dyn())->init(4,::little::tools::InterpTokensSimple_obj::DECIMAL_dyn())->init(5,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->init(6,::little::tools::InterpTokensSimple_obj::CHARACTERS_dyn())->copy();
HXDLIN( 144)					::Array< ::String > result9 = ::Array_obj< ::String >::__new(_this7->length);
HXDLIN( 144)					{
HXLINE( 144)						int _g27 = 0;
HXDLIN( 144)						int _g28 = _this7->length;
HXDLIN( 144)						while((_g27 < _g28)){
HXLINE( 144)							_g27 = (_g27 + 1);
HXDLIN( 144)							int i7 = (_g27 - 1);
HXDLIN( 144)							{
HXLINE( 144)								::String inValue7 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this7,i7)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 144)								result9->__unsafe_set(i7,inValue7);
            							}
            						}
            					}
HXDLIN( 144)					if (result9->contains(::Type_obj::enumConstructor(token1).toLowerCase())) {
HXLINE( 145)						return this->store(cell1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic));
            					}
HXLINE( 146)					bool _hx_tmp3;
HXDLIN( 146)					if (this->externs->hasGlobal(path1)) {
HXLINE( 146)						 ::little::interpreter::InterpTokens token2 = cell1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 146)						::Array< ::Dynamic> _this8 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::FUNCTION_CODE_dyn())->copy();
HXDLIN( 146)						::Array< ::String > result10 = ::Array_obj< ::String >::__new(_this8->length);
HXDLIN( 146)						{
HXLINE( 146)							int _g29 = 0;
HXDLIN( 146)							int _g30 = _this8->length;
HXDLIN( 146)							while((_g29 < _g30)){
HXLINE( 146)								_g29 = (_g29 + 1);
HXDLIN( 146)								int i8 = (_g29 - 1);
HXDLIN( 146)								{
HXLINE( 146)									::String inValue8 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this8,i8)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 146)									result10->__unsafe_set(i8,inValue8);
            								}
            							}
            						}
HXDLIN( 146)						_hx_tmp3 = result10->contains(::Type_obj::enumConstructor(token2).toLowerCase());
            					}
            					else {
HXLINE( 146)						_hx_tmp3 = false;
            					}
HXDLIN( 146)					if (_hx_tmp3) {
HXLINE( 150)						 ::little::tools::BaseOrderedMap params1 = ( ( ::little::tools::BaseOrderedMap)(::Type_obj::enumParameters(cell1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) );
HXLINE( 151)						::Array< ::Dynamic> forwardedParams1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 152)						{
HXLINE( 152)							 ::haxe::iterators::ArrayIterator _g31 = params1->keys();
HXDLIN( 152)							while((_g31->current < _g31->array->get_length())){
HXLINE( 152)								::String key1 = ( (::String)(_g31->array->__get(_g31->current++)) );
HXLINE( 153)								forwardedParams1->push(::little::interpreter::InterpTokens_obj::Identifier(key1));
HXLINE( 154)								forwardedParams1->push(::little::interpreter::InterpTokens_obj::SplitLine_dyn());
            							}
            						}
HXLINE( 156)						forwardedParams1->pop().StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 158)						::Array< ::Dynamic> fin2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::FunctionCall(token,::little::interpreter::InterpTokens_obj::PartArray(forwardedParams1)),::little::tools::Extensions_obj::asTokenPath(( (::String)(cell1->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXDLIN( 158)						 ::little::interpreter::InterpTokens fin3 = ::little::interpreter::InterpTokens_obj::FunctionCode(params1,::little::interpreter::InterpTokens_obj::Block(fin2,::little::tools::Extensions_obj::asTokenPath(( (::String)(cell1->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXLINE( 161)						return this->store(fin3);
            					}
HXLINE( 163)					return ( (int)(cell1->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
            				}
            				break;
            				case (int)25: {
HXLINE( 105)					::String _g32 = token->_hx_getString(0);
HXLINE( 107)					::Array< ::Dynamic> _this9 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::PROPERTY_ACCESS_dyn())->copy();
HXDLIN( 107)					::Array< ::String > result11 = ::Array_obj< ::String >::__new(_this9->length);
HXDLIN( 107)					{
HXLINE( 107)						int _g33 = 0;
HXDLIN( 107)						int _g34 = _this9->length;
HXDLIN( 107)						while((_g33 < _g34)){
HXLINE( 107)							_g33 = (_g33 + 1);
HXDLIN( 107)							int i9 = (_g33 - 1);
HXDLIN( 107)							{
HXLINE( 107)								::String inValue9 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this9,i9)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 107)								result11->__unsafe_set(i9,inValue9);
            							}
            						}
            					}
HXDLIN( 107)					if (result11->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE( 109)						 ::little::interpreter::InterpTokens temp1 = token;
HXLINE( 110)						while(true){
HXLINE( 110)							::Array< ::Dynamic> _this10 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::PROPERTY_ACCESS_dyn())->copy();
HXDLIN( 110)							::Array< ::String > result12 = ::Array_obj< ::String >::__new(_this10->length);
HXDLIN( 110)							{
HXLINE( 110)								int _g35 = 0;
HXDLIN( 110)								int _g36 = _this10->length;
HXDLIN( 110)								while((_g35 < _g36)){
HXLINE( 110)									_g35 = (_g35 + 1);
HXDLIN( 110)									int i10 = (_g35 - 1);
HXDLIN( 110)									{
HXLINE( 110)										::String inValue10 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this10,i10)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 110)										result12->__unsafe_set(i10,inValue10);
            									}
            								}
            							}
HXDLIN( 110)							if (!(result12->contains(::Type_obj::enumConstructor(temp1).toLowerCase()))) {
HXLINE( 110)								goto _hx_goto_24;
            							}
HXLINE( 111)							temp1 = ::Type_obj::enumParameters(temp1)->__get(0);
            						}
            						_hx_goto_24:;
HXLINE( 114)						::Array< ::Dynamic> _this11 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 114)						::Array< ::String > result13 = ::Array_obj< ::String >::__new(_this11->length);
HXDLIN( 114)						{
HXLINE( 114)							int _g37 = 0;
HXDLIN( 114)							int _g38 = _this11->length;
HXDLIN( 114)							while((_g37 < _g38)){
HXLINE( 114)								_g37 = (_g37 + 1);
HXDLIN( 114)								int i11 = (_g37 - 1);
HXDLIN( 114)								{
HXLINE( 114)									::String inValue11 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this11,i11)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 114)									result13->__unsafe_set(i11,inValue11);
            								}
            							}
            						}
HXDLIN( 114)						if (result13->contains(::Type_obj::enumConstructor(temp1).toLowerCase())) {
HXLINE( 115)							temp1 = ::little::interpreter::Interpreter_obj::run(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(temp1)->__get(0)) ),null());
            						}
HXLINE( 116)						::Array< ::Dynamic> _this12 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::EXPRESSION_dyn())->copy();
HXDLIN( 116)						::Array< ::String > result14 = ::Array_obj< ::String >::__new(_this12->length);
HXDLIN( 116)						{
HXLINE( 116)							int _g39 = 0;
HXDLIN( 116)							int _g40 = _this12->length;
HXDLIN( 116)							while((_g39 < _g40)){
HXLINE( 116)								_g39 = (_g39 + 1);
HXDLIN( 116)								int i12 = (_g39 - 1);
HXDLIN( 116)								{
HXLINE( 116)									::String inValue12 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this12,i12)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 116)									result14->__unsafe_set(i12,inValue12);
            								}
            							}
            						}
HXDLIN( 116)						if (result14->contains(::Type_obj::enumConstructor(temp1).toLowerCase())) {
HXLINE( 117)							temp1 = ::little::interpreter::Interpreter_obj::calculate(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(temp1)->__get(0)) ));
            						}
HXLINE( 118)						::Array< ::Dynamic> _this13 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 118)						::Array< ::String > result15 = ::Array_obj< ::String >::__new(_this13->length);
HXDLIN( 118)						{
HXLINE( 118)							int _g41 = 0;
HXDLIN( 118)							int _g42 = _this13->length;
HXDLIN( 118)							while((_g41 < _g42)){
HXLINE( 118)								_g41 = (_g41 + 1);
HXDLIN( 118)								int i13 = (_g41 - 1);
HXDLIN( 118)								{
HXLINE( 118)									::String inValue13 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this13,i13)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 118)									result15->__unsafe_set(i13,inValue13);
            								}
            							}
            						}
HXDLIN( 118)						if (!(result15->contains(::Type_obj::enumConstructor(temp1).toLowerCase()))) {
HXLINE( 119)							int p1 = this->store(temp1);
HXLINE( 121)							::Array< ::String > path2 = ::little::tools::Extensions_obj::asStringPath(token);
HXLINE( 122)							path2->shift();
HXLINE( 123)							 ::Dynamic cell2 = this->readFrom( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("objectAddress",b5,00,cc,8b),p1)
            								->setFixed(1,HX_("objectValue",32,9c,e7,a0),temp1)),path2);
HXLINE( 124)							if (::hx::IsEq( cell2->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic),this->constants->EXTERN )) {
HXLINE( 125)								 ::little::tools::BaseOrderedMap params2 = ( ( ::little::tools::BaseOrderedMap)(::Type_obj::enumParameters(cell2->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) );
HXLINE( 126)								::Array< ::Dynamic> forwardedParams2 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 127)								{
HXLINE( 127)									 ::haxe::iterators::ArrayIterator _g43 = params2->keys();
HXDLIN( 127)									while((_g43->current < _g43->array->get_length())){
HXLINE( 127)										::String key2 = ( (::String)(_g43->array->__get(_g43->current++)) );
HXLINE( 128)										forwardedParams2->push(::little::interpreter::InterpTokens_obj::Identifier(key2));
HXLINE( 129)										forwardedParams2->push(::little::interpreter::InterpTokens_obj::SplitLine_dyn());
            									}
            								}
HXLINE( 131)								forwardedParams2->pop().StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 133)								::Array< ::Dynamic> fin4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::FunctionCall(token,::little::interpreter::InterpTokens_obj::PartArray(forwardedParams2)),::little::tools::Extensions_obj::asTokenPath(( (::String)(cell2->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXDLIN( 133)								 ::little::interpreter::InterpTokens fin5 = ::little::interpreter::InterpTokens_obj::FunctionCode(params2,::little::interpreter::InterpTokens_obj::Block(fin4,::little::tools::Extensions_obj::asTokenPath(( (::String)(cell2->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXLINE( 136)								return this->store(fin5);
            							}
            							else {
HXLINE( 138)								return ( (int)(this->readFrom( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("objectAddress",b5,00,cc,8b),p1)
            									->setFixed(1,HX_("objectValue",32,9c,e7,a0),temp1)),path2)->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
            							}
            						}
            					}
HXLINE( 142)					::Array< ::String > path3 = ::little::tools::Extensions_obj::asStringPath(token);
HXLINE( 143)					 ::Dynamic cell3 = this->read(path3);
HXLINE( 144)					 ::little::interpreter::InterpTokens token3 = cell3->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 144)					::Array< ::Dynamic> _this14 = ::Array_obj< ::Dynamic>::__new(7)->init(0,::little::tools::InterpTokensSimple_obj::TRUE_VALUE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::FALSE_VALUE_dyn())->init(2,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->init(3,::little::tools::InterpTokensSimple_obj::NUMBER_dyn())->init(4,::little::tools::InterpTokensSimple_obj::DECIMAL_dyn())->init(5,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->init(6,::little::tools::InterpTokensSimple_obj::CHARACTERS_dyn())->copy();
HXDLIN( 144)					::Array< ::String > result16 = ::Array_obj< ::String >::__new(_this14->length);
HXDLIN( 144)					{
HXLINE( 144)						int _g44 = 0;
HXDLIN( 144)						int _g45 = _this14->length;
HXDLIN( 144)						while((_g44 < _g45)){
HXLINE( 144)							_g44 = (_g44 + 1);
HXDLIN( 144)							int i14 = (_g44 - 1);
HXDLIN( 144)							{
HXLINE( 144)								::String inValue14 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this14,i14)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 144)								result16->__unsafe_set(i14,inValue14);
            							}
            						}
            					}
HXDLIN( 144)					if (result16->contains(::Type_obj::enumConstructor(token3).toLowerCase())) {
HXLINE( 145)						return this->store(cell3->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic));
            					}
HXLINE( 146)					bool _hx_tmp4;
HXDLIN( 146)					if (this->externs->hasGlobal(path3)) {
HXLINE( 146)						 ::little::interpreter::InterpTokens token4 = cell3->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 146)						::Array< ::Dynamic> _this15 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::FUNCTION_CODE_dyn())->copy();
HXDLIN( 146)						::Array< ::String > result17 = ::Array_obj< ::String >::__new(_this15->length);
HXDLIN( 146)						{
HXLINE( 146)							int _g46 = 0;
HXDLIN( 146)							int _g47 = _this15->length;
HXDLIN( 146)							while((_g46 < _g47)){
HXLINE( 146)								_g46 = (_g46 + 1);
HXDLIN( 146)								int i15 = (_g46 - 1);
HXDLIN( 146)								{
HXLINE( 146)									::String inValue15 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this15,i15)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 146)									result17->__unsafe_set(i15,inValue15);
            								}
            							}
            						}
HXDLIN( 146)						_hx_tmp4 = result17->contains(::Type_obj::enumConstructor(token4).toLowerCase());
            					}
            					else {
HXLINE( 146)						_hx_tmp4 = false;
            					}
HXDLIN( 146)					if (_hx_tmp4) {
HXLINE( 150)						 ::little::tools::BaseOrderedMap params3 = ( ( ::little::tools::BaseOrderedMap)(::Type_obj::enumParameters(cell3->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) );
HXLINE( 151)						::Array< ::Dynamic> forwardedParams3 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 152)						{
HXLINE( 152)							 ::haxe::iterators::ArrayIterator _g48 = params3->keys();
HXDLIN( 152)							while((_g48->current < _g48->array->get_length())){
HXLINE( 152)								::String key3 = ( (::String)(_g48->array->__get(_g48->current++)) );
HXLINE( 153)								forwardedParams3->push(::little::interpreter::InterpTokens_obj::Identifier(key3));
HXLINE( 154)								forwardedParams3->push(::little::interpreter::InterpTokens_obj::SplitLine_dyn());
            							}
            						}
HXLINE( 156)						forwardedParams3->pop().StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 158)						::Array< ::Dynamic> fin6 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::FunctionCall(token,::little::interpreter::InterpTokens_obj::PartArray(forwardedParams3)),::little::tools::Extensions_obj::asTokenPath(( (::String)(cell3->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXDLIN( 158)						 ::little::interpreter::InterpTokens fin7 = ::little::interpreter::InterpTokens_obj::FunctionCode(params3,::little::interpreter::InterpTokens_obj::Block(fin6,::little::tools::Extensions_obj::asTokenPath(( (::String)(cell3->__Field(HX_("objectTypeName",04,08,87,af),::hx::paccDynamic)) ))));
HXLINE( 161)						return this->store(fin7);
            					}
HXLINE( 163)					return ( (int)(cell3->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 179)		 ::little::interpreter::Runtime _hx_tmp5 = ::little::Little_obj::runtime;
HXDLIN( 179)		_hx_tmp5->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unable to retrieve a pointer to token ",fe,92,8d,ce) + ::Std_obj::string(token))),null());
HXLINE( 180)		return this->constants->_hx_NULL;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,retrieve,return )

 ::little::interpreter::InterpTokens Memory_obj::valueFromType(int address,::String type,::Array< ::String > fullPath,::Array< ::String > currentPath){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_184_valueFromType)
HXLINE( 198)		bool _hx_tmp;
HXLINE( 197)		bool _hx_tmp1;
HXLINE( 194)		bool _hx_tmp2;
HXLINE( 191)		bool _hx_tmp3;
HXLINE( 190)		bool _hx_tmp4;
HXLINE( 189)		bool _hx_tmp5;
HXLINE( 188)		bool _hx_tmp6;
HXLINE( 187)		bool _hx_tmp7;
HXLINE( 186)		bool _hx_tmp8;
HXLINE( 185)		if (((type == ::little::Little_obj::keywords->TYPE_STRING) == true)) {
HXLINE( 185)			return ::little::interpreter::InterpTokens_obj::Characters(this->storage->readString(address));
            		}
            		else {
HXLINE( 186)			_hx_tmp8 = (type == ::little::Little_obj::keywords->TYPE_INT);
HXDLIN( 186)			if ((_hx_tmp8 == true)) {
HXLINE( 186)				return ::little::interpreter::InterpTokens_obj::Number(this->storage->readInt32(address));
            			}
            			else {
HXLINE( 187)				_hx_tmp7 = (type == ::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN( 187)				if ((_hx_tmp7 == true)) {
HXLINE( 187)					return ::little::interpreter::InterpTokens_obj::Decimal(this->storage->readDouble(address));
            				}
            				else {
HXLINE( 188)					_hx_tmp6 = (type == ::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN( 188)					if ((_hx_tmp6 == true)) {
HXLINE( 188)						return this->constants->getFromPointer(address);
            					}
            					else {
HXLINE( 189)						_hx_tmp5 = (type == ::little::Little_obj::keywords->TYPE_FUNCTION);
HXDLIN( 189)						if ((_hx_tmp5 == true)) {
HXLINE( 189)							return this->storage->readCodeBlock(address);
            						}
            						else {
HXLINE( 190)							_hx_tmp4 = (type == ::little::Little_obj::keywords->TYPE_CONDITION);
HXDLIN( 190)							if ((_hx_tmp4 == true)) {
HXLINE( 190)								return this->storage->readCondition(address);
            							}
            							else {
HXLINE( 191)								_hx_tmp3 = (type == ::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN( 191)								if ((_hx_tmp3 == true)) {
HXLINE( 191)									return ::little::interpreter::InterpTokens_obj::ClassPointer(address);
            								}
            								else {
HXLINE( 194)									bool _hx_tmp9;
HXDLIN( 194)									bool _hx_tmp10;
HXDLIN( 194)									if ((type != ::little::Little_obj::keywords->TYPE_DYNAMIC)) {
HXLINE( 194)										_hx_tmp10 = (type == ::little::Little_obj::keywords->TYPE_UNKNOWN);
            									}
            									else {
HXLINE( 194)										_hx_tmp10 = true;
            									}
HXDLIN( 194)									if (_hx_tmp10) {
HXLINE( 194)										_hx_tmp9 = this->constants->hasPointer(address);
            									}
            									else {
HXLINE( 194)										_hx_tmp9 = false;
            									}
HXDLIN( 194)									if (_hx_tmp9) {
HXLINE( 196)										_hx_tmp2 = __hxcpp_enum_eq(this->constants->getFromPointer(address),::little::interpreter::InterpTokens_obj::NullValue_dyn());
            									}
            									else {
HXLINE( 194)										_hx_tmp2 = false;
            									}
HXDLIN( 194)									if ((_hx_tmp2 == true)) {
HXLINE( 196)										return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            									}
            									else {
HXLINE( 197)										_hx_tmp1 = (type == ::little::Little_obj::keywords->TYPE_SIGN);
HXDLIN( 197)										if ((_hx_tmp1 == true)) {
HXLINE( 197)											return this->storage->readSign(address);
            										}
            										else {
HXLINE( 198)											_hx_tmp = (type == ::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN( 198)											if ((_hx_tmp == true)) {
HXLINE( 199)												 ::little::interpreter::Runtime _hx_tmp11 = ::little::Little_obj::runtime;
HXDLIN( 199)												::String _hx_tmp12 = ((HX_("Could not get the value at ",59,ff,37,2a) + fullPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" - field ",d9,95,48,1f));
HXDLIN( 199)												return _hx_tmp11->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((_hx_tmp12 + currentPath->copy()->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" was declared, but has no value/type.",61,c4,73,50))),HX_("Memory, Storage",e6,ab,0b,93));
            											}
            											else {
HXLINE( 202)												return this->storage->readObject(address);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 185)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Memory_obj,valueFromType,return )

 ::Dynamic Memory_obj::read(::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_212_read)
HXLINE( 214)		if ((path->length == 0)) {
HXLINE( 215)			return  ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("objectAddress",b5,00,cc,8b),::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(-1))
            				->setFixed(1,HX_("objectValue",32,9c,e7,a0),null())
            				->setFixed(2,HX_("objectTypeName",04,08,87,af),null()));
            		}
HXLINE( 222)		 ::little::interpreter::InterpTokens current = null();
HXLINE( 223)		int currentAddress = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(-1);
HXLINE( 224)		::String currentType = null();
HXLINE( 226)		::Array< ::String > processed = path->copy();
HXLINE( 227)		::Array< ::String > wentThroughPath = ::Array_obj< ::String >::__new(0);
HXLINE( 231)		if (this->externs->hasGlobal(::Array_obj< ::String >::__new(1)->init(0,processed->__get(0)))) {
HXLINE( 232)			if (this->externs->hasGlobal(path)) {
HXLINE( 233)				 ::Dynamic object = this->externs->getGlobal(path);
HXLINE( 234)				::String typeName = this->getTypeName(this->externs->createPathFor(this->externs->globalProperties,path)->type);
HXLINE( 235)				return  ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b), ::Dynamic(object->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)))
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0), ::Dynamic(object->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic)))
            					->setFixed(2,HX_("objectTypeName",04,08,87,af),typeName));
            			}
            			else {
HXLINE( 241)				::Array< ::String > external = ::Array_obj< ::String >::__new(1)->init(0,processed->shift());
HXLINE( 242)				wentThroughPath->push(external->__get(0));
HXLINE( 243)				while(true){
HXLINE( 243)					 ::little::interpreter::memory::ExternalInterfacing _hx_tmp = this->externs;
HXDLIN( 243)					if (!(_hx_tmp->hasGlobal(external->concat(::Array_obj< ::String >::__new(1)->init(0,processed->__get(0)))))) {
HXLINE( 243)						goto _hx_goto_35;
            					}
HXLINE( 244)					external->push(processed->shift());
HXLINE( 245)					wentThroughPath->push(external->__get((external->length - 1)));
            				}
            				_hx_goto_35:;
HXLINE( 247)				 ::Dynamic object1 = this->externs->getGlobal(external);
HXLINE( 248)				current = object1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 249)				currentAddress = ( (int)(object1->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 250)				currentType = this->getTypeName(this->externs->createPathFor(this->externs->globalProperties,external)->type);
            			}
            		}
            		else {
HXLINE( 254)			if (!(this->referrer->exists(path->__get(0)))) {
HXLINE( 255)				::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Variable `",9c,39,d4,8a) + path->__get(0)) + HX_("` does not exist",83,01,48,04))),HX_("Memory, Referrer",d4,85,0f,64));
            			}
HXLINE( 257)			 ::Dynamic data = this->referrer->get(path->__get(0));
HXLINE( 258)			int data1 = ( (int)(data->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXDLIN( 258)			::String data2 = ( (::String)(data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXDLIN( 258)			::Array< ::String > current1 = path->copy();
HXDLIN( 258)			current = this->valueFromType(data1,data2,current1,::Array_obj< ::String >::__new(1)->init(0,path->__get(0)));
HXLINE( 260)			currentAddress = ( (int)(data->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXLINE( 261)			currentType = ( (::String)(data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXLINE( 262)			wentThroughPath->push(processed->shift());
            		}
HXLINE( 265)		while((processed->length > 0)){
HXLINE( 267)			::String identifier = ( (::String)(processed->shift()) );
HXLINE( 268)			wentThroughPath->push(identifier);
HXLINE( 269)			::String typeName1 = ::little::tools::Extensions_obj::type(current);
HXLINE( 275)			 ::little::interpreter::memory::ExternalInterfacing _hx_tmp1 = this->externs;
HXDLIN( 275)			if (_hx_tmp1->hasInstance(typeName1.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 276)				 ::little::interpreter::memory::ExtTree classProperties = ( ( ::little::interpreter::memory::ExtTree)(this->externs->instanceProperties->properties->get(typeName1)) );
HXLINE( 277)				if (classProperties->properties->exists(identifier)) {
HXLINE( 278)					 ::Dynamic newCurrent = ( ( ::little::interpreter::memory::ExtTree)(classProperties->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 279)					current = newCurrent->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 280)					currentAddress = ( (int)(newCurrent->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 281)					continue;
            				}
            			}
HXLINE( 286)			::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN( 286)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 286)			{
HXLINE( 286)				int _g = 0;
HXDLIN( 286)				int _g1 = _this->length;
HXDLIN( 286)				while((_g < _g1)){
HXLINE( 286)					_g = (_g + 1);
HXDLIN( 286)					int i = (_g - 1);
HXDLIN( 286)					{
HXLINE( 286)						::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 286)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 286)			if (result->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 287)				::String name = this->getTypeName(( (int)(::Type_obj::enumParameters(current)->__get(0)) ));
HXLINE( 288)				 ::little::interpreter::memory::ExternalInterfacing _hx_tmp2 = this->externs;
HXDLIN( 288)				if (_hx_tmp2->hasGlobal(name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 289)					 ::little::interpreter::memory::ExternalInterfacing classProperties1 = this->externs;
HXDLIN( 289)					 ::little::interpreter::memory::ExtTree classProperties2 = this->externs->globalProperties;
HXDLIN( 289)					 ::little::interpreter::memory::ExtTree classProperties3 = classProperties1->createPathFor(classProperties2,name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN));
HXLINE( 290)					if (classProperties3->properties->exists(identifier)) {
HXLINE( 291)						 ::Dynamic newCurrent1 = ( ( ::little::interpreter::memory::ExtTree)(classProperties3->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 292)						current = newCurrent1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 293)						currentAddress = ( (int)(newCurrent1->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 294)						continue;
            					}
            				}
            			}
HXLINE( 300)			 ::little::interpreter::memory::ExternalInterfacing _hx_tmp3 = this->externs;
HXDLIN( 300)			if (_hx_tmp3->hasInstance(::little::Little_obj::keywords->TYPE_DYNAMIC.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 301)				 ::little::interpreter::memory::ExtTree classProperties4 = ( ( ::little::interpreter::memory::ExtTree)(this->externs->instanceProperties->properties->get(::little::Little_obj::keywords->TYPE_DYNAMIC)) );
HXLINE( 302)				if (classProperties4->properties->exists(identifier)) {
HXLINE( 303)					 ::Dynamic newCurrent2 = ( ( ::little::interpreter::memory::ExtTree)(classProperties4->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 304)					current = newCurrent2->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 305)					currentAddress = ( (int)(newCurrent2->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 306)					continue;
            				}
            			}
HXLINE( 311)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->copy();
HXDLIN( 311)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 311)			{
HXLINE( 311)				int _g2 = 0;
HXDLIN( 311)				int _g3 = _this1->length;
HXDLIN( 311)				while((_g2 < _g3)){
HXLINE( 311)					_g2 = (_g2 + 1);
HXDLIN( 311)					int i1 = (_g2 - 1);
HXDLIN( 311)					{
HXLINE( 311)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 311)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN( 311)			if (result1->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 312)				 ::haxe::io::Bytes objectHashTableBytes = ::little::interpreter::memory::HashTables_obj::getHashTableOf(currentAddress,this->storage);
HXLINE( 314)				if (::little::interpreter::memory::HashTables_obj::hashTableHasKey(objectHashTableBytes,identifier,this->storage)) {
HXLINE( 315)					 ::Dynamic keyData = ::little::interpreter::memory::HashTables_obj::hashTableGetKey(objectHashTableBytes,identifier,this->storage);
HXLINE( 316)					int keyData1 = ( (int)(keyData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 316)					::String current2 = this->getTypeName(( (int)(keyData->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ));
HXDLIN( 316)					current = this->valueFromType(keyData1,current2,path->copy(),wentThroughPath);
HXLINE( 318)					currentAddress = ( (int)(keyData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
            				}
            			}
            			else {
HXLINE( 323)				wentThroughPath->pop();
HXLINE( 324)				::String p = wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXLINE( 325)				 ::little::interpreter::Runtime _hx_tmp4 = ::little::Little_obj::runtime;
HXDLIN( 325)				::String _hx_tmp5 = ((((HX_("Field `",5a,fb,7e,c9) + identifier) + HX_("` does not exist on `",dc,76,59,e9)) + p) + HX_("` ",c0,53,00,00));
HXDLIN( 325)				::String _hx_tmp6;
HXDLIN( 325)				::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->copy();
HXDLIN( 325)				::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 325)				{
HXLINE( 325)					int _g4 = 0;
HXDLIN( 325)					int _g5 = _this2->length;
HXDLIN( 325)					while((_g4 < _g5)){
HXLINE( 325)						_g4 = (_g4 + 1);
HXDLIN( 325)						int i2 = (_g4 - 1);
HXDLIN( 325)						{
HXLINE( 325)							::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 325)							result2->__unsafe_set(i2,inValue2);
            						}
            					}
            				}
HXDLIN( 325)				if (result2->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 325)					_hx_tmp6 = ((((HX_("(`",38,23,00,00) + p) + HX_("` is `",6a,fa,d3,14)) + ::little::Little_obj::keywords->NULL_VALUE) + HX_("`)",c9,53,00,00));
            				}
            				else {
HXLINE( 325)					_hx_tmp6 = HX_("",00,00,00,00);
            				}
HXDLIN( 325)				_hx_tmp4->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((_hx_tmp5 + _hx_tmp6)),null());
HXLINE( 326)				return  ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b),this->constants->_hx_NULL)
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::NullValue_dyn())
            					->setFixed(2,HX_("objectTypeName",04,08,87,af),::little::Little_obj::keywords->TYPE_DYNAMIC));
            			}
            		}
HXLINE( 334)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("objectAddress",b5,00,cc,8b),currentAddress)
            			->setFixed(1,HX_("objectValue",32,9c,e7,a0),current)
            			->setFixed(2,HX_("objectTypeName",04,08,87,af),::little::tools::Extensions_obj::type(current)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,read,return )

 ::Dynamic Memory_obj::readFrom( ::Dynamic value,::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_347_readFrom)
HXLINE( 348)		 ::little::interpreter::InterpTokens current = value->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 349)		int currentAddress = ( (int)(value->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 351)		::Array< ::String > processed = path->copy();
HXLINE( 352)		::Array< ::String > wentThroughPath = ::Array_obj< ::String >::__new(0);
HXLINE( 353)		while((processed->length > 0)){
HXLINE( 355)			::String identifier = ( (::String)(processed->shift()) );
HXLINE( 356)			wentThroughPath->push(identifier);
HXLINE( 357)			::String typeName = ::little::tools::Extensions_obj::type(current);
HXLINE( 363)			 ::little::interpreter::memory::ExternalInterfacing _hx_tmp = this->externs;
HXDLIN( 363)			if (_hx_tmp->hasInstance(typeName.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 364)				 ::little::interpreter::memory::ExtTree classProperties = ( ( ::little::interpreter::memory::ExtTree)(this->externs->instanceProperties->properties->get(typeName)) );
HXLINE( 365)				if (classProperties->properties->exists(identifier)) {
HXLINE( 366)					 ::Dynamic newCurrent = ( ( ::little::interpreter::memory::ExtTree)(classProperties->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 367)					current = newCurrent->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 368)					currentAddress = ( (int)(newCurrent->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 369)					continue;
            				}
            			}
HXLINE( 374)			::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN( 374)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 374)			{
HXLINE( 374)				int _g = 0;
HXDLIN( 374)				int _g1 = _this->length;
HXDLIN( 374)				while((_g < _g1)){
HXLINE( 374)					_g = (_g + 1);
HXDLIN( 374)					int i = (_g - 1);
HXDLIN( 374)					{
HXLINE( 374)						::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 374)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 374)			if (result->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 375)				::String name = this->getTypeName(( (int)(::Type_obj::enumParameters(current)->__get(0)) ));
HXLINE( 376)				 ::little::interpreter::memory::ExternalInterfacing _hx_tmp1 = this->externs;
HXDLIN( 376)				if (_hx_tmp1->hasGlobal(name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 377)					 ::little::interpreter::memory::ExternalInterfacing classProperties1 = this->externs;
HXDLIN( 377)					 ::little::interpreter::memory::ExtTree classProperties2 = this->externs->globalProperties;
HXDLIN( 377)					 ::little::interpreter::memory::ExtTree classProperties3 = classProperties1->createPathFor(classProperties2,name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN));
HXLINE( 378)					if (classProperties3->properties->exists(identifier)) {
HXLINE( 379)						 ::Dynamic newCurrent1 = ( ( ::little::interpreter::memory::ExtTree)(classProperties3->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 380)						current = newCurrent1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 381)						currentAddress = ( (int)(newCurrent1->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 382)						continue;
            					}
            				}
            			}
HXLINE( 388)			 ::little::interpreter::memory::ExternalInterfacing _hx_tmp2 = this->externs;
HXDLIN( 388)			if (_hx_tmp2->hasInstance(::little::Little_obj::keywords->TYPE_DYNAMIC.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN))) {
HXLINE( 389)				 ::little::interpreter::memory::ExtTree classProperties4 = ( ( ::little::interpreter::memory::ExtTree)(this->externs->instanceProperties->properties->get(::little::Little_obj::keywords->TYPE_DYNAMIC)) );
HXLINE( 390)				if (classProperties4->properties->exists(identifier)) {
HXLINE( 391)					 ::Dynamic newCurrent2 = ( ( ::little::interpreter::memory::ExtTree)(classProperties4->properties->get(identifier)) )->getter(current,currentAddress);
HXLINE( 392)					current = newCurrent2->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 393)					currentAddress = ( (int)(newCurrent2->__Field(HX_("objectAddress",b5,00,cc,8b),::hx::paccDynamic)) );
HXLINE( 394)					continue;
            				}
            			}
HXLINE( 399)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->copy();
HXDLIN( 399)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 399)			{
HXLINE( 399)				int _g2 = 0;
HXDLIN( 399)				int _g3 = _this1->length;
HXDLIN( 399)				while((_g2 < _g3)){
HXLINE( 399)					_g2 = (_g2 + 1);
HXDLIN( 399)					int i1 = (_g2 - 1);
HXDLIN( 399)					{
HXLINE( 399)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 399)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN( 399)			if (result1->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 400)				int objectHashTableBytesLength = this->storage->readInt32(currentAddress);
HXLINE( 401)				 ::little::interpreter::memory::Storage objectHashTableBytes = this->storage;
HXDLIN( 401)				 ::haxe::io::Bytes objectHashTableBytes1 = objectHashTableBytes->readBytes(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((currentAddress + 4)),objectHashTableBytesLength);
HXLINE( 403)				if (::little::interpreter::memory::HashTables_obj::hashTableHasKey(objectHashTableBytes1,identifier,this->storage)) {
HXLINE( 404)					 ::Dynamic keyData = ::little::interpreter::memory::HashTables_obj::hashTableGetKey(objectHashTableBytes1,identifier,this->storage);
HXLINE( 405)					int keyData1 = ( (int)(keyData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 405)					::String current1 = this->getTypeName(( (int)(keyData->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ));
HXDLIN( 405)					::Array< ::String > current2 = ::Array_obj< ::String >::__new(1)->init(0,::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),value->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic)));
HXDLIN( 405)					current = this->valueFromType(keyData1,current1,current2->concat(path->copy()),wentThroughPath);
HXLINE( 408)					currentAddress = ( (int)(keyData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
            				}
            			}
            			else {
HXLINE( 413)				wentThroughPath->pop();
HXLINE( 414)				::String p = wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXLINE( 415)				 ::little::interpreter::Runtime _hx_tmp3 = ::little::Little_obj::runtime;
HXDLIN( 415)				::String _hx_tmp4 = ((((HX_("Field `",5a,fb,7e,c9) + identifier) + HX_("` does not exist on `",dc,76,59,e9)) + p) + HX_("` ",c0,53,00,00));
HXDLIN( 415)				::String _hx_tmp5;
HXDLIN( 415)				::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->copy();
HXDLIN( 415)				::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 415)				{
HXLINE( 415)					int _g4 = 0;
HXDLIN( 415)					int _g5 = _this2->length;
HXDLIN( 415)					while((_g4 < _g5)){
HXLINE( 415)						_g4 = (_g4 + 1);
HXDLIN( 415)						int i2 = (_g4 - 1);
HXDLIN( 415)						{
HXLINE( 415)							::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 415)							result2->__unsafe_set(i2,inValue2);
            						}
            					}
            				}
HXDLIN( 415)				if (result2->contains(::Type_obj::enumConstructor(current).toLowerCase())) {
HXLINE( 415)					_hx_tmp5 = ((((HX_("(`",38,23,00,00) + p) + HX_("` is `",6a,fa,d3,14)) + ::little::Little_obj::keywords->NULL_VALUE) + HX_("`)",c9,53,00,00));
            				}
            				else {
HXLINE( 415)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
HXDLIN( 415)				_hx_tmp3->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((_hx_tmp4 + _hx_tmp5)),HX_("Memory",21,3f,54,39));
HXLINE( 417)				return  ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b),this->constants->_hx_NULL)
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::NullValue_dyn())
            					->setFixed(2,HX_("objectTypeName",04,08,87,af),::little::Little_obj::keywords->TYPE_DYNAMIC));
            			}
            		}
HXLINE( 425)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("objectAddress",b5,00,cc,8b),currentAddress)
            			->setFixed(1,HX_("objectValue",32,9c,e7,a0),current)
            			->setFixed(2,HX_("objectTypeName",04,08,87,af),::little::tools::Extensions_obj::type(current)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Memory_obj,readFrom,return )

void Memory_obj::write(::Array< ::String > path, ::little::interpreter::InterpTokens value,::String type,::String doc){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_447_write)
HXLINE( 454)		if ((path->length == 0)) {
HXLINE( 455)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Cannot write to an empty path",c4,00,47,05)),null());
            		}
HXLINE( 459)		if ((path->length == 1)) {
HXLINE( 460)			 ::little::interpreter::memory::Referrer _hx_tmp = this->referrer;
HXDLIN( 460)			::String path1 = path->__get(0);
HXDLIN( 460)			_hx_tmp->reference(path1,this->retrieve(value),type);
            		}
            		else {
HXLINE( 462)			::Array< ::String > pathCopy = path->slice(0,(path->length - 1));
HXLINE( 463)			::Array< ::String > wentThroughPath = ::Array_obj< ::String >::__new(1)->init(0,path->__get(0));
HXLINE( 464)			 ::little::interpreter::memory::Referrer current = this->referrer;
HXDLIN( 464)			 ::Dynamic current1 = current->get(( (::String)(pathCopy->shift()) ));
HXLINE( 465)			while((pathCopy->length > 0)){
HXLINE( 466)				if (!(( (bool)(this->getTypeInformation(( (::String)(current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("passedByReference",64,39,ab,71),::hx::paccDynamic)) ))) {
HXLINE( 467)					 ::little::interpreter::Runtime _hx_tmp1 = ::little::Little_obj::runtime;
HXDLIN( 467)					::String _hx_tmp2 = ((HX_("Cannot write to a static type. Only objects can have dynamic properties (",fc,37,97,83) + wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" is `",ca,56,91,b2));
HXDLIN( 467)					_hx_tmp1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage( ::Dynamic(((_hx_tmp2 + current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) + HX_("`)",c9,53,00,00)))),null());
            				}
HXLINE( 469)				 ::haxe::io::Bytes _hx_tmp3 = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 469)				if (!(::little::interpreter::memory::HashTables_obj::hashTableHasKey(_hx_tmp3,pathCopy->__get(0),this->storage))) {
HXLINE( 470)					::String a = wentThroughPath->concat(::Array_obj< ::String >::__new(1)->init(0,pathCopy->__get(0)))->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXLINE( 471)					::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Cannot write a property to ",57,4e,c6,a3) + a) + HX_(", since ",9a,cc,78,c0)) + pathCopy->__get(0)) + HX_(" does not exist (did you forget to define ",c6,99,46,a3)) + a) + HX_("?)",0a,37,00,00))),null());
            				}
HXLINE( 473)				 ::haxe::io::Bytes hashTableKey = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 473)				 ::Dynamic hashTableKey1 = ::little::interpreter::memory::HashTables_obj::hashTableGetKey(hashTableKey,pathCopy->__get(0),this->storage);
HXLINE( 475)				int hashTableKey2 = ( (int)(hashTableKey1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 474)				current1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("address",b4,71,0b,9d),hashTableKey2)
            					->setFixed(1,HX_("type",ba,f2,08,4d),this->getTypeName(( (int)(hashTableKey1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))));
HXLINE( 478)				wentThroughPath->push(pathCopy->shift());
            			}
HXLINE( 480)			if (!(( (bool)(this->getTypeInformation(( (::String)(current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("passedByReference",64,39,ab,71),::hx::paccDynamic)) ))) {
HXLINE( 481)				 ::little::interpreter::Runtime _hx_tmp4 = ::little::Little_obj::runtime;
HXDLIN( 481)				::String _hx_tmp5 = ((HX_("Cannot write to a property to values of a static type. Only objects can have dynamic properties (",38,85,87,0c) + wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" is `",ca,56,91,b2));
HXDLIN( 481)				_hx_tmp4->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage( ::Dynamic(((_hx_tmp5 + current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) + HX_("`)",c9,53,00,00)))),null());
            			}
HXLINE( 483)			 ::haxe::io::Bytes _hx_tmp6 = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 483)			if (!(::little::interpreter::memory::HashTables_obj::hashTableHasKey(_hx_tmp6,path->__get((path->length - 1)),this->storage))) {
HXLINE( 484)				int current2 = ( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXDLIN( 484)				::String path2 = path->__get((path->length - 1));
HXDLIN( 484)				int _hx_tmp7 = this->retrieve(value);
HXDLIN( 484)				int _hx_tmp8 = ( (int)(this->getTypeInformation(type)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN( 484)				int _hx_tmp9 = this->storage->storeString(doc);
HXDLIN( 484)				::little::interpreter::memory::HashTables_obj::objectAddKey(current2,path2,_hx_tmp7,_hx_tmp8,_hx_tmp9,this->storage);
            			}
            			else {
HXLINE( 486)				if (this->externs->instanceProperties->properties->exists(path->__get((path->length - 1)))) {
HXLINE( 487)					::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Cannot write to an extern property (",31,bb,a0,14) + path->__get((path->length - 1))) + HX_(")",29,00,00,00))),null());
            				}
            				else {
HXLINE( 489)					int current3 = ( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXDLIN( 489)					::String path3 = path->__get((path->length - 1));
HXLINE( 490)					 ::Dynamic _hx_tmp10;
HXDLIN( 490)					if (::hx::IsNotNull( value )) {
HXLINE( 490)						_hx_tmp10 = this->retrieve(value);
            					}
            					else {
HXLINE( 490)						_hx_tmp10 = null();
            					}
HXLINE( 491)					 ::Dynamic _hx_tmp11;
HXDLIN( 491)					if (::hx::IsNotNull( type )) {
HXLINE( 491)						_hx_tmp11 = this->getTypeInformation(type)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic);
            					}
            					else {
HXLINE( 491)						_hx_tmp11 = null();
            					}
HXLINE( 492)					 ::Dynamic _hx_tmp12;
HXDLIN( 492)					if (::hx::IsNotNull( doc )) {
HXLINE( 492)						_hx_tmp12 = this->storage->storeString(doc);
            					}
            					else {
HXLINE( 492)						_hx_tmp12 = null();
            					}
HXLINE( 489)					::little::interpreter::memory::HashTables_obj::objectSetKey(current3,path3, ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("doc",78,42,4c,00),_hx_tmp12)
            						->setFixed(1,HX_("value",71,7f,b8,31),_hx_tmp10)
            						->setFixed(2,HX_("type",ba,f2,08,4d),_hx_tmp11)),this->storage);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Memory_obj,write,(void))

void Memory_obj::set(::Array< ::String > path, ::little::interpreter::InterpTokens value,::String type,::String doc){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_508_set)
HXLINE( 509)		if ((path->length == 0)) {
HXLINE( 510)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Cannot set the value of an empty path",1b,31,7d,de)),null());
            		}
HXLINE( 514)		if ((path->length == 1)) {
HXLINE( 515)			if (this->referrer->exists(path->__get(0))) {
HXLINE( 516)				 ::little::interpreter::memory::Referrer _hx_tmp = this->referrer;
HXDLIN( 516)				::String path1 = path->__get(0);
HXDLIN( 516)				 ::Dynamic _hx_tmp1;
HXDLIN( 516)				if (::hx::IsNotNull( value )) {
HXLINE( 516)					_hx_tmp1 = this->retrieve(value);
            				}
            				else {
HXLINE( 516)					_hx_tmp1 = null();
            				}
HXDLIN( 516)				::String _hx_tmp2;
HXDLIN( 516)				if (::hx::IsNotNull( type )) {
HXLINE( 516)					_hx_tmp2 = type;
            				}
            				else {
HXLINE( 516)					_hx_tmp2 = null();
            				}
HXDLIN( 516)				_hx_tmp->set(path1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("address",b4,71,0b,9d),_hx_tmp1)
            					->setFixed(1,HX_("type",ba,f2,08,4d),_hx_tmp2)));
            			}
            			else {
HXLINE( 518)				::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Variable/function ",55,e5,29,a8) + path->__get(0)) + HX_(" does not exist",e3,95,38,52))),null());
            			}
            		}
            		else {
HXLINE( 521)			::Array< ::String > pathCopy = path->slice(0,(path->length - 1));
HXLINE( 522)			::Array< ::String > wentThroughPath = ::Array_obj< ::String >::__new(1)->init(0,path->__get(0));
HXLINE( 523)			 ::little::interpreter::memory::Referrer current = this->referrer;
HXDLIN( 523)			 ::Dynamic current1 = current->get(( (::String)(pathCopy->shift()) ));
HXLINE( 524)			while((pathCopy->length > 0)){
HXLINE( 525)				if (!(( (bool)(this->getTypeInformation(( (::String)(current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("passedByReference",64,39,ab,71),::hx::paccDynamic)) ))) {
HXLINE( 526)					 ::little::interpreter::Runtime _hx_tmp3 = ::little::Little_obj::runtime;
HXDLIN( 526)					::String _hx_tmp4 = ((HX_("Cannot set properties to values of a static type. Only objects can have dynamic properties (",85,a7,2a,dd) + wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" is `",ca,56,91,b2));
HXDLIN( 526)					_hx_tmp3->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage( ::Dynamic(((_hx_tmp4 + current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) + HX_("`)",c9,53,00,00)))),null());
            				}
HXLINE( 528)				 ::haxe::io::Bytes _hx_tmp5 = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 528)				if (!(::little::interpreter::memory::HashTables_obj::hashTableHasKey(_hx_tmp5,pathCopy->__get(0),this->storage))) {
HXLINE( 529)					::String a = wentThroughPath->concat(::Array_obj< ::String >::__new(1)->init(0,pathCopy->__get(0)))->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXLINE( 530)					::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Cannot set a property of ",98,2e,9a,f2) + a) + HX_(", since ",9a,cc,78,c0)) + pathCopy->__get(0)) + HX_(" does not exist (did you forget to define ",c6,99,46,a3)) + a) + HX_("?)",0a,37,00,00))),null());
            				}
HXLINE( 532)				 ::haxe::io::Bytes hashTableKey = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 532)				 ::Dynamic hashTableKey1 = ::little::interpreter::memory::HashTables_obj::hashTableGetKey(hashTableKey,pathCopy->__get(0),this->storage);
HXLINE( 534)				int hashTableKey2 = ( (int)(hashTableKey1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 533)				current1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("address",b4,71,0b,9d),hashTableKey2)
            					->setFixed(1,HX_("type",ba,f2,08,4d),this->getTypeName(( (int)(hashTableKey1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))));
HXLINE( 537)				wentThroughPath->push(pathCopy->shift());
            			}
HXLINE( 539)			if (!(( (bool)(this->getTypeInformation(( (::String)(current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("passedByReference",64,39,ab,71),::hx::paccDynamic)) ))) {
HXLINE( 540)				 ::little::interpreter::Runtime _hx_tmp6 = ::little::Little_obj::runtime;
HXDLIN( 540)				::String _hx_tmp7 = ((HX_("Cannot set properties to values of a static type. Only objects can have dynamic properties (",85,a7,2a,dd) + wentThroughPath->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(" is `",ca,56,91,b2));
HXDLIN( 540)				_hx_tmp6->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage( ::Dynamic(((_hx_tmp7 + current1->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) + HX_("`)",c9,53,00,00)))),null());
            			}
HXLINE( 542)			 ::haxe::io::Bytes _hx_tmp8 = ::little::interpreter::memory::HashTables_obj::getHashTableOf(( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ),this->storage);
HXDLIN( 542)			if (::little::interpreter::memory::HashTables_obj::hashTableHasKey(_hx_tmp8,path->__get((path->length - 1)),this->storage)) {
HXLINE( 543)				int current2 = ( (int)(current1->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXDLIN( 543)				::String path2 = path->__get((path->length - 1));
HXLINE( 544)				 ::Dynamic _hx_tmp9;
HXDLIN( 544)				if (::hx::IsNotNull( value )) {
HXLINE( 544)					_hx_tmp9 = this->retrieve(value);
            				}
            				else {
HXLINE( 544)					_hx_tmp9 = null();
            				}
HXLINE( 545)				 ::Dynamic _hx_tmp10;
HXDLIN( 545)				if (::hx::IsNotNull( type )) {
HXLINE( 545)					_hx_tmp10 = this->getTypeInformation(type)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic);
            				}
            				else {
HXLINE( 545)					_hx_tmp10 = null();
            				}
HXLINE( 546)				 ::Dynamic _hx_tmp11;
HXDLIN( 546)				if (::hx::IsNotNull( doc )) {
HXLINE( 546)					_hx_tmp11 = this->storage->storeString(doc);
            				}
            				else {
HXLINE( 546)					_hx_tmp11 = null();
            				}
HXLINE( 543)				::little::interpreter::memory::HashTables_obj::objectSetKey(current2,path2, ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("doc",78,42,4c,00),_hx_tmp11)
            					->setFixed(1,HX_("value",71,7f,b8,31),_hx_tmp9)
            					->setFixed(2,HX_("type",ba,f2,08,4d),_hx_tmp10)),this->storage);
            			}
            			else {
HXLINE( 548)				if (this->externs->instanceProperties->properties->exists(path->__get((path->length - 1)))) {
HXLINE( 549)					::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Cannot set an extern property (",45,32,b6,73) + path->__get((path->length - 1))) + HX_(")",29,00,00,00))),null());
            				}
            				else {
HXLINE( 551)					 ::little::interpreter::Runtime _hx_tmp12 = ::little::Little_obj::runtime;
HXDLIN( 551)					::String _hx_tmp13 = ((HX_("Cannot set the value of ",50,29,ef,3e) + path->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(", since ",9a,cc,78,c0));
HXDLIN( 551)					_hx_tmp12->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((_hx_tmp13 + path->__get((path->length - 1))) + HX_(" does not exist.",eb,90,4a,9f))),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Memory_obj,set,(void))

int Memory_obj::allocate(int size){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_561_allocate)
HXLINE( 562)		if ((size <= 0)) {
HXLINE( 563)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Cannot allocate ",86,bb,c7,60) + size) + HX_(" bytes",4b,94,03,89))),null());
            		}
HXLINE( 564)		return this->storage->storeBytes(size,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,allocate,return )

void Memory_obj::free(int pointer,int size){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_572_free)
HXLINE( 573)		if ((::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toInt(pointer) < 0)) {
HXLINE( 574)			 ::little::interpreter::Runtime _hx_tmp = ::little::Little_obj::runtime;
HXDLIN( 574)			_hx_tmp->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Cannot free bytes at negative address ",56,84,4a,0f) + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer))),null());
            		}
HXLINE( 575)		int _hx_tmp1 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toInt(pointer);
HXDLIN( 575)		if ((_hx_tmp1 < this->constants->capacity)) {
HXLINE( 576)			 ::little::interpreter::Runtime _hx_tmp2 = ::little::Little_obj::runtime;
HXDLIN( 576)			::String _hx_tmp3 = ((HX_("Cannot free bytes from the constant pool (addresses 0 to ",30,79,f7,6b) + this->constants->capacity) + HX_(", attempted to free address ",e3,13,1e,dd));
HXDLIN( 576)			_hx_tmp2->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((_hx_tmp3 + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)) + HX_(")",29,00,00,00))),null());
            		}
HXLINE( 577)		int _hx_tmp4 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toInt(pointer);
HXDLIN( 577)		if ((_hx_tmp4 >= this->get_currentMemorySize())) {
HXLINE( 578)			 ::little::interpreter::Runtime _hx_tmp5 = ::little::Little_obj::runtime;
HXDLIN( 578)			::String _hx_tmp6 = ((HX_("Cannot free bytes at an address greater than the current memory size (",37,06,e8,36) + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)) + HX_(" requested but ",d1,c5,04,5d));
HXDLIN( 578)			_hx_tmp5->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((_hx_tmp6 + this->get_currentMemorySize()) + HX_(" addresses exist)",f0,9e,cb,38))),null());
            		}
HXLINE( 579)		if ((size <= 0)) {
HXLINE( 580)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Cannot free ",37,45,a6,c3) + size) + HX_(" bytes",4b,94,03,89))),null());
            		}
HXLINE( 581)		int _hx_tmp7 = (::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toInt(pointer) + size);
HXDLIN( 581)		if ((_hx_tmp7 > this->get_currentMemorySize())) {
HXLINE( 582)			 ::little::interpreter::Runtime _hx_tmp8 = ::little::Little_obj::runtime;
HXDLIN( 582)			::String _hx_tmp9 = ((((HX_("Cannot free bytes: The requested free overflows the current memory size (",2a,d6,f2,ea) + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)) + HX_(" + ",b5,6d,18,00)) + size) + HX_(" requested but ",d1,c5,04,5d));
HXDLIN( 582)			_hx_tmp8->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((_hx_tmp9 + this->get_currentMemorySize()) + HX_(" addresses exist)",f0,9e,cb,38))),null());
            		}
HXLINE( 583)		this->storage->freeBytes(pointer,size);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Memory_obj,free,(void))

 ::Dynamic Memory_obj::sizeOf(int pointer,::String type){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_593_sizeOf)
HXLINE( 610)		bool _hx_tmp;
HXLINE( 606)		bool _hx_tmp1;
HXLINE( 605)		bool _hx_tmp2;
HXLINE( 604)		bool _hx_tmp3;
HXLINE( 603)		bool _hx_tmp4;
HXLINE( 599)		bool _hx_tmp5;
HXLINE( 598)		bool _hx_tmp6;
HXLINE( 597)		bool _hx_tmp7;
HXLINE( 596)		bool _hx_tmp8;
HXLINE( 595)		bool _hx_tmp9;
HXLINE( 594)		if (((type == ::little::Little_obj::keywords->TYPE_INT) == true)) {
HXLINE( 594)			return 4;
            		}
            		else {
HXLINE( 595)			_hx_tmp9 = (type == ::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN( 595)			if ((_hx_tmp9 == true)) {
HXLINE( 595)				return 8;
            			}
            			else {
HXLINE( 596)				_hx_tmp8 = (type == ::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN( 596)				if ((_hx_tmp8 == true)) {
HXLINE( 596)					return 1;
            				}
            				else {
HXLINE( 597)					_hx_tmp7 = (type == ::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN( 597)					if ((_hx_tmp7 == true)) {
HXLINE( 597)						return null();
            					}
            					else {
HXLINE( 598)						_hx_tmp6 = (type == ::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN( 598)						if ((_hx_tmp6 == true)) {
HXLINE( 598)							return null();
            						}
            						else {
HXLINE( 599)							_hx_tmp5 = (type == ::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN( 599)							if ((_hx_tmp5 == true)) {
HXLINE( 600)								if (this->externs->externToPointer->exists(type)) {
HXLINE( 600)									return 1;
            								}
            								else {
HXLINE( 601)									return 16;
            								}
            							}
            							else {
HXLINE( 603)								_hx_tmp4 = (type == ::little::Little_obj::keywords->TYPE_STRING);
HXDLIN( 603)								if ((_hx_tmp4 == true)) {
HXLINE( 607)									int length = this->storage->readInt32(pointer);
HXLINE( 608)									return (4 + length);
            								}
            								else {
HXLINE( 604)									_hx_tmp3 = (type == ::little::Little_obj::keywords->TYPE_SIGN);
HXDLIN( 604)									if ((_hx_tmp3 == true)) {
HXLINE( 607)										int length1 = this->storage->readInt32(pointer);
HXLINE( 608)										return (4 + length1);
            									}
            									else {
HXLINE( 605)										_hx_tmp2 = (type == ::little::Little_obj::keywords->TYPE_CONDITION);
HXDLIN( 605)										if ((_hx_tmp2 == true)) {
HXLINE( 607)											int length2 = this->storage->readInt32(pointer);
HXLINE( 608)											return (4 + length2);
            										}
            										else {
HXLINE( 606)											_hx_tmp1 = (type == ::little::Little_obj::keywords->TYPE_FUNCTION);
HXDLIN( 606)											if ((_hx_tmp1 == true)) {
HXLINE( 607)												int length3 = this->storage->readInt32(pointer);
HXLINE( 608)												return (4 + length3);
            											}
            											else {
HXLINE( 610)												_hx_tmp = (type == ::little::Little_obj::keywords->TYPE_ARRAY);
HXDLIN( 610)												if ((_hx_tmp == true)) {
HXLINE( 611)													int length4 = this->storage->readInt32(pointer);
HXLINE( 612)													 ::little::interpreter::memory::Storage elementSize = this->storage;
HXDLIN( 612)													int elementSize1 = elementSize->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4)));
HXLINE( 613)													return (8 + (length4 * elementSize1));
            												}
            												else {
HXLINE( 615)													return 8;
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 594)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Memory_obj,sizeOf,return )

 ::Dynamic Memory_obj::getTypeInformation(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_059d4a78092f8378_625_getTypeInformation)
HXLINE( 628)		int p;
HXLINE( 634)		bool _hx_tmp;
HXLINE( 633)		bool _hx_tmp1;
HXLINE( 632)		bool _hx_tmp2;
HXLINE( 631)		bool _hx_tmp3;
HXLINE( 630)		bool _hx_tmp4;
HXLINE( 629)		if (((name == ::little::Little_obj::keywords->TYPE_INT) == true)) {
HXLINE( 628)			p = this->constants->INT;
            		}
            		else {
HXLINE( 630)			_hx_tmp4 = (name == ::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN( 630)			if ((_hx_tmp4 == true)) {
HXLINE( 628)				p = this->constants->FLOAT;
            			}
            			else {
HXLINE( 631)				_hx_tmp3 = (name == ::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN( 631)				if ((_hx_tmp3 == true)) {
HXLINE( 628)					p = this->constants->BOOL;
            				}
            				else {
HXLINE( 632)					_hx_tmp2 = (name == ::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN( 632)					if ((_hx_tmp2 == true)) {
HXLINE( 628)						p = this->constants->DYNAMIC;
            					}
            					else {
HXLINE( 633)						_hx_tmp1 = (name == ::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN( 633)						if ((_hx_tmp1 == true)) {
HXLINE( 628)							p = this->constants->TYPE;
            						}
            						else {
HXLINE( 634)							_hx_tmp = (name == ::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN( 634)							if ((_hx_tmp == true)) {
HXLINE( 628)								p = this->constants->UNKNOWN;
            							}
            							else {
HXLINE( 628)								p = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 637)		if ((p != 0)) {
HXLINE( 640)			::String _hx_tmp5;
HXDLIN( 640)			switch((int)(p)){
            				case (int)11: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_INT;
            				}
            				break;
            				case (int)12: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_FLOAT;
            				}
            				break;
            				case (int)13: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_BOOLEAN;
            				}
            				break;
            				case (int)14: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_DYNAMIC;
            				}
            				break;
            				case (int)15: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_MODULE;
            				}
            				break;
            				case (int)16: {
HXLINE( 640)					_hx_tmp5 = ::little::Little_obj::keywords->TYPE_UNKNOWN;
            				}
            				break;
            				default:{
HXLINE( 647)					HX_STACK_DO_THROW(HX_("How did we get here? 5",f9,6f,75,28));
            				}
            			}
HXLINE( 649)			bool _hx_tmp6;
HXDLIN( 649)			if ((p >= 14)) {
HXLINE( 649)				_hx_tmp6 = (p <= 15);
            			}
            			else {
HXLINE( 649)				_hx_tmp6 = false;
            			}
HXLINE( 651)			 ::haxe::ds::StringMap _hx_tmp7 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 652)			 ::haxe::ds::StringMap _hx_tmp8 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 653)			int _hx_tmp9;
HXDLIN( 653)			switch((int)(p)){
            				case (int)11: {
HXLINE( 653)					_hx_tmp9 = 4;
            				}
            				break;
            				case (int)12: {
HXLINE( 653)					_hx_tmp9 = 8;
            				}
            				break;
            				case (int)13: {
HXLINE( 653)					_hx_tmp9 = 1;
            				}
            				break;
            				case (int)14: {
HXLINE( 653)					_hx_tmp9 = -1;
            				}
            				break;
            				case (int)15: {
HXLINE( 653)					_hx_tmp9 = -1;
            				}
            				break;
            				case (int)16: {
HXLINE( 653)					_hx_tmp9 = -1;
            				}
            				break;
            				default:{
HXLINE( 660)					HX_STACK_DO_THROW(HX_("How did we get here? 51",18,8a,4c,3e));
            				}
            			}
HXLINE( 638)			return  ::Dynamic(::hx::Anon_obj::Create(7)
            				->setFixed(0,HX_("staticFields",c7,95,02,9f),_hx_tmp8)
            				->setFixed(1,HX_("typeName",25,76,ca,b5),_hx_tmp5)
            				->setFixed(2,HX_("defaultInstanceSize",57,9d,96,48),_hx_tmp9)
            				->setFixed(3,HX_("pointer",bd,c0,21,51),p)
            				->setFixed(4,HX_("isExternal",55,54,32,5e),false)
            				->setFixed(5,HX_("passedByReference",64,39,ab,71),_hx_tmp6)
            				->setFixed(6,HX_("instanceFields",ee,7f,23,7b),_hx_tmp7));
            		}
HXLINE( 667)		bool _hx_tmp10;
HXDLIN( 667)		if (this->externs->externToPointer->exists(name)) {
HXLINE( 667)			 ::little::interpreter::InterpTokens token = this->externs->getGlobal(::Array_obj< ::String >::__new(1)->init(0,name))->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 667)			::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN( 667)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 667)			{
HXLINE( 667)				int _g = 0;
HXDLIN( 667)				int _g1 = _this->length;
HXDLIN( 667)				while((_g < _g1)){
HXLINE( 667)					_g = (_g + 1);
HXDLIN( 667)					int i = (_g - 1);
HXDLIN( 667)					{
HXLINE( 667)						::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 667)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 667)			_hx_tmp10 = result->contains(::Type_obj::enumConstructor(token).toLowerCase());
            		}
            		else {
HXLINE( 667)			_hx_tmp10 = false;
            		}
HXDLIN( 667)		if (_hx_tmp10) {
HXLINE( 668)			 ::little::interpreter::memory::ExternalInterfacing instProps = this->externs;
HXDLIN( 668)			 ::little::interpreter::memory::ExtTree instProps1 = this->externs->instanceProperties;
HXDLIN( 668)			 ::little::interpreter::memory::ExtTree instProps2 = instProps->createPathFor(instProps1,name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN));
HXLINE( 669)			 ::little::interpreter::memory::ExternalInterfacing statProps = this->externs;
HXDLIN( 669)			 ::little::interpreter::memory::ExtTree statProps1 = this->externs->globalProperties;
HXDLIN( 669)			 ::little::interpreter::memory::ExtTree statProps2 = statProps->createPathFor(statProps1,name.split(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN));
HXLINE( 670)			 ::haxe::ds::StringMap instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 671)			 ::haxe::ds::StringMap statics =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 673)			{
HXLINE( 673)				::Dynamic map = instProps2->properties;
HXDLIN( 673)				::Dynamic _g_map = map;
HXDLIN( 673)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 673)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 673)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 673)					 ::little::interpreter::memory::ExtTree _g_value = ( ( ::little::interpreter::memory::ExtTree)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 673)					::String _g_key = key;
HXDLIN( 673)					::String key1 = _g_key;
HXDLIN( 673)					 ::little::interpreter::memory::ExtTree value = _g_value;
HXLINE( 674)					{
HXLINE( 674)						 ::Dynamic v =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("doc",78,42,4c,00),value->doc)
            							->setFixed(1,HX_("type",ba,f2,08,4d),value->type));
HXDLIN( 674)						instances->set(key1,v);
            					}
            				}
            			}
HXLINE( 675)			{
HXLINE( 675)				::Dynamic map1 = statProps2->properties;
HXDLIN( 675)				::Dynamic _g_map1 = map1;
HXDLIN( 675)				 ::Dynamic _g_keys1 = ::haxe::IMap_obj::keys(map1);
HXDLIN( 675)				while(( (bool)(_g_keys1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 675)					::String key2 = ( (::String)(_g_keys1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 675)					 ::little::interpreter::memory::ExtTree _g_value1 = ( ( ::little::interpreter::memory::ExtTree)(::haxe::IMap_obj::get(_g_map1,key2)) );
HXDLIN( 675)					::String _g_key1 = key2;
HXDLIN( 675)					::String key3 = _g_key1;
HXDLIN( 675)					 ::little::interpreter::memory::ExtTree value1 = _g_value1;
HXLINE( 676)					{
HXLINE( 676)						 ::Dynamic v1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("doc",78,42,4c,00),value1->doc)
            							->setFixed(1,HX_("type",ba,f2,08,4d),value1->type));
HXDLIN( 676)						statics->set(key3,v1);
            					}
            				}
            			}
HXLINE( 678)			return  ::Dynamic(::hx::Anon_obj::Create(7)
            				->setFixed(0,HX_("staticFields",c7,95,02,9f),statics)
            				->setFixed(1,HX_("typeName",25,76,ca,b5),name)
            				->setFixed(2,HX_("defaultInstanceSize",57,9d,96,48),8)
            				->setFixed(3,HX_("pointer",bd,c0,21,51),this->externs->externToPointer->get(name))
            				->setFixed(4,HX_("isExternal",55,54,32,5e),true)
            				->setFixed(5,HX_("passedByReference",64,39,ab,71),true)
            				->setFixed(6,HX_("instanceFields",ee,7f,23,7b),instances));
            		}
HXLINE( 689)		 ::Dynamic reference = this->referrer->get(name);
HXLINE( 690)		 ::Dynamic typeInfo = this->storage->readType(( (int)(reference->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) ));
HXLINE( 692)		return typeInfo;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,getTypeInformation,return )

::String Memory_obj::getTypeName(int pointer){
            	HX_STACKFRAME(&_hx_pos_059d4a78092f8378_700_getTypeName)
HXLINE( 702)		::String ext = this->externs->get_pointerToExtern()->get_string(pointer);
HXLINE( 703)		bool _hx_tmp;
HXDLIN( 703)		if (::hx::IsNotNull( ext )) {
HXLINE( 703)			 ::little::interpreter::memory::ExternalInterfacing token = this->externs;
HXDLIN( 703)			 ::little::interpreter::InterpTokens token1 = token->getGlobal(ext.split(HX_(".",2e,00,00,00)))->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 703)			::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::CLASS_POINTER_dyn())->copy();
HXDLIN( 703)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 703)			{
HXLINE( 703)				int _g = 0;
HXDLIN( 703)				int _g1 = _this->length;
HXDLIN( 703)				while((_g < _g1)){
HXLINE( 703)					_g = (_g + 1);
HXDLIN( 703)					int i = (_g - 1);
HXDLIN( 703)					{
HXLINE( 703)						::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 703)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 703)			_hx_tmp = result->contains(::Type_obj::enumConstructor(token1).toLowerCase());
            		}
            		else {
HXLINE( 703)			_hx_tmp = false;
            		}
HXDLIN( 703)		if (_hx_tmp) {
HXLINE( 704)			return this->externs->get_pointerToExtern()->get_string(pointer);
            		}
HXLINE( 707)		if (this->constants->hasPointer(pointer)) {
HXLINE( 708)			return ::little::tools::Extensions_obj::asJoinedStringPath(this->constants->getFromPointer(pointer));
            		}
HXLINE( 711)		return ( (::String)(this->storage->readType(pointer)->__Field(HX_("typeName",25,76,ca,b5),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Memory_obj,getTypeName,return )


::hx::ObjectPtr< Memory_obj > Memory_obj::__new() {
	::hx::ObjectPtr< Memory_obj > __this = new Memory_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Memory_obj > Memory_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Memory_obj *__this = (Memory_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Memory_obj), true, "little.interpreter.memory.Memory"));
	*(void **)__this = Memory_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Memory_obj::Memory_obj()
{
}

void Memory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Memory);
	HX_MARK_MEMBER_NAME(storage,"storage");
	HX_MARK_MEMBER_NAME(referrer,"referrer");
	HX_MARK_MEMBER_NAME(externs,"externs");
	HX_MARK_MEMBER_NAME(constants,"constants");
	HX_MARK_MEMBER_NAME(operators,"operators");
	HX_MARK_MEMBER_NAME(memoryChunkSize,"memoryChunkSize");
	HX_MARK_MEMBER_NAME(maxMemorySize,"maxMemorySize");
	HX_MARK_END_CLASS();
}

void Memory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(storage,"storage");
	HX_VISIT_MEMBER_NAME(referrer,"referrer");
	HX_VISIT_MEMBER_NAME(externs,"externs");
	HX_VISIT_MEMBER_NAME(constants,"constants");
	HX_VISIT_MEMBER_NAME(operators,"operators");
	HX_VISIT_MEMBER_NAME(memoryChunkSize,"memoryChunkSize");
	HX_VISIT_MEMBER_NAME(maxMemorySize,"maxMemorySize");
}

::hx::Val Memory_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return ::hx::Val( read_dyn() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return ::hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"store") ) { return ::hx::Val( store_dyn() ); }
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sizeOf") ) { return ::hx::Val( sizeOf_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"storage") ) { return ::hx::Val( storage ); }
		if (HX_FIELD_EQ(inName,"externs") ) { return ::hx::Val( externs ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"referrer") ) { return ::hx::Val( referrer ); }
		if (HX_FIELD_EQ(inName,"retrieve") ) { return ::hx::Val( retrieve_dyn() ); }
		if (HX_FIELD_EQ(inName,"readFrom") ) { return ::hx::Val( readFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"allocate") ) { return ::hx::Val( allocate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"constants") ) { return ::hx::Val( constants ); }
		if (HX_FIELD_EQ(inName,"operators") ) { return ::hx::Val( operators ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getTypeName") ) { return ::hx::Val( getTypeName_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"maxMemorySize") ) { return ::hx::Val( maxMemorySize ); }
		if (HX_FIELD_EQ(inName,"valueFromType") ) { return ::hx::Val( valueFromType_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"memoryChunkSize") ) { return ::hx::Val( memoryChunkSize ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentMemorySize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentMemorySize() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getTypeInformation") ) { return ::hx::Val( getTypeInformation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_currentMemorySize") ) { return ::hx::Val( get_currentMemorySize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Memory_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"storage") ) { storage=inValue.Cast<  ::little::interpreter::memory::Storage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"externs") ) { externs=inValue.Cast<  ::little::interpreter::memory::ExternalInterfacing >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"referrer") ) { referrer=inValue.Cast<  ::little::interpreter::memory::Referrer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"constants") ) { constants=inValue.Cast<  ::little::interpreter::memory::ConstantPool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"operators") ) { operators=inValue.Cast<  ::little::interpreter::memory::Operators >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"maxMemorySize") ) { maxMemorySize=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"memoryChunkSize") ) { memoryChunkSize=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Memory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("storage",3b,df,a8,44));
	outFields->push(HX_("referrer",df,3c,ff,1b));
	outFields->push(HX_("externs",13,df,5f,70));
	outFields->push(HX_("constants",8f,76,6b,44));
	outFields->push(HX_("operators",4f,14,45,a0));
	outFields->push(HX_("memoryChunkSize",8d,fa,03,fa));
	outFields->push(HX_("maxMemorySize",26,f0,05,ee));
	outFields->push(HX_("currentMemorySize",fb,2d,ca,c9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Memory_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::little::interpreter::memory::Storage */ ,(int)offsetof(Memory_obj,storage),HX_("storage",3b,df,a8,44)},
	{::hx::fsObject /*  ::little::interpreter::memory::Referrer */ ,(int)offsetof(Memory_obj,referrer),HX_("referrer",df,3c,ff,1b)},
	{::hx::fsObject /*  ::little::interpreter::memory::ExternalInterfacing */ ,(int)offsetof(Memory_obj,externs),HX_("externs",13,df,5f,70)},
	{::hx::fsObject /*  ::little::interpreter::memory::ConstantPool */ ,(int)offsetof(Memory_obj,constants),HX_("constants",8f,76,6b,44)},
	{::hx::fsObject /*  ::little::interpreter::memory::Operators */ ,(int)offsetof(Memory_obj,operators),HX_("operators",4f,14,45,a0)},
	{::hx::fsInt,(int)offsetof(Memory_obj,memoryChunkSize),HX_("memoryChunkSize",8d,fa,03,fa)},
	{::hx::fsInt,(int)offsetof(Memory_obj,maxMemorySize),HX_("maxMemorySize",26,f0,05,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Memory_obj_sStaticStorageInfo = 0;
#endif

static ::String Memory_obj_sMemberFields[] = {
	HX_("storage",3b,df,a8,44),
	HX_("referrer",df,3c,ff,1b),
	HX_("externs",13,df,5f,70),
	HX_("constants",8f,76,6b,44),
	HX_("operators",4f,14,45,a0),
	HX_("memoryChunkSize",8d,fa,03,fa),
	HX_("maxMemorySize",26,f0,05,ee),
	HX_("get_currentMemorySize",d2,30,78,48),
	HX_("reset",cf,49,c8,e6),
	HX_("store",e1,13,16,84),
	HX_("retrieve",7c,1a,37,2b),
	HX_("valueFromType",d5,55,e5,0d),
	HX_("read",56,4b,a7,4b),
	HX_("readFrom",e0,7f,ba,6b),
	HX_("write",df,6c,59,d0),
	HX_("set",a2,9b,57,00),
	HX_("allocate",bd,d2,ea,90),
	HX_("free",ac,9c,c2,43),
	HX_("sizeOf",38,58,0e,c1),
	HX_("getTypeInformation",dc,45,3f,26),
	HX_("getTypeName",db,38,be,db),
	::String(null()) };

::hx::Class Memory_obj::__mClass;

void Memory_obj::__register()
{
	Memory_obj _hx_dummy;
	Memory_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.Memory",c2,09,a1,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Memory_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Memory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Memory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Memory_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
