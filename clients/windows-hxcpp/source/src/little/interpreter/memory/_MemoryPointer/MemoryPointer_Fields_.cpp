// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Fields_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a928be26390d0948_6_boot,"little.interpreter.memory._MemoryPointer.MemoryPointer_Fields_","boot",0xe68aaead,"little.interpreter.memory._MemoryPointer.MemoryPointer_Fields_.boot","little/interpreter/memory/MemoryPointer.hx",6,0xfdf82f42)
namespace little{
namespace interpreter{
namespace memory{
namespace _MemoryPointer{

void MemoryPointer_Fields__obj::__construct() { }

Dynamic MemoryPointer_Fields__obj::__CreateEmpty() { return new MemoryPointer_Fields__obj; }

void *MemoryPointer_Fields__obj::_hx_vtable = 0;

Dynamic MemoryPointer_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MemoryPointer_Fields__obj > _hx_result = new MemoryPointer_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MemoryPointer_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65019661;
}

int MemoryPointer_Fields__obj::POINTER_SIZE;


MemoryPointer_Fields__obj::MemoryPointer_Fields__obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MemoryPointer_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MemoryPointer_Fields__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MemoryPointer_Fields__obj::POINTER_SIZE,HX_("POINTER_SIZE",e3,16,7f,18)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void MemoryPointer_Fields__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MemoryPointer_Fields__obj::POINTER_SIZE,"POINTER_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MemoryPointer_Fields__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MemoryPointer_Fields__obj::POINTER_SIZE,"POINTER_SIZE");
};

#endif

::hx::Class MemoryPointer_Fields__obj::__mClass;

static ::String MemoryPointer_Fields__obj_sStaticFields[] = {
	HX_("POINTER_SIZE",e3,16,7f,18),
	::String(null())
};

void MemoryPointer_Fields__obj::__register()
{
	MemoryPointer_Fields__obj _hx_dummy;
	MemoryPointer_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory._MemoryPointer.MemoryPointer_Fields_",d3,47,0b,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MemoryPointer_Fields__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MemoryPointer_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MemoryPointer_Fields__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MemoryPointer_Fields__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MemoryPointer_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MemoryPointer_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MemoryPointer_Fields__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a928be26390d0948_6_boot)
HXDLIN(   6)		POINTER_SIZE = 4;
            	}
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
} // end namespace _MemoryPointer
