// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_FieldDeclarationType
#include <little/interpreter/FieldDeclarationType.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_OperatorType
#include <little/interpreter/memory/OperatorType.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Operators
#include <little/interpreter/memory/Operators.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Referrer
#include <little/interpreter/memory/Referrer.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_Extensions
#include <little/tools/Extensions.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_OrderedMapKeyValueIterator
#include <little/tools/OrderedMapKeyValueIterator.h>
#endif
#ifndef INCLUDED_little_tools_PrettyPrinter
#include <little/tools/PrettyPrinter.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif
#ifndef INCLUDED_little_tools__OrderedMap_OrderedMap_Impl_
#include <little/tools/_OrderedMap/OrderedMap_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_19_convert,"little.interpreter.Interpreter","convert",0x828a76f3,"little.interpreter.Interpreter.convert","little/interpreter/Interpreter.hx",19,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_63_error,"little.interpreter.Interpreter","error",0x8faa04c8,"little.interpreter.Interpreter.error","little/interpreter/Interpreter.hx",63,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_75_warn,"little.interpreter.Interpreter","warn",0x571c4946,"little.interpreter.Interpreter.warn","little/interpreter/Interpreter.hx",75,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_80_assert,"little.interpreter.Interpreter","assert",0x1fb4edc6,"little.interpreter.Interpreter.assert","little/interpreter/Interpreter.hx",80,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_81_assert,"little.interpreter.Interpreter","assert",0x1fb4edc6,"little.interpreter.Interpreter.assert","little/interpreter/Interpreter.hx",81,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_91_setLine,"little.interpreter.Interpreter","setLine",0x74f7d1b6,"little.interpreter.Interpreter.setLine","little/interpreter/Interpreter.hx",91,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_103_setModule,"little.interpreter.Interpreter","setModule",0x540b62ee,"little.interpreter.Interpreter.setModule","little/interpreter/Interpreter.hx",103,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_113_splitLine,"little.interpreter.Interpreter","splitLine",0x7fa35cee,"little.interpreter.Interpreter.splitLine","little/interpreter/Interpreter.hx",113,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_124_declareVariable,"little.interpreter.Interpreter","declareVariable",0xeaadcd86,"little.interpreter.Interpreter.declareVariable","little/interpreter/Interpreter.hx",124,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_138_declareFunction,"little.interpreter.Interpreter","declareFunction",0x95f36662,"little.interpreter.Interpreter.declareFunction","little/interpreter/Interpreter.hx",138,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_178_condition,"little.interpreter.Interpreter","condition",0x2fc4a29b,"little.interpreter.Interpreter.condition","little/interpreter/Interpreter.hx",178,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_172_condition,"little.interpreter.Interpreter","condition",0x2fc4a29b,"little.interpreter.Interpreter.condition","little/interpreter/Interpreter.hx",172,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_244_write,"little.interpreter.Interpreter","write",0xecd9a5df,"little.interpreter.Interpreter.write","little/interpreter/Interpreter.hx",244,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_286_call,"little.interpreter.Interpreter","call",0x49e3ff9e,"little.interpreter.Interpreter.call","little/interpreter/Interpreter.hx",286,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_353_read,"little.interpreter.Interpreter","read",0x53d13256,"little.interpreter.Interpreter.read","little/interpreter/Interpreter.hx",353,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_362_typeCast,"little.interpreter.Interpreter","typeCast",0x0f2e8999,"little.interpreter.Interpreter.typeCast","little/interpreter/Interpreter.hx",362,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_385_run,"little.interpreter.Interpreter","run",0x0e26e04b,"little.interpreter.Interpreter.run","little/interpreter/Interpreter.hx",385,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_462_evaluate,"little.interpreter.Interpreter","evaluate",0x61f9c759,"little.interpreter.Interpreter.evaluate","little/interpreter/Interpreter.hx",462,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_556_calculate,"little.interpreter.Interpreter","calculate",0x38fb4e66,"little.interpreter.Interpreter.calculate","little/interpreter/Interpreter.hx",556,0x1c9adf12)
HX_LOCAL_STACK_FRAME(_hx_pos_1e0c988bb7772661_624_group,"little.interpreter.Interpreter","group",0xb674ec3f,"little.interpreter.Interpreter.group","little/interpreter/Interpreter.hx",624,0x1c9adf12)
namespace little{
namespace interpreter{

void Interpreter_obj::__construct() { }

Dynamic Interpreter_obj::__CreateEmpty() { return new Interpreter_obj; }

void *Interpreter_obj::_hx_vtable = 0;

Dynamic Interpreter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interpreter_obj > _hx_result = new Interpreter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Interpreter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1531483a;
}

::Array< ::Dynamic> Interpreter_obj::convert(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_19_convert)
HXLINE(  20)		bool _hx_tmp;
HXDLIN(  20)		if ((pre->length == 1)) {
HXLINE(  20)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE(  20)			_hx_tmp = false;
            		}
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  20)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE(  21)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  23)		{
HXLINE(  23)			int _g_current = 0;
HXDLIN(  23)			::Array< ::Dynamic> _g_args = pre;
HXDLIN(  23)			while((_g_current < _g_args->length)){
HXLINE(  23)				_g_current = (_g_current + 1);
HXDLIN(  23)				 ::little::parser::ParserTokens item = _g_args->__get((_g_current - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE(  24)				 ::little::interpreter::InterpTokens _hx_tmp1;
HXDLIN(  24)				switch((int)(item->_hx_getIndex())){
            					case (int)0: {
HXLINE(  25)						int line = item->_hx_getInt(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::SetLine(line);
            					}
            					break;
            					case (int)1: {
HXLINE(  26)						::String module = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::SetModule(module);
            					}
            					break;
            					case (int)2: {
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::SplitLine_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE(  28)						 ::little::parser::ParserTokens name = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  28)						 ::little::parser::ParserTokens type = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  28)						 ::little::parser::ParserTokens doc = item->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  28)						 ::little::interpreter::InterpTokens _hx_tmp2 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN(  28)						 ::little::interpreter::InterpTokens _hx_tmp3;
HXDLIN(  28)						if (::hx::IsNull( type )) {
HXLINE(  28)							_hx_tmp3 = ::little::tools::Extensions_obj::asTokenPath(::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE(  28)							_hx_tmp3 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXDLIN(  28)						 ::little::interpreter::InterpTokens _hx_tmp4;
HXDLIN(  28)						if (::hx::IsNull( doc )) {
HXLINE(  28)							_hx_tmp4 = ::little::interpreter::InterpTokens_obj::Characters(HX_("",00,00,00,00));
            						}
            						else {
HXLINE(  28)							_hx_tmp4 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::VariableDeclaration(_hx_tmp2,_hx_tmp3,_hx_tmp4);
            					}
            					break;
            					case (int)4: {
HXLINE(  29)						 ::little::parser::ParserTokens name1 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  29)						 ::little::parser::ParserTokens params = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  29)						 ::little::parser::ParserTokens type1 = item->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  29)						 ::little::parser::ParserTokens doc1 = item->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  29)						 ::little::interpreter::InterpTokens _hx_tmp5 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN(  29)						 ::little::interpreter::InterpTokens _hx_tmp6 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN(  29)						 ::little::interpreter::InterpTokens _hx_tmp7;
HXDLIN(  29)						if (::hx::IsNull( type1 )) {
HXLINE(  29)							_hx_tmp7 = ::little::tools::Extensions_obj::asTokenPath(::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE(  29)							_hx_tmp7 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXDLIN(  29)						 ::little::interpreter::InterpTokens _hx_tmp8;
HXDLIN(  29)						if (::hx::IsNull( doc1 )) {
HXLINE(  29)							_hx_tmp8 = ::little::interpreter::InterpTokens_obj::Characters(HX_("",00,00,00,00));
            						}
            						else {
HXLINE(  29)							_hx_tmp8 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::FunctionDeclaration(_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            					}
            					break;
            					case (int)5: {
HXLINE(  30)						 ::little::parser::ParserTokens name2 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  30)						 ::little::parser::ParserTokens exp = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  30)						 ::little::parser::ParserTokens body = item->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  30)						 ::little::interpreter::InterpTokens _hx_tmp9 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN(  30)						 ::little::interpreter::InterpTokens _hx_tmp10 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp9,_hx_tmp10,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
            					}
            					break;
            					case (int)6: {
HXLINE(  31)						 ::little::parser::ParserTokens name3 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE(  24)						_hx_tmp1 = null();
            					}
            					break;
            					case (int)7: {
HXLINE(  32)						::Array< ::Dynamic> assignees = item->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  32)						 ::little::parser::ParserTokens value = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  32)						::Array< ::Dynamic> _hx_tmp11 = ::little::interpreter::Interpreter_obj::convert(assignees);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Write(_hx_tmp11,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
            					}
            					break;
            					case (int)8: {
HXLINE(  33)						::String word = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Identifier(word);
            					}
            					break;
            					case (int)9: {
HXLINE(  34)						 ::little::parser::ParserTokens value1 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  34)						 ::little::parser::ParserTokens type2 = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  34)						 ::little::interpreter::InterpTokens _hx_tmp12 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp12,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
            					}
            					break;
            					case (int)10: {
HXLINE(  35)						 ::little::parser::ParserTokens name4 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  35)						 ::little::parser::ParserTokens params1 = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  35)						 ::little::interpreter::InterpTokens _hx_tmp13 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::FunctionCall(_hx_tmp13,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
            					}
            					break;
            					case (int)11: {
HXLINE(  36)						 ::little::parser::ParserTokens value2 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  36)						 ::little::parser::ParserTokens type3 = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  36)						 ::little::interpreter::InterpTokens _hx_tmp14 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,value2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN(  36)						 ::little::interpreter::InterpTokens _hx_tmp15;
HXDLIN(  36)						if (::hx::IsNull( type3 )) {
HXLINE(  36)							_hx_tmp15 = ::little::tools::Extensions_obj::asTokenPath(::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE(  36)							_hx_tmp15 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::FunctionReturn(_hx_tmp14,_hx_tmp15);
            					}
            					break;
            					case (int)12: {
HXLINE(  37)						::Array< ::Dynamic> parts = item->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  37)						 ::little::parser::ParserTokens type4 = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  37)						::Array< ::Dynamic> _hx_tmp16 = ::little::interpreter::Interpreter_obj::convert(parts);
HXDLIN(  37)						 ::little::interpreter::InterpTokens _hx_tmp17;
HXDLIN(  37)						if (::hx::IsNull( type4 )) {
HXLINE(  37)							_hx_tmp17 = ::little::tools::Extensions_obj::asTokenPath(::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE(  37)							_hx_tmp17 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Expression(_hx_tmp16,_hx_tmp17);
            					}
            					break;
            					case (int)13: {
HXLINE(  38)						::Array< ::Dynamic> body1 = item->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  38)						 ::little::parser::ParserTokens type5 = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  38)						::Array< ::Dynamic> _hx_tmp18 = ::little::interpreter::Interpreter_obj::convert(body1);
HXDLIN(  38)						 ::little::interpreter::InterpTokens _hx_tmp19;
HXDLIN(  38)						if (::hx::IsNull( type5 )) {
HXLINE(  38)							_hx_tmp19 = ::little::tools::Extensions_obj::asTokenPath(::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE(  38)							_hx_tmp19 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            						}
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Block(_hx_tmp18,_hx_tmp19);
            					}
            					break;
            					case (int)14: {
HXLINE(  39)						::Array< ::Dynamic> parts1 = item->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::PartArray(::little::interpreter::Interpreter_obj::convert(parts1));
            					}
            					break;
            					case (int)15: {
HXLINE(  40)						 ::little::parser::ParserTokens name5 = item->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  40)						 ::little::parser::ParserTokens property = item->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN(  40)						 ::little::interpreter::InterpTokens _hx_tmp20 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name5))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::PropertyAccess(_hx_tmp20,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
            					}
            					break;
            					case (int)16: {
HXLINE(  41)						::String sign = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Sign(sign);
            					}
            					break;
            					case (int)17: {
HXLINE(  42)						::String num = item->_hx_getString(0);
HXDLIN(  42)						if ((::Math_obj::abs(::Std_obj::parseFloat(num)) > (int)2147483647)) {
HXLINE(  24)							_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Decimal(::Std_obj::parseFloat(num));
            						}
            						else {
HXLINE(  24)							_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Number(::Std_obj::parseInt(num));
            						}
            					}
            					break;
            					case (int)18: {
HXLINE(  43)						::String num1 = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Decimal(::Std_obj::parseFloat(num1));
            					}
            					break;
            					case (int)19: {
HXLINE(  44)						::String string = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Characters(string);
            					}
            					break;
            					case (int)20: {
HXLINE(  45)						::String doc2 = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::Characters(((HX_("\"\"",c0,1d,00,00) + doc2) + HX_("\"\"",c0,1d,00,00)));
            					}
            					break;
            					case (int)21: {
HXLINE(  46)						::String msg = item->_hx_getString(0);
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::ErrorMessage(msg);
            					}
            					break;
            					case (int)22: {
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            					}
            					break;
            					case (int)23: {
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::TrueValue_dyn();
            					}
            					break;
            					case (int)24: {
HXLINE(  24)						_hx_tmp1 = ::little::interpreter::InterpTokens_obj::FalseValue_dyn();
            					}
            					break;
            					case (int)25: {
HXLINE(  50)						::String name6 = item->_hx_getString(0);
HXDLIN(  50)						::Array< ::Dynamic> params2 = item->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  50)						HX_STACK_DO_THROW(((HX_("Custom tokens cannot remain when transitioning from Parser to Interpreter tokens (found ",95,90,89,b4) + ::Std_obj::string(item)) + HX_(")",29,00,00,00)));
            					}
            					break;
            				}
HXLINE(  24)				post->push(_hx_tmp1);
            			}
            		}
HXLINE(  54)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,convert,return )

 ::little::interpreter::InterpTokens Interpreter_obj::error(::String message,::String __o_layer){
            		::String layer = __o_layer;
            		if (::hx::IsNull(__o_layer)) layer = HX_("Interpreter",9a,09,07,b9);
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_63_error)
HXLINE(  64)		::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(message),layer);
HXLINE(  65)		HX_STACK_DO_THROW(HX_("",00,00,00,00));
HXDLIN(  65)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,error,return )

 ::little::interpreter::InterpTokens Interpreter_obj::warn(::String message,::String __o_layer){
            		::String layer = __o_layer;
            		if (::hx::IsNull(__o_layer)) layer = HX_("Interpreter",9a,09,07,b9);
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_75_warn)
HXLINE(  76)		::little::Little_obj::runtime->warn(::little::interpreter::InterpTokens_obj::ErrorMessage(message),layer);
HXLINE(  77)		return ::little::interpreter::InterpTokens_obj::ErrorMessage(message);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,warn,return )

 ::little::interpreter::InterpTokens Interpreter_obj::_hx_assert( ::little::interpreter::InterpTokens token, ::Dynamic isType,::String errorMessage){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_80_assert)
HXLINE(  81)		bool _hx_tmp;
HXDLIN(  81)		bool _hx_tmp1;
HXDLIN(  81)		if (::Std_obj::isOfType(isType,::hx::ClassOf< ::little::tools::InterpTokensSimple >())) {
HXLINE(  81)			::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,isType)->copy();
HXDLIN(  81)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  81)			{
HXLINE(  81)				int _g = 0;
HXDLIN(  81)				int _g1 = _this->length;
HXDLIN(  81)				while((_g < _g1)){
HXLINE(  81)					_g = (_g + 1);
HXDLIN(  81)					int i = (_g - 1);
HXDLIN(  81)					{
HXLINE(  81)						::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  81)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN(  81)			_hx_tmp1 = !(result->contains(::Type_obj::enumConstructor(token).toLowerCase()));
            		}
            		else {
HXLINE(  81)			_hx_tmp1 = false;
            		}
HXDLIN(  81)		if (!(_hx_tmp1)) {
HXLINE(  81)			if (::Std_obj::isOfType(isType,::hx::ArrayBase::__mClass)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::little::interpreter::InterpTokens,token) HXARGC(1)
            				bool _hx_run( ::little::tools::InterpTokensSimple a){
            					HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_81_assert)
HXLINE(  81)					::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,a)->copy();
HXDLIN(  81)					::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  81)					{
HXLINE(  81)						int _g = 0;
HXDLIN(  81)						int _g1 = _this->length;
HXDLIN(  81)						while((_g < _g1)){
HXLINE(  81)							_g = (_g + 1);
HXDLIN(  81)							int i = (_g - 1);
HXDLIN(  81)							{
HXLINE(  81)								::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN(  81)								result->__unsafe_set(i,inValue);
            							}
            						}
            					}
HXDLIN(  81)					return result->contains(::Type_obj::enumConstructor(token).toLowerCase());
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE(  81)				_hx_tmp = !(::little::tools::Extensions_obj::containsAny(( (::cpp::VirtualArray)(isType) ), ::Dynamic(new _hx_Closure_0(token))));
            			}
            			else {
HXLINE(  81)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  81)			_hx_tmp = true;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  82)			 ::little::interpreter::Runtime _hx_tmp2 = ::little::Little_obj::runtime;
HXDLIN(  82)			 ::little::interpreter::InterpTokens _hx_tmp3;
HXDLIN(  82)			if (::hx::IsNotNull( errorMessage )) {
HXLINE(  82)				_hx_tmp3 = ::little::interpreter::InterpTokens_obj::ErrorMessage(errorMessage);
            			}
            			else {
HXLINE(  82)				::String _hx_tmp4 = ((HX_("Assertion failed, token ",f6,ee,f0,36) + ::Std_obj::string(token)) + HX_(" is not of type ",e0,a2,66,12));
HXDLIN(  82)				_hx_tmp3 = ::little::interpreter::InterpTokens_obj::ErrorMessage((_hx_tmp4 + ::Std_obj::string(isType)));
            			}
HXDLIN(  82)			_hx_tmp2->throwError(_hx_tmp3,HX_("Interpreter",9a,09,07,b9));
HXLINE(  83)			return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            		}
HXLINE(  85)		return token;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Interpreter_obj,_hx_assert,return )

void Interpreter_obj::setLine(int l){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_91_setLine)
HXLINE(  92)		int o = ::little::Little_obj::runtime->line;
HXLINE(  93)		::little::Little_obj::runtime->line = l;
HXLINE(  94)		::little::Little_obj::runtime->linePart = 0;
HXLINE(  96)		{
HXLINE(  96)			int _g = 0;
HXDLIN(  96)			::Array< ::Dynamic> _g1 = ::little::Little_obj::runtime->onLineChanged;
HXDLIN(  96)			while((_g < _g1->length)){
HXLINE(  96)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  96)				_g = (_g + 1);
HXDLIN(  96)				listener(o);
            			}
            		}
HXLINE(  97)		{
HXLINE(  97)			int _g2 = 0;
HXDLIN(  97)			::Array< ::Dynamic> _g3 = ::little::Little_obj::runtime->onLineSplit;
HXDLIN(  97)			while((_g2 < _g3->length)){
HXLINE(  97)				 ::Dynamic listener1 = _g3->__get(_g2);
HXDLIN(  97)				_g2 = (_g2 + 1);
HXDLIN(  97)				listener1();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,setLine,(void))

void Interpreter_obj::setModule(::String m){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_103_setModule)
HXLINE( 104)		::String o = ::little::Little_obj::runtime->module;
HXLINE( 105)		::little::Little_obj::runtime->module = m;
HXLINE( 107)		if ((o != m)) {
HXLINE( 107)			int _g = 0;
HXDLIN( 107)			::Array< ::Dynamic> _g1 = ::little::Little_obj::runtime->onModuleChanged;
HXDLIN( 107)			while((_g < _g1->length)){
HXLINE( 107)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 107)				_g = (_g + 1);
HXDLIN( 107)				listener(o);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,setModule,(void))

void Interpreter_obj::splitLine(){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_113_splitLine)
HXLINE( 114)		::little::Little_obj::runtime->linePart++;
HXLINE( 115)		{
HXLINE( 115)			int _g = 0;
HXDLIN( 115)			::Array< ::Dynamic> _g1 = ::little::Little_obj::runtime->onLineSplit;
HXDLIN( 115)			while((_g < _g1->length)){
HXLINE( 115)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 115)				_g = (_g + 1);
HXDLIN( 115)				listener();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Interpreter_obj,splitLine,(void))

void Interpreter_obj::declareVariable( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens type, ::little::interpreter::InterpTokens doc){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_124_declareVariable)
HXLINE( 125)		::Array< ::String > path = ::little::tools::Extensions_obj::asStringPath(name);
HXLINE( 126)		 ::little::interpreter::memory::Memory _hx_tmp = ::little::Little_obj::memory;
HXDLIN( 126)		::String _hx_tmp1;
HXDLIN( 126)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 126)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 126)		{
HXLINE( 126)			int _g = 0;
HXDLIN( 126)			int _g1 = _this->length;
HXDLIN( 126)			while((_g < _g1)){
HXLINE( 126)				_g = (_g + 1);
HXDLIN( 126)				int i = (_g - 1);
HXDLIN( 126)				{
HXLINE( 126)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 126)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 126)		if (result->contains(::Type_obj::enumConstructor(type).toLowerCase())) {
HXLINE( 126)			_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(type)->__get(0)) );
            		}
            		else {
HXLINE( 126)			_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,type),null()))->__get(0)) );
            		}
HXDLIN( 126)		::String _hx_tmp2;
HXDLIN( 126)		if (::hx::IsNotNull( doc )) {
HXLINE( 126)			 ::little::interpreter::InterpTokens token = ::little::interpreter::Interpreter_obj::evaluate(doc,null());
HXDLIN( 126)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 126)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 126)			{
HXLINE( 126)				int _g2 = 0;
HXDLIN( 126)				int _g3 = _this1->length;
HXDLIN( 126)				while((_g2 < _g3)){
HXLINE( 126)					_g2 = (_g2 + 1);
HXDLIN( 126)					int i1 = (_g2 - 1);
HXDLIN( 126)					{
HXLINE( 126)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 126)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN( 126)			if (result1->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE( 126)				_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(token)->__get(0)) );
            			}
            			else {
HXLINE( 126)				_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,token),null()))->__get(0)) );
            			}
            		}
            		else {
HXLINE( 126)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 126)		_hx_tmp->write(path,::little::interpreter::InterpTokens_obj::NullValue_dyn(),_hx_tmp1,_hx_tmp2);
HXLINE( 128)		{
HXLINE( 128)			int _g4 = 0;
HXDLIN( 128)			::Array< ::Dynamic> _g5 = ::little::Little_obj::runtime->onFieldDeclared;
HXDLIN( 128)			while((_g4 < _g5->length)){
HXLINE( 128)				 ::Dynamic listener = _g5->__get(_g4);
HXDLIN( 128)				_g4 = (_g4 + 1);
HXLINE( 129)				listener(::little::tools::Extensions_obj::asJoinedStringPath(name),::little::interpreter::FieldDeclarationType_obj::VARIABLE_dyn());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Interpreter_obj,declareVariable,(void))

void Interpreter_obj::declareFunction( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens params, ::little::interpreter::InterpTokens doc){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_138_declareFunction)
HXLINE( 139)		::Array< ::String > path = ::little::tools::Extensions_obj::asStringPath(name);
HXLINE( 141)		 ::little::tools::BaseOrderedMap paramMap = ::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new();
HXLINE( 143)		::Array< ::Dynamic> array = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(params)->__get(0)) );
HXLINE( 144)		{
HXLINE( 144)			int _g = 0;
HXDLIN( 144)			while((_g < array->length)){
HXLINE( 144)				 ::little::interpreter::InterpTokens entry = array->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 144)				_g = (_g + 1);
HXLINE( 145)				::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::SPLIT_LINE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 145)				::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 145)				{
HXLINE( 145)					int _g1 = 0;
HXDLIN( 145)					int _g2 = _this->length;
HXDLIN( 145)					while((_g1 < _g2)){
HXLINE( 145)						_g1 = (_g1 + 1);
HXDLIN( 145)						int i = (_g1 - 1);
HXDLIN( 145)						{
HXLINE( 145)							::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 145)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 145)				if (result->contains(::Type_obj::enumConstructor(entry).toLowerCase())) {
HXLINE( 145)					continue;
            				}
HXLINE( 146)				switch((int)(entry->_hx_getIndex())){
            					case (int)3: {
HXLINE( 148)						 ::little::interpreter::InterpTokens _g3 = entry->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 148)						 ::little::interpreter::InterpTokens _g4 = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 148)						 ::little::interpreter::InterpTokens _g5 = entry->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 147)						if (::hx::IsNull( _g4 )) {
HXLINE( 147)							 ::little::interpreter::InterpTokens name1 = _g3;
HXDLIN( 147)							::String _hx_tmp;
HXDLIN( 147)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 147)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 147)							{
HXLINE( 147)								int _g6 = 0;
HXDLIN( 147)								int _g7 = _this1->length;
HXDLIN( 147)								while((_g6 < _g7)){
HXLINE( 147)									_g6 = (_g6 + 1);
HXDLIN( 147)									int i1 = (_g6 - 1);
HXDLIN( 147)									{
HXLINE( 147)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 147)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 147)							if (result1->contains(::Type_obj::enumConstructor(name1).toLowerCase())) {
HXLINE( 147)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(name1)->__get(0)) );
            							}
            							else {
HXLINE( 147)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name1),null()))->__get(0)) );
            							}
HXDLIN( 147)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap,_hx_tmp,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN)));
            						}
            						else {
HXLINE( 148)							 ::little::interpreter::InterpTokens type = _g4;
HXDLIN( 148)							 ::little::interpreter::InterpTokens name2 = _g3;
HXDLIN( 148)							::String _hx_tmp1;
HXDLIN( 148)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 148)							::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 148)							{
HXLINE( 148)								int _g8 = 0;
HXDLIN( 148)								int _g9 = _this2->length;
HXDLIN( 148)								while((_g8 < _g9)){
HXLINE( 148)									_g8 = (_g8 + 1);
HXDLIN( 148)									int i2 = (_g8 - 1);
HXDLIN( 148)									{
HXLINE( 148)										::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 148)										result2->__unsafe_set(i2,inValue2);
            									}
            								}
            							}
HXDLIN( 148)							if (result2->contains(::Type_obj::enumConstructor(name2).toLowerCase())) {
HXLINE( 148)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(name2)->__get(0)) );
            							}
            							else {
HXLINE( 148)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name2),null()))->__get(0)) );
            							}
HXDLIN( 148)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap,_hx_tmp1,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),type));
            						}
            					}
            					break;
            					case (int)10: {
HXLINE( 149)						::Array< ::Dynamic> assignees = entry->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 149)						 ::little::interpreter::InterpTokens value = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 150)						{
HXLINE( 150)							 ::little::interpreter::InterpTokens _g10 = assignees->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 150)							if ((_g10->_hx_getIndex() == 3)) {
HXLINE( 152)								 ::little::interpreter::InterpTokens _g11 = _g10->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 152)								 ::little::interpreter::InterpTokens _g12 = _g10->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 152)								 ::little::interpreter::InterpTokens _g13 = _g10->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 151)								if (::hx::IsNull( _g12 )) {
HXLINE( 151)									 ::little::interpreter::InterpTokens name3 = _g11;
HXDLIN( 151)									::String _hx_tmp2;
HXDLIN( 151)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 151)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 151)									{
HXLINE( 151)										int _g14 = 0;
HXDLIN( 151)										int _g15 = _this3->length;
HXDLIN( 151)										while((_g14 < _g15)){
HXLINE( 151)											_g14 = (_g14 + 1);
HXDLIN( 151)											int i3 = (_g14 - 1);
HXDLIN( 151)											{
HXLINE( 151)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 151)												result3->__unsafe_set(i3,inValue3);
            											}
            										}
            									}
HXDLIN( 151)									if (result3->contains(::Type_obj::enumConstructor(name3).toLowerCase())) {
HXLINE( 151)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(name3)->__get(0)) );
            									}
            									else {
HXLINE( 151)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name3),null()))->__get(0)) );
            									}
HXDLIN( 151)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap,_hx_tmp2,::little::interpreter::InterpTokens_obj::TypeCast(value,::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN)));
            								}
            								else {
HXLINE( 152)									 ::little::interpreter::InterpTokens type1 = _g12;
HXDLIN( 152)									 ::little::interpreter::InterpTokens name4 = _g11;
HXDLIN( 152)									::String _hx_tmp3;
HXDLIN( 152)									::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 152)									::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 152)									{
HXLINE( 152)										int _g16 = 0;
HXDLIN( 152)										int _g17 = _this4->length;
HXDLIN( 152)										while((_g16 < _g17)){
HXLINE( 152)											_g16 = (_g16 + 1);
HXDLIN( 152)											int i4 = (_g16 - 1);
HXDLIN( 152)											{
HXLINE( 152)												::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 152)												result4->__unsafe_set(i4,inValue4);
            											}
            										}
            									}
HXDLIN( 152)									if (result4->contains(::Type_obj::enumConstructor(name4).toLowerCase())) {
HXLINE( 152)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(name4)->__get(0)) );
            									}
            									else {
HXLINE( 152)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name4),null()))->__get(0)) );
            									}
HXDLIN( 152)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap,_hx_tmp3,::little::interpreter::InterpTokens_obj::TypeCast(value,type1));
            								}
            							}
            						}
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE( 160)		 ::little::interpreter::memory::Memory _hx_tmp4 = ::little::Little_obj::memory;
HXDLIN( 160)		 ::little::interpreter::InterpTokens _hx_tmp5 = ::little::interpreter::InterpTokens_obj::FunctionCode(paramMap,::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(0),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN)));
HXDLIN( 160)		::String _hx_tmp6 = ::little::Little_obj::keywords->TYPE_FUNCTION;
HXDLIN( 160)		::String _hx_tmp7;
HXDLIN( 160)		if (::hx::IsNotNull( doc )) {
HXLINE( 160)			 ::little::interpreter::InterpTokens token = ::little::interpreter::Interpreter_obj::evaluate(doc,null());
HXDLIN( 160)			::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 160)			::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 160)			{
HXLINE( 160)				int _g18 = 0;
HXDLIN( 160)				int _g19 = _this5->length;
HXDLIN( 160)				while((_g18 < _g19)){
HXLINE( 160)					_g18 = (_g18 + 1);
HXDLIN( 160)					int i5 = (_g18 - 1);
HXDLIN( 160)					{
HXLINE( 160)						::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 160)						result5->__unsafe_set(i5,inValue5);
            					}
            				}
            			}
HXDLIN( 160)			if (result5->contains(::Type_obj::enumConstructor(token).toLowerCase())) {
HXLINE( 160)				_hx_tmp7 = ( (::String)(::Type_obj::enumParameters(token)->__get(0)) );
            			}
            			else {
HXLINE( 160)				_hx_tmp7 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,token),null()))->__get(0)) );
            			}
            		}
            		else {
HXLINE( 160)			_hx_tmp7 = HX_("",00,00,00,00);
            		}
HXDLIN( 160)		_hx_tmp4->write(path,_hx_tmp5,_hx_tmp6,_hx_tmp7);
HXLINE( 162)		{
HXLINE( 162)			int _g20 = 0;
HXDLIN( 162)			::Array< ::Dynamic> _g21 = ::little::Little_obj::runtime->onFieldDeclared;
HXDLIN( 162)			while((_g20 < _g21->length)){
HXLINE( 162)				 ::Dynamic listener = _g21->__get(_g20);
HXDLIN( 162)				_g20 = (_g20 + 1);
HXLINE( 163)				listener(::little::tools::Extensions_obj::asJoinedStringPath(name),::little::interpreter::FieldDeclarationType_obj::FUNCTION_dyn());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Interpreter_obj,declareFunction,(void))

 ::little::interpreter::InterpTokens Interpreter_obj::condition( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens pattern, ::little::interpreter::InterpTokens body){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,fit) HXARGC(3)
            		bool _hx_run(::Array< ::Dynamic> given,::Array< ::Dynamic> pattern, ::Dynamic __o_currentlyFits){
            		bool currentlyFits = __o_currentlyFits.Default(true);
            			HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_178_condition)
HXLINE( 179)			{
HXLINE( 179)				int _g = 0;
HXDLIN( 179)				int _g1 = given->length;
HXDLIN( 179)				while((_g < _g1)){
HXLINE( 179)					_g = (_g + 1);
HXDLIN( 179)					int i = (_g - 1);
HXLINE( 180)					if (::hx::IsNull( pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >() )) {
HXLINE( 180)						continue;
            					}
HXLINE( 181)					if (__hxcpp_enum_eq(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >(),pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())) {
HXLINE( 181)						continue;
            					}
HXLINE( 182)					::String _hx_tmp = ::Type_obj::enumConstructor(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 182)					if ((_hx_tmp != ::Type_obj::enumConstructor(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()))) {
HXLINE( 182)						return false;
            					}
HXLINE( 183)					{
HXLINE( 183)						 ::little::interpreter::InterpTokens _g2 = given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 183)						switch((int)(_g2->_hx_getIndex())){
            							case (int)0: {
HXLINE( 184)								int _g3 = _g2->_hx_getInt(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 185)								 ::little::interpreter::InterpTokens _g4 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								 ::little::interpreter::InterpTokens _g5 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								 ::little::interpreter::InterpTokens _g6 = _g2->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								if (currentlyFits) {
HXLINE( 185)									 ::Dynamic fit1 = fit->__get(0);
HXDLIN( 185)									::Array< ::Dynamic> currentlyFits1 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 185)									currentlyFits = ( (bool)(fit1(currentlyFits1,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 185)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 185)								 ::little::interpreter::InterpTokens _g7 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								 ::little::interpreter::InterpTokens _g8 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								 ::little::interpreter::InterpTokens _g9 = _g2->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								 ::little::interpreter::InterpTokens _g10 = _g2->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)								if (currentlyFits) {
HXLINE( 185)									 ::Dynamic fit2 = fit->__get(0);
HXDLIN( 185)									::Array< ::Dynamic> currentlyFits2 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 185)									currentlyFits = ( (bool)(fit2(currentlyFits2,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 185)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 186)								 ::haxe::ds::ObjectMap _g11 = _g2->_hx_getObject(0).StaticCast<  ::haxe::ds::ObjectMap >();
HXDLIN( 186)								return false;
            							}
            							break;
            							case (int)6: {
HXLINE( 188)								 ::little::interpreter::InterpTokens _g12 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 188)								 ::little::interpreter::InterpTokens _g13 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 188)								 ::little::interpreter::InterpTokens _g14 = _g2->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 188)								if (currentlyFits) {
HXLINE( 188)									 ::Dynamic fit3 = fit->__get(0);
HXDLIN( 188)									::Array< ::Dynamic> currentlyFits3 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 188)									currentlyFits = ( (bool)(fit3(currentlyFits3,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 188)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 187)								 ::little::tools::BaseOrderedMap _g15 = _g2->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 187)								 ::little::interpreter::InterpTokens _g16 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 187)								return false;
            							}
            							break;
            							case (int)8: {
HXLINE( 188)								 ::little::interpreter::InterpTokens _g17 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 188)								 ::little::interpreter::InterpTokens _g18 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 188)								if (currentlyFits) {
HXLINE( 188)									 ::Dynamic fit4 = fit->__get(0);
HXDLIN( 188)									::Array< ::Dynamic> currentlyFits4 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 188)									currentlyFits = ( (bool)(fit4(currentlyFits4,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 188)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)9: {
HXLINE( 189)								 ::little::interpreter::InterpTokens _g19 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)								 ::little::interpreter::InterpTokens _g20 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)								if (currentlyFits) {
HXLINE( 189)									 ::Dynamic fit5 = fit->__get(0);
HXDLIN( 189)									::Array< ::Dynamic> currentlyFits5 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 189)									currentlyFits = ( (bool)(fit5(currentlyFits5,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 189)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)10: {
HXLINE( 190)								::Array< ::Dynamic> assignees = _g2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 190)								 ::little::interpreter::InterpTokens value = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 190)								{
HXLINE( 191)									::Array< ::Dynamic> patternAssignees = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) );
HXLINE( 192)									if (::hx::IsNotNull( patternAssignees )) {
HXLINE( 192)										if (currentlyFits) {
HXLINE( 192)											currentlyFits = ( (bool)(fit->__get(0)(assignees,patternAssignees,currentlyFits)) );
            										}
            										else {
HXLINE( 192)											currentlyFits = false;
            										}
            									}
HXLINE( 193)									if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1) )) {
HXLINE( 193)										if (currentlyFits) {
HXLINE( 193)											 ::Dynamic fit6 = fit->__get(0);
HXDLIN( 193)											::Array< ::Dynamic> currentlyFits6 = ::Type_obj::enumParameters(value);
HXDLIN( 193)											currentlyFits = ( (bool)(fit6(currentlyFits6,( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1)->__Field(HX_("getParameters",e0,1a,f1,ad),::hx::paccDynamic)()) ),currentlyFits)) );
            										}
            										else {
HXLINE( 193)											currentlyFits = false;
            										}
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE( 189)								 ::little::interpreter::InterpTokens _g21 = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)								 ::little::interpreter::InterpTokens _g22 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)								if (currentlyFits) {
HXLINE( 189)									 ::Dynamic fit7 = fit->__get(0);
HXDLIN( 189)									::Array< ::Dynamic> currentlyFits7 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 189)									currentlyFits = ( (bool)(fit7(currentlyFits7,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 189)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)12: {
HXLINE( 195)								::Array< ::Dynamic> parts = _g2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 195)								 ::little::interpreter::InterpTokens type = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 195)								{
HXLINE( 196)									::Array< ::Dynamic> patternParts = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)->__Field(HX_("copy",b5,bb,c4,41),::hx::paccDynamic)()) );
HXLINE( 197)									if (::hx::IsNotNull( patternParts )) {
HXLINE( 197)										if (currentlyFits) {
HXLINE( 197)											currentlyFits = ( (bool)(fit->__get(0)(parts,patternParts,currentlyFits)) );
            										}
            										else {
HXLINE( 197)											currentlyFits = false;
            										}
            									}
HXLINE( 198)									if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1) )) {
HXLINE( 198)										if (currentlyFits) {
HXLINE( 198)											 ::Dynamic fit8 = fit->__get(0);
HXDLIN( 198)											::Array< ::Dynamic> currentlyFits8 = ::Type_obj::enumParameters(type);
HXDLIN( 198)											currentlyFits = ( (bool)(fit8(currentlyFits8,( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1)->__Field(HX_("getParameters",e0,1a,f1,ad),::hx::paccDynamic)()) ),currentlyFits)) );
            										}
            										else {
HXLINE( 198)											currentlyFits = false;
            										}
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE( 195)								::Array< ::Dynamic> parts1 = _g2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 195)								 ::little::interpreter::InterpTokens type1 = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 195)								{
HXLINE( 196)									::Array< ::Dynamic> patternParts1 = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)->__Field(HX_("copy",b5,bb,c4,41),::hx::paccDynamic)()) );
HXLINE( 197)									if (::hx::IsNotNull( patternParts1 )) {
HXLINE( 197)										if (currentlyFits) {
HXLINE( 197)											currentlyFits = ( (bool)(fit->__get(0)(parts1,patternParts1,currentlyFits)) );
            										}
            										else {
HXLINE( 197)											currentlyFits = false;
            										}
            									}
HXLINE( 198)									if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1) )) {
HXLINE( 198)										if (currentlyFits) {
HXLINE( 198)											 ::Dynamic fit9 = fit->__get(0);
HXDLIN( 198)											::Array< ::Dynamic> currentlyFits9 = ::Type_obj::enumParameters(type1);
HXDLIN( 198)											currentlyFits = ( (bool)(fit9(currentlyFits9,( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1)->__Field(HX_("getParameters",e0,1a,f1,ad),::hx::paccDynamic)()) ),currentlyFits)) );
            										}
            										else {
HXLINE( 198)											currentlyFits = false;
            										}
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE( 200)								::Array< ::Dynamic> parts2 = _g2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 200)								{
HXLINE( 201)									::Array< ::Dynamic> patternParts2 = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) );
HXLINE( 202)									if (::hx::IsNotNull( patternParts2 )) {
HXLINE( 202)										if (currentlyFits) {
HXLINE( 202)											currentlyFits = ( (bool)(fit->__get(0)(parts2,patternParts2,currentlyFits)) );
            										}
            										else {
HXLINE( 202)											currentlyFits = false;
            										}
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE( 204)								 ::little::interpreter::InterpTokens name = _g2->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 204)								 ::little::interpreter::InterpTokens property = _g2->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 204)								if (currentlyFits) {
HXLINE( 204)									 ::Dynamic fit10 = fit->__get(0);
HXDLIN( 204)									::Array< ::Dynamic> currentlyFits10 = ::Type_obj::enumParameters(given->__get(i).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 204)									currentlyFits = ( (bool)(fit10(currentlyFits10,::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()),currentlyFits)) );
            								}
            								else {
HXLINE( 204)									currentlyFits = false;
            								}
            							}
            							break;
            							case (int)16: {
HXLINE( 184)								int _g23 = _g2->_hx_getInt(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)17: {
HXLINE( 184)								Float _g24 = _g2->_hx_getFloat(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)18: {
HXLINE( 184)								::String _g25 = _g2->_hx_getString(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)19: {
HXLINE( 184)								::String _g26 = _g2->_hx_getString(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)21: {
HXLINE( 184)								::String _g27 = _g2->_hx_getString(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)25: {
HXLINE( 184)								::String _g28 = _g2->_hx_getString(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							case (int)26: {
HXLINE( 205)								 ::haxe::ds::StringMap props = _g2->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 205)								::String typeName = _g2->_hx_getString(1);
HXDLIN( 205)								return false;
            							}
            							break;
            							case (int)27: {
HXLINE( 184)								::String _g29 = _g2->_hx_getString(0);
HXDLIN( 184)								if (::hx::IsNotNull( ::Type_obj::enumParameters(pattern->__get(i).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0) )) {
HXLINE( 184)									return false;
            								}
            							}
            							break;
            							default:{
HXLINE( 206)								continue;
            							}
            						}
            					}
HXLINE( 209)					if (!(currentlyFits)) {
HXLINE( 209)						return false;
            					}
            				}
            			}
HXLINE( 212)			return currentlyFits;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_172_condition)
HXLINE( 173)		 ::little::interpreter::memory::Memory conditionToken = ::little::Little_obj::memory;
HXDLIN( 173)		 ::Dynamic conditionToken1 = conditionToken->read(::little::tools::Extensions_obj::asStringPath(name));
HXLINE( 174)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 174)		_hx_tmp(conditionToken1, ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("little.interpreter.Interpreter",6e,d9,f3,2f))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,::little::tools::Extensions_obj::asStringPath(name))->init(1,body))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("condition",9b,e9,33,fc))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/little/interpreter/Interpreter.hx",e7,a3,e4,c4))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),174)));
HXLINE( 175)		 ::little::interpreter::InterpTokens conditionToken2 = conditionToken1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXDLIN( 175)		::little::interpreter::Interpreter_obj::_hx_assert(conditionToken2,::little::tools::InterpTokensSimple_obj::CONDITION_CODE_dyn(),((HX_("",00,00,00,00) + ::Std_obj::string(::little::tools::Extensions_obj::asStringPath(name))) + HX_(" is not a condition.",95,47,44,55)));
HXLINE( 176)		 ::haxe::ds::ObjectMap patterns = ( ( ::haxe::ds::ObjectMap)(::Type_obj::enumParameters(conditionToken1->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) );
HXLINE( 177)		::Array< ::Dynamic> givenPattern = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(pattern)->__get(0)) );
HXLINE( 178)		::Array< ::Dynamic> fit = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 178)		fit[0] =  ::Dynamic(new _hx_Closure_0(fit));
HXLINE( 214)		::String patternString = ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),pattern);
HXLINE( 216)		::String bodyString = ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),body);
HXLINE( 218)		{
HXLINE( 218)			::Dynamic map = patterns;
HXDLIN( 218)			::Dynamic _g_map = map;
HXDLIN( 218)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 218)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 218)				::Array< ::Dynamic> key = ( (::Array< ::Dynamic>)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 218)				 ::little::interpreter::InterpTokens _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 218)				::Array< ::Dynamic> _g_key = key;
HXDLIN( 218)				::Array< ::Dynamic> _pattern = _g_key;
HXDLIN( 218)				 ::little::interpreter::InterpTokens caller = _g_value;
HXLINE( 219)				bool _hx_tmp1;
HXDLIN( 219)				if (::hx::IsNotNull( _pattern )) {
HXLINE( 219)					_hx_tmp1 = ( (bool)(fit->__get(0)(givenPattern,_pattern,null())) );
            				}
            				else {
HXLINE( 219)					_hx_tmp1 = true;
            				}
HXDLIN( 219)				if (_hx_tmp1) {
HXLINE( 220)					::Array< ::Dynamic> conditionRunner = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(caller)->__get(0)) );
HXLINE( 221)					::Array< ::Dynamic> params = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::interpreter::InterpTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION_PATTERN_PARAMETER_NAME),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_STRING),null())),::little::interpreter::InterpTokens_obj::Characters(patternString)))->init(1,::little::interpreter::InterpTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION_BODY_PARAMETER_NAME),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_STRING),null())),::little::interpreter::InterpTokens_obj::Characters(bodyString)));
HXLINE( 226)					{
HXLINE( 226)						int _g = 0;
HXDLIN( 226)						::Array< ::Dynamic> _g1 = ::little::Little_obj::runtime->onConditionCalled;
HXDLIN( 226)						while((_g < _g1->length)){
HXLINE( 226)							 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 226)							_g = (_g + 1);
HXLINE( 227)							listener(::little::tools::Extensions_obj::asJoinedStringPath(name),givenPattern,body);
            						}
            					}
HXLINE( 229)					return ::little::interpreter::Interpreter_obj::run(params->concat(conditionRunner),true);
            				}
            			}
            		}
HXLINE( 233)		::String _hx_tmp2 = ((((HX_("Pattern ",f0,3b,60,10) + patternString) + HX_(" is not supported in condition ",eb,51,9b,c1)) + ::Std_obj::string(::little::tools::Extensions_obj::asStringPath(name))) + HX_(" (patterns (`*` means any value): \n\t(",a8,5c,45,89));
HXDLIN( 233)		::Array< ::Dynamic> _g2 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 233)		{
HXLINE( 233)			 ::Dynamic pattern1 = patterns->keys();
HXDLIN( 233)			while(( (bool)(pattern1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 233)				::Array< ::Dynamic> pattern2 = ( (::Array< ::Dynamic>)(pattern1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 233)				_g2->push(pattern2);
            			}
            		}
HXDLIN( 233)		::Array< ::Dynamic> _this = _g2;
HXDLIN( 233)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 233)		{
HXLINE( 233)			int _g3 = 0;
HXDLIN( 233)			int _g4 = _this->length;
HXDLIN( 233)			while((_g3 < _g4)){
HXLINE( 233)				_g3 = (_g3 + 1);
HXDLIN( 233)				int i = (_g3 - 1);
HXDLIN( 233)				{
HXLINE( 233)					::String inValue = ::little::tools::TextTools_obj::replace(::little::tools::PrettyPrinter_obj::stringifyInterpreter(( (::Array< ::Dynamic>)(_hx_array_unsafe_get(_this,i)) ),null()),HX_("null",87,9e,0e,49),HX_("*",2a,00,00,00));
HXDLIN( 233)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 233)		return ::little::interpreter::Interpreter_obj::error(((_hx_tmp2 + result->join(HX_("),\n\t(",86,ca,8a,b8))) + HX_(")\n)",48,25,1f,00)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Interpreter_obj,condition,return )

 ::little::interpreter::InterpTokens Interpreter_obj::write(::Array< ::Dynamic> assignees, ::little::interpreter::InterpTokens value){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_244_write)
HXLINE( 246)		::Array< ::Dynamic> vars = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 246)		::Array< ::Dynamic> funcs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 247)		bool containsFunction = false;
HXLINE( 248)		bool containsVariable = false;
HXLINE( 249)		{
HXLINE( 249)			int _g = 0;
HXDLIN( 249)			while((_g < assignees->length)){
HXLINE( 249)				 ::little::interpreter::InterpTokens assignee = assignees->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 249)				_g = (_g + 1);
HXLINE( 250)				switch((int)(assignee->_hx_getIndex())){
            					case (int)3: {
HXLINE( 251)						 ::little::interpreter::InterpTokens name = assignee->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 251)						 ::little::interpreter::InterpTokens type = assignee->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 251)						 ::little::interpreter::InterpTokens doc = assignee->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 251)						{
HXLINE( 251)							::little::interpreter::Interpreter_obj::declareVariable(name,type,doc);
HXDLIN( 251)							vars->push(name);
HXDLIN( 251)							containsVariable = true;
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 252)						 ::little::interpreter::InterpTokens name1 = assignee->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)						 ::little::interpreter::InterpTokens params = assignee->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)						 ::little::interpreter::InterpTokens type1 = assignee->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)						 ::little::interpreter::InterpTokens doc1 = assignee->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)						{
HXLINE( 252)							::little::interpreter::Interpreter_obj::declareFunction(name1,params,doc1);
HXDLIN( 252)							funcs->push(name1);
HXDLIN( 252)							containsFunction = true;
            						}
            					}
            					break;
            					default:{
HXLINE( 253)						vars->push(assignee);
HXDLIN( 253)						containsVariable = true;
            					}
            				}
            			}
            		}
HXLINE( 257)		if (containsFunction) {
HXLINE( 258)			::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(funcs->length);
HXDLIN( 258)			{
HXLINE( 258)				int _g1 = 0;
HXDLIN( 258)				int _g2 = funcs->length;
HXDLIN( 258)				while((_g1 < _g2)){
HXLINE( 258)					_g1 = (_g1 + 1);
HXDLIN( 258)					int i = (_g1 - 1);
HXDLIN( 258)					{
HXLINE( 258)						::Array< ::String > inValue = ::little::tools::Extensions_obj::asStringPath(_hx_array_unsafe_get(funcs,i));
HXDLIN( 258)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 258)			::Array< ::Dynamic> paths = result;
HXLINE( 259)			{
HXLINE( 259)				int _g3 = 0;
HXDLIN( 259)				while((_g3 < paths->length)){
HXLINE( 259)					::Array< ::String > path = paths->__get(_g3).StaticCast< ::Array< ::String > >();
HXDLIN( 259)					_g3 = (_g3 + 1);
HXLINE( 260)					 ::little::interpreter::InterpTokens func = ::little::Little_obj::memory->read(path)->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
HXLINE( 261)					 ::little::interpreter::memory::Memory _hx_tmp = ::little::Little_obj::memory;
HXDLIN( 261)					 ::little::interpreter::InterpTokens _hx_tmp1 = ::little::interpreter::InterpTokens_obj::FunctionCode(::Type_obj::enumParameters(func)->__get(0),value);
HXDLIN( 261)					_hx_tmp->set(path,_hx_tmp1,::little::Little_obj::keywords->TYPE_FUNCTION,HX_("",00,00,00,00));
            				}
            			}
            		}
HXLINE( 265)		if (containsVariable) {
HXLINE( 266)			::Array< ::Dynamic> result1 = ::Array_obj< ::Dynamic>::__new(vars->length);
HXDLIN( 266)			{
HXLINE( 266)				int _g4 = 0;
HXDLIN( 266)				int _g5 = vars->length;
HXDLIN( 266)				while((_g4 < _g5)){
HXLINE( 266)					_g4 = (_g4 + 1);
HXDLIN( 266)					int i1 = (_g4 - 1);
HXDLIN( 266)					{
HXLINE( 266)						::Array< ::String > inValue1 = ::little::tools::Extensions_obj::asStringPath(_hx_array_unsafe_get(vars,i1));
HXDLIN( 266)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN( 266)			::Array< ::Dynamic> paths1 = result1;
HXLINE( 268)			 ::little::interpreter::InterpTokens evaluated = ::little::interpreter::Interpreter_obj::evaluate(value,null());
HXLINE( 269)			{
HXLINE( 269)				int _g6 = 0;
HXDLIN( 269)				while((_g6 < paths1->length)){
HXLINE( 269)					::Array< ::String > path1 = paths1->__get(_g6).StaticCast< ::Array< ::String > >();
HXDLIN( 269)					_g6 = (_g6 + 1);
HXLINE( 270)					 ::little::interpreter::memory::Memory _hx_tmp2 = ::little::Little_obj::memory;
HXDLIN( 270)					 ::little::interpreter::InterpTokens _hx_tmp3;
HXDLIN( 270)					::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->init(1,::little::tools::InterpTokensSimple_obj::PROPERTY_ACCESS_dyn())->copy();
HXDLIN( 270)					::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 270)					{
HXLINE( 270)						int _g7 = 0;
HXDLIN( 270)						int _g8 = _this->length;
HXDLIN( 270)						while((_g7 < _g8)){
HXLINE( 270)							_g7 = (_g7 + 1);
HXDLIN( 270)							int i2 = (_g7 - 1);
HXDLIN( 270)							{
HXLINE( 270)								::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 270)								result2->__unsafe_set(i2,inValue2);
            							}
            						}
            					}
HXDLIN( 270)					if (result2->contains(::Type_obj::enumConstructor(value).toLowerCase())) {
HXLINE( 270)						_hx_tmp3 = value;
            					}
            					else {
HXLINE( 270)						_hx_tmp3 = evaluated;
            					}
HXDLIN( 270)					_hx_tmp2->set(path1,_hx_tmp3,::little::tools::Extensions_obj::type(evaluated),HX_("",00,00,00,00));
            				}
            			}
            		}
HXLINE( 274)		{
HXLINE( 274)			int _g9 = 0;
HXDLIN( 274)			::Array< ::Dynamic> _g10 = ::little::Little_obj::runtime->onWriteValue->copy();
HXDLIN( 274)			while((_g9 < _g10->length)){
HXLINE( 274)				 ::Dynamic listener = _g10->__get(_g9);
HXDLIN( 274)				_g9 = (_g9 + 1);
HXLINE( 275)				::Array< ::String > result3 = ::Array_obj< ::String >::__new(vars->length);
HXDLIN( 275)				{
HXLINE( 275)					int _g11 = 0;
HXDLIN( 275)					int _g12 = vars->length;
HXDLIN( 275)					while((_g11 < _g12)){
HXLINE( 275)						_g11 = (_g11 + 1);
HXDLIN( 275)						int i3 = (_g11 - 1);
HXDLIN( 275)						{
HXLINE( 275)							 ::little::interpreter::InterpTokens x = _hx_array_unsafe_get(vars,i3);
HXDLIN( 275)							::String inValue3;
HXDLIN( 275)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 275)							::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 275)							{
HXLINE( 275)								int _g13 = 0;
HXDLIN( 275)								int _g14 = _this1->length;
HXDLIN( 275)								while((_g13 < _g14)){
HXLINE( 275)									_g13 = (_g13 + 1);
HXDLIN( 275)									int i4 = (_g13 - 1);
HXDLIN( 275)									{
HXLINE( 275)										::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 275)										result4->__unsafe_set(i4,inValue4);
            									}
            								}
            							}
HXDLIN( 275)							if (result4->contains(::Type_obj::enumConstructor(x).toLowerCase())) {
HXLINE( 275)								inValue3 = ( (::String)(::Type_obj::enumParameters(x)->__get(0)) );
            							}
            							else {
HXLINE( 275)								inValue3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,x),null()))->__get(0)) );
            							}
HXDLIN( 275)							result3->__unsafe_set(i3,inValue3);
            						}
            					}
            				}
HXDLIN( 275)				::Array< ::String > _hx_tmp4 = result3;
HXDLIN( 275)				::Array< ::String > result5 = ::Array_obj< ::String >::__new(funcs->length);
HXDLIN( 275)				{
HXLINE( 275)					int _g15 = 0;
HXDLIN( 275)					int _g16 = funcs->length;
HXDLIN( 275)					while((_g15 < _g16)){
HXLINE( 275)						_g15 = (_g15 + 1);
HXDLIN( 275)						int i5 = (_g15 - 1);
HXDLIN( 275)						{
HXLINE( 275)							 ::little::interpreter::InterpTokens x1 = _hx_array_unsafe_get(funcs,i5);
HXDLIN( 275)							::String inValue5;
HXDLIN( 275)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 275)							::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 275)							{
HXLINE( 275)								int _g17 = 0;
HXDLIN( 275)								int _g18 = _this2->length;
HXDLIN( 275)								while((_g17 < _g18)){
HXLINE( 275)									_g17 = (_g17 + 1);
HXDLIN( 275)									int i6 = (_g17 - 1);
HXDLIN( 275)									{
HXLINE( 275)										::String inValue6 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i6)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 275)										result6->__unsafe_set(i6,inValue6);
            									}
            								}
            							}
HXDLIN( 275)							if (result6->contains(::Type_obj::enumConstructor(x1).toLowerCase())) {
HXLINE( 275)								inValue5 = ( (::String)(::Type_obj::enumParameters(x1)->__get(0)) );
            							}
            							else {
HXLINE( 275)								inValue5 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,x1),null()))->__get(0)) );
            							}
HXDLIN( 275)							result5->__unsafe_set(i5,inValue5);
            						}
            					}
            				}
HXDLIN( 275)				listener(_hx_tmp4->concat(result5));
            			}
            		}
HXLINE( 278)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,write,return )

 ::little::interpreter::InterpTokens Interpreter_obj::call( ::little::interpreter::InterpTokens name, ::little::interpreter::InterpTokens params){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_286_call)
HXLINE( 287)		 ::little::interpreter::InterpTokens functionCode = ::little::interpreter::Interpreter_obj::evaluate(name,null());
HXLINE( 288)		::String functionName = ::little::tools::Extensions_obj::asJoinedStringPath(name);
HXLINE( 289)		::Array< ::Dynamic> processedParams = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 290)		::Array< ::Dynamic> current = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 291)		{
HXLINE( 291)			int _g = 0;
HXDLIN( 291)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(params)->__get(0)) );
HXDLIN( 291)			while((_g < _g1->length)){
HXLINE( 291)				 ::little::interpreter::InterpTokens p = _g1->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 291)				_g = (_g + 1);
HXLINE( 292)				switch((int)(p->_hx_getIndex())){
            					case (int)0: {
HXLINE( 297)						int l = p->_hx_getInt(0);
HXDLIN( 297)						::little::interpreter::Interpreter_obj::setLine(l);
            					}
            					break;
            					case (int)2: {
HXLINE( 294)						processedParams->push(::little::interpreter::Interpreter_obj::calculate(current));
HXLINE( 295)						current = ::Array_obj< ::Dynamic>::__new(0);
            					}
            					break;
            					default:{
HXLINE( 298)						current->push(p);
            					}
            				}
            			}
            		}
HXLINE( 301)		if ((current->length > 0)) {
HXLINE( 301)			processedParams->push(::little::interpreter::Interpreter_obj::calculate(current));
            		}
HXLINE( 303)		if ((functionCode->_hx_getIndex() == 7)) {
HXLINE( 304)			 ::little::tools::BaseOrderedMap requiredAndOptionalParams = functionCode->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 304)			 ::little::interpreter::InterpTokens body = functionCode->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 305)			int given = processedParams->length;
HXLINE( 306)			::Array< ::Dynamic> resulting = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 308)			int required = 0;
HXLINE( 309)			::Array< ::String > unattained = ::Array_obj< ::String >::__new(0);
HXLINE( 310)			::Array< ::Dynamic> attachment = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 311)			{
HXLINE( 311)				 ::little::tools::OrderedMapKeyValueIterator _g2 = requiredAndOptionalParams->keyValueIterator();
HXDLIN( 311)				while(true){
HXLINE( 311)					bool _hx_tmp;
HXDLIN( 311)					if ((_g2->karray->get_length() == _g2->varray->get_length())) {
HXLINE( 311)						_hx_tmp = (_g2->current < _g2->karray->get_length());
            					}
            					else {
HXLINE( 311)						_hx_tmp = false;
            					}
HXDLIN( 311)					if (!(_hx_tmp)) {
HXLINE( 311)						goto _hx_goto_48;
            					}
HXDLIN( 311)					 ::little::interpreter::InterpTokens _g_value = Dynamic( _g2->varray->__get(_g2->current)).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 311)					::String _g_key = ( (::String)(_g2->karray->__get(_g2->current++)) );
HXDLIN( 311)					::String key = _g_key;
HXDLIN( 311)					 ::little::interpreter::InterpTokens typeCast = _g_value;
HXDLIN( 311)					{
HXLINE( 312)						::String name1 = key;
HXDLIN( 312)						 ::little::interpreter::InterpTokens value = null();
HXDLIN( 312)						 ::little::interpreter::InterpTokens type = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXLINE( 313)						if ((typeCast->_hx_getIndex() == 11)) {
HXLINE( 316)							 ::little::interpreter::InterpTokens _g3 = typeCast->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 316)							 ::little::interpreter::InterpTokens _g4 = typeCast->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 316)							if ((_g3->_hx_getIndex() == 22)) {
HXLINE( 314)								 ::little::interpreter::InterpTokens t = _g4;
HXDLIN( 314)								type = t;
            							}
            							else {
HXLINE( 315)								 ::Dynamic _hx_tmp1 = ::Type_obj::enumParameters(_g4)->__get(0);
HXDLIN( 315)								if ((::hx::IsEq( _hx_tmp1,::little::Little_obj::keywords->TYPE_UNKNOWN ) == true)) {
HXLINE( 315)									 ::little::interpreter::InterpTokens v = _g3;
HXDLIN( 315)									value = v;
            								}
            								else {
HXLINE( 316)									 ::little::interpreter::InterpTokens v1 = _g3;
HXDLIN( 316)									 ::little::interpreter::InterpTokens t1 = _g4;
HXDLIN( 316)									{
HXLINE( 316)										type = t1;
HXDLIN( 316)										value = v1;
            									}
            								}
            							}
            						}
HXLINE( 319)						if (::hx::IsNull( value )) {
HXLINE( 319)							required = (required + 1);
            						}
HXLINE( 320)						if ((processedParams->length > 0)) {
HXLINE( 320)							value = processedParams->shift().StaticCast<  ::little::interpreter::InterpTokens >();
            						}
            						else {
HXLINE( 321)							bool _hx_tmp2;
HXDLIN( 321)							if (::hx::IsNull( value )) {
HXLINE( 321)								_hx_tmp2 = (processedParams->length == 0);
            							}
            							else {
HXLINE( 321)								_hx_tmp2 = false;
            							}
HXDLIN( 321)							if (_hx_tmp2) {
HXLINE( 321)								unattained->push(name1);
            							}
            						}
HXLINE( 322)						resulting->push(value);
HXLINE( 323)						attachment->push(::little::interpreter::InterpTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(name1),type,null())),value));
            					}
            				}
            				_hx_goto_48:;
            			}
HXLINE( 325)			if ((given > requiredAndOptionalParams->_ks->get_length())) {
HXLINE( 325)				required = requiredAndOptionalParams->_ks->get_length();
            			}
HXLINE( 326)			bool _hx_tmp3;
HXDLIN( 326)			if ((required <= given)) {
HXLINE( 326)				_hx_tmp3 = (given > requiredAndOptionalParams->_ks->get_length());
            			}
            			else {
HXLINE( 326)				_hx_tmp3 = true;
            			}
HXDLIN( 326)			if (_hx_tmp3) {
HXLINE( 327)				::String _hx_tmp4;
HXDLIN( 327)				if ((required == 1)) {
HXLINE( 327)					_hx_tmp4 = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 327)					_hx_tmp4 = HX_("s",73,00,00,00);
            				}
HXDLIN( 327)				::String _hx_tmp5;
HXDLIN( 327)				bool _hx_tmp6;
HXDLIN( 327)				if ((given != 0)) {
HXLINE( 327)					_hx_tmp6 = (given > requiredAndOptionalParams->_ks->get_length());
            				}
            				else {
HXLINE( 327)					_hx_tmp6 = true;
            				}
HXDLIN( 327)				if (_hx_tmp6) {
HXLINE( 327)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 327)					_hx_tmp5 = HX_(" only",8c,15,85,b6);
            				}
HXDLIN( 327)				::String _hx_tmp7;
HXDLIN( 327)				if ((processedParams->length == 1)) {
HXLINE( 327)					_hx_tmp7 = HX_("was",29,a1,5a,00);
            				}
            				else {
HXLINE( 327)					_hx_tmp7 = HX_("were",41,6b,f5,4e);
            				}
HXDLIN( 327)				::String _hx_tmp8;
HXDLIN( 327)				if ((required > given)) {
HXLINE( 327)					::String _hx_tmp9;
HXDLIN( 327)					if ((unattained->length == 1)) {
HXLINE( 327)						_hx_tmp9 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 327)						_hx_tmp9 = HX_("s",73,00,00,00);
            					}
HXDLIN( 327)					_hx_tmp8 = ((((HX_("(parameter",81,f0,52,54) + _hx_tmp9) + HX_(" `",40,1c,00,00)) + ::little::tools::TextTools_obj::replaceLast(unattained->join(HX_(", ",74,26,00,00)),HX_(",",2c,00,00,00),HX_(" &",06,1c,00,00))) + HX_("` got left out).",2e,c5,51,c7));
            				}
            				else {
HXLINE( 327)					_hx_tmp8 = HX_("",00,00,00,00);
            				}
HXDLIN( 327)				return ::little::interpreter::Interpreter_obj::error((((((((((((((HX_("Incorrect number of parameters: Function `",95,76,1d,b9) + functionName) + HX_("` fully requires ",9c,33,30,d7)) + required) + HX_(" parameter",89,31,ff,51)) + _hx_tmp4) + HX_(", but",4d,1d,13,6b)) + _hx_tmp5) + HX_(" ",20,00,00,00)) + given) + HX_(" ",20,00,00,00)) + _hx_tmp7) + HX_(" given ",23,1c,d0,24)) + _hx_tmp8),null());
            			}
HXLINE( 330)			{
HXLINE( 330)				int _g5 = 0;
HXDLIN( 330)				::Array< ::Dynamic> _g6 = ::little::Little_obj::runtime->onFunctionCalled;
HXDLIN( 330)				while((_g5 < _g6->length)){
HXLINE( 330)					 ::Dynamic listener = _g6->__get(_g5);
HXDLIN( 330)					_g5 = (_g5 + 1);
HXLINE( 331)					listener(functionName,resulting);
            				}
            			}
HXLINE( 334)			::little::Little_obj::runtime->callStack->push( ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("linePart",07,32,7b,87),::little::Little_obj::runtime->linePart)
            				->setFixed(1,HX_("module",ac,34,d3,c0),::little::Little_obj::runtime->module)
            				->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionCall(name,params))
            				->setFixed(3,HX_("line",f4,17,b3,47),::little::Little_obj::runtime->line)));
HXLINE( 336)			 ::little::interpreter::InterpTokens t2 = ::little::interpreter::Interpreter_obj::run(attachment->concat(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(body)->__get(0)) )),null());
HXLINE( 338)			::little::Little_obj::runtime->callStack->pop();
HXLINE( 340)			return t2;
            		}
            		else {
HXLINE( 342)			return null();
            		}
HXLINE( 303)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,call,return )

 ::little::interpreter::InterpTokens Interpreter_obj::read( ::little::interpreter::InterpTokens name){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_353_read)
HXDLIN( 353)		 ::little::interpreter::memory::Memory _hx_tmp = ::little::Little_obj::memory;
HXDLIN( 353)		return _hx_tmp->read(::little::tools::Extensions_obj::asStringPath(name))->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,read,return )

 ::little::interpreter::InterpTokens Interpreter_obj::typeCast( ::little::interpreter::InterpTokens value, ::little::interpreter::InterpTokens type){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_362_typeCast)
HXLINE( 363)		::Array< ::String > preType = ::little::tools::Extensions_obj::asStringPath(::little::tools::Extensions_obj::asTokenPath(::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(value,null()))));
HXLINE( 364)		::String postType;
HXDLIN( 364)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 364)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 364)		{
HXLINE( 364)			int _g = 0;
HXDLIN( 364)			int _g1 = _this->length;
HXDLIN( 364)			while((_g < _g1)){
HXLINE( 364)				_g = (_g + 1);
HXDLIN( 364)				int i = (_g - 1);
HXDLIN( 364)				{
HXLINE( 364)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 364)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 364)		if (result->contains(::Type_obj::enumConstructor(type).toLowerCase())) {
HXLINE( 364)			postType = ( (::String)(::Type_obj::enumParameters(type)->__get(0)) );
            		}
            		else {
HXLINE( 364)			postType = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,type),null()))->__get(0)) );
            		}
HXDLIN( 364)		::Array< ::String > postType1 = ::little::tools::Extensions_obj::asStringPath(::little::tools::Extensions_obj::asTokenPath(postType));
HXLINE( 365)		bool _hx_tmp;
HXDLIN( 365)		::String _hx_tmp1 = preType->join(HX_("",00,00,00,00));
HXDLIN( 365)		if ((_hx_tmp1 != postType1->join(HX_("",00,00,00,00)))) {
HXLINE( 365)			::String _hx_tmp2 = postType1->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXDLIN( 365)			_hx_tmp = (_hx_tmp2 == ::little::Little_obj::keywords->TYPE_UNKNOWN);
            		}
            		else {
HXLINE( 365)			_hx_tmp = true;
            		}
HXDLIN( 365)		if (_hx_tmp) {
HXLINE( 365)			return value;
            		}
HXLINE( 367)		::String _hx_tmp3 = ::little::Little_obj::keywords->TYPE_CAST_FUNCTION_PREFIX;
HXDLIN( 367)		preType->push((_hx_tmp3 + postType1->join(HX_("_",5f,00,00,00))));
HXLINE( 369)		value = ::little::interpreter::Interpreter_obj::call(::little::tools::Extensions_obj::asTokenPath(preType->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)),::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(1)->init(0,value)));
HXLINE( 371)		{
HXLINE( 371)			int _g2 = 0;
HXDLIN( 371)			::Array< ::Dynamic> _g3 = ::little::Little_obj::runtime->onTypeCast;
HXDLIN( 371)			while((_g2 < _g3->length)){
HXLINE( 371)				 ::Dynamic listener = _g3->__get(_g2);
HXDLIN( 371)				_g2 = (_g2 + 1);
HXLINE( 372)				listener(value,::little::tools::Extensions_obj::asJoinedStringPath(type));
            			}
            		}
HXLINE( 375)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,typeCast,return )

 ::little::interpreter::InterpTokens Interpreter_obj::run(::Array< ::Dynamic> body,::hx::Null< bool >  __o_propagateReturns){
            		bool propagateReturns = __o_propagateReturns.Default(false);
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_385_run)
HXLINE( 386)		 ::little::interpreter::InterpTokens returnVal = null();
HXLINE( 387)		::little::Little_obj::memory->referrer->pushScope();
HXLINE( 388)		int i = 0;
HXLINE( 389)		while((i < body->length)){
HXLINE( 390)			 ::little::interpreter::InterpTokens token = body->__get(i).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 392)			if (::hx::IsNull( token )) {
HXLINE( 392)				i = (i + 1);
HXDLIN( 392)				continue;
            			}
HXLINE( 393)			::little::Little_obj::runtime->currentToken = token;
HXLINE( 394)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 395)					int line = token->_hx_getInt(0);
HXLINE( 396)					::little::interpreter::Interpreter_obj::setLine(line);
            				}
            				break;
            				case (int)1: {
HXLINE( 398)					::String module = token->_hx_getString(0);
HXDLIN( 398)					::little::interpreter::Interpreter_obj::setModule(module);
            				}
            				break;
            				case (int)2: {
HXLINE( 399)					::little::interpreter::Interpreter_obj::splitLine();
            				}
            				break;
            				case (int)3: {
HXLINE( 400)					 ::little::interpreter::InterpTokens name = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 400)					 ::little::interpreter::InterpTokens type = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 400)					 ::little::interpreter::InterpTokens doc = token->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 400)					{
HXLINE( 401)						 ::little::interpreter::InterpTokens _hx_tmp;
HXDLIN( 401)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 401)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 401)						{
HXLINE( 401)							int _g = 0;
HXDLIN( 401)							int _g1 = _this->length;
HXDLIN( 401)							while((_g < _g1)){
HXLINE( 401)								_g = (_g + 1);
HXDLIN( 401)								int i1 = (_g - 1);
HXDLIN( 401)								{
HXLINE( 401)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 401)									result->__unsafe_set(i1,inValue);
            								}
            							}
            						}
HXDLIN( 401)						if (result->contains(::Type_obj::enumConstructor(name).toLowerCase())) {
HXLINE( 401)							_hx_tmp = ::little::interpreter::Interpreter_obj::evaluate(name,null());
            						}
            						else {
HXLINE( 401)							_hx_tmp = name;
            						}
HXDLIN( 401)						 ::little::interpreter::InterpTokens _hx_tmp1;
HXDLIN( 401)						::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 401)						::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 401)						{
HXLINE( 401)							int _g2 = 0;
HXDLIN( 401)							int _g3 = _this1->length;
HXDLIN( 401)							while((_g2 < _g3)){
HXLINE( 401)								_g2 = (_g2 + 1);
HXDLIN( 401)								int i2 = (_g2 - 1);
HXDLIN( 401)								{
HXLINE( 401)									::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 401)									result1->__unsafe_set(i2,inValue1);
            								}
            							}
            						}
HXDLIN( 401)						if (result1->contains(::Type_obj::enumConstructor(type).toLowerCase())) {
HXLINE( 401)							_hx_tmp1 = ::little::interpreter::Interpreter_obj::evaluate(type,null());
            						}
            						else {
HXLINE( 401)							_hx_tmp1 = type;
            						}
HXDLIN( 401)						 ::little::interpreter::InterpTokens _hx_tmp2;
HXDLIN( 401)						if (::hx::IsNotNull( doc )) {
HXLINE( 401)							_hx_tmp2 = ::little::interpreter::Interpreter_obj::evaluate(doc,null());
            						}
            						else {
HXLINE( 401)							_hx_tmp2 = ::little::interpreter::InterpTokens_obj::Characters(HX_("",00,00,00,00));
            						}
HXDLIN( 401)						::little::interpreter::Interpreter_obj::declareVariable(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXLINE( 402)						returnVal = ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 404)					 ::little::interpreter::InterpTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 404)					 ::little::interpreter::InterpTokens params = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 404)					 ::little::interpreter::InterpTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 404)					 ::little::interpreter::InterpTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 404)					{
HXLINE( 405)						 ::little::interpreter::InterpTokens _hx_tmp3;
HXDLIN( 405)						::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 405)						::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 405)						{
HXLINE( 405)							int _g4 = 0;
HXDLIN( 405)							int _g5 = _this2->length;
HXDLIN( 405)							while((_g4 < _g5)){
HXLINE( 405)								_g4 = (_g4 + 1);
HXDLIN( 405)								int i3 = (_g4 - 1);
HXDLIN( 405)								{
HXLINE( 405)									::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 405)									result2->__unsafe_set(i3,inValue2);
            								}
            							}
            						}
HXDLIN( 405)						if (result2->contains(::Type_obj::enumConstructor(name1).toLowerCase())) {
HXLINE( 405)							_hx_tmp3 = ::little::interpreter::Interpreter_obj::evaluate(name1,null());
            						}
            						else {
HXLINE( 405)							_hx_tmp3 = name1;
            						}
HXDLIN( 405)						 ::little::interpreter::InterpTokens _hx_tmp4;
HXDLIN( 405)						if (::hx::IsNotNull( doc1 )) {
HXLINE( 405)							_hx_tmp4 = ::little::interpreter::Interpreter_obj::evaluate(doc1,null());
            						}
            						else {
HXLINE( 405)							_hx_tmp4 = ::little::interpreter::InterpTokens_obj::Characters(HX_("",00,00,00,00));
            						}
HXDLIN( 405)						::little::interpreter::Interpreter_obj::declareFunction(_hx_tmp3,params,_hx_tmp4);
HXLINE( 406)						returnVal = ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 408)					 ::little::interpreter::InterpTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 408)					 ::little::interpreter::InterpTokens exp = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 408)					 ::little::interpreter::InterpTokens body1 = token->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 408)					{
HXLINE( 409)						returnVal = ::little::interpreter::Interpreter_obj::condition(name2,exp,body1);
HXLINE( 410)						bool _hx_tmp5;
HXDLIN( 410)						if (::hx::IsNotNull( returnVal )) {
HXLINE( 410)							::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::FUNCTION_RETURN_dyn())->copy();
HXDLIN( 410)							::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 410)							{
HXLINE( 410)								int _g6 = 0;
HXDLIN( 410)								int _g7 = _this3->length;
HXDLIN( 410)								while((_g6 < _g7)){
HXLINE( 410)									_g6 = (_g6 + 1);
HXDLIN( 410)									int i4 = (_g6 - 1);
HXDLIN( 410)									{
HXLINE( 410)										::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 410)										result3->__unsafe_set(i4,inValue3);
            									}
            								}
            							}
HXDLIN( 410)							_hx_tmp5 = result3->contains(::Type_obj::enumConstructor(returnVal).toLowerCase());
            						}
            						else {
HXLINE( 410)							_hx_tmp5 = false;
            						}
HXDLIN( 410)						if (_hx_tmp5) {
HXLINE( 410)							return ::little::interpreter::Interpreter_obj::evaluate(returnVal,null());
            						}
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 415)					 ::little::interpreter::InterpTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 415)					 ::little::interpreter::InterpTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 416)					returnVal = ::little::interpreter::Interpreter_obj::call(name3,params1);
            				}
            				break;
            				case (int)9: {
HXLINE( 418)					 ::little::interpreter::InterpTokens value = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 418)					 ::little::interpreter::InterpTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 419)					::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::HAXE_EXTERN_dyn())->copy();
HXDLIN( 419)					::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 419)					{
HXLINE( 419)						int _g8 = 0;
HXDLIN( 419)						int _g9 = _this4->length;
HXDLIN( 419)						while((_g8 < _g9)){
HXLINE( 419)							_g8 = (_g8 + 1);
HXDLIN( 419)							int i5 = (_g8 - 1);
HXDLIN( 419)							{
HXLINE( 419)								::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 419)								result4->__unsafe_set(i5,inValue4);
            							}
            						}
            					}
HXDLIN( 419)					if (result4->contains(::Type_obj::enumConstructor(value).toLowerCase())) {
HXLINE( 420)						return ::Type_obj::enumParameters(value)->__get(0)();
            					}
HXLINE( 424)					 ::little::interpreter::InterpTokens v = ::little::interpreter::Interpreter_obj::evaluate(value,null());
HXLINE( 425)					 ::little::interpreter::InterpTokens t = ::little::tools::Extensions_obj::asTokenPath(::little::tools::Extensions_obj::type(v));
HXLINE( 426)					if (propagateReturns) {
HXLINE( 426)						return ::little::interpreter::InterpTokens_obj::FunctionReturn(v,t);
            					}
            					else {
HXLINE( 426)						return v;
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 412)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 412)					 ::little::interpreter::InterpTokens value1 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 413)					returnVal = ::little::interpreter::Interpreter_obj::write(assignees,value1);
            				}
            				break;
            				case (int)13: {
HXLINE( 428)					::Array< ::Dynamic> body2 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 428)					 ::little::interpreter::InterpTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 429)					returnVal = ::little::interpreter::Interpreter_obj::run(body2,null());
            				}
            				break;
            				case (int)15: {
HXLINE( 431)					 ::little::interpreter::InterpTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 431)					 ::little::interpreter::InterpTokens property = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 432)					returnVal = ::little::interpreter::Interpreter_obj::evaluate(token,null());
            				}
            				break;
            				case (int)25: {
HXLINE( 434)					::String name5 = token->_hx_getString(0);
HXLINE( 435)					returnVal = ::little::interpreter::Interpreter_obj::read(token);
            				}
            				break;
            				case (int)28: {
HXLINE( 437)					 ::Dynamic func = token->_hx_getObject(0);
HXLINE( 438)					returnVal = func();
            				}
            				break;
            				default:{
HXLINE( 440)					returnVal = ::little::interpreter::Interpreter_obj::evaluate(token,null());
            				}
            			}
HXLINE( 442)			{
HXLINE( 442)				int _g10 = 0;
HXDLIN( 442)				::Array< ::Dynamic> _g11 = ::little::Little_obj::runtime->onTokenInterpreted;
HXDLIN( 442)				while((_g10 < _g11->length)){
HXLINE( 442)					 ::Dynamic listener = _g11->__get(_g10);
HXDLIN( 442)					_g10 = (_g10 + 1);
HXLINE( 443)					listener(token);
            				}
            			}
HXLINE( 444)			::little::Little_obj::runtime->previousToken = token;
HXLINE( 448)			i = (i + 1);
            		}
HXLINE( 450)		::little::Little_obj::memory->referrer->popScope();
HXLINE( 451)		return returnVal;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,run,return )

 ::little::interpreter::InterpTokens Interpreter_obj::evaluate( ::little::interpreter::InterpTokens exp, ::Dynamic __o_dontThrow){
            		 ::Dynamic dontThrow = __o_dontThrow;
            		if (::hx::IsNull(__o_dontThrow)) dontThrow = false;
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_462_evaluate)
HXDLIN( 462)		switch((int)(exp->_hx_getIndex())){
            			case (int)0: {
HXLINE( 469)				int line = exp->_hx_getInt(0);
HXLINE( 470)				::little::interpreter::Interpreter_obj::setLine(line);
HXLINE( 471)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)1: {
HXLINE( 473)				::String module = exp->_hx_getString(0);
HXLINE( 474)				::little::interpreter::Interpreter_obj::setModule(module);
HXLINE( 475)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 478)				::little::interpreter::Interpreter_obj::splitLine();
HXLINE( 479)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)3: {
HXLINE( 506)				 ::little::interpreter::InterpTokens name = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 506)				 ::little::interpreter::InterpTokens type = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 506)				 ::little::interpreter::InterpTokens doc = exp->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 507)				 ::little::interpreter::InterpTokens _hx_tmp;
HXDLIN( 507)				::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 507)				::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 507)				{
HXLINE( 507)					int _g = 0;
HXDLIN( 507)					int _g1 = _this->length;
HXDLIN( 507)					while((_g < _g1)){
HXLINE( 507)						_g = (_g + 1);
HXDLIN( 507)						int i = (_g - 1);
HXDLIN( 507)						{
HXLINE( 507)							::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 507)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 507)				if (result->contains(::Type_obj::enumConstructor(name).toLowerCase())) {
HXLINE( 507)					_hx_tmp = ::little::interpreter::Interpreter_obj::evaluate(name,null());
            				}
            				else {
HXLINE( 507)					_hx_tmp = name;
            				}
HXDLIN( 507)				 ::little::interpreter::InterpTokens _hx_tmp1;
HXDLIN( 507)				::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 507)				::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 507)				{
HXLINE( 507)					int _g2 = 0;
HXDLIN( 507)					int _g3 = _this1->length;
HXDLIN( 507)					while((_g2 < _g3)){
HXLINE( 507)						_g2 = (_g2 + 1);
HXDLIN( 507)						int i1 = (_g2 - 1);
HXDLIN( 507)						{
HXLINE( 507)							::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 507)							result1->__unsafe_set(i1,inValue1);
            						}
            					}
            				}
HXDLIN( 507)				if (result1->contains(::Type_obj::enumConstructor(type).toLowerCase())) {
HXLINE( 507)					_hx_tmp1 = ::little::interpreter::Interpreter_obj::evaluate(type,null());
            				}
            				else {
HXLINE( 507)					_hx_tmp1 = type;
            				}
HXDLIN( 507)				::little::interpreter::Interpreter_obj::declareVariable(_hx_tmp,_hx_tmp1,::little::interpreter::Interpreter_obj::evaluate(doc,null()));
HXLINE( 508)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 510)				 ::little::interpreter::InterpTokens name1 = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 510)				 ::little::interpreter::InterpTokens params = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 510)				 ::little::interpreter::InterpTokens type1 = exp->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 510)				 ::little::interpreter::InterpTokens doc1 = exp->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 511)				 ::little::interpreter::InterpTokens _hx_tmp2;
HXDLIN( 511)				::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 511)				::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 511)				{
HXLINE( 511)					int _g4 = 0;
HXDLIN( 511)					int _g5 = _this2->length;
HXDLIN( 511)					while((_g4 < _g5)){
HXLINE( 511)						_g4 = (_g4 + 1);
HXDLIN( 511)						int i2 = (_g4 - 1);
HXDLIN( 511)						{
HXLINE( 511)							::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 511)							result2->__unsafe_set(i2,inValue2);
            						}
            					}
            				}
HXDLIN( 511)				if (result2->contains(::Type_obj::enumConstructor(name1).toLowerCase())) {
HXLINE( 511)					_hx_tmp2 = ::little::interpreter::Interpreter_obj::evaluate(name1,null());
            				}
            				else {
HXLINE( 511)					_hx_tmp2 = name1;
            				}
HXDLIN( 511)				::little::interpreter::Interpreter_obj::declareFunction(_hx_tmp2,params,::little::interpreter::Interpreter_obj::evaluate(doc1,null()));
HXLINE( 512)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)5: {
HXLINE( 464)				 ::haxe::ds::ObjectMap callers = exp->_hx_getObject(0).StaticCast<  ::haxe::ds::ObjectMap >();
HXDLIN( 464)				return ::little::interpreter::InterpTokens_obj::Characters(HX_("<condition>",7f,a1,59,e5));
            			}
            			break;
            			case (int)6: {
HXLINE( 505)				 ::little::interpreter::InterpTokens name2 = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 505)				 ::little::interpreter::InterpTokens exp1 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 505)				 ::little::interpreter::InterpTokens body = exp->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 505)				return ::little::interpreter::Interpreter_obj::condition(name2,exp1,body);
            			}
            			break;
            			case (int)7: {
HXLINE( 463)				 ::little::tools::BaseOrderedMap _g6 = exp->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 463)				 ::little::interpreter::InterpTokens _g7 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)8: {
HXLINE( 492)				 ::little::interpreter::InterpTokens name3 = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 492)				 ::little::interpreter::InterpTokens params1 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 493)				int currentLine = ::little::Little_obj::runtime->line;
HXLINE( 494)				return ::little::interpreter::Interpreter_obj::call(name3,params1);
            			}
            			break;
            			case (int)9: {
HXLINE( 531)				 ::little::interpreter::InterpTokens value = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 531)				 ::little::interpreter::InterpTokens t = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 531)				return ::little::interpreter::Interpreter_obj::evaluate(::little::interpreter::Interpreter_obj::typeCast(value,t),null());
            			}
            			break;
            			case (int)10: {
HXLINE( 504)				::Array< ::Dynamic> assignees = exp->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 504)				 ::little::interpreter::InterpTokens value1 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 504)				return ::little::interpreter::Interpreter_obj::write(assignees,value1);
            			}
            			break;
            			case (int)11: {
HXLINE( 503)				 ::little::interpreter::InterpTokens value2 = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 503)				 ::little::interpreter::InterpTokens t1 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 503)				return ::little::interpreter::Interpreter_obj::typeCast(value2,t1);
            			}
            			break;
            			case (int)12: {
HXLINE( 481)				::Array< ::Dynamic> parts = exp->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 481)				 ::little::interpreter::InterpTokens t2 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 482)				::String _hx_tmp3 = ::little::tools::Extensions_obj::asJoinedStringPath(t2);
HXDLIN( 482)				if ((_hx_tmp3 == ::little::Little_obj::keywords->TYPE_UNKNOWN)) {
HXLINE( 482)					return ::little::interpreter::Interpreter_obj::calculate(parts);
            				}
HXLINE( 483)				return ::little::interpreter::Interpreter_obj::typeCast(::little::interpreter::Interpreter_obj::calculate(parts),t2);
            			}
            			break;
            			case (int)13: {
HXLINE( 485)				::Array< ::Dynamic> body1 = exp->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 485)				 ::little::interpreter::InterpTokens t3 = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 486)				int currentLine1 = ::little::Little_obj::runtime->line;
HXLINE( 487)				 ::little::interpreter::InterpTokens returnVal = ::little::interpreter::Interpreter_obj::run(body1,null());
HXLINE( 488)				::little::interpreter::Interpreter_obj::setLine(currentLine1);
HXLINE( 489)				::String _hx_tmp4 = ::little::tools::Extensions_obj::asJoinedStringPath(t3);
HXDLIN( 489)				if ((_hx_tmp4 == ::little::Little_obj::keywords->TYPE_UNKNOWN)) {
HXLINE( 489)					return ::little::interpreter::Interpreter_obj::evaluate(returnVal,dontThrow);
            				}
HXLINE( 490)				return ::little::interpreter::Interpreter_obj::evaluate(::little::interpreter::Interpreter_obj::typeCast(returnVal,t3),dontThrow);
            			}
            			break;
            			case (int)14: {
HXLINE( 497)				::Array< ::Dynamic> parts1 = exp->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 498)				::Array< ::Dynamic> _g8 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 498)				{
HXLINE( 498)					int _g9 = 0;
HXDLIN( 498)					while((_g9 < parts1->length)){
HXLINE( 498)						 ::little::interpreter::InterpTokens p = parts1->__get(_g9).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 498)						_g9 = (_g9 + 1);
HXDLIN( 498)						_g8->push(::little::interpreter::Interpreter_obj::evaluate(p,dontThrow));
            					}
            				}
HXDLIN( 498)				return ::little::interpreter::InterpTokens_obj::PartArray(_g8);
            			}
            			break;
            			case (int)15: {
HXLINE( 514)				 ::little::interpreter::InterpTokens name4 = exp->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 514)				 ::little::interpreter::InterpTokens property = exp->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 515)				::Array< ::Dynamic> path = ::little::tools::Extensions_obj::toIdentifierPath(exp);
HXLINE( 519)				::Array< ::Dynamic> _g10 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 519)				{
HXLINE( 519)					int _g11 = 0;
HXDLIN( 519)					::Array< ::Dynamic> _g12 = path;
HXDLIN( 519)					while((_g11 < _g12->length)){
HXLINE( 519)						 ::little::interpreter::InterpTokens v = _g12->__get(_g11).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 519)						_g11 = (_g11 + 1);
HXDLIN( 519)						::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 519)						::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 519)						{
HXLINE( 519)							int _g13 = 0;
HXDLIN( 519)							int _g14 = _this3->length;
HXDLIN( 519)							while((_g13 < _g14)){
HXLINE( 519)								_g13 = (_g13 + 1);
HXDLIN( 519)								int i3 = (_g13 - 1);
HXDLIN( 519)								{
HXLINE( 519)									::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 519)									result3->__unsafe_set(i3,inValue3);
            								}
            							}
            						}
HXDLIN( 519)						if (!(result3->contains(::Type_obj::enumConstructor(v).toLowerCase()))) {
HXLINE( 519)							_g10->push(v);
            						}
            					}
            				}
HXDLIN( 519)				if ((_g10->length == 0)) {
HXLINE( 520)					return ::little::interpreter::Interpreter_obj::read(exp);
            				}
            				else {
HXLINE( 521)					bool _hx_tmp5;
HXDLIN( 521)					::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 521)					::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 521)					{
HXLINE( 521)						int _g15 = 0;
HXDLIN( 521)						int _g16 = _this4->length;
HXDLIN( 521)						while((_g15 < _g16)){
HXLINE( 521)							_g15 = (_g15 + 1);
HXDLIN( 521)							int i4 = (_g15 - 1);
HXDLIN( 521)							{
HXLINE( 521)								::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 521)								result4->__unsafe_set(i4,inValue4);
            							}
            						}
            					}
HXDLIN( 521)					if (!(result4->contains(::Type_obj::enumConstructor(path->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase()))) {
HXLINE( 521)						::Array< ::Dynamic> _g17 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 521)						{
HXLINE( 521)							int _g18 = 0;
HXDLIN( 521)							::Array< ::Dynamic> _g19 = path->slice(1,null());
HXDLIN( 521)							while((_g18 < _g19->length)){
HXLINE( 521)								 ::little::interpreter::InterpTokens v1 = _g19->__get(_g18).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 521)								_g18 = (_g18 + 1);
HXDLIN( 521)								::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 521)								::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 521)								{
HXLINE( 521)									int _g20 = 0;
HXDLIN( 521)									int _g21 = _this5->length;
HXDLIN( 521)									while((_g20 < _g21)){
HXLINE( 521)										_g20 = (_g20 + 1);
HXDLIN( 521)										int i5 = (_g20 - 1);
HXDLIN( 521)										{
HXLINE( 521)											::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 521)											result5->__unsafe_set(i5,inValue5);
            										}
            									}
            								}
HXDLIN( 521)								if (!(result5->contains(::Type_obj::enumConstructor(v1).toLowerCase()))) {
HXLINE( 521)									_g17->push(v1);
            								}
            							}
            						}
HXDLIN( 521)						_hx_tmp5 = (_g17->length == 0);
            					}
            					else {
HXLINE( 521)						_hx_tmp5 = false;
            					}
HXDLIN( 521)					if (_hx_tmp5) {
HXLINE( 522)						 ::little::interpreter::InterpTokens value3 = ::little::interpreter::Interpreter_obj::evaluate(path->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null());
HXLINE( 523)						 ::little::interpreter::memory::Memory _hx_tmp6 = ::little::Little_obj::memory;
HXDLIN( 523)						 ::Dynamic _hx_tmp7 =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("objectAddress",b5,00,cc,8b),::little::Little_obj::memory->store(value3))
            							->setFixed(1,HX_("objectValue",32,9c,e7,a0),value3));
HXLINE( 526)						::Array< ::Dynamic> _this6 = path->slice(1,null());
HXDLIN( 526)						::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this6->length);
HXDLIN( 526)						{
HXLINE( 526)							int _g22 = 0;
HXDLIN( 526)							int _g23 = _this6->length;
HXDLIN( 526)							while((_g22 < _g23)){
HXLINE( 526)								_g22 = (_g22 + 1);
HXDLIN( 526)								int i6 = (_g22 - 1);
HXDLIN( 526)								{
HXLINE( 526)									 ::little::interpreter::InterpTokens ident = _hx_array_unsafe_get(_this6,i6);
HXDLIN( 526)									::String inValue6;
HXDLIN( 526)									::Array< ::Dynamic> _this7 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 526)									::Array< ::String > result7 = ::Array_obj< ::String >::__new(_this7->length);
HXDLIN( 526)									{
HXLINE( 526)										int _g24 = 0;
HXDLIN( 526)										int _g25 = _this7->length;
HXDLIN( 526)										while((_g24 < _g25)){
HXLINE( 526)											_g24 = (_g24 + 1);
HXDLIN( 526)											int i7 = (_g24 - 1);
HXDLIN( 526)											{
HXLINE( 526)												::String inValue7 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this7,i7)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 526)												result7->__unsafe_set(i7,inValue7);
            											}
            										}
            									}
HXDLIN( 526)									if (result7->contains(::Type_obj::enumConstructor(ident).toLowerCase())) {
HXLINE( 526)										inValue6 = ( (::String)(::Type_obj::enumParameters(ident)->__get(0)) );
            									}
            									else {
HXLINE( 526)										inValue6 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,ident),null()))->__get(0)) );
            									}
HXDLIN( 526)									result6->__unsafe_set(i6,inValue6);
            								}
            							}
            						}
HXLINE( 523)						return _hx_tmp6->readFrom(_hx_tmp7,result6)->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic);
            					}
            					else {
HXLINE( 528)						::String _hx_tmp8 = ((HX_("Cannot access ",ff,bb,d7,b7) + path->join(::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN)) + HX_(", path cannot contain a raw value in the middle (for property: ",d1,1e,8e,a7));
HXDLIN( 528)						::Array< ::Dynamic> _g26 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 528)						{
HXLINE( 528)							int _g27 = 0;
HXDLIN( 528)							::Array< ::Dynamic> _g28 = path->slice(1,null());
HXDLIN( 528)							while((_g27 < _g28->length)){
HXLINE( 528)								 ::little::interpreter::InterpTokens v2 = _g28->__get(_g27).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 528)								_g27 = (_g27 + 1);
HXDLIN( 528)								::Array< ::Dynamic> _this8 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 528)								::Array< ::String > result8 = ::Array_obj< ::String >::__new(_this8->length);
HXDLIN( 528)								{
HXLINE( 528)									int _g29 = 0;
HXDLIN( 528)									int _g30 = _this8->length;
HXDLIN( 528)									while((_g29 < _g30)){
HXLINE( 528)										_g29 = (_g29 + 1);
HXDLIN( 528)										int i8 = (_g29 - 1);
HXDLIN( 528)										{
HXLINE( 528)											::String inValue8 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this8,i8)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 528)											result8->__unsafe_set(i8,inValue8);
            										}
            									}
            								}
HXDLIN( 528)								if (!(result8->contains(::Type_obj::enumConstructor(v2).toLowerCase()))) {
HXLINE( 528)									_g26->push(v2);
            								}
            							}
            						}
HXDLIN( 528)						return ::little::interpreter::Interpreter_obj::error((_hx_tmp8 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),_g26->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())),null());
            					}
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 463)				int _g31 = exp->_hx_getInt(0);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)17: {
HXLINE( 463)				Float _g32 = exp->_hx_getFloat(0);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)18: {
HXLINE( 463)				::String _g33 = exp->_hx_getString(0);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)20: {
HXLINE( 463)				int _g34 = exp->_hx_getInt(0);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)21: {
HXLINE( 463)				::String _g35 = exp->_hx_getString(0);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)22: case (int)23: case (int)24: {
HXLINE( 463)				return exp;
            			}
            			break;
            			case (int)25: {
HXLINE( 500)				::String word = exp->_hx_getString(0);
HXLINE( 501)				return ::little::interpreter::Interpreter_obj::read(exp);
            			}
            			break;
            			case (int)26: {
HXLINE( 463)				 ::haxe::ds::StringMap _g36 = exp->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 463)				::String _g37 = exp->_hx_getString(1);
HXDLIN( 463)				return exp;
            			}
            			break;
            			case (int)27: {
HXLINE( 465)				::String msg = exp->_hx_getString(0);
HXLINE( 466)				if (!(( (bool)(dontThrow) ))) {
HXLINE( 466)					::little::Little_obj::runtime->throwError(exp,HX_("Interpreter, Value Evaluator",32,36,56,9c));
            				}
HXLINE( 467)				return exp;
            			}
            			break;
            			case (int)28: {
HXLINE( 532)				 ::Dynamic func = exp->_hx_getObject(0);
HXDLIN( 532)				return func();
            			}
            			break;
            			default:{
HXLINE( 533)				return ::little::interpreter::Interpreter_obj::evaluate(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Unable to evaluate token `",ea,8c,2b,77) + ::Std_obj::string(exp)) + HX_("`",60,00,00,00))),dontThrow);
            			}
            		}
HXLINE( 462)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Interpreter_obj,evaluate,return )

 ::little::interpreter::InterpTokens Interpreter_obj::calculate(::Array< ::Dynamic> p){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_556_calculate)
HXLINE( 557)		while(true){
HXLINE( 557)			bool _hx_tmp;
HXDLIN( 557)			bool _hx_tmp1;
HXDLIN( 557)			if ((p->length == 1)) {
HXLINE( 557)				_hx_tmp1 = ::Std_obj::isOfType(::Type_obj::enumParameters(p->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0),::hx::ArrayBase::__mClass);
            			}
            			else {
HXLINE( 557)				_hx_tmp1 = false;
            			}
HXDLIN( 557)			if (_hx_tmp1) {
HXLINE( 557)				::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 557)				::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 557)				{
HXLINE( 557)					int _g = 0;
HXDLIN( 557)					int _g1 = _this->length;
HXDLIN( 557)					while((_g < _g1)){
HXLINE( 557)						_g = (_g + 1);
HXDLIN( 557)						int i = (_g - 1);
HXDLIN( 557)						{
HXLINE( 557)							::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 557)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 557)				_hx_tmp = !(result->contains(::Type_obj::enumConstructor(p->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase()));
            			}
            			else {
HXLINE( 557)				_hx_tmp = false;
            			}
HXDLIN( 557)			if (!(_hx_tmp)) {
HXLINE( 557)				goto _hx_goto_77;
            			}
HXDLIN( 557)			p = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(p->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) );
            		}
            		_hx_goto_77:;
HXLINE( 559)		::Array< ::Dynamic> tokens = ::little::interpreter::Interpreter_obj::group(p);
HXLINE( 560)		 ::little::interpreter::InterpTokens castType = null();
HXLINE( 562)		if ((tokens->length == 1)) {
HXLINE( 563)			::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::PART_ARRAY_dyn())->copy();
HXDLIN( 563)			::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 563)			{
HXLINE( 563)				int _g2 = 0;
HXDLIN( 563)				int _g3 = _this1->length;
HXDLIN( 563)				while((_g2 < _g3)){
HXLINE( 563)					_g2 = (_g2 + 1);
HXDLIN( 563)					int i1 = (_g2 - 1);
HXDLIN( 563)					{
HXLINE( 563)						::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 563)						result1->__unsafe_set(i1,inValue1);
            					}
            				}
            			}
HXDLIN( 563)			if (result1->contains(::Type_obj::enumConstructor(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 563)				tokens = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) );
            			}
            			else {
HXLINE( 564)				::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::EXPRESSION_dyn())->copy();
HXDLIN( 564)				::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 564)				{
HXLINE( 564)					int _g4 = 0;
HXDLIN( 564)					int _g5 = _this2->length;
HXDLIN( 564)					while((_g4 < _g5)){
HXLINE( 564)						_g4 = (_g4 + 1);
HXDLIN( 564)						int i2 = (_g4 - 1);
HXDLIN( 564)						{
HXLINE( 564)							::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 564)							result2->__unsafe_set(i2,inValue2);
            						}
            					}
            				}
HXDLIN( 564)				if (result2->contains(::Type_obj::enumConstructor(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 565)					tokens = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) );
HXLINE( 566)					castType = ::Type_obj::enumParameters(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1);
            				}
            				else {
HXLINE( 567)					::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 567)					::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 567)					{
HXLINE( 567)						int _g6 = 0;
HXDLIN( 567)						int _g7 = _this3->length;
HXDLIN( 567)						while((_g6 < _g7)){
HXLINE( 567)							_g6 = (_g6 + 1);
HXDLIN( 567)							int i3 = (_g6 - 1);
HXDLIN( 567)							{
HXLINE( 567)								::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 567)								result3->__unsafe_set(i3,inValue3);
            							}
            						}
            					}
HXDLIN( 567)					if (result3->contains(::Type_obj::enumConstructor(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 568)						tokens = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::Interpreter_obj::run(( (::Array< ::Dynamic>)(::Type_obj::enumParameters(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)) ),null()));
HXLINE( 569)						castType = ::Type_obj::enumParameters(tokens->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())->__get(1);
            					}
            				}
            			}
            		}
HXLINE( 573)		 ::little::interpreter::InterpTokens calculated = null();
HXLINE( 574)		::String sign = HX_("",00,00,00,00);
HXLINE( 576)		::Array< ::Dynamic> _g8 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 576)		{
HXLINE( 576)			int _g9 = 0;
HXDLIN( 576)			::Array< ::Dynamic> _g10 = tokens;
HXDLIN( 576)			while((_g9 < _g10->length)){
HXLINE( 576)				 ::little::interpreter::InterpTokens v = _g10->__get(_g9).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 576)				_g9 = (_g9 + 1);
HXDLIN( 576)				if (::hx::IsNotNull( v )) {
HXLINE( 576)					_g8->push(v);
            				}
            			}
            		}
HXDLIN( 576)		tokens = _g8;
HXLINE( 577)		{
HXLINE( 577)			int _g11 = 0;
HXDLIN( 577)			while((_g11 < tokens->length)){
HXLINE( 577)				 ::little::interpreter::InterpTokens token = tokens->__get(_g11).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 577)				_g11 = (_g11 + 1);
HXLINE( 578)				switch((int)(token->_hx_getIndex())){
            					case (int)1: {
HXLINE( 601)						::String module = token->_hx_getString(0);
HXDLIN( 601)						::little::interpreter::Interpreter_obj::setModule(module);
            					}
            					break;
            					case (int)12: {
HXLINE( 592)						::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 592)						 ::little::interpreter::InterpTokens t = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 592)						{
HXLINE( 593)							 ::little::interpreter::InterpTokens val;
HXDLIN( 593)							if (::hx::IsNotNull( t )) {
HXLINE( 593)								val = ::little::interpreter::Interpreter_obj::typeCast(::little::interpreter::Interpreter_obj::calculate(parts),t);
            							}
            							else {
HXLINE( 593)								val = ::little::interpreter::Interpreter_obj::calculate(parts);
            							}
HXLINE( 594)							bool _hx_tmp2;
HXDLIN( 594)							if ((sign != HX_("",00,00,00,00))) {
HXLINE( 594)								_hx_tmp2 = ::hx::IsNull( calculated );
            							}
            							else {
HXLINE( 594)								_hx_tmp2 = false;
            							}
HXDLIN( 594)							if (_hx_tmp2) {
HXLINE( 594)								 ::little::interpreter::memory::Operators _this4 = ::little::Little_obj::memory->operators;
HXDLIN( 594)								if (_this4->rhsOnly->exists(sign)) {
HXLINE( 594)									calculated = _this4->rhsOnly->get(sign)(val);
            								}
            								else {
HXLINE( 594)									if (_this4->lhsOnly->exists(sign)) {
HXLINE( 594)										::String calculated1 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear before the sign (",29,81,2a,a6)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),val)) + sign) + HX_(" instead of ",6b,58,98,3a)) + sign);
HXDLIN( 594)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated1 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),val)) + HX_(")",29,00,00,00)));
            									}
            									else {
HXLINE( 594)										if (_this4->standard->exists(sign)) {
HXLINE( 594)											calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear between two values (",82,3d,63,2b)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),val)) + HX_(" ",20,00,00,00)) + sign) + HX_(" <some value>)",cc,84,e4,c7)));
            										}
            										else {
HXLINE( 594)											calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            										}
            									}
            								}
            							}
            							else {
HXLINE( 595)								if (::hx::IsNull( calculated )) {
HXLINE( 595)									calculated = val;
            								}
            								else {
HXLINE( 596)									if ((sign == HX_("",00,00,00,00))) {
HXLINE( 596)										::String _hx_tmp3 = ((HX_("Two values cannot come one after the other (",42,c5,33,7a) + ::Std_obj::string(calculated)) + HX_(", ",74,26,00,00));
HXDLIN( 596)										::little::interpreter::Interpreter_obj::error(((_hx_tmp3 + ::Std_obj::string(token)) + HX_("). At least one of them should be an operator, or, put an operator in between.",d3,f6,27,3d)),null());
            									}
            									else {
HXLINE( 598)										 ::little::interpreter::memory::Operators _this5 = ::little::Little_obj::memory->operators;
HXDLIN( 598)										if (_this5->standard->exists(sign)) {
HXLINE( 598)											calculated = _this5->standard->get(sign)(calculated,val);
            										}
            										else {
HXLINE( 598)											if (_this5->lhsOnly->exists(sign)) {
HXLINE( 598)												::String calculated2 = (((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the right of one of them (",4f,06,ab,f0)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),val)) + sign) + HX_(" or ",7d,71,7b,15));
HXDLIN( 598)												calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage((((calculated2 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + sign) + HX_(")",29,00,00,00)));
            											}
            											else {
HXLINE( 598)												if (_this5->rhsOnly->exists(sign)) {
HXLINE( 598)													::String calculated3 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the left of one of them (",62,67,e6,71)) + sign) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),val)) + HX_(" or ",7d,71,7b,15)) + sign);
HXDLIN( 598)													calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated3 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + HX_(")",29,00,00,00)));
            												}
            												else {
HXLINE( 598)													calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            					break;
            					case (int)14: {
HXLINE( 579)						::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 580)						bool _hx_tmp4;
HXDLIN( 580)						if ((sign != HX_("",00,00,00,00))) {
HXLINE( 580)							_hx_tmp4 = ::hx::IsNull( calculated );
            						}
            						else {
HXLINE( 580)							_hx_tmp4 = false;
            						}
HXDLIN( 580)						if (_hx_tmp4) {
HXLINE( 580)							 ::little::interpreter::memory::Operators _this6 = ::little::Little_obj::memory->operators;
HXDLIN( 580)							 ::little::interpreter::InterpTokens rhs = ::little::interpreter::Interpreter_obj::calculate(parts1);
HXDLIN( 580)							if (_this6->rhsOnly->exists(sign)) {
HXLINE( 580)								calculated = _this6->rhsOnly->get(sign)(rhs);
            							}
            							else {
HXLINE( 580)								if (_this6->lhsOnly->exists(sign)) {
HXLINE( 580)									::String calculated4 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear before the sign (",29,81,2a,a6)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),rhs)) + sign) + HX_(" instead of ",6b,58,98,3a)) + sign);
HXDLIN( 580)									calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated4 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),rhs)) + HX_(")",29,00,00,00)));
            								}
            								else {
HXLINE( 580)									if (_this6->standard->exists(sign)) {
HXLINE( 580)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear between two values (",82,3d,63,2b)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),rhs)) + HX_(" ",20,00,00,00)) + sign) + HX_(" <some value>)",cc,84,e4,c7)));
            									}
            									else {
HXLINE( 580)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            									}
            								}
            							}
            						}
            						else {
HXLINE( 581)							if (::hx::IsNull( calculated )) {
HXLINE( 581)								calculated = ::little::interpreter::Interpreter_obj::calculate(parts1);
            							}
            							else {
HXLINE( 582)								if ((sign == HX_("",00,00,00,00))) {
HXLINE( 582)									::String _hx_tmp5 = ((HX_("Two values cannot come one after the other (",42,c5,33,7a) + ::Std_obj::string(calculated)) + HX_(", ",74,26,00,00));
HXDLIN( 582)									::little::interpreter::Interpreter_obj::error(((_hx_tmp5 + ::Std_obj::string(token)) + HX_("). At least one of them should be an operator, or, put an operator in between.",d3,f6,27,3d)),null());
            								}
            								else {
HXLINE( 584)									 ::little::interpreter::memory::Operators _this7 = ::little::Little_obj::memory->operators;
HXDLIN( 584)									 ::little::interpreter::InterpTokens rhs1 = ::little::interpreter::Interpreter_obj::calculate(parts1);
HXDLIN( 584)									if (_this7->standard->exists(sign)) {
HXLINE( 584)										calculated = _this7->standard->get(sign)(calculated,rhs1);
            									}
            									else {
HXLINE( 584)										if (_this7->lhsOnly->exists(sign)) {
HXLINE( 584)											::String calculated5 = (((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the right of one of them (",4f,06,ab,f0)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),rhs1)) + sign) + HX_(" or ",7d,71,7b,15));
HXDLIN( 584)											calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage((((calculated5 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + sign) + HX_(")",29,00,00,00)));
            										}
            										else {
HXLINE( 584)											if (_this7->rhsOnly->exists(sign)) {
HXLINE( 584)												::String calculated6 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the left of one of them (",62,67,e6,71)) + sign) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),rhs1)) + HX_(" or ",7d,71,7b,15)) + sign);
HXDLIN( 584)												calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated6 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + HX_(")",29,00,00,00)));
            											}
            											else {
HXLINE( 584)												calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            					break;
            					case (int)21: {
HXLINE( 587)						::String s = token->_hx_getString(0);
HXDLIN( 587)						{
HXLINE( 588)							sign = s;
HXLINE( 589)							if ((tokens->length == 1)) {
HXLINE( 589)								return token;
            							}
HXLINE( 590)							if (__hxcpp_enum_eq(tokens->__get((tokens->length - 1)).StaticCast<  ::little::interpreter::InterpTokens >(),token)) {
HXLINE( 590)								 ::little::interpreter::memory::Operators _this8 = ::little::Little_obj::memory->operators;
HXDLIN( 590)								if (::haxe::IMap_obj::exists(_this8->lhsOnly,sign)) {
HXLINE( 590)									calculated = ::haxe::IMap_obj::get(_this8->lhsOnly,sign)(calculated);
            								}
            								else {
HXLINE( 590)									if (::haxe::IMap_obj::exists(_this8->rhsOnly,sign)) {
HXLINE( 590)										::String calculated7 = (((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear after the sign (",84,65,00,88)) + sign) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + HX_(" instead of ",6b,58,98,3a));
HXDLIN( 590)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage((((calculated7 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + sign) + HX_(")",29,00,00,00)));
            									}
            									else {
HXLINE( 590)										if (::haxe::IMap_obj::exists(_this8->standard,sign)) {
HXLINE( 590)											calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear between two values (",82,3d,63,2b)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + HX_(" ",20,00,00,00)) + sign) + HX_(" <some value>)",cc,84,e4,c7)));
            										}
            										else {
HXLINE( 590)											calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            										}
            									}
            								}
            							}
            						}
            					}
            					break;
            					default:{
HXLINE( 603)						bool _hx_tmp6;
HXDLIN( 603)						if ((sign != HX_("",00,00,00,00))) {
HXLINE( 603)							_hx_tmp6 = ::hx::IsNull( calculated );
            						}
            						else {
HXLINE( 603)							_hx_tmp6 = false;
            						}
HXDLIN( 603)						if (_hx_tmp6) {
HXLINE( 603)							 ::little::interpreter::memory::Operators _this9 = ::little::Little_obj::memory->operators;
HXDLIN( 603)							if (_this9->rhsOnly->exists(sign)) {
HXLINE( 603)								calculated = _this9->rhsOnly->get(sign)(token);
            							}
            							else {
HXLINE( 603)								if (_this9->lhsOnly->exists(sign)) {
HXLINE( 603)									::String calculated8 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear before the sign (",29,81,2a,a6)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),token)) + sign) + HX_(" instead of ",6b,58,98,3a)) + sign);
HXDLIN( 603)									calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated8 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),token)) + HX_(")",29,00,00,00)));
            								}
            								else {
HXLINE( 603)									if (_this9->standard->exists(sign)) {
HXLINE( 603)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should appear between two values (",82,3d,63,2b)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),token)) + HX_(" ",20,00,00,00)) + sign) + HX_(" <some value>)",cc,84,e4,c7)));
            									}
            									else {
HXLINE( 603)										calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            									}
            								}
            							}
            						}
            						else {
HXLINE( 604)							bool _hx_tmp7;
HXDLIN( 604)							if ((sign == HX_("",00,00,00,00))) {
HXLINE( 604)								_hx_tmp7 = ::hx::IsNotNull( calculated );
            							}
            							else {
HXLINE( 604)								_hx_tmp7 = false;
            							}
HXDLIN( 604)							if (_hx_tmp7) {
HXLINE( 604)								::String _hx_tmp8 = ((HX_("Unexpected token: ",b0,5c,c5,d0) + ::Std_obj::string(token)) + HX_(" After calculating ",61,4f,84,68));
HXDLIN( 604)								HX_STACK_DO_THROW((_hx_tmp8 + ::Std_obj::string(calculated)));
            							}
            							else {
HXLINE( 605)								if (::hx::IsNull( calculated )) {
HXLINE( 605)									calculated = token;
            								}
            								else {
HXLINE( 606)									if ((sign == HX_("",00,00,00,00))) {
HXLINE( 606)										::String _hx_tmp9 = ((HX_("Two values cannot come one after the other (",42,c5,33,7a) + ::Std_obj::string(calculated)) + HX_(", ",74,26,00,00));
HXDLIN( 606)										::little::interpreter::Interpreter_obj::error(((_hx_tmp9 + ::Std_obj::string(token)) + HX_("). At least one of them should be an operator, or, put an operator in between.",d3,f6,27,3d)),null());
            									}
            									else {
HXLINE( 608)										 ::little::interpreter::memory::Operators _this10 = ::little::Little_obj::memory->operators;
HXDLIN( 608)										if (_this10->standard->exists(sign)) {
HXLINE( 608)											calculated = _this10->standard->get(sign)(calculated,token);
            										}
            										else {
HXLINE( 608)											if (_this10->lhsOnly->exists(sign)) {
HXLINE( 608)												::String calculated9 = (((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the right of one of them (",4f,06,ab,f0)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),token)) + sign) + HX_(" or ",7d,71,7b,15));
HXDLIN( 608)												calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage((((calculated9 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + sign) + HX_(")",29,00,00,00)));
            											}
            											else {
HXLINE( 608)												if (_this10->rhsOnly->exists(sign)) {
HXLINE( 608)													::String calculated10 = ((((((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" is used incorrectly - should not appear between two values, only to the left of one of them (",62,67,e6,71)) + sign) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),token)) + HX_(" or ",7d,71,7b,15)) + sign);
HXDLIN( 608)													calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((calculated10 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),calculated)) + HX_(")",29,00,00,00)));
            												}
            												else {
HXLINE( 608)													calculated = ::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Operator ",dc,f3,17,42) + sign) + HX_(" does not exist. did you make a typo?",01,50,3a,bc)));
            												}
            											}
            										}
HXLINE( 609)										::haxe::Log_obj::trace(calculated, ::Dynamic(::hx::Anon_obj::Create(5)
            											->setFixed(0,HX_("className",a3,92,3d,dc),HX_("little.interpreter.Interpreter",6e,d9,f3,2f))
            											->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,sign)->init(1,token))
            											->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("calculate",66,95,6a,05))
            											->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/little/interpreter/Interpreter.hx",e7,a3,e4,c4))
            											->setFixed(4,HX_("lineNumber",dd,81,22,76),609)));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 614)				::haxe::Log_obj::trace(calculated, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("little.interpreter.Interpreter",6e,d9,f3,2f))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,castType))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("calculate",66,95,6a,05))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/little/interpreter/Interpreter.hx",e7,a3,e4,c4))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),614)));
            			}
            		}
HXLINE( 617)		if (::hx::IsNotNull( castType )) {
HXLINE( 618)			return ::little::interpreter::Interpreter_obj::typeCast(calculated,castType);
            		}
HXLINE( 620)		return calculated;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,calculate,return )

::Array< ::Dynamic> Interpreter_obj::group(::Array< ::Dynamic> tokens){
            	HX_STACKFRAME(&_hx_pos_1e0c988bb7772661_624_group)
HXLINE( 625)		::Array< ::Dynamic> post = tokens;
HXLINE( 626)		::Array< ::Dynamic> pre = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 628)		{
HXLINE( 628)			 ::Dynamic operatorGroup = ::little::Little_obj::memory->operators->iterateByPriority();
HXDLIN( 628)			while(( (bool)(operatorGroup->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 628)				::Array< ::Dynamic> operatorGroup1 = ( (::Array< ::Dynamic>)(operatorGroup->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 629)				pre = post->copy();
HXLINE( 630)				post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 635)				int i = 0;
HXLINE( 636)				while((i < pre->length)){
HXLINE( 637)					 ::little::interpreter::InterpTokens token;
HXDLIN( 637)					::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->init(1,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 637)					::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 637)					{
HXLINE( 637)						int _g = 0;
HXDLIN( 637)						int _g1 = _this->length;
HXDLIN( 637)						while((_g < _g1)){
HXLINE( 637)							_g = (_g + 1);
HXDLIN( 637)							int i1 = (_g - 1);
HXDLIN( 637)							{
HXLINE( 637)								::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 637)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 637)					if (result->contains(::Type_obj::enumConstructor(pre->__get(i).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 637)						token = ::little::interpreter::Interpreter_obj::evaluate(pre->__get(i).StaticCast<  ::little::interpreter::InterpTokens >(),null());
            					}
            					else {
HXLINE( 637)						token = pre->__get(i).StaticCast<  ::little::interpreter::InterpTokens >();
            					}
HXLINE( 639)					switch((int)(token->_hx_getIndex())){
            						case (int)12: {
HXLINE( 709)							::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 709)							 ::little::interpreter::InterpTokens type = token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 709)							post->push(::little::interpreter::InterpTokens_obj::Expression(::little::interpreter::Interpreter_obj::group(parts),type));
            						}
            						break;
            						case (int)21: {
HXLINE( 640)							::String _g2 = token->_hx_getString(0);
HXDLIN( 640)							{
HXLINE( 640)								::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 640)								{
HXLINE( 640)									int _g4 = 0;
HXDLIN( 640)									::Array< ::Dynamic> _g5 = operatorGroup1;
HXDLIN( 640)									while((_g4 < _g5->length)){
HXLINE( 640)										 ::Dynamic v = _g5->__get(_g4);
HXDLIN( 640)										_g4 = (_g4 + 1);
HXDLIN( 640)										if (::hx::IsEq( v->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic),_g2 )) {
HXLINE( 640)											_g3->push(v);
            										}
            									}
            								}
HXDLIN( 640)								if (((_g3->length > 0) == true)) {
HXLINE( 646)									if ((i == (pre->length - 1))) {
HXLINE( 647)										post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(2)->init(0,post->pop().StaticCast<  ::little::interpreter::InterpTokens >())->init(1,token)));
HXLINE( 648)										goto _hx_goto_86;
            									}
HXLINE( 651)									 ::little::interpreter::InterpTokens lookbehind;
HXDLIN( 651)									if ((post->length > 0)) {
HXLINE( 651)										lookbehind = post->__get((post->length - 1)).StaticCast<  ::little::interpreter::InterpTokens >();
            									}
            									else {
HXLINE( 651)										lookbehind = ::little::interpreter::InterpTokens_obj::Sign(HX_("_",5f,00,00,00));
            									}
HXLINE( 652)									 ::little::interpreter::InterpTokens lookahead;
HXDLIN( 652)									::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->init(1,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 652)									::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 652)									{
HXLINE( 652)										int _g6 = 0;
HXDLIN( 652)										int _g7 = _this1->length;
HXDLIN( 652)										while((_g6 < _g7)){
HXLINE( 652)											_g6 = (_g6 + 1);
HXDLIN( 652)											int i2 = (_g6 - 1);
HXDLIN( 652)											{
HXLINE( 652)												::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 652)												result1->__unsafe_set(i2,inValue1);
            											}
            										}
            									}
HXDLIN( 652)									if (result1->contains(::Type_obj::enumConstructor(pre->__get((i + 1)).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 652)										lookahead = ::little::interpreter::Interpreter_obj::evaluate(pre->__get((i + 1)).StaticCast<  ::little::interpreter::InterpTokens >(),null());
            									}
            									else {
HXLINE( 652)										lookahead = pre->__get((i + 1)).StaticCast<  ::little::interpreter::InterpTokens >();
            									}
HXLINE( 654)									bool _hx_tmp;
HXDLIN( 654)									::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->copy();
HXDLIN( 654)									::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 654)									{
HXLINE( 654)										int _g8 = 0;
HXDLIN( 654)										int _g9 = _this2->length;
HXDLIN( 654)										while((_g8 < _g9)){
HXLINE( 654)											_g8 = (_g8 + 1);
HXDLIN( 654)											int i3 = (_g8 - 1);
HXDLIN( 654)											{
HXLINE( 654)												::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 654)												result2->__unsafe_set(i3,inValue2);
            											}
            										}
            									}
HXDLIN( 654)									if (result2->contains(::Type_obj::enumConstructor(lookahead).toLowerCase())) {
HXLINE( 654)										::Array< ::Dynamic> _g10 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 654)										{
HXLINE( 654)											int _g11 = 0;
HXDLIN( 654)											::Array< ::Dynamic> _g12 = operatorGroup1;
HXDLIN( 654)											while((_g11 < _g12->length)){
HXLINE( 654)												 ::Dynamic v1 = _g12->__get(_g11);
HXDLIN( 654)												_g11 = (_g11 + 1);
HXDLIN( 654)												::String v2 = ( (::String)(v1->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) );
HXDLIN( 654)												if (::hx::IsEq( v2,::Type_obj::enumParameters(lookahead)->__get(0) )) {
HXLINE( 654)													_g10->push(v1);
            												}
            											}
            										}
HXDLIN( 654)										_hx_tmp = (_g10->length > 0);
            									}
            									else {
HXLINE( 654)										_hx_tmp = false;
            									}
HXDLIN( 654)									if (_hx_tmp) {
HXLINE( 665)										::Array< ::Dynamic> _g13 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 665)										{
HXLINE( 665)											int _g14 = 0;
HXDLIN( 665)											::Array< ::Dynamic> _g15 = operatorGroup1;
HXDLIN( 665)											while((_g14 < _g15->length)){
HXLINE( 665)												 ::Dynamic v3 = _g15->__get(_g14);
HXDLIN( 665)												_g14 = (_g14 + 1);
HXDLIN( 665)												bool _hx_tmp1;
HXDLIN( 665)												::String v4 = ( (::String)(v3->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) );
HXDLIN( 665)												if (::hx::IsEq( v4,::Type_obj::enumParameters(token)->__get(0) )) {
HXLINE( 665)													_hx_tmp1 = ::hx::IsPointerEq( v3->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_ONLY_dyn() );
            												}
            												else {
HXLINE( 665)													_hx_tmp1 = false;
            												}
HXDLIN( 665)												if (_hx_tmp1) {
HXLINE( 665)													_g13->push(v3);
            												}
            											}
            										}
HXDLIN( 665)										if ((_g13->length > 0)) {
HXLINE( 666)											post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(2)->init(0,post->pop().StaticCast<  ::little::interpreter::InterpTokens >())->init(1,token)));
            										}
            										else {
HXLINE( 667)											::Array< ::Dynamic> _g16 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 667)											{
HXLINE( 667)												int _g17 = 0;
HXDLIN( 667)												::Array< ::Dynamic> _g18 = operatorGroup1;
HXDLIN( 667)												while((_g17 < _g18->length)){
HXLINE( 667)													 ::Dynamic v5 = _g18->__get(_g17);
HXDLIN( 667)													_g17 = (_g17 + 1);
HXDLIN( 667)													bool _hx_tmp2;
HXDLIN( 667)													::String v6 = ( (::String)(v5->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) );
HXDLIN( 667)													if (::hx::IsEq( v6,::Type_obj::enumParameters(token)->__get(0) )) {
HXLINE( 667)														_hx_tmp2 = ::hx::IsPointerEq( v5->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn() );
            													}
            													else {
HXLINE( 667)														_hx_tmp2 = false;
            													}
HXDLIN( 667)													if (_hx_tmp2) {
HXLINE( 667)														_g16->push(v5);
            													}
            												}
            											}
HXDLIN( 667)											if ((_g16->length > 0)) {
HXLINE( 668)												 ::little::interpreter::InterpTokens operand1 = post->pop().StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 669)												 ::little::interpreter::InterpTokens op = lookahead;
HXLINE( 671)												if (((i + 2) >= pre->length)) {
HXLINE( 671)													::little::interpreter::Interpreter_obj::error(HX_("Expression ended with an operator, when an operand was expected.",1c,b3,e6,48),null());
            												}
HXLINE( 672)												 ::little::interpreter::InterpTokens lookahead2;
HXDLIN( 672)												::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->init(1,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 672)												::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 672)												{
HXLINE( 672)													int _g19 = 0;
HXDLIN( 672)													int _g20 = _this3->length;
HXDLIN( 672)													while((_g19 < _g20)){
HXLINE( 672)														_g19 = (_g19 + 1);
HXDLIN( 672)														int i4 = (_g19 - 1);
HXDLIN( 672)														{
HXLINE( 672)															::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 672)															result3->__unsafe_set(i4,inValue3);
            														}
            													}
            												}
HXDLIN( 672)												if (result3->contains(::Type_obj::enumConstructor(pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 672)													lookahead2 = ::little::interpreter::Interpreter_obj::evaluate(pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >(),null());
            												}
            												else {
HXLINE( 672)													lookahead2 = pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >();
            												}
HXLINE( 674)												::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->copy();
HXDLIN( 674)												::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 674)												{
HXLINE( 674)													int _g21 = 0;
HXDLIN( 674)													int _g22 = _this4->length;
HXDLIN( 674)													while((_g21 < _g22)){
HXLINE( 674)														_g21 = (_g21 + 1);
HXDLIN( 674)														int i5 = (_g21 - 1);
HXDLIN( 674)														{
HXLINE( 674)															::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 674)															result4->__unsafe_set(i5,inValue4);
            														}
            													}
            												}
HXDLIN( 674)												if (!(result4->contains(::Type_obj::enumConstructor(lookahead2).toLowerCase()))) {
HXLINE( 675)													post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(3)->init(0,operand1)->init(1,token)->init(2,::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(2)->init(0,lookahead)->init(1,lookahead2)))));
HXLINE( 676)													i = (i + 2);
            												}
            												else {
HXLINE( 678)													::Array< ::Dynamic> g = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 679)													while(true){
HXLINE( 679)														bool _hx_tmp3;
HXDLIN( 679)														::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->copy();
HXDLIN( 679)														::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 679)														{
HXLINE( 679)															int _g23 = 0;
HXDLIN( 679)															int _g24 = _this5->length;
HXDLIN( 679)															while((_g23 < _g24)){
HXLINE( 679)																_g23 = (_g23 + 1);
HXDLIN( 679)																int i6 = (_g23 - 1);
HXDLIN( 679)																{
HXLINE( 679)																	::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i6)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 679)																	result5->__unsafe_set(i6,inValue5);
            																}
            															}
            														}
HXDLIN( 679)														if (result5->contains(::Type_obj::enumConstructor(lookahead2).toLowerCase())) {
HXLINE( 679)															::Array< ::Dynamic> _g25 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 679)															{
HXLINE( 679)																int _g26 = 0;
HXDLIN( 679)																::Array< ::Dynamic> _g27 = operatorGroup1;
HXDLIN( 679)																while((_g26 < _g27->length)){
HXLINE( 679)																	 ::Dynamic v7 = _g27->__get(_g26);
HXDLIN( 679)																	_g26 = (_g26 + 1);
HXDLIN( 679)																	bool _hx_tmp4;
HXDLIN( 679)																	::String v8 = ( (::String)(v7->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) );
HXDLIN( 679)																	if (::hx::IsEq( v8,::Type_obj::enumParameters(lookahead2)->__get(0) )) {
HXLINE( 679)																		_hx_tmp4 = ::hx::IsPointerEq( v7->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::RHS_ONLY_dyn() );
            																	}
            																	else {
HXLINE( 679)																		_hx_tmp4 = false;
            																	}
HXDLIN( 679)																	if (_hx_tmp4) {
HXLINE( 679)																		_g25->push(v7);
            																	}
            																}
            															}
HXDLIN( 679)															_hx_tmp3 = (_g25->length > 0);
            														}
            														else {
HXLINE( 679)															_hx_tmp3 = false;
            														}
HXDLIN( 679)														if (!(_hx_tmp3)) {
HXLINE( 679)															goto _hx_goto_96;
            														}
HXLINE( 680)														g->push(lookahead2);
HXLINE( 681)														i = (i + 1);
HXLINE( 682)														if (((i + 2) >= pre->length)) {
HXLINE( 682)															::little::interpreter::Interpreter_obj::error(HX_("Expression ended with an operator, when an operand was expected.",1c,b3,e6,48),null());
            														}
HXLINE( 683)														::Array< ::Dynamic> _this6 = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->init(1,::little::tools::InterpTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 683)														::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this6->length);
HXDLIN( 683)														{
HXLINE( 683)															int _g28 = 0;
HXDLIN( 683)															int _g29 = _this6->length;
HXDLIN( 683)															while((_g28 < _g29)){
HXLINE( 683)																_g28 = (_g28 + 1);
HXDLIN( 683)																int i7 = (_g28 - 1);
HXDLIN( 683)																{
HXLINE( 683)																	::String inValue6 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this6,i7)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 683)																	result6->__unsafe_set(i7,inValue6);
            																}
            															}
            														}
HXDLIN( 683)														if (result6->contains(::Type_obj::enumConstructor(pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 683)															lookahead2 = ::little::interpreter::Interpreter_obj::evaluate(pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >(),null());
            														}
            														else {
HXLINE( 683)															lookahead2 = pre->__get((i + 2)).StaticCast<  ::little::interpreter::InterpTokens >();
            														}
            													}
            													_hx_goto_96:;
HXLINE( 686)													g->push(lookahead2);
HXLINE( 688)													i = (i + 1);
HXLINE( 690)													 ::little::interpreter::InterpTokens operand2;
HXDLIN( 690)													if ((g->length == 1)) {
HXLINE( 690)														operand2 = g->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            													}
            													else {
HXLINE( 690)														operand2 = ::little::interpreter::InterpTokens_obj::PartArray(::little::interpreter::Interpreter_obj::group(g));
            													}
HXLINE( 691)													post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(3)->init(0,operand1)->init(1,op)->init(2,operand2)));
            												}
            											}
            											else {
HXLINE( 693)												::Array< ::Dynamic> _g30 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 693)												{
HXLINE( 693)													int _g31 = 0;
HXDLIN( 693)													::Array< ::Dynamic> _g32 = operatorGroup1;
HXDLIN( 693)													while((_g31 < _g32->length)){
HXLINE( 693)														 ::Dynamic v9 = _g32->__get(_g31);
HXDLIN( 693)														_g31 = (_g31 + 1);
HXDLIN( 693)														bool _hx_tmp5;
HXDLIN( 693)														::String v10 = ( (::String)(v9->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) );
HXDLIN( 693)														if (::hx::IsEq( v10,::Type_obj::enumParameters(token)->__get(0) )) {
HXLINE( 693)															_hx_tmp5 = ::hx::IsPointerEq( v9->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::RHS_ONLY_dyn() );
            														}
            														else {
HXLINE( 693)															_hx_tmp5 = false;
            														}
HXDLIN( 693)														if (_hx_tmp5) {
HXLINE( 693)															_g30->push(v9);
            														}
            													}
            												}
HXDLIN( 693)												if ((_g30->length > 0)) {
HXLINE( 694)													::little::interpreter::Interpreter_obj::error(HX_("An operator that expects a right side can't be preceded by an operator that expects a left side.",a2,08,9f,d7),null());
            												}
            											}
            										}
            									}
            									else {
HXLINE( 701)										::Array< ::Dynamic> _this7 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SIGN_dyn())->copy();
HXDLIN( 701)										::Array< ::String > result7 = ::Array_obj< ::String >::__new(_this7->length);
HXDLIN( 701)										{
HXLINE( 701)											int _g33 = 0;
HXDLIN( 701)											int _g34 = _this7->length;
HXDLIN( 701)											while((_g33 < _g34)){
HXLINE( 701)												_g33 = (_g33 + 1);
HXDLIN( 701)												int i8 = (_g33 - 1);
HXDLIN( 701)												{
HXLINE( 701)													::String inValue7 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this7,i8)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 701)													result7->__unsafe_set(i8,inValue7);
            												}
            											}
            										}
HXDLIN( 701)										if (result7->contains(::Type_obj::enumConstructor(lookahead).toLowerCase())) {
HXLINE( 702)											post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(2)->init(0,post->pop().StaticCast<  ::little::interpreter::InterpTokens >())->init(1,token)));
            										}
            										else {
HXLINE( 704)											post->push(::little::interpreter::InterpTokens_obj::PartArray(::Array_obj< ::Dynamic>::__new(3)->init(0,post->pop().StaticCast<  ::little::interpreter::InterpTokens >())->init(1,token)->init(2,lookahead)));
HXLINE( 705)											i = (i + 1);
            										}
            									}
            								}
            								else {
HXLINE( 710)									post->push(token);
            								}
            							}
            						}
            						break;
            						default:{
HXLINE( 710)							post->push(token);
            						}
            					}
HXLINE( 712)					i = (i + 1);
            				}
            				_hx_goto_86:;
            			}
            		}
HXLINE( 716)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interpreter_obj,group,return )


Interpreter_obj::Interpreter_obj()
{
}

bool Interpreter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"warn") ) { outValue = warn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"call") ) { outValue = call_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { outValue = error_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"write") ) { outValue = write_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"group") ) { outValue = group_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assert") ) { outValue = _hx_assert_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setLine") ) { outValue = setLine_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"typeCast") ) { outValue = typeCast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"evaluate") ) { outValue = evaluate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setModule") ) { outValue = setModule_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitLine") ) { outValue = splitLine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"condition") ) { outValue = condition_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"calculate") ) { outValue = calculate_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"declareVariable") ) { outValue = declareVariable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"declareFunction") ) { outValue = declareFunction_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Interpreter_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Interpreter_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Interpreter_obj::__mClass;

static ::String Interpreter_obj_sStaticFields[] = {
	HX_("convert",f3,fd,c9,1a),
	HX_("error",c8,cb,29,73),
	HX_("warn",46,62,f2,4e),
	HX_("assert",c6,46,03,4c),
	HX_("setLine",b6,58,37,0d),
	HX_("setModule",ee,a9,7a,20),
	HX_("splitLine",ee,a3,12,4c),
	HX_("declareVariable",86,54,4c,a8),
	HX_("declareFunction",62,ed,91,53),
	HX_("condition",9b,e9,33,fc),
	HX_("write",df,6c,59,d0),
	HX_("call",9e,18,ba,41),
	HX_("read",56,4b,a7,4b),
	HX_("typeCast",99,22,85,ae),
	HX_("run",4b,e7,56,00),
	HX_("evaluate",59,60,50,01),
	HX_("calculate",66,95,6a,05),
	HX_("group",3f,b3,f4,99),
	::String(null())
};

void Interpreter_obj::__register()
{
	Interpreter_obj _hx_dummy;
	Interpreter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.Interpreter",6e,d9,f3,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Interpreter_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Interpreter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Interpreter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interpreter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interpreter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
