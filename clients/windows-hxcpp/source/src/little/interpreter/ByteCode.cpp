// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_little_interpreter_ByteCode
#include <little/interpreter/ByteCode.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b09c0a70b6b2e881_18_compile,"little.interpreter.ByteCode","compile",0x4c20d026,"little.interpreter.ByteCode.compile","little/interpreter/ByteCode.hx",18,0xc270fafb)
HX_LOCAL_STACK_FRAME(_hx_pos_b09c0a70b6b2e881_29_decompile,"little.interpreter.ByteCode","decompile",0x131b2d85,"little.interpreter.ByteCode.decompile","little/interpreter/ByteCode.hx",29,0xc270fafb)
namespace little{
namespace interpreter{

void ByteCode_obj::__construct() { }

Dynamic ByteCode_obj::__CreateEmpty() { return new ByteCode_obj; }

void *ByteCode_obj::_hx_vtable = 0;

Dynamic ByteCode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ByteCode_obj > _hx_result = new ByteCode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ByteCode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ebb4a0d;
}

::String ByteCode_obj::compile(::Array< ::Dynamic> tokens){
            	HX_STACKFRAME(&_hx_pos_b09c0a70b6b2e881_18_compile)
HXDLIN(  18)		return ::haxe::Serializer_obj::run(tokens);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteCode_obj,compile,return )

::Array< ::Dynamic> ByteCode_obj::decompile(::String bytecode){
            	HX_STACKFRAME(&_hx_pos_b09c0a70b6b2e881_29_decompile)
HXDLIN(  29)		return ( (::Array< ::Dynamic>)(::haxe::Unserializer_obj::run(bytecode)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteCode_obj,decompile,return )


ByteCode_obj::ByteCode_obj()
{
}

bool ByteCode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { outValue = compile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompile") ) { outValue = decompile_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ByteCode_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ByteCode_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ByteCode_obj::__mClass;

static ::String ByteCode_obj_sStaticFields[] = {
	HX_("compile",73,25,6f,83),
	HX_("decompile",12,30,a3,7a),
	::String(null())
};

void ByteCode_obj::__register()
{
	ByteCode_obj _hx_dummy;
	ByteCode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.ByteCode",21,a0,e2,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ByteCode_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ByteCode_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ByteCode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ByteCode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ByteCode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
