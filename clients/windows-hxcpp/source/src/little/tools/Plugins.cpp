// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_exceptions_ArgumentException
#include <haxe/exceptions/ArgumentException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ConstantPool
#include <little/interpreter/memory/ConstantPool.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExtTree
#include <little/interpreter/memory/ExtTree.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExternalInterfacing
#include <little/interpreter/memory/ExternalInterfacing.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_OperatorType
#include <little/interpreter/memory/OperatorType.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Operators
#include <little/interpreter/memory/Operators.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_lexer_Lexer
#include <little/lexer/Lexer.h>
#endif
#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
#ifndef INCLUDED_little_parser_Parser
#include <little/parser/Parser.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_Extensions
#include <little/tools/Extensions.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_Plugins
#include <little/tools/Plugins.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif
#ifndef INCLUDED_little_tools__OrderedMap_OrderedMap_Impl_
#include <little/tools/_OrderedMap/OrderedMap_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_553c3c091ec60400_30_new,"little.tools.Plugins","new",0xf69ba2e7,"little.tools.Plugins.new","little/tools/Plugins.hx",30,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_59_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",59,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_68_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",68,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_74_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",74,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_88_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",88,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_135_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",135,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_131_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",131,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_156_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",156,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_201_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",201,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_197_registerType,"little.tools.Plugins","registerType",0xcf6b5756,"little.tools.Plugins.registerType","little/tools/Plugins.hx",197,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_231_registerVariable,"little.tools.Plugins","registerVariable",0xa8f3f4d8,"little.tools.Plugins.registerVariable","little/tools/Plugins.hx",231,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_225_registerVariable,"little.tools.Plugins","registerVariable",0xa8f3f4d8,"little.tools.Plugins.registerVariable","little/tools/Plugins.hx",225,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_291_registerFunction,"little.tools.Plugins","registerFunction",0x54398db4,"little.tools.Plugins.registerFunction","little/tools/Plugins.hx",291,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_297_registerFunction,"little.tools.Plugins","registerFunction",0x54398db4,"little.tools.Plugins.registerFunction","little/tools/Plugins.hx",297,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_265_registerFunction,"little.tools.Plugins","registerFunction",0x54398db4,"little.tools.Plugins.registerFunction","little/tools/Plugins.hx",265,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_324_registerCondition,"little.tools.Plugins","registerCondition",0xa6534f7f,"little.tools.Plugins.registerCondition","little/tools/Plugins.hx",324,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_327_registerCondition,"little.tools.Plugins","registerCondition",0xa6534f7f,"little.tools.Plugins.registerCondition","little/tools/Plugins.hx",327,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_320_registerCondition,"little.tools.Plugins","registerCondition",0xa6534f7f,"little.tools.Plugins.registerCondition","little/tools/Plugins.hx",320,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_358_registerInstanceVariable,"little.tools.Plugins","registerInstanceVariable",0x278de98d,"little.tools.Plugins.registerInstanceVariable","little/tools/Plugins.hx",358,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_351_registerInstanceVariable,"little.tools.Plugins","registerInstanceVariable",0x278de98d,"little.tools.Plugins.registerInstanceVariable","little/tools/Plugins.hx",351,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_422_registerInstanceFunction,"little.tools.Plugins","registerInstanceFunction",0xd2d38269,"little.tools.Plugins.registerInstanceFunction","little/tools/Plugins.hx",422,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_425_registerInstanceFunction,"little.tools.Plugins","registerInstanceFunction",0xd2d38269,"little.tools.Plugins.registerInstanceFunction","little/tools/Plugins.hx",425,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_393_registerInstanceFunction,"little.tools.Plugins","registerInstanceFunction",0xd2d38269,"little.tools.Plugins.registerInstanceFunction","little/tools/Plugins.hx",393,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_457_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",457,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_467_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",467,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_476_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",476,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_485_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",485,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_498_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",498,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_507_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",507,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_516_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",516,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_540_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",540,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_549_registerOperator,"little.tools.Plugins","registerOperator",0x8459fe40,"little.tools.Plugins.registerOperator","little/tools/Plugins.hx",549,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_443_combosHas,"little.tools.Plugins","combosHas",0x684fd9bc,"little.tools.Plugins.combosHas","little/tools/Plugins.hx",443,0xe3a2b3ab)
HX_LOCAL_STACK_FRAME(_hx_pos_553c3c091ec60400_585_containsCombo,"little.tools.Plugins","containsCombo",0xb5060ef6,"little.tools.Plugins.containsCombo","little/tools/Plugins.hx",585,0xe3a2b3ab)
namespace little{
namespace tools{

void Plugins_obj::__construct( ::little::interpreter::memory::Memory memory){
            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_30_new)
HXDLIN(  30)		this->memory = memory;
            	}

Dynamic Plugins_obj::__CreateEmpty() { return new Plugins_obj; }

void *Plugins_obj::_hx_vtable = 0;

Dynamic Plugins_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Plugins_obj > _hx_result = new Plugins_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Plugins_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c3214df;
}

void Plugins_obj::registerType(::String typeName, ::haxe::ds::StringMap fields){
            	HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_59_registerType)
HXDLIN(  59)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		 ::little::interpreter::memory::ExternalInterfacing instances = this->memory->externs;
HXDLIN(  60)		 ::little::interpreter::memory::ExtTree instances1 = this->memory->externs->instanceProperties;
HXDLIN(  60)		 ::little::interpreter::memory::ExtTree instances2 = instances->createPathFor(instances1,typeName.split(HX_(".",2e,00,00,00)));
HXLINE(  61)		 ::little::interpreter::memory::ExternalInterfacing statics = this->memory->externs;
HXDLIN(  61)		 ::little::interpreter::memory::ExtTree statics1 = this->memory->externs->globalProperties;
HXDLIN(  61)		 ::little::interpreter::memory::ExtTree statics2 = statics->createPathFor(statics1,typeName.split(HX_(".",2e,00,00,00)));
HXLINE(  63)		instances2->type = (statics2->type = ( (int)(this->memory->getTypeInformation(::little::Little_obj::keywords->TYPE_MODULE)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) ));
HXLINE(  65)		if (::little::tools::Plugins_obj::_hx___noTypeCreation) {
HXLINE(  65)			::little::tools::Plugins_obj::_hx___noTypeCreation = false;
            		}
            		else {
HXLINE(  66)			bool _hx_tmp;
HXDLIN(  66)			if (!(this->memory->externs->externToPointer->exists(typeName))) {
HXLINE(  66)				_hx_tmp = !(this->memory->constants->hasType(typeName));
            			}
            			else {
HXLINE(  66)				_hx_tmp = false;
            			}
HXDLIN(  66)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis,::String,typeName) HXARGC(2)
            				 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            					HX_STACKFRAME(&_hx_pos_553c3c091ec60400_68_registerType)
HXLINE(  69)					 ::little::interpreter::InterpTokens _hx_tmp = ::little::interpreter::InterpTokens_obj::ClassPointer(_gthis->memory->externs->externToPointer->get(typeName));
HXLINE(  68)					return  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->externs->externToPointer->get(typeName))
            						->setFixed(1,HX_("objectValue",32,9c,e7,a0),_hx_tmp));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(  67)				{
HXLINE(  67)					::Dynamic this1 = this->memory->externs->externToPointer;
HXDLIN(  67)					int v = this->memory->storage->storeByte(1);
HXDLIN(  67)					( ( ::haxe::ds::StringMap)(this1) )->set(typeName,v);
            				}
HXLINE(  68)				statics2->getter =  ::Dynamic(new _hx_Closure_0(_gthis,typeName));
            			}
            			else {
HXLINE(  72)				bool _hx_tmp1;
HXDLIN(  72)				if (this->memory->constants->hasType(typeName)) {
HXLINE(  72)					_hx_tmp1 = !(this->memory->externs->externToPointer->exists(typeName));
            				}
            				else {
HXLINE(  72)					_hx_tmp1 = false;
            				}
HXDLIN(  72)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::little::tools::Plugins,_gthis,::String,typeName) HXARGC(2)
            					 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            						HX_STACKFRAME(&_hx_pos_553c3c091ec60400_74_registerType)
HXLINE(  75)						 ::little::interpreter::InterpTokens _hx_tmp = ::little::interpreter::InterpTokens_obj::ClassPointer(_gthis->memory->externs->externToPointer->get(typeName));
HXLINE(  74)						return  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->externs->externToPointer->get(typeName))
            							->setFixed(1,HX_("objectValue",32,9c,e7,a0),_hx_tmp));
            					}
            					HX_END_LOCAL_FUNC2(return)

HXLINE(  73)					{
HXLINE(  73)						::Dynamic this2 = this->memory->externs->externToPointer;
HXDLIN(  73)						int v1 = this->memory->constants->getType(typeName);
HXDLIN(  73)						( ( ::haxe::ds::StringMap)(this2) )->set(typeName,v1);
            					}
HXLINE(  74)					statics2->getter =  ::Dynamic(new _hx_Closure_1(_gthis,typeName));
            				}
            			}
            		}
HXLINE(  80)		{
HXLINE(  80)			::Dynamic map = fields;
HXDLIN(  80)			::Dynamic _g_map = map;
HXDLIN(  80)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  80)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  80)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  80)				 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN(  80)				::String _g_key = key;
HXDLIN(  80)				::String key1 = _g_key;
HXDLIN(  80)				 ::Dynamic field = _g_value;
HXLINE(  81)				{
HXLINE(  81)					::Array< ::String > _g = key1.split(HX_(" ",20,00,00,00));
HXLINE(  82)					{
HXLINE( 176)						bool _hx_tmp2;
HXLINE( 145)						bool _hx_tmp3;
HXLINE( 109)						bool _hx_tmp4;
HXLINE(  82)						bool _hx_tmp5;
HXDLIN(  82)						if ((_g->__get(0) == HX_("public",a9,80,f3,66))) {
HXLINE(  82)							_hx_tmp5 = (_g->length == 3);
            						}
            						else {
HXLINE(  82)							_hx_tmp5 = false;
            						}
HXDLIN(  82)						if ((_hx_tmp5 == true)) {
HXLINE(  83)							::String name = key1.split(HX_(" ",20,00,00,00))->__get(2);
HXLINE(  84)							 ::little::interpreter::memory::Memory type = this->memory;
HXDLIN(  84)							int type1 = ( (int)(type->getTypeInformation(key1.split(HX_(" ",20,00,00,00))->__get(1))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE(  85)							{
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::little::tools::Plugins,_gthis, ::Dynamic,field) HXARGC(2)
            								 ::Dynamic _hx_run( ::little::interpreter::InterpTokens value,int address){
            									HX_STACKFRAME(&_hx_pos_553c3c091ec60400_88_registerType)
HXLINE(  88)									try {
            										HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  89)										 ::little::interpreter::InterpTokens result = field(address,value);
HXLINE(  90)										if (::Std_obj::isOfType(result,::hx::ClassOf< ::little::interpreter::InterpTokens >())) {
HXLINE(  91)											return  ::Dynamic(::hx::Anon_obj::Create(2)
            												->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->store(result))
            												->setFixed(1,HX_("objectValue",32,9c,e7,a0),result));
            										}
HXLINE(  96)										return  ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("objectAddress",b5,00,cc,8b), ::Dynamic(result->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)))
            											->setFixed(1,HX_("objectValue",32,9c,e7,a0), ::Dynamic(result->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))));
            									} catch( ::Dynamic _hx_e) {
            										if (_hx_e.IsClass<  ::Dynamic >() ){
            											HX_STACK_BEGIN_CATCH
            											 ::Dynamic _g = _hx_e;
HXLINE( 100)											 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 102)											 ::little::interpreter::InterpTokens v = ::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("External Variable Error: ",df,cf,34,7d) + e->details()));
HXLINE( 101)											return  ::Dynamic(::hx::Anon_obj::Create(2)
            												->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->ERROR)
            												->setFixed(1,HX_("objectValue",32,9c,e7,a0),v));
            										}
            										else {
            											HX_STACK_DO_THROW(_hx_e);
            										}
            									}
HXLINE(  88)									return null();
            								}
            								HX_END_LOCAL_FUNC2(return)

HXLINE(  85)								::Dynamic this3 = instances2->properties;
HXDLIN(  85)								 ::little::interpreter::memory::ExtTree v2 =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,type1, ::Dynamic(new _hx_Closure_2(_gthis,field)),null(),null());
HXDLIN(  85)								( ( ::haxe::ds::StringMap)(this3) )->set(name,v2);
            							}
            						}
            						else {
HXLINE( 109)							_hx_tmp4 = (_g->__get(0) == HX_("public",a9,80,f3,66));
HXDLIN( 109)							if ((_hx_tmp4 == true)) {
HXLINE( 110)								::String name1 = key1.split(HX_(" ",20,00,00,00))->__get(2);
HXLINE( 111)								 ::little::interpreter::memory::Memory type2 = this->memory;
HXDLIN( 111)								 ::Dynamic type3 = type2->getTypeInformation(key1.split(HX_(" ",20,00,00,00))->__get(1));
HXLINE( 112)								 ::Dynamic array = ::little::parser::Parser_obj::parse;
HXDLIN( 112)								::Array< ::Dynamic> params = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array(::little::lexer::Lexer_obj::lex(::little::tools::TextTools_obj::replaceLast(::little::tools::TextTools_obj::replaceFirst(::little::tools::TextTools_obj::replaceFirst(key1,((HX_("public function ",d1,53,7a,ba) + name1) + HX_(" ",20,00,00,00)),HX_("",00,00,00,00)),HX_("(",28,00,00,00),HX_("",00,00,00,00)),HX_(")",29,00,00,00),HX_("",00,00,00,00))))) ));
HXLINE( 114)								 ::little::tools::BaseOrderedMap paramMap = ::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new();
HXLINE( 115)								{
HXLINE( 115)									int _g1 = 0;
HXDLIN( 115)									while((_g1 < params->length)){
HXLINE( 115)										 ::little::interpreter::InterpTokens entry = params->__get(_g1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 115)										_g1 = (_g1 + 1);
HXLINE( 116)										::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::SPLIT_LINE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 116)										::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 116)										{
HXLINE( 116)											int _g2 = 0;
HXDLIN( 116)											int _g3 = _this->length;
HXDLIN( 116)											while((_g2 < _g3)){
HXLINE( 116)												_g2 = (_g2 + 1);
HXDLIN( 116)												int i = (_g2 - 1);
HXDLIN( 116)												{
HXLINE( 116)													::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 116)													result->__unsafe_set(i,inValue);
            												}
            											}
            										}
HXDLIN( 116)										if (result->contains(::Type_obj::enumConstructor(entry).toLowerCase())) {
HXLINE( 116)											continue;
            										}
HXLINE( 117)										switch((int)(entry->_hx_getIndex())){
            											case (int)3: {
HXLINE( 119)												 ::little::interpreter::InterpTokens _g4 = entry->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 119)												 ::little::interpreter::InterpTokens _g5 = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 119)												 ::little::interpreter::InterpTokens _g6 = entry->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 118)												if (::hx::IsNull( _g5 )) {
HXLINE( 118)													 ::little::interpreter::InterpTokens name2 = _g4;
HXDLIN( 118)													 ::little::tools::BaseOrderedMap paramMap1 = paramMap;
HXDLIN( 118)													::String _hx_tmp6;
HXDLIN( 118)													::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 118)													::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 118)													{
HXLINE( 118)														int _g7 = 0;
HXDLIN( 118)														int _g8 = _this1->length;
HXDLIN( 118)														while((_g7 < _g8)){
HXLINE( 118)															_g7 = (_g7 + 1);
HXDLIN( 118)															int i1 = (_g7 - 1);
HXDLIN( 118)															{
HXLINE( 118)																::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 118)																result1->__unsafe_set(i1,inValue1);
            															}
            														}
            													}
HXDLIN( 118)													if (result1->contains(::Type_obj::enumConstructor(name2).toLowerCase())) {
HXLINE( 118)														_hx_tmp6 = ( (::String)(::Type_obj::enumParameters(name2)->__get(0)) );
            													}
            													else {
HXLINE( 118)														_hx_tmp6 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name2),null()))->__get(0)) );
            													}
HXDLIN( 118)													::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap1,_hx_tmp6,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            												}
            												else {
HXLINE( 119)													 ::little::interpreter::InterpTokens type4 = _g5;
HXDLIN( 119)													 ::little::interpreter::InterpTokens name3 = _g4;
HXDLIN( 119)													 ::little::tools::BaseOrderedMap paramMap2 = paramMap;
HXDLIN( 119)													::String _hx_tmp7;
HXDLIN( 119)													::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 119)													::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 119)													{
HXLINE( 119)														int _g9 = 0;
HXDLIN( 119)														int _g10 = _this2->length;
HXDLIN( 119)														while((_g9 < _g10)){
HXLINE( 119)															_g9 = (_g9 + 1);
HXDLIN( 119)															int i2 = (_g9 - 1);
HXDLIN( 119)															{
HXLINE( 119)																::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 119)																result2->__unsafe_set(i2,inValue2);
            															}
            														}
            													}
HXDLIN( 119)													if (result2->contains(::Type_obj::enumConstructor(name3).toLowerCase())) {
HXLINE( 119)														_hx_tmp7 = ( (::String)(::Type_obj::enumParameters(name3)->__get(0)) );
            													}
            													else {
HXLINE( 119)														_hx_tmp7 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name3),null()))->__get(0)) );
            													}
HXDLIN( 119)													::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap2,_hx_tmp7,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),type4));
            												}
            											}
            											break;
            											case (int)10: {
HXLINE( 120)												::Array< ::Dynamic> assignees = entry->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 120)												 ::little::interpreter::InterpTokens value = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 121)												{
HXLINE( 121)													 ::little::interpreter::InterpTokens _g11 = assignees->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 121)													if ((_g11->_hx_getIndex() == 3)) {
HXLINE( 123)														 ::little::interpreter::InterpTokens _g12 = _g11->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 123)														 ::little::interpreter::InterpTokens _g13 = _g11->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 123)														 ::little::interpreter::InterpTokens _g14 = _g11->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 122)														if (::hx::IsNull( _g13 )) {
HXLINE( 122)															 ::little::interpreter::InterpTokens name4 = _g12;
HXDLIN( 122)															 ::little::tools::BaseOrderedMap paramMap3 = paramMap;
HXDLIN( 122)															::String _hx_tmp8;
HXDLIN( 122)															::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 122)															::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 122)															{
HXLINE( 122)																int _g15 = 0;
HXDLIN( 122)																int _g16 = _this3->length;
HXDLIN( 122)																while((_g15 < _g16)){
HXLINE( 122)																	_g15 = (_g15 + 1);
HXDLIN( 122)																	int i3 = (_g15 - 1);
HXDLIN( 122)																	{
HXLINE( 122)																		::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 122)																		result3->__unsafe_set(i3,inValue3);
            																	}
            																}
            															}
HXDLIN( 122)															if (result3->contains(::Type_obj::enumConstructor(name4).toLowerCase())) {
HXLINE( 122)																_hx_tmp8 = ( (::String)(::Type_obj::enumParameters(name4)->__get(0)) );
            															}
            															else {
HXLINE( 122)																_hx_tmp8 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name4),null()))->__get(0)) );
            															}
HXDLIN( 122)															::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap3,_hx_tmp8,::little::interpreter::InterpTokens_obj::TypeCast(value,::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            														}
            														else {
HXLINE( 123)															 ::little::interpreter::InterpTokens type5 = _g13;
HXDLIN( 123)															 ::little::interpreter::InterpTokens name5 = _g12;
HXDLIN( 123)															 ::little::tools::BaseOrderedMap paramMap4 = paramMap;
HXDLIN( 123)															::String _hx_tmp9;
HXDLIN( 123)															::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 123)															::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 123)															{
HXLINE( 123)																int _g17 = 0;
HXDLIN( 123)																int _g18 = _this4->length;
HXDLIN( 123)																while((_g17 < _g18)){
HXLINE( 123)																	_g17 = (_g17 + 1);
HXDLIN( 123)																	int i4 = (_g17 - 1);
HXDLIN( 123)																	{
HXLINE( 123)																		::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 123)																		result4->__unsafe_set(i4,inValue4);
            																	}
            																}
            															}
HXDLIN( 123)															if (result4->contains(::Type_obj::enumConstructor(name5).toLowerCase())) {
HXLINE( 123)																_hx_tmp9 = ( (::String)(::Type_obj::enumParameters(name5)->__get(0)) );
            															}
            															else {
HXLINE( 123)																_hx_tmp9 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name5),null()))->__get(0)) );
            															}
HXDLIN( 123)															::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap4,_hx_tmp9,::little::interpreter::InterpTokens_obj::TypeCast(value,type5));
            														}
            													}
            												}
            											}
            											break;
            											default:{
            											}
            										}
            									}
            								}
HXLINE( 131)								{
            									HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,field, ::little::tools::Plugins,_gthis, ::little::tools::BaseOrderedMap,paramMap, ::Dynamic,type3) HXARGC(2)
            									 ::Dynamic _hx_run( ::little::interpreter::InterpTokens value,int address){
            										HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_3, ::little::tools::Plugins,_gthis, ::Dynamic,field, ::little::interpreter::InterpTokens,value, ::little::tools::BaseOrderedMap,paramMap,int,address) HXARGC(0)
            										 ::little::interpreter::InterpTokens _hx_run(){
            											HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_135_registerType)
HXLINE( 136)											 ::Dynamic field1 = field;
HXDLIN( 136)											int address1 = address;
HXDLIN( 136)											 ::little::interpreter::InterpTokens value1 = value;
HXDLIN( 136)											::Array< ::String > _this = ::little::tools::Extensions_obj::toArray(paramMap->keys());
HXDLIN( 136)											::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 136)											{
HXLINE( 136)												int _g = 0;
HXDLIN( 136)												int _g1 = _this->length;
HXDLIN( 136)												while((_g < _g1)){
HXLINE( 136)													_g = (_g + 1);
HXDLIN( 136)													int i = (_g - 1);
HXDLIN( 136)													{
HXLINE( 136)														::Array< ::String > this1 = ::Array_obj< ::String >::__new(1)->init(0,_hx_array_unsafe_get(_this,i));
HXDLIN( 136)														 ::little::interpreter::InterpTokens inValue = ::little::interpreter::Interpreter_obj::evaluate(_gthis->memory->read(this1)->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic),null());
HXDLIN( 136)														result->__unsafe_set(i,inValue);
            													}
            												}
            											}
HXDLIN( 136)											 ::little::interpreter::InterpTokens result1 = field1(address1,value1,result);
HXLINE( 137)											return result1;
            										}
            										HX_END_LOCAL_FUNC0(return)

            										HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_131_registerType)
HXLINE( 132)										 ::little::interpreter::InterpTokens returnType = ::little::tools::Extensions_obj::asTokenPath(( (::String)(type3->__Field(HX_("typeName",25,76,ca,b5),::hx::paccDynamic)) ));
HXLINE( 134)										 ::little::interpreter::InterpTokens v = ::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_3(_gthis,field,value,paramMap,address))),returnType)),returnType);
HXLINE( 133)										return  ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->EXTERN)
            											->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::FunctionCode(paramMap,v)));
            									}
            									HX_END_LOCAL_FUNC2(return)

HXLINE( 131)									::Dynamic this4 = instances2->properties;
HXDLIN( 131)									 ::little::interpreter::memory::ExtTree v3 =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,this->memory->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic), ::Dynamic(new _hx_Closure_4(field,_gthis,paramMap,type3)),null(),null());
HXDLIN( 131)									( ( ::haxe::ds::StringMap)(this4) )->set(name1,v3);
            								}
            							}
            							else {
HXLINE( 145)								if ((_g->__get(0) == HX_("static",ae,dc,fb,05))) {
HXLINE( 145)									_hx_tmp3 = (_g->length == 3);
            								}
            								else {
HXLINE( 145)									_hx_tmp3 = false;
            								}
HXDLIN( 145)								if ((_hx_tmp3 == true)) {
HXLINE( 146)									::String name6 = key1.split(HX_(" ",20,00,00,00))->__get(2);
HXLINE( 147)									 ::little::interpreter::memory::Memory type6 = this->memory;
HXDLIN( 147)									int type7 = ( (int)(type6->getTypeInformation(key1.split(HX_(" ",20,00,00,00))->__get(1))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE( 148)									if (::Std_obj::isOfType(field,::hx::ClassOf< ::haxe::ds::StringMap >())) {
HXLINE( 149)										::little::tools::Plugins_obj::_hx___noTypeCreation = true;
HXLINE( 150)										this->registerType(((typeName + HX_(".",2e,00,00,00)) + name6),( ( ::haxe::ds::StringMap)(field) ));
HXLINE( 151)										continue;
            									}
HXLINE( 153)									{
            										HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::little::tools::Plugins,_gthis, ::Dynamic,field) HXARGC(2)
            										 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            											HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_156_registerType)
HXLINE( 156)											try {
            												HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 157)												 ::little::interpreter::InterpTokens result = field();
HXLINE( 158)												if (::Std_obj::isOfType(result,::hx::ClassOf< ::little::interpreter::InterpTokens >())) {
HXLINE( 159)													return  ::Dynamic(::hx::Anon_obj::Create(2)
            														->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->store(result))
            														->setFixed(1,HX_("objectValue",32,9c,e7,a0),result));
            												}
HXLINE( 164)												return  ::Dynamic(::hx::Anon_obj::Create(2)
            													->setFixed(0,HX_("objectAddress",b5,00,cc,8b), ::Dynamic(result->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)))
            													->setFixed(1,HX_("objectValue",32,9c,e7,a0), ::Dynamic(result->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))));
            											} catch( ::Dynamic _hx_e) {
            												if (_hx_e.IsClass<  ::Dynamic >() ){
            													HX_STACK_BEGIN_CATCH
            													 ::Dynamic _g = _hx_e;
HXLINE( 168)													 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 170)													 ::little::interpreter::InterpTokens v = ::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("External Variable Error: ",df,cf,34,7d) + e->details()));
HXLINE( 169)													return  ::Dynamic(::hx::Anon_obj::Create(2)
            														->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->ERROR)
            														->setFixed(1,HX_("objectValue",32,9c,e7,a0),v));
            												}
            												else {
            													HX_STACK_DO_THROW(_hx_e);
            												}
            											}
HXLINE( 156)											return null();
            										}
            										HX_END_LOCAL_FUNC2(return)

HXLINE( 153)										::Dynamic this5 = statics2->properties;
HXDLIN( 153)										 ::little::interpreter::memory::ExtTree v4 =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,type7, ::Dynamic(new _hx_Closure_5(_gthis,field)),null(),null());
HXDLIN( 153)										( ( ::haxe::ds::StringMap)(this5) )->set(name6,v4);
            									}
            								}
            								else {
HXLINE( 176)									_hx_tmp2 = (_g->__get(0) == HX_("static",ae,dc,fb,05));
HXDLIN( 176)									if ((_hx_tmp2 == true)) {
HXLINE( 177)										::String name7 = key1.split(HX_(" ",20,00,00,00))->__get(2);
HXLINE( 178)										 ::little::interpreter::memory::Memory type8 = this->memory;
HXDLIN( 178)										 ::Dynamic type9 = type8->getTypeInformation(key1.split(HX_(" ",20,00,00,00))->__get(1));
HXLINE( 179)										 ::Dynamic array1 = ::little::parser::Parser_obj::parse;
HXDLIN( 179)										::Array< ::Dynamic> params1 = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array1(::little::lexer::Lexer_obj::lex(::little::tools::TextTools_obj::replaceLast(::little::tools::TextTools_obj::replaceFirst(::little::tools::TextTools_obj::replaceFirst(key1,((HX_("static function ",16,c8,65,e6) + name7) + HX_(" ",20,00,00,00)),HX_("",00,00,00,00)),HX_("(",28,00,00,00),HX_("",00,00,00,00)),HX_(")",29,00,00,00),HX_("",00,00,00,00))))) ));
HXLINE( 180)										 ::little::tools::BaseOrderedMap paramMap5 = ::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new();
HXLINE( 181)										{
HXLINE( 181)											int _g19 = 0;
HXDLIN( 181)											while((_g19 < params1->length)){
HXLINE( 181)												 ::little::interpreter::InterpTokens entry1 = params1->__get(_g19).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 181)												_g19 = (_g19 + 1);
HXLINE( 182)												::Array< ::Dynamic> _this5 = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::SPLIT_LINE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 182)												::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 182)												{
HXLINE( 182)													int _g20 = 0;
HXDLIN( 182)													int _g21 = _this5->length;
HXDLIN( 182)													while((_g20 < _g21)){
HXLINE( 182)														_g20 = (_g20 + 1);
HXDLIN( 182)														int i5 = (_g20 - 1);
HXDLIN( 182)														{
HXLINE( 182)															::String inValue5 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this5,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 182)															result5->__unsafe_set(i5,inValue5);
            														}
            													}
            												}
HXDLIN( 182)												if (result5->contains(::Type_obj::enumConstructor(entry1).toLowerCase())) {
HXLINE( 182)													continue;
            												}
HXLINE( 183)												switch((int)(entry1->_hx_getIndex())){
            													case (int)3: {
HXLINE( 185)														 ::little::interpreter::InterpTokens _g22 = entry1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)														 ::little::interpreter::InterpTokens _g23 = entry1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 185)														 ::little::interpreter::InterpTokens _g24 = entry1->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 184)														if (::hx::IsNull( _g23 )) {
HXLINE( 184)															 ::little::interpreter::InterpTokens name8 = _g22;
HXDLIN( 184)															 ::little::tools::BaseOrderedMap paramMap6 = paramMap5;
HXDLIN( 184)															::String _hx_tmp10;
HXDLIN( 184)															::Array< ::Dynamic> _this6 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 184)															::Array< ::String > result6 = ::Array_obj< ::String >::__new(_this6->length);
HXDLIN( 184)															{
HXLINE( 184)																int _g25 = 0;
HXDLIN( 184)																int _g26 = _this6->length;
HXDLIN( 184)																while((_g25 < _g26)){
HXLINE( 184)																	_g25 = (_g25 + 1);
HXDLIN( 184)																	int i6 = (_g25 - 1);
HXDLIN( 184)																	{
HXLINE( 184)																		::String inValue6 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this6,i6)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 184)																		result6->__unsafe_set(i6,inValue6);
            																	}
            																}
            															}
HXDLIN( 184)															if (result6->contains(::Type_obj::enumConstructor(name8).toLowerCase())) {
HXLINE( 184)																_hx_tmp10 = ( (::String)(::Type_obj::enumParameters(name8)->__get(0)) );
            															}
            															else {
HXLINE( 184)																_hx_tmp10 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name8),null()))->__get(0)) );
            															}
HXDLIN( 184)															::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap6,_hx_tmp10,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            														}
            														else {
HXLINE( 185)															 ::little::interpreter::InterpTokens type10 = _g23;
HXDLIN( 185)															 ::little::interpreter::InterpTokens name9 = _g22;
HXDLIN( 185)															 ::little::tools::BaseOrderedMap paramMap7 = paramMap5;
HXDLIN( 185)															::String _hx_tmp11;
HXDLIN( 185)															::Array< ::Dynamic> _this7 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 185)															::Array< ::String > result7 = ::Array_obj< ::String >::__new(_this7->length);
HXDLIN( 185)															{
HXLINE( 185)																int _g27 = 0;
HXDLIN( 185)																int _g28 = _this7->length;
HXDLIN( 185)																while((_g27 < _g28)){
HXLINE( 185)																	_g27 = (_g27 + 1);
HXDLIN( 185)																	int i7 = (_g27 - 1);
HXDLIN( 185)																	{
HXLINE( 185)																		::String inValue7 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this7,i7)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 185)																		result7->__unsafe_set(i7,inValue7);
            																	}
            																}
            															}
HXDLIN( 185)															if (result7->contains(::Type_obj::enumConstructor(name9).toLowerCase())) {
HXLINE( 185)																_hx_tmp11 = ( (::String)(::Type_obj::enumParameters(name9)->__get(0)) );
            															}
            															else {
HXLINE( 185)																_hx_tmp11 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name9),null()))->__get(0)) );
            															}
HXDLIN( 185)															::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap7,_hx_tmp11,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),type10));
            														}
            													}
            													break;
            													case (int)10: {
HXLINE( 186)														::Array< ::Dynamic> assignees1 = entry1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 186)														 ::little::interpreter::InterpTokens value1 = entry1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 187)														{
HXLINE( 187)															 ::little::interpreter::InterpTokens _g29 = assignees1->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 187)															if ((_g29->_hx_getIndex() == 3)) {
HXLINE( 189)																 ::little::interpreter::InterpTokens _g30 = _g29->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)																 ::little::interpreter::InterpTokens _g31 = _g29->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 189)																 ::little::interpreter::InterpTokens _g32 = _g29->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 188)																if (::hx::IsNull( _g31 )) {
HXLINE( 188)																	 ::little::interpreter::InterpTokens name10 = _g30;
HXDLIN( 188)																	 ::little::tools::BaseOrderedMap paramMap8 = paramMap5;
HXDLIN( 188)																	::String _hx_tmp12;
HXDLIN( 188)																	::Array< ::Dynamic> _this8 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 188)																	::Array< ::String > result8 = ::Array_obj< ::String >::__new(_this8->length);
HXDLIN( 188)																	{
HXLINE( 188)																		int _g33 = 0;
HXDLIN( 188)																		int _g34 = _this8->length;
HXDLIN( 188)																		while((_g33 < _g34)){
HXLINE( 188)																			_g33 = (_g33 + 1);
HXDLIN( 188)																			int i8 = (_g33 - 1);
HXDLIN( 188)																			{
HXLINE( 188)																				::String inValue8 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this8,i8)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 188)																				result8->__unsafe_set(i8,inValue8);
            																			}
            																		}
            																	}
HXDLIN( 188)																	if (result8->contains(::Type_obj::enumConstructor(name10).toLowerCase())) {
HXLINE( 188)																		_hx_tmp12 = ( (::String)(::Type_obj::enumParameters(name10)->__get(0)) );
            																	}
            																	else {
HXLINE( 188)																		_hx_tmp12 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name10),null()))->__get(0)) );
            																	}
HXDLIN( 188)																	::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap8,_hx_tmp12,::little::interpreter::InterpTokens_obj::TypeCast(value1,::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            																}
            																else {
HXLINE( 189)																	 ::little::interpreter::InterpTokens type11 = _g31;
HXDLIN( 189)																	 ::little::interpreter::InterpTokens name11 = _g30;
HXDLIN( 189)																	 ::little::tools::BaseOrderedMap paramMap9 = paramMap5;
HXDLIN( 189)																	::String _hx_tmp13;
HXDLIN( 189)																	::Array< ::Dynamic> _this9 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 189)																	::Array< ::String > result9 = ::Array_obj< ::String >::__new(_this9->length);
HXDLIN( 189)																	{
HXLINE( 189)																		int _g35 = 0;
HXDLIN( 189)																		int _g36 = _this9->length;
HXDLIN( 189)																		while((_g35 < _g36)){
HXLINE( 189)																			_g35 = (_g35 + 1);
HXDLIN( 189)																			int i9 = (_g35 - 1);
HXDLIN( 189)																			{
HXLINE( 189)																				::String inValue9 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this9,i9)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 189)																				result9->__unsafe_set(i9,inValue9);
            																			}
            																		}
            																	}
HXDLIN( 189)																	if (result9->contains(::Type_obj::enumConstructor(name11).toLowerCase())) {
HXLINE( 189)																		_hx_tmp13 = ( (::String)(::Type_obj::enumParameters(name11)->__get(0)) );
            																	}
            																	else {
HXLINE( 189)																		_hx_tmp13 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name11),null()))->__get(0)) );
            																	}
HXDLIN( 189)																	::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap9,_hx_tmp13,::little::interpreter::InterpTokens_obj::TypeCast(value1,type11));
            																}
            															}
            														}
            													}
            													break;
            													default:{
            													}
            												}
            											}
            										}
HXLINE( 197)										{
            											HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_7, ::little::tools::BaseOrderedMap,paramMap5, ::Dynamic,field, ::little::tools::Plugins,_gthis, ::Dynamic,type9) HXARGC(2)
            											 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            												HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_6, ::little::tools::BaseOrderedMap,paramMap5, ::little::tools::Plugins,_gthis, ::Dynamic,field) HXARGC(0)
            												 ::little::interpreter::InterpTokens _hx_run(){
            													HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_201_registerType)
HXLINE( 202)													 ::Dynamic field1 = field;
HXDLIN( 202)													::Array< ::String > _this = ::little::tools::Extensions_obj::toArray(paramMap5->keys());
HXDLIN( 202)													::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 202)													{
HXLINE( 202)														int _g = 0;
HXDLIN( 202)														int _g1 = _this->length;
HXDLIN( 202)														while((_g < _g1)){
HXLINE( 202)															_g = (_g + 1);
HXDLIN( 202)															int i = (_g - 1);
HXDLIN( 202)															{
HXLINE( 202)																::Array< ::String > this1 = ::Array_obj< ::String >::__new(1)->init(0,_hx_array_unsafe_get(_this,i));
HXDLIN( 202)																 ::little::interpreter::InterpTokens inValue = ::little::interpreter::Interpreter_obj::evaluate(_gthis->memory->read(this1)->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic),null());
HXDLIN( 202)																result->__unsafe_set(i,inValue);
            															}
            														}
            													}
HXDLIN( 202)													 ::little::interpreter::InterpTokens result1 = field1(result);
HXLINE( 203)													return result1;
            												}
            												HX_END_LOCAL_FUNC0(return)

            												HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_197_registerType)
HXLINE( 198)												 ::little::interpreter::InterpTokens returnType = ::little::tools::Extensions_obj::asTokenPath(( (::String)(type9->__Field(HX_("typeName",25,76,ca,b5),::hx::paccDynamic)) ));
HXLINE( 200)												 ::little::interpreter::InterpTokens v = ::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_6(paramMap5,_gthis,field))),returnType)),returnType);
HXLINE( 199)												return  ::Dynamic(::hx::Anon_obj::Create(2)
            													->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->EXTERN)
            													->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::FunctionCode(paramMap5,v)));
            											}
            											HX_END_LOCAL_FUNC2(return)

HXLINE( 197)											::Dynamic this6 = statics2->properties;
HXDLIN( 197)											 ::little::interpreter::memory::ExtTree v5 =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,this->memory->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic), ::Dynamic(new _hx_Closure_7(paramMap5,field,_gthis,type9)),null(),null());
HXDLIN( 197)											( ( ::haxe::ds::StringMap)(this6) )->set(name7,v5);
            										}
            									}
            									else {
HXLINE( 211)										HX_STACK_DO_THROW(((HX_("Invalid key syntax for `",96,dc,9e,b9) + key1) + HX_("`. Must start with either `public`/`static` `function`/`var`, and end with a variable name. (Example: `public var myVar`). Each item must be separated by a single whitespace.",e6,ab,1b,54)));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Plugins_obj,registerType,(void))

void Plugins_obj::registerVariable(::String variableName,::String variableType,::String documentation, ::little::interpreter::InterpTokens staticValue, ::Dynamic valueGetter){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis, ::little::interpreter::InterpTokens,staticValue, ::Dynamic,valueGetter) HXARGC(2)
            		 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            			HX_STACKFRAME(&_hx_pos_553c3c091ec60400_231_registerVariable)
HXLINE( 231)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 232)				 ::little::interpreter::InterpTokens value;
HXDLIN( 232)				if (::hx::IsNull( staticValue )) {
HXLINE( 232)					value = valueGetter();
            				}
            				else {
HXLINE( 232)					value = staticValue;
            				}
HXLINE( 233)				return  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->store(value))
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0),value));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 238)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 240)					 ::little::interpreter::InterpTokens _hx_tmp = ::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("External Variable Error: ",df,cf,34,7d) + e->details()));
HXLINE( 239)					return  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->ERROR)
            						->setFixed(1,HX_("objectValue",32,9c,e7,a0),_hx_tmp));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 231)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_225_registerVariable)
HXDLIN( 225)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 226)		::Array< ::String > varPath = variableName.split(HX_(".",2e,00,00,00));
HXLINE( 227)		 ::little::interpreter::memory::ExtTree object = this->memory->externs->createPathFor(this->memory->externs->globalProperties,varPath);
HXLINE( 229)		object->type = ( (int)(this->memory->getTypeInformation(variableName)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE( 230)		object->getter =  ::Dynamic(new _hx_Closure_0(_gthis,staticValue,valueGetter));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Plugins_obj,registerVariable,(void))

void Plugins_obj::registerFunction(::String functionName,::String documentation, ::Dynamic expectedParameters, ::Dynamic callback,::String returnType){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis, ::little::tools::BaseOrderedMap,paramMap, ::Dynamic,callback) HXARGC(0)
            		 ::little::interpreter::InterpTokens _hx_run(){
            			HX_STACKFRAME(&_hx_pos_553c3c091ec60400_291_registerFunction)
HXLINE( 291)			 ::Dynamic callback1 = callback;
HXDLIN( 291)			::Array< ::String > _this = ::little::tools::Extensions_obj::toArray(paramMap->keys());
HXDLIN( 291)			::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 291)			{
HXLINE( 291)				int _g = 0;
HXDLIN( 291)				int _g1 = _this->length;
HXDLIN( 291)				while((_g < _g1)){
HXLINE( 291)					_g = (_g + 1);
HXDLIN( 291)					int i = (_g - 1);
HXDLIN( 291)					{
HXLINE( 291)						::Array< ::String > this1 = ::Array_obj< ::String >::__new(1)->init(0,_hx_array_unsafe_get(_this,i));
HXDLIN( 291)						 ::Dynamic inValue = _gthis->memory->read(this1);
HXDLIN( 291)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 291)			return callback1(result);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::little::tools::Plugins,_gthis, ::little::interpreter::InterpTokens,token1) HXARGC(2)
            		 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            			HX_STACKFRAME(&_hx_pos_553c3c091ec60400_297_registerFunction)
HXLINE( 297)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->EXTERN)
            				->setFixed(1,HX_("objectValue",32,9c,e7,a0),token1));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_265_registerFunction)
HXDLIN( 265)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 266)		::Array< ::Dynamic> params;
HXDLIN( 266)		if (::Std_obj::isOfType(expectedParameters,::hx::ClassOf< ::String >())) {
HXLINE( 267)			 ::Dynamic array = ::little::parser::Parser_obj::parse;
HXLINE( 266)			params = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array(::little::lexer::Lexer_obj::lex(( (::String)(expectedParameters) )))) ));
            		}
            		else {
HXLINE( 266)			params = ( (::Array< ::Dynamic>)(expectedParameters) );
            		}
HXLINE( 270)		::Array< ::String > functionPath = functionName.split(HX_(".",2e,00,00,00));
HXLINE( 272)		 ::little::tools::BaseOrderedMap paramMap = ::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new();
HXLINE( 273)		{
HXLINE( 273)			int _g = 0;
HXDLIN( 273)			while((_g < params->length)){
HXLINE( 273)				 ::little::interpreter::InterpTokens entry = params->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 273)				_g = (_g + 1);
HXLINE( 274)				::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::SPLIT_LINE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 274)				::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 274)				{
HXLINE( 274)					int _g1 = 0;
HXDLIN( 274)					int _g2 = _this->length;
HXDLIN( 274)					while((_g1 < _g2)){
HXLINE( 274)						_g1 = (_g1 + 1);
HXDLIN( 274)						int i = (_g1 - 1);
HXDLIN( 274)						{
HXLINE( 274)							::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 274)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 274)				if (result->contains(::Type_obj::enumConstructor(entry).toLowerCase())) {
HXLINE( 274)					continue;
            				}
HXLINE( 275)				switch((int)(entry->_hx_getIndex())){
            					case (int)3: {
HXLINE( 277)						 ::little::interpreter::InterpTokens _g3 = entry->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 277)						 ::little::interpreter::InterpTokens _g4 = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 277)						 ::little::interpreter::InterpTokens _g5 = entry->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 276)						if (::hx::IsNull( _g4 )) {
HXLINE( 276)							 ::little::interpreter::InterpTokens name = _g3;
HXDLIN( 276)							 ::little::tools::BaseOrderedMap paramMap1 = paramMap;
HXDLIN( 276)							::String _hx_tmp;
HXDLIN( 276)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 276)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 276)							{
HXLINE( 276)								int _g6 = 0;
HXDLIN( 276)								int _g7 = _this1->length;
HXDLIN( 276)								while((_g6 < _g7)){
HXLINE( 276)									_g6 = (_g6 + 1);
HXDLIN( 276)									int i1 = (_g6 - 1);
HXDLIN( 276)									{
HXLINE( 276)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 276)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 276)							if (result1->contains(::Type_obj::enumConstructor(name).toLowerCase())) {
HXLINE( 276)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(name)->__get(0)) );
            							}
            							else {
HXLINE( 276)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name),null()))->__get(0)) );
            							}
HXDLIN( 276)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap1,_hx_tmp,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            						}
            						else {
HXLINE( 277)							 ::little::interpreter::InterpTokens type = _g4;
HXDLIN( 277)							 ::little::interpreter::InterpTokens name1 = _g3;
HXDLIN( 277)							 ::little::tools::BaseOrderedMap paramMap2 = paramMap;
HXDLIN( 277)							::String _hx_tmp1;
HXDLIN( 277)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 277)							::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 277)							{
HXLINE( 277)								int _g8 = 0;
HXDLIN( 277)								int _g9 = _this2->length;
HXDLIN( 277)								while((_g8 < _g9)){
HXLINE( 277)									_g8 = (_g8 + 1);
HXDLIN( 277)									int i2 = (_g8 - 1);
HXDLIN( 277)									{
HXLINE( 277)										::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 277)										result2->__unsafe_set(i2,inValue2);
            									}
            								}
            							}
HXDLIN( 277)							if (result2->contains(::Type_obj::enumConstructor(name1).toLowerCase())) {
HXLINE( 277)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(name1)->__get(0)) );
            							}
            							else {
HXLINE( 277)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name1),null()))->__get(0)) );
            							}
HXDLIN( 277)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap2,_hx_tmp1,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),type));
            						}
            					}
            					break;
            					case (int)10: {
HXLINE( 278)						::Array< ::Dynamic> assignees = entry->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 278)						 ::little::interpreter::InterpTokens value = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 279)						{
HXLINE( 279)							 ::little::interpreter::InterpTokens _g10 = assignees->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 279)							if ((_g10->_hx_getIndex() == 3)) {
HXLINE( 281)								 ::little::interpreter::InterpTokens _g11 = _g10->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 281)								 ::little::interpreter::InterpTokens _g12 = _g10->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 281)								 ::little::interpreter::InterpTokens _g13 = _g10->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 280)								if (::hx::IsNull( _g12 )) {
HXLINE( 280)									 ::little::interpreter::InterpTokens name2 = _g11;
HXDLIN( 280)									 ::little::tools::BaseOrderedMap paramMap3 = paramMap;
HXDLIN( 280)									::String _hx_tmp2;
HXDLIN( 280)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 280)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 280)									{
HXLINE( 280)										int _g14 = 0;
HXDLIN( 280)										int _g15 = _this3->length;
HXDLIN( 280)										while((_g14 < _g15)){
HXLINE( 280)											_g14 = (_g14 + 1);
HXDLIN( 280)											int i3 = (_g14 - 1);
HXDLIN( 280)											{
HXLINE( 280)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 280)												result3->__unsafe_set(i3,inValue3);
            											}
            										}
            									}
HXDLIN( 280)									if (result3->contains(::Type_obj::enumConstructor(name2).toLowerCase())) {
HXLINE( 280)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(name2)->__get(0)) );
            									}
            									else {
HXLINE( 280)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name2),null()))->__get(0)) );
            									}
HXDLIN( 280)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap3,_hx_tmp2,::little::interpreter::InterpTokens_obj::TypeCast(value,::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            								}
            								else {
HXLINE( 281)									 ::little::interpreter::InterpTokens type1 = _g12;
HXDLIN( 281)									 ::little::interpreter::InterpTokens name3 = _g11;
HXDLIN( 281)									 ::little::tools::BaseOrderedMap paramMap4 = paramMap;
HXDLIN( 281)									::String _hx_tmp3;
HXDLIN( 281)									::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 281)									::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 281)									{
HXLINE( 281)										int _g16 = 0;
HXDLIN( 281)										int _g17 = _this4->length;
HXDLIN( 281)										while((_g16 < _g17)){
HXLINE( 281)											_g16 = (_g16 + 1);
HXDLIN( 281)											int i4 = (_g16 - 1);
HXDLIN( 281)											{
HXLINE( 281)												::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 281)												result4->__unsafe_set(i4,inValue4);
            											}
            										}
            									}
HXDLIN( 281)									if (result4->contains(::Type_obj::enumConstructor(name3).toLowerCase())) {
HXLINE( 281)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(name3)->__get(0)) );
            									}
            									else {
HXLINE( 281)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name3),null()))->__get(0)) );
            									}
HXDLIN( 281)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap4,_hx_tmp3,::little::interpreter::InterpTokens_obj::TypeCast(value,type1));
            								}
            							}
            						}
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE( 289)		 ::Dynamic array1 = ::little::parser::Parser_obj::parse;
HXDLIN( 289)		 ::little::interpreter::InterpTokens returnTypeToken = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array1(::little::lexer::Lexer_obj::lex(returnType))) ))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 290)		 ::little::interpreter::InterpTokens token = ::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_0(_gthis,paramMap,callback))),returnTypeToken)),returnTypeToken);
HXDLIN( 290)		 ::little::interpreter::InterpTokens token1 = ::little::interpreter::InterpTokens_obj::FunctionCode(paramMap,token);
HXLINE( 294)		 ::little::interpreter::memory::ExtTree object = this->memory->externs->createPathFor(this->memory->externs->globalProperties,functionPath);
HXLINE( 296)		object->type = ( (int)(this->memory->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE( 297)		object->getter =  ::Dynamic(new _hx_Closure_1(_gthis,token1));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Plugins_obj,registerFunction,(void))

void Plugins_obj::registerCondition(::String conditionName,::String documentation, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::little::tools::Plugins,_gthis, ::Dynamic,callback) HXARGC(2)
            		 ::Dynamic _hx_run( ::little::interpreter::InterpTokens _,int _1){
            			HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_324_registerCondition)
HXLINE( 325)			 ::haxe::ds::ObjectMap _g =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXDLIN( 325)			{
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis, ::Dynamic,callback) HXARGC(0)
            				 ::little::interpreter::InterpTokens _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_327_registerCondition)
HXLINE( 327)					 ::Dynamic callback1 = callback;
HXLINE( 328)					 ::Dynamic array = ::little::parser::Parser_obj::parse;
HXDLIN( 328)					::Array< ::Dynamic> value = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array(::little::lexer::Lexer_obj::lex(( (::String)(::Type_obj::enumParameters(_gthis->memory->read(::Array_obj< ::String >::__new(1)->init(0,::little::Little_obj::keywords->CONDITION_PATTERN_PARAMETER_NAME))->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) )))) ))->slice(1,null());
HXLINE( 329)					 ::Dynamic array1 = ::little::parser::Parser_obj::parse;
HXLINE( 327)					return callback1(value,::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array1(::little::lexer::Lexer_obj::lex(( (::String)(::Type_obj::enumParameters(_gthis->memory->read(::Array_obj< ::String >::__new(1)->init(0,::little::Little_obj::keywords->CONDITION_BODY_PARAMETER_NAME))->__Field(HX_("objectValue",32,9c,e7,a0),::hx::paccDynamic))->__get(0)) )))) )));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 325)				::Array< ::Dynamic> key = null();
HXDLIN( 325)				_g->set(key,::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_0(_gthis,callback)))),null()));
            			}
HXLINE( 324)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->EXTERN)
            				->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::ConditionCode(_g)));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_320_registerCondition)
HXDLIN( 320)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 321)		::Array< ::String > conditionPath = conditionName.split(HX_(".",2e,00,00,00));
HXLINE( 322)		 ::little::interpreter::memory::ExtTree object = this->memory->externs->createPathFor(this->memory->externs->globalProperties,conditionPath);
HXLINE( 324)		object->getter =  ::Dynamic(new _hx_Closure_1(_gthis,callback));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Plugins_obj,registerCondition,(void))

void Plugins_obj::registerInstanceVariable(::String propertyName,::String propertyType,::String onType,::String documentation, ::little::interpreter::InterpTokens staticValue, ::Dynamic valueGetter){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis, ::little::interpreter::InterpTokens,staticValue, ::Dynamic,valueGetter) HXARGC(2)
            		 ::Dynamic _hx_run( ::little::interpreter::InterpTokens v,int a){
            			HX_STACKFRAME(&_hx_pos_553c3c091ec60400_358_registerInstanceVariable)
HXLINE( 358)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 359)				 ::little::interpreter::InterpTokens value;
HXDLIN( 359)				if (::hx::IsNull( staticValue )) {
HXLINE( 359)					value = valueGetter(v,a);
            				}
            				else {
HXLINE( 359)					value = staticValue;
            				}
HXLINE( 360)				return  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->store(value))
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0),value));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 365)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 367)					 ::little::interpreter::InterpTokens _hx_tmp = ::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("External Function Error: ",bb,a4,48,13) + e->details()));
HXLINE( 366)					return  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->ERROR)
            						->setFixed(1,HX_("objectValue",32,9c,e7,a0),_hx_tmp));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 358)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_351_registerInstanceVariable)
HXDLIN( 351)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 352)		::Array< ::String > classPath = onType.split(HX_(".",2e,00,00,00));
HXLINE( 353)		classPath->push(propertyName);
HXLINE( 354)		 ::little::interpreter::memory::ExtTree object = this->memory->externs->createPathFor(this->memory->externs->instanceProperties,classPath);
HXLINE( 356)		object->type = ( (int)(this->memory->getTypeInformation(propertyType)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE( 357)		object->getter =  ::Dynamic(new _hx_Closure_0(_gthis,staticValue,valueGetter));
            	}


HX_DEFINE_DYNAMIC_FUNC6(Plugins_obj,registerInstanceVariable,(void))

void Plugins_obj::registerInstanceFunction(::String propertyName,::String onType,::String documentation, ::Dynamic expectedParameters, ::Dynamic callback,::String returnType){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::little::tools::Plugins,_gthis, ::little::interpreter::InterpTokens,returnTypeToken, ::little::tools::BaseOrderedMap,paramMap, ::Dynamic,callback) HXARGC(2)
            		 ::Dynamic _hx_run( ::little::interpreter::InterpTokens v,int a){
            			HX_STACKFRAME(&_hx_pos_553c3c091ec60400_422_registerInstanceFunction)
HXLINE( 422)			try {
            				HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_0, ::little::tools::Plugins,_gthis,int,a, ::little::interpreter::InterpTokens,v, ::little::tools::BaseOrderedMap,paramMap, ::Dynamic,callback) HXARGC(0)
            				 ::little::interpreter::InterpTokens _hx_run(){
            					HX_STACKFRAME(&_hx_pos_553c3c091ec60400_425_registerInstanceFunction)
HXLINE( 425)					 ::Dynamic callback1 = callback;
HXDLIN( 425)					 ::little::interpreter::InterpTokens v1 = v;
HXDLIN( 425)					int a1 = a;
HXDLIN( 425)					::Array< ::String > _this = ::little::tools::Extensions_obj::toArray(paramMap->keys());
HXDLIN( 425)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 425)					{
HXLINE( 425)						int _g = 0;
HXDLIN( 425)						int _g1 = _this->length;
HXDLIN( 425)						while((_g < _g1)){
HXLINE( 425)							_g = (_g + 1);
HXDLIN( 425)							int i = (_g - 1);
HXDLIN( 425)							{
HXLINE( 425)								::Array< ::String > this1 = ::Array_obj< ::String >::__new(1)->init(0,_hx_array_unsafe_get(_this,i));
HXDLIN( 425)								 ::Dynamic inValue = _gthis->memory->read(this1);
HXDLIN( 425)								result->__unsafe_set(i,inValue);
            							}
            						}
            					}
HXDLIN( 425)					return callback1(v1,a1,result);
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 425)				 ::little::interpreter::InterpTokens _hx_tmp = ::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_0(_gthis,a,v,paramMap,callback)));
HXLINE( 423)				return  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->EXTERN)
            					->setFixed(1,HX_("objectValue",32,9c,e7,a0),::little::interpreter::InterpTokens_obj::FunctionCode(paramMap,::little::interpreter::InterpTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionReturn(_hx_tmp,returnTypeToken)),returnTypeToken))));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 430)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 432)					 ::little::interpreter::InterpTokens _hx_tmp1 = ::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("External Function Error: ",bb,a4,48,13) + e->details()));
HXLINE( 431)					return  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("objectAddress",b5,00,cc,8b),_gthis->memory->constants->ERROR)
            						->setFixed(1,HX_("objectValue",32,9c,e7,a0),_hx_tmp1));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 422)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_393_registerInstanceFunction)
HXDLIN( 393)		 ::little::tools::Plugins _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 394)		::Array< ::Dynamic> params;
HXDLIN( 394)		if (::Std_obj::isOfType(expectedParameters,::hx::ClassOf< ::String >())) {
HXLINE( 395)			 ::Dynamic array = ::little::parser::Parser_obj::parse;
HXLINE( 394)			params = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array(::little::lexer::Lexer_obj::lex(( (::String)(expectedParameters) )))) ));
            		}
            		else {
HXLINE( 394)			params = ( (::Array< ::Dynamic>)(expectedParameters) );
            		}
HXLINE( 398)		 ::little::tools::BaseOrderedMap paramMap = ::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new();
HXLINE( 399)		{
HXLINE( 399)			int _g = 0;
HXDLIN( 399)			while((_g < params->length)){
HXLINE( 399)				 ::little::interpreter::InterpTokens entry = params->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 399)				_g = (_g + 1);
HXLINE( 400)				::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::tools::InterpTokensSimple_obj::SPLIT_LINE_dyn())->init(1,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 400)				::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 400)				{
HXLINE( 400)					int _g1 = 0;
HXDLIN( 400)					int _g2 = _this->length;
HXDLIN( 400)					while((_g1 < _g2)){
HXLINE( 400)						_g1 = (_g1 + 1);
HXDLIN( 400)						int i = (_g1 - 1);
HXDLIN( 400)						{
HXLINE( 400)							::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 400)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 400)				if (result->contains(::Type_obj::enumConstructor(entry).toLowerCase())) {
HXLINE( 400)					continue;
            				}
HXLINE( 401)				switch((int)(entry->_hx_getIndex())){
            					case (int)3: {
HXLINE( 403)						 ::little::interpreter::InterpTokens _g3 = entry->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 403)						 ::little::interpreter::InterpTokens _g4 = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 403)						 ::little::interpreter::InterpTokens _g5 = entry->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 402)						if (::hx::IsNull( _g4 )) {
HXLINE( 402)							 ::little::interpreter::InterpTokens name = _g3;
HXDLIN( 402)							 ::little::tools::BaseOrderedMap paramMap1 = paramMap;
HXDLIN( 402)							::String _hx_tmp;
HXDLIN( 402)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 402)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 402)							{
HXLINE( 402)								int _g6 = 0;
HXDLIN( 402)								int _g7 = _this1->length;
HXDLIN( 402)								while((_g6 < _g7)){
HXLINE( 402)									_g6 = (_g6 + 1);
HXDLIN( 402)									int i1 = (_g6 - 1);
HXDLIN( 402)									{
HXLINE( 402)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 402)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 402)							if (result1->contains(::Type_obj::enumConstructor(name).toLowerCase())) {
HXLINE( 402)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(name)->__get(0)) );
            							}
            							else {
HXLINE( 402)								_hx_tmp = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name),null()))->__get(0)) );
            							}
HXDLIN( 402)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap1,_hx_tmp,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            						}
            						else {
HXLINE( 403)							 ::little::interpreter::InterpTokens type = _g4;
HXDLIN( 403)							 ::little::interpreter::InterpTokens name1 = _g3;
HXDLIN( 403)							 ::little::tools::BaseOrderedMap paramMap2 = paramMap;
HXDLIN( 403)							::String _hx_tmp1;
HXDLIN( 403)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 403)							::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 403)							{
HXLINE( 403)								int _g8 = 0;
HXDLIN( 403)								int _g9 = _this2->length;
HXDLIN( 403)								while((_g8 < _g9)){
HXLINE( 403)									_g8 = (_g8 + 1);
HXDLIN( 403)									int i2 = (_g8 - 1);
HXDLIN( 403)									{
HXLINE( 403)										::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 403)										result2->__unsafe_set(i2,inValue2);
            									}
            								}
            							}
HXDLIN( 403)							if (result2->contains(::Type_obj::enumConstructor(name1).toLowerCase())) {
HXLINE( 403)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(name1)->__get(0)) );
            							}
            							else {
HXLINE( 403)								_hx_tmp1 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name1),null()))->__get(0)) );
            							}
HXDLIN( 403)							::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap2,_hx_tmp1,::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::NullValue_dyn(),type));
            						}
            					}
            					break;
            					case (int)10: {
HXLINE( 404)						::Array< ::Dynamic> assignees = entry->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 404)						 ::little::interpreter::InterpTokens value = entry->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 405)						{
HXLINE( 405)							 ::little::interpreter::InterpTokens _g10 = assignees->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 405)							if ((_g10->_hx_getIndex() == 3)) {
HXLINE( 407)								 ::little::interpreter::InterpTokens _g11 = _g10->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 407)								 ::little::interpreter::InterpTokens _g12 = _g10->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 407)								 ::little::interpreter::InterpTokens _g13 = _g10->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 406)								if (::hx::IsNull( _g12 )) {
HXLINE( 406)									 ::little::interpreter::InterpTokens name2 = _g11;
HXDLIN( 406)									 ::little::tools::BaseOrderedMap paramMap3 = paramMap;
HXDLIN( 406)									::String _hx_tmp2;
HXDLIN( 406)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 406)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 406)									{
HXLINE( 406)										int _g14 = 0;
HXDLIN( 406)										int _g15 = _this3->length;
HXDLIN( 406)										while((_g14 < _g15)){
HXLINE( 406)											_g14 = (_g14 + 1);
HXDLIN( 406)											int i3 = (_g14 - 1);
HXDLIN( 406)											{
HXLINE( 406)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 406)												result3->__unsafe_set(i3,inValue3);
            											}
            										}
            									}
HXDLIN( 406)									if (result3->contains(::Type_obj::enumConstructor(name2).toLowerCase())) {
HXLINE( 406)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(name2)->__get(0)) );
            									}
            									else {
HXLINE( 406)										_hx_tmp2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name2),null()))->__get(0)) );
            									}
HXDLIN( 406)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap3,_hx_tmp2,::little::interpreter::InterpTokens_obj::TypeCast(value,::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC)));
            								}
            								else {
HXLINE( 407)									 ::little::interpreter::InterpTokens type1 = _g12;
HXDLIN( 407)									 ::little::interpreter::InterpTokens name3 = _g11;
HXDLIN( 407)									 ::little::tools::BaseOrderedMap paramMap4 = paramMap;
HXDLIN( 407)									::String _hx_tmp3;
HXDLIN( 407)									::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 407)									::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 407)									{
HXLINE( 407)										int _g16 = 0;
HXDLIN( 407)										int _g17 = _this4->length;
HXDLIN( 407)										while((_g16 < _g17)){
HXLINE( 407)											_g16 = (_g16 + 1);
HXDLIN( 407)											int i4 = (_g16 - 1);
HXDLIN( 407)											{
HXLINE( 407)												::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 407)												result4->__unsafe_set(i4,inValue4);
            											}
            										}
            									}
HXDLIN( 407)									if (result4->contains(::Type_obj::enumConstructor(name3).toLowerCase())) {
HXLINE( 407)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(name3)->__get(0)) );
            									}
            									else {
HXLINE( 407)										_hx_tmp3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,name3),null()))->__get(0)) );
            									}
HXDLIN( 407)									::little::tools::_OrderedMap::OrderedMap_Impl__obj::set(paramMap4,_hx_tmp3,::little::interpreter::InterpTokens_obj::TypeCast(value,type1));
            								}
            							}
            						}
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE( 415)		::Array< ::String > classPath = onType.split(HX_(".",2e,00,00,00));
HXLINE( 416)		classPath->push(propertyName);
HXLINE( 417)		 ::little::interpreter::memory::ExtTree object = this->memory->externs->createPathFor(this->memory->externs->instanceProperties,classPath);
HXLINE( 418)		 ::Dynamic array1 = ::little::parser::Parser_obj::parse;
HXDLIN( 418)		 ::little::interpreter::InterpTokens returnTypeToken = ::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array1(::little::lexer::Lexer_obj::lex(returnType))) ))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 420)		object->type = ( (int)(this->memory->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXLINE( 421)		object->getter =  ::Dynamic(new _hx_Closure_1(_gthis,returnTypeToken,paramMap,callback));
            	}


HX_DEFINE_DYNAMIC_FUNC6(Plugins_obj,registerInstanceFunction,(void))

void Plugins_obj::registerOperator(::String symbol, ::Dynamic info){
            	HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_457_registerOperator)
HXDLIN( 457)		bool _hx_tmp;
HXDLIN( 457)		if (::hx::IsNotNull( info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic) )) {
HXDLIN( 457)			_hx_tmp = ::hx::IsPointerEq( info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn() );
            		}
            		else {
HXDLIN( 457)			_hx_tmp = true;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 458)			bool _hx_tmp1;
HXDLIN( 458)			if (::hx::IsNull( info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic) )) {
HXLINE( 458)				_hx_tmp1 = ::hx::IsNotNull( info->__Field(HX_("singleSidedOperatorCallback",ee,de,f9,ae),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 458)				_hx_tmp1 = false;
            			}
HXDLIN( 458)			if (_hx_tmp1) {
HXLINE( 459)				 ::little::interpreter::memory::OperatorType tmp = info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic);
HXDLIN( 459)				 ::little::interpreter::memory::OperatorType _hx_tmp2;
HXDLIN( 459)				if (::hx::IsNotNull( tmp )) {
HXLINE( 459)					_hx_tmp2 = tmp;
            				}
            				else {
HXLINE( 459)					_hx_tmp2 = ::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn();
            				}
HXDLIN( 459)				::String _hx_tmp3 = ((HX_("Incorrect callback given for operator type ",84,38,34,f4) + ::Std_obj::string(_hx_tmp2)) + HX_(" - `singleSidedOperatorCallback` was given, when `callback` was expected",67,57,96,ad));
HXDLIN( 459)				HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("callback",c5,99,06,7f),_hx_tmp3,null(),::hx::SourceInfo(HX_("src/little/tools/Plugins.hx",40,0c,da,4a),459,HX_("little.tools.Plugins",75,a3,70,b1),HX_("registerOperator",27,19,36,43))));
            			}
            			else {
HXLINE( 460)				if (::hx::IsNull( info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic) )) {
HXLINE( 461)					 ::little::interpreter::memory::OperatorType tmp1 = info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic);
HXDLIN( 461)					 ::little::interpreter::memory::OperatorType _hx_tmp4;
HXDLIN( 461)					if (::hx::IsNotNull( tmp1 )) {
HXLINE( 461)						_hx_tmp4 = tmp1;
            					}
            					else {
HXLINE( 461)						_hx_tmp4 = ::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn();
            					}
HXDLIN( 461)					::String _hx_tmp5 = ((HX_("No callback given for operator type ",e0,18,60,17) + ::Std_obj::string(_hx_tmp4)) + HX_(" (`callback` is null)",29,62,ed,02));
HXDLIN( 461)					HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("callback",c5,99,06,7f),_hx_tmp5,null(),::hx::SourceInfo(HX_("src/little/tools/Plugins.hx",40,0c,da,4a),461,HX_("little.tools.Plugins",75,a3,70,b1),HX_("registerOperator",27,19,36,43))));
            				}
            			}
HXLINE( 463)			 ::Dynamic callbackFunc;
HXLINE( 466)			bool _hx_tmp6;
HXDLIN( 466)			bool _hx_tmp7;
HXDLIN( 466)			if (::hx::IsNotNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 466)				_hx_tmp7 = ::hx::IsNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 466)				_hx_tmp7 = false;
            			}
HXDLIN( 466)			if (_hx_tmp7) {
HXLINE( 466)				_hx_tmp6 = ::hx::IsNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 466)				_hx_tmp6 = false;
            			}
HXDLIN( 466)			if (_hx_tmp6) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,info,::String,symbol) HXARGC(2)
            				 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            					HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_467_registerOperator)
HXLINE( 468)					::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 468)					::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 469)					if (!(( (::Array< ::String >)(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)) )->contains(lType))) {
HXLINE( 470)						 ::little::interpreter::Runtime callbackFunc = ::little::Little_obj::runtime;
HXDLIN( 470)						::String callbackFunc1 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 470)						::String callbackFunc2;
HXDLIN( 470)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 470)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 470)						{
HXLINE( 470)							int _g = 0;
HXDLIN( 470)							int _g1 = _this->length;
HXDLIN( 470)							while((_g < _g1)){
HXLINE( 470)								_g = (_g + 1);
HXDLIN( 470)								int i = (_g - 1);
HXDLIN( 470)								{
HXLINE( 470)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 470)									result->__unsafe_set(i,inValue);
            								}
            							}
            						}
HXDLIN( 470)						if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 470)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            						}
            						else {
HXLINE( 470)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            						}
HXDLIN( 470)						::String callbackFunc3 = ((((((callbackFunc1 + callbackFunc2) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 470)						::String callbackFunc4;
HXDLIN( 470)						::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 470)						::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 470)						{
HXLINE( 470)							int _g2 = 0;
HXDLIN( 470)							int _g3 = _this1->length;
HXDLIN( 470)							while((_g2 < _g3)){
HXLINE( 470)								_g2 = (_g2 + 1);
HXDLIN( 470)								int i1 = (_g2 - 1);
HXDLIN( 470)								{
HXLINE( 470)									::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 470)									result1->__unsafe_set(i1,inValue1);
            								}
            							}
            						}
HXDLIN( 470)						if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 470)							callbackFunc4 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            						}
            						else {
HXLINE( 470)							callbackFunc4 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            						}
HXDLIN( 470)						return callbackFunc->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((callbackFunc3 + callbackFunc4) + HX_(") - Left operand cannot be of type ",63,39,70,8d)) + lType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            					}
HXLINE( 473)					return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 467)				callbackFunc =  ::Dynamic(new _hx_Closure_0(info,symbol));
            			}
            			else {
HXLINE( 475)				bool _hx_tmp8;
HXDLIN( 475)				bool _hx_tmp9;
HXDLIN( 475)				if (::hx::IsNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 475)					_hx_tmp9 = ::hx::IsNotNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 475)					_hx_tmp9 = false;
            				}
HXDLIN( 475)				if (_hx_tmp9) {
HXLINE( 475)					_hx_tmp8 = ::hx::IsNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 475)					_hx_tmp8 = false;
            				}
HXDLIN( 475)				if (_hx_tmp8) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,info,::String,symbol) HXARGC(2)
            					 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            						HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_476_registerOperator)
HXLINE( 477)						::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 477)						::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 478)						if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(rType))) {
HXLINE( 479)							 ::little::interpreter::Runtime callbackFunc = ::little::Little_obj::runtime;
HXDLIN( 479)							::String callbackFunc1 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 479)							::String callbackFunc2;
HXDLIN( 479)							::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 479)							::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 479)							{
HXLINE( 479)								int _g = 0;
HXDLIN( 479)								int _g1 = _this->length;
HXDLIN( 479)								while((_g < _g1)){
HXLINE( 479)									_g = (_g + 1);
HXDLIN( 479)									int i = (_g - 1);
HXDLIN( 479)									{
HXLINE( 479)										::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 479)										result->__unsafe_set(i,inValue);
            									}
            								}
            							}
HXDLIN( 479)							if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 479)								callbackFunc2 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            							}
            							else {
HXLINE( 479)								callbackFunc2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            							}
HXDLIN( 479)							::String callbackFunc3 = ((((((callbackFunc1 + callbackFunc2) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 479)							::String callbackFunc4;
HXDLIN( 479)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 479)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 479)							{
HXLINE( 479)								int _g2 = 0;
HXDLIN( 479)								int _g3 = _this1->length;
HXDLIN( 479)								while((_g2 < _g3)){
HXLINE( 479)									_g2 = (_g2 + 1);
HXDLIN( 479)									int i1 = (_g2 - 1);
HXDLIN( 479)									{
HXLINE( 479)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 479)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 479)							if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 479)								callbackFunc4 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            							}
            							else {
HXLINE( 479)								callbackFunc4 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            							}
HXDLIN( 479)							return callbackFunc->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((callbackFunc3 + callbackFunc4) + HX_(") - Right operand cannot be of type ",82,88,a7,aa)) + rType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            						}
HXLINE( 482)						return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            					}
            					HX_END_LOCAL_FUNC2(return)

HXLINE( 476)					callbackFunc =  ::Dynamic(new _hx_Closure_1(info,symbol));
            				}
            				else {
HXLINE( 484)					bool _hx_tmp10;
HXDLIN( 484)					bool _hx_tmp11;
HXDLIN( 484)					if (::hx::IsNotNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 484)						_hx_tmp11 = ::hx::IsNotNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 484)						_hx_tmp11 = false;
            					}
HXDLIN( 484)					if (_hx_tmp11) {
HXLINE( 484)						_hx_tmp10 = ::hx::IsNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 484)						_hx_tmp10 = false;
            					}
HXDLIN( 484)					if (_hx_tmp10) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,info,::String,symbol) HXARGC(2)
            						 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            							HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_485_registerOperator)
HXLINE( 486)							::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 486)							::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 487)							if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(rType))) {
HXLINE( 488)								 ::little::interpreter::Runtime callbackFunc = ::little::Little_obj::runtime;
HXDLIN( 488)								::String callbackFunc1 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 488)								::String callbackFunc2;
HXDLIN( 488)								::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 488)								::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 488)								{
HXLINE( 488)									int _g = 0;
HXDLIN( 488)									int _g1 = _this->length;
HXDLIN( 488)									while((_g < _g1)){
HXLINE( 488)										_g = (_g + 1);
HXDLIN( 488)										int i = (_g - 1);
HXDLIN( 488)										{
HXLINE( 488)											::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 488)											result->__unsafe_set(i,inValue);
            										}
            									}
            								}
HXDLIN( 488)								if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 488)									callbackFunc2 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            								}
            								else {
HXLINE( 488)									callbackFunc2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            								}
HXDLIN( 488)								::String callbackFunc3 = ((((((callbackFunc1 + callbackFunc2) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 488)								::String callbackFunc4;
HXDLIN( 488)								::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 488)								::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 488)								{
HXLINE( 488)									int _g2 = 0;
HXDLIN( 488)									int _g3 = _this1->length;
HXDLIN( 488)									while((_g2 < _g3)){
HXLINE( 488)										_g2 = (_g2 + 1);
HXDLIN( 488)										int i1 = (_g2 - 1);
HXDLIN( 488)										{
HXLINE( 488)											::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 488)											result1->__unsafe_set(i1,inValue1);
            										}
            									}
            								}
HXDLIN( 488)								if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 488)									callbackFunc4 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            								}
            								else {
HXLINE( 488)									callbackFunc4 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            								}
HXDLIN( 488)								return callbackFunc->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((callbackFunc3 + callbackFunc4) + HX_(") - Right operand cannot be of type ",82,88,a7,aa)) + rType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            							}
HXLINE( 491)							if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(lType))) {
HXLINE( 492)								 ::little::interpreter::Runtime callbackFunc5 = ::little::Little_obj::runtime;
HXDLIN( 492)								::String callbackFunc6 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 492)								::String callbackFunc7;
HXDLIN( 492)								::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 492)								::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 492)								{
HXLINE( 492)									int _g4 = 0;
HXDLIN( 492)									int _g5 = _this2->length;
HXDLIN( 492)									while((_g4 < _g5)){
HXLINE( 492)										_g4 = (_g4 + 1);
HXDLIN( 492)										int i2 = (_g4 - 1);
HXDLIN( 492)										{
HXLINE( 492)											::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 492)											result2->__unsafe_set(i2,inValue2);
            										}
            									}
            								}
HXDLIN( 492)								if (result2->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 492)									callbackFunc7 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            								}
            								else {
HXLINE( 492)									callbackFunc7 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            								}
HXDLIN( 492)								::String callbackFunc8 = ((((((callbackFunc6 + callbackFunc7) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 492)								::String callbackFunc9;
HXDLIN( 492)								::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 492)								::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 492)								{
HXLINE( 492)									int _g6 = 0;
HXDLIN( 492)									int _g7 = _this3->length;
HXDLIN( 492)									while((_g6 < _g7)){
HXLINE( 492)										_g6 = (_g6 + 1);
HXDLIN( 492)										int i3 = (_g6 - 1);
HXDLIN( 492)										{
HXLINE( 492)											::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 492)											result3->__unsafe_set(i3,inValue3);
            										}
            									}
            								}
HXDLIN( 492)								if (result3->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 492)									callbackFunc9 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            								}
            								else {
HXLINE( 492)									callbackFunc9 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            								}
HXDLIN( 492)								return callbackFunc5->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((callbackFunc8 + callbackFunc9) + HX_(") - Left operand cannot be of type ",63,39,70,8d)) + lType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            							}
HXLINE( 495)							return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE( 485)						callbackFunc =  ::Dynamic(new _hx_Closure_2(info,symbol));
            					}
            					else {
HXLINE( 497)						bool _hx_tmp12;
HXDLIN( 497)						bool _hx_tmp13;
HXDLIN( 497)						if (::hx::IsNotNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 497)							_hx_tmp13 = ::hx::IsNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 497)							_hx_tmp13 = false;
            						}
HXDLIN( 497)						if (_hx_tmp13) {
HXLINE( 497)							_hx_tmp12 = ::hx::IsNotNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 497)							_hx_tmp12 = false;
            						}
HXDLIN( 497)						if (_hx_tmp12) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,info,::String,symbol) HXARGC(2)
            							 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            								HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_498_registerOperator)
HXLINE( 499)								::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 499)								::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 500)								bool callbackFunc;
HXDLIN( 500)								if (!(( (::Array< ::String >)(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)) )->contains(lType))) {
HXLINE( 500)									callbackFunc = !(::little::tools::Plugins_obj::containsCombo(( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) ),lType,rType));
            								}
            								else {
HXLINE( 500)									callbackFunc = false;
            								}
HXDLIN( 500)								if (callbackFunc) {
HXLINE( 501)									 ::little::interpreter::Runtime callbackFunc1 = ::little::Little_obj::runtime;
HXDLIN( 501)									::String callbackFunc2 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 501)									::String callbackFunc3;
HXDLIN( 501)									::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 501)									::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 501)									{
HXLINE( 501)										int _g = 0;
HXDLIN( 501)										int _g1 = _this->length;
HXDLIN( 501)										while((_g < _g1)){
HXLINE( 501)											_g = (_g + 1);
HXDLIN( 501)											int i = (_g - 1);
HXDLIN( 501)											{
HXLINE( 501)												::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 501)												result->__unsafe_set(i,inValue);
            											}
            										}
            									}
HXDLIN( 501)									if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 501)										callbackFunc3 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            									}
            									else {
HXLINE( 501)										callbackFunc3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            									}
HXDLIN( 501)									::String callbackFunc4 = ((((((callbackFunc2 + callbackFunc3) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 501)									::String callbackFunc5;
HXDLIN( 501)									::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 501)									::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 501)									{
HXLINE( 501)										int _g2 = 0;
HXDLIN( 501)										int _g3 = _this1->length;
HXDLIN( 501)										while((_g2 < _g3)){
HXLINE( 501)											_g2 = (_g2 + 1);
HXDLIN( 501)											int i1 = (_g2 - 1);
HXDLIN( 501)											{
HXLINE( 501)												::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 501)												result1->__unsafe_set(i1,inValue1);
            											}
            										}
            									}
HXDLIN( 501)									if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 501)										callbackFunc5 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            									}
            									else {
HXLINE( 501)										callbackFunc5 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            									}
HXDLIN( 501)									::String callbackFunc6 = ((((((((callbackFunc4 + callbackFunc5) + HX_(") - Right operand cannot be of type ",82,88,a7,aa)) + rType) + HX_(" while left operand is of type ",52,16,04,c3)) + lType) + HX_(" (accepted types for left operand: ",a5,ea,9b,ad)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)))) + HX_(", accepted type combinations: ",4b,51,f7,02));
HXDLIN( 501)									::Array< ::Dynamic> _this2 = ( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) );
HXDLIN( 501)									::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 501)									{
HXLINE( 501)										int _g4 = 0;
HXDLIN( 501)										int _g5 = _this2->length;
HXDLIN( 501)										while((_g4 < _g5)){
HXLINE( 501)											_g4 = (_g4 + 1);
HXDLIN( 501)											int i2 = (_g4 - 1);
HXDLIN( 501)											{
HXLINE( 501)												 ::Dynamic object = _hx_array_unsafe_get(_this2,i2);
HXDLIN( 501)												result2->__unsafe_set(i2, ::Dynamic((((((HX_("",00,00,00,00) + object->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic)) + HX_(" ",20,00,00,00)) + symbol) + HX_(" ",20,00,00,00)) + object->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic))));
            											}
            										}
            									}
HXDLIN( 501)									return callbackFunc1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((callbackFunc6 + ::Std_obj::string(result2)) + HX_(")",29,00,00,00))),null());
            								}
HXLINE( 504)								return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            							}
            							HX_END_LOCAL_FUNC2(return)

HXLINE( 498)							callbackFunc =  ::Dynamic(new _hx_Closure_3(info,symbol));
            						}
            						else {
HXLINE( 506)							bool _hx_tmp14;
HXDLIN( 506)							bool _hx_tmp15;
HXDLIN( 506)							if (::hx::IsNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 506)								_hx_tmp15 = ::hx::IsNotNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 506)								_hx_tmp15 = false;
            							}
HXDLIN( 506)							if (_hx_tmp15) {
HXLINE( 506)								_hx_tmp14 = ::hx::IsNotNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 506)								_hx_tmp14 = false;
            							}
HXDLIN( 506)							if (_hx_tmp14) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,info,::String,symbol) HXARGC(2)
            								 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            									HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_507_registerOperator)
HXLINE( 508)									::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 508)									::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 509)									bool callbackFunc;
HXDLIN( 509)									if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(rType))) {
HXLINE( 509)										callbackFunc = !(::little::tools::Plugins_obj::containsCombo(( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) ),lType,rType));
            									}
            									else {
HXLINE( 509)										callbackFunc = false;
            									}
HXDLIN( 509)									if (callbackFunc) {
HXLINE( 510)										 ::little::interpreter::Runtime callbackFunc1 = ::little::Little_obj::runtime;
HXDLIN( 510)										::String callbackFunc2 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 510)										::String callbackFunc3;
HXDLIN( 510)										::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 510)										::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 510)										{
HXLINE( 510)											int _g = 0;
HXDLIN( 510)											int _g1 = _this->length;
HXDLIN( 510)											while((_g < _g1)){
HXLINE( 510)												_g = (_g + 1);
HXDLIN( 510)												int i = (_g - 1);
HXDLIN( 510)												{
HXLINE( 510)													::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 510)													result->__unsafe_set(i,inValue);
            												}
            											}
            										}
HXDLIN( 510)										if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 510)											callbackFunc3 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            										}
            										else {
HXLINE( 510)											callbackFunc3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            										}
HXDLIN( 510)										::String callbackFunc4 = ((((((callbackFunc2 + callbackFunc3) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 510)										::String callbackFunc5;
HXDLIN( 510)										::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 510)										::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 510)										{
HXLINE( 510)											int _g2 = 0;
HXDLIN( 510)											int _g3 = _this1->length;
HXDLIN( 510)											while((_g2 < _g3)){
HXLINE( 510)												_g2 = (_g2 + 1);
HXDLIN( 510)												int i1 = (_g2 - 1);
HXDLIN( 510)												{
HXLINE( 510)													::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 510)													result1->__unsafe_set(i1,inValue1);
            												}
            											}
            										}
HXDLIN( 510)										if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 510)											callbackFunc5 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            										}
            										else {
HXLINE( 510)											callbackFunc5 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            										}
HXDLIN( 510)										::String callbackFunc6 = ((((((((callbackFunc4 + callbackFunc5) + HX_(") - Right operand cannot be of type ",82,88,a7,aa)) + rType) + HX_(" while left operand is of type ",52,16,04,c3)) + lType) + HX_(" (accepted types for right operand: ",3c,25,6e,c2)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)))) + HX_(", accepted type combinations: ",4b,51,f7,02));
HXDLIN( 510)										::Array< ::Dynamic> _this2 = ( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) );
HXDLIN( 510)										::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 510)										{
HXLINE( 510)											int _g4 = 0;
HXDLIN( 510)											int _g5 = _this2->length;
HXDLIN( 510)											while((_g4 < _g5)){
HXLINE( 510)												_g4 = (_g4 + 1);
HXDLIN( 510)												int i2 = (_g4 - 1);
HXDLIN( 510)												{
HXLINE( 510)													 ::Dynamic object = _hx_array_unsafe_get(_this2,i2);
HXDLIN( 510)													result2->__unsafe_set(i2, ::Dynamic((((((HX_("",00,00,00,00) + object->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic)) + HX_(" ",20,00,00,00)) + symbol) + HX_(" ",20,00,00,00)) + object->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic))));
            												}
            											}
            										}
HXDLIN( 510)										return callbackFunc1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((callbackFunc6 + ::Std_obj::string(result2)) + HX_(")",29,00,00,00))),null());
            									}
HXLINE( 513)									return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            								}
            								HX_END_LOCAL_FUNC2(return)

HXLINE( 507)								callbackFunc =  ::Dynamic(new _hx_Closure_4(info,symbol));
            							}
            							else {
HXLINE( 515)								bool _hx_tmp16;
HXDLIN( 515)								bool _hx_tmp17;
HXDLIN( 515)								if (::hx::IsNotNull( info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic) )) {
HXLINE( 515)									_hx_tmp17 = ::hx::IsNotNull( info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic) );
            								}
            								else {
HXLINE( 515)									_hx_tmp17 = false;
            								}
HXDLIN( 515)								if (_hx_tmp17) {
HXLINE( 515)									_hx_tmp16 = ::hx::IsNotNull( info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic) );
            								}
            								else {
HXLINE( 515)									_hx_tmp16 = false;
            								}
HXDLIN( 515)								if (_hx_tmp16) {
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,info,::String,symbol) HXARGC(2)
            									 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs, ::little::interpreter::InterpTokens rhs){
            										HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_516_registerOperator)
HXLINE( 517)										::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXDLIN( 517)										::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 518)										bool callbackFunc;
HXDLIN( 518)										if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(rType))) {
HXLINE( 518)											callbackFunc = !(::little::tools::Plugins_obj::containsCombo(( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) ),lType,rType));
            										}
            										else {
HXLINE( 518)											callbackFunc = false;
            										}
HXDLIN( 518)										if (callbackFunc) {
HXLINE( 519)											 ::little::interpreter::Runtime callbackFunc1 = ::little::Little_obj::runtime;
HXDLIN( 519)											::String callbackFunc2 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 519)											::String callbackFunc3;
HXDLIN( 519)											::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 519)											::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 519)											{
HXLINE( 519)												int _g = 0;
HXDLIN( 519)												int _g1 = _this->length;
HXDLIN( 519)												while((_g < _g1)){
HXLINE( 519)													_g = (_g + 1);
HXDLIN( 519)													int i = (_g - 1);
HXDLIN( 519)													{
HXLINE( 519)														::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 519)														result->__unsafe_set(i,inValue);
            													}
            												}
            											}
HXDLIN( 519)											if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 519)												callbackFunc3 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            											}
            											else {
HXLINE( 519)												callbackFunc3 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            											}
HXDLIN( 519)											::String callbackFunc4 = ((((((callbackFunc2 + callbackFunc3) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 519)											::String callbackFunc5;
HXDLIN( 519)											::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 519)											::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 519)											{
HXLINE( 519)												int _g2 = 0;
HXDLIN( 519)												int _g3 = _this1->length;
HXDLIN( 519)												while((_g2 < _g3)){
HXLINE( 519)													_g2 = (_g2 + 1);
HXDLIN( 519)													int i1 = (_g2 - 1);
HXDLIN( 519)													{
HXLINE( 519)														::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 519)														result1->__unsafe_set(i1,inValue1);
            													}
            												}
            											}
HXDLIN( 519)											if (result1->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 519)												callbackFunc5 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            											}
            											else {
HXLINE( 519)												callbackFunc5 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            											}
HXDLIN( 519)											::String callbackFunc6 = ((((((callbackFunc4 + callbackFunc5) + HX_(") - Right operand cannot be of type ",82,88,a7,aa)) + rType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)))) + HX_(", accepted type combinations: ",4b,51,f7,02));
HXDLIN( 519)											::Array< ::Dynamic> _this2 = ( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) );
HXDLIN( 519)											::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 519)											{
HXLINE( 519)												int _g4 = 0;
HXDLIN( 519)												int _g5 = _this2->length;
HXDLIN( 519)												while((_g4 < _g5)){
HXLINE( 519)													_g4 = (_g4 + 1);
HXDLIN( 519)													int i2 = (_g4 - 1);
HXDLIN( 519)													{
HXLINE( 519)														 ::Dynamic object = _hx_array_unsafe_get(_this2,i2);
HXDLIN( 519)														result2->__unsafe_set(i2, ::Dynamic((((((HX_("",00,00,00,00) + object->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic)) + HX_(" ",20,00,00,00)) + symbol) + HX_(" ",20,00,00,00)) + object->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic))));
            													}
            												}
            											}
HXDLIN( 519)											return callbackFunc1->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((callbackFunc6 + ::Std_obj::string(result2)) + HX_(")",29,00,00,00))),null());
            										}
HXLINE( 522)										bool callbackFunc7;
HXDLIN( 522)										if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(lType))) {
HXLINE( 522)											callbackFunc7 = !(::little::tools::Plugins_obj::containsCombo(( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) ),lType,rType));
            										}
            										else {
HXLINE( 522)											callbackFunc7 = false;
            										}
HXDLIN( 522)										if (callbackFunc7) {
HXLINE( 523)											 ::little::interpreter::Runtime callbackFunc8 = ::little::Little_obj::runtime;
HXDLIN( 523)											::String callbackFunc9 = ((HX_("Cannot preform ",f6,5b,1b,4c) + lType) + HX_("(",28,00,00,00));
HXDLIN( 523)											::String callbackFunc10;
HXDLIN( 523)											::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 523)											::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 523)											{
HXLINE( 523)												int _g6 = 0;
HXDLIN( 523)												int _g7 = _this3->length;
HXDLIN( 523)												while((_g6 < _g7)){
HXLINE( 523)													_g6 = (_g6 + 1);
HXDLIN( 523)													int i3 = (_g6 - 1);
HXDLIN( 523)													{
HXLINE( 523)														::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 523)														result3->__unsafe_set(i3,inValue2);
            													}
            												}
            											}
HXDLIN( 523)											if (result3->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 523)												callbackFunc10 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            											}
            											else {
HXLINE( 523)												callbackFunc10 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            											}
HXDLIN( 523)											::String callbackFunc11 = ((((((callbackFunc9 + callbackFunc10) + HX_(") ",d7,23,00,00)) + symbol) + HX_(" ",20,00,00,00)) + rType) + HX_("(",28,00,00,00));
HXDLIN( 523)											::String callbackFunc12;
HXDLIN( 523)											::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 523)											::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 523)											{
HXLINE( 523)												int _g8 = 0;
HXDLIN( 523)												int _g9 = _this4->length;
HXDLIN( 523)												while((_g8 < _g9)){
HXLINE( 523)													_g8 = (_g8 + 1);
HXDLIN( 523)													int i4 = (_g8 - 1);
HXDLIN( 523)													{
HXLINE( 523)														::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 523)														result4->__unsafe_set(i4,inValue3);
            													}
            												}
            											}
HXDLIN( 523)											if (result4->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 523)												callbackFunc12 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            											}
            											else {
HXLINE( 523)												callbackFunc12 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            											}
HXDLIN( 523)											::String callbackFunc13 = ((((((callbackFunc11 + callbackFunc12) + HX_(") - Left operand cannot be of type ",63,39,70,8d)) + lType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)))) + HX_(", accepted type combinations: ",4b,51,f7,02));
HXDLIN( 523)											::Array< ::Dynamic> _this5 = ( (::Array< ::Dynamic>)(info->__Field(HX_("allowedTypeCombos",07,42,33,d4),::hx::paccDynamic)) );
HXDLIN( 523)											::Array< ::String > result5 = ::Array_obj< ::String >::__new(_this5->length);
HXDLIN( 523)											{
HXLINE( 523)												int _g10 = 0;
HXDLIN( 523)												int _g11 = _this5->length;
HXDLIN( 523)												while((_g10 < _g11)){
HXLINE( 523)													_g10 = (_g10 + 1);
HXDLIN( 523)													int i5 = (_g10 - 1);
HXDLIN( 523)													{
HXLINE( 523)														 ::Dynamic object1 = _hx_array_unsafe_get(_this5,i5);
HXDLIN( 523)														result5->__unsafe_set(i5, ::Dynamic((((((HX_("",00,00,00,00) + object1->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic)) + HX_(" ",20,00,00,00)) + symbol) + HX_(" ",20,00,00,00)) + object1->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic))));
            													}
            												}
            											}
HXDLIN( 523)											return callbackFunc8->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((callbackFunc13 + ::Std_obj::string(result5)) + HX_(")",29,00,00,00))),null());
            										}
HXLINE( 526)										return info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic)(lhs,rhs);
            									}
            									HX_END_LOCAL_FUNC2(return)

HXLINE( 516)									callbackFunc =  ::Dynamic(new _hx_Closure_5(info,symbol));
            								}
            								else {
HXLINE( 528)									callbackFunc = info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 530)			::little::Little_obj::memory->operators->add(symbol,::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn(),( (::String)(info->__Field(HX_("priority",64,7b,3e,bb),::hx::paccDynamic)) ),callbackFunc);
            		}
            		else {
HXLINE( 532)			bool _hx_tmp18;
HXDLIN( 532)			if (::hx::IsNull( info->__Field(HX_("singleSidedOperatorCallback",ee,de,f9,ae),::hx::paccDynamic) )) {
HXLINE( 532)				_hx_tmp18 = ::hx::IsNotNull( info->__Field(HX_("callback",c5,99,06,7f),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 532)				_hx_tmp18 = false;
            			}
HXDLIN( 532)			if (_hx_tmp18) {
HXLINE( 533)				::String _hx_tmp19 = ((HX_("Incorrect callback given for operator type ",84,38,34,f4) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic)))) + HX_(" - `callback` was given, when `singleSidedOperatorCallback` was expected",db,1b,65,d4));
HXDLIN( 533)				HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("singleSidedOperatorCallback",ee,de,f9,ae),_hx_tmp19,null(),::hx::SourceInfo(HX_("src/little/tools/Plugins.hx",40,0c,da,4a),533,HX_("little.tools.Plugins",75,a3,70,b1),HX_("registerOperator",27,19,36,43))));
            			}
            			else {
HXLINE( 534)				if (::hx::IsNull( info->__Field(HX_("singleSidedOperatorCallback",ee,de,f9,ae),::hx::paccDynamic) )) {
HXLINE( 535)					 ::little::interpreter::memory::OperatorType tmp2 = info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic);
HXDLIN( 535)					 ::little::interpreter::memory::OperatorType _hx_tmp20;
HXDLIN( 535)					if (::hx::IsNotNull( tmp2 )) {
HXLINE( 535)						_hx_tmp20 = tmp2;
            					}
            					else {
HXLINE( 535)						_hx_tmp20 = ::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn();
            					}
HXDLIN( 535)					::String _hx_tmp21 = ((HX_("No callback given for operator type ",e0,18,60,17) + ::Std_obj::string(_hx_tmp20)) + HX_(" (`singleSidedOperatorCallback` is null)",e2,08,9d,8f));
HXDLIN( 535)					HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("singleSidedOperatorCallback",ee,de,f9,ae),_hx_tmp21,null(),::hx::SourceInfo(HX_("src/little/tools/Plugins.hx",40,0c,da,4a),535,HX_("little.tools.Plugins",75,a3,70,b1),HX_("registerOperator",27,19,36,43))));
            				}
            			}
HXLINE( 537)			 ::Dynamic callbackFunc1;
HXLINE( 539)			if (::hx::IsPointerEq( info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_ONLY_dyn() )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::Dynamic,info,::String,symbol) HXARGC(1)
            				 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens lhs){
            					HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_540_registerOperator)
HXLINE( 541)					::String lType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(lhs,null()));
HXLINE( 542)					if (!(( (::Array< ::String >)(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)) )->contains(lType))) {
HXLINE( 543)						 ::little::interpreter::Runtime callbackFunc = ::little::Little_obj::runtime;
HXDLIN( 543)						::String callbackFunc1 = ((HX_("Cannot perform ",fc,04,28,62) + lType) + HX_("(",28,00,00,00));
HXDLIN( 543)						::String callbackFunc2;
HXDLIN( 543)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 543)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 543)						{
HXLINE( 543)							int _g = 0;
HXDLIN( 543)							int _g1 = _this->length;
HXDLIN( 543)							while((_g < _g1)){
HXLINE( 543)								_g = (_g + 1);
HXDLIN( 543)								int i = (_g - 1);
HXDLIN( 543)								{
HXLINE( 543)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 543)									result->__unsafe_set(i,inValue);
            								}
            							}
            						}
HXDLIN( 543)						if (result->contains(::Type_obj::enumConstructor(lhs).toLowerCase())) {
HXLINE( 543)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(lhs)->__get(0)) );
            						}
            						else {
HXLINE( 543)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,lhs),null()))->__get(0)) );
            						}
HXDLIN( 543)						::String callbackFunc3 = ((((((callbackFunc1 + callbackFunc2) + HX_(")",29,00,00,00)) + symbol) + HX_(" - Operand cannot be of type ",07,93,7f,0c)) + lType) + HX_(" (accepted types: ",ae,5f,86,32));
HXDLIN( 543)						return callbackFunc->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((callbackFunc3 + ::Std_obj::string( ::Dynamic(info->__Field(HX_("lhsAllowedTypes",48,af,a4,93),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            					}
HXLINE( 546)					return info->__Field(HX_("singleSidedOperatorCallback",ee,de,f9,ae),::hx::paccDynamic)(lhs);
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 540)				callbackFunc1 =  ::Dynamic(new _hx_Closure_6(info,symbol));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::Dynamic,info,::String,symbol) HXARGC(1)
            				 ::little::interpreter::InterpTokens _hx_run( ::little::interpreter::InterpTokens rhs){
            					HX_GC_STACKFRAME(&_hx_pos_553c3c091ec60400_549_registerOperator)
HXLINE( 550)					::String rType = ::little::tools::Extensions_obj::type(::little::interpreter::Interpreter_obj::evaluate(rhs,null()));
HXLINE( 551)					if (!(( (::Array< ::String >)(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)) )->contains(rType))) {
HXLINE( 552)						 ::little::interpreter::Runtime callbackFunc = ::little::Little_obj::runtime;
HXDLIN( 552)						::String callbackFunc1 = (((HX_("Cannot perform ",fc,04,28,62) + symbol) + rType) + HX_("(",28,00,00,00));
HXDLIN( 552)						::String callbackFunc2;
HXDLIN( 552)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::IDENTIFIER_dyn())->copy();
HXDLIN( 552)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 552)						{
HXLINE( 552)							int _g = 0;
HXDLIN( 552)							int _g1 = _this->length;
HXDLIN( 552)							while((_g < _g1)){
HXLINE( 552)								_g = (_g + 1);
HXDLIN( 552)								int i = (_g - 1);
HXDLIN( 552)								{
HXLINE( 552)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 552)									result->__unsafe_set(i,inValue);
            								}
            							}
            						}
HXDLIN( 552)						if (result->contains(::Type_obj::enumConstructor(rhs).toLowerCase())) {
HXLINE( 552)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(rhs)->__get(0)) );
            						}
            						else {
HXLINE( 552)							callbackFunc2 = ( (::String)(::Type_obj::enumParameters(::little::interpreter::Interpreter_obj::run(::Array_obj< ::Dynamic>::__new(1)->init(0,rhs),null()))->__get(0)) );
            						}
HXDLIN( 552)						return callbackFunc->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((((((callbackFunc1 + callbackFunc2) + HX_(") - Operand cannot be of type ",3e,0b,78,38)) + rType) + HX_(" (accepted types: ",ae,5f,86,32)) + ::Std_obj::string( ::Dynamic(info->__Field(HX_("rhsAllowedTypes",ce,6d,8a,11),::hx::paccDynamic)))) + HX_(")",29,00,00,00))),null());
            					}
HXLINE( 555)					return info->__Field(HX_("singleSidedOperatorCallback",ee,de,f9,ae),::hx::paccDynamic)(rhs);
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 549)				callbackFunc1 =  ::Dynamic(new _hx_Closure_7(info,symbol));
            			}
HXLINE( 559)			::little::Little_obj::memory->operators->add(symbol,info->__Field(HX_("operatorType",7e,dc,35,71),::hx::paccDynamic),( (::String)(info->__Field(HX_("priority",64,7b,3e,bb),::hx::paccDynamic)) ),callbackFunc1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Plugins_obj,registerOperator,(void))

bool Plugins_obj::_hx___noTypeCreation;

bool Plugins_obj::combosHas(::Array< ::Dynamic> combos,::String lhs,::String rhs){
            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_443_combosHas)
HXLINE( 444)		{
HXLINE( 444)			int _g = 0;
HXDLIN( 444)			while((_g < combos->length)){
HXLINE( 444)				 ::Dynamic c = combos->__get(_g);
HXDLIN( 444)				_g = (_g + 1);
HXDLIN( 444)				bool _hx_tmp;
HXDLIN( 444)				if (::hx::IsEq( c->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic),rhs )) {
HXLINE( 444)					_hx_tmp = ::hx::IsEq( c->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic),lhs );
            				}
            				else {
HXLINE( 444)					_hx_tmp = false;
            				}
HXDLIN( 444)				if (_hx_tmp) {
HXLINE( 444)					return true;
            				}
            			}
            		}
HXLINE( 445)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Plugins_obj,combosHas,return )

bool Plugins_obj::containsCombo(::Array< ::Dynamic> array,::String lhs,::String rhs){
            	HX_STACKFRAME(&_hx_pos_553c3c091ec60400_585_containsCombo)
HXLINE( 586)		{
HXLINE( 586)			int _g = 0;
HXDLIN( 586)			while((_g < array->length)){
HXLINE( 586)				 ::Dynamic a = array->__get(_g);
HXDLIN( 586)				_g = (_g + 1);
HXLINE( 587)				bool _hx_tmp;
HXDLIN( 587)				if (::hx::IsEq( a->__Field(HX_("lhs",77,4e,52,00),::hx::paccDynamic),lhs )) {
HXLINE( 587)					_hx_tmp = ::hx::IsEq( a->__Field(HX_("rhs",fd,db,56,00),::hx::paccDynamic),rhs );
            				}
            				else {
HXLINE( 587)					_hx_tmp = false;
            				}
HXDLIN( 587)				if (_hx_tmp) {
HXLINE( 587)					return true;
            				}
            			}
            		}
HXLINE( 589)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Plugins_obj,containsCombo,return )


::hx::ObjectPtr< Plugins_obj > Plugins_obj::__new( ::little::interpreter::memory::Memory memory) {
	::hx::ObjectPtr< Plugins_obj > __this = new Plugins_obj();
	__this->__construct(memory);
	return __this;
}

::hx::ObjectPtr< Plugins_obj > Plugins_obj::__alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory) {
	Plugins_obj *__this = (Plugins_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Plugins_obj), true, "little.tools.Plugins"));
	*(void **)__this = Plugins_obj::_hx_vtable;
	__this->__construct(memory);
	return __this;
}

Plugins_obj::Plugins_obj()
{
}

void Plugins_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Plugins);
	HX_MARK_MEMBER_NAME(memory,"memory");
	HX_MARK_END_CLASS();
}

void Plugins_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(memory,"memory");
}

::hx::Val Plugins_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"memory") ) { return ::hx::Val( memory ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"registerType") ) { return ::hx::Val( registerType_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerVariable") ) { return ::hx::Val( registerVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"registerFunction") ) { return ::hx::Val( registerFunction_dyn() ); }
		if (HX_FIELD_EQ(inName,"registerOperator") ) { return ::hx::Val( registerOperator_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerCondition") ) { return ::hx::Val( registerCondition_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"registerInstanceVariable") ) { return ::hx::Val( registerInstanceVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"registerInstanceFunction") ) { return ::hx::Val( registerInstanceFunction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Plugins_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"combosHas") ) { outValue = combosHas_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsCombo") ) { outValue = containsCombo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__noTypeCreation") ) { outValue = ( _hx___noTypeCreation ); return true; }
	}
	return false;
}

::hx::Val Plugins_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"memory") ) { memory=inValue.Cast<  ::little::interpreter::memory::Memory >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Plugins_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"__noTypeCreation") ) { _hx___noTypeCreation=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Plugins_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("memory",01,cb,bf,04));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Plugins_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::little::interpreter::memory::Memory */ ,(int)offsetof(Plugins_obj,memory),HX_("memory",01,cb,bf,04)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Plugins_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Plugins_obj::_hx___noTypeCreation,HX_("__noTypeCreation",fa,95,9c,f4)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Plugins_obj_sMemberFields[] = {
	HX_("memory",01,cb,bf,04),
	HX_("registerType",bd,32,f8,c8),
	HX_("registerVariable",bf,0f,d0,67),
	HX_("registerFunction",9b,a8,15,13),
	HX_("registerCondition",b8,be,0e,e8),
	HX_("registerInstanceVariable",74,c3,e9,fe),
	HX_("registerInstanceFunction",50,5c,2f,aa),
	HX_("registerOperator",27,19,36,43),
	::String(null()) };

static void Plugins_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Plugins_obj::_hx___noTypeCreation,"__noTypeCreation");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Plugins_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Plugins_obj::_hx___noTypeCreation,"__noTypeCreation");
};

#endif

::hx::Class Plugins_obj::__mClass;

static ::String Plugins_obj_sStaticFields[] = {
	HX_("__noTypeCreation",fa,95,9c,f4),
	HX_("combosHas",f5,e7,8c,79),
	HX_("containsCombo",af,2d,b9,16),
	::String(null())
};

void Plugins_obj::__register()
{
	Plugins_obj _hx_dummy;
	Plugins_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.tools.Plugins",75,a3,70,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Plugins_obj::__GetStatic;
	__mClass->mSetStaticField = &Plugins_obj::__SetStatic;
	__mClass->mMarkFunc = Plugins_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Plugins_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Plugins_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Plugins_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Plugins_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Plugins_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Plugins_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace tools
