// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
namespace little{
namespace tools{

::little::tools::InterpTokensSimple InterpTokensSimple_obj::BLOCK;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CHARACTERS;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CLASS;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CLASS_DECLARATION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CLASS_POINTER;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CONDITION_CALL;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CONDITION_CODE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::CONDITION_DECLARATION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::DECIMAL;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::DOCUMENTATION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::ERROR_MESSAGE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::EXPRESSION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::FALSE_VALUE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::FUNCTION_CALL;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::FUNCTION_CODE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::FUNCTION_DECLARATION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::FUNCTION_RETURN;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::HAXE_EXTERN;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::IDENTIFIER;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::NULL_VALUE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::NUMBER;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::OBJECT;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::PART_ARRAY;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::PROPERTY_ACCESS;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::SET_LINE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::SET_MODULE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::SIGN;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::SPLIT_LINE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::TRUE_VALUE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::TYPE_CAST;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::TYPE_REFERENCE;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::VARIABLE_DECLARATION;

::little::tools::InterpTokensSimple InterpTokensSimple_obj::WRITE;

bool InterpTokensSimple_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BLOCK",2d,ad,ea,32)) { outValue = InterpTokensSimple_obj::BLOCK; return true; }
	if (inName==HX_("CHARACTERS",aa,cc,d7,47)) { outValue = InterpTokensSimple_obj::CHARACTERS; return true; }
	if (inName==HX_("CLASS",18,b0,46,c6)) { outValue = InterpTokensSimple_obj::CLASS; return true; }
	if (inName==HX_("CLASS_DECLARATION",f3,52,f3,99)) { outValue = InterpTokensSimple_obj::CLASS_DECLARATION; return true; }
	if (inName==HX_("CLASS_POINTER",36,76,c6,45)) { outValue = InterpTokensSimple_obj::CLASS_POINTER; return true; }
	if (inName==HX_("CONDITION_CALL",22,65,82,fd)) { outValue = InterpTokensSimple_obj::CONDITION_CALL; return true; }
	if (inName==HX_("CONDITION_CODE",b1,fd,8c,fd)) { outValue = InterpTokensSimple_obj::CONDITION_CODE; return true; }
	if (inName==HX_("CONDITION_DECLARATION",d6,04,03,2b)) { outValue = InterpTokensSimple_obj::CONDITION_DECLARATION; return true; }
	if (inName==HX_("DECIMAL",71,88,a7,66)) { outValue = InterpTokensSimple_obj::DECIMAL; return true; }
	if (inName==HX_("DOCUMENTATION",9a,29,a7,27)) { outValue = InterpTokensSimple_obj::DOCUMENTATION; return true; }
	if (inName==HX_("ERROR_MESSAGE",d0,4e,5d,5f)) { outValue = InterpTokensSimple_obj::ERROR_MESSAGE; return true; }
	if (inName==HX_("EXPRESSION",98,85,a8,20)) { outValue = InterpTokensSimple_obj::EXPRESSION; return true; }
	if (inName==HX_("FALSE_VALUE",55,f0,96,1b)) { outValue = InterpTokensSimple_obj::FALSE_VALUE; return true; }
	if (inName==HX_("FUNCTION_CALL",65,8a,8e,e9)) { outValue = InterpTokensSimple_obj::FUNCTION_CALL; return true; }
	if (inName==HX_("FUNCTION_CODE",f4,22,99,e9)) { outValue = InterpTokensSimple_obj::FUNCTION_CODE; return true; }
	if (inName==HX_("FUNCTION_DECLARATION",f3,5d,29,5b)) { outValue = InterpTokensSimple_obj::FUNCTION_DECLARATION; return true; }
	if (inName==HX_("FUNCTION_RETURN",37,3a,57,a4)) { outValue = InterpTokensSimple_obj::FUNCTION_RETURN; return true; }
	if (inName==HX_("HAXE_EXTERN",99,07,20,e7)) { outValue = InterpTokensSimple_obj::HAXE_EXTERN; return true; }
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) { outValue = InterpTokensSimple_obj::IDENTIFIER; return true; }
	if (inName==HX_("NULL_VALUE",59,84,bf,9f)) { outValue = InterpTokensSimple_obj::NULL_VALUE; return true; }
	if (inName==HX_("NUMBER",c9,32,fd,53)) { outValue = InterpTokensSimple_obj::NUMBER; return true; }
	if (inName==HX_("OBJECT",bf,2a,c2,c7)) { outValue = InterpTokensSimple_obj::OBJECT; return true; }
	if (inName==HX_("PART_ARRAY",ed,90,29,3d)) { outValue = InterpTokensSimple_obj::PART_ARRAY; return true; }
	if (inName==HX_("PROPERTY_ACCESS",8e,5f,ed,95)) { outValue = InterpTokensSimple_obj::PROPERTY_ACCESS; return true; }
	if (inName==HX_("SET_LINE",11,4d,23,3c)) { outValue = InterpTokensSimple_obj::SET_LINE; return true; }
	if (inName==HX_("SET_MODULE",09,8f,90,d9)) { outValue = InterpTokensSimple_obj::SET_MODULE; return true; }
	if (inName==HX_("SIGN",3d,58,14,37)) { outValue = InterpTokensSimple_obj::SIGN; return true; }
	if (inName==HX_("SPLIT_LINE",d9,b6,ad,95)) { outValue = InterpTokensSimple_obj::SPLIT_LINE; return true; }
	if (inName==HX_("TRUE_VALUE",60,dc,59,88)) { outValue = InterpTokensSimple_obj::TRUE_VALUE; return true; }
	if (inName==HX_("TYPE_CAST",a4,25,a1,8e)) { outValue = InterpTokensSimple_obj::TYPE_CAST; return true; }
	if (inName==HX_("TYPE_REFERENCE",a6,1a,50,1a)) { outValue = InterpTokensSimple_obj::TYPE_REFERENCE; return true; }
	if (inName==HX_("VARIABLE_DECLARATION",17,eb,73,20)) { outValue = InterpTokensSimple_obj::VARIABLE_DECLARATION; return true; }
	if (inName==HX_("WRITE",bf,a4,47,4e)) { outValue = InterpTokensSimple_obj::WRITE; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(InterpTokensSimple_obj)

int InterpTokensSimple_obj::__FindIndex(::String inName)
{
	if (inName==HX_("BLOCK",2d,ad,ea,32)) return 15;
	if (inName==HX_("CHARACTERS",aa,cc,d7,47)) return 20;
	if (inName==HX_("CLASS",18,b0,46,c6)) return 30;
	if (inName==HX_("CLASS_DECLARATION",f3,52,f3,99)) return 6;
	if (inName==HX_("CLASS_POINTER",36,76,c6,45)) return 22;
	if (inName==HX_("CONDITION_CALL",22,65,82,fd)) return 7;
	if (inName==HX_("CONDITION_CODE",b1,fd,8c,fd)) return 8;
	if (inName==HX_("CONDITION_DECLARATION",d6,04,03,2b)) return 5;
	if (inName==HX_("DECIMAL",71,88,a7,66)) return 19;
	if (inName==HX_("DOCUMENTATION",9a,29,a7,27)) return 21;
	if (inName==HX_("ERROR_MESSAGE",d0,4e,5d,5f)) return 31;
	if (inName==HX_("EXPRESSION",98,85,a8,20)) return 14;
	if (inName==HX_("FALSE_VALUE",55,f0,96,1b)) return 26;
	if (inName==HX_("FUNCTION_CALL",65,8a,8e,e9)) return 9;
	if (inName==HX_("FUNCTION_CODE",f4,22,99,e9)) return 10;
	if (inName==HX_("FUNCTION_DECLARATION",f3,5d,29,5b)) return 4;
	if (inName==HX_("FUNCTION_RETURN",37,3a,57,a4)) return 11;
	if (inName==HX_("HAXE_EXTERN",99,07,20,e7)) return 32;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return 27;
	if (inName==HX_("NULL_VALUE",59,84,bf,9f)) return 24;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return 18;
	if (inName==HX_("OBJECT",bf,2a,c2,c7)) return 29;
	if (inName==HX_("PART_ARRAY",ed,90,29,3d)) return 16;
	if (inName==HX_("PROPERTY_ACCESS",8e,5f,ed,95)) return 17;
	if (inName==HX_("SET_LINE",11,4d,23,3c)) return 0;
	if (inName==HX_("SET_MODULE",09,8f,90,d9)) return 1;
	if (inName==HX_("SIGN",3d,58,14,37)) return 23;
	if (inName==HX_("SPLIT_LINE",d9,b6,ad,95)) return 2;
	if (inName==HX_("TRUE_VALUE",60,dc,59,88)) return 25;
	if (inName==HX_("TYPE_CAST",a4,25,a1,8e)) return 13;
	if (inName==HX_("TYPE_REFERENCE",a6,1a,50,1a)) return 28;
	if (inName==HX_("VARIABLE_DECLARATION",17,eb,73,20)) return 3;
	if (inName==HX_("WRITE",bf,a4,47,4e)) return 12;
	return super::__FindIndex(inName);
}

int InterpTokensSimple_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("BLOCK",2d,ad,ea,32)) return 0;
	if (inName==HX_("CHARACTERS",aa,cc,d7,47)) return 0;
	if (inName==HX_("CLASS",18,b0,46,c6)) return 0;
	if (inName==HX_("CLASS_DECLARATION",f3,52,f3,99)) return 0;
	if (inName==HX_("CLASS_POINTER",36,76,c6,45)) return 0;
	if (inName==HX_("CONDITION_CALL",22,65,82,fd)) return 0;
	if (inName==HX_("CONDITION_CODE",b1,fd,8c,fd)) return 0;
	if (inName==HX_("CONDITION_DECLARATION",d6,04,03,2b)) return 0;
	if (inName==HX_("DECIMAL",71,88,a7,66)) return 0;
	if (inName==HX_("DOCUMENTATION",9a,29,a7,27)) return 0;
	if (inName==HX_("ERROR_MESSAGE",d0,4e,5d,5f)) return 0;
	if (inName==HX_("EXPRESSION",98,85,a8,20)) return 0;
	if (inName==HX_("FALSE_VALUE",55,f0,96,1b)) return 0;
	if (inName==HX_("FUNCTION_CALL",65,8a,8e,e9)) return 0;
	if (inName==HX_("FUNCTION_CODE",f4,22,99,e9)) return 0;
	if (inName==HX_("FUNCTION_DECLARATION",f3,5d,29,5b)) return 0;
	if (inName==HX_("FUNCTION_RETURN",37,3a,57,a4)) return 0;
	if (inName==HX_("HAXE_EXTERN",99,07,20,e7)) return 0;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return 0;
	if (inName==HX_("NULL_VALUE",59,84,bf,9f)) return 0;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return 0;
	if (inName==HX_("OBJECT",bf,2a,c2,c7)) return 0;
	if (inName==HX_("PART_ARRAY",ed,90,29,3d)) return 0;
	if (inName==HX_("PROPERTY_ACCESS",8e,5f,ed,95)) return 0;
	if (inName==HX_("SET_LINE",11,4d,23,3c)) return 0;
	if (inName==HX_("SET_MODULE",09,8f,90,d9)) return 0;
	if (inName==HX_("SIGN",3d,58,14,37)) return 0;
	if (inName==HX_("SPLIT_LINE",d9,b6,ad,95)) return 0;
	if (inName==HX_("TRUE_VALUE",60,dc,59,88)) return 0;
	if (inName==HX_("TYPE_CAST",a4,25,a1,8e)) return 0;
	if (inName==HX_("TYPE_REFERENCE",a6,1a,50,1a)) return 0;
	if (inName==HX_("VARIABLE_DECLARATION",17,eb,73,20)) return 0;
	if (inName==HX_("WRITE",bf,a4,47,4e)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val InterpTokensSimple_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BLOCK",2d,ad,ea,32)) return BLOCK;
	if (inName==HX_("CHARACTERS",aa,cc,d7,47)) return CHARACTERS;
	if (inName==HX_("CLASS",18,b0,46,c6)) return CLASS;
	if (inName==HX_("CLASS_DECLARATION",f3,52,f3,99)) return CLASS_DECLARATION;
	if (inName==HX_("CLASS_POINTER",36,76,c6,45)) return CLASS_POINTER;
	if (inName==HX_("CONDITION_CALL",22,65,82,fd)) return CONDITION_CALL;
	if (inName==HX_("CONDITION_CODE",b1,fd,8c,fd)) return CONDITION_CODE;
	if (inName==HX_("CONDITION_DECLARATION",d6,04,03,2b)) return CONDITION_DECLARATION;
	if (inName==HX_("DECIMAL",71,88,a7,66)) return DECIMAL;
	if (inName==HX_("DOCUMENTATION",9a,29,a7,27)) return DOCUMENTATION;
	if (inName==HX_("ERROR_MESSAGE",d0,4e,5d,5f)) return ERROR_MESSAGE;
	if (inName==HX_("EXPRESSION",98,85,a8,20)) return EXPRESSION;
	if (inName==HX_("FALSE_VALUE",55,f0,96,1b)) return FALSE_VALUE;
	if (inName==HX_("FUNCTION_CALL",65,8a,8e,e9)) return FUNCTION_CALL;
	if (inName==HX_("FUNCTION_CODE",f4,22,99,e9)) return FUNCTION_CODE;
	if (inName==HX_("FUNCTION_DECLARATION",f3,5d,29,5b)) return FUNCTION_DECLARATION;
	if (inName==HX_("FUNCTION_RETURN",37,3a,57,a4)) return FUNCTION_RETURN;
	if (inName==HX_("HAXE_EXTERN",99,07,20,e7)) return HAXE_EXTERN;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return IDENTIFIER;
	if (inName==HX_("NULL_VALUE",59,84,bf,9f)) return NULL_VALUE;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return NUMBER;
	if (inName==HX_("OBJECT",bf,2a,c2,c7)) return OBJECT;
	if (inName==HX_("PART_ARRAY",ed,90,29,3d)) return PART_ARRAY;
	if (inName==HX_("PROPERTY_ACCESS",8e,5f,ed,95)) return PROPERTY_ACCESS;
	if (inName==HX_("SET_LINE",11,4d,23,3c)) return SET_LINE;
	if (inName==HX_("SET_MODULE",09,8f,90,d9)) return SET_MODULE;
	if (inName==HX_("SIGN",3d,58,14,37)) return SIGN;
	if (inName==HX_("SPLIT_LINE",d9,b6,ad,95)) return SPLIT_LINE;
	if (inName==HX_("TRUE_VALUE",60,dc,59,88)) return TRUE_VALUE;
	if (inName==HX_("TYPE_CAST",a4,25,a1,8e)) return TYPE_CAST;
	if (inName==HX_("TYPE_REFERENCE",a6,1a,50,1a)) return TYPE_REFERENCE;
	if (inName==HX_("VARIABLE_DECLARATION",17,eb,73,20)) return VARIABLE_DECLARATION;
	if (inName==HX_("WRITE",bf,a4,47,4e)) return WRITE;
	return super::__Field(inName,inCallProp);
}

static ::String InterpTokensSimple_obj_sStaticFields[] = {
	HX_("SET_LINE",11,4d,23,3c),
	HX_("SET_MODULE",09,8f,90,d9),
	HX_("SPLIT_LINE",d9,b6,ad,95),
	HX_("VARIABLE_DECLARATION",17,eb,73,20),
	HX_("FUNCTION_DECLARATION",f3,5d,29,5b),
	HX_("CONDITION_DECLARATION",d6,04,03,2b),
	HX_("CLASS_DECLARATION",f3,52,f3,99),
	HX_("CONDITION_CALL",22,65,82,fd),
	HX_("CONDITION_CODE",b1,fd,8c,fd),
	HX_("FUNCTION_CALL",65,8a,8e,e9),
	HX_("FUNCTION_CODE",f4,22,99,e9),
	HX_("FUNCTION_RETURN",37,3a,57,a4),
	HX_("WRITE",bf,a4,47,4e),
	HX_("TYPE_CAST",a4,25,a1,8e),
	HX_("EXPRESSION",98,85,a8,20),
	HX_("BLOCK",2d,ad,ea,32),
	HX_("PART_ARRAY",ed,90,29,3d),
	HX_("PROPERTY_ACCESS",8e,5f,ed,95),
	HX_("NUMBER",c9,32,fd,53),
	HX_("DECIMAL",71,88,a7,66),
	HX_("CHARACTERS",aa,cc,d7,47),
	HX_("DOCUMENTATION",9a,29,a7,27),
	HX_("CLASS_POINTER",36,76,c6,45),
	HX_("SIGN",3d,58,14,37),
	HX_("NULL_VALUE",59,84,bf,9f),
	HX_("TRUE_VALUE",60,dc,59,88),
	HX_("FALSE_VALUE",55,f0,96,1b),
	HX_("IDENTIFIER",69,3c,36,c0),
	HX_("TYPE_REFERENCE",a6,1a,50,1a),
	HX_("OBJECT",bf,2a,c2,c7),
	HX_("CLASS",18,b0,46,c6),
	HX_("ERROR_MESSAGE",d0,4e,5d,5f),
	HX_("HAXE_EXTERN",99,07,20,e7),
	::String(null())
};

::hx::Class InterpTokensSimple_obj::__mClass;

Dynamic __Create_InterpTokensSimple_obj() { return new InterpTokensSimple_obj; }

void InterpTokensSimple_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("little.tools.InterpTokensSimple",2b,90,fc,7c), ::hx::TCanCast< InterpTokensSimple_obj >,InterpTokensSimple_obj_sStaticFields,0,
	&__Create_InterpTokensSimple_obj, &__Create,
	&super::__SGetClass(), &CreateInterpTokensSimple_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &InterpTokensSimple_obj::__GetStatic;
}

void InterpTokensSimple_obj::__boot()
{
BLOCK = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("BLOCK",2d,ad,ea,32),15);
CHARACTERS = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CHARACTERS",aa,cc,d7,47),20);
CLASS = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CLASS",18,b0,46,c6),30);
CLASS_DECLARATION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CLASS_DECLARATION",f3,52,f3,99),6);
CLASS_POINTER = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CLASS_POINTER",36,76,c6,45),22);
CONDITION_CALL = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CONDITION_CALL",22,65,82,fd),7);
CONDITION_CODE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CONDITION_CODE",b1,fd,8c,fd),8);
CONDITION_DECLARATION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("CONDITION_DECLARATION",d6,04,03,2b),5);
DECIMAL = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("DECIMAL",71,88,a7,66),19);
DOCUMENTATION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("DOCUMENTATION",9a,29,a7,27),21);
ERROR_MESSAGE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("ERROR_MESSAGE",d0,4e,5d,5f),31);
EXPRESSION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("EXPRESSION",98,85,a8,20),14);
FALSE_VALUE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("FALSE_VALUE",55,f0,96,1b),26);
FUNCTION_CALL = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("FUNCTION_CALL",65,8a,8e,e9),9);
FUNCTION_CODE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("FUNCTION_CODE",f4,22,99,e9),10);
FUNCTION_DECLARATION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("FUNCTION_DECLARATION",f3,5d,29,5b),4);
FUNCTION_RETURN = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("FUNCTION_RETURN",37,3a,57,a4),11);
HAXE_EXTERN = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("HAXE_EXTERN",99,07,20,e7),32);
IDENTIFIER = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("IDENTIFIER",69,3c,36,c0),27);
NULL_VALUE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("NULL_VALUE",59,84,bf,9f),24);
NUMBER = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("NUMBER",c9,32,fd,53),18);
OBJECT = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("OBJECT",bf,2a,c2,c7),29);
PART_ARRAY = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("PART_ARRAY",ed,90,29,3d),16);
PROPERTY_ACCESS = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("PROPERTY_ACCESS",8e,5f,ed,95),17);
SET_LINE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("SET_LINE",11,4d,23,3c),0);
SET_MODULE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("SET_MODULE",09,8f,90,d9),1);
SIGN = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("SIGN",3d,58,14,37),23);
SPLIT_LINE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("SPLIT_LINE",d9,b6,ad,95),2);
TRUE_VALUE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("TRUE_VALUE",60,dc,59,88),25);
TYPE_CAST = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("TYPE_CAST",a4,25,a1,8e),13);
TYPE_REFERENCE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("TYPE_REFERENCE",a6,1a,50,1a),28);
VARIABLE_DECLARATION = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("VARIABLE_DECLARATION",17,eb,73,20),3);
WRITE = ::hx::CreateConstEnum< InterpTokensSimple_obj >(HX_("WRITE",bf,a4,47,4e),12);
}


} // end namespace little
} // end namespace tools
