// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
#ifndef INCLUDED_little_parser_Parser
#include <little/parser/Parser.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_ParserTokensSimple
#include <little/tools/ParserTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_36___default_parse,"little.parser.Parser","__default_parse",0xbb46569d,"little.parser.Parser.__default_parse","little/parser/Parser.hx",36,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_72_convert,"little.parser.Parser","convert",0xcf94dcbb,"little.parser.Parser.convert","little/parser/Parser.hx",72,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_116_mergeBlocks,"little.parser.Parser","mergeBlocks",0xf20e0226,"little.parser.Parser.mergeBlocks","little/parser/Parser.hx",116,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_174_mergeExpressions,"little.parser.Parser","mergeExpressions",0xf9c95c3b,"little.parser.Parser.mergeExpressions","little/parser/Parser.hx",174,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_234_mergePropertyOperations,"little.parser.Parser","mergePropertyOperations",0xbb82cac1,"little.parser.Parser.mergePropertyOperations","little/parser/Parser.hx",234,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_321_mergeTypeDecls,"little.parser.Parser","mergeTypeDecls",0xeb7c980f,"little.parser.Parser.mergeTypeDecls","little/parser/Parser.hx",321,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_370_mergeComplexStructures,"little.parser.Parser","mergeComplexStructures",0x49a7ef90,"little.parser.Parser.mergeComplexStructures","little/parser/Parser.hx",370,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_600_mergeCalls,"little.parser.Parser","mergeCalls",0xa9e7f275,"little.parser.Parser.mergeCalls","little/parser/Parser.hx",600,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_651_mergeWrites,"little.parser.Parser","mergeWrites",0xc809aa54,"little.parser.Parser.mergeWrites","little/parser/Parser.hx",651,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_772_mergeValuesWithTypeDeclarations,"little.parser.Parser","mergeValuesWithTypeDeclarations",0x2022b2db,"little.parser.Parser.mergeValuesWithTypeDeclarations","little/parser/Parser.hx",772,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_829_mergeNonBlockBodies,"little.parser.Parser","mergeNonBlockBodies",0x799ce040,"little.parser.Parser.mergeNonBlockBodies","little/parser/Parser.hx",829,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_882_mergeElses,"little.parser.Parser","mergeElses",0xd7ffbdfa,"little.parser.Parser.mergeElses","little/parser/Parser.hx",882,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_952_get_line,"little.parser.Parser","get_line",0x4425e3b5,"little.parser.Parser.get_line","little/parser/Parser.hx",952,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_953_set_line,"little.parser.Parser","set_line",0xf2833d29,"little.parser.Parser.set_line","little/parser/Parser.hx",953,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_955_get_module,"little.parser.Parser","get_module",0xd86132ad,"little.parser.Parser.get_module","little/parser/Parser.hx",955,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_956_set_module,"little.parser.Parser","set_module",0xdbded121,"little.parser.Parser.set_module","little/parser/Parser.hx",956,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_962_setLine,"little.parser.Parser","setLine",0xc202377e,"little.parser.Parser.setLine","little/parser/Parser.hx",962,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_969_nextPart,"little.parser.Parser","nextPart",0x72d69abe,"little.parser.Parser.nextPart","little/parser/Parser.hx",969,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_974_resetLines,"little.parser.Parser","resetLines",0x84a4a3e8,"little.parser.Parser.resetLines","little/parser/Parser.hx",974,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_24_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",24,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_957_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",957,0x38f03b28)
namespace little{
namespace parser{

void Parser_obj::__construct() { }

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54a57e14;
}

::Array< ::Dynamic> Parser_obj::additionalParsingLevels;

HX_BEGIN_DEFAULT_FUNC(__default_parse,Parser_obj)
::Array< ::Dynamic> _hx_run(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_36___default_parse)
HXLINE(  37)		::Array< ::Dynamic> tokens = ::little::parser::Parser_obj::convert(lexerTokens);
HXLINE(  39)		tokens->unshift(::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()));
HXLINE(  42)		tokens = ::little::parser::Parser_obj::mergeBlocks(tokens);
HXLINE(  44)		tokens = ::little::parser::Parser_obj::mergeExpressions(tokens);
HXLINE(  46)		tokens = ::little::parser::Parser_obj::mergePropertyOperations(tokens);
HXLINE(  48)		tokens = ::little::parser::Parser_obj::mergeTypeDecls(tokens);
HXLINE(  50)		tokens = ::little::parser::Parser_obj::mergeComplexStructures(tokens);
HXLINE(  52)		tokens = ::little::parser::Parser_obj::mergeCalls(tokens);
HXLINE(  54)		tokens = ::little::parser::Parser_obj::mergeWrites(tokens);
HXLINE(  56)		tokens = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(tokens);
HXLINE(  58)		tokens = ::little::parser::Parser_obj::mergeNonBlockBodies(tokens);
HXLINE(  60)		{
HXLINE(  60)			int _g = 0;
HXDLIN(  60)			::Array< ::Dynamic> _g1 = ::little::parser::Parser_obj::additionalParsingLevels;
HXDLIN(  60)			while((_g < _g1->length)){
HXLINE(  60)				 ::Dynamic level = _g1->__get(_g);
HXDLIN(  60)				_g = (_g + 1);
HXLINE(  61)				tokens = ( (::Array< ::Dynamic>)(level(tokens)) );
            			}
            		}
HXLINE(  66)		return tokens;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Parser_obj::parse;

::Array< ::Dynamic> Parser_obj::convert(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_72_convert)
HXLINE(  73)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  75)		int line = 1;
HXLINE(  77)		int i = 0;
HXLINE(  78)		while((i < lexerTokens->length)){
HXLINE(  79)			 ::little::lexer::LexerTokens token = lexerTokens->__get(i).StaticCast<  ::little::lexer::LexerTokens >();
HXLINE(  81)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE(  82)					::String name = token->_hx_getString(0);
HXDLIN(  82)					tokens->push(::little::parser::ParserTokens_obj::Identifier(name));
            				}
            				break;
            				case (int)1: {
HXLINE(  83)					::String _hx_char = token->_hx_getString(0);
HXDLIN(  83)					tokens->push(::little::parser::ParserTokens_obj::Sign(_hx_char));
            				}
            				break;
            				case (int)2: {
HXLINE(  84)					::String num = token->_hx_getString(0);
HXLINE(  85)					if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 0)) {
HXLINE(  85)						tokens->push(::little::parser::ParserTokens_obj::Number(num));
            					}
            					else {
HXLINE(  86)						if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 1)) {
HXLINE(  86)							tokens->push(::little::parser::ParserTokens_obj::Decimal(num));
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(  88)					::String value = token->_hx_getString(0);
HXLINE(  89)					if ((value == ::little::Little_obj::keywords->FALSE_VALUE)) {
HXLINE(  89)						tokens->push(::little::parser::ParserTokens_obj::FalseValue_dyn());
            					}
            					else {
HXLINE(  90)						if ((value == ::little::Little_obj::keywords->TRUE_VALUE)) {
HXLINE(  90)							tokens->push(::little::parser::ParserTokens_obj::TrueValue_dyn());
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(  92)					::String string = token->_hx_getString(0);
HXDLIN(  92)					tokens->push(::little::parser::ParserTokens_obj::Characters(string));
            				}
            				break;
            				case (int)5: {
HXLINE(  93)					tokens->push(::little::parser::ParserTokens_obj::NullValue_dyn());
            				}
            				break;
            				case (int)6: {
HXLINE(  95)					tokens->push(::little::parser::ParserTokens_obj::SetLine(line));
HXLINE(  96)					line = (line + 1);
            				}
            				break;
            				case (int)7: {
HXLINE(  98)					tokens->push(::little::parser::ParserTokens_obj::SplitLine_dyn());
            				}
            				break;
            				case (int)8: {
HXLINE(  99)					::String content = token->_hx_getString(0);
HXDLIN(  99)					tokens->push(::little::parser::ParserTokens_obj::Documentation(content));
            				}
            				break;
            			}
HXLINE( 102)			i = (i + 1);
            		}
HXLINE( 105)		return tokens;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,convert,return )

::Array< ::Dynamic> Parser_obj::mergeBlocks(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_116_mergeBlocks)
HXLINE( 118)		if (::hx::IsNull( pre )) {
HXLINE( 118)			return null();
            		}
HXLINE( 119)		bool _hx_tmp;
HXDLIN( 119)		if ((pre->length == 1)) {
HXLINE( 119)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 119)			_hx_tmp = false;
            		}
HXDLIN( 119)		if (_hx_tmp) {
HXLINE( 119)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 121)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 123)		int i = 0;
HXLINE( 124)		while((i < pre->length)){
HXLINE( 125)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 126)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 127)					int line = token->_hx_getInt(0);
HXDLIN( 127)					{
HXLINE( 127)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 127)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 128)					::String module = token->_hx_getString(0);
HXDLIN( 128)					{
HXLINE( 128)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 128)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 129)					::little::parser::Parser_obj::nextPart();
HXDLIN( 129)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 155)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 155)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 155)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeBlocks(parts);
HXDLIN( 155)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 156)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 156)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 156)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeBlocks(body);
HXDLIN( 156)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 130)					if ((token->_hx_getString(0) == HX_("{",7b,00,00,00))) {
HXLINE( 131)						int blockStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 132)						::Array< ::Dynamic> blockBody = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()))->init(1,::little::parser::ParserTokens_obj::SetLine(blockStartLine));
HXLINE( 133)						int blockStack = 1;
HXLINE( 134)						while(((i + 1) < pre->length)){
HXLINE( 135)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 136)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("{",7b,00,00,00)))) {
HXLINE( 137)								blockStack = (blockStack + 1);
HXLINE( 138)								blockBody->push(lookahead);
            							}
            							else {
HXLINE( 139)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("}",7d,00,00,00)))) {
HXLINE( 140)									blockStack = (blockStack - 1);
HXLINE( 141)									if ((blockStack == 0)) {
HXLINE( 141)										goto _hx_goto_5;
            									}
HXLINE( 142)									blockBody->push(lookahead);
            								}
            								else {
HXLINE( 143)									blockBody->push(lookahead);
            								}
            							}
HXLINE( 144)							i = (i + 1);
            						}
            						_hx_goto_5:;
HXLINE( 147)						if (((i + 1) == pre->length)) {
HXLINE( 148)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed code block, starting at line ",d6,5b,eb,82) + blockStartLine)),null());
HXLINE( 149)							return null();
            						}
HXLINE( 152)						post->push(::little::parser::ParserTokens_obj::Block(::little::parser::Parser_obj::mergeBlocks(blockBody),null()));
HXLINE( 153)						i = (i + 1);
            					}
            					else {
HXLINE( 158)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 157)					::String name = token->_hx_getString(0);
HXDLIN( 157)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 157)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 157)					{
HXLINE( 157)						int _g = 0;
HXDLIN( 157)						int _g1 = params->length;
HXDLIN( 157)						while((_g < _g1)){
HXLINE( 157)							_g = (_g + 1);
HXDLIN( 157)							int i1 = (_g - 1);
HXDLIN( 157)							{
HXLINE( 157)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 157)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 157)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 158)					post->push(token);
            				}
            			}
HXLINE( 160)			i = (i + 1);
            		}
HXLINE( 163)		::little::parser::Parser_obj::resetLines();
HXLINE( 164)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeBlocks,return )

::Array< ::Dynamic> Parser_obj::mergeExpressions(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_174_mergeExpressions)
HXLINE( 176)		if (::hx::IsNull( pre )) {
HXLINE( 176)			return null();
            		}
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if ((pre->length == 1)) {
HXLINE( 177)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 177)			_hx_tmp = false;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 179)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 181)		int i = 0;
HXLINE( 182)		while((i < pre->length)){
HXLINE( 183)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 184)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 185)					int line = token->_hx_getInt(0);
HXDLIN( 185)					{
HXLINE( 185)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 185)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 186)					::String module = token->_hx_getString(0);
HXDLIN( 186)					{
HXLINE( 186)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 186)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 187)					::little::parser::Parser_obj::nextPart();
HXDLIN( 187)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 213)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 213)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 213)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeExpressions(parts);
HXDLIN( 213)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 214)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 214)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 214)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeExpressions(body);
HXDLIN( 214)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 188)					if ((token->_hx_getString(0) == HX_("(",28,00,00,00))) {
HXLINE( 189)						int expressionStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 190)						::Array< ::Dynamic> expressionBody = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 191)						int expressionStack = 1;
HXLINE( 192)						while(((i + 1) < pre->length)){
HXLINE( 193)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 194)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("(",28,00,00,00)))) {
HXLINE( 195)								expressionStack = (expressionStack + 1);
HXLINE( 196)								expressionBody->push(lookahead);
            							}
            							else {
HXLINE( 197)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_(")",29,00,00,00)))) {
HXLINE( 198)									expressionStack = (expressionStack - 1);
HXLINE( 199)									if ((expressionStack == 0)) {
HXLINE( 199)										goto _hx_goto_9;
            									}
HXLINE( 200)									expressionBody->push(lookahead);
            								}
            								else {
HXLINE( 201)									expressionBody->push(lookahead);
            								}
            							}
HXLINE( 202)							i = (i + 1);
            						}
            						_hx_goto_9:;
HXLINE( 205)						if (((i + 1) == pre->length)) {
HXLINE( 206)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed expression, starting at line ",18,03,d6,b2) + expressionStartLine)),null());
HXLINE( 207)							return null();
            						}
HXLINE( 209)						post->push(::little::parser::ParserTokens_obj::Expression(::little::parser::Parser_obj::mergeExpressions(expressionBody),null()));
HXLINE( 210)						i = (i + 1);
            					}
            					else {
HXLINE( 216)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 215)					::String name = token->_hx_getString(0);
HXDLIN( 215)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 215)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 215)					{
HXLINE( 215)						int _g = 0;
HXDLIN( 215)						int _g1 = params->length;
HXDLIN( 215)						while((_g < _g1)){
HXLINE( 215)							_g = (_g + 1);
HXDLIN( 215)							int i1 = (_g - 1);
HXDLIN( 215)							{
HXLINE( 215)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 215)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 215)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 216)					post->push(token);
            				}
            			}
HXLINE( 218)			i = (i + 1);
            		}
HXLINE( 221)		::little::parser::Parser_obj::resetLines();
HXLINE( 222)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeExpressions,return )

::Array< ::Dynamic> Parser_obj::mergePropertyOperations(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_234_mergePropertyOperations)
HXLINE( 236)		if (::hx::IsNull( pre )) {
HXLINE( 236)			return null();
            		}
HXLINE( 237)		bool _hx_tmp;
HXDLIN( 237)		if ((pre->length == 1)) {
HXLINE( 237)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 237)			_hx_tmp = false;
            		}
HXDLIN( 237)		if (_hx_tmp) {
HXLINE( 237)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 239)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 240)		int i = 0;
HXLINE( 241)		while((i < pre->length)){
HXLINE( 243)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 244)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 245)					int line = token->_hx_getInt(0);
HXDLIN( 245)					{
HXLINE( 245)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 245)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 246)					::String module = token->_hx_getString(0);
HXDLIN( 246)					{
HXLINE( 246)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 246)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 247)					::little::parser::Parser_obj::nextPart();
HXDLIN( 247)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 307)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 307)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 307)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergePropertyOperations(parts);
HXDLIN( 307)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 306)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 306)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 306)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergePropertyOperations(body);
HXDLIN( 306)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 248)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN) == true)) {
HXLINE( 249)						if (((i + 1) >= pre->length)) {
HXLINE( 250)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the end of file, block or expression.",e8,e8,19,3f)),HX_("Parser",ff,10,1d,22));
HXLINE( 251)							return null();
            						}
HXLINE( 253)						if ((post->length == 0)) {
HXLINE( 254)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of file, block or expression.",af,27,2e,fc)),HX_("Parser",ff,10,1d,22));
HXLINE( 255)							return null();
            						}
HXLINE( 257)						 ::little::parser::ParserTokens lookbehind = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 258)						if (::hx::IsNull( lookbehind )) {
HXLINE( 301)							i = (i + 1);
HXDLIN( 301)							 ::little::parser::ParserTokens field = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 302)							post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field));
            						}
            						else {
HXLINE( 258)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 259)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 260)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 261)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 259)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 260)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 261)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 260)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 261)									return null();
            								}
            								break;
            								case (int)12: {
HXLINE( 263)									::Array< ::Dynamic> _g2 = lookbehind->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 263)									 ::little::parser::ParserTokens _g3 = lookbehind->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 263)									{
HXLINE( 264)										i = (i + 1);
HXDLIN( 264)										 ::little::parser::ParserTokens field1 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 270)										::Array< ::Dynamic> beforePropertyCalls = ::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind);
HXLINE( 271)										while((post->length > 0)){
HXLINE( 272)											 ::little::parser::ParserTokens last = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 273)											if (::hx::IsNull( last )) {
HXLINE( 284)												post->push(last);
HXLINE( 285)												goto _hx_goto_13;
            											}
            											else {
HXLINE( 273)												switch((int)(last->_hx_getIndex())){
            													case (int)8: {
HXLINE( 274)														::String _g4 = last->_hx_getString(0);
HXLINE( 275)														beforePropertyCalls->push(last);
HXLINE( 276)														goto _hx_goto_13;
            													}
            													break;
            													case (int)12: {
HXLINE( 282)														::Array< ::Dynamic> parts1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 282)														 ::little::parser::ParserTokens type2 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 282)														::Array< ::Dynamic> _hx_tmp3 = ::little::parser::Parser_obj::mergePropertyOperations(parts1);
HXDLIN( 282)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp3,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            													}
            													break;
            													case (int)13: {
HXLINE( 278)														::Array< ::Dynamic> body1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 278)														 ::little::parser::ParserTokens type3 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 279)														::Array< ::Dynamic> _hx_tmp4 = ::little::parser::Parser_obj::mergePropertyOperations(body1);
HXDLIN( 279)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Block(_hx_tmp4,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 280)														goto _hx_goto_13;
            													}
            													break;
            													case (int)15: {
HXLINE( 274)														 ::little::parser::ParserTokens _g5 = last->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 274)														 ::little::parser::ParserTokens _g6 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 275)														beforePropertyCalls->push(last);
HXLINE( 276)														goto _hx_goto_13;
            													}
            													break;
            													default:{
HXLINE( 284)														post->push(last);
HXLINE( 285)														goto _hx_goto_13;
            													}
            												}
            											}
            										}
            										_hx_goto_13:;
HXLINE( 290)										 ::little::parser::ParserTokens parent = lookbehind;
HXLINE( 292)										if ((beforePropertyCalls->length > 0)) {
HXLINE( 293)											parent = beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 294)											while((beforePropertyCalls->length > 0)){
HXLINE( 295)												parent = ::little::parser::ParserTokens_obj::FunctionCall(parent,beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >());
            											}
            										}
HXLINE( 298)										post->push(::little::parser::ParserTokens_obj::PropertyAccess(parent,field1));
            									}
            								}
            								break;
            								default:{
HXLINE( 301)									i = (i + 1);
HXDLIN( 301)									 ::little::parser::ParserTokens field2 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 302)									post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 309)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 308)					::String name = token->_hx_getString(0);
HXDLIN( 308)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 308)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 308)					{
HXLINE( 308)						int _g7 = 0;
HXDLIN( 308)						int _g8 = params->length;
HXDLIN( 308)						while((_g7 < _g8)){
HXLINE( 308)							_g7 = (_g7 + 1);
HXDLIN( 308)							int i1 = (_g7 - 1);
HXDLIN( 308)							{
HXLINE( 308)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 308)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 308)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 309)					post->push(token);
            				}
            			}
HXLINE( 311)			i = (i + 1);
            		}
HXLINE( 314)		::little::parser::Parser_obj::resetLines();
HXLINE( 315)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergePropertyOperations,return )

::Array< ::Dynamic> Parser_obj::mergeTypeDecls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_321_mergeTypeDecls)
HXLINE( 323)		if (::hx::IsNull( pre )) {
HXLINE( 323)			return null();
            		}
HXLINE( 324)		bool _hx_tmp;
HXDLIN( 324)		if ((pre->length == 1)) {
HXLINE( 324)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 324)			_hx_tmp = false;
            		}
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 324)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 326)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 328)		int i = 0;
HXLINE( 329)		while((i < pre->length)){
HXLINE( 330)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 331)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 332)					int line = token->_hx_getInt(0);
HXDLIN( 332)					{
HXLINE( 332)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 332)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 333)					::String module = token->_hx_getString(0);
HXDLIN( 333)					{
HXLINE( 333)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 333)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 334)					::little::parser::Parser_obj::nextPart();
HXDLIN( 334)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 335)					::String word = token->_hx_getString(0);
HXLINE( 336)					bool _hx_tmp1;
HXDLIN( 336)					if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 336)						_hx_tmp1 = ((i + 1) < pre->length);
            					}
            					else {
HXLINE( 336)						_hx_tmp1 = false;
            					}
HXDLIN( 336)					if (_hx_tmp1) {
HXLINE( 337)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 338)						post->push(::little::parser::ParserTokens_obj::TypeDeclaration(null(),::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 339)						i = (i + 1);
            					}
            					else {
HXLINE( 340)						if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 342)							if (((i + 1) == pre->length)) {
HXLINE( 343)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Incomplete type declaration, make sure to input a type after the `",fe,76,87,0d) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_("`.",ce,53,00,00))),null());
HXLINE( 344)								return null();
            							}
            						}
            						else {
HXLINE( 347)							post->push(token);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 350)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 350)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 350)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeTypeDecls(parts);
HXDLIN( 350)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp2,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 351)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 351)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 351)					::Array< ::Dynamic> _hx_tmp3 = ::little::parser::Parser_obj::mergeTypeDecls(body);
HXDLIN( 351)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp3,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 352)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 352)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 352)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 352)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp4,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 353)					::String name1 = token->_hx_getString(0);
HXDLIN( 353)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 353)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 353)					{
HXLINE( 353)						int _g = 0;
HXDLIN( 353)						int _g1 = params->length;
HXDLIN( 353)						while((_g < _g1)){
HXLINE( 353)							_g = (_g + 1);
HXDLIN( 353)							int i1 = (_g - 1);
HXDLIN( 353)							{
HXLINE( 353)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 353)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 353)					post->push(::little::parser::ParserTokens_obj::Custom(name1,result));
            				}
            				break;
            				default:{
HXLINE( 354)					post->push(token);
            				}
            			}
HXLINE( 356)			i = (i + 1);
            		}
HXLINE( 359)		::little::parser::Parser_obj::resetLines();
HXLINE( 360)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeTypeDecls,return )

::Array< ::Dynamic> Parser_obj::mergeComplexStructures(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_370_mergeComplexStructures)
HXLINE( 372)		if (::hx::IsNull( pre )) {
HXLINE( 372)			return null();
            		}
HXLINE( 373)		bool _hx_tmp;
HXDLIN( 373)		if ((pre->length == 1)) {
HXLINE( 373)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 373)			_hx_tmp = false;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 373)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 375)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 377)		 ::little::parser::ParserTokens currentDoc = null();
HXLINE( 378)		int i = 0;
HXLINE( 379)		while((i < pre->length)){
HXLINE( 380)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 382)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 383)					int line = token->_hx_getInt(0);
HXDLIN( 383)					{
HXLINE( 383)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 383)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 384)					::String module = token->_hx_getString(0);
HXDLIN( 384)					{
HXLINE( 384)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 384)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 385)					::little::parser::Parser_obj::nextPart();
HXDLIN( 385)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 531)					::String _g = token->_hx_getString(0);
HXLINE( 387)					{
HXLINE( 507)						bool _hx_tmp1;
HXLINE( 442)						bool _hx_tmp2;
HXLINE( 387)						if (((_g == ::little::Little_obj::keywords->VARIABLE_DECLARATION) == true)) {
HXLINE( 388)							i = (i + 1);
HXLINE( 389)							if ((i >= pre->length)) {
HXLINE( 390)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
HXLINE( 391)								return null();
            							}
HXLINE( 394)							 ::little::parser::ParserTokens name = null();
HXLINE( 395)							 ::little::parser::ParserTokens type = null();
HXLINE( 397)							while((i < pre->length)){
HXLINE( 398)								 ::little::parser::ParserTokens lookahead = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 399)								switch((int)(lookahead->_hx_getIndex())){
            									case (int)0: {
HXLINE( 408)										int _g1 = lookahead->_hx_getInt(0);
HXDLIN( 408)										i = (i - 1);
HXDLIN( 408)										goto _hx_goto_21;
            									}
            									break;
            									case (int)1: {
HXLINE( 408)										::String _g2 = lookahead->_hx_getString(0);
HXDLIN( 408)										i = (i - 1);
HXDLIN( 408)										goto _hx_goto_21;
            									}
            									break;
            									case (int)2: {
HXLINE( 408)										i = (i - 1);
HXDLIN( 408)										goto _hx_goto_21;
            									}
            									break;
            									case (int)9: {
HXLINE( 400)										 ::little::parser::ParserTokens _g3 = lookahead->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 400)										 ::little::parser::ParserTokens typeToken = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 401)										if (::hx::IsNull( name )) {
HXLINE( 402)											::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name before type declaration.",64,1e,a6,f5)),HX_("Parser",ff,10,1d,22));
HXLINE( 403)											return null();
            										}
HXLINE( 405)										type = typeToken;
HXLINE( 406)										goto _hx_goto_21;
            									}
            									break;
            									case (int)12: {
HXLINE( 417)										::Array< ::Dynamic> body = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 417)										 ::little::parser::ParserTokens type1 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 418)										if (::hx::IsNull( name )) {
HXLINE( 418)											::Array< ::Dynamic> name1 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 418)											name = ::little::parser::ParserTokens_obj::Expression(name1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 419)											if (::hx::IsNull( type1 )) {
HXLINE( 419)												::Array< ::Dynamic> type2 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 419)												type1 = ::little::parser::ParserTokens_obj::Expression(type2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 421)												i = (i - 1);
HXLINE( 422)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)13: {
HXLINE( 409)										::Array< ::Dynamic> body1 = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 409)										 ::little::parser::ParserTokens type3 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 410)										if (::hx::IsNull( name )) {
HXLINE( 410)											::Array< ::Dynamic> name2 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 410)											name = ::little::parser::ParserTokens_obj::Block(name2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 411)											if (::hx::IsNull( type3 )) {
HXLINE( 411)												::Array< ::Dynamic> type4 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 411)												type3 = ::little::parser::ParserTokens_obj::Block(type4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 413)												i = (i - 1);
HXLINE( 414)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)16: {
HXLINE( 408)										if ((lookahead->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 408)											i = (i - 1);
HXDLIN( 408)											goto _hx_goto_21;
            										}
            										else {
HXLINE( 426)											if (::hx::IsNull( name )) {
HXLINE( 426)												name = lookahead;
            											}
            											else {
HXLINE( 427)												bool _hx_tmp3;
HXDLIN( 427)												if (::hx::IsNull( type )) {
HXLINE( 427)													::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 427)													::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 427)													{
HXLINE( 427)														int _g4 = 0;
HXDLIN( 427)														int _g5 = _this->length;
HXDLIN( 427)														while((_g4 < _g5)){
HXLINE( 427)															_g4 = (_g4 + 1);
HXDLIN( 427)															int i1 = (_g4 - 1);
HXDLIN( 427)															{
HXLINE( 427)																::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 427)																result->__unsafe_set(i1,inValue);
            															}
            														}
            													}
HXDLIN( 427)													_hx_tmp3 = result->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            												}
            												else {
HXLINE( 427)													_hx_tmp3 = false;
            												}
HXDLIN( 427)												if (_hx_tmp3) {
HXLINE( 427)													type = lookahead;
            												}
            												else {
HXLINE( 429)													i = (i - 1);
HXLINE( 430)													goto _hx_goto_21;
            												}
            											}
            										}
            									}
            									break;
            									default:{
HXLINE( 426)										if (::hx::IsNull( name )) {
HXLINE( 426)											name = lookahead;
            										}
            										else {
HXLINE( 427)											bool _hx_tmp4;
HXDLIN( 427)											if (::hx::IsNull( type )) {
HXLINE( 427)												::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 427)												::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 427)												{
HXLINE( 427)													int _g6 = 0;
HXDLIN( 427)													int _g7 = _this1->length;
HXDLIN( 427)													while((_g6 < _g7)){
HXLINE( 427)														_g6 = (_g6 + 1);
HXDLIN( 427)														int i2 = (_g6 - 1);
HXDLIN( 427)														{
HXLINE( 427)															::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 427)															result1->__unsafe_set(i2,inValue1);
            														}
            													}
            												}
HXDLIN( 427)												_hx_tmp4 = result1->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            											}
            											else {
HXLINE( 427)												_hx_tmp4 = false;
            											}
HXDLIN( 427)											if (_hx_tmp4) {
HXLINE( 427)												type = lookahead;
            											}
            											else {
HXLINE( 429)												i = (i - 1);
HXLINE( 430)												goto _hx_goto_21;
            											}
            										}
            									}
            								}
HXLINE( 434)								i = (i + 1);
            							}
            							_hx_goto_21:;
HXLINE( 436)							if (::hx::IsNull( name )) {
HXLINE( 437)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
            							}
HXLINE( 439)							post->push(::little::parser::ParserTokens_obj::Variable(name,type,currentDoc));
HXLINE( 440)							currentDoc = null();
            						}
            						else {
HXLINE( 442)							_hx_tmp2 = (_g == ::little::Little_obj::keywords->FUNCTION_DECLARATION);
HXDLIN( 442)							if ((_hx_tmp2 == true)) {
HXLINE( 443)								i = (i + 1);
HXLINE( 444)								if ((i >= pre->length)) {
HXLINE( 445)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name, function is cut off by the end of the file, block or expression.",01,f6,a5,95)),HX_("Parser",ff,10,1d,22));
HXLINE( 446)									return null();
            								}
HXLINE( 448)								if (((i + 1) >= pre->length)) {
HXLINE( 449)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameter body, function is cut off by the end of the file, block or expression.",2f,91,cb,1a)),HX_("Parser",ff,10,1d,22));
HXLINE( 450)									return null();
            								}
HXLINE( 453)								 ::little::parser::ParserTokens name3 = null();
HXLINE( 454)								 ::little::parser::ParserTokens params = null();
HXLINE( 455)								 ::little::parser::ParserTokens type5 = null();
HXLINE( 456)								while((i < pre->length)){
HXLINE( 457)									 ::little::parser::ParserTokens lookahead1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 458)									switch((int)(lookahead1->_hx_getIndex())){
            										case (int)9: {
HXLINE( 459)											 ::little::parser::ParserTokens _g8 = lookahead1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 459)											 ::little::parser::ParserTokens typeToken1 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 460)											if (::hx::IsNull( name3 )) {
HXLINE( 461)												::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters before type declaration.",7f,98,8f,9a)),HX_("Parser",ff,10,1d,22));
HXLINE( 462)												return null();
            											}
            											else {
HXLINE( 464)												if (::hx::IsNull( params )) {
HXLINE( 465)													::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters before type declaration.",81,b3,5a,87)),HX_("Parser",ff,10,1d,22));
HXLINE( 466)													return null();
            												}
            											}
HXLINE( 468)											type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 469)											goto _hx_goto_24;
            										}
            										break;
            										case (int)12: {
HXLINE( 480)											::Array< ::Dynamic> body2 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 480)											 ::little::parser::ParserTokens type6 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 481)											if (::hx::IsNull( name3 )) {
HXLINE( 481)												::Array< ::Dynamic> name4 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 481)												name3 = ::little::parser::ParserTokens_obj::Expression(name4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 482)												if (::hx::IsNull( params )) {
HXLINE( 482)													::Array< ::Dynamic> params1 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 482)													params = ::little::parser::ParserTokens_obj::Expression(params1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 483)													if (::hx::IsNull( type6 )) {
HXLINE( 483)														::Array< ::Dynamic> type7 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 483)														type6 = ::little::parser::ParserTokens_obj::Expression(type7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 485)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            										break;
            										case (int)13: {
HXLINE( 472)											::Array< ::Dynamic> body3 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 472)											 ::little::parser::ParserTokens type8 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 473)											if (::hx::IsNull( name3 )) {
HXLINE( 473)												::Array< ::Dynamic> name5 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 473)												name3 = ::little::parser::ParserTokens_obj::Block(name5,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 474)												if (::hx::IsNull( params )) {
HXLINE( 474)													::Array< ::Dynamic> params2 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 474)													params = ::little::parser::ParserTokens_obj::Block(params2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 475)													if (::hx::IsNull( type8 )) {
HXLINE( 475)														::Array< ::Dynamic> type9 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 475)														type8 = ::little::parser::ParserTokens_obj::Block(type9,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 477)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            										break;
            										case (int)16: {
HXLINE( 471)											if ((lookahead1->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 471)												i = (i - 1);
HXDLIN( 471)												goto _hx_goto_24;
            											}
            											else {
HXLINE( 489)												if (::hx::IsNull( name3 )) {
HXLINE( 489)													name3 = lookahead1;
            												}
            												else {
HXLINE( 490)													if (::hx::IsNull( params )) {
HXLINE( 490)														params = lookahead1;
            													}
            													else {
HXLINE( 491)														bool _hx_tmp5;
HXDLIN( 491)														if (::hx::IsNull( type5 )) {
HXLINE( 491)															_hx_tmp5 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            														}
            														else {
HXLINE( 491)															_hx_tmp5 = false;
            														}
HXDLIN( 491)														if (_hx_tmp5) {
HXLINE( 491)															type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            														}
            														else {
HXLINE( 493)															goto _hx_goto_24;
            														}
            													}
            												}
            											}
            										}
            										break;
            										default:{
HXLINE( 489)											if (::hx::IsNull( name3 )) {
HXLINE( 489)												name3 = lookahead1;
            											}
            											else {
HXLINE( 490)												if (::hx::IsNull( params )) {
HXLINE( 490)													params = lookahead1;
            												}
            												else {
HXLINE( 491)													bool _hx_tmp6;
HXDLIN( 491)													if (::hx::IsNull( type5 )) {
HXLINE( 491)														_hx_tmp6 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            													}
            													else {
HXLINE( 491)														_hx_tmp6 = false;
            													}
HXDLIN( 491)													if (_hx_tmp6) {
HXLINE( 491)														type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            													}
            													else {
HXLINE( 493)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            									}
HXLINE( 497)									i = (i + 1);
            								}
            								_hx_goto_24:;
HXLINE( 499)								if (::hx::IsNull( name3 )) {
HXLINE( 500)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters, function is cut off by the end of the file, block or expression.",e2,79,3a,ec)),HX_("Parser",ff,10,1d,22));
            								}
            								else {
HXLINE( 501)									if (::hx::IsNull( params )) {
HXLINE( 502)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters, function is cut off by the end of the file, block or expression.",a0,a6,fc,8b)),HX_("Parser",ff,10,1d,22));
            									}
            								}
HXLINE( 504)								post->push(::little::parser::ParserTokens_obj::Function(name3,params,type5,currentDoc));
HXLINE( 505)								currentDoc = null();
            							}
            							else {
HXLINE( 507)								_hx_tmp1 = (_g == ::little::Little_obj::keywords->FUNCTION_RETURN);
HXDLIN( 507)								if ((_hx_tmp1 == true)) {
HXLINE( 508)									i = (i + 1);
HXLINE( 509)									if ((i >= pre->length)) {
HXLINE( 510)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing return value, value is cut off by the end of the file, block or expression.",fe,14,08,44)),HX_("Parser",ff,10,1d,22));
HXLINE( 511)										return null();
            									}
HXLINE( 514)									::Array< ::Dynamic> valueToReturn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 515)									while((i < pre->length)){
HXLINE( 516)										 ::little::parser::ParserTokens lookahead2 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 517)										switch((int)(lookahead2->_hx_getIndex())){
            											case (int)0: {
HXLINE( 518)												int _g9 = lookahead2->_hx_getInt(0);
HXDLIN( 518)												i = (i - 1);
HXDLIN( 518)												goto _hx_goto_25;
            											}
            											break;
            											case (int)1: {
HXLINE( 518)												::String _g10 = lookahead2->_hx_getString(0);
HXDLIN( 518)												i = (i - 1);
HXDLIN( 518)												goto _hx_goto_25;
            											}
            											break;
            											case (int)2: {
HXLINE( 518)												i = (i - 1);
HXDLIN( 518)												goto _hx_goto_25;
            											}
            											break;
            											case (int)12: {
HXLINE( 522)												::Array< ::Dynamic> body4 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 522)												 ::little::parser::ParserTokens type10 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 523)												::Array< ::Dynamic> _hx_tmp7 = ::little::parser::Parser_obj::mergeComplexStructures(body4);
HXDLIN( 523)												valueToReturn->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type10))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											case (int)13: {
HXLINE( 519)												::Array< ::Dynamic> body5 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 519)												 ::little::parser::ParserTokens type11 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 520)												::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeComplexStructures(body5);
HXDLIN( 520)												valueToReturn->push(::little::parser::ParserTokens_obj::Block(_hx_tmp8,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type11))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											default:{
HXLINE( 525)												valueToReturn->push(lookahead2);
            											}
            										}
HXLINE( 527)										i = (i + 1);
            									}
            									_hx_goto_25:;
HXLINE( 529)									 ::little::parser::ParserTokens _hx_tmp9;
HXDLIN( 529)									if ((valueToReturn->length == 1)) {
HXLINE( 529)										_hx_tmp9 = valueToReturn->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            									}
            									else {
HXLINE( 529)										_hx_tmp9 = ::little::parser::ParserTokens_obj::Expression(valueToReturn->copy(),null());
            									}
HXDLIN( 529)									post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp9,null()));
            								}
            								else {
HXLINE( 532)									i = (i + 1);
HXLINE( 534)									 ::little::parser::ParserTokens name6 = ::little::parser::ParserTokens_obj::Identifier(::Type_obj::enumParameters(token)->__get(0));
HXLINE( 535)									 ::little::parser::ParserTokens exp = null();
HXLINE( 536)									 ::little::parser::ParserTokens body6 = null();
HXLINE( 538)									int fallback = (i - 1);
HXLINE( 540)									while(::hx::IsNull( body6 )){
HXLINE( 542)										if ((i >= pre->length)) {
HXLINE( 543)											i = fallback;
HXLINE( 544)											goto _hx_goto_26;
            										}
HXLINE( 546)										 ::little::parser::ParserTokens lookahead3 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 547)										switch((int)(lookahead3->_hx_getIndex())){
            											case (int)0: {
HXLINE( 548)												int _g11 = lookahead3->_hx_getInt(0);
HXLINE( 549)												bool _hx_tmp10;
HXDLIN( 549)												if (::hx::IsNotNull( exp )) {
HXLINE( 549)													_hx_tmp10 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 549)													_hx_tmp10 = false;
            												}
HXDLIN( 549)												if (_hx_tmp10) {
HXLINE( 549)													goto _hx_goto_26;
            												}
HXLINE( 550)												i = fallback;
HXLINE( 551)												goto _hx_goto_26;
            											}
            											break;
            											case (int)1: {
HXLINE( 548)												::String _g12 = lookahead3->_hx_getString(0);
HXLINE( 549)												bool _hx_tmp11;
HXDLIN( 549)												if (::hx::IsNotNull( exp )) {
HXLINE( 549)													_hx_tmp11 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 549)													_hx_tmp11 = false;
            												}
HXDLIN( 549)												if (_hx_tmp11) {
HXLINE( 549)													goto _hx_goto_26;
            												}
HXLINE( 550)												i = fallback;
HXLINE( 551)												goto _hx_goto_26;
            											}
            											break;
            											case (int)2: {
HXLINE( 549)												bool _hx_tmp12;
HXDLIN( 549)												if (::hx::IsNotNull( exp )) {
HXLINE( 549)													_hx_tmp12 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 549)													_hx_tmp12 = false;
            												}
HXDLIN( 549)												if (_hx_tmp12) {
HXLINE( 549)													goto _hx_goto_26;
            												}
HXLINE( 550)												i = fallback;
HXLINE( 551)												goto _hx_goto_26;
            											}
            											break;
            											case (int)12: {
HXLINE( 560)												::Array< ::Dynamic> parts = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 560)												 ::little::parser::ParserTokens type12 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 561)												if (::hx::IsNull( exp )) {
HXLINE( 561)													exp = ::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeComplexStructures(parts));
            												}
            												else {
HXLINE( 562)													if (::hx::IsNull( body6 )) {
HXLINE( 563)														i = fallback;
HXLINE( 564)														goto _hx_goto_26;
            													}
            												}
            											}
            											break;
            											case (int)13: {
HXLINE( 553)												::Array< ::Dynamic> b = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 553)												 ::little::parser::ParserTokens type13 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 554)												if (::hx::IsNull( exp )) {
HXLINE( 555)													i = fallback;
HXLINE( 556)													goto _hx_goto_26;
            												}
            												else {
HXLINE( 558)													if (::hx::IsNull( body6 )) {
HXLINE( 558)														::Array< ::Dynamic> body7 = ::little::parser::Parser_obj::mergeComplexStructures(b);
HXDLIN( 558)														body6 = ::little::parser::ParserTokens_obj::Block(body7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type13))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            												}
            											}
            											break;
            											default:{
HXLINE( 568)												bool _hx_tmp13;
HXDLIN( 568)												if (::hx::IsNotNull( exp )) {
HXLINE( 568)													_hx_tmp13 = ::hx::IsNull( body6 );
            												}
            												else {
HXLINE( 568)													_hx_tmp13 = true;
            												}
HXDLIN( 568)												if (_hx_tmp13) {
HXLINE( 569)													i = fallback;
HXLINE( 570)													goto _hx_goto_26;
            												}
            											}
            										}
HXLINE( 574)										i = (i + 1);
            									}
            									_hx_goto_26:;
HXLINE( 576)									if ((i == fallback)) {
HXLINE( 577)										post->push(token);
            									}
            									else {
HXLINE( 579)										i = (i - 1);
HXLINE( 580)										post->push(::little::parser::ParserTokens_obj::ConditionCall(name6,exp,body6));
HXLINE( 581)										currentDoc = null();
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 584)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 584)					 ::little::parser::ParserTokens type14 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 584)					::Array< ::Dynamic> _hx_tmp14 = ::little::parser::Parser_obj::mergeComplexStructures(parts1);
HXDLIN( 584)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp14,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type14))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 585)					::Array< ::Dynamic> body8 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 585)					 ::little::parser::ParserTokens type15 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 585)					::Array< ::Dynamic> _hx_tmp15 = ::little::parser::Parser_obj::mergeComplexStructures(body8);
HXDLIN( 585)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp15,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type15))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 586)					 ::little::parser::ParserTokens name7 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 586)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 586)					 ::little::parser::ParserTokens _hx_tmp16 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,name7))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 586)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp16,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)20: {
HXLINE( 386)					::String doc = token->_hx_getString(0);
HXDLIN( 386)					currentDoc = token;
            				}
            				break;
            				case (int)25: {
HXLINE( 587)					::String name8 = token->_hx_getString(0);
HXDLIN( 587)					::Array< ::Dynamic> params3 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 587)					::Array< ::Dynamic> result2 = ::Array_obj< ::Dynamic>::__new(params3->length);
HXDLIN( 587)					{
HXLINE( 587)						int _g13 = 0;
HXDLIN( 587)						int _g14 = params3->length;
HXDLIN( 587)						while((_g13 < _g14)){
HXLINE( 587)							_g13 = (_g13 + 1);
HXDLIN( 587)							int i3 = (_g13 - 1);
HXDLIN( 587)							{
HXLINE( 587)								 ::little::parser::ParserTokens inValue2 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params3,i3)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 587)								result2->__unsafe_set(i3,inValue2);
            							}
            						}
            					}
HXDLIN( 587)					post->push(::little::parser::ParserTokens_obj::Custom(name8,result2));
            				}
            				break;
            				default:{
HXLINE( 588)					post->push(token);
            				}
            			}
HXLINE( 590)			i = (i + 1);
            		}
HXLINE( 593)		::little::parser::Parser_obj::resetLines();
HXLINE( 594)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeComplexStructures,return )

::Array< ::Dynamic> Parser_obj::mergeCalls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_600_mergeCalls)
HXLINE( 602)		if (::hx::IsNull( pre )) {
HXLINE( 602)			return null();
            		}
HXLINE( 603)		bool _hx_tmp;
HXDLIN( 603)		if ((pre->length == 1)) {
HXLINE( 603)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 603)			_hx_tmp = false;
            		}
HXDLIN( 603)		if (_hx_tmp) {
HXLINE( 603)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 605)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 607)		int i = 0;
HXLINE( 608)		while((i < pre->length)){
HXLINE( 610)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 611)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 612)					int line = token->_hx_getInt(0);
HXDLIN( 612)					{
HXLINE( 612)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 612)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 613)					::String module = token->_hx_getString(0);
HXDLIN( 613)					{
HXLINE( 613)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 613)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 614)					::little::parser::Parser_obj::nextPart();
HXDLIN( 614)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 632)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 632)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 632)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 632)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 632)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 632)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 633)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 633)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 634)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 635)					 ::little::parser::ParserTokens value = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 635)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 635)					 ::little::parser::ParserTokens _hx_tmp8 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 635)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp8,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 615)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 615)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 615)					{
HXLINE( 616)						parts = ::little::parser::Parser_obj::mergeCalls(parts);
HXLINE( 617)						if ((i == 0)) {
HXLINE( 618)							post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            						}
            						else {
HXLINE( 620)							 ::little::parser::ParserTokens lookbehind = pre->__get((i - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 621)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 622)									int _g = lookbehind->_hx_getInt(0);
HXDLIN( 622)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)1: {
HXLINE( 622)									::String _g1 = lookbehind->_hx_getString(0);
HXDLIN( 622)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)2: {
HXLINE( 622)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)16: {
HXLINE( 622)									::String _g2 = lookbehind->_hx_getString(0);
HXDLIN( 622)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								default:{
HXLINE( 624)									 ::little::parser::ParserTokens previous = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 625)									token = ::little::parser::ParserTokens_obj::PartArray(parts);
HXLINE( 626)									post->push(::little::parser::ParserTokens_obj::FunctionCall(previous,token));
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 631)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 631)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 631)					::Array< ::Dynamic> _hx_tmp9 = ::little::parser::Parser_obj::mergeCalls(body1);
HXDLIN( 631)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp9,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 637)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 637)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeCalls(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 636)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 636)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 636)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 636)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp10,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 638)					::String name4 = token->_hx_getString(0);
HXDLIN( 638)					::Array< ::Dynamic> params1 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 638)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params1->length);
HXDLIN( 638)					{
HXLINE( 638)						int _g3 = 0;
HXDLIN( 638)						int _g4 = params1->length;
HXDLIN( 638)						while((_g3 < _g4)){
HXLINE( 638)							_g3 = (_g3 + 1);
HXDLIN( 638)							int i1 = (_g3 - 1);
HXDLIN( 638)							{
HXLINE( 638)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params1,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 638)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 638)					post->push(::little::parser::ParserTokens_obj::Custom(name4,result));
            				}
            				break;
            				default:{
HXLINE( 639)					post->push(token);
            				}
            			}
HXLINE( 641)			i = (i + 1);
            		}
HXLINE( 644)		::little::parser::Parser_obj::resetLines();
HXLINE( 645)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeCalls,return )

::Array< ::Dynamic> Parser_obj::mergeWrites(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_651_mergeWrites)
HXLINE( 653)		if (::hx::IsNull( pre )) {
HXLINE( 653)			return null();
            		}
HXLINE( 654)		bool _hx_tmp;
HXDLIN( 654)		if ((pre->length == 1)) {
HXLINE( 654)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 654)			_hx_tmp = false;
            		}
HXDLIN( 654)		if (_hx_tmp) {
HXLINE( 654)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 656)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 658)		 ::little::parser::ParserTokens potentialAssignee = ::little::parser::ParserTokens_obj::NullValue_dyn();
HXLINE( 659)		int i = 0;
HXLINE( 660)		while((i < pre->length)){
HXLINE( 661)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 662)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 663)					int line = token->_hx_getInt(0);
HXDLIN( 663)					{
HXLINE( 664)						::little::parser::Parser_obj::setLine(line);
HXLINE( 665)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 665)							post->push(potentialAssignee);
            						}
HXLINE( 666)						potentialAssignee = token;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 668)					::String module = token->_hx_getString(0);
HXDLIN( 668)					{
HXLINE( 669)						::little::parser::Parser_obj::set_module(module);
HXLINE( 670)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 670)							post->push(potentialAssignee);
            						}
HXLINE( 671)						potentialAssignee = token;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 674)					::little::parser::Parser_obj::nextPart();
HXLINE( 675)					if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 675)						post->push(potentialAssignee);
            					}
HXLINE( 676)					potentialAssignee = token;
            				}
            				break;
            				case (int)3: {
HXLINE( 725)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					{
HXLINE( 726)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 726)							post->push(potentialAssignee);
            						}
HXLINE( 727)						 ::little::parser::ParserTokens potentialAssignee1 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)						 ::little::parser::ParserTokens potentialAssignee2 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)						potentialAssignee = ::little::parser::ParserTokens_obj::Variable(potentialAssignee1,potentialAssignee2,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 729)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					{
HXLINE( 730)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 730)							post->push(potentialAssignee);
            						}
HXLINE( 731)						 ::little::parser::ParserTokens potentialAssignee3 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)						 ::little::parser::ParserTokens potentialAssignee4 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)						 ::little::parser::ParserTokens potentialAssignee5 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)						potentialAssignee = ::little::parser::ParserTokens_obj::Function(potentialAssignee3,potentialAssignee4,potentialAssignee5,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 733)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 733)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 733)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 733)					{
HXLINE( 734)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 734)							post->push(potentialAssignee);
            						}
HXLINE( 735)						 ::little::parser::ParserTokens potentialAssignee6 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 735)						 ::little::parser::ParserTokens potentialAssignee7 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 735)						potentialAssignee = ::little::parser::ParserTokens_obj::ConditionCall(potentialAssignee6,potentialAssignee7,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 741)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 741)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 741)					{
HXLINE( 742)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 742)							post->push(potentialAssignee);
            						}
HXLINE( 743)						 ::little::parser::ParserTokens potentialAssignee8 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 743)						potentialAssignee = ::little::parser::ParserTokens_obj::FunctionCall(potentialAssignee8,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 737)					 ::little::parser::ParserTokens value = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 737)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 737)					{
HXLINE( 738)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 738)							post->push(potentialAssignee);
            						}
HXLINE( 739)						 ::little::parser::ParserTokens potentialAssignee9 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 739)						potentialAssignee = ::little::parser::ParserTokens_obj::Return(potentialAssignee9,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 713)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 713)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 713)					{
HXLINE( 714)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 714)							post->push(potentialAssignee);
            						}
HXLINE( 715)						::Array< ::Dynamic> potentialAssignee10 = ::little::parser::Parser_obj::mergeWrites(parts);
HXDLIN( 715)						potentialAssignee = ::little::parser::ParserTokens_obj::Expression(potentialAssignee10,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 721)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 721)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 721)					{
HXLINE( 722)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 722)							post->push(potentialAssignee);
            						}
HXLINE( 723)						::Array< ::Dynamic> potentialAssignee11 = ::little::parser::Parser_obj::mergeWrites(body1);
HXDLIN( 723)						potentialAssignee = ::little::parser::ParserTokens_obj::Block(potentialAssignee11,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)14: {
HXLINE( 717)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 717)					{
HXLINE( 718)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 718)							post->push(potentialAssignee);
            						}
HXLINE( 719)						potentialAssignee = ::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeWrites(parts1));
            					}
            				}
            				break;
            				case (int)15: {
HXLINE( 745)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 745)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 745)					{
HXLINE( 746)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 746)							post->push(potentialAssignee);
            						}
HXLINE( 747)						 ::little::parser::ParserTokens potentialAssignee12 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 747)						potentialAssignee = ::little::parser::ParserTokens_obj::PropertyAccess(potentialAssignee12,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            					}
            				}
            				break;
            				case (int)16: {
HXLINE( 678)					if ((token->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 679)						if (((i + 1) >= pre->length)) {
HXLINE( 680)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the `=`",e7,a5,e8,a6)),HX_("Parser",ff,10,1d,22));
HXLINE( 681)							return null();
            						}
HXLINE( 684)						::Array< ::Dynamic> currentAssignee = ::Array_obj< ::Dynamic>::__new(1)->init(0,potentialAssignee);
HXLINE( 685)						 ::little::parser::ParserTokens assignees;
HXDLIN( 685)						if ((currentAssignee->length == 1)) {
HXLINE( 685)							assignees = currentAssignee->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            						}
            						else {
HXLINE( 685)							assignees = ::little::parser::ParserTokens_obj::Expression(currentAssignee->copy(),null());
            						}
HXDLIN( 685)						::Array< ::Dynamic> assignees1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,assignees);
HXLINE( 686)						currentAssignee = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 687)						 ::little::parser::ParserTokens value1;
HXLINE( 688)						while(((i + 1) < pre->length)){
HXLINE( 689)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 690)							switch((int)(lookahead->_hx_getIndex())){
            								case (int)0: {
HXLINE( 697)									int _g = lookahead->_hx_getInt(0);
HXDLIN( 697)									goto _hx_goto_33;
            								}
            								break;
            								case (int)1: {
HXLINE( 697)									::String _g1 = lookahead->_hx_getString(0);
HXDLIN( 697)									goto _hx_goto_33;
            								}
            								break;
            								case (int)2: {
HXLINE( 697)									goto _hx_goto_33;
            								}
            								break;
            								case (int)16: {
HXLINE( 692)									if ((lookahead->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 693)										 ::little::parser::ParserTokens assignee;
HXDLIN( 693)										if ((currentAssignee->length == 1)) {
HXLINE( 693)											assignee = currentAssignee->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            										}
            										else {
HXLINE( 693)											assignee = ::little::parser::ParserTokens_obj::Expression(currentAssignee->copy(),null());
            										}
HXLINE( 694)										assignees1->push(assignee);
HXLINE( 695)										currentAssignee = ::Array_obj< ::Dynamic>::__new(0);
            									}
            									else {
HXLINE( 698)										currentAssignee->push(lookahead);
            									}
            								}
            								break;
            								default:{
HXLINE( 698)									currentAssignee->push(lookahead);
            								}
            							}
HXLINE( 700)							i = (i + 1);
            						}
            						_hx_goto_33:;
HXLINE( 702)						if ((currentAssignee->length == 0)) {
HXLINE( 703)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
HXLINE( 704)							return null();
            						}
HXLINE( 707)						if ((currentAssignee->length == 1)) {
HXLINE( 707)							value1 = currentAssignee->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            						}
            						else {
HXLINE( 707)							value1 = ::little::parser::ParserTokens_obj::Expression(currentAssignee,null());
            						}
HXLINE( 708)						::Array< ::Dynamic> fValue = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value1));
HXLINE( 709)						 ::little::parser::ParserTokens v;
HXDLIN( 709)						if ((fValue->length == 1)) {
HXLINE( 709)							v = fValue->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            						}
            						else {
HXLINE( 709)							v = ::little::parser::ParserTokens_obj::Expression(fValue,null());
            						}
HXLINE( 710)						post->push(::little::parser::ParserTokens_obj::Write(assignees1,v));
HXLINE( 711)						potentialAssignee = null();
            					}
            					else {
HXLINE( 754)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 754)							post->push(potentialAssignee);
            						}
HXLINE( 755)						potentialAssignee = token;
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 749)					::String name5 = token->_hx_getString(0);
HXDLIN( 749)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 749)					{
HXLINE( 750)						if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 750)							post->push(potentialAssignee);
            						}
HXLINE( 751)						::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 751)						{
HXLINE( 751)							int _g2 = 0;
HXDLIN( 751)							int _g3 = params2->length;
HXDLIN( 751)							while((_g2 < _g3)){
HXLINE( 751)								_g2 = (_g2 + 1);
HXDLIN( 751)								int i1 = (_g2 - 1);
HXDLIN( 751)								{
HXLINE( 751)									 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 751)									result->__unsafe_set(i1,inValue);
            								}
            							}
            						}
HXDLIN( 751)						potentialAssignee = ::little::parser::ParserTokens_obj::Custom(name5,result);
            					}
            				}
            				break;
            				default:{
HXLINE( 754)					if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 754)						post->push(potentialAssignee);
            					}
HXLINE( 755)					potentialAssignee = token;
            				}
            			}
HXLINE( 760)			i = (i + 1);
            		}
HXLINE( 762)		if (::hx::IsNotNull( potentialAssignee )) {
HXLINE( 762)			post->push(potentialAssignee);
            		}
HXLINE( 763)		post->shift().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 765)		::little::parser::Parser_obj::resetLines();
HXLINE( 766)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeWrites,return )

::Array< ::Dynamic> Parser_obj::mergeValuesWithTypeDeclarations(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_772_mergeValuesWithTypeDeclarations)
HXLINE( 774)		if (::hx::IsNull( pre )) {
HXLINE( 774)			return null();
            		}
HXLINE( 775)		bool _hx_tmp;
HXDLIN( 775)		if ((pre->length == 1)) {
HXLINE( 775)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 775)			_hx_tmp = false;
            		}
HXDLIN( 775)		if (_hx_tmp) {
HXLINE( 775)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 777)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 779)		int i = (pre->length - 1);
HXLINE( 780)		while((i >= 0)){
HXLINE( 781)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 782)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 783)					int line = token->_hx_getInt(0);
HXDLIN( 783)					{
HXLINE( 783)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 783)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 784)					::String module = token->_hx_getString(0);
HXDLIN( 784)					{
HXLINE( 784)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 784)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 785)					::little::parser::Parser_obj::nextPart();
HXDLIN( 785)					post->unshift(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 804)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 804)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 804)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 804)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 804)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 804)					post->unshift(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 805)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 805)					post->unshift(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 806)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 806)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 806)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 806)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 806)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 806)					post->unshift(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 810)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 810)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 810)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(assignees);
HXDLIN( 810)					post->unshift(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)9: {
HXLINE( 786)					if (::hx::IsNull( token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >() )) {
HXLINE( 786)						 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)						{
HXLINE( 787)							i = (i - 1);
HXDLIN( 787)							if (((i + 1) <= 0)) {
HXLINE( 788)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration cut off by the start of file, block or expression.",87,ac,a0,5f)),HX_("Parser",ff,10,1d,22));
HXLINE( 789)								return null();
            							}
HXLINE( 791)							 ::little::parser::ParserTokens lookbehind = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 792)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 793)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 794)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 795)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 793)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 794)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 795)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 794)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 795)									return null();
            								}
            								break;
            								default:{
HXLINE( 798)									post->unshift(::little::parser::ParserTokens_obj::TypeDeclaration(lookbehind,type2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 813)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 809)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 809)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 809)					 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 809)					post->unshift(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp9,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 807)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 807)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 807)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 807)					post->unshift(::little::parser::ParserTokens_obj::Return(_hx_tmp10,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 803)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 803)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 803)					::Array< ::Dynamic> _hx_tmp11 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(parts);
HXDLIN( 803)					post->unshift(::little::parser::ParserTokens_obj::Expression(_hx_tmp11,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 802)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 802)					 ::little::parser::ParserTokens type5 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 802)					::Array< ::Dynamic> _hx_tmp12 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(body1);
HXDLIN( 802)					post->unshift(::little::parser::ParserTokens_obj::Block(_hx_tmp12,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 808)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 808)					post->unshift(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 811)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 811)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 811)					 ::little::parser::ParserTokens _hx_tmp13 = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 811)					post->unshift(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp13,::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 812)					::String name5 = token->_hx_getString(0);
HXDLIN( 812)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 812)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 812)					{
HXLINE( 812)						int _g2 = 0;
HXDLIN( 812)						int _g3 = params2->length;
HXDLIN( 812)						while((_g2 < _g3)){
HXLINE( 812)							_g2 = (_g2 + 1);
HXDLIN( 812)							int i1 = (_g2 - 1);
HXDLIN( 812)							{
HXLINE( 812)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeValuesWithTypeDeclarations(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 812)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 812)					post->unshift(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 813)					post->unshift(token);
            				}
            			}
HXLINE( 815)			i = (i - 1);
            		}
HXLINE( 818)		::little::parser::Parser_obj::resetLines();
HXLINE( 819)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeValuesWithTypeDeclarations,return )

::Array< ::Dynamic> Parser_obj::mergeNonBlockBodies(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_829_mergeNonBlockBodies)
HXLINE( 831)		if (::hx::IsNull( pre )) {
HXLINE( 831)			return null();
            		}
HXLINE( 832)		bool _hx_tmp;
HXDLIN( 832)		if ((pre->length == 1)) {
HXLINE( 832)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 832)			_hx_tmp = false;
            		}
HXDLIN( 832)		if (_hx_tmp) {
HXLINE( 832)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 834)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 836)		int i = 0;
HXLINE( 837)		while((i < pre->length)){
HXLINE( 838)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 839)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 840)					int line = token->_hx_getInt(0);
HXDLIN( 840)					{
HXLINE( 840)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 840)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 841)					::String module = token->_hx_getString(0);
HXDLIN( 841)					{
HXLINE( 841)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 841)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 842)					::little::parser::Parser_obj::nextPart();
HXDLIN( 842)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 862)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 862)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 862)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 862)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 862)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 862)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 863)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 863)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 864)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 864)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 864)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 864)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 864)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 864)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 867)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 867)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 867)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeNonBlockBodies(assignees);
HXDLIN( 867)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)10: {
HXLINE( 843)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					{
HXLINE( 844)						if (((i + 1) >= pre->length)) {
HXLINE( 845)							 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 845)							post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp9,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 846)							i = (i + 1);
HXLINE( 847)							continue;
            						}
HXLINE( 849)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 850)						switch((int)(lookahead->_hx_getIndex())){
            							case (int)0: {
HXLINE( 851)								int _g = lookahead->_hx_getInt(0);
HXLINE( 852)								 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 852)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp10,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)1: {
HXLINE( 851)								::String _g1 = lookahead->_hx_getString(0);
HXLINE( 852)								 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 852)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp11,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)2: {
HXLINE( 852)								 ::little::parser::ParserTokens _hx_tmp12 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 852)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp12,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)16: {
HXLINE( 851)								::String _g2 = lookahead->_hx_getString(0);
HXLINE( 852)								 ::little::parser::ParserTokens _hx_tmp13 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 852)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp13,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							default:{
HXLINE( 855)								 ::little::parser::ParserTokens _hx_tmp14 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 855)								 ::little::parser::ParserTokens _hx_tmp15 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 855)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp14,_hx_tmp15,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 856)								i = (i + 1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 865)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 865)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 865)					 ::little::parser::ParserTokens _hx_tmp16 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 865)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp16,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 861)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 861)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 861)					::Array< ::Dynamic> _hx_tmp17 = ::little::parser::Parser_obj::mergeNonBlockBodies(parts);
HXDLIN( 861)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp17,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 860)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 860)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 860)					::Array< ::Dynamic> _hx_tmp18 = ::little::parser::Parser_obj::mergeNonBlockBodies(body1);
HXDLIN( 860)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp18,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 866)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 866)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeNonBlockBodies(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 868)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 868)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 868)					 ::little::parser::ParserTokens _hx_tmp19 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 868)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp19,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 869)					::String name5 = token->_hx_getString(0);
HXDLIN( 869)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 869)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 869)					{
HXLINE( 869)						int _g3 = 0;
HXDLIN( 869)						int _g4 = params2->length;
HXDLIN( 869)						while((_g3 < _g4)){
HXLINE( 869)							_g3 = (_g3 + 1);
HXDLIN( 869)							int i1 = (_g3 - 1);
HXDLIN( 869)							{
HXLINE( 869)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 869)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 869)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 870)					post->push(token);
            				}
            			}
HXLINE( 872)			i = (i + 1);
            		}
HXLINE( 875)		::little::parser::Parser_obj::resetLines();
HXLINE( 876)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeNonBlockBodies,return )

::Array< ::Dynamic> Parser_obj::mergeElses(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_882_mergeElses)
HXLINE( 884)		if (::hx::IsNull( pre )) {
HXLINE( 884)			return null();
            		}
HXLINE( 885)		bool _hx_tmp;
HXDLIN( 885)		if ((pre->length == 1)) {
HXLINE( 885)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 885)			_hx_tmp = false;
            		}
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 885)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 887)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 889)		int i = 0;
HXLINE( 890)		while((i < pre->length)){
HXLINE( 891)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 892)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 893)					int line = token->_hx_getInt(0);
HXDLIN( 893)					{
HXLINE( 893)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 893)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 894)					::String module = token->_hx_getString(0);
HXDLIN( 894)					{
HXLINE( 894)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 894)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 895)					::little::parser::Parser_obj::nextPart();
HXDLIN( 895)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 925)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 925)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 925)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 925)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 925)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 925)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 926)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 926)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 927)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 927)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 927)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 927)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 927)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 927)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 931)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 931)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 931)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeElses(assignees);
HXDLIN( 931)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)8: {
HXLINE( 896)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->CONDITION__ELSE) == true)) {
HXLINE( 897)						bool _hx_tmp9;
HXDLIN( 897)						if ((post->length != 0)) {
HXLINE( 897)							 ::little::parser::ParserTokens token1 = post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 897)							::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::CONDITION_CALL_dyn())->copy();
HXDLIN( 897)							::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 897)							{
HXLINE( 897)								int _g = 0;
HXDLIN( 897)								int _g1 = _this->length;
HXDLIN( 897)								while((_g < _g1)){
HXLINE( 897)									_g = (_g + 1);
HXDLIN( 897)									int i1 = (_g - 1);
HXDLIN( 897)									{
HXLINE( 897)										::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 897)										result->__unsafe_set(i1,inValue);
            									}
            								}
            							}
HXDLIN( 897)							_hx_tmp9 = !(result->contains(::Type_obj::enumConstructor(token1).toLowerCase()));
            						}
            						else {
HXLINE( 897)							_hx_tmp9 = true;
            						}
HXDLIN( 897)						if (_hx_tmp9) {
HXLINE( 898)							post->push(token);
HXLINE( 899)							i = (i + 1);
HXLINE( 900)							continue;
            						}
HXLINE( 902)						if (((i + 1) >= pre->length)) {
HXLINE( 903)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Condition has no body, body may be cut off by the end of file, block or expression.",05,3f,3e,af)),HX_("Parser",ff,10,1d,22));
HXLINE( 904)							return null();
            						}
HXLINE( 906)						 ::little::parser::ParserTokens exp1 = ::Type_obj::enumParameters(post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >())->__get(1);
HXLINE( 907)						exp1 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("!=",fc,1c,00,00)))->init(2,::little::parser::ParserTokens_obj::TrueValue_dyn()),null());
HXLINE( 908)						i = (i + 1);
HXLINE( 909)						 ::little::parser::ParserTokens body1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 910)						switch((int)(body1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 915)								int _g2 = body1->_hx_getInt(0);
HXLINE( 916)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 917)								return null();
            							}
            							break;
            							case (int)1: {
HXLINE( 915)								::String _g3 = body1->_hx_getString(0);
HXLINE( 916)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 917)								return null();
            							}
            							break;
            							case (int)2: {
HXLINE( 912)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a line split, or does not exist",99,32,ec,c1))),HX_("Parser",ff,10,1d,22));
HXLINE( 913)								return null();
            							}
            							break;
            							case (int)5: {
HXLINE( 919)								 ::little::parser::ParserTokens _g4 = body1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 919)								if ((_g4->_hx_getIndex() == 8)) {
HXLINE( 919)									if ((_g4->_hx_getString(0) == HX_("if",dd,5b,00,00))) {
HXLINE( 919)										 ::little::parser::ParserTokens exp2 = body1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 919)										 ::little::parser::ParserTokens body2 = body1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 919)										 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 919)										 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("&&",40,21,00,00)))->init(2,exp2),null());
HXDLIN( 919)										 ::little::parser::ParserTokens _hx_tmp12;
HXDLIN( 919)										::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 919)										::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 919)										{
HXLINE( 919)											int _g5 = 0;
HXDLIN( 919)											int _g6 = _this1->length;
HXDLIN( 919)											while((_g5 < _g6)){
HXLINE( 919)												_g5 = (_g5 + 1);
HXDLIN( 919)												int i2 = (_g5 - 1);
HXDLIN( 919)												{
HXLINE( 919)													::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 919)													result1->__unsafe_set(i2,inValue1);
            												}
            											}
            										}
HXDLIN( 919)										if (!(result1->contains(::Type_obj::enumConstructor(body2).toLowerCase()))) {
HXLINE( 919)											_hx_tmp12 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body2),null());
            										}
            										else {
HXLINE( 919)											_hx_tmp12 = body2;
            										}
HXDLIN( 919)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp10,_hx_tmp11,_hx_tmp12));
            									}
            									else {
HXLINE( 920)										 ::little::parser::ParserTokens _hx_tmp13 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 920)										 ::little::parser::ParserTokens _hx_tmp14;
HXDLIN( 920)										::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 920)										::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 920)										{
HXLINE( 920)											int _g7 = 0;
HXDLIN( 920)											int _g8 = _this2->length;
HXDLIN( 920)											while((_g7 < _g8)){
HXLINE( 920)												_g7 = (_g7 + 1);
HXDLIN( 920)												int i3 = (_g7 - 1);
HXDLIN( 920)												{
HXLINE( 920)													::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 920)													result2->__unsafe_set(i3,inValue2);
            												}
            											}
            										}
HXDLIN( 920)										if (!(result2->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 920)											_hx_tmp14 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            										}
            										else {
HXLINE( 920)											_hx_tmp14 = body1;
            										}
HXDLIN( 920)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp13,exp1,_hx_tmp14));
            									}
            								}
            								else {
HXLINE( 920)									 ::little::parser::ParserTokens _hx_tmp15 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 920)									 ::little::parser::ParserTokens _hx_tmp16;
HXDLIN( 920)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 920)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 920)									{
HXLINE( 920)										int _g9 = 0;
HXDLIN( 920)										int _g10 = _this3->length;
HXDLIN( 920)										while((_g9 < _g10)){
HXLINE( 920)											_g9 = (_g9 + 1);
HXDLIN( 920)											int i4 = (_g9 - 1);
HXDLIN( 920)											{
HXLINE( 920)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 920)												result3->__unsafe_set(i4,inValue3);
            											}
            										}
            									}
HXDLIN( 920)									if (!(result3->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 920)										_hx_tmp16 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            									}
            									else {
HXLINE( 920)										_hx_tmp16 = body1;
            									}
HXDLIN( 920)									post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp15,exp1,_hx_tmp16));
            								}
            							}
            							break;
            							default:{
HXLINE( 920)								 ::little::parser::ParserTokens _hx_tmp17 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 920)								 ::little::parser::ParserTokens _hx_tmp18;
HXDLIN( 920)								::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 920)								::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 920)								{
HXLINE( 920)									int _g11 = 0;
HXDLIN( 920)									int _g12 = _this4->length;
HXDLIN( 920)									while((_g11 < _g12)){
HXLINE( 920)										_g11 = (_g11 + 1);
HXDLIN( 920)										int i5 = (_g11 - 1);
HXDLIN( 920)										{
HXLINE( 920)											::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 920)											result4->__unsafe_set(i5,inValue4);
            										}
            									}
            								}
HXDLIN( 920)								if (!(result4->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 920)									_hx_tmp18 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            								}
            								else {
HXLINE( 920)									_hx_tmp18 = body1;
            								}
HXDLIN( 920)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp17,exp1,_hx_tmp18));
            							}
            						}
            					}
            					else {
HXLINE( 934)						post->push(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 930)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 930)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 930)					 ::little::parser::ParserTokens _hx_tmp19 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 930)					post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp19,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 928)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 928)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 928)					 ::little::parser::ParserTokens _hx_tmp20 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 928)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp20,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 924)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 924)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 924)					::Array< ::Dynamic> _hx_tmp21 = ::little::parser::Parser_obj::mergeElses(parts);
HXDLIN( 924)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp21,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 923)					::Array< ::Dynamic> body3 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 923)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 923)					::Array< ::Dynamic> _hx_tmp22 = ::little::parser::Parser_obj::mergeElses(body3);
HXDLIN( 923)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp22,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 929)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 929)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeElses(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 932)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 932)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 932)					 ::little::parser::ParserTokens _hx_tmp23 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 932)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp23,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 933)					::String name5 = token->_hx_getString(0);
HXDLIN( 933)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 933)					::Array< ::Dynamic> result5 = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 933)					{
HXLINE( 933)						int _g13 = 0;
HXDLIN( 933)						int _g14 = params2->length;
HXDLIN( 933)						while((_g13 < _g14)){
HXLINE( 933)							_g13 = (_g13 + 1);
HXDLIN( 933)							int i6 = (_g13 - 1);
HXDLIN( 933)							{
HXLINE( 933)								 ::little::parser::ParserTokens inValue5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i6)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 933)								result5->__unsafe_set(i6,inValue5);
            							}
            						}
            					}
HXDLIN( 933)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result5));
            				}
            				break;
            				default:{
HXLINE( 934)					post->push(token);
            				}
            			}
HXLINE( 936)			i = (i + 1);
            		}
HXLINE( 939)		::little::parser::Parser_obj::resetLines();
HXLINE( 940)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeElses,return )

int Parser_obj::get_line(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_952_get_line)
HXDLIN( 952)		return ::little::Little_obj::runtime->line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_line,return )

int Parser_obj::set_line(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_953_set_line)
HXDLIN( 953)		return (::little::Little_obj::runtime->line = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_line,return )

::String Parser_obj::get_module(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_955_get_module)
HXDLIN( 955)		return ::little::Little_obj::runtime->module;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_module,return )

::String Parser_obj::set_module(::String l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_956_set_module)
HXDLIN( 956)		return (::little::Little_obj::runtime->module = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_module,return )

int Parser_obj::linePart;

void Parser_obj::setLine(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_962_setLine)
HXLINE( 963)		::little::parser::Parser_obj::set_line(l);
HXLINE( 964)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,setLine,(void))

void Parser_obj::nextPart(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_969_nextPart)
HXDLIN( 969)		::little::parser::Parser_obj::linePart++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,nextPart,(void))

void Parser_obj::resetLines(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_974_resetLines)
HXLINE( 975)		::little::parser::Parser_obj::set_line(0);
HXLINE( 976)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,resetLines,(void))


Parser_obj::Parser_obj()
{
}

bool Parser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_line() ); return true; } }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = ( parse ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_module() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setLine") ) { outValue = setLine_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_line") ) { outValue = get_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_line") ) { outValue = set_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linePart") ) { outValue = ( linePart ); return true; }
		if (HX_FIELD_EQ(inName,"nextPart") ) { outValue = nextPart_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mergeCalls") ) { outValue = mergeCalls_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeElses") ) { outValue = mergeElses_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_module") ) { outValue = get_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_module") ) { outValue = set_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetLines") ) { outValue = resetLines_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mergeBlocks") ) { outValue = mergeBlocks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeWrites") ) { outValue = mergeWrites_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mergeTypeDecls") ) { outValue = mergeTypeDecls_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mergeExpressions") ) { outValue = mergeExpressions_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeNonBlockBodies") ) { outValue = mergeNonBlockBodies_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mergeComplexStructures") ) { outValue = mergeComplexStructures_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { outValue = ( additionalParsingLevels ); return true; }
		if (HX_FIELD_EQ(inName,"mergePropertyOperations") ) { outValue = mergePropertyOperations_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"mergeValuesWithTypeDeclarations") ) { outValue = mergeValuesWithTypeDeclarations_dyn(); return true; }
	}
	return false;
}

bool Parser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_line(ioValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { parse=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_module(ioValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"linePart") ) { linePart=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { additionalParsingLevels=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Parser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Parser_obj::additionalParsingLevels,HX_("additionalParsingLevels",58,b5,c0,96)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Parser_obj::parse,HX_("parse",33,90,55,bd)},
	{::hx::fsInt,(void *) &Parser_obj::linePart,HX_("linePart",07,32,7b,87)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_MARK_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_MARK_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_VISIT_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_VISIT_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#endif

::hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_("additionalParsingLevels",58,b5,c0,96),
	HX_("parse",33,90,55,bd),
	HX_("convert",f3,fd,c9,1a),
	HX_("mergeBlocks",5e,1f,58,f3),
	HX_("mergeExpressions",03,54,b2,c9),
	HX_("mergePropertyOperations",f9,db,1f,94),
	HX_("mergeTypeDecls",d7,8d,a6,a4),
	HX_("mergeComplexStructures",58,ed,e8,a9),
	HX_("mergeCalls",3d,64,e1,82),
	HX_("mergeWrites",8c,c7,53,c9),
	HX_("mergeValuesWithTypeDeclarations",13,bc,87,8a),
	HX_("mergeNonBlockBodies",78,f5,9a,52),
	HX_("mergeElses",c2,2f,f9,b0),
	HX_("get_line",7d,d3,6d,c7),
	HX_("set_line",f1,2c,cb,75),
	HX_("get_module",75,a4,5a,b1),
	HX_("set_module",e9,42,d8,b4),
	HX_("linePart",07,32,7b,87),
	HX_("setLine",b6,58,37,0d),
	HX_("nextPart",86,8a,1e,f6),
	HX_("resetLines",b0,15,9e,5d),
	::String(null())
};

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.parser.Parser",36,37,3f,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Parser_obj::__GetStatic;
	__mClass->mSetStaticField = &Parser_obj::__SetStatic;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_24_boot)
HXDLIN(  24)		additionalParsingLevels = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::Parser_obj::mergeElses_dyn());
            	}
	parse = new __default_parse;

{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_957_boot)
HXDLIN( 957)		linePart = 0;
            	}
}

} // end namespace little
} // end namespace parser
