// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif
#ifndef INCLUDED_vision_exceptions_MultithreadFailure
#include <vision/exceptions/MultithreadFailure.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
#ifndef INCLUDED_vision_helpers_VisionThread
#include <vision/helpers/VisionThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e0568f718a6a4be2_54_new,"vision.helpers.VisionThread","new",0xd05b2373,"vision.helpers.VisionThread.new","vision/helpers/VisionThread.hx",54,0xfcf8549b)
HX_DEFINE_STACK_FRAME(_hx_pos_e0568f718a6a4be2_56_new,"vision.helpers.VisionThread","new",0xd05b2373,"vision.helpers.VisionThread.new","vision/helpers/VisionThread.hx",56,0xfcf8549b)
HX_DEFINE_STACK_FRAME(_hx_pos_e0568f718a6a4be2_11_new,"vision.helpers.VisionThread","new",0xd05b2373,"vision.helpers.VisionThread.new","vision/helpers/VisionThread.hx",11,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_67_start,"vision.helpers.VisionThread","start",0xe2dbf235,"vision.helpers.VisionThread.start","vision/helpers/VisionThread.hx",67,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_59_start,"vision.helpers.VisionThread","start",0xe2dbf235,"vision.helpers.VisionThread.start","vision/helpers/VisionThread.hx",59,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_78_onFailedWrapper,"vision.helpers.VisionThread","onFailedWrapper",0x768da40a,"vision.helpers.VisionThread.onFailedWrapper","vision/helpers/VisionThread.hx",78,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_89_set_onFailed,"vision.helpers.VisionThread","set_onFailed",0x733bc646,"vision.helpers.VisionThread.set_onFailed","vision/helpers/VisionThread.hx",89,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_96_set_onDone,"vision.helpers.VisionThread","set_onDone",0xc1948ccb,"vision.helpers.VisionThread.set_onDone","vision/helpers/VisionThread.hx",96,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_83_create,"vision.helpers.VisionThread","create",0x13ad01c9,"vision.helpers.VisionThread.create","vision/helpers/VisionThread.hx",83,0xfcf8549b)
HX_LOCAL_STACK_FRAME(_hx_pos_e0568f718a6a4be2_12_boot,"vision.helpers.VisionThread","boot",0x777ce1bf,"vision.helpers.VisionThread.boot","vision/helpers/VisionThread.hx",12,0xfcf8549b)
namespace vision{
namespace helpers{

void VisionThread_obj::__construct( ::Dynamic job){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::vision::helpers::VisionThread,_gthis) HXARGC(1)
            		void _hx_run( ::haxe::Exception d){
            			HX_GC_STACKFRAME(&_hx_pos_e0568f718a6a4be2_54_new)
HXLINE(  54)			HX_STACK_DO_THROW( ::vision::exceptions::MultithreadFailure_obj::__alloc( HX_CTX ,_gthis->count,d));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_56_new)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_11_new)
HXLINE(  43)		this->relaunchEvents = false;
HXLINE(  50)		 ::vision::helpers::VisionThread _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		this->job = job;
HXLINE(  52)		this->count = ::vision::helpers::VisionThread_obj::COUNT++;
HXLINE(  53)		this->set_onFailed( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  56)		this->set_onDone( ::Dynamic(new _hx_Closure_1()));
            	}

Dynamic VisionThread_obj::__CreateEmpty() { return new VisionThread_obj; }

void *VisionThread_obj::_hx_vtable = 0;

Dynamic VisionThread_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VisionThread_obj > _hx_result = new VisionThread_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VisionThread_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ed853fb;
}

void VisionThread_obj::start(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::vision::helpers::VisionThread,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_67_start)
HXLINE(  67)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  68)				_gthis->job();
HXLINE(  69)				_gthis->jobDone = true;
HXLINE(  70)				_gthis->onDone();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(  71)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(  72)					_gthis->onFailedWrapper(e);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_59_start)
HXDLIN(  59)		 ::vision::helpers::VisionThread _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  66)		this->underlying = ::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(_gthis)),false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VisionThread_obj,start,(void))

void VisionThread_obj::onFailedWrapper( ::haxe::Exception d){
            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_78_onFailedWrapper)
HXLINE(  79)		this->jobDone = false;
HXLINE(  80)		this->onFailed(d);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisionThread_obj,onFailedWrapper,(void))

 ::Dynamic VisionThread_obj::set_onFailed( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_89_set_onFailed)
HXLINE(  90)		bool _hx_tmp;
HXDLIN(  90)		if (this->relaunchEvents) {
HXLINE(  90)			_hx_tmp = ::hx::IsNotNull( this->jobDone );
            		}
            		else {
HXLINE(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  91)			value(null());
            		}
HXLINE(  93)		return (this->onFailed = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisionThread_obj,set_onFailed,return )

 ::Dynamic VisionThread_obj::set_onDone( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_96_set_onDone)
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (this->relaunchEvents) {
HXLINE(  97)			_hx_tmp = ::hx::IsNotNull( this->jobDone );
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  98)			value();
            		}
HXLINE( 100)		return (this->onDone = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisionThread_obj,set_onDone,return )

int VisionThread_obj::COUNT;

 ::vision::helpers::VisionThread VisionThread_obj::create( ::Dynamic job){
            	HX_GC_STACKFRAME(&_hx_pos_e0568f718a6a4be2_83_create)
HXLINE(  84)		 ::vision::helpers::VisionThread t =  ::vision::helpers::VisionThread_obj::__alloc( HX_CTX ,job);
HXLINE(  85)		t->start();
HXLINE(  86)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VisionThread_obj,create,return )


::hx::ObjectPtr< VisionThread_obj > VisionThread_obj::__new( ::Dynamic job) {
	::hx::ObjectPtr< VisionThread_obj > __this = new VisionThread_obj();
	__this->__construct(job);
	return __this;
}

::hx::ObjectPtr< VisionThread_obj > VisionThread_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic job) {
	VisionThread_obj *__this = (VisionThread_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VisionThread_obj), true, "vision.helpers.VisionThread"));
	*(void **)__this = VisionThread_obj::_hx_vtable;
	__this->__construct(job);
	return __this;
}

VisionThread_obj::VisionThread_obj()
{
}

void VisionThread_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VisionThread);
	HX_MARK_MEMBER_NAME(underlying,"underlying");
	HX_MARK_MEMBER_NAME(job,"job");
	HX_MARK_MEMBER_NAME(onFailed,"onFailed");
	HX_MARK_MEMBER_NAME(onDone,"onDone");
	HX_MARK_MEMBER_NAME(jobDone,"jobDone");
	HX_MARK_MEMBER_NAME(relaunchEvents,"relaunchEvents");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_END_CLASS();
}

void VisionThread_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(underlying,"underlying");
	HX_VISIT_MEMBER_NAME(job,"job");
	HX_VISIT_MEMBER_NAME(onFailed,"onFailed");
	HX_VISIT_MEMBER_NAME(onDone,"onDone");
	HX_VISIT_MEMBER_NAME(jobDone,"jobDone");
	HX_VISIT_MEMBER_NAME(relaunchEvents,"relaunchEvents");
	HX_VISIT_MEMBER_NAME(count,"count");
}

::hx::Val VisionThread_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"job") ) { return ::hx::Val( job ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onDone") ) { return ::hx::Val( onDone ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"jobDone") ) { return ::hx::Val( jobDone ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onFailed") ) { return ::hx::Val( onFailed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"underlying") ) { return ::hx::Val( underlying ); }
		if (HX_FIELD_EQ(inName,"set_onDone") ) { return ::hx::Val( set_onDone_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_onFailed") ) { return ::hx::Val( set_onFailed_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"relaunchEvents") ) { return ::hx::Val( relaunchEvents ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onFailedWrapper") ) { return ::hx::Val( onFailedWrapper_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VisionThread_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"COUNT") ) { outValue = ( COUNT ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
	}
	return false;
}

::hx::Val VisionThread_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"job") ) { job=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onDone") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_onDone(inValue.Cast<  ::Dynamic >()) );onDone=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"jobDone") ) { jobDone=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onFailed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_onFailed(inValue.Cast<  ::Dynamic >()) );onFailed=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"underlying") ) { underlying=inValue.Cast<  ::sys::thread::_Thread::HaxeThread >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"relaunchEvents") ) { relaunchEvents=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VisionThread_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"COUNT") ) { COUNT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void VisionThread_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("underlying",5d,fc,b0,59));
	outFields->push(HX_("jobDone",1f,2f,0c,34));
	outFields->push(HX_("relaunchEvents",df,91,26,1b));
	outFields->push(HX_("count",cf,44,63,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VisionThread_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::sys::thread::_Thread::HaxeThread */ ,(int)offsetof(VisionThread_obj,underlying),HX_("underlying",5d,fc,b0,59)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VisionThread_obj,job),HX_("job",fd,cf,50,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VisionThread_obj,onFailed),HX_("onFailed",3c,bc,ab,c7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VisionThread_obj,onDone),HX_("onDone",41,f9,f7,e4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VisionThread_obj,jobDone),HX_("jobDone",1f,2f,0c,34)},
	{::hx::fsBool,(int)offsetof(VisionThread_obj,relaunchEvents),HX_("relaunchEvents",df,91,26,1b)},
	{::hx::fsInt,(int)offsetof(VisionThread_obj,count),HX_("count",cf,44,63,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo VisionThread_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &VisionThread_obj::COUNT,HX_("COUNT",af,7c,51,c8)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String VisionThread_obj_sMemberFields[] = {
	HX_("underlying",5d,fc,b0,59),
	HX_("job",fd,cf,50,00),
	HX_("onFailed",3c,bc,ab,c7),
	HX_("onDone",41,f9,f7,e4),
	HX_("jobDone",1f,2f,0c,34),
	HX_("relaunchEvents",df,91,26,1b),
	HX_("count",cf,44,63,4a),
	HX_("start",62,74,0b,84),
	HX_("onFailedWrapper",77,80,0c,a2),
	HX_("set_onFailed",b9,93,be,91),
	HX_("set_onDone",7e,07,fd,d8),
	::String(null()) };

static void VisionThread_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VisionThread_obj::COUNT,"COUNT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VisionThread_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VisionThread_obj::COUNT,"COUNT");
};

#endif

::hx::Class VisionThread_obj::__mClass;

static ::String VisionThread_obj_sStaticFields[] = {
	HX_("COUNT",af,7c,51,c8),
	HX_("create",fc,66,0f,7c),
	::String(null())
};

void VisionThread_obj::__register()
{
	VisionThread_obj _hx_dummy;
	VisionThread_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.helpers.VisionThread",01,ee,a9,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VisionThread_obj::__GetStatic;
	__mClass->mSetStaticField = &VisionThread_obj::__SetStatic;
	__mClass->mMarkFunc = VisionThread_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VisionThread_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VisionThread_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VisionThread_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VisionThread_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VisionThread_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VisionThread_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VisionThread_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e0568f718a6a4be2_12_boot)
HXDLIN(  12)		COUNT = 0;
            	}
}

} // end namespace vision
} // end namespace helpers
