// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_vision_exceptions_LibraryRequired
#include <vision/exceptions/LibraryRequired.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
#ifndef INCLUDED_vision_helpers_TextDrawer
#include <vision/helpers/TextDrawer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8ff16414e7a8887f_15_reportDependencies,"vision.helpers.TextDrawer","reportDependencies",0x8250d51e,"vision.helpers.TextDrawer.reportDependencies","vision/helpers/TextDrawer.hx",15,0xd778a12f)
static const ::String _hx_array_data_cfdd216d_1[] = {
	HX_("promhx",b0,4a,58,b5),
};
static const ::String _hx_array_data_cfdd216d_2[] = {
	HX_("buddy",06,09,e7,ba),
};
static const ::String _hx_array_data_cfdd216d_3[] = {
	HX_("asynctools",5f,d9,3d,2f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8ff16414e7a8887f_32_drawTextOnImage,"vision.helpers.TextDrawer","drawTextOnImage",0x092549ea,"vision.helpers.TextDrawer.drawTextOnImage","vision/helpers/TextDrawer.hx",32,0xd778a12f)
namespace vision{
namespace helpers{

void TextDrawer_obj::__construct() { }

Dynamic TextDrawer_obj::__CreateEmpty() { return new TextDrawer_obj; }

void *TextDrawer_obj::_hx_vtable = 0;

Dynamic TextDrawer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextDrawer_obj > _hx_result = new TextDrawer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextDrawer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e5cadab;
}

void TextDrawer_obj::reportDependencies(){
            	HX_GC_STACKFRAME(&_hx_pos_8ff16414e7a8887f_15_reportDependencies)
HXDLIN(  15)		HX_STACK_DO_THROW( ::vision::exceptions::LibraryRequired_obj::__alloc( HX_CTX ,HX_("opentype.hx",ba,a9,9f,c6),::Array_obj< ::String >::__new(0)->concat(::Array_obj< ::String >::fromData( _hx_array_data_cfdd216d_1,1))->concat(::Array_obj< ::String >::fromData( _hx_array_data_cfdd216d_2,1))->concat(::Array_obj< ::String >::fromData( _hx_array_data_cfdd216d_3,1)),HX_("Image.drawText",64,86,8d,1f),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextDrawer_obj,reportDependencies,(void))

void TextDrawer_obj::drawTextOnImage( ::haxe::io::Bytes image,int x,int y,int size,::String text, ::haxe::io::Bytes font){
            	HX_STACKFRAME(&_hx_pos_8ff16414e7a8887f_32_drawTextOnImage)
HXDLIN(  32)		::vision::helpers::TextDrawer_obj::reportDependencies();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(TextDrawer_obj,drawTextOnImage,(void))


TextDrawer_obj::TextDrawer_obj()
{
}

bool TextDrawer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"drawTextOnImage") ) { outValue = drawTextOnImage_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"reportDependencies") ) { outValue = reportDependencies_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TextDrawer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TextDrawer_obj_sStaticStorageInfo = 0;
#endif

::hx::Class TextDrawer_obj::__mClass;

static ::String TextDrawer_obj_sStaticFields[] = {
	HX_("reportDependencies",bd,9a,a1,59),
	HX_("drawTextOnImage",eb,5a,be,f4),
	::String(null())
};

void TextDrawer_obj::__register()
{
	TextDrawer_obj _hx_dummy;
	TextDrawer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.helpers.TextDrawer",6d,21,dd,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextDrawer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextDrawer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TextDrawer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextDrawer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextDrawer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace helpers
