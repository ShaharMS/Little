// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_exceptions_LibraryRequired
#include <vision/exceptions/LibraryRequired.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a4fa3f7580d6b075_5_new,"vision.exceptions.LibraryRequired","new",0x0285fae8,"vision.exceptions.LibraryRequired.new","vision/exceptions/LibraryRequired.hx",5,0xba082f28)
HX_LOCAL_STACK_FRAME(_hx_pos_a4fa3f7580d6b075_16_getInclusionMethod,"vision.exceptions.LibraryRequired","getInclusionMethod",0xde308c1f,"vision.exceptions.LibraryRequired.getInclusionMethod","vision/exceptions/LibraryRequired.hx",16,0xba082f28)
namespace vision{
namespace exceptions{

void LibraryRequired_obj::__construct(::String library,::Array< ::String > dependencies,::String classDotField,::String __o_fieldType){
            		::String fieldType = __o_fieldType;
            		if (::hx::IsNull(__o_fieldType)) fieldType = HX_("function",18,ab,52,14);
            	HX_STACKFRAME(&_hx_pos_a4fa3f7580d6b075_5_new)
HXDLIN(   5)		{
HXDLIN(   5)			::String _hx_tmp;
HXDLIN(   5)			if ((dependencies->length > 0)) {
HXDLIN(   5)				_hx_tmp = HX_(" and it's dependencies are",9d,b1,d2,1a);
            			}
            			else {
HXDLIN(   5)				_hx_tmp = HX_(" is",0a,a4,18,00);
            			}
HXDLIN(   5)			super::__construct((((((((((HX_("The ",af,2e,d5,37) + fieldType) + HX_(" ",20,00,00,00)) + classDotField) + HX_(" requires the ",61,7e,6a,34)) + library) + HX_(" haxelib.\n\tMake sure ",a7,0a,2a,b1)) + (library + _hx_tmp)) + HX_(" installed & included:\n\n",3e,f4,b7,5d)) + ::vision::exceptions::LibraryRequired_obj::getInclusionMethod(::Array_obj< ::String >::__new(1)->init(0,library)->concat(dependencies))),HX_("Missing Library Required",7e,b5,7e,3f));
            		}
HXDLIN(   5)		{
HXDLIN(   5)			this->_hx___skipStack++;
            		}
            	}

Dynamic LibraryRequired_obj::__CreateEmpty() { return new LibraryRequired_obj; }

void *LibraryRequired_obj::_hx_vtable = 0;

Dynamic LibraryRequired_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LibraryRequired_obj > _hx_result = new LibraryRequired_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool LibraryRequired_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		if (inClassId<=(int)0x05e8086e) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05e8086e;
		} else {
			return inClassId==(int)0x677ddc49;
		}
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}

::String LibraryRequired_obj::getInclusionMethod(::Array< ::String > libs){
            	HX_STACKFRAME(&_hx_pos_a4fa3f7580d6b075_16_getInclusionMethod)
HXDLIN(  16)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  16)		{
HXDLIN(  16)			int _g1 = 0;
HXDLIN(  16)			while((_g1 < libs->length)){
HXDLIN(  16)				::String lib = libs->__get(_g1);
HXDLIN(  16)				_g1 = (_g1 + 1);
HXDLIN(  16)				_g->push(((HX_("\t\t--library ",05,1c,c5,fb) + lib) + HX_("\n",0a,00,00,00)));
            			}
            		}
HXDLIN(  16)		return (HX_("",00,00,00,00) + _g->join(HX_("",00,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LibraryRequired_obj,getInclusionMethod,return )


::hx::ObjectPtr< LibraryRequired_obj > LibraryRequired_obj::__new(::String library,::Array< ::String > dependencies,::String classDotField,::String __o_fieldType) {
	::hx::ObjectPtr< LibraryRequired_obj > __this = new LibraryRequired_obj();
	__this->__construct(library,dependencies,classDotField,__o_fieldType);
	return __this;
}

::hx::ObjectPtr< LibraryRequired_obj > LibraryRequired_obj::__alloc(::hx::Ctx *_hx_ctx,::String library,::Array< ::String > dependencies,::String classDotField,::String __o_fieldType) {
	LibraryRequired_obj *__this = (LibraryRequired_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LibraryRequired_obj), true, "vision.exceptions.LibraryRequired"));
	*(void **)__this = LibraryRequired_obj::_hx_vtable;
	__this->__construct(library,dependencies,classDotField,__o_fieldType);
	return __this;
}

LibraryRequired_obj::LibraryRequired_obj()
{
}

bool LibraryRequired_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"getInclusionMethod") ) { outValue = getInclusionMethod_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LibraryRequired_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *LibraryRequired_obj_sStaticStorageInfo = 0;
#endif

::hx::Class LibraryRequired_obj::__mClass;

static ::String LibraryRequired_obj_sStaticFields[] = {
	HX_("getInclusionMethod",a7,9d,cd,df),
	::String(null())
};

void LibraryRequired_obj::__register()
{
	LibraryRequired_obj _hx_dummy;
	LibraryRequired_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.LibraryRequired",f6,a6,ec,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LibraryRequired_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LibraryRequired_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LibraryRequired_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LibraryRequired_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LibraryRequired_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
