// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_exceptions_ImageLoadingFailed
#include <vision/exceptions/ImageLoadingFailed.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c439815389a58f5b_7_new,"vision.exceptions.ImageLoadingFailed","new",0x5bbe60f4,"vision.exceptions.ImageLoadingFailed.new","vision/exceptions/ImageLoadingFailed.hx",7,0xfeb9e75c)
namespace vision{
namespace exceptions{

void ImageLoadingFailed_obj::__construct(int type,::String reason){
            	HX_STACKFRAME(&_hx_pos_c439815389a58f5b_7_new)
HXDLIN(   7)		{
HXDLIN(   7)			super::__construct(reason,((HX_("",00,00,00,00) + type) + HX_(" Loading Failed",41,d7,9d,be)));
            		}
HXDLIN(   7)		{
HXDLIN(   7)			this->_hx___skipStack++;
            		}
            	}

Dynamic ImageLoadingFailed_obj::__CreateEmpty() { return new ImageLoadingFailed_obj; }

void *ImageLoadingFailed_obj::_hx_vtable = 0;

Dynamic ImageLoadingFailed_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageLoadingFailed_obj > _hx_result = new ImageLoadingFailed_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ImageLoadingFailed_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		if (inClassId<=(int)0x62c6f08a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62c6f08a;
		} else {
			return inClassId==(int)0x677ddc49;
		}
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}


::hx::ObjectPtr< ImageLoadingFailed_obj > ImageLoadingFailed_obj::__new(int type,::String reason) {
	::hx::ObjectPtr< ImageLoadingFailed_obj > __this = new ImageLoadingFailed_obj();
	__this->__construct(type,reason);
	return __this;
}

::hx::ObjectPtr< ImageLoadingFailed_obj > ImageLoadingFailed_obj::__alloc(::hx::Ctx *_hx_ctx,int type,::String reason) {
	ImageLoadingFailed_obj *__this = (ImageLoadingFailed_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageLoadingFailed_obj), true, "vision.exceptions.ImageLoadingFailed"));
	*(void **)__this = ImageLoadingFailed_obj::_hx_vtable;
	__this->__construct(type,reason);
	return __this;
}

ImageLoadingFailed_obj::ImageLoadingFailed_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImageLoadingFailed_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ImageLoadingFailed_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ImageLoadingFailed_obj::__mClass;

void ImageLoadingFailed_obj::__register()
{
	ImageLoadingFailed_obj _hx_dummy;
	ImageLoadingFailed_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.ImageLoadingFailed",02,17,de,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ImageLoadingFailed_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageLoadingFailed_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageLoadingFailed_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
