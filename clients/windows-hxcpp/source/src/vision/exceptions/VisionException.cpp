// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb1468e14eb6aab5_23_new,"vision.exceptions.VisionException","new",0x35721d35,"vision.exceptions.VisionException.new","vision/exceptions/VisionException.hx",23,0x3ad5957b)
namespace vision{
namespace exceptions{

void VisionException_obj::__construct(::String message,::String type){
            	HX_STACKFRAME(&_hx_pos_cb1468e14eb6aab5_23_new)
HXDLIN(  23)		{
HXDLIN(  23)			super::__construct((((HX_("",00,00,00,00) + type) + HX_(": ",a6,32,00,00)) + message),null(),null());
            		}
HXDLIN(  23)		{
HXDLIN(  23)			this->_hx___skipStack++;
            		}
            	}

Dynamic VisionException_obj::__CreateEmpty() { return new VisionException_obj; }

void *VisionException_obj::_hx_vtable = 0;

Dynamic VisionException_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VisionException_obj > _hx_result = new VisionException_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool VisionException_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x677ddc49;
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}


::hx::ObjectPtr< VisionException_obj > VisionException_obj::__new(::String message,::String type) {
	::hx::ObjectPtr< VisionException_obj > __this = new VisionException_obj();
	__this->__construct(message,type);
	return __this;
}

::hx::ObjectPtr< VisionException_obj > VisionException_obj::__alloc(::hx::Ctx *_hx_ctx,::String message,::String type) {
	VisionException_obj *__this = (VisionException_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VisionException_obj), true, "vision.exceptions.VisionException"));
	*(void **)__this = VisionException_obj::_hx_vtable;
	__this->__construct(message,type);
	return __this;
}

VisionException_obj::VisionException_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VisionException_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *VisionException_obj_sStaticStorageInfo = 0;
#endif

::hx::Class VisionException_obj::__mClass;

void VisionException_obj::__register()
{
	VisionException_obj _hx_dummy;
	VisionException_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.VisionException",c3,5e,0c,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< VisionException_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VisionException_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VisionException_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
