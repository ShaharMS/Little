// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_vision_algorithms_BilinearInterpolation
#include <vision/algorithms/BilinearInterpolation.h>
#endif
#ifndef INCLUDED_vision_ds_ImageView
#include <vision/ds/ImageView.h>
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds__Color_Color_Impl_
#include <vision/ds/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds__Image_Image_Impl_
#include <vision/ds/_Image/Image_Impl_.h>
#endif
#ifndef INCLUDED_vision_exceptions_OutOfBounds
#include <vision/exceptions/OutOfBounds.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
#ifndef INCLUDED_vision_tools_MathTools
#include <vision/tools/MathTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1eca3edcc7dbe8c3_10_interpolate,"vision.algorithms.BilinearInterpolation","interpolate",0x7da47847,"vision.algorithms.BilinearInterpolation.interpolate","vision/algorithms/BilinearInterpolation.hx",10,0x3a0c8dea)
HX_LOCAL_STACK_FRAME(_hx_pos_1eca3edcc7dbe8c3_22_interpolateMissingPixels,"vision.algorithms.BilinearInterpolation","interpolateMissingPixels",0xd5dcaa6c,"vision.algorithms.BilinearInterpolation.interpolateMissingPixels","vision/algorithms/BilinearInterpolation.hx",22,0x3a0c8dea)
namespace vision{
namespace algorithms{

void BilinearInterpolation_obj::__construct() { }

Dynamic BilinearInterpolation_obj::__CreateEmpty() { return new BilinearInterpolation_obj; }

void *BilinearInterpolation_obj::_hx_vtable = 0;

Dynamic BilinearInterpolation_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BilinearInterpolation_obj > _hx_result = new BilinearInterpolation_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BilinearInterpolation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d14f4c8;
}

 ::haxe::io::Bytes BilinearInterpolation_obj::interpolate( ::haxe::io::Bytes image,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_1eca3edcc7dbe8c3_10_interpolate)
HXLINE(  11)		int color = 0;
HXDLIN(  11)		int length = (((width * height) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  11)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(  11)		this1->fill(0,length,0);
HXDLIN(  11)		 ::haxe::io::Bytes this2 = this1;
HXDLIN(  11)		{
HXLINE(  11)			this2->b[0] = ( (unsigned char)(width) );
HXDLIN(  11)			this2->b[1] = ( (unsigned char)((width >> 8)) );
            		}
HXDLIN(  11)		{
HXLINE(  11)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  11)			this2->b[pos] = ( (unsigned char)(0) );
HXDLIN(  11)			this2->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  11)		{
HXLINE(  11)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  11)			this2->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  11)			this2->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  11)		{
HXLINE(  11)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  11)			this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  11)			this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  11)		{
HXLINE(  11)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  11)			this2->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  11)			this2->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  11)		this2->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXDLIN(  11)		int i = ::vision::ds::_Image::Image_Impl__obj::OFFSET;
HXDLIN(  11)		while((i < this2->length)){
HXLINE(  11)			this2->b[i] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(  11)			this2->b[(i + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(  11)			this2->b[(i + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(  11)			this2->b[(i + 3)] = ( (unsigned char)((color & 255)) );
HXDLIN(  11)			i = (i + 4);
            		}
HXDLIN(  11)		 ::haxe::io::Bytes resized = this2;
HXLINE(  12)		Float xMultiplier = ((( (Float)((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) ) / ( (Float)(width) )) - (( (Float)(1) ) / ( (Float)(width) )));
HXLINE(  13)		Float yMultiplier = ((( (Float)(::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) )))) ) / ( (Float)(height) )) - (( (Float)(1) ) / ( (Float)(height) )));
HXLINE(  14)		{
HXLINE(  14)			int _g = 0;
HXDLIN(  14)			int _g1 = (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8));
HXDLIN(  14)			while((_g < _g1)){
HXLINE(  14)				_g = (_g + 1);
HXDLIN(  14)				int x = (_g - 1);
HXDLIN(  14)				{
HXLINE(  14)					int _g2 = 0;
HXDLIN(  14)					int _g3 = ::Math_obj::ceil((( (Float)((resized->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(  14)					while((_g2 < _g3)){
HXLINE(  14)						_g2 = (_g2 + 1);
HXDLIN(  14)						int y = (_g2 - 1);
HXDLIN(  14)						{
HXLINE(  14)							int position = (((y * (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  14)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  14)							int c = ((((( (int)(resized->b->__get(position)) ) << 24) | (( (int)(resized->b->__get((position + 1))) ) << 16)) | (( (int)(resized->b->__get((position + 2))) ) << 8)) | ( (int)(resized->b->__get((position + 3))) ));
HXLINE(  15)							Float x1 = (( (Float)(x) ) * xMultiplier);
HXDLIN(  15)							Float y1 = (( (Float)(y) ) * yMultiplier);
HXDLIN(  15)							bool _hx_tmp;
HXDLIN(  15)							Float x2 = ( (Float)(::Math_obj::ceil(x1)) );
HXDLIN(  15)							Float y2 = ( (Float)(::Math_obj::ceil(y1)) );
HXDLIN(  15)							bool _hx_tmp1;
HXDLIN(  15)							bool _hx_tmp2;
HXDLIN(  15)							bool _hx_tmp3;
HXDLIN(  15)							if ((x2 >= 0)) {
HXLINE(  15)								_hx_tmp3 = (y2 >= 0);
            							}
            							else {
HXLINE(  15)								_hx_tmp3 = false;
            							}
HXDLIN(  15)							if (_hx_tmp3) {
HXLINE(  15)								_hx_tmp2 = (x2 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								_hx_tmp2 = false;
            							}
HXDLIN(  15)							if (_hx_tmp2) {
HXLINE(  15)								_hx_tmp1 = (y2 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								_hx_tmp1 = false;
            							}
HXDLIN(  15)							if (_hx_tmp1) {
HXLINE(  15)								Float x3 = ( (Float)(::Math_obj::floor(x1)) );
HXDLIN(  15)								Float y3 = ( (Float)(::Math_obj::floor(y1)) );
HXDLIN(  15)								bool _hx_tmp4;
HXDLIN(  15)								bool _hx_tmp5;
HXDLIN(  15)								bool _hx_tmp6;
HXDLIN(  15)								if ((x3 >= 0)) {
HXLINE(  15)									_hx_tmp6 = (y3 >= 0);
            								}
            								else {
HXLINE(  15)									_hx_tmp6 = false;
            								}
HXDLIN(  15)								if (_hx_tmp6) {
HXLINE(  15)									_hx_tmp5 = (x3 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(  15)									_hx_tmp5 = false;
            								}
HXDLIN(  15)								if (_hx_tmp5) {
HXLINE(  15)									_hx_tmp4 = (y3 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(  15)									_hx_tmp4 = false;
            								}
HXDLIN(  15)								_hx_tmp = !(_hx_tmp4);
            							}
            							else {
HXLINE(  15)								_hx_tmp = true;
            							}
HXDLIN(  15)							if (_hx_tmp) {
HXLINE( 247)								x1 = ::vision::tools::MathTools_obj::boundFloat(x1,( (Float)(0) ),( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1)) ));
HXLINE( 248)								y1 = ::vision::tools::MathTools_obj::boundFloat(y1,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
            							}
HXLINE(  15)							Float yFraction = (y1 - ( (Float)(::Std_obj::_hx_int(y1)) ));
HXDLIN(  15)							Float xFraction = (x1 - ( (Float)(::Std_obj::_hx_int(x1)) ));
HXDLIN(  15)							Float red = (( (Float)(1) ) - yFraction);
HXDLIN(  15)							int x4 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y4 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							bool red1;
HXDLIN(  15)							bool red2;
HXDLIN(  15)							bool red3;
HXDLIN(  15)							if ((x4 >= 0)) {
HXLINE(  15)								red3 = (y4 >= 0);
            							}
            							else {
HXLINE(  15)								red3 = false;
            							}
HXDLIN(  15)							if (red3) {
HXLINE(  15)								red2 = (x4 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								red2 = false;
            							}
HXDLIN(  15)							if (red2) {
HXLINE(  15)								red1 = (y4 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								red1 = false;
            							}
HXDLIN(  15)							if (!(red1)) {
HXLINE(  15)								::cpp::Int64 this3 = _hx_int64_make(x4,y4);
HXDLIN(  15)								int red4 = _hx_int64_high(this3);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red4,_hx_int64_low(this3))));
            							}
HXDLIN(  15)							int position1 = (((y4 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN(  15)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float red5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(image->b->__get(position1)) ) << 24) | (( (int)(image->b->__get((position1 + 1))) ) << 16)) | (( (int)(image->b->__get((position1 + 2))) ) << 8)) | ( (int)(image->b->__get((position1 + 3))) )) >> 16) & 255)) ));
HXDLIN(  15)							int x5 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y5 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							int ma = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x5)->init(1,0);
HXDLIN(  15)							int max = values->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g4 = 0;
HXDLIN(  15)								int _g5 = values->length;
HXDLIN(  15)								while((_g4 < _g5)){
HXLINE(  15)									_g4 = (_g4 + 1);
HXDLIN(  15)									int i1 = (_g4 - 1);
HXDLIN(  15)									if ((values->__get(i1) > max)) {
HXLINE( 688)										max = values->__get(i1);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN(  15)							int min = values1->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g6 = 0;
HXDLIN(  15)								int _g7 = values1->length;
HXDLIN(  15)								while((_g6 < _g7)){
HXLINE(  15)									_g6 = (_g6 + 1);
HXDLIN(  15)									int i2 = (_g6 - 1);
HXDLIN(  15)									if ((values1->__get(i2) < min)) {
HXLINE( 652)										min = values1->__get(i2);
            									}
            								}
            							}
HXLINE(  15)							int x6 = min;
HXDLIN(  15)							int ma1 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y5)->init(1,0);
HXDLIN(  15)							int max1 = values2->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g8 = 0;
HXDLIN(  15)								int _g9 = values2->length;
HXDLIN(  15)								while((_g8 < _g9)){
HXLINE(  15)									_g8 = (_g8 + 1);
HXDLIN(  15)									int i3 = (_g8 - 1);
HXDLIN(  15)									if ((values2->__get(i3) > max1)) {
HXLINE( 688)										max1 = values2->__get(i3);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN(  15)							int min1 = values3->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g10 = 0;
HXDLIN(  15)								int _g11 = values3->length;
HXDLIN(  15)								while((_g10 < _g11)){
HXLINE(  15)									_g10 = (_g10 + 1);
HXDLIN(  15)									int i4 = (_g10 - 1);
HXDLIN(  15)									if ((values3->__get(i4) < min1)) {
HXLINE( 652)										min1 = values3->__get(i4);
            									}
            								}
            							}
HXLINE(  15)							int y6 = min1;
HXDLIN(  15)							bool red6;
HXDLIN(  15)							bool red7;
HXDLIN(  15)							bool red8;
HXDLIN(  15)							if ((x6 >= 0)) {
HXLINE(  15)								red8 = (y6 >= 0);
            							}
            							else {
HXLINE(  15)								red8 = false;
            							}
HXDLIN(  15)							if (red8) {
HXLINE(  15)								red7 = (x6 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								red7 = false;
            							}
HXDLIN(  15)							if (red7) {
HXLINE(  15)								red6 = (y6 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								red6 = false;
            							}
HXDLIN(  15)							if (!(red6)) {
HXLINE(  15)								::cpp::Int64 this4 = _hx_int64_make(x6,y6);
HXDLIN(  15)								int red9 = _hx_int64_high(this4);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red9,_hx_int64_low(this4))));
            							}
HXDLIN(  15)							int position2 = (((y6 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(  15)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float red10 = (red * (red5 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position2)) ) << 24) | (( (int)(image->b->__get((position2 + 1))) ) << 16)) | (( (int)(image->b->__get((position2 + 2))) ) << 8)) | ( (int)(image->b->__get((position2 + 3))) )) >> 16) & 255)) ))));
HXDLIN(  15)							Float red11 = (( (Float)(1) ) - xFraction);
HXDLIN(  15)							int x7 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y7 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma2 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x7)->init(1,0);
HXDLIN(  15)							int max2 = values4->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g12 = 0;
HXDLIN(  15)								int _g13 = values4->length;
HXDLIN(  15)								while((_g12 < _g13)){
HXLINE(  15)									_g12 = (_g12 + 1);
HXDLIN(  15)									int i5 = (_g12 - 1);
HXDLIN(  15)									if ((values4->__get(i5) > max2)) {
HXLINE( 688)										max2 = values4->__get(i5);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN(  15)							int min2 = values5->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g14 = 0;
HXDLIN(  15)								int _g15 = values5->length;
HXDLIN(  15)								while((_g14 < _g15)){
HXLINE(  15)									_g14 = (_g14 + 1);
HXDLIN(  15)									int i6 = (_g14 - 1);
HXDLIN(  15)									if ((values5->__get(i6) < min2)) {
HXLINE( 652)										min2 = values5->__get(i6);
            									}
            								}
            							}
HXLINE(  15)							int x8 = min2;
HXDLIN(  15)							int ma3 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y7)->init(1,0);
HXDLIN(  15)							int max3 = values6->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g16 = 0;
HXDLIN(  15)								int _g17 = values6->length;
HXDLIN(  15)								while((_g16 < _g17)){
HXLINE(  15)									_g16 = (_g16 + 1);
HXDLIN(  15)									int i7 = (_g16 - 1);
HXDLIN(  15)									if ((values6->__get(i7) > max3)) {
HXLINE( 688)										max3 = values6->__get(i7);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN(  15)							int min3 = values7->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g18 = 0;
HXDLIN(  15)								int _g19 = values7->length;
HXDLIN(  15)								while((_g18 < _g19)){
HXLINE(  15)									_g18 = (_g18 + 1);
HXDLIN(  15)									int i8 = (_g18 - 1);
HXDLIN(  15)									if ((values7->__get(i8) < min3)) {
HXLINE( 652)										min3 = values7->__get(i8);
            									}
            								}
            							}
HXLINE(  15)							int y8 = min3;
HXDLIN(  15)							bool red12;
HXDLIN(  15)							bool red13;
HXDLIN(  15)							bool red14;
HXDLIN(  15)							if ((x8 >= 0)) {
HXLINE(  15)								red14 = (y8 >= 0);
            							}
            							else {
HXLINE(  15)								red14 = false;
            							}
HXDLIN(  15)							if (red14) {
HXLINE(  15)								red13 = (x8 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								red13 = false;
            							}
HXDLIN(  15)							if (red13) {
HXLINE(  15)								red12 = (y8 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								red12 = false;
            							}
HXDLIN(  15)							if (!(red12)) {
HXLINE(  15)								::cpp::Int64 this5 = _hx_int64_make(x8,y8);
HXDLIN(  15)								int red15 = _hx_int64_high(this5);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red15,_hx_int64_low(this5))));
            							}
HXDLIN(  15)							int position3 = (((y8 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x8) * 4);
HXDLIN(  15)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float red16 = (red11 * ( (Float)(((((((( (int)(image->b->__get(position3)) ) << 24) | (( (int)(image->b->__get((position3 + 1))) ) << 16)) | (( (int)(image->b->__get((position3 + 2))) ) << 8)) | ( (int)(image->b->__get((position3 + 3))) )) >> 16) & 255)) ));
HXDLIN(  15)							int x9 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y9 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma4 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x9)->init(1,0);
HXDLIN(  15)							int max4 = values8->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g20 = 0;
HXDLIN(  15)								int _g21 = values8->length;
HXDLIN(  15)								while((_g20 < _g21)){
HXLINE(  15)									_g20 = (_g20 + 1);
HXDLIN(  15)									int i9 = (_g20 - 1);
HXDLIN(  15)									if ((values8->__get(i9) > max4)) {
HXLINE( 688)										max4 = values8->__get(i9);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN(  15)							int min4 = values9->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g22 = 0;
HXDLIN(  15)								int _g23 = values9->length;
HXDLIN(  15)								while((_g22 < _g23)){
HXLINE(  15)									_g22 = (_g22 + 1);
HXDLIN(  15)									int i10 = (_g22 - 1);
HXDLIN(  15)									if ((values9->__get(i10) < min4)) {
HXLINE( 652)										min4 = values9->__get(i10);
            									}
            								}
            							}
HXLINE(  15)							int x10 = min4;
HXDLIN(  15)							int ma5 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y9)->init(1,0);
HXDLIN(  15)							int max5 = values10->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g24 = 0;
HXDLIN(  15)								int _g25 = values10->length;
HXDLIN(  15)								while((_g24 < _g25)){
HXLINE(  15)									_g24 = (_g24 + 1);
HXDLIN(  15)									int i11 = (_g24 - 1);
HXDLIN(  15)									if ((values10->__get(i11) > max5)) {
HXLINE( 688)										max5 = values10->__get(i11);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN(  15)							int min5 = values11->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g26 = 0;
HXDLIN(  15)								int _g27 = values11->length;
HXDLIN(  15)								while((_g26 < _g27)){
HXLINE(  15)									_g26 = (_g26 + 1);
HXDLIN(  15)									int i12 = (_g26 - 1);
HXDLIN(  15)									if ((values11->__get(i12) < min5)) {
HXLINE( 652)										min5 = values11->__get(i12);
            									}
            								}
            							}
HXLINE(  15)							int y10 = min5;
HXDLIN(  15)							bool red17;
HXDLIN(  15)							bool red18;
HXDLIN(  15)							bool red19;
HXDLIN(  15)							if ((x10 >= 0)) {
HXLINE(  15)								red19 = (y10 >= 0);
            							}
            							else {
HXLINE(  15)								red19 = false;
            							}
HXDLIN(  15)							if (red19) {
HXLINE(  15)								red18 = (x10 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								red18 = false;
            							}
HXDLIN(  15)							if (red18) {
HXLINE(  15)								red17 = (y10 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								red17 = false;
            							}
HXDLIN(  15)							if (!(red17)) {
HXLINE(  15)								::cpp::Int64 this6 = _hx_int64_make(x10,y10);
HXDLIN(  15)								int red20 = _hx_int64_high(this6);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red20,_hx_int64_low(this6))));
            							}
HXDLIN(  15)							int position4 = (((y10 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x10) * 4);
HXDLIN(  15)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							int red21 = ::Std_obj::_hx_int((red10 + (yFraction * (red16 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position4)) ) << 24) | (( (int)(image->b->__get((position4 + 1))) ) << 16)) | (( (int)(image->b->__get((position4 + 2))) ) << 8)) | ( (int)(image->b->__get((position4 + 3))) )) >> 16) & 255)) ))))));
HXDLIN(  15)							Float green = (( (Float)(1) ) - yFraction);
HXDLIN(  15)							int x11 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y11 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							bool green1;
HXDLIN(  15)							bool green2;
HXDLIN(  15)							bool green3;
HXDLIN(  15)							if ((x11 >= 0)) {
HXLINE(  15)								green3 = (y11 >= 0);
            							}
            							else {
HXLINE(  15)								green3 = false;
            							}
HXDLIN(  15)							if (green3) {
HXLINE(  15)								green2 = (x11 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								green2 = false;
            							}
HXDLIN(  15)							if (green2) {
HXLINE(  15)								green1 = (y11 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								green1 = false;
            							}
HXDLIN(  15)							if (!(green1)) {
HXLINE(  15)								::cpp::Int64 this7 = _hx_int64_make(x11,y11);
HXDLIN(  15)								int green4 = _hx_int64_high(this7);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green4,_hx_int64_low(this7))));
            							}
HXDLIN(  15)							int position5 = (((y11 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN(  15)							position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float green5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(image->b->__get(position5)) ) << 24) | (( (int)(image->b->__get((position5 + 1))) ) << 16)) | (( (int)(image->b->__get((position5 + 2))) ) << 8)) | ( (int)(image->b->__get((position5 + 3))) )) >> 8) & 255)) ));
HXDLIN(  15)							int x12 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y12 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							int ma6 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values12 = ::Array_obj< int >::__new(2)->init(0,x12)->init(1,0);
HXDLIN(  15)							int max6 = values12->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g28 = 0;
HXDLIN(  15)								int _g29 = values12->length;
HXDLIN(  15)								while((_g28 < _g29)){
HXLINE(  15)									_g28 = (_g28 + 1);
HXDLIN(  15)									int i13 = (_g28 - 1);
HXDLIN(  15)									if ((values12->__get(i13) > max6)) {
HXLINE( 688)										max6 = values12->__get(i13);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values13 = ::Array_obj< int >::__new(2)->init(0,max6)->init(1,ma6);
HXDLIN(  15)							int min6 = values13->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g30 = 0;
HXDLIN(  15)								int _g31 = values13->length;
HXDLIN(  15)								while((_g30 < _g31)){
HXLINE(  15)									_g30 = (_g30 + 1);
HXDLIN(  15)									int i14 = (_g30 - 1);
HXDLIN(  15)									if ((values13->__get(i14) < min6)) {
HXLINE( 652)										min6 = values13->__get(i14);
            									}
            								}
            							}
HXLINE(  15)							int x13 = min6;
HXDLIN(  15)							int ma7 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values14 = ::Array_obj< int >::__new(2)->init(0,y12)->init(1,0);
HXDLIN(  15)							int max7 = values14->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g32 = 0;
HXDLIN(  15)								int _g33 = values14->length;
HXDLIN(  15)								while((_g32 < _g33)){
HXLINE(  15)									_g32 = (_g32 + 1);
HXDLIN(  15)									int i15 = (_g32 - 1);
HXDLIN(  15)									if ((values14->__get(i15) > max7)) {
HXLINE( 688)										max7 = values14->__get(i15);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values15 = ::Array_obj< int >::__new(2)->init(0,max7)->init(1,ma7);
HXDLIN(  15)							int min7 = values15->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g34 = 0;
HXDLIN(  15)								int _g35 = values15->length;
HXDLIN(  15)								while((_g34 < _g35)){
HXLINE(  15)									_g34 = (_g34 + 1);
HXDLIN(  15)									int i16 = (_g34 - 1);
HXDLIN(  15)									if ((values15->__get(i16) < min7)) {
HXLINE( 652)										min7 = values15->__get(i16);
            									}
            								}
            							}
HXLINE(  15)							int y13 = min7;
HXDLIN(  15)							bool green6;
HXDLIN(  15)							bool green7;
HXDLIN(  15)							bool green8;
HXDLIN(  15)							if ((x13 >= 0)) {
HXLINE(  15)								green8 = (y13 >= 0);
            							}
            							else {
HXLINE(  15)								green8 = false;
            							}
HXDLIN(  15)							if (green8) {
HXLINE(  15)								green7 = (x13 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								green7 = false;
            							}
HXDLIN(  15)							if (green7) {
HXLINE(  15)								green6 = (y13 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								green6 = false;
            							}
HXDLIN(  15)							if (!(green6)) {
HXLINE(  15)								::cpp::Int64 this8 = _hx_int64_make(x13,y13);
HXDLIN(  15)								int green9 = _hx_int64_high(this8);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green9,_hx_int64_low(this8))));
            							}
HXDLIN(  15)							int position6 = (((y13 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN(  15)							position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float green10 = (green * (green5 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position6)) ) << 24) | (( (int)(image->b->__get((position6 + 1))) ) << 16)) | (( (int)(image->b->__get((position6 + 2))) ) << 8)) | ( (int)(image->b->__get((position6 + 3))) )) >> 8) & 255)) ))));
HXDLIN(  15)							Float green11 = (( (Float)(1) ) - xFraction);
HXDLIN(  15)							int x14 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y14 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma8 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values16 = ::Array_obj< int >::__new(2)->init(0,x14)->init(1,0);
HXDLIN(  15)							int max8 = values16->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g36 = 0;
HXDLIN(  15)								int _g37 = values16->length;
HXDLIN(  15)								while((_g36 < _g37)){
HXLINE(  15)									_g36 = (_g36 + 1);
HXDLIN(  15)									int i17 = (_g36 - 1);
HXDLIN(  15)									if ((values16->__get(i17) > max8)) {
HXLINE( 688)										max8 = values16->__get(i17);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values17 = ::Array_obj< int >::__new(2)->init(0,max8)->init(1,ma8);
HXDLIN(  15)							int min8 = values17->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g38 = 0;
HXDLIN(  15)								int _g39 = values17->length;
HXDLIN(  15)								while((_g38 < _g39)){
HXLINE(  15)									_g38 = (_g38 + 1);
HXDLIN(  15)									int i18 = (_g38 - 1);
HXDLIN(  15)									if ((values17->__get(i18) < min8)) {
HXLINE( 652)										min8 = values17->__get(i18);
            									}
            								}
            							}
HXLINE(  15)							int x15 = min8;
HXDLIN(  15)							int ma9 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values18 = ::Array_obj< int >::__new(2)->init(0,y14)->init(1,0);
HXDLIN(  15)							int max9 = values18->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g40 = 0;
HXDLIN(  15)								int _g41 = values18->length;
HXDLIN(  15)								while((_g40 < _g41)){
HXLINE(  15)									_g40 = (_g40 + 1);
HXDLIN(  15)									int i19 = (_g40 - 1);
HXDLIN(  15)									if ((values18->__get(i19) > max9)) {
HXLINE( 688)										max9 = values18->__get(i19);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values19 = ::Array_obj< int >::__new(2)->init(0,max9)->init(1,ma9);
HXDLIN(  15)							int min9 = values19->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g42 = 0;
HXDLIN(  15)								int _g43 = values19->length;
HXDLIN(  15)								while((_g42 < _g43)){
HXLINE(  15)									_g42 = (_g42 + 1);
HXDLIN(  15)									int i20 = (_g42 - 1);
HXDLIN(  15)									if ((values19->__get(i20) < min9)) {
HXLINE( 652)										min9 = values19->__get(i20);
            									}
            								}
            							}
HXLINE(  15)							int y15 = min9;
HXDLIN(  15)							bool green12;
HXDLIN(  15)							bool green13;
HXDLIN(  15)							bool green14;
HXDLIN(  15)							if ((x15 >= 0)) {
HXLINE(  15)								green14 = (y15 >= 0);
            							}
            							else {
HXLINE(  15)								green14 = false;
            							}
HXDLIN(  15)							if (green14) {
HXLINE(  15)								green13 = (x15 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								green13 = false;
            							}
HXDLIN(  15)							if (green13) {
HXLINE(  15)								green12 = (y15 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								green12 = false;
            							}
HXDLIN(  15)							if (!(green12)) {
HXLINE(  15)								::cpp::Int64 this9 = _hx_int64_make(x15,y15);
HXDLIN(  15)								int green15 = _hx_int64_high(this9);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green15,_hx_int64_low(this9))));
            							}
HXDLIN(  15)							int position7 = (((y15 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x15) * 4);
HXDLIN(  15)							position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float green16 = (green11 * ( (Float)(((((((( (int)(image->b->__get(position7)) ) << 24) | (( (int)(image->b->__get((position7 + 1))) ) << 16)) | (( (int)(image->b->__get((position7 + 2))) ) << 8)) | ( (int)(image->b->__get((position7 + 3))) )) >> 8) & 255)) ));
HXDLIN(  15)							int x16 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y16 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma10 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values20 = ::Array_obj< int >::__new(2)->init(0,x16)->init(1,0);
HXDLIN(  15)							int max10 = values20->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g44 = 0;
HXDLIN(  15)								int _g45 = values20->length;
HXDLIN(  15)								while((_g44 < _g45)){
HXLINE(  15)									_g44 = (_g44 + 1);
HXDLIN(  15)									int i21 = (_g44 - 1);
HXDLIN(  15)									if ((values20->__get(i21) > max10)) {
HXLINE( 688)										max10 = values20->__get(i21);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values21 = ::Array_obj< int >::__new(2)->init(0,max10)->init(1,ma10);
HXDLIN(  15)							int min10 = values21->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g46 = 0;
HXDLIN(  15)								int _g47 = values21->length;
HXDLIN(  15)								while((_g46 < _g47)){
HXLINE(  15)									_g46 = (_g46 + 1);
HXDLIN(  15)									int i22 = (_g46 - 1);
HXDLIN(  15)									if ((values21->__get(i22) < min10)) {
HXLINE( 652)										min10 = values21->__get(i22);
            									}
            								}
            							}
HXLINE(  15)							int x17 = min10;
HXDLIN(  15)							int ma11 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values22 = ::Array_obj< int >::__new(2)->init(0,y16)->init(1,0);
HXDLIN(  15)							int max11 = values22->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g48 = 0;
HXDLIN(  15)								int _g49 = values22->length;
HXDLIN(  15)								while((_g48 < _g49)){
HXLINE(  15)									_g48 = (_g48 + 1);
HXDLIN(  15)									int i23 = (_g48 - 1);
HXDLIN(  15)									if ((values22->__get(i23) > max11)) {
HXLINE( 688)										max11 = values22->__get(i23);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values23 = ::Array_obj< int >::__new(2)->init(0,max11)->init(1,ma11);
HXDLIN(  15)							int min11 = values23->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g50 = 0;
HXDLIN(  15)								int _g51 = values23->length;
HXDLIN(  15)								while((_g50 < _g51)){
HXLINE(  15)									_g50 = (_g50 + 1);
HXDLIN(  15)									int i24 = (_g50 - 1);
HXDLIN(  15)									if ((values23->__get(i24) < min11)) {
HXLINE( 652)										min11 = values23->__get(i24);
            									}
            								}
            							}
HXLINE(  15)							int y17 = min11;
HXDLIN(  15)							bool green17;
HXDLIN(  15)							bool green18;
HXDLIN(  15)							bool green19;
HXDLIN(  15)							if ((x17 >= 0)) {
HXLINE(  15)								green19 = (y17 >= 0);
            							}
            							else {
HXLINE(  15)								green19 = false;
            							}
HXDLIN(  15)							if (green19) {
HXLINE(  15)								green18 = (x17 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								green18 = false;
            							}
HXDLIN(  15)							if (green18) {
HXLINE(  15)								green17 = (y17 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								green17 = false;
            							}
HXDLIN(  15)							if (!(green17)) {
HXLINE(  15)								::cpp::Int64 this10 = _hx_int64_make(x17,y17);
HXDLIN(  15)								int green20 = _hx_int64_high(this10);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green20,_hx_int64_low(this10))));
            							}
HXDLIN(  15)							int position8 = (((y17 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN(  15)							position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							int green21 = ::Std_obj::_hx_int((green10 + (yFraction * (green16 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position8)) ) << 24) | (( (int)(image->b->__get((position8 + 1))) ) << 16)) | (( (int)(image->b->__get((position8 + 2))) ) << 8)) | ( (int)(image->b->__get((position8 + 3))) )) >> 8) & 255)) ))))));
HXDLIN(  15)							Float blue = (( (Float)(1) ) - yFraction);
HXDLIN(  15)							int x18 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y18 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							bool blue1;
HXDLIN(  15)							bool blue2;
HXDLIN(  15)							bool blue3;
HXDLIN(  15)							if ((x18 >= 0)) {
HXLINE(  15)								blue3 = (y18 >= 0);
            							}
            							else {
HXLINE(  15)								blue3 = false;
            							}
HXDLIN(  15)							if (blue3) {
HXLINE(  15)								blue2 = (x18 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								blue2 = false;
            							}
HXDLIN(  15)							if (blue2) {
HXLINE(  15)								blue1 = (y18 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								blue1 = false;
            							}
HXDLIN(  15)							if (!(blue1)) {
HXLINE(  15)								::cpp::Int64 this11 = _hx_int64_make(x18,y18);
HXDLIN(  15)								int blue4 = _hx_int64_high(this11);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue4,_hx_int64_low(this11))));
            							}
HXDLIN(  15)							int position9 = (((y18 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x18) * 4);
HXDLIN(  15)							position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float blue5 = ((( (Float)(1) ) - xFraction) * ( (Float)((((((( (int)(image->b->__get(position9)) ) << 24) | (( (int)(image->b->__get((position9 + 1))) ) << 16)) | (( (int)(image->b->__get((position9 + 2))) ) << 8)) | ( (int)(image->b->__get((position9 + 3))) )) & 255)) ));
HXDLIN(  15)							int x19 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y19 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							int ma12 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values24 = ::Array_obj< int >::__new(2)->init(0,x19)->init(1,0);
HXDLIN(  15)							int max12 = values24->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g52 = 0;
HXDLIN(  15)								int _g53 = values24->length;
HXDLIN(  15)								while((_g52 < _g53)){
HXLINE(  15)									_g52 = (_g52 + 1);
HXDLIN(  15)									int i25 = (_g52 - 1);
HXDLIN(  15)									if ((values24->__get(i25) > max12)) {
HXLINE( 688)										max12 = values24->__get(i25);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values25 = ::Array_obj< int >::__new(2)->init(0,max12)->init(1,ma12);
HXDLIN(  15)							int min12 = values25->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g54 = 0;
HXDLIN(  15)								int _g55 = values25->length;
HXDLIN(  15)								while((_g54 < _g55)){
HXLINE(  15)									_g54 = (_g54 + 1);
HXDLIN(  15)									int i26 = (_g54 - 1);
HXDLIN(  15)									if ((values25->__get(i26) < min12)) {
HXLINE( 652)										min12 = values25->__get(i26);
            									}
            								}
            							}
HXLINE(  15)							int x20 = min12;
HXDLIN(  15)							int ma13 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values26 = ::Array_obj< int >::__new(2)->init(0,y19)->init(1,0);
HXDLIN(  15)							int max13 = values26->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g56 = 0;
HXDLIN(  15)								int _g57 = values26->length;
HXDLIN(  15)								while((_g56 < _g57)){
HXLINE(  15)									_g56 = (_g56 + 1);
HXDLIN(  15)									int i27 = (_g56 - 1);
HXDLIN(  15)									if ((values26->__get(i27) > max13)) {
HXLINE( 688)										max13 = values26->__get(i27);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values27 = ::Array_obj< int >::__new(2)->init(0,max13)->init(1,ma13);
HXDLIN(  15)							int min13 = values27->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g58 = 0;
HXDLIN(  15)								int _g59 = values27->length;
HXDLIN(  15)								while((_g58 < _g59)){
HXLINE(  15)									_g58 = (_g58 + 1);
HXDLIN(  15)									int i28 = (_g58 - 1);
HXDLIN(  15)									if ((values27->__get(i28) < min13)) {
HXLINE( 652)										min13 = values27->__get(i28);
            									}
            								}
            							}
HXLINE(  15)							int y20 = min13;
HXDLIN(  15)							bool blue6;
HXDLIN(  15)							bool blue7;
HXDLIN(  15)							bool blue8;
HXDLIN(  15)							if ((x20 >= 0)) {
HXLINE(  15)								blue8 = (y20 >= 0);
            							}
            							else {
HXLINE(  15)								blue8 = false;
            							}
HXDLIN(  15)							if (blue8) {
HXLINE(  15)								blue7 = (x20 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								blue7 = false;
            							}
HXDLIN(  15)							if (blue7) {
HXLINE(  15)								blue6 = (y20 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								blue6 = false;
            							}
HXDLIN(  15)							if (!(blue6)) {
HXLINE(  15)								::cpp::Int64 this12 = _hx_int64_make(x20,y20);
HXDLIN(  15)								int blue9 = _hx_int64_high(this12);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue9,_hx_int64_low(this12))));
            							}
HXDLIN(  15)							int position10 = (((y20 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x20) * 4);
HXDLIN(  15)							position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float blue10 = (blue * (blue5 + (xFraction * ( (Float)((((((( (int)(image->b->__get(position10)) ) << 24) | (( (int)(image->b->__get((position10 + 1))) ) << 16)) | (( (int)(image->b->__get((position10 + 2))) ) << 8)) | ( (int)(image->b->__get((position10 + 3))) )) & 255)) ))));
HXDLIN(  15)							Float blue11 = (( (Float)(1) ) - xFraction);
HXDLIN(  15)							int x21 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y21 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma14 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values28 = ::Array_obj< int >::__new(2)->init(0,x21)->init(1,0);
HXDLIN(  15)							int max14 = values28->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g60 = 0;
HXDLIN(  15)								int _g61 = values28->length;
HXDLIN(  15)								while((_g60 < _g61)){
HXLINE(  15)									_g60 = (_g60 + 1);
HXDLIN(  15)									int i29 = (_g60 - 1);
HXDLIN(  15)									if ((values28->__get(i29) > max14)) {
HXLINE( 688)										max14 = values28->__get(i29);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values29 = ::Array_obj< int >::__new(2)->init(0,max14)->init(1,ma14);
HXDLIN(  15)							int min14 = values29->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g62 = 0;
HXDLIN(  15)								int _g63 = values29->length;
HXDLIN(  15)								while((_g62 < _g63)){
HXLINE(  15)									_g62 = (_g62 + 1);
HXDLIN(  15)									int i30 = (_g62 - 1);
HXDLIN(  15)									if ((values29->__get(i30) < min14)) {
HXLINE( 652)										min14 = values29->__get(i30);
            									}
            								}
            							}
HXLINE(  15)							int x22 = min14;
HXDLIN(  15)							int ma15 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values30 = ::Array_obj< int >::__new(2)->init(0,y21)->init(1,0);
HXDLIN(  15)							int max15 = values30->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g64 = 0;
HXDLIN(  15)								int _g65 = values30->length;
HXDLIN(  15)								while((_g64 < _g65)){
HXLINE(  15)									_g64 = (_g64 + 1);
HXDLIN(  15)									int i31 = (_g64 - 1);
HXDLIN(  15)									if ((values30->__get(i31) > max15)) {
HXLINE( 688)										max15 = values30->__get(i31);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values31 = ::Array_obj< int >::__new(2)->init(0,max15)->init(1,ma15);
HXDLIN(  15)							int min15 = values31->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g66 = 0;
HXDLIN(  15)								int _g67 = values31->length;
HXDLIN(  15)								while((_g66 < _g67)){
HXLINE(  15)									_g66 = (_g66 + 1);
HXDLIN(  15)									int i32 = (_g66 - 1);
HXDLIN(  15)									if ((values31->__get(i32) < min15)) {
HXLINE( 652)										min15 = values31->__get(i32);
            									}
            								}
            							}
HXLINE(  15)							int y22 = min15;
HXDLIN(  15)							bool blue12;
HXDLIN(  15)							bool blue13;
HXDLIN(  15)							bool blue14;
HXDLIN(  15)							if ((x22 >= 0)) {
HXLINE(  15)								blue14 = (y22 >= 0);
            							}
            							else {
HXLINE(  15)								blue14 = false;
            							}
HXDLIN(  15)							if (blue14) {
HXLINE(  15)								blue13 = (x22 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								blue13 = false;
            							}
HXDLIN(  15)							if (blue13) {
HXLINE(  15)								blue12 = (y22 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								blue12 = false;
            							}
HXDLIN(  15)							if (!(blue12)) {
HXLINE(  15)								::cpp::Int64 this13 = _hx_int64_make(x22,y22);
HXDLIN(  15)								int blue15 = _hx_int64_high(this13);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue15,_hx_int64_low(this13))));
            							}
HXDLIN(  15)							int position11 = (((y22 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x22) * 4);
HXDLIN(  15)							position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float blue16 = (blue11 * ( (Float)((((((( (int)(image->b->__get(position11)) ) << 24) | (( (int)(image->b->__get((position11 + 1))) ) << 16)) | (( (int)(image->b->__get((position11 + 2))) ) << 8)) | ( (int)(image->b->__get((position11 + 3))) )) & 255)) ));
HXDLIN(  15)							int x23 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y23 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma16 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values32 = ::Array_obj< int >::__new(2)->init(0,x23)->init(1,0);
HXDLIN(  15)							int max16 = values32->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g68 = 0;
HXDLIN(  15)								int _g69 = values32->length;
HXDLIN(  15)								while((_g68 < _g69)){
HXLINE(  15)									_g68 = (_g68 + 1);
HXDLIN(  15)									int i33 = (_g68 - 1);
HXDLIN(  15)									if ((values32->__get(i33) > max16)) {
HXLINE( 688)										max16 = values32->__get(i33);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values33 = ::Array_obj< int >::__new(2)->init(0,max16)->init(1,ma16);
HXDLIN(  15)							int min16 = values33->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g70 = 0;
HXDLIN(  15)								int _g71 = values33->length;
HXDLIN(  15)								while((_g70 < _g71)){
HXLINE(  15)									_g70 = (_g70 + 1);
HXDLIN(  15)									int i34 = (_g70 - 1);
HXDLIN(  15)									if ((values33->__get(i34) < min16)) {
HXLINE( 652)										min16 = values33->__get(i34);
            									}
            								}
            							}
HXLINE(  15)							int x24 = min16;
HXDLIN(  15)							int ma17 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values34 = ::Array_obj< int >::__new(2)->init(0,y23)->init(1,0);
HXDLIN(  15)							int max17 = values34->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g72 = 0;
HXDLIN(  15)								int _g73 = values34->length;
HXDLIN(  15)								while((_g72 < _g73)){
HXLINE(  15)									_g72 = (_g72 + 1);
HXDLIN(  15)									int i35 = (_g72 - 1);
HXDLIN(  15)									if ((values34->__get(i35) > max17)) {
HXLINE( 688)										max17 = values34->__get(i35);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values35 = ::Array_obj< int >::__new(2)->init(0,max17)->init(1,ma17);
HXDLIN(  15)							int min17 = values35->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g74 = 0;
HXDLIN(  15)								int _g75 = values35->length;
HXDLIN(  15)								while((_g74 < _g75)){
HXLINE(  15)									_g74 = (_g74 + 1);
HXDLIN(  15)									int i36 = (_g74 - 1);
HXDLIN(  15)									if ((values35->__get(i36) < min17)) {
HXLINE( 652)										min17 = values35->__get(i36);
            									}
            								}
            							}
HXLINE(  15)							int y24 = min17;
HXDLIN(  15)							bool blue17;
HXDLIN(  15)							bool blue18;
HXDLIN(  15)							bool blue19;
HXDLIN(  15)							if ((x24 >= 0)) {
HXLINE(  15)								blue19 = (y24 >= 0);
            							}
            							else {
HXLINE(  15)								blue19 = false;
            							}
HXDLIN(  15)							if (blue19) {
HXLINE(  15)								blue18 = (x24 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								blue18 = false;
            							}
HXDLIN(  15)							if (blue18) {
HXLINE(  15)								blue17 = (y24 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								blue17 = false;
            							}
HXDLIN(  15)							if (!(blue17)) {
HXLINE(  15)								::cpp::Int64 this14 = _hx_int64_make(x24,y24);
HXDLIN(  15)								int blue20 = _hx_int64_high(this14);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue20,_hx_int64_low(this14))));
            							}
HXDLIN(  15)							int position12 = (((y24 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN(  15)							position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							int blue21 = ::Std_obj::_hx_int((blue10 + (yFraction * (blue16 + (xFraction * ( (Float)((((((( (int)(image->b->__get(position12)) ) << 24) | (( (int)(image->b->__get((position12 + 1))) ) << 16)) | (( (int)(image->b->__get((position12 + 2))) ) << 8)) | ( (int)(image->b->__get((position12 + 3))) )) & 255)) ))))));
HXDLIN(  15)							Float alpha = (( (Float)(1) ) - yFraction);
HXDLIN(  15)							int x25 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y25 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							bool alpha1;
HXDLIN(  15)							bool alpha2;
HXDLIN(  15)							bool alpha3;
HXDLIN(  15)							if ((x25 >= 0)) {
HXLINE(  15)								alpha3 = (y25 >= 0);
            							}
            							else {
HXLINE(  15)								alpha3 = false;
            							}
HXDLIN(  15)							if (alpha3) {
HXLINE(  15)								alpha2 = (x25 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								alpha2 = false;
            							}
HXDLIN(  15)							if (alpha2) {
HXLINE(  15)								alpha1 = (y25 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								alpha1 = false;
            							}
HXDLIN(  15)							if (!(alpha1)) {
HXLINE(  15)								::cpp::Int64 this15 = _hx_int64_make(x25,y25);
HXDLIN(  15)								int alpha4 = _hx_int64_high(this15);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha4,_hx_int64_low(this15))));
            							}
HXDLIN(  15)							int position13 = (((y25 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x25) * 4);
HXDLIN(  15)							position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float alpha5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(image->b->__get(position13)) ) << 24) | (( (int)(image->b->__get((position13 + 1))) ) << 16)) | (( (int)(image->b->__get((position13 + 2))) ) << 8)) | ( (int)(image->b->__get((position13 + 3))) )) >> 24) & 255)) ));
HXDLIN(  15)							int x26 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y26 = ::Std_obj::_hx_int(y1);
HXDLIN(  15)							int ma18 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values36 = ::Array_obj< int >::__new(2)->init(0,x26)->init(1,0);
HXDLIN(  15)							int max18 = values36->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g76 = 0;
HXDLIN(  15)								int _g77 = values36->length;
HXDLIN(  15)								while((_g76 < _g77)){
HXLINE(  15)									_g76 = (_g76 + 1);
HXDLIN(  15)									int i37 = (_g76 - 1);
HXDLIN(  15)									if ((values36->__get(i37) > max18)) {
HXLINE( 688)										max18 = values36->__get(i37);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values37 = ::Array_obj< int >::__new(2)->init(0,max18)->init(1,ma18);
HXDLIN(  15)							int min18 = values37->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g78 = 0;
HXDLIN(  15)								int _g79 = values37->length;
HXDLIN(  15)								while((_g78 < _g79)){
HXLINE(  15)									_g78 = (_g78 + 1);
HXDLIN(  15)									int i38 = (_g78 - 1);
HXDLIN(  15)									if ((values37->__get(i38) < min18)) {
HXLINE( 652)										min18 = values37->__get(i38);
            									}
            								}
            							}
HXLINE(  15)							int x27 = min18;
HXDLIN(  15)							int ma19 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values38 = ::Array_obj< int >::__new(2)->init(0,y26)->init(1,0);
HXDLIN(  15)							int max19 = values38->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g80 = 0;
HXDLIN(  15)								int _g81 = values38->length;
HXDLIN(  15)								while((_g80 < _g81)){
HXLINE(  15)									_g80 = (_g80 + 1);
HXDLIN(  15)									int i39 = (_g80 - 1);
HXDLIN(  15)									if ((values38->__get(i39) > max19)) {
HXLINE( 688)										max19 = values38->__get(i39);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values39 = ::Array_obj< int >::__new(2)->init(0,max19)->init(1,ma19);
HXDLIN(  15)							int min19 = values39->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g82 = 0;
HXDLIN(  15)								int _g83 = values39->length;
HXDLIN(  15)								while((_g82 < _g83)){
HXLINE(  15)									_g82 = (_g82 + 1);
HXDLIN(  15)									int i40 = (_g82 - 1);
HXDLIN(  15)									if ((values39->__get(i40) < min19)) {
HXLINE( 652)										min19 = values39->__get(i40);
            									}
            								}
            							}
HXLINE(  15)							int y27 = min19;
HXDLIN(  15)							bool alpha6;
HXDLIN(  15)							bool alpha7;
HXDLIN(  15)							bool alpha8;
HXDLIN(  15)							if ((x27 >= 0)) {
HXLINE(  15)								alpha8 = (y27 >= 0);
            							}
            							else {
HXLINE(  15)								alpha8 = false;
            							}
HXDLIN(  15)							if (alpha8) {
HXLINE(  15)								alpha7 = (x27 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								alpha7 = false;
            							}
HXDLIN(  15)							if (alpha7) {
HXLINE(  15)								alpha6 = (y27 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								alpha6 = false;
            							}
HXDLIN(  15)							if (!(alpha6)) {
HXLINE(  15)								::cpp::Int64 this16 = _hx_int64_make(x27,y27);
HXDLIN(  15)								int alpha9 = _hx_int64_high(this16);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha9,_hx_int64_low(this16))));
            							}
HXDLIN(  15)							int position14 = (((y27 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x27) * 4);
HXDLIN(  15)							position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float alpha10 = (alpha * (alpha5 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position14)) ) << 24) | (( (int)(image->b->__get((position14 + 1))) ) << 16)) | (( (int)(image->b->__get((position14 + 2))) ) << 8)) | ( (int)(image->b->__get((position14 + 3))) )) >> 24) & 255)) ))));
HXDLIN(  15)							Float alpha11 = (( (Float)(1) ) - xFraction);
HXDLIN(  15)							int x28 = ::Std_obj::_hx_int(x1);
HXDLIN(  15)							int y28 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma20 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values40 = ::Array_obj< int >::__new(2)->init(0,x28)->init(1,0);
HXDLIN(  15)							int max20 = values40->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g84 = 0;
HXDLIN(  15)								int _g85 = values40->length;
HXDLIN(  15)								while((_g84 < _g85)){
HXLINE(  15)									_g84 = (_g84 + 1);
HXDLIN(  15)									int i41 = (_g84 - 1);
HXDLIN(  15)									if ((values40->__get(i41) > max20)) {
HXLINE( 688)										max20 = values40->__get(i41);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values41 = ::Array_obj< int >::__new(2)->init(0,max20)->init(1,ma20);
HXDLIN(  15)							int min20 = values41->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g86 = 0;
HXDLIN(  15)								int _g87 = values41->length;
HXDLIN(  15)								while((_g86 < _g87)){
HXLINE(  15)									_g86 = (_g86 + 1);
HXDLIN(  15)									int i42 = (_g86 - 1);
HXDLIN(  15)									if ((values41->__get(i42) < min20)) {
HXLINE( 652)										min20 = values41->__get(i42);
            									}
            								}
            							}
HXLINE(  15)							int x29 = min20;
HXDLIN(  15)							int ma21 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values42 = ::Array_obj< int >::__new(2)->init(0,y28)->init(1,0);
HXDLIN(  15)							int max21 = values42->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g88 = 0;
HXDLIN(  15)								int _g89 = values42->length;
HXDLIN(  15)								while((_g88 < _g89)){
HXLINE(  15)									_g88 = (_g88 + 1);
HXDLIN(  15)									int i43 = (_g88 - 1);
HXDLIN(  15)									if ((values42->__get(i43) > max21)) {
HXLINE( 688)										max21 = values42->__get(i43);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values43 = ::Array_obj< int >::__new(2)->init(0,max21)->init(1,ma21);
HXDLIN(  15)							int min21 = values43->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g90 = 0;
HXDLIN(  15)								int _g91 = values43->length;
HXDLIN(  15)								while((_g90 < _g91)){
HXLINE(  15)									_g90 = (_g90 + 1);
HXDLIN(  15)									int i44 = (_g90 - 1);
HXDLIN(  15)									if ((values43->__get(i44) < min21)) {
HXLINE( 652)										min21 = values43->__get(i44);
            									}
            								}
            							}
HXLINE(  15)							int y29 = min21;
HXDLIN(  15)							bool alpha12;
HXDLIN(  15)							bool alpha13;
HXDLIN(  15)							bool alpha14;
HXDLIN(  15)							if ((x29 >= 0)) {
HXLINE(  15)								alpha14 = (y29 >= 0);
            							}
            							else {
HXLINE(  15)								alpha14 = false;
            							}
HXDLIN(  15)							if (alpha14) {
HXLINE(  15)								alpha13 = (x29 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								alpha13 = false;
            							}
HXDLIN(  15)							if (alpha13) {
HXLINE(  15)								alpha12 = (y29 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								alpha12 = false;
            							}
HXDLIN(  15)							if (!(alpha12)) {
HXLINE(  15)								::cpp::Int64 this17 = _hx_int64_make(x29,y29);
HXDLIN(  15)								int alpha15 = _hx_int64_high(this17);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha15,_hx_int64_low(this17))));
            							}
HXDLIN(  15)							int position15 = (((y29 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x29) * 4);
HXDLIN(  15)							position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							Float alpha16 = (alpha11 * ( (Float)(((((((( (int)(image->b->__get(position15)) ) << 24) | (( (int)(image->b->__get((position15 + 1))) ) << 16)) | (( (int)(image->b->__get((position15 + 2))) ) << 8)) | ( (int)(image->b->__get((position15 + 3))) )) >> 24) & 255)) ));
HXDLIN(  15)							int x30 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(  15)							int y30 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(  15)							int ma22 = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  15)							::Array< int > values44 = ::Array_obj< int >::__new(2)->init(0,x30)->init(1,0);
HXDLIN(  15)							int max22 = values44->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g92 = 0;
HXDLIN(  15)								int _g93 = values44->length;
HXDLIN(  15)								while((_g92 < _g93)){
HXLINE(  15)									_g92 = (_g92 + 1);
HXDLIN(  15)									int i45 = (_g92 - 1);
HXDLIN(  15)									if ((values44->__get(i45) > max22)) {
HXLINE( 688)										max22 = values44->__get(i45);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values45 = ::Array_obj< int >::__new(2)->init(0,max22)->init(1,ma22);
HXDLIN(  15)							int min22 = values45->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g94 = 0;
HXDLIN(  15)								int _g95 = values45->length;
HXDLIN(  15)								while((_g94 < _g95)){
HXLINE(  15)									_g94 = (_g94 + 1);
HXDLIN(  15)									int i46 = (_g94 - 1);
HXDLIN(  15)									if ((values45->__get(i46) < min22)) {
HXLINE( 652)										min22 = values45->__get(i46);
            									}
            								}
            							}
HXLINE(  15)							int x31 = min22;
HXDLIN(  15)							int ma23 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  15)							::Array< int > values46 = ::Array_obj< int >::__new(2)->init(0,y30)->init(1,0);
HXDLIN(  15)							int max23 = values46->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g96 = 0;
HXDLIN(  15)								int _g97 = values46->length;
HXDLIN(  15)								while((_g96 < _g97)){
HXLINE(  15)									_g96 = (_g96 + 1);
HXDLIN(  15)									int i47 = (_g96 - 1);
HXDLIN(  15)									if ((values46->__get(i47) > max23)) {
HXLINE( 688)										max23 = values46->__get(i47);
            									}
            								}
            							}
HXLINE(  15)							::Array< int > values47 = ::Array_obj< int >::__new(2)->init(0,max23)->init(1,ma23);
HXDLIN(  15)							int min23 = values47->__get(0);
HXDLIN(  15)							{
HXLINE(  15)								int _g98 = 0;
HXDLIN(  15)								int _g99 = values47->length;
HXDLIN(  15)								while((_g98 < _g99)){
HXLINE(  15)									_g98 = (_g98 + 1);
HXDLIN(  15)									int i48 = (_g98 - 1);
HXDLIN(  15)									if ((values47->__get(i48) < min23)) {
HXLINE( 652)										min23 = values47->__get(i48);
            									}
            								}
            							}
HXLINE(  15)							int y31 = min23;
HXDLIN(  15)							bool alpha17;
HXDLIN(  15)							bool alpha18;
HXDLIN(  15)							bool alpha19;
HXDLIN(  15)							if ((x31 >= 0)) {
HXLINE(  15)								alpha19 = (y31 >= 0);
            							}
            							else {
HXLINE(  15)								alpha19 = false;
            							}
HXDLIN(  15)							if (alpha19) {
HXLINE(  15)								alpha18 = (x31 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  15)								alpha18 = false;
            							}
HXDLIN(  15)							if (alpha18) {
HXLINE(  15)								alpha17 = (y31 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  15)								alpha17 = false;
            							}
HXDLIN(  15)							if (!(alpha17)) {
HXLINE(  15)								::cpp::Int64 this18 = _hx_int64_make(x31,y31);
HXDLIN(  15)								int alpha20 = _hx_int64_high(this18);
HXDLIN(  15)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha20,_hx_int64_low(this18))));
            							}
HXDLIN(  15)							int position16 = (((y31 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x31) * 4);
HXDLIN(  15)							position16 = (position16 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  15)							int alpha21 = ::Std_obj::_hx_int((alpha10 + (yFraction * (alpha16 + (xFraction * ( (Float)(((((((( (int)(image->b->__get(position16)) ) << 24) | (( (int)(image->b->__get((position16 + 1))) ) << 16)) | (( (int)(image->b->__get((position16 + 2))) ) << 8)) | ( (int)(image->b->__get((position16 + 3))) )) >> 24) & 255)) ))))));
HXDLIN(  15)							int color1 = 0;
HXDLIN(  15)							{
HXLINE(  15)								color1 = (color1 & -16711681);
HXDLIN(  15)								int color2;
HXDLIN(  15)								if ((red21 > 255)) {
HXLINE(  15)									color2 = 255;
            								}
            								else {
HXLINE(  15)									if ((red21 < 0)) {
HXLINE(  15)										color2 = 0;
            									}
            									else {
HXLINE(  15)										color2 = red21;
            									}
            								}
HXDLIN(  15)								color1 = (color1 | (color2 << 16));
            							}
HXDLIN(  15)							{
HXLINE(  15)								color1 = (color1 & -65281);
HXDLIN(  15)								int color3;
HXDLIN(  15)								if ((green21 > 255)) {
HXLINE(  15)									color3 = 255;
            								}
            								else {
HXLINE(  15)									if ((green21 < 0)) {
HXLINE(  15)										color3 = 0;
            									}
            									else {
HXLINE(  15)										color3 = green21;
            									}
            								}
HXDLIN(  15)								color1 = (color1 | (color3 << 8));
            							}
HXDLIN(  15)							{
HXLINE(  15)								color1 = (color1 & -256);
HXDLIN(  15)								int color4;
HXDLIN(  15)								if ((blue21 > 255)) {
HXLINE(  15)									color4 = 255;
            								}
            								else {
HXLINE(  15)									if ((blue21 < 0)) {
HXLINE(  15)										color4 = 0;
            									}
            									else {
HXLINE(  15)										color4 = blue21;
            									}
            								}
HXDLIN(  15)								color1 = (color1 | color4);
            							}
HXDLIN(  15)							{
HXLINE(  15)								color1 = (color1 & 16777215);
HXDLIN(  15)								int color5;
HXDLIN(  15)								if ((alpha21 > 255)) {
HXLINE(  15)									color5 = 255;
            								}
            								else {
HXLINE(  15)									if ((alpha21 < 0)) {
HXLINE(  15)										color5 = 0;
            									}
            									else {
HXLINE(  15)										color5 = alpha21;
            									}
            								}
HXDLIN(  15)								color1 = (color1 | (color5 << 24));
            							}
HXDLIN(  15)							int color6 = color1;
HXLINE(  16)							bool _hx_tmp7;
HXDLIN(  16)							bool _hx_tmp8;
HXDLIN(  16)							bool _hx_tmp9;
HXDLIN(  16)							if ((x >= 0)) {
HXLINE(  16)								_hx_tmp9 = (y >= 0);
            							}
            							else {
HXLINE(  16)								_hx_tmp9 = false;
            							}
HXDLIN(  16)							if (_hx_tmp9) {
HXLINE(  16)								_hx_tmp8 = (x < (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  16)								_hx_tmp8 = false;
            							}
HXDLIN(  16)							if (_hx_tmp8) {
HXLINE(  16)								_hx_tmp7 = (y < ::Math_obj::ceil((( (Float)((resized->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  16)								_hx_tmp7 = false;
            							}
HXDLIN(  16)							if (!(_hx_tmp7)) {
HXLINE(  16)								::cpp::Int64 this19 = _hx_int64_make(x,y);
HXDLIN(  16)								int _hx_tmp10 = _hx_int64_high(this19);
HXDLIN(  16)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,resized, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_int64_low(this19))));
            							}
            							else {
HXLINE(  16)								bool _hx_tmp11;
HXDLIN(  16)								bool _hx_tmp12;
HXDLIN(  16)								bool _hx_tmp13;
HXDLIN(  16)								bool _hx_tmp14;
HXDLIN(  16)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  16)								if (((( (int)(resized->b->__get(pos4)) ) | (( (int)(resized->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(  16)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)									_hx_tmp14 = ((( (int)(resized->b->__get(pos5)) ) | (( (int)(resized->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  16)									_hx_tmp14 = true;
            								}
HXDLIN(  16)								if (!(_hx_tmp14)) {
HXLINE(  16)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  16)									_hx_tmp13 = ((( (int)(resized->b->__get(pos6)) ) | (( (int)(resized->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  16)									_hx_tmp13 = true;
            								}
HXDLIN(  16)								if (!(_hx_tmp13)) {
HXLINE(  16)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)									_hx_tmp12 = ((( (int)(resized->b->__get(pos7)) ) | (( (int)(resized->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  16)									_hx_tmp12 = true;
            								}
HXDLIN(  16)								if (!(_hx_tmp12)) {
HXLINE(  16)									_hx_tmp11 = (resized->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(  16)									_hx_tmp11 = true;
            								}
HXDLIN(  16)								if (_hx_tmp11) {
HXLINE(  16)									 ::vision::ds::ImageView v = null();
HXDLIN(  16)									bool _hx_tmp15;
HXDLIN(  16)									bool _hx_tmp16;
HXDLIN(  16)									bool _hx_tmp17;
HXDLIN(  16)									bool _hx_tmp18;
HXDLIN(  16)									bool _hx_tmp19;
HXDLIN(  16)									bool _hx_tmp20;
HXDLIN(  16)									int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  16)									if (((( (int)(resized->b->__get(pos8)) ) | (( (int)(resized->b->__get((pos8 + 1))) ) << 8)) == 0)) {
HXLINE(  16)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)										_hx_tmp20 = ((( (int)(resized->b->__get(pos9)) ) | (( (int)(resized->b->__get((pos9 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  16)										_hx_tmp20 = true;
            									}
HXDLIN(  16)									if (!(_hx_tmp20)) {
HXLINE(  16)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  16)										_hx_tmp19 = ((( (int)(resized->b->__get(pos10)) ) | (( (int)(resized->b->__get((pos10 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  16)										_hx_tmp19 = true;
            									}
HXDLIN(  16)									if (!(_hx_tmp19)) {
HXLINE(  16)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)										_hx_tmp18 = ((( (int)(resized->b->__get(pos11)) ) | (( (int)(resized->b->__get((pos11 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  16)										_hx_tmp18 = true;
            									}
HXDLIN(  16)									if (!(_hx_tmp18)) {
HXLINE(  16)										_hx_tmp17 = (resized->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(  16)										_hx_tmp17 = true;
            									}
HXDLIN(  16)									if (!(_hx_tmp17)) {
HXLINE(  16)										_hx_tmp16 = ::hx::IsNull( v );
            									}
            									else {
HXLINE(  16)										_hx_tmp16 = false;
            									}
HXDLIN(  16)									if (_hx_tmp16) {
HXLINE(  16)										bool _hx_tmp21;
HXDLIN(  16)										bool _hx_tmp22;
HXDLIN(  16)										if ((x >= 0)) {
HXLINE(  16)											_hx_tmp22 = (y >= 0);
            										}
            										else {
HXLINE(  16)											_hx_tmp22 = false;
            										}
HXDLIN(  16)										if (_hx_tmp22) {
HXLINE(  16)											_hx_tmp21 = (x < (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(  16)											_hx_tmp21 = false;
            										}
HXDLIN(  16)										if (_hx_tmp21) {
HXLINE(  16)											_hx_tmp15 = (y < ::Math_obj::ceil((( (Float)((resized->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(  16)											_hx_tmp15 = false;
            										}
            									}
            									else {
HXLINE(  16)										bool has = false;
HXDLIN(  16)										 ::vision::ds::ImageView view;
HXDLIN(  16)										if (::hx::IsNotNull( v )) {
HXLINE(  16)											view = v;
            										}
            										else {
HXLINE(  16)											int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  16)											int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)											int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  16)											int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  16)											view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(resized->b->__get(pos12)) ) | (( (int)(resized->b->__get((pos12 + 1))) ) << 8)),(( (int)(resized->b->__get(pos13)) ) | (( (int)(resized->b->__get((pos13 + 1))) ) << 8)),(( (int)(resized->b->__get(pos14)) ) | (( (int)(resized->b->__get((pos14 + 1))) ) << 8)),(( (int)(resized->b->__get(pos15)) ) | (( (int)(resized->b->__get((pos15 + 1))) ) << 8)),resized->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(  16)										switch((int)(view->shape)){
            											case (int)0: {
HXLINE(  16)												bool has1;
HXDLIN(  16)												bool has2;
HXDLIN(  16)												if ((x < (view->x + view->width))) {
HXLINE(  16)													has2 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(  16)													has2 = false;
            												}
HXDLIN(  16)												if (has2) {
HXLINE(  16)													has1 = (x >= view->x);
            												}
            												else {
HXLINE(  16)													has1 = false;
            												}
HXDLIN(  16)												if (has1) {
HXLINE(  16)													has = (y >= view->y);
            												}
            												else {
HXLINE(  16)													has = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(  16)												bool has3;
HXDLIN(  16)												bool has4;
HXDLIN(  16)												bool has5;
HXDLIN(  16)												if ((x < (view->x + view->width))) {
HXLINE(  16)													has5 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(  16)													has5 = false;
            												}
HXDLIN(  16)												if (has5) {
HXLINE(  16)													has4 = (x >= view->x);
            												}
            												else {
HXLINE(  16)													has4 = false;
            												}
HXDLIN(  16)												if (has4) {
HXLINE(  16)													has3 = (y >= view->y);
            												}
            												else {
HXLINE(  16)													has3 = false;
            												}
HXLINE(1400)												has = !(has3);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(  16)												if ((view->width > view->height)) {
HXLINE(  16)													Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(  16)													Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(  16)													Float c1 = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(  16)													Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c1);
HXDLIN(  16)													Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  16)													Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c1);
HXDLIN(  16)													Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  16)													::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN(  16)													Float x32 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(  16)													Float y32 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(  16)													Float has6 = ::Math_obj::sqrt(((x32 * x32) + (y32 * y32)));
HXDLIN(  16)													Float x33 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(  16)													Float y33 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)													has = ((has6 + ::Math_obj::sqrt(((x33 * x33) + (y33 * y33)))) <= view->width);
HXLINE(  16)													if ((view->shape == 3)) {
HXLINE(1416)														has = !(has);
            													}
            												}
            												else {
HXLINE(  16)													if ((view->height > view->width)) {
HXLINE(  16)														Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(  16)														Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(  16)														Float c2 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(  16)														Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  16)														Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c2);
HXDLIN(  16)														Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  16)														Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c2);
HXDLIN(  16)														::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN(  16)														Float x34 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(  16)														Float y34 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(  16)														Float has7 = ::Math_obj::sqrt(((x34 * x34) + (y34 * y34)));
HXDLIN(  16)														Float x35 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(  16)														Float y35 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)														has = ((has7 + ::Math_obj::sqrt(((x35 * x35) + (y35 * y35)))) <= view->height);
HXLINE(  16)														if ((view->shape == 3)) {
HXLINE(1425)															has = !(has);
            														}
            													}
            													else {
HXLINE(  16)														Float point1_x = ( (Float)(x) );
HXDLIN(  16)														Float point1_y = ( (Float)(y) );
HXDLIN(  16)														Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  16)														Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  16)														Float x36 = (point2_x - point1_x);
HXDLIN(  16)														Float y36 = (point2_y - point1_y);
HXLINE(1428)														has = (::Math_obj::sqrt(((x36 * x36) + (y36 * y36))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(  16)														if ((view->shape == 3)) {
HXLINE(1429)															has = !(has);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(  16)										_hx_tmp15 = has;
            									}
HXDLIN(  16)									if (_hx_tmp15) {
HXLINE(  16)										int position17 = (((y * (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  16)										position17 = (position17 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  16)										resized->b[position17] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN(  16)										resized->b[(position17 + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN(  16)										resized->b[(position17 + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN(  16)										resized->b[(position17 + 3)] = ( (unsigned char)((color6 & 255)) );
            									}
            								}
            								else {
HXLINE(  16)									int position18 = (((y * (( (int)(resized->b->__get(0)) ) | (( (int)(resized->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  16)									position18 = (position18 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  16)									resized->b[position18] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN(  16)									resized->b[(position18 + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN(  16)									resized->b[(position18 + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN(  16)									resized->b[(position18 + 3)] = ( (unsigned char)((color6 & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  19)		return resized;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BilinearInterpolation_obj,interpolate,return )

 ::haxe::io::Bytes BilinearInterpolation_obj::interpolateMissingPixels( ::haxe::io::Bytes image,int kernelRadiusX,int kernelRadiusY,int minX,int minY){
            	HX_GC_STACKFRAME(&_hx_pos_1eca3edcc7dbe8c3_22_interpolateMissingPixels)
HXLINE(  24)		bool _hx_tmp;
HXDLIN(  24)		if ((kernelRadiusX == 0)) {
HXLINE(  24)			_hx_tmp = (kernelRadiusY == 0);
            		}
            		else {
HXLINE(  24)			_hx_tmp = false;
            		}
HXDLIN(  24)		if (_hx_tmp) {
HXLINE(  24)			return image;
            		}
HXLINE(  26)		 ::haxe::io::Bytes interpolated = ::vision::ds::_Image::Image_Impl__obj::clone(image);
HXLINE(  27)		{
HXLINE(  27)			int _g = minX;
HXDLIN(  27)			int _g1 = (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8));
HXDLIN(  27)			while((_g < _g1)){
HXLINE(  27)				_g = (_g + 1);
HXDLIN(  27)				int x = (_g - 1);
HXLINE(  28)				{
HXLINE(  28)					int _g2 = minY;
HXDLIN(  28)					int _g3 = ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(  28)					while((_g2 < _g3)){
HXLINE(  28)						_g2 = (_g2 + 1);
HXDLIN(  28)						int y = (_g2 - 1);
HXLINE(  30)						bool _hx_tmp1;
HXDLIN(  30)						bool _hx_tmp2;
HXDLIN(  30)						bool _hx_tmp3;
HXDLIN(  30)						if ((x >= 0)) {
HXLINE(  30)							_hx_tmp3 = (y >= 0);
            						}
            						else {
HXLINE(  30)							_hx_tmp3 = false;
            						}
HXDLIN(  30)						if (_hx_tmp3) {
HXLINE(  30)							_hx_tmp2 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(  30)							_hx_tmp2 = false;
            						}
HXDLIN(  30)						if (_hx_tmp2) {
HXLINE(  30)							_hx_tmp1 = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(  30)							_hx_tmp1 = false;
            						}
HXDLIN(  30)						if (!(_hx_tmp1)) {
HXLINE(  30)							::cpp::Int64 this1 = _hx_int64_make(x,y);
HXDLIN(  30)							int _hx_tmp4 = _hx_int64_high(this1);
HXDLIN(  30)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_int64_low(this1))));
            						}
HXDLIN(  30)						int position = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  30)						position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  30)						if ((((((( (int)(image->b->__get(position)) ) << 24) | (( (int)(image->b->__get((position + 1))) ) << 16)) | (( (int)(image->b->__get((position + 2))) ) << 8)) | ( (int)(image->b->__get((position + 3))) )) != 0)) {
HXLINE(  30)							continue;
            						}
HXLINE(  32)						::Array< int > neighborArray = ::Array_obj< int >::__new(0);
HXLINE(  33)						{
HXLINE(  33)							int _g4 = -(kernelRadiusX);
HXDLIN(  33)							int _g5 = (kernelRadiusX + 1);
HXDLIN(  33)							while((_g4 < _g5)){
HXLINE(  33)								_g4 = (_g4 + 1);
HXDLIN(  33)								int offX = (_g4 - 1);
HXLINE(  34)								{
HXLINE(  34)									int _g6 = -(kernelRadiusY);
HXDLIN(  34)									int _g7 = (kernelRadiusY + 1);
HXDLIN(  34)									while((_g6 < _g7)){
HXLINE(  34)										_g6 = (_g6 + 1);
HXDLIN(  34)										int offY = (_g6 - 1);
HXLINE(  35)										int ma = ((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) - 1);
HXDLIN(  35)										::Array< int > values = ::Array_obj< int >::__new(2)->init(0,(x + offX))->init(1,0);
HXDLIN(  35)										int max = values->__get(0);
HXDLIN(  35)										{
HXLINE(  35)											int _g8 = 0;
HXDLIN(  35)											int _g9 = values->length;
HXDLIN(  35)											while((_g8 < _g9)){
HXLINE(  35)												_g8 = (_g8 + 1);
HXDLIN(  35)												int i = (_g8 - 1);
HXDLIN(  35)												if ((values->__get(i) > max)) {
HXLINE( 688)													max = values->__get(i);
            												}
            											}
            										}
HXLINE(  35)										::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN(  35)										int min = values1->__get(0);
HXDLIN(  35)										{
HXLINE(  35)											int _g10 = 0;
HXDLIN(  35)											int _g11 = values1->length;
HXDLIN(  35)											while((_g10 < _g11)){
HXLINE(  35)												_g10 = (_g10 + 1);
HXDLIN(  35)												int i1 = (_g10 - 1);
HXDLIN(  35)												if ((values1->__get(i1) < min)) {
HXLINE( 652)													min = values1->__get(i1);
            												}
            											}
            										}
HXLINE(  35)										int x1 = min;
HXDLIN(  35)										int ma1 = (::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(  35)										::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,(y + offY))->init(1,0);
HXDLIN(  35)										int max1 = values2->__get(0);
HXDLIN(  35)										{
HXLINE(  35)											int _g12 = 0;
HXDLIN(  35)											int _g13 = values2->length;
HXDLIN(  35)											while((_g12 < _g13)){
HXLINE(  35)												_g12 = (_g12 + 1);
HXDLIN(  35)												int i2 = (_g12 - 1);
HXDLIN(  35)												if ((values2->__get(i2) > max1)) {
HXLINE( 688)													max1 = values2->__get(i2);
            												}
            											}
            										}
HXLINE(  35)										::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN(  35)										int min1 = values3->__get(0);
HXDLIN(  35)										{
HXLINE(  35)											int _g14 = 0;
HXDLIN(  35)											int _g15 = values3->length;
HXDLIN(  35)											while((_g14 < _g15)){
HXLINE(  35)												_g14 = (_g14 + 1);
HXDLIN(  35)												int i3 = (_g14 - 1);
HXDLIN(  35)												if ((values3->__get(i3) < min1)) {
HXLINE( 652)													min1 = values3->__get(i3);
            												}
            											}
            										}
HXLINE(  35)										int y1 = min1;
HXDLIN(  35)										bool _hx_tmp5;
HXDLIN(  35)										bool _hx_tmp6;
HXDLIN(  35)										bool _hx_tmp7;
HXDLIN(  35)										if ((x1 >= 0)) {
HXLINE(  35)											_hx_tmp7 = (y1 >= 0);
            										}
            										else {
HXLINE(  35)											_hx_tmp7 = false;
            										}
HXDLIN(  35)										if (_hx_tmp7) {
HXLINE(  35)											_hx_tmp6 = (x1 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(  35)											_hx_tmp6 = false;
            										}
HXDLIN(  35)										if (_hx_tmp6) {
HXLINE(  35)											_hx_tmp5 = (y1 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(  35)											_hx_tmp5 = false;
            										}
HXDLIN(  35)										if (!(_hx_tmp5)) {
HXLINE(  35)											::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN(  35)											int _hx_tmp8 = _hx_int64_high(this2);
HXDLIN(  35)											HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp8,_hx_int64_low(this2))));
            										}
HXDLIN(  35)										int position1 = (((y1 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(  35)										position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  35)										neighborArray->push(((((( (int)(image->b->__get(position1)) ) << 24) | (( (int)(image->b->__get((position1 + 1))) ) << 16)) | (( (int)(image->b->__get((position1 + 2))) ) << 8)) | ( (int)(image->b->__get((position1 + 3))) )));
            									}
            								}
            							}
            						}
HXLINE(  39)						::Array< int > _g16 = ::Array_obj< int >::__new(0);
HXDLIN(  39)						int _g17 = 0;
HXDLIN(  39)						::Array< int > _g18 = neighborArray;
HXDLIN(  39)						while((_g17 < _g18->length)){
HXLINE(  39)							int v = _g18->__get(_g17);
HXDLIN(  39)							_g17 = (_g17 + 1);
HXDLIN(  39)							if ((::vision::ds::_Color::Color_Impl__obj::toInt(v) != 0)) {
HXLINE(  39)								_g16->push(v);
            							}
            						}
HXDLIN(  39)						neighborArray = _g16;
HXLINE(  40)						int sumR = 0;
HXDLIN(  40)						int sumG = 0;
HXDLIN(  40)						int sumB = 0;
HXDLIN(  40)						int sumA = 0;
HXLINE(  41)						{
HXLINE(  41)							int _g19 = 0;
HXDLIN(  41)							while((_g19 < neighborArray->length)){
HXLINE(  41)								int color = neighborArray->__get(_g19);
HXDLIN(  41)								_g19 = (_g19 + 1);
HXLINE(  42)								sumR = (sumR + ((color >> 16) & 255));
HXLINE(  43)								sumG = (sumG + ((color >> 8) & 255));
HXLINE(  44)								sumB = (sumB + (color & 255));
HXLINE(  45)								sumA = (sumA + ((color >> 24) & 255));
            							}
            						}
HXLINE(  48)						{
HXLINE(  48)							int Red = ::Math_obj::round((( (Float)(sumR) ) / ( (Float)(neighborArray->length) )));
HXDLIN(  48)							int Green = ::Math_obj::round((( (Float)(sumG) ) / ( (Float)(neighborArray->length) )));
HXDLIN(  48)							int Blue = ::Math_obj::round((( (Float)(sumB) ) / ( (Float)(neighborArray->length) )));
HXDLIN(  48)							int Alpha = ::Math_obj::round((( (Float)(sumA) ) / ( (Float)(neighborArray->length) )));
HXDLIN(  48)							int color1 = 0;
HXDLIN(  48)							{
HXLINE(  48)								color1 = (color1 & -16711681);
HXDLIN(  48)								int color2;
HXDLIN(  48)								if ((Red > 255)) {
HXLINE(  48)									color2 = 255;
            								}
            								else {
HXLINE(  48)									if ((Red < 0)) {
HXLINE(  48)										color2 = 0;
            									}
            									else {
HXLINE(  48)										color2 = Red;
            									}
            								}
HXDLIN(  48)								color1 = (color1 | (color2 << 16));
            							}
HXDLIN(  48)							{
HXLINE(  48)								color1 = (color1 & -65281);
HXDLIN(  48)								int color3;
HXDLIN(  48)								if ((Green > 255)) {
HXLINE(  48)									color3 = 255;
            								}
            								else {
HXLINE(  48)									if ((Green < 0)) {
HXLINE(  48)										color3 = 0;
            									}
            									else {
HXLINE(  48)										color3 = Green;
            									}
            								}
HXDLIN(  48)								color1 = (color1 | (color3 << 8));
            							}
HXDLIN(  48)							{
HXLINE(  48)								color1 = (color1 & -256);
HXDLIN(  48)								int color4;
HXDLIN(  48)								if ((Blue > 255)) {
HXLINE(  48)									color4 = 255;
            								}
            								else {
HXLINE(  48)									if ((Blue < 0)) {
HXLINE(  48)										color4 = 0;
            									}
            									else {
HXLINE(  48)										color4 = Blue;
            									}
            								}
HXDLIN(  48)								color1 = (color1 | color4);
            							}
HXDLIN(  48)							{
HXLINE(  48)								color1 = (color1 & 16777215);
HXDLIN(  48)								int color5;
HXDLIN(  48)								if ((Alpha > 255)) {
HXLINE(  48)									color5 = 255;
            								}
            								else {
HXLINE(  48)									if ((Alpha < 0)) {
HXLINE(  48)										color5 = 0;
            									}
            									else {
HXLINE(  48)										color5 = Alpha;
            									}
            								}
HXDLIN(  48)								color1 = (color1 | (color5 << 24));
            							}
HXDLIN(  48)							int color6 = color1;
HXDLIN(  48)							bool _hx_tmp9;
HXDLIN(  48)							bool _hx_tmp10;
HXDLIN(  48)							bool _hx_tmp11;
HXDLIN(  48)							if ((x >= 0)) {
HXLINE(  48)								_hx_tmp11 = (y >= 0);
            							}
            							else {
HXLINE(  48)								_hx_tmp11 = false;
            							}
HXDLIN(  48)							if (_hx_tmp11) {
HXLINE(  48)								_hx_tmp10 = (x < (( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(  48)								_hx_tmp10 = false;
            							}
HXDLIN(  48)							if (_hx_tmp10) {
HXLINE(  48)								_hx_tmp9 = (y < ::Math_obj::ceil((( (Float)((interpolated->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(  48)								_hx_tmp9 = false;
            							}
HXDLIN(  48)							if (!(_hx_tmp9)) {
HXLINE(  48)								::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN(  48)								int _hx_tmp12 = _hx_int64_high(this3);
HXDLIN(  48)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,interpolated, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp12,_hx_int64_low(this3))));
            							}
            							else {
HXLINE(  48)								bool _hx_tmp13;
HXDLIN(  48)								bool _hx_tmp14;
HXDLIN(  48)								bool _hx_tmp15;
HXDLIN(  48)								bool _hx_tmp16;
HXDLIN(  48)								int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  48)								if (((( (int)(interpolated->b->__get(pos)) ) | (( (int)(interpolated->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(  48)									int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)									_hx_tmp16 = ((( (int)(interpolated->b->__get(pos1)) ) | (( (int)(interpolated->b->__get((pos1 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  48)									_hx_tmp16 = true;
            								}
HXDLIN(  48)								if (!(_hx_tmp16)) {
HXLINE(  48)									int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  48)									_hx_tmp15 = ((( (int)(interpolated->b->__get(pos2)) ) | (( (int)(interpolated->b->__get((pos2 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  48)									_hx_tmp15 = true;
            								}
HXDLIN(  48)								if (!(_hx_tmp15)) {
HXLINE(  48)									int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)									_hx_tmp14 = ((( (int)(interpolated->b->__get(pos3)) ) | (( (int)(interpolated->b->__get((pos3 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(  48)									_hx_tmp14 = true;
            								}
HXDLIN(  48)								if (!(_hx_tmp14)) {
HXLINE(  48)									_hx_tmp13 = (interpolated->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(  48)									_hx_tmp13 = true;
            								}
HXDLIN(  48)								if (_hx_tmp13) {
HXLINE(  48)									 ::vision::ds::ImageView v1 = null();
HXDLIN(  48)									bool _hx_tmp17;
HXDLIN(  48)									bool _hx_tmp18;
HXDLIN(  48)									bool _hx_tmp19;
HXDLIN(  48)									bool _hx_tmp20;
HXDLIN(  48)									bool _hx_tmp21;
HXDLIN(  48)									bool _hx_tmp22;
HXDLIN(  48)									int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  48)									if (((( (int)(interpolated->b->__get(pos4)) ) | (( (int)(interpolated->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(  48)										int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)										_hx_tmp22 = ((( (int)(interpolated->b->__get(pos5)) ) | (( (int)(interpolated->b->__get((pos5 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  48)										_hx_tmp22 = true;
            									}
HXDLIN(  48)									if (!(_hx_tmp22)) {
HXLINE(  48)										int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  48)										_hx_tmp21 = ((( (int)(interpolated->b->__get(pos6)) ) | (( (int)(interpolated->b->__get((pos6 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  48)										_hx_tmp21 = true;
            									}
HXDLIN(  48)									if (!(_hx_tmp21)) {
HXLINE(  48)										int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)										_hx_tmp20 = ((( (int)(interpolated->b->__get(pos7)) ) | (( (int)(interpolated->b->__get((pos7 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(  48)										_hx_tmp20 = true;
            									}
HXDLIN(  48)									if (!(_hx_tmp20)) {
HXLINE(  48)										_hx_tmp19 = (interpolated->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(  48)										_hx_tmp19 = true;
            									}
HXDLIN(  48)									if (!(_hx_tmp19)) {
HXLINE(  48)										_hx_tmp18 = ::hx::IsNull( v1 );
            									}
            									else {
HXLINE(  48)										_hx_tmp18 = false;
            									}
HXDLIN(  48)									if (_hx_tmp18) {
HXLINE(  48)										bool _hx_tmp23;
HXDLIN(  48)										bool _hx_tmp24;
HXDLIN(  48)										if ((x >= 0)) {
HXLINE(  48)											_hx_tmp24 = (y >= 0);
            										}
            										else {
HXLINE(  48)											_hx_tmp24 = false;
            										}
HXDLIN(  48)										if (_hx_tmp24) {
HXLINE(  48)											_hx_tmp23 = (x < (( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(  48)											_hx_tmp23 = false;
            										}
HXDLIN(  48)										if (_hx_tmp23) {
HXLINE(  48)											_hx_tmp17 = (y < ::Math_obj::ceil((( (Float)((interpolated->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(  48)											_hx_tmp17 = false;
            										}
            									}
            									else {
HXLINE(  48)										bool has = false;
HXDLIN(  48)										 ::vision::ds::ImageView view;
HXDLIN(  48)										if (::hx::IsNotNull( v1 )) {
HXLINE(  48)											view = v1;
            										}
            										else {
HXLINE(  48)											int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(  48)											int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)											int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(  48)											int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(  48)											view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(interpolated->b->__get(pos8)) ) | (( (int)(interpolated->b->__get((pos8 + 1))) ) << 8)),(( (int)(interpolated->b->__get(pos9)) ) | (( (int)(interpolated->b->__get((pos9 + 1))) ) << 8)),(( (int)(interpolated->b->__get(pos10)) ) | (( (int)(interpolated->b->__get((pos10 + 1))) ) << 8)),(( (int)(interpolated->b->__get(pos11)) ) | (( (int)(interpolated->b->__get((pos11 + 1))) ) << 8)),interpolated->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(  48)										switch((int)(view->shape)){
            											case (int)0: {
HXLINE(  48)												bool has1;
HXDLIN(  48)												bool has2;
HXDLIN(  48)												if ((x < (view->x + view->width))) {
HXLINE(  48)													has2 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(  48)													has2 = false;
            												}
HXDLIN(  48)												if (has2) {
HXLINE(  48)													has1 = (x >= view->x);
            												}
            												else {
HXLINE(  48)													has1 = false;
            												}
HXDLIN(  48)												if (has1) {
HXLINE(  48)													has = (y >= view->y);
            												}
            												else {
HXLINE(  48)													has = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(  48)												bool has3;
HXDLIN(  48)												bool has4;
HXDLIN(  48)												bool has5;
HXDLIN(  48)												if ((x < (view->x + view->width))) {
HXLINE(  48)													has5 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(  48)													has5 = false;
            												}
HXDLIN(  48)												if (has5) {
HXLINE(  48)													has4 = (x >= view->x);
            												}
            												else {
HXLINE(  48)													has4 = false;
            												}
HXDLIN(  48)												if (has4) {
HXLINE(  48)													has3 = (y >= view->y);
            												}
            												else {
HXLINE(  48)													has3 = false;
            												}
HXLINE(1400)												has = !(has3);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(  48)												if ((view->width > view->height)) {
HXLINE(  48)													Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(  48)													Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(  48)													Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(  48)													Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(  48)													Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  48)													Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(  48)													Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  48)													::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN(  48)													Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(  48)													Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(  48)													Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(  48)													Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(  48)													Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)													has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(  48)													if ((view->shape == 3)) {
HXLINE(1416)														has = !(has);
            													}
            												}
            												else {
HXLINE(  48)													if ((view->height > view->width)) {
HXLINE(  48)														Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(  48)														Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(  48)														Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(  48)														Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  48)														Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(  48)														Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  48)														Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(  48)														::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN(  48)														Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(  48)														Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(  48)														Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(  48)														Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(  48)														Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)														has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(  48)														if ((view->shape == 3)) {
HXLINE(1425)															has = !(has);
            														}
            													}
            													else {
HXLINE(  48)														Float point1_x = ( (Float)(x) );
HXDLIN(  48)														Float point1_y = ( (Float)(y) );
HXDLIN(  48)														Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(  48)														Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(  48)														Float x6 = (point2_x - point1_x);
HXDLIN(  48)														Float y6 = (point2_y - point1_y);
HXLINE(1428)														has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(  48)														if ((view->shape == 3)) {
HXLINE(1429)															has = !(has);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(  48)										_hx_tmp17 = has;
            									}
HXDLIN(  48)									if (_hx_tmp17) {
HXLINE(  48)										int position2 = (((y * (( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  48)										position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  48)										interpolated->b[position2] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN(  48)										interpolated->b[(position2 + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN(  48)										interpolated->b[(position2 + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN(  48)										interpolated->b[(position2 + 3)] = ( (unsigned char)((color6 & 255)) );
            									}
            								}
            								else {
HXLINE(  48)									int position3 = (((y * (( (int)(interpolated->b->__get(0)) ) | (( (int)(interpolated->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(  48)									position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(  48)									interpolated->b[position3] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN(  48)									interpolated->b[(position3 + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN(  48)									interpolated->b[(position3 + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN(  48)									interpolated->b[(position3 + 3)] = ( (unsigned char)((color6 & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  52)		return interpolated;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(BilinearInterpolation_obj,interpolateMissingPixels,return )


BilinearInterpolation_obj::BilinearInterpolation_obj()
{
}

bool BilinearInterpolation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"interpolateMissingPixels") ) { outValue = interpolateMissingPixels_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BilinearInterpolation_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BilinearInterpolation_obj_sStaticStorageInfo = 0;
#endif

::hx::Class BilinearInterpolation_obj::__mClass;

static ::String BilinearInterpolation_obj_sStaticFields[] = {
	HX_("interpolate",c1,d4,32,1f),
	HX_("interpolateMissingPixels",b2,89,1e,e4),
	::String(null())
};

void BilinearInterpolation_obj::__register()
{
	BilinearInterpolation_obj _hx_dummy;
	BilinearInterpolation_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.algorithms.BilinearInterpolation",f4,52,e1,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BilinearInterpolation_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BilinearInterpolation_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BilinearInterpolation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BilinearInterpolation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BilinearInterpolation_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace algorithms
