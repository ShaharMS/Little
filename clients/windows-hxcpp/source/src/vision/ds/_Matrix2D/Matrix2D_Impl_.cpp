// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_algorithms_GaussJordan
#include <vision/algorithms/GaussJordan.h>
#endif
#ifndef INCLUDED_vision_algorithms_PerspectiveWarp
#include <vision/algorithms/PerspectiveWarp.h>
#endif
#ifndef INCLUDED_vision_ds_Array2D
#include <vision/ds/Array2D.h>
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_
#include <vision/ds/_Matrix2D/Matrix2D_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds__TransformationMatrix_TransformationMatrix_Impl_
#include <vision/ds/_TransformationMatrix/TransformationMatrix_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds_specifics_PointTransformationPair
#include <vision/ds/specifics/PointTransformationPair.h>
#endif
#ifndef INCLUDED_vision_exceptions_MatrixOperationError
#include <vision/exceptions/MatrixOperationError.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_49_get_underlying,"vision.ds._Matrix2D.Matrix2D_Impl_","get_underlying",0x952fc6ac,"vision.ds._Matrix2D.Matrix2D_Impl_.get_underlying","vision/ds/Matrix2D.hx",49,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_53_set_underlying,"vision.ds._Matrix2D.Matrix2D_Impl_","set_underlying",0xb54faf20,"vision.ds._Matrix2D.Matrix2D_Impl_.set_underlying","vision/ds/Matrix2D.hx",53,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_62_get_rows,"vision.ds._Matrix2D.Matrix2D_Impl_","get_rows",0xfb6e0a28,"vision.ds._Matrix2D.Matrix2D_Impl_.get_rows","vision/ds/Matrix2D.hx",62,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_65_set_rows,"vision.ds._Matrix2D.Matrix2D_Impl_","set_rows",0xa9cb639c,"vision.ds._Matrix2D.Matrix2D_Impl_.set_rows","vision/ds/Matrix2D.hx",65,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_74_get_columns,"vision.ds._Matrix2D.Matrix2D_Impl_","get_columns",0x505feb2e,"vision.ds._Matrix2D.Matrix2D_Impl_.get_columns","vision/ds/Matrix2D.hx",74,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_77_set_columns,"vision.ds._Matrix2D.Matrix2D_Impl_","set_columns",0x5accf23a,"vision.ds._Matrix2D.Matrix2D_Impl_.set_columns","vision/ds/Matrix2D.hx",77,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_87__new,"vision.ds._Matrix2D.Matrix2D_Impl_","_new",0x864ab3e7,"vision.ds._Matrix2D.Matrix2D_Impl_._new","vision/ds/Matrix2D.hx",87,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_96_invert,"vision.ds._Matrix2D.Matrix2D_Impl_","invert",0xc00db31c,"vision.ds._Matrix2D.Matrix2D_Impl_.invert","vision/ds/Matrix2D.hx",96,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_102_getDeterminant,"vision.ds._Matrix2D.Matrix2D_Impl_","getDeterminant",0x7f3cf2a5,"vision.ds._Matrix2D.Matrix2D_Impl_.getDeterminant","vision/ds/Matrix2D.hx",102,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_134_getTrace,"vision.ds._Matrix2D.Matrix2D_Impl_","getTrace",0xa5faf795,"vision.ds._Matrix2D.Matrix2D_Impl_.getTrace","vision/ds/Matrix2D.hx",134,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_147_multiplyWithScalar,"vision.ds._Matrix2D.Matrix2D_Impl_","multiplyWithScalar",0xfedd521c,"vision.ds._Matrix2D.Matrix2D_Impl_.multiplyWithScalar","vision/ds/Matrix2D.hx",147,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_163_clone,"vision.ds._Matrix2D.Matrix2D_Impl_","clone",0x47622a17,"vision.ds._Matrix2D.Matrix2D_Impl_.clone","vision/ds/Matrix2D.hx",163,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_172_map,"vision.ds._Matrix2D.Matrix2D_Impl_","map",0x9a791ed6,"vision.ds._Matrix2D.Matrix2D_Impl_.map","vision/ds/Matrix2D.hx",172,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_191_getSubMatrix,"vision.ds._Matrix2D.Matrix2D_Impl_","getSubMatrix",0x24c1a4f1,"vision.ds._Matrix2D.Matrix2D_Impl_.getSubMatrix","vision/ds/Matrix2D.hx",191,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_217_getColumn,"vision.ds._Matrix2D.Matrix2D_Impl_","getColumn",0x16abd3c6,"vision.ds._Matrix2D.Matrix2D_Impl_.getColumn","vision/ds/Matrix2D.hx",217,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_224_getRow,"vision.ds._Matrix2D.Matrix2D_Impl_","getRow",0xc35ae72a,"vision.ds._Matrix2D.Matrix2D_Impl_.getRow","vision/ds/Matrix2D.hx",224,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_233_setColumn,"vision.ds._Matrix2D.Matrix2D_Impl_","setColumn",0xf9fcbfd2,"vision.ds._Matrix2D.Matrix2D_Impl_.setColumn","vision/ds/Matrix2D.hx",233,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_244_setRow,"vision.ds._Matrix2D.Matrix2D_Impl_","setRow",0x8fa33b9e,"vision.ds._Matrix2D.Matrix2D_Impl_.setRow","vision/ds/Matrix2D.hx",244,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_256_insertColumn,"vision.ds._Matrix2D.Matrix2D_Impl_","insertColumn",0x906f4b75,"vision.ds._Matrix2D.Matrix2D_Impl_.insertColumn","vision/ds/Matrix2D.hx",256,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_274_insertRow,"vision.ds._Matrix2D.Matrix2D_Impl_","insertRow",0xed445c1b,"vision.ds._Matrix2D.Matrix2D_Impl_.insertRow","vision/ds/Matrix2D.hx",274,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_291_removeColumn,"vision.ds._Matrix2D.Matrix2D_Impl_","removeColumn",0x890f7ec0,"vision.ds._Matrix2D.Matrix2D_Impl_.removeColumn","vision/ds/Matrix2D.hx",291,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_307_removeRow,"vision.ds._Matrix2D.Matrix2D_Impl_","removeRow",0x9ebbfbf0,"vision.ds._Matrix2D.Matrix2D_Impl_.removeRow","vision/ds/Matrix2D.hx",307,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_325_toString,"vision.ds._Matrix2D.Matrix2D_Impl_","toString",0x68732a32,"vision.ds._Matrix2D.Matrix2D_Impl_.toString","vision/ds/Matrix2D.hx",325,0x8d4bd3f2)
static const ::String _hx_array_data_98194fa8_65[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_411_IDENTITY,"vision.ds._Matrix2D.Matrix2D_Impl_","IDENTITY",0x42b92ec4,"vision.ds._Matrix2D.Matrix2D_Impl_.IDENTITY","vision/ds/Matrix2D.hx",411,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_67[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_68[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_69[] = {
	(Float)1,(Float)0,(Float)0,
};
static const Float _hx_array_data_98194fa8_70[] = {
	(Float)0,(Float)1,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_426_ROTATION,"vision.ds._Matrix2D.Matrix2D_Impl_","ROTATION",0x921026c4,"vision.ds._Matrix2D.Matrix2D_Impl_.ROTATION","vision/ds/Matrix2D.hx",426,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_72[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_73[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_441_TRANSLATION,"vision.ds._Matrix2D.Matrix2D_Impl_","TRANSLATION",0x37ea1b0b,"vision.ds._Matrix2D.Matrix2D_Impl_.TRANSLATION","vision/ds/Matrix2D.hx",441,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_75[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_76[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_455_SCALE,"vision.ds._Matrix2D.Matrix2D_Impl_","SCALE",0xf5bc1d24,"vision.ds._Matrix2D.Matrix2D_Impl_.SCALE","vision/ds/Matrix2D.hx",455,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_78[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_79[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_470_SHEAR,"vision.ds._Matrix2D.Matrix2D_Impl_","SHEAR",0xf90d2dbb,"vision.ds._Matrix2D.Matrix2D_Impl_.SHEAR","vision/ds/Matrix2D.hx",470,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_81[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_82[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_483_REFLECTION,"vision.ds._Matrix2D.Matrix2D_Impl_","REFLECTION",0x4e3ec8b1,"vision.ds._Matrix2D.Matrix2D_Impl_.REFLECTION","vision/ds/Matrix2D.hx",483,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_84[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_98194fa8_85[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_498_PERSPECTIVE,"vision.ds._Matrix2D.Matrix2D_Impl_","PERSPECTIVE",0x6e39cf96,"vision.ds._Matrix2D.Matrix2D_Impl_.PERSPECTIVE","vision/ds/Matrix2D.hx",498,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_516_DEPTH,"vision.ds._Matrix2D.Matrix2D_Impl_","DEPTH",0x54173f9d,"vision.ds._Matrix2D.Matrix2D_Impl_.DEPTH","vision/ds/Matrix2D.hx",516,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_89[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_529_createFilled,"vision.ds._Matrix2D.Matrix2D_Impl_","createFilled",0xfadae244,"vision.ds._Matrix2D.Matrix2D_Impl_.createFilled","vision/ds/Matrix2D.hx",529,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_547_createTransformation,"vision.ds._Matrix2D.Matrix2D_Impl_","createTransformation",0x0a94046b,"vision.ds._Matrix2D.Matrix2D_Impl_.createTransformation","vision/ds/Matrix2D.hx",547,0x8d4bd3f2)
static const Float _hx_array_data_98194fa8_93[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_567_multiplyMatrices,"vision.ds._Matrix2D.Matrix2D_Impl_","multiplyMatrices",0x3ba92364,"vision.ds._Matrix2D.Matrix2D_Impl_.multiplyMatrices","vision/ds/Matrix2D.hx",567,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_585_addMatrices,"vision.ds._Matrix2D.Matrix2D_Impl_","addMatrices",0x6f4b8715,"vision.ds._Matrix2D.Matrix2D_Impl_.addMatrices","vision/ds/Matrix2D.hx",585,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_600_subtractMatrices,"vision.ds._Matrix2D.Matrix2D_Impl_","subtractMatrices",0x2d622654,"vision.ds._Matrix2D.Matrix2D_Impl_.subtractMatrices","vision/ds/Matrix2D.hx",600,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_615_divideMatrices,"vision.ds._Matrix2D.Matrix2D_Impl_","divideMatrices",0x2d924039,"vision.ds._Matrix2D.Matrix2D_Impl_.divideMatrices","vision/ds/Matrix2D.hx",615,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_634_multiply,"vision.ds._Matrix2D.Matrix2D_Impl_","multiply",0xca913baa,"vision.ds._Matrix2D.Matrix2D_Impl_.multiply","vision/ds/Matrix2D.hx",634,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_654_add,"vision.ds._Matrix2D.Matrix2D_Impl_","add",0x9a70065b,"vision.ds._Matrix2D.Matrix2D_Impl_.add","vision/ds/Matrix2D.hx",654,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_668_subtract,"vision.ds._Matrix2D.Matrix2D_Impl_","subtract",0x2815ce9a,"vision.ds._Matrix2D.Matrix2D_Impl_.subtract","vision/ds/Matrix2D.hx",668,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_683_divide,"vision.ds._Matrix2D.Matrix2D_Impl_","divide",0xdf46fb7f,"vision.ds._Matrix2D.Matrix2D_Impl_.divide","vision/ds/Matrix2D.hx",683,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_718_to_array_array_float,"vision.ds._Matrix2D.Matrix2D_Impl_","to_array_array_float",0x80885fd2,"vision.ds._Matrix2D.Matrix2D_Impl_.to_array_array_float","vision/ds/Matrix2D.hx",718,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_721_from_array_array_float,"vision.ds._Matrix2D.Matrix2D_Impl_","from_array_array_float",0x5cd87501,"vision.ds._Matrix2D.Matrix2D_Impl_.from_array_array_float","vision/ds/Matrix2D.hx",721,0x8d4bd3f2)
HX_LOCAL_STACK_FRAME(_hx_pos_2472575cfd6e9c7a_727_from_array_array_int,"vision.ds._Matrix2D.Matrix2D_Impl_","from_array_array_int",0x4696a914,"vision.ds._Matrix2D.Matrix2D_Impl_.from_array_array_int","vision/ds/Matrix2D.hx",727,0x8d4bd3f2)
namespace vision{
namespace ds{
namespace _Matrix2D{

void Matrix2D_Impl__obj::__construct() { }

Dynamic Matrix2D_Impl__obj::__CreateEmpty() { return new Matrix2D_Impl__obj; }

void *Matrix2D_Impl__obj::_hx_vtable = 0;

Dynamic Matrix2D_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Matrix2D_Impl__obj > _hx_result = new Matrix2D_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Matrix2D_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6e448b8e;
}

 ::vision::ds::Array2D Matrix2D_Impl__obj::get_underlying( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_49_get_underlying)
HXDLIN(  49)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,get_underlying,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::set_underlying( ::vision::ds::Array2D this1, ::vision::ds::Array2D arr2d){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_53_set_underlying)
HXDLIN(  53)		this1 = arr2d;
HXDLIN(  53)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,set_underlying,return )

int Matrix2D_Impl__obj::get_rows( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_62_get_rows)
HXDLIN(  62)		return this1->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,get_rows,return )

int Matrix2D_Impl__obj::set_rows( ::vision::ds::Array2D this1,int amount){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_65_set_rows)
HXDLIN(  65)		this1->inner->resize((this1->width * amount));
HXDLIN(  65)		return (this1->height = amount);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,set_rows,return )

int Matrix2D_Impl__obj::get_columns( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_74_get_columns)
HXDLIN(  74)		return this1->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,get_columns,return )

int Matrix2D_Impl__obj::set_columns( ::vision::ds::Array2D this1,int amount){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_77_set_columns)
HXDLIN(  77)		this1->inner->resize((amount * this1->height));
HXDLIN(  77)		return (this1->width = amount);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,set_columns,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::_new(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_87__new)
HXDLIN(  87)		return  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,width,height,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,_new,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::invert( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_96_invert)
HXDLIN(  96)		this1 = ::vision::algorithms::GaussJordan_obj::invert(this1);
HXDLIN(  96)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,invert,return )

Float Matrix2D_Impl__obj::getDeterminant( ::vision::ds::Array2D this1){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_102_getDeterminant)
HXLINE( 103)		int len = this1->width;
HXLINE( 105)		switch((int)(len)){
            			case (int)0: {
HXLINE( 106)				return ( (Float)(1) );
            			}
            			break;
            			case (int)1: {
HXLINE( 107)				return ( (Float)(this1->inner->__get((0 * this1->width))) );
            			}
            			break;
            			case (int)2: {
HXLINE( 108)				return ((( (Float)(this1->inner->__get((0 * this1->width))) ) * ( (Float)(this1->inner->__get((this1->width + 1))) )) - (( (Float)(this1->inner->__get(this1->width)) ) * ( (Float)(this1->inner->__get(((0 * this1->width) + 1))) )));
            			}
            			break;
            			default:{
HXLINE( 110)				Float determinantSum = ((Float)0.);
HXLINE( 112)				int sign = 1;
HXLINE( 113)				{
HXLINE( 113)					int _g = 0;
HXDLIN( 113)					int _g1 = this1->width;
HXDLIN( 113)					while((_g < _g1)){
HXLINE( 113)						_g = (_g + 1);
HXDLIN( 113)						int i = (_g - 1);
HXLINE( 114)						Float current = ( (Float)(this1->inner->__get(((0 * this1->width) + i))) );
HXLINE( 115)						 ::Dynamic toX = null();
HXDLIN( 115)						 ::Dynamic toY = null();
HXDLIN( 115)						::Array< ::Dynamic> copy = this1->to2DArray();
HXDLIN( 115)						if (::hx::IsNull( toX )) {
HXLINE( 115)							toX = this1->width;
            						}
HXDLIN( 115)						if (::hx::IsNull( toY )) {
HXLINE( 115)							toY = this1->height;
            						}
HXDLIN( 115)						{
HXLINE( 115)							int _g2 = 0;
HXDLIN( 115)							int _g3 = 1;
HXDLIN( 115)							while((_g2 < _g3)){
HXLINE( 115)								_g2 = (_g2 + 1);
HXDLIN( 115)								int _ = (_g2 - 1);
HXDLIN( 115)								copy->shift();
            							}
            						}
HXDLIN( 115)						{
HXLINE( 115)							int _g4 = ( (int)(toX) );
HXDLIN( 115)							int _g5 = copy->length;
HXDLIN( 115)							while((_g4 < _g5)){
HXLINE( 115)								_g4 = (_g4 + 1);
HXDLIN( 115)								int _1 = (_g4 - 1);
HXDLIN( 115)								copy->pop();
            							}
            						}
HXDLIN( 115)						{
HXLINE( 115)							int _g6 = 0;
HXDLIN( 115)							while((_g6 < copy->length)){
HXLINE( 115)								::Array< Float > row = copy->__get(_g6).StaticCast< ::Array< Float > >();
HXDLIN( 115)								_g6 = (_g6 + 1);
HXDLIN( 115)								{
HXLINE( 115)									int _g7 = 0;
HXDLIN( 115)									int _g8 = 0;
HXDLIN( 115)									while((_g7 < _g8)){
HXLINE( 115)										_g7 = (_g7 + 1);
HXDLIN( 115)										int _2 = (_g7 - 1);
HXDLIN( 115)										row->shift();
            									}
            								}
HXDLIN( 115)								{
HXLINE( 115)									int _g9 = ( (int)(toY) );
HXDLIN( 115)									int _g10 = row->length;
HXDLIN( 115)									while((_g9 < _g10)){
HXLINE( 115)										_g9 = (_g9 + 1);
HXDLIN( 115)										int _3 = (_g9 - 1);
HXDLIN( 115)										row->pop();
            									}
            								}
            							}
            						}
HXDLIN( 115)						 ::vision::ds::Array2D childMatrix;
HXDLIN( 115)						if ((copy->length == 0)) {
HXLINE( 115)							childMatrix =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            						}
            						else {
HXLINE( 115)							 ::vision::ds::Array2D arr2d =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy->__get(0).StaticCast< ::Array< Float > >()->length,copy->length,null());
HXDLIN( 115)							::Array< Float > flat = ::Array_obj< Float >::__new(0);
HXDLIN( 115)							{
HXLINE( 115)								int _g11 = 0;
HXDLIN( 115)								while((_g11 < copy->length)){
HXLINE( 115)									::Array< Float > item = copy->__get(_g11).StaticCast< ::Array< Float > >();
HXDLIN( 115)									_g11 = (_g11 + 1);
HXDLIN( 115)									flat = flat->concat(item);
            								}
            							}
HXDLIN( 115)							arr2d->inner = flat;
HXDLIN( 115)							childMatrix = arr2d;
            						}
HXLINE( 116)						{
HXLINE( 116)							::Array< ::Dynamic> underlyingArray = childMatrix->inner->copy();
HXDLIN( 116)							{
HXLINE( 116)								int _g12 = 0;
HXDLIN( 116)								int _g13 = childMatrix->height;
HXDLIN( 116)								while((_g12 < _g13)){
HXLINE( 116)									_g12 = (_g12 + 1);
HXDLIN( 116)									int i1 = (_g12 - 1);
HXDLIN( 116)									underlyingArray[(i + (i1 * childMatrix->width))] = null();
            								}
            							}
HXDLIN( 116)							::Array< ::Dynamic> _g14 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 116)							{
HXLINE( 116)								int _g15 = 0;
HXDLIN( 116)								::Array< ::Dynamic> _g16 = underlyingArray;
HXDLIN( 116)								while((_g15 < _g16->length)){
HXLINE( 116)									 ::Dynamic v = _g16->__get(_g15);
HXDLIN( 116)									_g15 = (_g15 + 1);
HXDLIN( 116)									if (::hx::IsNotNull( v )) {
HXLINE( 116)										_g14->push(v);
            									}
            								}
            							}
HXDLIN( 116)							underlyingArray = _g14;
HXDLIN( 116)							{
HXLINE( 116)								int value = (childMatrix->width - 1);
HXDLIN( 116)								childMatrix->inner->resize((value * childMatrix->height));
HXDLIN( 116)								childMatrix->width = value;
            							}
HXDLIN( 116)							childMatrix->inner = underlyingArray;
            						}
HXLINE( 118)						determinantSum = (determinantSum + ((( (Float)(sign) ) * current) * ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::getDeterminant(childMatrix)));
HXLINE( 119)						sign = (sign * -1);
            					}
            				}
HXLINE( 122)				return determinantSum;
            			}
            		}
HXLINE( 105)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,getDeterminant,return )

Float Matrix2D_Impl__obj::getTrace( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_134_getTrace)
HXLINE( 135)		if ((this1->width != this1->height)) {
HXLINE( 135)			HX_STACK_DO_THROW(HX_("",00,00,00,00));
            		}
HXLINE( 136)		Float sum = ((Float)0.);
HXLINE( 137)		{
HXLINE( 137)			int _g = 0;
HXDLIN( 137)			int _g1 = this1->width;
HXDLIN( 137)			while((_g < _g1)){
HXLINE( 137)				_g = (_g + 1);
HXDLIN( 137)				int i = (_g - 1);
HXLINE( 138)				sum = (sum + ( (Float)(this1->inner->__get(((i * this1->width) + i))) ));
            			}
            		}
HXLINE( 140)		return sum;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,getTrace,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::multiplyWithScalar( ::vision::ds::Array2D this1,Float scalar){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_147_multiplyWithScalar)
HXLINE( 148)		{
HXLINE( 148)			int _g = 0;
HXDLIN( 148)			int _g1 = this1->inner->get_length();
HXDLIN( 148)			while((_g < _g1)){
HXLINE( 148)				_g = (_g + 1);
HXDLIN( 148)				int i = (_g - 1);
HXLINE( 149)				::Array< Float > base = this1->inner;
HXDLIN( 149)				int i1 = i;
HXDLIN( 149)				base[i1] = (base->__get(i1) * scalar);
            			}
            		}
HXLINE( 151)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,multiplyWithScalar,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::clone( ::vision::ds::Array2D this1){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_163_clone)
HXDLIN( 163)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,this1->width,this1->height,null());
HXDLIN( 163)		arr->inner = this1->inner->copy();
HXDLIN( 163)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,clone,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::map( ::vision::ds::Array2D this1, ::Dynamic mappingFunction){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_172_map)
HXLINE( 173)		 ::vision::ds::Array2D m =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,this1->width,this1->height,null());
HXLINE( 174)		{
HXLINE( 174)			int _g = 0;
HXDLIN( 174)			int _g1 = this1->inner->get_length();
HXDLIN( 174)			while((_g < _g1)){
HXLINE( 174)				_g = (_g + 1);
HXDLIN( 174)				int i = (_g - 1);
HXLINE( 175)				m->inner->set(i,mappingFunction(this1->inner->__get(i)));
            			}
            		}
HXLINE( 178)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,map,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::getSubMatrix( ::vision::ds::Array2D this1,::hx::Null< int >  __o_fromX,::hx::Null< int >  __o_fromY, ::Dynamic toX, ::Dynamic toY){
            		int fromX = __o_fromX.Default(0);
            		int fromY = __o_fromY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_191_getSubMatrix)
HXLINE( 192)		::Array< ::Dynamic> copy = this1->to2DArray();
HXLINE( 194)		if (::hx::IsNull( toX )) {
HXLINE( 194)			toX = this1->width;
            		}
HXLINE( 195)		if (::hx::IsNull( toY )) {
HXLINE( 195)			toY = this1->height;
            		}
HXLINE( 198)		{
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			int _g1 = fromY;
HXDLIN( 198)			while((_g < _g1)){
HXLINE( 198)				_g = (_g + 1);
HXDLIN( 198)				int _ = (_g - 1);
HXDLIN( 198)				copy->shift();
            			}
            		}
HXLINE( 199)		{
HXLINE( 199)			int _g2 = ( (int)(toX) );
HXDLIN( 199)			int _g3 = copy->length;
HXDLIN( 199)			while((_g2 < _g3)){
HXLINE( 199)				_g2 = (_g2 + 1);
HXDLIN( 199)				int _1 = (_g2 - 1);
HXDLIN( 199)				copy->pop();
            			}
            		}
HXLINE( 200)		{
HXLINE( 200)			int _g4 = 0;
HXDLIN( 200)			while((_g4 < copy->length)){
HXLINE( 200)				::Array< Float > row = copy->__get(_g4).StaticCast< ::Array< Float > >();
HXDLIN( 200)				_g4 = (_g4 + 1);
HXLINE( 201)				{
HXLINE( 201)					int _g5 = 0;
HXDLIN( 201)					int _g6 = fromX;
HXDLIN( 201)					while((_g5 < _g6)){
HXLINE( 201)						_g5 = (_g5 + 1);
HXDLIN( 201)						int _2 = (_g5 - 1);
HXDLIN( 201)						row->shift();
            					}
            				}
HXLINE( 202)				{
HXLINE( 202)					int _g7 = ( (int)(toY) );
HXDLIN( 202)					int _g8 = row->length;
HXDLIN( 202)					while((_g7 < _g8)){
HXLINE( 202)						_g7 = (_g7 + 1);
HXDLIN( 202)						int _3 = (_g7 - 1);
HXDLIN( 202)						row->pop();
            					}
            				}
            			}
            		}
HXLINE( 206)		if ((copy->length == 0)) {
HXLINE( 206)			return  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            		}
HXLINE( 208)		 ::vision::ds::Array2D arr2d =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy->__get(0).StaticCast< ::Array< Float > >()->length,copy->length,null());
HXLINE( 209)		::Array< Float > flat = ::Array_obj< Float >::__new(0);
HXDLIN( 209)		{
HXLINE( 209)			int _g9 = 0;
HXDLIN( 209)			while((_g9 < copy->length)){
HXLINE( 209)				::Array< Float > item = copy->__get(_g9).StaticCast< ::Array< Float > >();
HXDLIN( 209)				_g9 = (_g9 + 1);
HXDLIN( 209)				flat = flat->concat(item);
            			}
            		}
HXDLIN( 209)		arr2d->inner = flat;
HXLINE( 210)		return arr2d;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Matrix2D_Impl__obj,getSubMatrix,return )

::Array< Float > Matrix2D_Impl__obj::getColumn( ::vision::ds::Array2D this1,int x){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_217_getColumn)
HXDLIN( 217)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 217)		{
HXDLIN( 217)			int _g1 = 0;
HXDLIN( 217)			int _g2 = this1->height;
HXDLIN( 217)			while((_g1 < _g2)){
HXDLIN( 217)				_g1 = (_g1 + 1);
HXDLIN( 217)				int i = (_g1 - 1);
HXDLIN( 217)				_g->push(this1->inner->__get(((i * this1->width) + x)));
            			}
            		}
HXDLIN( 217)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,getColumn,return )

::Array< Float > Matrix2D_Impl__obj::getRow( ::vision::ds::Array2D this1,int y){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_224_getRow)
HXDLIN( 224)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 224)		{
HXDLIN( 224)			int _g1 = (y * this1->width);
HXDLIN( 224)			int _g2 = ((y * this1->width) + this1->width);
HXDLIN( 224)			while((_g1 < _g2)){
HXDLIN( 224)				_g1 = (_g1 + 1);
HXDLIN( 224)				int i = (_g1 - 1);
HXDLIN( 224)				_g->push(this1->inner->__get(i));
            			}
            		}
HXDLIN( 224)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,getRow,return )

void Matrix2D_Impl__obj::setColumn( ::vision::ds::Array2D this1,int x,::Array< Float > arr){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_233_setColumn)
HXLINE( 234)		if ((arr->length < this1->height)) {
HXLINE( 234)			HX_STACK_DO_THROW(HX_("",00,00,00,00));
            		}
HXLINE( 235)		{
HXLINE( 235)			int _g = 0;
HXDLIN( 235)			int _g1 = this1->height;
HXDLIN( 235)			while((_g < _g1)){
HXLINE( 235)				_g = (_g + 1);
HXDLIN( 235)				int y = (_g - 1);
HXDLIN( 235)				this1->inner->set((x + (y * this1->width)),arr->__get(y));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,setColumn,(void))

void Matrix2D_Impl__obj::setRow( ::vision::ds::Array2D this1,int y,::Array< Float > arr){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_244_setRow)
HXLINE( 245)		if ((arr->length < this1->width)) {
HXLINE( 245)			HX_STACK_DO_THROW(HX_("",00,00,00,00));
            		}
HXLINE( 246)		{
HXLINE( 246)			int _g = 0;
HXDLIN( 246)			int _g1 = this1->width;
HXDLIN( 246)			while((_g < _g1)){
HXLINE( 246)				_g = (_g + 1);
HXDLIN( 246)				int x = (_g - 1);
HXDLIN( 246)				this1->inner->set((x + (y * this1->width)),arr->__get(x));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,setRow,(void))

 ::vision::ds::Array2D Matrix2D_Impl__obj::insertColumn( ::vision::ds::Array2D this1,int x,::Array< Float > arr){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_256_insertColumn)
HXLINE( 257)		 ::vision::ds::Array2D n =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,(this1->width + 1),this1->height,null());
HXLINE( 258)		{
HXLINE( 258)			int _g = 0;
HXDLIN( 258)			int _g1 = this1->height;
HXDLIN( 258)			while((_g < _g1)){
HXLINE( 258)				_g = (_g + 1);
HXDLIN( 258)				int y = (_g - 1);
HXLINE( 259)				{
HXLINE( 259)					int _g2 = 0;
HXDLIN( 259)					int _g3 = x;
HXDLIN( 259)					while((_g2 < _g3)){
HXLINE( 259)						_g2 = (_g2 + 1);
HXDLIN( 259)						int i = (_g2 - 1);
HXDLIN( 259)						n->inner->set((i + (y * n->width)),( (Float)(this1->inner->__get(((y * this1->width) + i))) ));
            					}
            				}
HXLINE( 260)				{
HXLINE( 260)					int _g4 = x;
HXDLIN( 260)					int _g5 = this1->width;
HXDLIN( 260)					while((_g4 < _g5)){
HXLINE( 260)						_g4 = (_g4 + 1);
HXDLIN( 260)						int i1 = (_g4 - 1);
HXDLIN( 260)						n->inner->set(((i1 + 1) + (y * n->width)),( (Float)(this1->inner->__get(((y * this1->width) + i1))) ));
            					}
            				}
HXLINE( 261)				n->inner->set((x + (y * n->width)),arr->__get(y));
            			}
            		}
HXLINE( 264)		this1 = n;
HXDLIN( 264)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,insertColumn,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::insertRow( ::vision::ds::Array2D this1,int y,::Array< Float > arr){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_274_insertRow)
HXLINE( 275)		 ::vision::ds::Array2D n =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,this1->width,(this1->height + 1),null());
HXLINE( 276)		{
HXLINE( 276)			int _g = 0;
HXDLIN( 276)			int _g1 = this1->width;
HXDLIN( 276)			while((_g < _g1)){
HXLINE( 276)				_g = (_g + 1);
HXDLIN( 276)				int x = (_g - 1);
HXLINE( 277)				{
HXLINE( 277)					int _g2 = 0;
HXDLIN( 277)					int _g3 = y;
HXDLIN( 277)					while((_g2 < _g3)){
HXLINE( 277)						_g2 = (_g2 + 1);
HXDLIN( 277)						int i = (_g2 - 1);
HXDLIN( 277)						n->inner->set((x + (i * n->width)),( (Float)(this1->inner->__get(((i * this1->width) + x))) ));
            					}
            				}
HXLINE( 278)				{
HXLINE( 278)					int _g4 = y;
HXDLIN( 278)					int _g5 = this1->height;
HXDLIN( 278)					while((_g4 < _g5)){
HXLINE( 278)						_g4 = (_g4 + 1);
HXDLIN( 278)						int i1 = (_g4 - 1);
HXDLIN( 278)						n->inner->set((x + ((i1 + 1) * n->width)),( (Float)(this1->inner->__get(((i1 * this1->width) + x))) ));
            					}
            				}
HXLINE( 279)				n->inner->set((x + (y * n->width)),arr->__get(x));
            			}
            		}
HXLINE( 282)		this1 = n;
HXDLIN( 282)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,insertRow,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::removeColumn( ::vision::ds::Array2D this1,int x){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_291_removeColumn)
HXLINE( 292)		::Array< ::Dynamic> underlyingArray = this1->inner->copy();
HXLINE( 293)		{
HXLINE( 293)			int _g = 0;
HXDLIN( 293)			int _g1 = this1->height;
HXDLIN( 293)			while((_g < _g1)){
HXLINE( 293)				_g = (_g + 1);
HXDLIN( 293)				int i = (_g - 1);
HXDLIN( 293)				underlyingArray[(x + (i * this1->width))] = null();
            			}
            		}
HXLINE( 294)		::Array< ::Dynamic> _g2 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 294)		{
HXLINE( 294)			int _g3 = 0;
HXDLIN( 294)			::Array< ::Dynamic> _g4 = underlyingArray;
HXDLIN( 294)			while((_g3 < _g4->length)){
HXLINE( 294)				 ::Dynamic v = _g4->__get(_g3);
HXDLIN( 294)				_g3 = (_g3 + 1);
HXDLIN( 294)				if (::hx::IsNotNull( v )) {
HXLINE( 294)					_g2->push(v);
            				}
            			}
            		}
HXDLIN( 294)		underlyingArray = _g2;
HXLINE( 295)		{
HXLINE( 295)			int value = (this1->width - 1);
HXDLIN( 295)			this1->inner->resize((value * this1->height));
HXDLIN( 295)			this1->width = value;
            		}
HXLINE( 296)		this1->inner = underlyingArray;
HXLINE( 298)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,removeColumn,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::removeRow( ::vision::ds::Array2D this1,int y){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_307_removeRow)
HXLINE( 308)		::Array< ::Dynamic> underlyingArray = this1->inner->copy();
HXLINE( 309)		{
HXLINE( 309)			int _g = 0;
HXDLIN( 309)			int _g1 = this1->width;
HXDLIN( 309)			while((_g < _g1)){
HXLINE( 309)				_g = (_g + 1);
HXDLIN( 309)				int i = (_g - 1);
HXDLIN( 309)				underlyingArray[(y + (this1->width * i))] = null();
            			}
            		}
HXLINE( 310)		::Array< ::Dynamic> _g2 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 310)		{
HXLINE( 310)			int _g3 = 0;
HXDLIN( 310)			::Array< ::Dynamic> _g4 = underlyingArray;
HXDLIN( 310)			while((_g3 < _g4->length)){
HXLINE( 310)				 ::Dynamic v = _g4->__get(_g3);
HXDLIN( 310)				_g3 = (_g3 + 1);
HXDLIN( 310)				if (::hx::IsNotNull( v )) {
HXLINE( 310)					_g2->push(v);
            				}
            			}
            		}
HXDLIN( 310)		underlyingArray = _g2;
HXLINE( 312)		{
HXLINE( 312)			int value = (this1->height - 1);
HXDLIN( 312)			this1->inner->resize((this1->width * value));
HXDLIN( 312)			this1->height = value;
            		}
HXLINE( 313)		this1->inner = underlyingArray;
HXLINE( 315)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,removeRow,return )

::String Matrix2D_Impl__obj::toString( ::vision::ds::Array2D this1,::hx::Null< int >  __o_precision,::hx::Null< bool >  __o_pretty){
            		int precision = __o_precision.Default(5);
            		bool pretty = __o_pretty.Default(true);
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_325_toString)
HXLINE( 326)		if (!(pretty)) {
HXLINE( 326)			::String str = HX_("\n[[",2a,e6,07,00);
HXDLIN( 326)			int counter = 0;
HXDLIN( 326)			{
HXLINE( 326)				int _g = 0;
HXDLIN( 326)				::Array< Float > _g1 = this1->inner;
HXDLIN( 326)				while((_g < _g1->length)){
HXLINE( 326)					Float item = _g1->__get(_g);
HXDLIN( 326)					_g = (_g + 1);
HXDLIN( 326)					if ((counter < this1->width)) {
HXLINE( 326)						::String add = (HX_(", ",74,26,00,00) + ::Std_obj::string(item));
HXDLIN( 326)						if ((counter == 0)) {
HXLINE( 326)							add = add.substr(2,null());
            						}
HXDLIN( 326)						str = (str + add);
HXDLIN( 326)						counter = (counter + 1);
            					}
            					else {
HXLINE( 326)						counter = 0;
HXDLIN( 326)						str = (str + HX_("],\n [",f6,08,61,a9));
HXDLIN( 326)						::String add1 = (HX_("",00,00,00,00) + ::Std_obj::string(item));
HXDLIN( 326)						str = (str + add1);
HXDLIN( 326)						counter = (counter + 1);
            					}
            				}
            			}
HXDLIN( 326)			return (str.substring(0,str.length) + HX_("]]",60,51,00,00));
            		}
HXLINE( 329)		int maxLen = 1;
HXLINE( 330)		{
HXLINE( 330)			int _g2 = 0;
HXDLIN( 330)			::Array< Float > _g3 = this1->inner;
HXDLIN( 330)			while((_g2 < _g3->length)){
HXLINE( 330)				Float item1 = _g3->__get(_g2);
HXDLIN( 330)				_g2 = (_g2 + 1);
HXLINE( 331)				int len;
HXLINE( 332)				if ((precision == -1)) {
HXLINE( 332)					len = ::Std_obj::string(item1).length;
            				}
            				else {
HXLINE( 333)					Float multiplier = ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ));
HXDLIN( 333)					len = ::Std_obj::string((( (Float)(::Math_obj::round((item1 * multiplier))) ) / multiplier)).length;
            				}
HXLINE( 334)				if ((len > maxLen)) {
HXLINE( 334)					maxLen = len;
            				}
            			}
            		}
HXLINE( 336)		maxLen = (maxLen + 1);
HXLINE( 352)		::String st = HX_("",00,00,00,00);
HXDLIN( 352)		{
HXLINE( 352)			int _g4 = 0;
HXDLIN( 352)			int _g5 = (((maxLen * this1->width) + (2 * (this1->width - 1))) - 1);
HXDLIN( 352)			while((_g4 < _g5)){
HXLINE( 352)				_g4 = (_g4 + 1);
HXDLIN( 352)				int i = (_g4 - 1);
HXDLIN( 352)				st = (st + HX_(" ",20,00,00,00));
            			}
            		}
HXDLIN( 352)		::String top = ((HX_W(u"\n\u250c ",cd10,57d4) + st) + HX_W(u" \u2510",d2be,15d2));
HXLINE( 353)		::String st1 = HX_("",00,00,00,00);
HXDLIN( 353)		{
HXLINE( 353)			int _g6 = 0;
HXDLIN( 353)			int _g7 = (((maxLen * this1->width) + (2 * (this1->width - 1))) - 1);
HXDLIN( 353)			while((_g6 < _g7)){
HXLINE( 353)				_g6 = (_g6 + 1);
HXDLIN( 353)				int i1 = (_g6 - 1);
HXDLIN( 353)				st1 = (st1 + HX_(" ",20,00,00,00));
            			}
            		}
HXDLIN( 353)		::String bottom = ((HX_W(u"\u2514 ",06fe,95d3) + st1) + HX_W(u" \u2518",d2c6,15d2));
HXLINE( 357)		::Array< ::String > rows = ::Array_obj< ::String >::fromData( _hx_array_data_98194fa8_65,1);
HXLINE( 358)		int counter1 = 0;
HXLINE( 359)		int floor = 0;
HXLINE( 360)		{
HXLINE( 360)			int _g8 = 0;
HXDLIN( 360)			::Array< Float > _g9 = this1->inner;
HXDLIN( 360)			while((_g8 < _g9->length)){
HXLINE( 360)				Float item2 = _g9->__get(_g8);
HXDLIN( 360)				_g8 = (_g8 + 1);
HXLINE( 361)				if ((counter1 < this1->width)) {
HXLINE( 362)					 ::Dynamic itemString;
HXDLIN( 362)					if ((precision != -1)) {
HXLINE( 362)						Float multiplier1 = ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ));
HXDLIN( 362)						itemString = (( (Float)(::Math_obj::round((item2 * multiplier1))) ) / multiplier1);
            					}
            					else {
HXLINE( 362)						itemString = item2;
            					}
HXDLIN( 362)					::String itemString1 = ::Std_obj::string(itemString);
HXDLIN( 362)					bool add2;
HXDLIN( 362)					if ((precision != -1)) {
HXLINE( 362)						Float multiplier2 = ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ));
HXDLIN( 362)						add2 = (item2 != (( (Float)(::Math_obj::round((item2 * multiplier2))) ) / multiplier2));
            					}
            					else {
HXLINE( 362)						add2 = false;
            					}
HXDLIN( 362)					if (add2) {
HXLINE( 362)						itemString1 = (itemString1 + HX_W(u"\u2026",ed88,00ab));
            					}
HXDLIN( 362)					if ((itemString1.length < maxLen)) {
HXLINE( 362)						::String st2 = HX_("",00,00,00,00);
HXDLIN( 362)						{
HXLINE( 362)							int _g10 = 0;
HXDLIN( 362)							int _g11 = ::Math_obj::floor((( (Float)((maxLen - itemString1.length)) ) / ( (Float)(2) )));
HXDLIN( 362)							while((_g10 < _g11)){
HXLINE( 362)								_g10 = (_g10 + 1);
HXDLIN( 362)								int i2 = (_g10 - 1);
HXDLIN( 362)								st2 = (st2 + HX_(" ",20,00,00,00));
            							}
            						}
HXDLIN( 362)						::String itemString2 = (st2 + itemString1);
HXDLIN( 362)						::String st3 = HX_("",00,00,00,00);
HXDLIN( 362)						{
HXLINE( 362)							int _g12 = 0;
HXDLIN( 362)							int _g13 = ::Math_obj::ceil((( (Float)((maxLen - itemString1.length)) ) / ( (Float)(2) )));
HXDLIN( 362)							while((_g12 < _g13)){
HXLINE( 362)								_g12 = (_g12 + 1);
HXDLIN( 362)								int i3 = (_g12 - 1);
HXDLIN( 362)								st3 = (st3 + HX_(" ",20,00,00,00));
            							}
            						}
HXDLIN( 362)						itemString1 = (itemString2 + st3);
            					}
HXDLIN( 362)					::String add3 = (HX_(", ",74,26,00,00) + itemString1);
HXLINE( 363)					if ((counter1 == 0)) {
HXLINE( 363)						add3 = add3.substr(2,null());
            					}
HXLINE( 364)					::Array< ::String > rows1 = rows;
HXDLIN( 364)					int floor1 = floor;
HXDLIN( 364)					rows1[floor1] = (rows1->__get(floor1) + add3);
HXLINE( 365)					counter1 = (counter1 + 1);
            				}
            				else {
HXLINE( 367)					counter1 = 0;
HXLINE( 368)					floor = (floor + 1);
HXLINE( 369)					rows[floor] = HX_("",00,00,00,00);
HXLINE( 370)					 ::Dynamic itemString3;
HXDLIN( 370)					if ((precision != -1)) {
HXLINE( 370)						Float multiplier3 = ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ));
HXDLIN( 370)						itemString3 = (( (Float)(::Math_obj::round((item2 * multiplier3))) ) / multiplier3);
            					}
            					else {
HXLINE( 370)						itemString3 = item2;
            					}
HXDLIN( 370)					::String itemString4 = ::Std_obj::string(itemString3);
HXDLIN( 370)					bool add4;
HXDLIN( 370)					if ((precision != -1)) {
HXLINE( 370)						Float multiplier4 = ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ));
HXDLIN( 370)						add4 = (item2 != (( (Float)(::Math_obj::round((item2 * multiplier4))) ) / multiplier4));
            					}
            					else {
HXLINE( 370)						add4 = false;
            					}
HXDLIN( 370)					if (add4) {
HXLINE( 370)						itemString4 = (itemString4 + HX_W(u"\u2026",ed88,00ab));
            					}
HXDLIN( 370)					if ((itemString4.length < maxLen)) {
HXLINE( 370)						::String st4 = HX_("",00,00,00,00);
HXDLIN( 370)						{
HXLINE( 370)							int _g14 = 0;
HXDLIN( 370)							int _g15 = ::Math_obj::floor((( (Float)((maxLen - itemString4.length)) ) / ( (Float)(2) )));
HXDLIN( 370)							while((_g14 < _g15)){
HXLINE( 370)								_g14 = (_g14 + 1);
HXDLIN( 370)								int i4 = (_g14 - 1);
HXDLIN( 370)								st4 = (st4 + HX_(" ",20,00,00,00));
            							}
            						}
HXDLIN( 370)						::String itemString5 = (st4 + itemString4);
HXDLIN( 370)						::String st5 = HX_("",00,00,00,00);
HXDLIN( 370)						{
HXLINE( 370)							int _g16 = 0;
HXDLIN( 370)							int _g17 = ::Math_obj::ceil((( (Float)((maxLen - itemString4.length)) ) / ( (Float)(2) )));
HXDLIN( 370)							while((_g16 < _g17)){
HXLINE( 370)								_g16 = (_g16 + 1);
HXDLIN( 370)								int i5 = (_g16 - 1);
HXDLIN( 370)								st5 = (st5 + HX_(" ",20,00,00,00));
            							}
            						}
HXDLIN( 370)						itemString4 = (itemString5 + st5);
            					}
HXDLIN( 370)					::String add5 = (HX_("",00,00,00,00) + itemString4);
HXLINE( 371)					::Array< ::String > rows2 = rows;
HXDLIN( 371)					int floor2 = floor;
HXDLIN( 371)					rows2[floor2] = (rows2->__get(floor2) + add5);
HXLINE( 372)					counter1 = (counter1 + 1);
            				}
            			}
            		}
HXLINE( 376)		::String string = (top + HX_("\n",0a,00,00,00));
HXLINE( 377)		{
HXLINE( 377)			int _g18 = 0;
HXDLIN( 377)			while((_g18 < rows->length)){
HXLINE( 377)				::String r = rows->__get(_g18);
HXDLIN( 377)				_g18 = (_g18 + 1);
HXLINE( 378)				string = (string + ((HX_W(u"\u2502 ",f750,95d2) + r) + HX_W(u"\u2502\n",f73a,95d2)));
            			}
            		}
HXLINE( 380)		string = (string + bottom);
HXLINE( 382)		return string;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,toString,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::IDENTITY(){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_411_IDENTITY)
HXDLIN( 411)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_67,3);
HXDLIN( 411)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 411)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_68,3);
            		}
HXDLIN( 411)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 411)		arr->inner = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_69,3)->concat(::Array_obj< Float >::fromData( _hx_array_data_98194fa8_70,3))->concat(homogeneousRow);
HXDLIN( 411)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix2D_Impl__obj,IDENTITY,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::ROTATION(Float angle, ::Dynamic __o_degrees, ::vision::ds::Point2D origin){
            		 ::Dynamic degrees = __o_degrees;
            		if (::hx::IsNull(__o_degrees)) degrees = true;
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_426_ROTATION)
HXLINE( 427)		Float xRow;
HXDLIN( 427)		if (( (bool)(degrees) )) {
HXLINE( 427)			xRow = ::Math_obj::cos(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 427)			xRow = ::Math_obj::cos(angle);
            		}
HXDLIN( 427)		Float xRow1;
HXDLIN( 427)		if (( (bool)(degrees) )) {
HXLINE( 427)			xRow1 = -(::Math_obj::sin(((angle * ::Math_obj::PI) / ( (Float)(180) ))));
            		}
            		else {
HXLINE( 427)			xRow1 = -(::Math_obj::sin(angle));
            		}
HXDLIN( 427)		Float xRow2;
HXDLIN( 427)		if (::hx::IsNotNull( origin )) {
HXLINE( 427)			xRow2 = origin->x;
            		}
            		else {
HXLINE( 427)			xRow2 = ( (Float)(0) );
            		}
HXLINE( 428)		Float yRow;
HXDLIN( 428)		if (( (bool)(degrees) )) {
HXLINE( 428)			yRow = ::Math_obj::sin(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 428)			yRow = ::Math_obj::sin(angle);
            		}
HXDLIN( 428)		Float yRow1;
HXDLIN( 428)		if (( (bool)(degrees) )) {
HXLINE( 428)			yRow1 = ::Math_obj::cos(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 428)			yRow1 = ::Math_obj::cos(angle);
            		}
HXDLIN( 428)		Float yRow2;
HXDLIN( 428)		if (::hx::IsNotNull( origin )) {
HXLINE( 428)			yRow2 = origin->y;
            		}
            		else {
HXLINE( 428)			yRow2 = ( (Float)(0) );
            		}
HXLINE( 426)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_72,3);
HXDLIN( 426)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 426)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_73,3);
            		}
HXDLIN( 426)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 426)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,xRow)->init(1,xRow1)->init(2,xRow2)->concat(::Array_obj< Float >::__new(3)->init(0,yRow)->init(1,yRow1)->init(2,yRow2))->concat(homogeneousRow);
HXDLIN( 426)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,ROTATION,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::TRANSLATION(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_441_TRANSLATION)
HXDLIN( 441)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_75,3);
HXDLIN( 441)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 441)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_76,3);
            		}
HXDLIN( 441)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 441)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,1)->init(1,0)->init(2,x)->concat(::Array_obj< Float >::__new(3)->init(0,0)->init(1,1)->init(2,y))->concat(homogeneousRow);
HXDLIN( 441)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,TRANSLATION,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::SCALE(::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY){
            		Float scaleX = __o_scaleX.Default(1);
            		Float scaleY = __o_scaleY.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_455_SCALE)
HXDLIN( 455)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_78,3);
HXDLIN( 455)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 455)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_79,3);
            		}
HXDLIN( 455)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 455)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,scaleX)->init(1,0)->init(2,0)->concat(::Array_obj< Float >::__new(3)->init(0,0)->init(1,scaleY)->init(2,0))->concat(homogeneousRow);
HXDLIN( 455)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,SCALE,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::SHEAR(::hx::Null< Float >  __o_shearX,::hx::Null< Float >  __o_shearY){
            		Float shearX = __o_shearX.Default(0);
            		Float shearY = __o_shearY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_470_SHEAR)
HXDLIN( 470)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_81,3);
HXDLIN( 470)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 470)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_82,3);
            		}
HXDLIN( 470)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 470)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,1)->init(1,shearX)->init(2,0)->concat(::Array_obj< Float >::__new(3)->init(0,shearY)->init(1,1)->init(2,0))->concat(homogeneousRow);
HXDLIN( 470)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,SHEAR,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::REFLECTION(Float angle, ::Dynamic __o_degrees, ::vision::ds::Point2D origin){
            		 ::Dynamic degrees = __o_degrees;
            		if (::hx::IsNull(__o_degrees)) degrees = true;
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_483_REFLECTION)
HXLINE( 484)		angle = (angle * ( (Float)(2) ));
HXLINE( 486)		Float xRow;
HXDLIN( 486)		if (( (bool)(degrees) )) {
HXLINE( 486)			xRow = ::Math_obj::cos(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 486)			xRow = ::Math_obj::cos(angle);
            		}
HXDLIN( 486)		Float xRow1;
HXDLIN( 486)		if (( (bool)(degrees) )) {
HXLINE( 486)			xRow1 = ::Math_obj::sin(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 486)			xRow1 = ::Math_obj::sin(angle);
            		}
HXDLIN( 486)		Float xRow2;
HXDLIN( 486)		if (::hx::IsNotNull( origin )) {
HXLINE( 486)			xRow2 = origin->x;
            		}
            		else {
HXLINE( 486)			xRow2 = ( (Float)(0) );
            		}
HXLINE( 487)		Float yRow;
HXDLIN( 487)		if (( (bool)(degrees) )) {
HXLINE( 487)			yRow = ::Math_obj::sin(((angle * ::Math_obj::PI) / ( (Float)(180) )));
            		}
            		else {
HXLINE( 487)			yRow = ::Math_obj::sin(angle);
            		}
HXDLIN( 487)		Float yRow1;
HXDLIN( 487)		if (( (bool)(degrees) )) {
HXLINE( 487)			yRow1 = -(::Math_obj::cos(((angle * ::Math_obj::PI) / ( (Float)(180) ))));
            		}
            		else {
HXLINE( 487)			yRow1 = -(::Math_obj::cos(angle));
            		}
HXDLIN( 487)		Float yRow2;
HXDLIN( 487)		if (::hx::IsNotNull( origin )) {
HXLINE( 487)			yRow2 = origin->y;
            		}
            		else {
HXLINE( 487)			yRow2 = ( (Float)(0) );
            		}
HXLINE( 485)		::Array< Float > homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_84,3);
HXDLIN( 485)		if (::hx::IsNull( homogeneousRow )) {
HXLINE( 485)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_85,3);
            		}
HXDLIN( 485)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 485)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,xRow)->init(1,xRow1)->init(2,xRow2)->concat(::Array_obj< Float >::__new(3)->init(0,yRow)->init(1,yRow1)->init(2,yRow2))->concat(homogeneousRow);
HXDLIN( 485)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,REFLECTION,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::PERSPECTIVE(::Array< ::Dynamic> pointPairs){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_498_PERSPECTIVE)
HXLINE( 499)		::Array< ::Dynamic> src = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 499)		::Array< ::Dynamic> dst = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 500)		{
HXLINE( 500)			int _g = 0;
HXDLIN( 500)			while((_g < pointPairs->length)){
HXLINE( 500)				 ::vision::ds::specifics::PointTransformationPair pair = pointPairs->__get(_g).StaticCast<  ::vision::ds::specifics::PointTransformationPair >();
HXDLIN( 500)				_g = (_g + 1);
HXLINE( 501)				src->push(pair->from);
HXLINE( 502)				dst->push(pair->to);
            			}
            		}
HXLINE( 504)		return ::vision::ds::_TransformationMatrix::TransformationMatrix_Impl__obj::fromMatrix2D(::vision::algorithms::PerspectiveWarp_obj::generateMatrix(src,dst));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,PERSPECTIVE,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::DEPTH(Float z, ::vision::ds::Point2D towards){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_516_DEPTH)
HXLINE( 517)		Float xRow;
HXDLIN( 517)		if (::hx::IsNotNull( towards )) {
HXLINE( 517)			xRow = (towards->x * (z - ( (Float)(1) )));
            		}
            		else {
HXLINE( 517)			xRow = ( (Float)(0) );
            		}
HXLINE( 518)		Float yRow;
HXDLIN( 518)		if (::hx::IsNotNull( towards )) {
HXLINE( 518)			yRow = (towards->y * (z - ( (Float)(1) )));
            		}
            		else {
HXLINE( 518)			yRow = ( (Float)(0) );
            		}
HXLINE( 516)		::Array< Float > homogeneousRow = ::Array_obj< Float >::__new(3)->init(0,0)->init(1,0)->init(2,z);
HXDLIN( 516)		if (::hx::IsNull( homogeneousRow )) {
HXDLIN( 516)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_89,3);
            		}
HXDLIN( 516)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXDLIN( 516)		arr->inner = ::Array_obj< Float >::__new(3)->init(0,1)->init(1,0)->init(2,xRow)->concat(::Array_obj< Float >::__new(3)->init(0,0)->init(1,1)->init(2,yRow))->concat(homogeneousRow);
HXDLIN( 516)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,DEPTH,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::createFilled(::Array< ::Dynamic> rows){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_529_createFilled)
HXLINE( 530)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,rows->__get(0).StaticCast< ::Array< Float > >()->length,rows->length,null());
HXLINE( 531)		arr->inner = ::Array_obj< Float >::__new(0);
HXLINE( 532)		{
HXLINE( 532)			int _g_current = 0;
HXDLIN( 532)			::Array< ::Dynamic> _g_args = rows;
HXDLIN( 532)			while((_g_current < _g_args->length)){
HXLINE( 532)				_g_current = (_g_current + 1);
HXDLIN( 532)				::Array< Float > r = _g_args->__get((_g_current - 1)).StaticCast< ::Array< Float > >();
HXDLIN( 532)				arr->inner = arr->inner->concat(r);
            			}
            		}
HXLINE( 533)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,createFilled,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::createTransformation(::Array< Float > xRow,::Array< Float > yRow,::Array< Float > homogeneousRow){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_547_createTransformation)
HXLINE( 548)		if (::hx::IsNull( homogeneousRow )) {
HXLINE( 548)			homogeneousRow = ::Array_obj< Float >::fromData( _hx_array_data_98194fa8_93,3);
            		}
HXLINE( 549)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,3,3,null());
HXLINE( 550)		arr->inner = xRow->concat(yRow)->concat(homogeneousRow);
HXLINE( 551)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2D_Impl__obj,createTransformation,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::multiplyMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_567_multiplyMatrices)
HXLINE( 568)		if ((a->width != b->height)) {
HXLINE( 569)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("mult",f0,67,65,48),::Array_obj< ::Dynamic>::__new(2)->init(0,a)->init(1,b),0));
            		}
HXLINE( 572)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,b->width,a->height,null());
HXLINE( 573)		{
HXLINE( 573)			int _g = 0;
HXDLIN( 573)			int _g1 = a->height;
HXDLIN( 573)			while((_g < _g1)){
HXLINE( 573)				_g = (_g + 1);
HXDLIN( 573)				int y = (_g - 1);
HXLINE( 574)				{
HXLINE( 574)					int _g2 = 0;
HXDLIN( 574)					int _g3 = b->width;
HXDLIN( 574)					while((_g2 < _g3)){
HXLINE( 574)						_g2 = (_g2 + 1);
HXDLIN( 574)						int x = (_g2 - 1);
HXLINE( 575)						Float sum = ((Float)0.);
HXLINE( 576)						{
HXLINE( 576)							int _g4 = 0;
HXDLIN( 576)							int _g5 = a->width;
HXDLIN( 576)							while((_g4 < _g5)){
HXLINE( 576)								_g4 = (_g4 + 1);
HXDLIN( 576)								int k = (_g4 - 1);
HXLINE( 577)								sum = (sum + (( (Float)(a->inner->__get(((y * a->width) + k))) ) * ( (Float)(b->inner->__get(((k * b->width) + x))) )));
            							}
            						}
HXLINE( 579)						result->inner->set((x + (y * result->width)),sum);
            					}
            				}
            			}
            		}
HXLINE( 583)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,multiplyMatrices,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::addMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_585_addMatrices)
HXLINE( 586)		bool _hx_tmp;
HXDLIN( 586)		if ((a->height == b->height)) {
HXLINE( 586)			_hx_tmp = (a->width != b->width);
            		}
            		else {
HXLINE( 586)			_hx_tmp = true;
            		}
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 587)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("add",21,f2,49,00),::Array_obj< ::Dynamic>::__new(2)->init(0,a)->init(1,b),1));
            		}
HXLINE( 590)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,a->width,b->height,null());
HXLINE( 592)		{
HXLINE( 592)			int _g = 0;
HXDLIN( 592)			int _g1 = result->width;
HXDLIN( 592)			while((_g < _g1)){
HXLINE( 592)				_g = (_g + 1);
HXDLIN( 592)				int x = (_g - 1);
HXLINE( 593)				{
HXLINE( 593)					int _g2 = 0;
HXDLIN( 593)					int _g3 = result->height;
HXDLIN( 593)					while((_g2 < _g3)){
HXLINE( 593)						_g2 = (_g2 + 1);
HXDLIN( 593)						int y = (_g2 - 1);
HXLINE( 594)						result->inner->set((x + (y * result->width)),(( (Float)(a->inner->__get(((y * a->width) + x))) ) + ( (Float)(b->inner->__get(((y * b->width) + x))) )));
            					}
            				}
            			}
            		}
HXLINE( 598)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,addMatrices,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::subtractMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_600_subtractMatrices)
HXLINE( 601)		bool _hx_tmp;
HXDLIN( 601)		if ((a->height == b->height)) {
HXLINE( 601)			_hx_tmp = (a->width != b->width);
            		}
            		else {
HXLINE( 601)			_hx_tmp = true;
            		}
HXDLIN( 601)		if (_hx_tmp) {
HXLINE( 602)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("sub",80,a9,57,00),::Array_obj< ::Dynamic>::__new(2)->init(0,a)->init(1,b),2));
            		}
HXLINE( 605)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,a->width,b->height,null());
HXLINE( 607)		{
HXLINE( 607)			int _g = 0;
HXDLIN( 607)			int _g1 = result->width;
HXDLIN( 607)			while((_g < _g1)){
HXLINE( 607)				_g = (_g + 1);
HXDLIN( 607)				int x = (_g - 1);
HXLINE( 608)				{
HXLINE( 608)					int _g2 = 0;
HXDLIN( 608)					int _g3 = result->height;
HXDLIN( 608)					while((_g2 < _g3)){
HXLINE( 608)						_g2 = (_g2 + 1);
HXDLIN( 608)						int y = (_g2 - 1);
HXLINE( 609)						result->inner->set((x + (y * result->width)),(( (Float)(a->inner->__get(((y * a->width) + x))) ) - ( (Float)(b->inner->__get(((y * b->width) + x))) )));
            					}
            				}
            			}
            		}
HXLINE( 613)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,subtractMatrices,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::divideMatrices( ::vision::ds::Array2D a, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_615_divideMatrices)
HXLINE( 616)		if ((a->width != b->height)) {
HXLINE( 617)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("div",51,3d,4c,00),::Array_obj< ::Dynamic>::__new(2)->init(0,a)->init(1,b),3));
            		}
HXLINE( 620)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,b->width,a->height,null());
HXLINE( 622)		{
HXLINE( 622)			int _g = 0;
HXDLIN( 622)			int _g1 = a->height;
HXDLIN( 622)			while((_g < _g1)){
HXLINE( 622)				_g = (_g + 1);
HXDLIN( 622)				int y = (_g - 1);
HXLINE( 623)				{
HXLINE( 623)					int _g2 = 0;
HXDLIN( 623)					int _g3 = b->width;
HXDLIN( 623)					while((_g2 < _g3)){
HXLINE( 623)						_g2 = (_g2 + 1);
HXDLIN( 623)						int x = (_g2 - 1);
HXLINE( 624)						Float sum = ((Float)0.);
HXLINE( 625)						{
HXLINE( 625)							int _g4 = 0;
HXDLIN( 625)							int _g5 = a->width;
HXDLIN( 625)							while((_g4 < _g5)){
HXLINE( 625)								_g4 = (_g4 + 1);
HXDLIN( 625)								int k = (_g4 - 1);
HXLINE( 626)								sum = (sum + (( (Float)(a->inner->__get(((y * a->width) + k))) ) / ( (Float)(b->inner->__get(((k * b->width) + x))) )));
            							}
            						}
HXLINE( 628)						result->inner->set((x + (y * result->width)),sum);
            					}
            				}
            			}
            		}
HXLINE( 632)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,divideMatrices,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::multiply( ::vision::ds::Array2D this1, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_634_multiply)
HXLINE( 635)		if ((this1->width != b->height)) {
HXLINE( 636)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("mult",f0,67,65,48),::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,b),0));
            		}
HXLINE( 639)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,b->width,this1->height,null());
HXLINE( 641)		{
HXLINE( 641)			int _g = 0;
HXDLIN( 641)			int _g1 = this1->height;
HXDLIN( 641)			while((_g < _g1)){
HXLINE( 641)				_g = (_g + 1);
HXDLIN( 641)				int y = (_g - 1);
HXLINE( 642)				{
HXLINE( 642)					int _g2 = 0;
HXDLIN( 642)					int _g3 = b->width;
HXDLIN( 642)					while((_g2 < _g3)){
HXLINE( 642)						_g2 = (_g2 + 1);
HXDLIN( 642)						int x = (_g2 - 1);
HXLINE( 643)						Float sum = ((Float)0.);
HXLINE( 644)						{
HXLINE( 644)							int _g4 = 0;
HXDLIN( 644)							int _g5 = this1->width;
HXDLIN( 644)							while((_g4 < _g5)){
HXLINE( 644)								_g4 = (_g4 + 1);
HXDLIN( 644)								int k = (_g4 - 1);
HXLINE( 645)								sum = (sum + (( (Float)(this1->inner->__get(((y * this1->width) + k))) ) * ( (Float)(b->inner->__get(((k * b->width) + x))) )));
            							}
            						}
HXLINE( 647)						result->inner->set((x + (y * result->width)),sum);
            					}
            				}
            			}
            		}
HXLINE( 650)		this1 = result;
HXLINE( 651)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,multiply,return )

 ::Dynamic Matrix2D_Impl__obj::add( ::vision::ds::Array2D this1, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_654_add)
HXLINE( 655)		bool _hx_tmp;
HXDLIN( 655)		if ((this1->height == b->height)) {
HXLINE( 655)			_hx_tmp = (this1->width != b->width);
            		}
            		else {
HXLINE( 655)			_hx_tmp = true;
            		}
HXDLIN( 655)		if (_hx_tmp) {
HXLINE( 656)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("add",21,f2,49,00),::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,b),1));
            		}
HXLINE( 659)		{
HXLINE( 659)			int _g = 0;
HXDLIN( 659)			int _g1 = this1->width;
HXDLIN( 659)			while((_g < _g1)){
HXLINE( 659)				_g = (_g + 1);
HXDLIN( 659)				int x = (_g - 1);
HXLINE( 660)				{
HXLINE( 660)					int _g2 = 0;
HXDLIN( 660)					int _g3 = this1->height;
HXDLIN( 660)					while((_g2 < _g3)){
HXLINE( 660)						_g2 = (_g2 + 1);
HXDLIN( 660)						int y = (_g2 - 1);
HXLINE( 661)						this1->inner->set((x + (y * this1->width)),(( (Float)(this1->inner->__get(((y * this1->width) + x))) ) + ( (Float)(b->inner->__get(((y * b->width) + x))) )));
            					}
            				}
            			}
            		}
HXLINE( 665)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,add,return )

 ::Dynamic Matrix2D_Impl__obj::subtract( ::vision::ds::Array2D this1, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_668_subtract)
HXLINE( 669)		bool _hx_tmp;
HXDLIN( 669)		if ((this1->height == b->height)) {
HXLINE( 669)			_hx_tmp = (this1->width != b->width);
            		}
            		else {
HXLINE( 669)			_hx_tmp = true;
            		}
HXDLIN( 669)		if (_hx_tmp) {
HXLINE( 670)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("sub",80,a9,57,00),::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,b),2));
            		}
HXLINE( 674)		{
HXLINE( 674)			int _g = 0;
HXDLIN( 674)			int _g1 = this1->width;
HXDLIN( 674)			while((_g < _g1)){
HXLINE( 674)				_g = (_g + 1);
HXDLIN( 674)				int x = (_g - 1);
HXLINE( 675)				{
HXLINE( 675)					int _g2 = 0;
HXDLIN( 675)					int _g3 = this1->height;
HXDLIN( 675)					while((_g2 < _g3)){
HXLINE( 675)						_g2 = (_g2 + 1);
HXDLIN( 675)						int y = (_g2 - 1);
HXLINE( 676)						this1->inner->set((x + (y * this1->width)),(( (Float)(this1->inner->__get(((y * this1->width) + x))) ) - ( (Float)(b->inner->__get(((y * b->width) + x))) )));
            					}
            				}
            			}
            		}
HXLINE( 680)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,subtract,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::divide( ::vision::ds::Array2D this1, ::vision::ds::Array2D b){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_683_divide)
HXLINE( 684)		if ((this1->width != b->height)) {
HXLINE( 685)			HX_STACK_DO_THROW( ::vision::exceptions::MatrixOperationError_obj::__alloc( HX_CTX ,HX_("div",51,3d,4c,00),::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,b),3));
            		}
HXLINE( 688)		 ::vision::ds::Array2D result =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,b->width,this1->height,null());
HXLINE( 690)		{
HXLINE( 690)			int _g = 0;
HXDLIN( 690)			int _g1 = this1->height;
HXDLIN( 690)			while((_g < _g1)){
HXLINE( 690)				_g = (_g + 1);
HXDLIN( 690)				int y = (_g - 1);
HXLINE( 691)				{
HXLINE( 691)					int _g2 = 0;
HXDLIN( 691)					int _g3 = b->width;
HXDLIN( 691)					while((_g2 < _g3)){
HXLINE( 691)						_g2 = (_g2 + 1);
HXDLIN( 691)						int x = (_g2 - 1);
HXLINE( 692)						Float sum = ((Float)0.);
HXLINE( 693)						{
HXLINE( 693)							int _g4 = 0;
HXDLIN( 693)							int _g5 = this1->width;
HXDLIN( 693)							while((_g4 < _g5)){
HXLINE( 693)								_g4 = (_g4 + 1);
HXDLIN( 693)								int k = (_g4 - 1);
HXLINE( 694)								sum = (sum + (( (Float)(this1->inner->__get(((y * this1->width) + k))) ) * ( (Float)(b->inner->__get(((k * b->width) + x))) )));
            							}
            						}
HXLINE( 696)						result->inner->set((x + (y * result->width)),sum);
            					}
            				}
            			}
            		}
HXLINE( 700)		this1 = result;
HXLINE( 701)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2D_Impl__obj,divide,return )

::Array< ::Dynamic> Matrix2D_Impl__obj::to_array_array_float( ::vision::ds::Array2D this1){
            	HX_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_718_to_array_array_float)
HXDLIN( 718)		::Array< Float > array = this1->inner;
HXDLIN( 718)		int delimiter = this1->width;
HXDLIN( 718)		::Array< ::Dynamic> raised = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 718)		{
HXDLIN( 718)			int _g = 0;
HXDLIN( 718)			int _g1 = array->length;
HXDLIN( 718)			while((_g < _g1)){
HXDLIN( 718)				_g = (_g + 1);
HXDLIN( 718)				int i = (_g - 1);
HXDLIN( 718)				if (::hx::IsNull( raised->__get(::Math_obj::floor((( (Float)(i) ) / ( (Float)(delimiter) )))).StaticCast< ::Array< Float > >() )) {
HXDLIN( 718)					raised[::Math_obj::floor((( (Float)(i) ) / ( (Float)(delimiter) )))] = ::Array_obj< Float >::__new(0);
            				}
HXDLIN( 718)				raised->__get(::Math_obj::floor((( (Float)(i) ) / ( (Float)(delimiter) )))).StaticCast< ::Array< Float > >()[::hx::Mod(i,delimiter)] = array->__get(i);
            			}
            		}
HXDLIN( 718)		return raised;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,to_array_array_float,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::from_array_array_float(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_721_from_array_array_float)
HXLINE( 722)		 ::vision::ds::Array2D arr2d =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,array->__get(0).StaticCast< ::Array< Float > >()->length,array->length,null());
HXLINE( 723)		::Array< Float > flat = ::Array_obj< Float >::__new(0);
HXDLIN( 723)		{
HXLINE( 723)			int _g = 0;
HXDLIN( 723)			while((_g < array->length)){
HXLINE( 723)				::Array< Float > item = array->__get(_g).StaticCast< ::Array< Float > >();
HXDLIN( 723)				_g = (_g + 1);
HXDLIN( 723)				flat = flat->concat(item);
            			}
            		}
HXDLIN( 723)		arr2d->inner = flat;
HXLINE( 724)		return arr2d;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,from_array_array_float,return )

 ::vision::ds::Array2D Matrix2D_Impl__obj::from_array_array_int(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_2472575cfd6e9c7a_727_from_array_array_int)
HXLINE( 728)		 ::vision::ds::Array2D arr2d =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,array->__get(0).StaticCast< ::Array< int > >()->length,array->length,null());
HXLINE( 729)		::Array< int > flat = ::Array_obj< int >::__new(0);
HXDLIN( 729)		{
HXLINE( 729)			int _g = 0;
HXDLIN( 729)			while((_g < array->length)){
HXLINE( 729)				::Array< int > item = array->__get(_g).StaticCast< ::Array< int > >();
HXDLIN( 729)				_g = (_g + 1);
HXDLIN( 729)				flat = flat->concat(item);
            			}
            		}
HXDLIN( 729)		arr2d->inner = flat;
HXLINE( 730)		return arr2d;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2D_Impl__obj,from_array_array_int,return )


Matrix2D_Impl__obj::Matrix2D_Impl__obj()
{
}

bool Matrix2D_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"SCALE") ) { outValue = SCALE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"SHEAR") ) { outValue = SHEAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"DEPTH") ) { outValue = DEPTH_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getRow") ) { outValue = getRow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRow") ) { outValue = setRow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_rows") ) { outValue = get_rows_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_rows") ) { outValue = set_rows_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTrace") ) { outValue = getTrace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"IDENTITY") ) { outValue = IDENTITY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ROTATION") ) { outValue = ROTATION_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getColumn") ) { outValue = getColumn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setColumn") ) { outValue = setColumn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertRow") ) { outValue = insertRow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeRow") ) { outValue = removeRow_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"REFLECTION") ) { outValue = REFLECTION_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_columns") ) { outValue = get_columns_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_columns") ) { outValue = set_columns_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"TRANSLATION") ) { outValue = TRANSLATION_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"PERSPECTIVE") ) { outValue = PERSPECTIVE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMatrices") ) { outValue = addMatrices_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getSubMatrix") ) { outValue = getSubMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertColumn") ) { outValue = insertColumn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeColumn") ) { outValue = removeColumn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createFilled") ) { outValue = createFilled_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_underlying") ) { outValue = get_underlying_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_underlying") ) { outValue = set_underlying_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDeterminant") ) { outValue = getDeterminant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divideMatrices") ) { outValue = divideMatrices_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"multiplyMatrices") ) { outValue = multiplyMatrices_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractMatrices") ) { outValue = subtractMatrices_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"multiplyWithScalar") ) { outValue = multiplyWithScalar_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createTransformation") ) { outValue = createTransformation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"to_array_array_float") ) { outValue = to_array_array_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"from_array_array_int") ) { outValue = from_array_array_int_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"from_array_array_float") ) { outValue = from_array_array_float_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Matrix2D_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Matrix2D_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Matrix2D_Impl__obj::__mClass;

static ::String Matrix2D_Impl__obj_sStaticFields[] = {
	HX_("get_underlying",a6,84,a6,cf),
	HX_("set_underlying",1a,6d,c6,ef),
	HX_("get_rows",a2,b0,69,cb),
	HX_("set_rows",16,0a,c7,79),
	HX_("get_columns",f4,0c,54,79),
	HX_("set_columns",00,14,c1,83),
	HX_("_new",61,15,1f,3f),
	HX_("invert",16,e7,d8,9f),
	HX_("getDeterminant",9f,b0,b3,b9),
	HX_("getTrace",0f,9e,f6,75),
	HX_("multiplyWithScalar",16,95,23,5a),
	HX_("clone",5d,13,63,48),
	HX_("map",9c,0a,53,00),
	HX_("getSubMatrix",6b,10,6b,d1),
	HX_("getColumn",0c,d8,e1,42),
	HX_("getRow",24,1b,26,a3),
	HX_("setColumn",18,c4,32,26),
	HX_("setRow",98,6f,6e,6f),
	HX_("insertColumn",ef,b6,18,3d),
	HX_("insertRow",61,60,7a,19),
	HX_("removeColumn",3a,ea,b8,35),
	HX_("removeRow",36,00,f2,ca),
	HX_("toString",ac,d0,6e,38),
	HX_("IDENTITY",3e,d5,b4,12),
	HX_("ROTATION",3e,cd,0b,62),
	HX_("TRANSLATION",d1,3c,de,60),
	HX_("SCALE",6a,06,bd,f6),
	HX_("SHEAR",01,17,0e,fa),
	HX_("REFLECTION",ab,81,4c,d1),
	HX_("PERSPECTIVE",5c,f1,2d,97),
	HX_("DEPTH",e3,28,18,55),
	HX_("createFilled",be,4d,84,a7),
	HX_("createTransformation",e5,79,2c,76),
	HX_("multiplyMatrices",de,d3,c6,0f),
	HX_("addMatrices",db,a8,3f,98),
	HX_("subtractMatrices",ce,d6,7f,01),
	HX_("divideMatrices",33,fe,08,68),
	HX_("multiply",24,e2,8c,9a),
	HX_("add",21,f2,49,00),
	HX_("subtract",14,75,11,f8),
	HX_("divide",79,2f,12,bf),
	HX_("to_array_array_float",4c,d5,20,ec),
	HX_("from_array_array_float",fb,bc,94,37),
	HX_("from_array_array_int",8e,1e,2f,b2),
	::String(null())
};

void Matrix2D_Impl__obj::__register()
{
	Matrix2D_Impl__obj _hx_dummy;
	Matrix2D_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds._Matrix2D.Matrix2D_Impl_",a8,4f,19,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix2D_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Matrix2D_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Matrix2D_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix2D_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix2D_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
} // end namespace _Matrix2D
