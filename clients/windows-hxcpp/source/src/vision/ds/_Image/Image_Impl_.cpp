// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_vision_algorithms_BilinearInterpolation
#include <vision/algorithms/BilinearInterpolation.h>
#endif
#ifndef INCLUDED_vision_ds_ImageView
#include <vision/ds/ImageView.h>
#endif
#ifndef INCLUDED_vision_ds_Line2D
#include <vision/ds/Line2D.h>
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds_Ray2D
#include <vision/ds/Ray2D.h>
#endif
#ifndef INCLUDED_vision_ds_Rectangle
#include <vision/ds/Rectangle.h>
#endif
#ifndef INCLUDED_vision_ds__Color_Color_Impl_
#include <vision/ds/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds__Image_Image_Impl_
#include <vision/ds/_Image/Image_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds__Image_PixelIterator
#include <vision/ds/_Image/PixelIterator.h>
#endif
#ifndef INCLUDED_vision_exceptions_OutOfBounds
#include <vision/exceptions/OutOfBounds.h>
#endif
#ifndef INCLUDED_vision_exceptions_Unimplemented
#include <vision/exceptions/Unimplemented.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif
#ifndef INCLUDED_vision_tools_ImageTools
#include <vision/tools/ImageTools.h>
#endif
#ifndef INCLUDED_vision_tools_MathTools
#include <vision/tools/MathTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_53_get_underlying,"vision.ds._Image.Image_Impl_","get_underlying",0x4846e1f2,"vision.ds._Image.Image_Impl_.get_underlying","vision/ds/Image.hx",53,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_68_get_width,"vision.ds._Image.Image_Impl_","get_width",0x8d60b891,"vision.ds._Image.Image_Impl_.get_width","vision/ds/Image.hx",68,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_83_get_height,"vision.ds._Image.Image_Impl_","get_height",0xdd903efc,"vision.ds._Image.Image_Impl_.get_height","vision/ds/Image.hx",83,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_100_get_view,"vision.ds._Image.Image_Impl_","get_view",0x0a4e0a3a,"vision.ds._Image.Image_Impl_.get_view","vision/ds/Image.hx",100,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_103_set_view,"vision.ds._Image.Image_Impl_","set_view",0xb8ab63ae,"vision.ds._Image.Image_Impl_.set_view","vision/ds/Image.hx",103,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_115__new,"vision.ds._Image.Image_Impl_","_new",0x42f41bad,"vision.ds._Image.Image_Impl_._new","vision/ds/Image.hx",115,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_133_getColorFromStartingBytePos,"vision.ds._Image.Image_Impl_","getColorFromStartingBytePos",0x596e9589,"vision.ds._Image.Image_Impl_.getColorFromStartingBytePos","vision/ds/Image.hx",133,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_138_setColorFromStartingBytePos,"vision.ds._Image.Image_Impl_","setColorFromStartingBytePos",0x9c077495,"vision.ds._Image.Image_Impl_.setColorFromStartingBytePos","vision/ds/Image.hx",138,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_169_getPixel,"vision.ds._Image.Image_Impl_","getPixel",0x5ebef25c,"vision.ds._Image.Image_Impl_.getPixel","vision/ds/Image.hx",169,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_191_getSafePixel,"vision.ds._Image.Image_Impl_","getSafePixel",0x704630cf,"vision.ds._Image.Image_Impl_.getSafePixel","vision/ds/Image.hx",191,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_196_getUnsafePixel,"vision.ds._Image.Image_Impl_","getUnsafePixel",0x3dde98d6,"vision.ds._Image.Image_Impl_.getUnsafePixel","vision/ds/Image.hx",196,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_244_getFloatingPixel,"vision.ds._Image.Image_Impl_","getFloatingPixel",0x4388e9b6,"vision.ds._Image.Image_Impl_.getFloatingPixel","vision/ds/Image.hx",244,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_276_setPixel,"vision.ds._Image.Image_Impl_","setPixel",0x0d1c4bd0,"vision.ds._Image.Image_Impl_.setPixel","vision/ds/Image.hx",276,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_293_setSafePixel,"vision.ds._Image.Image_Impl_","setSafePixel",0x853f5443,"vision.ds._Image.Image_Impl_.setSafePixel","vision/ds/Image.hx",293,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_305_setFloatingPixel,"vision.ds._Image.Image_Impl_","setFloatingPixel",0x99cad72a,"vision.ds._Image.Image_Impl_.setFloatingPixel","vision/ds/Image.hx",305,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_324_setUnsafePixel,"vision.ds._Image.Image_Impl_","setUnsafePixel",0x5dfe814a,"vision.ds._Image.Image_Impl_.setUnsafePixel","vision/ds/Image.hx",324,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_349_paintPixel,"vision.ds._Image.Image_Impl_","paintPixel",0x03eae954,"vision.ds._Image.Image_Impl_.paintPixel","vision/ds/Image.hx",349,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_368_paintFloatingPixel,"vision.ds._Image.Image_Impl_","paintFloatingPixel",0xe07898ae,"vision.ds._Image.Image_Impl_.paintFloatingPixel","vision/ds/Image.hx",368,0x0a62203c)
static const int _hx_array_data_cc34fda2_77[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_cc34fda2_78[] = {
	(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_401_paintSafePixel,"vision.ds._Image.Image_Impl_","paintSafePixel",0xe50503c7,"vision.ds._Image.Image_Impl_.paintSafePixel","vision/ds/Image.hx",401,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_405_paintUnsafePixel,"vision.ds._Image.Image_Impl_","paintUnsafePixel",0x7e3219ce,"vision.ds._Image.Image_Impl_.paintUnsafePixel","vision/ds/Image.hx",405,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_432_hasPixel,"vision.ds._Image.Image_Impl_","hasPixel",0x8b402d18,"vision.ds._Image.Image_Impl_.hasPixel","vision/ds/Image.hx",432,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_450_movePixel,"vision.ds._Image.Image_Impl_","movePixel",0xffbf3be9,"vision.ds._Image.Image_Impl_.movePixel","vision/ds/Image.hx",450,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_464_moveSafePixel,"vision.ds._Image.Image_Impl_","moveSafePixel",0x011ec4dc,"vision.ds._Image.Image_Impl_.moveSafePixel","vision/ds/Image.hx",464,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_480_moveFloatingPixel,"vision.ds._Image.Image_Impl_","moveFloatingPixel",0xea710843,"vision.ds._Image.Image_Impl_.moveFloatingPixel","vision/ds/Image.hx",480,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_485_moveUnsafePixel,"vision.ds._Image.Image_Impl_","moveUnsafePixel",0x250e0a23,"vision.ds._Image.Image_Impl_.moveUnsafePixel","vision/ds/Image.hx",485,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_500_copyPixelFrom,"vision.ds._Image.Image_Impl_","copyPixelFrom",0x8d87a8cf,"vision.ds._Image.Image_Impl_.copyPixelFrom","vision/ds/Image.hx",500,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_517_copyPixelTo,"vision.ds._Image.Image_Impl_","copyPixelTo",0x588d55a0,"vision.ds._Image.Image_Impl_.copyPixelTo","vision/ds/Image.hx",517,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_528_getImagePortion,"vision.ds._Image.Image_Impl_","getImagePortion",0xaa1005b6,"vision.ds._Image.Image_Impl_.getImagePortion","vision/ds/Image.hx",528,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_547_setImagePortion,"vision.ds._Image.Image_Impl_","setImagePortion",0xa5db82c2,"vision.ds._Image.Image_Impl_.setImagePortion","vision/ds/Image.hx",547,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_565_drawLine,"vision.ds._Image.Image_Impl_","drawLine",0x9860de64,"vision.ds._Image.Image_Impl_.drawLine","vision/ds/Image.hx",565,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_601_drawRay2D,"vision.ds._Image.Image_Impl_","drawRay2D",0x2b87abcc,"vision.ds._Image.Image_Impl_.drawRay2D","vision/ds/Image.hx",601,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_642_drawLine2D,"vision.ds._Image.Image_Impl_","drawLine2D",0x19206b36,"vision.ds._Image.Image_Impl_.drawLine2D","vision/ds/Image.hx",642,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_676_fillRect,"vision.ds._Image.Image_Impl_","fillRect",0xa8fd6193,"vision.ds._Image.Image_Impl_.fillRect","vision/ds/Image.hx",676,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_691_drawRect,"vision.ds._Image.Image_Impl_","drawRect",0x9c551394,"vision.ds._Image.Image_Impl_.drawRect","vision/ds/Image.hx",691,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_711_drawQuadraticBezier,"vision.ds._Image.Image_Impl_","drawQuadraticBezier",0xab19e0a7,"vision.ds._Image.Image_Impl_.drawQuadraticBezier","vision/ds/Image.hx",711,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_710_drawQuadraticBezier,"vision.ds._Image.Image_Impl_","drawQuadraticBezier",0xab19e0a7,"vision.ds._Image.Image_Impl_.drawQuadraticBezier","vision/ds/Image.hx",710,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_749_drawCubicBezier,"vision.ds._Image.Image_Impl_","drawCubicBezier",0xb8378c99,"vision.ds._Image.Image_Impl_.drawCubicBezier","vision/ds/Image.hx",749,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_804_fillCircle,"vision.ds._Image.Image_Impl_","fillCircle",0x4464c03f,"vision.ds._Image.Image_Impl_.fillCircle","vision/ds/Image.hx",804,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_847_drawCircle,"vision.ds._Image.Image_Impl_","drawCircle",0x828db480,"vision.ds._Image.Image_Impl_.drawCircle","vision/ds/Image.hx",847,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_877_drawEllipse,"vision.ds._Image.Image_Impl_","drawEllipse",0xcf40206e,"vision.ds._Image.Image_Impl_.drawEllipse","vision/ds/Image.hx",877,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_963_fillColorRecursive,"vision.ds._Image.Image_Impl_","fillColorRecursive",0x9a4beabe,"vision.ds._Image.Image_Impl_.fillColorRecursive","vision/ds/Image.hx",963,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_960_fillColorRecursive,"vision.ds._Image.Image_Impl_","fillColorRecursive",0x9a4beabe,"vision.ds._Image.Image_Impl_.fillColorRecursive","vision/ds/Image.hx",960,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_989_fillColor,"vision.ds._Image.Image_Impl_","fillColor",0x98583e14,"vision.ds._Image.Image_Impl_.fillColor","vision/ds/Image.hx",989,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1026_fillUntilColor,"vision.ds._Image.Image_Impl_","fillUntilColor",0x41edbd94,"vision.ds._Image.Image_Impl_.fillUntilColor","vision/ds/Image.hx",1026,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1066_clone,"vision.ds._Image.Image_Impl_","clone",0x9ef38f91,"vision.ds._Image.Image_Impl_.clone","vision/ds/Image.hx",1066,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1077_mirror,"vision.ds._Image.Image_Impl_","mirror",0xbd86a38b,"vision.ds._Image.Image_Impl_.mirror","vision/ds/Image.hx",1077,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1085_flip,"vision.ds._Image.Image_Impl_","flip",0x479318f9,"vision.ds._Image.Image_Impl_.flip","vision/ds/Image.hx",1085,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1102_stamp,"vision.ds._Image.Image_Impl_","stamp",0xda9bec37,"vision.ds._Image.Image_Impl_.stamp","vision/ds/Image.hx",1102,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1121_resize,"vision.ds._Image.Image_Impl_","resize",0x70578b40,"vision.ds._Image.Image_Impl_.resize","vision/ds/Image.hx",1121,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1160_rotate,"vision.ds._Image.Image_Impl_","rotate",0x32fc77a7,"vision.ds._Image.Image_Impl_.rotate","vision/ds/Image.hx",1160,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1212_toString,"vision.ds._Image.Image_Impl_","toString",0x74b2ecf8,"vision.ds._Image.Image_Impl_.toString","vision/ds/Image.hx",1212,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1233_forEachPixel,"vision.ds._Image.Image_Impl_","forEachPixel",0xe3bff6c8,"vision.ds._Image.Image_Impl_.forEachPixel","vision/ds/Image.hx",1233,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1250_forEachPixelInView,"vision.ds._Image.Image_Impl_","forEachPixelInView",0x992ac1d2,"vision.ds._Image.Image_Impl_.forEachPixelInView","vision/ds/Image.hx",1250,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1268_iterator,"vision.ds._Image.Image_Impl_","iterator",0xcfde663a,"vision.ds._Image.Image_Impl_.iterator","vision/ds/Image.hx",1268,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1275_center,"vision.ds._Image.Image_Impl_","center",0x6db75721,"vision.ds._Image.Image_Impl_.center","vision/ds/Image.hx",1275,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1327_hasView,"vision.ds._Image.Image_Impl_","hasView",0x96624413,"vision.ds._Image.Image_Impl_.hasView","vision/ds/Image.hx",1327,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1346_setView,"vision.ds._Image.Image_Impl_","setView",0x8ca2645b,"vision.ds._Image.Image_Impl_.setView","vision/ds/Image.hx",1346,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1359_getView,"vision.ds._Image.Image_Impl_","getView",0x99a0d34f,"vision.ds._Image.Image_Impl_.getView","vision/ds/Image.hx",1359,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1371_removeView,"vision.ds._Image.Image_Impl_","removeView",0xb62b3415,"vision.ds._Image.Image_Impl_.removeView","vision/ds/Image.hx",1371,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1392_hasPixelInView,"vision.ds._Image.Image_Impl_","hasPixelInView",0x666c9422,"vision.ds._Image.Image_Impl_.hasPixelInView","vision/ds/Image.hx",1392,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1545_from2DArray,"vision.ds._Image.Image_Impl_","from2DArray",0x4d936f71,"vision.ds._Image.Image_Impl_.from2DArray","vision/ds/Image.hx",1545,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1574_to2DArray,"vision.ds._Image.Image_Impl_","to2DArray",0xe9ca4e80,"vision.ds._Image.Image_Impl_.to2DArray","vision/ds/Image.hx",1574,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1593_fromBytes,"vision.ds._Image.Image_Impl_","fromBytes",0xf17598d5,"vision.ds._Image.Image_Impl_.fromBytes","vision/ds/Image.hx",1593,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1629_image_or_image,"vision.ds._Image.Image_Impl_","image_or_image",0xf768b5ef,"vision.ds._Image.Image_Impl_.image_or_image","vision/ds/Image.hx",1629,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1636_image_xor_image,"vision.ds._Image.Image_Impl_","image_xor_image",0x13f1bc87,"vision.ds._Image.Image_Impl_.image_xor_image","vision/ds/Image.hx",1636,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_1643_image_and_image,"vision.ds._Image.Image_Impl_","image_and_image",0xa0e25cc3,"vision.ds._Image.Image_Impl_.image_and_image","vision/ds/Image.hx",1643,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_39_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",39,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_41_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",41,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_42_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",42,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_43_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",43,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_44_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",44,0x0a62203c)
HX_LOCAL_STACK_FRAME(_hx_pos_5ba47b0100a54121_45_boot,"vision.ds._Image.Image_Impl_","boot",0x44f08a7e,"vision.ds._Image.Image_Impl_.boot","vision/ds/Image.hx",45,0x0a62203c)
namespace vision{
namespace ds{
namespace _Image{

void Image_Impl__obj::__construct() { }

Dynamic Image_Impl__obj::__CreateEmpty() { return new Image_Impl__obj; }

void *Image_Impl__obj::_hx_vtable = 0;

Dynamic Image_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Image_Impl__obj > _hx_result = new Image_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Image_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17e3139c;
}

int Image_Impl__obj::OFFSET;

int Image_Impl__obj::WIDTH_BYTES;

int Image_Impl__obj::VIEW_XY_BYTES;

int Image_Impl__obj::VIEW_WH_BYTES;

int Image_Impl__obj::VIEW_SHAPE_BYTES;

int Image_Impl__obj::DATA_GAP;

 ::haxe::io::Bytes Image_Impl__obj::get_underlying( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_53_get_underlying)
HXDLIN(  53)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,get_underlying,return )

int Image_Impl__obj::get_width( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_68_get_width)
HXDLIN(  68)		return (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,get_width,return )

int Image_Impl__obj::get_height( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_83_get_height)
HXDLIN(  83)		return ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,get_height,return )

 ::vision::ds::ImageView Image_Impl__obj::get_view( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_100_get_view)
HXDLIN( 100)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 100)		int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 100)		int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 100)		int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 100)		return  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)),(( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)),(( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)),(( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,get_view,return )

 ::vision::ds::ImageView Image_Impl__obj::set_view( ::haxe::io::Bytes this1, ::vision::ds::ImageView view){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_103_set_view)
HXLINE( 104)		{
HXLINE( 104)			{
HXLINE( 104)				int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 104)				int v = view->x;
HXDLIN( 104)				this1->b[pos] = ( (unsigned char)(v) );
HXDLIN( 104)				this1->b[(pos + 1)] = ( (unsigned char)((v >> 8)) );
            			}
HXDLIN( 104)			{
HXLINE( 104)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 104)				int v1 = view->y;
HXDLIN( 104)				this1->b[pos1] = ( (unsigned char)(v1) );
HXDLIN( 104)				this1->b[(pos1 + 1)] = ( (unsigned char)((v1 >> 8)) );
            			}
HXDLIN( 104)			{
HXLINE( 104)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 104)				int v2;
HXDLIN( 104)				if ((view->width >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)))) {
HXLINE( 104)					v2 = 0;
            				}
            				else {
HXLINE( 104)					v2 = view->width;
            				}
HXDLIN( 104)				this1->b[pos2] = ( (unsigned char)(v2) );
HXDLIN( 104)				this1->b[(pos2 + 1)] = ( (unsigned char)((v2 >> 8)) );
            			}
HXDLIN( 104)			{
HXLINE( 104)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 104)				int v3;
HXDLIN( 104)				if ((view->height >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))))) {
HXLINE( 104)					v3 = 0;
            				}
            				else {
HXLINE( 104)					v3 = view->width;
            				}
HXDLIN( 104)				this1->b[pos3] = ( (unsigned char)(v3) );
HXDLIN( 104)				this1->b[(pos3 + 1)] = ( (unsigned char)((v3 >> 8)) );
            			}
HXDLIN( 104)			this1->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(view->shape) );
            		}
HXLINE( 105)		return view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,set_view,return )

 ::haxe::io::Bytes Image_Impl__obj::_new(int width,int height,::hx::Null< int >  __o_color){
            		int color = __o_color.Default(0);
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_115__new)
HXLINE( 116)		int length = (((width * height) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 116)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN( 116)		this1->fill(0,length,0);
HXLINE( 115)		 ::haxe::io::Bytes this2 = this1;
HXLINE( 117)		{
HXLINE( 117)			this2->b[0] = ( (unsigned char)(width) );
HXDLIN( 117)			this2->b[1] = ( (unsigned char)((width >> 8)) );
            		}
HXLINE( 118)		{
HXLINE( 118)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 118)			this2->b[pos] = ( (unsigned char)(0) );
HXDLIN( 118)			this2->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 119)		{
HXLINE( 119)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 119)			this2->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 119)			this2->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 120)		{
HXLINE( 120)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 120)			this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 120)			this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 121)		{
HXLINE( 121)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 121)			this2->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 121)			this2->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 122)		this2->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXLINE( 123)		int i = ::vision::ds::_Image::Image_Impl__obj::OFFSET;
HXLINE( 124)		while((i < this2->length)){
HXLINE( 125)			this2->b[i] = ( (unsigned char)(((color >> 24) & 255)) );
HXLINE( 126)			this2->b[(i + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXLINE( 127)			this2->b[(i + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXLINE( 128)			this2->b[(i + 3)] = ( (unsigned char)((color & 255)) );
HXLINE( 129)			i = (i + 4);
            		}
HXLINE( 115)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,_new,return )

int Image_Impl__obj::getColorFromStartingBytePos( ::haxe::io::Bytes this1,int position){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_133_getColorFromStartingBytePos)
HXLINE( 134)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE( 135)		return ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,getColorFromStartingBytePos,return )

int Image_Impl__obj::setColorFromStartingBytePos( ::haxe::io::Bytes this1,int position,int c){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_138_setColorFromStartingBytePos)
HXLINE( 139)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE( 140)		this1->b[position] = ( (unsigned char)(((c >> 24) & 255)) );
HXLINE( 141)		this1->b[(position + 1)] = ( (unsigned char)(((c >> 16) & 255)) );
HXLINE( 142)		this1->b[(position + 2)] = ( (unsigned char)(((c >> 8) & 255)) );
HXLINE( 143)		this1->b[(position + 3)] = ( (unsigned char)((c & 255)) );
HXLINE( 145)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,setColorFromStartingBytePos,return )

int Image_Impl__obj::getPixel( ::haxe::io::Bytes this1,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_169_getPixel)
HXLINE( 170)		bool _hx_tmp;
HXDLIN( 170)		bool _hx_tmp1;
HXDLIN( 170)		bool _hx_tmp2;
HXDLIN( 170)		if ((x >= 0)) {
HXLINE( 170)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXLINE( 170)			_hx_tmp2 = false;
            		}
HXDLIN( 170)		if (_hx_tmp2) {
HXLINE( 170)			_hx_tmp1 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 170)			_hx_tmp1 = false;
            		}
HXDLIN( 170)		if (_hx_tmp1) {
HXLINE( 170)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (!(_hx_tmp)) {
HXLINE( 172)			::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN( 172)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 172)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
HXLINE( 177)		int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 177)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 177)		return ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,getPixel,return )

int Image_Impl__obj::getSafePixel( ::haxe::io::Bytes this1,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_191_getSafePixel)
HXDLIN( 191)		int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 191)		::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x)->init(1,0);
HXDLIN( 191)		int max = values->__get(0);
HXDLIN( 191)		{
HXDLIN( 191)			int _g = 0;
HXDLIN( 191)			int _g1 = values->length;
HXDLIN( 191)			while((_g < _g1)){
HXDLIN( 191)				_g = (_g + 1);
HXDLIN( 191)				int i = (_g - 1);
HXDLIN( 191)				if ((values->__get(i) > max)) {
HXDLIN( 191)					max = values->__get(i);
            				}
            			}
            		}
HXDLIN( 191)		::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 191)		int min = values1->__get(0);
HXDLIN( 191)		{
HXDLIN( 191)			int _g2 = 0;
HXDLIN( 191)			int _g3 = values1->length;
HXDLIN( 191)			while((_g2 < _g3)){
HXDLIN( 191)				_g2 = (_g2 + 1);
HXDLIN( 191)				int i1 = (_g2 - 1);
HXDLIN( 191)				if ((values1->__get(i1) < min)) {
HXDLIN( 191)					min = values1->__get(i1);
            				}
            			}
            		}
HXDLIN( 191)		int x1 = min;
HXDLIN( 191)		int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 191)		::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y)->init(1,0);
HXDLIN( 191)		int max1 = values2->__get(0);
HXDLIN( 191)		{
HXDLIN( 191)			int _g4 = 0;
HXDLIN( 191)			int _g5 = values2->length;
HXDLIN( 191)			while((_g4 < _g5)){
HXDLIN( 191)				_g4 = (_g4 + 1);
HXDLIN( 191)				int i2 = (_g4 - 1);
HXDLIN( 191)				if ((values2->__get(i2) > max1)) {
HXDLIN( 191)					max1 = values2->__get(i2);
            				}
            			}
            		}
HXDLIN( 191)		::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 191)		int min1 = values3->__get(0);
HXDLIN( 191)		{
HXDLIN( 191)			int _g6 = 0;
HXDLIN( 191)			int _g7 = values3->length;
HXDLIN( 191)			while((_g6 < _g7)){
HXDLIN( 191)				_g6 = (_g6 + 1);
HXDLIN( 191)				int i3 = (_g6 - 1);
HXDLIN( 191)				if ((values3->__get(i3) < min1)) {
HXDLIN( 191)					min1 = values3->__get(i3);
            				}
            			}
            		}
HXDLIN( 191)		int y1 = min1;
HXDLIN( 191)		bool _hx_tmp;
HXDLIN( 191)		bool _hx_tmp1;
HXDLIN( 191)		bool _hx_tmp2;
HXDLIN( 191)		if ((x1 >= 0)) {
HXDLIN( 191)			_hx_tmp2 = (y1 >= 0);
            		}
            		else {
HXDLIN( 191)			_hx_tmp2 = false;
            		}
HXDLIN( 191)		if (_hx_tmp2) {
HXDLIN( 191)			_hx_tmp1 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 191)			_hx_tmp1 = false;
            		}
HXDLIN( 191)		if (_hx_tmp1) {
HXDLIN( 191)			_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 191)			_hx_tmp = false;
            		}
HXDLIN( 191)		if (!(_hx_tmp)) {
HXDLIN( 191)			::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 191)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 191)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
HXDLIN( 191)		int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 191)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 191)		return ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,getSafePixel,return )

int Image_Impl__obj::getUnsafePixel( ::haxe::io::Bytes this1,int x,int y){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_196_getUnsafePixel)
HXDLIN( 196)		int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 196)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 196)		return ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,getUnsafePixel,return )

int Image_Impl__obj::getFloatingPixel( ::haxe::io::Bytes this1,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_244_getFloatingPixel)
HXLINE( 246)		bool _hx_tmp;
HXDLIN( 246)		Float x1 = ( (Float)(::Math_obj::ceil(x)) );
HXDLIN( 246)		Float y1 = ( (Float)(::Math_obj::ceil(y)) );
HXDLIN( 246)		bool _hx_tmp1;
HXDLIN( 246)		bool _hx_tmp2;
HXDLIN( 246)		bool _hx_tmp3;
HXDLIN( 246)		if ((x1 >= 0)) {
HXLINE( 246)			_hx_tmp3 = (y1 >= 0);
            		}
            		else {
HXLINE( 246)			_hx_tmp3 = false;
            		}
HXDLIN( 246)		if (_hx_tmp3) {
HXLINE( 246)			_hx_tmp2 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 246)			_hx_tmp2 = false;
            		}
HXDLIN( 246)		if (_hx_tmp2) {
HXLINE( 246)			_hx_tmp1 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 246)			_hx_tmp1 = false;
            		}
HXDLIN( 246)		if (_hx_tmp1) {
HXLINE( 246)			Float x2 = ( (Float)(::Math_obj::floor(x)) );
HXDLIN( 246)			Float y2 = ( (Float)(::Math_obj::floor(y)) );
HXDLIN( 246)			bool _hx_tmp4;
HXDLIN( 246)			bool _hx_tmp5;
HXDLIN( 246)			bool _hx_tmp6;
HXDLIN( 246)			if ((x2 >= 0)) {
HXLINE( 246)				_hx_tmp6 = (y2 >= 0);
            			}
            			else {
HXLINE( 246)				_hx_tmp6 = false;
            			}
HXDLIN( 246)			if (_hx_tmp6) {
HXLINE( 246)				_hx_tmp5 = (x2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 246)				_hx_tmp5 = false;
            			}
HXDLIN( 246)			if (_hx_tmp5) {
HXLINE( 246)				_hx_tmp4 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 246)				_hx_tmp4 = false;
            			}
HXDLIN( 246)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXLINE( 246)			_hx_tmp = true;
            		}
HXDLIN( 246)		if (_hx_tmp) {
HXLINE( 247)			x = ::vision::tools::MathTools_obj::boundFloat(x,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXLINE( 248)			y = ::vision::tools::MathTools_obj::boundFloat(y,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
            		}
HXLINE( 250)		Float yFraction = (y - ( (Float)(::Std_obj::_hx_int(y)) ));
HXDLIN( 250)		Float xFraction = (x - ( (Float)(::Std_obj::_hx_int(x)) ));
HXLINE( 251)		Float red = (( (Float)(1) ) - yFraction);
HXDLIN( 251)		int x3 = ::Std_obj::_hx_int(x);
HXDLIN( 251)		int y3 = ::Std_obj::_hx_int(y);
HXDLIN( 251)		bool red1;
HXDLIN( 251)		bool red2;
HXDLIN( 251)		bool red3;
HXDLIN( 251)		if ((x3 >= 0)) {
HXLINE( 251)			red3 = (y3 >= 0);
            		}
            		else {
HXLINE( 251)			red3 = false;
            		}
HXDLIN( 251)		if (red3) {
HXLINE( 251)			red2 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 251)			red2 = false;
            		}
HXDLIN( 251)		if (red2) {
HXLINE( 251)			red1 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 251)			red1 = false;
            		}
HXDLIN( 251)		if (!(red1)) {
HXLINE( 251)			::cpp::Int64 this2 = _hx_int64_make(x3,y3);
HXDLIN( 251)			int red4 = _hx_int64_high(this2);
HXDLIN( 251)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red4,_hx_int64_low(this2))));
            		}
HXDLIN( 251)		int position = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 251)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 251)		Float red5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )) >> 16) & 255)) ));
HXDLIN( 251)		int x4 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 251)		int y4 = ::Std_obj::_hx_int(y);
HXDLIN( 251)		int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 251)		::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x4)->init(1,0);
HXDLIN( 251)		int max = values->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g = 0;
HXDLIN( 251)			int _g1 = values->length;
HXDLIN( 251)			while((_g < _g1)){
HXLINE( 251)				_g = (_g + 1);
HXDLIN( 251)				int i = (_g - 1);
HXDLIN( 251)				if ((values->__get(i) > max)) {
HXLINE( 251)					max = values->__get(i);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 251)		int min = values1->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g2 = 0;
HXDLIN( 251)			int _g3 = values1->length;
HXDLIN( 251)			while((_g2 < _g3)){
HXLINE( 251)				_g2 = (_g2 + 1);
HXDLIN( 251)				int i1 = (_g2 - 1);
HXDLIN( 251)				if ((values1->__get(i1) < min)) {
HXLINE( 251)					min = values1->__get(i1);
            				}
            			}
            		}
HXDLIN( 251)		int x5 = min;
HXDLIN( 251)		int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 251)		::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y4)->init(1,0);
HXDLIN( 251)		int max1 = values2->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g4 = 0;
HXDLIN( 251)			int _g5 = values2->length;
HXDLIN( 251)			while((_g4 < _g5)){
HXLINE( 251)				_g4 = (_g4 + 1);
HXDLIN( 251)				int i2 = (_g4 - 1);
HXDLIN( 251)				if ((values2->__get(i2) > max1)) {
HXLINE( 251)					max1 = values2->__get(i2);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 251)		int min1 = values3->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g6 = 0;
HXDLIN( 251)			int _g7 = values3->length;
HXDLIN( 251)			while((_g6 < _g7)){
HXLINE( 251)				_g6 = (_g6 + 1);
HXDLIN( 251)				int i3 = (_g6 - 1);
HXDLIN( 251)				if ((values3->__get(i3) < min1)) {
HXLINE( 251)					min1 = values3->__get(i3);
            				}
            			}
            		}
HXDLIN( 251)		int y5 = min1;
HXDLIN( 251)		bool red6;
HXDLIN( 251)		bool red7;
HXDLIN( 251)		bool red8;
HXDLIN( 251)		if ((x5 >= 0)) {
HXLINE( 251)			red8 = (y5 >= 0);
            		}
            		else {
HXLINE( 251)			red8 = false;
            		}
HXDLIN( 251)		if (red8) {
HXLINE( 251)			red7 = (x5 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 251)			red7 = false;
            		}
HXDLIN( 251)		if (red7) {
HXLINE( 251)			red6 = (y5 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 251)			red6 = false;
            		}
HXDLIN( 251)		if (!(red6)) {
HXLINE( 251)			::cpp::Int64 this3 = _hx_int64_make(x5,y5);
HXDLIN( 251)			int red9 = _hx_int64_high(this3);
HXDLIN( 251)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red9,_hx_int64_low(this3))));
            		}
HXDLIN( 251)		int position1 = (((y5 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x5) * 4);
HXDLIN( 251)		position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 251)		Float red10 = (red * (red5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )) >> 16) & 255)) ))));
HXDLIN( 251)		Float red11 = (( (Float)(1) ) - xFraction);
HXDLIN( 251)		int x6 = ::Std_obj::_hx_int(x);
HXDLIN( 251)		int y6 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 251)		int ma2 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 251)		::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x6)->init(1,0);
HXDLIN( 251)		int max2 = values4->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g8 = 0;
HXDLIN( 251)			int _g9 = values4->length;
HXDLIN( 251)			while((_g8 < _g9)){
HXLINE( 251)				_g8 = (_g8 + 1);
HXDLIN( 251)				int i4 = (_g8 - 1);
HXDLIN( 251)				if ((values4->__get(i4) > max2)) {
HXLINE( 251)					max2 = values4->__get(i4);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN( 251)		int min2 = values5->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g10 = 0;
HXDLIN( 251)			int _g11 = values5->length;
HXDLIN( 251)			while((_g10 < _g11)){
HXLINE( 251)				_g10 = (_g10 + 1);
HXDLIN( 251)				int i5 = (_g10 - 1);
HXDLIN( 251)				if ((values5->__get(i5) < min2)) {
HXLINE( 251)					min2 = values5->__get(i5);
            				}
            			}
            		}
HXDLIN( 251)		int x7 = min2;
HXDLIN( 251)		int ma3 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 251)		::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y6)->init(1,0);
HXDLIN( 251)		int max3 = values6->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g12 = 0;
HXDLIN( 251)			int _g13 = values6->length;
HXDLIN( 251)			while((_g12 < _g13)){
HXLINE( 251)				_g12 = (_g12 + 1);
HXDLIN( 251)				int i6 = (_g12 - 1);
HXDLIN( 251)				if ((values6->__get(i6) > max3)) {
HXLINE( 251)					max3 = values6->__get(i6);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN( 251)		int min3 = values7->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g14 = 0;
HXDLIN( 251)			int _g15 = values7->length;
HXDLIN( 251)			while((_g14 < _g15)){
HXLINE( 251)				_g14 = (_g14 + 1);
HXDLIN( 251)				int i7 = (_g14 - 1);
HXDLIN( 251)				if ((values7->__get(i7) < min3)) {
HXLINE( 251)					min3 = values7->__get(i7);
            				}
            			}
            		}
HXDLIN( 251)		int y7 = min3;
HXDLIN( 251)		bool red12;
HXDLIN( 251)		bool red13;
HXDLIN( 251)		bool red14;
HXDLIN( 251)		if ((x7 >= 0)) {
HXLINE( 251)			red14 = (y7 >= 0);
            		}
            		else {
HXLINE( 251)			red14 = false;
            		}
HXDLIN( 251)		if (red14) {
HXLINE( 251)			red13 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 251)			red13 = false;
            		}
HXDLIN( 251)		if (red13) {
HXLINE( 251)			red12 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 251)			red12 = false;
            		}
HXDLIN( 251)		if (!(red12)) {
HXLINE( 251)			::cpp::Int64 this4 = _hx_int64_make(x7,y7);
HXDLIN( 251)			int red15 = _hx_int64_high(this4);
HXDLIN( 251)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red15,_hx_int64_low(this4))));
            		}
HXDLIN( 251)		int position2 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 251)		position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 251)		Float red16 = (red11 * ( (Float)(((((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) )) >> 16) & 255)) ));
HXDLIN( 251)		int x8 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 251)		int y8 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 251)		int ma4 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 251)		::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x8)->init(1,0);
HXDLIN( 251)		int max4 = values8->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g16 = 0;
HXDLIN( 251)			int _g17 = values8->length;
HXDLIN( 251)			while((_g16 < _g17)){
HXLINE( 251)				_g16 = (_g16 + 1);
HXDLIN( 251)				int i8 = (_g16 - 1);
HXDLIN( 251)				if ((values8->__get(i8) > max4)) {
HXLINE( 251)					max4 = values8->__get(i8);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN( 251)		int min4 = values9->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g18 = 0;
HXDLIN( 251)			int _g19 = values9->length;
HXDLIN( 251)			while((_g18 < _g19)){
HXLINE( 251)				_g18 = (_g18 + 1);
HXDLIN( 251)				int i9 = (_g18 - 1);
HXDLIN( 251)				if ((values9->__get(i9) < min4)) {
HXLINE( 251)					min4 = values9->__get(i9);
            				}
            			}
            		}
HXDLIN( 251)		int x9 = min4;
HXDLIN( 251)		int ma5 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 251)		::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y8)->init(1,0);
HXDLIN( 251)		int max5 = values10->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g20 = 0;
HXDLIN( 251)			int _g21 = values10->length;
HXDLIN( 251)			while((_g20 < _g21)){
HXLINE( 251)				_g20 = (_g20 + 1);
HXDLIN( 251)				int i10 = (_g20 - 1);
HXDLIN( 251)				if ((values10->__get(i10) > max5)) {
HXLINE( 251)					max5 = values10->__get(i10);
            				}
            			}
            		}
HXDLIN( 251)		::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN( 251)		int min5 = values11->__get(0);
HXDLIN( 251)		{
HXLINE( 251)			int _g22 = 0;
HXDLIN( 251)			int _g23 = values11->length;
HXDLIN( 251)			while((_g22 < _g23)){
HXLINE( 251)				_g22 = (_g22 + 1);
HXDLIN( 251)				int i11 = (_g22 - 1);
HXDLIN( 251)				if ((values11->__get(i11) < min5)) {
HXLINE( 251)					min5 = values11->__get(i11);
            				}
            			}
            		}
HXDLIN( 251)		int y9 = min5;
HXDLIN( 251)		bool red17;
HXDLIN( 251)		bool red18;
HXDLIN( 251)		bool red19;
HXDLIN( 251)		if ((x9 >= 0)) {
HXLINE( 251)			red19 = (y9 >= 0);
            		}
            		else {
HXLINE( 251)			red19 = false;
            		}
HXDLIN( 251)		if (red19) {
HXLINE( 251)			red18 = (x9 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 251)			red18 = false;
            		}
HXDLIN( 251)		if (red18) {
HXLINE( 251)			red17 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 251)			red17 = false;
            		}
HXDLIN( 251)		if (!(red17)) {
HXLINE( 251)			::cpp::Int64 this5 = _hx_int64_make(x9,y9);
HXDLIN( 251)			int red20 = _hx_int64_high(this5);
HXDLIN( 251)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red20,_hx_int64_low(this5))));
            		}
HXDLIN( 251)		int position3 = (((y9 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 251)		position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 251)		int red21 = ::Std_obj::_hx_int((red10 + (yFraction * (red16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) )) >> 16) & 255)) ))))));
HXLINE( 252)		Float green = (( (Float)(1) ) - yFraction);
HXDLIN( 252)		int x10 = ::Std_obj::_hx_int(x);
HXDLIN( 252)		int y10 = ::Std_obj::_hx_int(y);
HXDLIN( 252)		bool green1;
HXDLIN( 252)		bool green2;
HXDLIN( 252)		bool green3;
HXDLIN( 252)		if ((x10 >= 0)) {
HXLINE( 252)			green3 = (y10 >= 0);
            		}
            		else {
HXLINE( 252)			green3 = false;
            		}
HXDLIN( 252)		if (green3) {
HXLINE( 252)			green2 = (x10 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 252)			green2 = false;
            		}
HXDLIN( 252)		if (green2) {
HXLINE( 252)			green1 = (y10 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 252)			green1 = false;
            		}
HXDLIN( 252)		if (!(green1)) {
HXLINE( 252)			::cpp::Int64 this6 = _hx_int64_make(x10,y10);
HXDLIN( 252)			int green4 = _hx_int64_high(this6);
HXDLIN( 252)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green4,_hx_int64_low(this6))));
            		}
HXDLIN( 252)		int position4 = (((y10 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x10) * 4);
HXDLIN( 252)		position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 252)		Float green5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position4)) ) << 24) | (( (int)(this1->b->__get((position4 + 1))) ) << 16)) | (( (int)(this1->b->__get((position4 + 2))) ) << 8)) | ( (int)(this1->b->__get((position4 + 3))) )) >> 8) & 255)) ));
HXDLIN( 252)		int x11 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 252)		int y11 = ::Std_obj::_hx_int(y);
HXDLIN( 252)		int ma6 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 252)		::Array< int > values12 = ::Array_obj< int >::__new(2)->init(0,x11)->init(1,0);
HXDLIN( 252)		int max6 = values12->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g24 = 0;
HXDLIN( 252)			int _g25 = values12->length;
HXDLIN( 252)			while((_g24 < _g25)){
HXLINE( 252)				_g24 = (_g24 + 1);
HXDLIN( 252)				int i12 = (_g24 - 1);
HXDLIN( 252)				if ((values12->__get(i12) > max6)) {
HXLINE( 252)					max6 = values12->__get(i12);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values13 = ::Array_obj< int >::__new(2)->init(0,max6)->init(1,ma6);
HXDLIN( 252)		int min6 = values13->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g26 = 0;
HXDLIN( 252)			int _g27 = values13->length;
HXDLIN( 252)			while((_g26 < _g27)){
HXLINE( 252)				_g26 = (_g26 + 1);
HXDLIN( 252)				int i13 = (_g26 - 1);
HXDLIN( 252)				if ((values13->__get(i13) < min6)) {
HXLINE( 252)					min6 = values13->__get(i13);
            				}
            			}
            		}
HXDLIN( 252)		int x12 = min6;
HXDLIN( 252)		int ma7 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 252)		::Array< int > values14 = ::Array_obj< int >::__new(2)->init(0,y11)->init(1,0);
HXDLIN( 252)		int max7 = values14->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g28 = 0;
HXDLIN( 252)			int _g29 = values14->length;
HXDLIN( 252)			while((_g28 < _g29)){
HXLINE( 252)				_g28 = (_g28 + 1);
HXDLIN( 252)				int i14 = (_g28 - 1);
HXDLIN( 252)				if ((values14->__get(i14) > max7)) {
HXLINE( 252)					max7 = values14->__get(i14);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values15 = ::Array_obj< int >::__new(2)->init(0,max7)->init(1,ma7);
HXDLIN( 252)		int min7 = values15->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g30 = 0;
HXDLIN( 252)			int _g31 = values15->length;
HXDLIN( 252)			while((_g30 < _g31)){
HXLINE( 252)				_g30 = (_g30 + 1);
HXDLIN( 252)				int i15 = (_g30 - 1);
HXDLIN( 252)				if ((values15->__get(i15) < min7)) {
HXLINE( 252)					min7 = values15->__get(i15);
            				}
            			}
            		}
HXDLIN( 252)		int y12 = min7;
HXDLIN( 252)		bool green6;
HXDLIN( 252)		bool green7;
HXDLIN( 252)		bool green8;
HXDLIN( 252)		if ((x12 >= 0)) {
HXLINE( 252)			green8 = (y12 >= 0);
            		}
            		else {
HXLINE( 252)			green8 = false;
            		}
HXDLIN( 252)		if (green8) {
HXLINE( 252)			green7 = (x12 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 252)			green7 = false;
            		}
HXDLIN( 252)		if (green7) {
HXLINE( 252)			green6 = (y12 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 252)			green6 = false;
            		}
HXDLIN( 252)		if (!(green6)) {
HXLINE( 252)			::cpp::Int64 this7 = _hx_int64_make(x12,y12);
HXDLIN( 252)			int green9 = _hx_int64_high(this7);
HXDLIN( 252)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green9,_hx_int64_low(this7))));
            		}
HXDLIN( 252)		int position5 = (((y12 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x12) * 4);
HXDLIN( 252)		position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 252)		Float green10 = (green * (green5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) )) >> 8) & 255)) ))));
HXDLIN( 252)		Float green11 = (( (Float)(1) ) - xFraction);
HXDLIN( 252)		int x13 = ::Std_obj::_hx_int(x);
HXDLIN( 252)		int y13 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 252)		int ma8 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 252)		::Array< int > values16 = ::Array_obj< int >::__new(2)->init(0,x13)->init(1,0);
HXDLIN( 252)		int max8 = values16->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g32 = 0;
HXDLIN( 252)			int _g33 = values16->length;
HXDLIN( 252)			while((_g32 < _g33)){
HXLINE( 252)				_g32 = (_g32 + 1);
HXDLIN( 252)				int i16 = (_g32 - 1);
HXDLIN( 252)				if ((values16->__get(i16) > max8)) {
HXLINE( 252)					max8 = values16->__get(i16);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values17 = ::Array_obj< int >::__new(2)->init(0,max8)->init(1,ma8);
HXDLIN( 252)		int min8 = values17->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g34 = 0;
HXDLIN( 252)			int _g35 = values17->length;
HXDLIN( 252)			while((_g34 < _g35)){
HXLINE( 252)				_g34 = (_g34 + 1);
HXDLIN( 252)				int i17 = (_g34 - 1);
HXDLIN( 252)				if ((values17->__get(i17) < min8)) {
HXLINE( 252)					min8 = values17->__get(i17);
            				}
            			}
            		}
HXDLIN( 252)		int x14 = min8;
HXDLIN( 252)		int ma9 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 252)		::Array< int > values18 = ::Array_obj< int >::__new(2)->init(0,y13)->init(1,0);
HXDLIN( 252)		int max9 = values18->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g36 = 0;
HXDLIN( 252)			int _g37 = values18->length;
HXDLIN( 252)			while((_g36 < _g37)){
HXLINE( 252)				_g36 = (_g36 + 1);
HXDLIN( 252)				int i18 = (_g36 - 1);
HXDLIN( 252)				if ((values18->__get(i18) > max9)) {
HXLINE( 252)					max9 = values18->__get(i18);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values19 = ::Array_obj< int >::__new(2)->init(0,max9)->init(1,ma9);
HXDLIN( 252)		int min9 = values19->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g38 = 0;
HXDLIN( 252)			int _g39 = values19->length;
HXDLIN( 252)			while((_g38 < _g39)){
HXLINE( 252)				_g38 = (_g38 + 1);
HXDLIN( 252)				int i19 = (_g38 - 1);
HXDLIN( 252)				if ((values19->__get(i19) < min9)) {
HXLINE( 252)					min9 = values19->__get(i19);
            				}
            			}
            		}
HXDLIN( 252)		int y14 = min9;
HXDLIN( 252)		bool green12;
HXDLIN( 252)		bool green13;
HXDLIN( 252)		bool green14;
HXDLIN( 252)		if ((x14 >= 0)) {
HXLINE( 252)			green14 = (y14 >= 0);
            		}
            		else {
HXLINE( 252)			green14 = false;
            		}
HXDLIN( 252)		if (green14) {
HXLINE( 252)			green13 = (x14 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 252)			green13 = false;
            		}
HXDLIN( 252)		if (green13) {
HXLINE( 252)			green12 = (y14 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 252)			green12 = false;
            		}
HXDLIN( 252)		if (!(green12)) {
HXLINE( 252)			::cpp::Int64 this8 = _hx_int64_make(x14,y14);
HXDLIN( 252)			int green15 = _hx_int64_high(this8);
HXDLIN( 252)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green15,_hx_int64_low(this8))));
            		}
HXDLIN( 252)		int position6 = (((y14 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x14) * 4);
HXDLIN( 252)		position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 252)		Float green16 = (green11 * ( (Float)(((((((( (int)(this1->b->__get(position6)) ) << 24) | (( (int)(this1->b->__get((position6 + 1))) ) << 16)) | (( (int)(this1->b->__get((position6 + 2))) ) << 8)) | ( (int)(this1->b->__get((position6 + 3))) )) >> 8) & 255)) ));
HXDLIN( 252)		int x15 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 252)		int y15 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 252)		int ma10 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 252)		::Array< int > values20 = ::Array_obj< int >::__new(2)->init(0,x15)->init(1,0);
HXDLIN( 252)		int max10 = values20->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g40 = 0;
HXDLIN( 252)			int _g41 = values20->length;
HXDLIN( 252)			while((_g40 < _g41)){
HXLINE( 252)				_g40 = (_g40 + 1);
HXDLIN( 252)				int i20 = (_g40 - 1);
HXDLIN( 252)				if ((values20->__get(i20) > max10)) {
HXLINE( 252)					max10 = values20->__get(i20);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values21 = ::Array_obj< int >::__new(2)->init(0,max10)->init(1,ma10);
HXDLIN( 252)		int min10 = values21->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g42 = 0;
HXDLIN( 252)			int _g43 = values21->length;
HXDLIN( 252)			while((_g42 < _g43)){
HXLINE( 252)				_g42 = (_g42 + 1);
HXDLIN( 252)				int i21 = (_g42 - 1);
HXDLIN( 252)				if ((values21->__get(i21) < min10)) {
HXLINE( 252)					min10 = values21->__get(i21);
            				}
            			}
            		}
HXDLIN( 252)		int x16 = min10;
HXDLIN( 252)		int ma11 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 252)		::Array< int > values22 = ::Array_obj< int >::__new(2)->init(0,y15)->init(1,0);
HXDLIN( 252)		int max11 = values22->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g44 = 0;
HXDLIN( 252)			int _g45 = values22->length;
HXDLIN( 252)			while((_g44 < _g45)){
HXLINE( 252)				_g44 = (_g44 + 1);
HXDLIN( 252)				int i22 = (_g44 - 1);
HXDLIN( 252)				if ((values22->__get(i22) > max11)) {
HXLINE( 252)					max11 = values22->__get(i22);
            				}
            			}
            		}
HXDLIN( 252)		::Array< int > values23 = ::Array_obj< int >::__new(2)->init(0,max11)->init(1,ma11);
HXDLIN( 252)		int min11 = values23->__get(0);
HXDLIN( 252)		{
HXLINE( 252)			int _g46 = 0;
HXDLIN( 252)			int _g47 = values23->length;
HXDLIN( 252)			while((_g46 < _g47)){
HXLINE( 252)				_g46 = (_g46 + 1);
HXDLIN( 252)				int i23 = (_g46 - 1);
HXDLIN( 252)				if ((values23->__get(i23) < min11)) {
HXLINE( 252)					min11 = values23->__get(i23);
            				}
            			}
            		}
HXDLIN( 252)		int y16 = min11;
HXDLIN( 252)		bool green17;
HXDLIN( 252)		bool green18;
HXDLIN( 252)		bool green19;
HXDLIN( 252)		if ((x16 >= 0)) {
HXLINE( 252)			green19 = (y16 >= 0);
            		}
            		else {
HXLINE( 252)			green19 = false;
            		}
HXDLIN( 252)		if (green19) {
HXLINE( 252)			green18 = (x16 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 252)			green18 = false;
            		}
HXDLIN( 252)		if (green18) {
HXLINE( 252)			green17 = (y16 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 252)			green17 = false;
            		}
HXDLIN( 252)		if (!(green17)) {
HXLINE( 252)			::cpp::Int64 this9 = _hx_int64_make(x16,y16);
HXDLIN( 252)			int green20 = _hx_int64_high(this9);
HXDLIN( 252)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green20,_hx_int64_low(this9))));
            		}
HXDLIN( 252)		int position7 = (((y16 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x16) * 4);
HXDLIN( 252)		position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 252)		int green21 = ::Std_obj::_hx_int((green10 + (yFraction * (green16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position7)) ) << 24) | (( (int)(this1->b->__get((position7 + 1))) ) << 16)) | (( (int)(this1->b->__get((position7 + 2))) ) << 8)) | ( (int)(this1->b->__get((position7 + 3))) )) >> 8) & 255)) ))))));
HXLINE( 253)		Float blue = (( (Float)(1) ) - yFraction);
HXDLIN( 253)		int x17 = ::Std_obj::_hx_int(x);
HXDLIN( 253)		int y17 = ::Std_obj::_hx_int(y);
HXDLIN( 253)		bool blue1;
HXDLIN( 253)		bool blue2;
HXDLIN( 253)		bool blue3;
HXDLIN( 253)		if ((x17 >= 0)) {
HXLINE( 253)			blue3 = (y17 >= 0);
            		}
            		else {
HXLINE( 253)			blue3 = false;
            		}
HXDLIN( 253)		if (blue3) {
HXLINE( 253)			blue2 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 253)			blue2 = false;
            		}
HXDLIN( 253)		if (blue2) {
HXLINE( 253)			blue1 = (y17 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 253)			blue1 = false;
            		}
HXDLIN( 253)		if (!(blue1)) {
HXLINE( 253)			::cpp::Int64 this10 = _hx_int64_make(x17,y17);
HXDLIN( 253)			int blue4 = _hx_int64_high(this10);
HXDLIN( 253)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue4,_hx_int64_low(this10))));
            		}
HXDLIN( 253)		int position8 = (((y17 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN( 253)		position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 253)		Float blue5 = ((( (Float)(1) ) - xFraction) * ( (Float)((((((( (int)(this1->b->__get(position8)) ) << 24) | (( (int)(this1->b->__get((position8 + 1))) ) << 16)) | (( (int)(this1->b->__get((position8 + 2))) ) << 8)) | ( (int)(this1->b->__get((position8 + 3))) )) & 255)) ));
HXDLIN( 253)		int x18 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 253)		int y18 = ::Std_obj::_hx_int(y);
HXDLIN( 253)		int ma12 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 253)		::Array< int > values24 = ::Array_obj< int >::__new(2)->init(0,x18)->init(1,0);
HXDLIN( 253)		int max12 = values24->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g48 = 0;
HXDLIN( 253)			int _g49 = values24->length;
HXDLIN( 253)			while((_g48 < _g49)){
HXLINE( 253)				_g48 = (_g48 + 1);
HXDLIN( 253)				int i24 = (_g48 - 1);
HXDLIN( 253)				if ((values24->__get(i24) > max12)) {
HXLINE( 253)					max12 = values24->__get(i24);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values25 = ::Array_obj< int >::__new(2)->init(0,max12)->init(1,ma12);
HXDLIN( 253)		int min12 = values25->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g50 = 0;
HXDLIN( 253)			int _g51 = values25->length;
HXDLIN( 253)			while((_g50 < _g51)){
HXLINE( 253)				_g50 = (_g50 + 1);
HXDLIN( 253)				int i25 = (_g50 - 1);
HXDLIN( 253)				if ((values25->__get(i25) < min12)) {
HXLINE( 253)					min12 = values25->__get(i25);
            				}
            			}
            		}
HXDLIN( 253)		int x19 = min12;
HXDLIN( 253)		int ma13 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 253)		::Array< int > values26 = ::Array_obj< int >::__new(2)->init(0,y18)->init(1,0);
HXDLIN( 253)		int max13 = values26->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g52 = 0;
HXDLIN( 253)			int _g53 = values26->length;
HXDLIN( 253)			while((_g52 < _g53)){
HXLINE( 253)				_g52 = (_g52 + 1);
HXDLIN( 253)				int i26 = (_g52 - 1);
HXDLIN( 253)				if ((values26->__get(i26) > max13)) {
HXLINE( 253)					max13 = values26->__get(i26);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values27 = ::Array_obj< int >::__new(2)->init(0,max13)->init(1,ma13);
HXDLIN( 253)		int min13 = values27->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g54 = 0;
HXDLIN( 253)			int _g55 = values27->length;
HXDLIN( 253)			while((_g54 < _g55)){
HXLINE( 253)				_g54 = (_g54 + 1);
HXDLIN( 253)				int i27 = (_g54 - 1);
HXDLIN( 253)				if ((values27->__get(i27) < min13)) {
HXLINE( 253)					min13 = values27->__get(i27);
            				}
            			}
            		}
HXDLIN( 253)		int y19 = min13;
HXDLIN( 253)		bool blue6;
HXDLIN( 253)		bool blue7;
HXDLIN( 253)		bool blue8;
HXDLIN( 253)		if ((x19 >= 0)) {
HXLINE( 253)			blue8 = (y19 >= 0);
            		}
            		else {
HXLINE( 253)			blue8 = false;
            		}
HXDLIN( 253)		if (blue8) {
HXLINE( 253)			blue7 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 253)			blue7 = false;
            		}
HXDLIN( 253)		if (blue7) {
HXLINE( 253)			blue6 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 253)			blue6 = false;
            		}
HXDLIN( 253)		if (!(blue6)) {
HXLINE( 253)			::cpp::Int64 this11 = _hx_int64_make(x19,y19);
HXDLIN( 253)			int blue9 = _hx_int64_high(this11);
HXDLIN( 253)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue9,_hx_int64_low(this11))));
            		}
HXDLIN( 253)		int position9 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 253)		position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 253)		Float blue10 = (blue * (blue5 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position9)) ) << 24) | (( (int)(this1->b->__get((position9 + 1))) ) << 16)) | (( (int)(this1->b->__get((position9 + 2))) ) << 8)) | ( (int)(this1->b->__get((position9 + 3))) )) & 255)) ))));
HXDLIN( 253)		Float blue11 = (( (Float)(1) ) - xFraction);
HXDLIN( 253)		int x20 = ::Std_obj::_hx_int(x);
HXDLIN( 253)		int y20 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 253)		int ma14 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 253)		::Array< int > values28 = ::Array_obj< int >::__new(2)->init(0,x20)->init(1,0);
HXDLIN( 253)		int max14 = values28->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g56 = 0;
HXDLIN( 253)			int _g57 = values28->length;
HXDLIN( 253)			while((_g56 < _g57)){
HXLINE( 253)				_g56 = (_g56 + 1);
HXDLIN( 253)				int i28 = (_g56 - 1);
HXDLIN( 253)				if ((values28->__get(i28) > max14)) {
HXLINE( 253)					max14 = values28->__get(i28);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values29 = ::Array_obj< int >::__new(2)->init(0,max14)->init(1,ma14);
HXDLIN( 253)		int min14 = values29->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g58 = 0;
HXDLIN( 253)			int _g59 = values29->length;
HXDLIN( 253)			while((_g58 < _g59)){
HXLINE( 253)				_g58 = (_g58 + 1);
HXDLIN( 253)				int i29 = (_g58 - 1);
HXDLIN( 253)				if ((values29->__get(i29) < min14)) {
HXLINE( 253)					min14 = values29->__get(i29);
            				}
            			}
            		}
HXDLIN( 253)		int x21 = min14;
HXDLIN( 253)		int ma15 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 253)		::Array< int > values30 = ::Array_obj< int >::__new(2)->init(0,y20)->init(1,0);
HXDLIN( 253)		int max15 = values30->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g60 = 0;
HXDLIN( 253)			int _g61 = values30->length;
HXDLIN( 253)			while((_g60 < _g61)){
HXLINE( 253)				_g60 = (_g60 + 1);
HXDLIN( 253)				int i30 = (_g60 - 1);
HXDLIN( 253)				if ((values30->__get(i30) > max15)) {
HXLINE( 253)					max15 = values30->__get(i30);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values31 = ::Array_obj< int >::__new(2)->init(0,max15)->init(1,ma15);
HXDLIN( 253)		int min15 = values31->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g62 = 0;
HXDLIN( 253)			int _g63 = values31->length;
HXDLIN( 253)			while((_g62 < _g63)){
HXLINE( 253)				_g62 = (_g62 + 1);
HXDLIN( 253)				int i31 = (_g62 - 1);
HXDLIN( 253)				if ((values31->__get(i31) < min15)) {
HXLINE( 253)					min15 = values31->__get(i31);
            				}
            			}
            		}
HXDLIN( 253)		int y21 = min15;
HXDLIN( 253)		bool blue12;
HXDLIN( 253)		bool blue13;
HXDLIN( 253)		bool blue14;
HXDLIN( 253)		if ((x21 >= 0)) {
HXLINE( 253)			blue14 = (y21 >= 0);
            		}
            		else {
HXLINE( 253)			blue14 = false;
            		}
HXDLIN( 253)		if (blue14) {
HXLINE( 253)			blue13 = (x21 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 253)			blue13 = false;
            		}
HXDLIN( 253)		if (blue13) {
HXLINE( 253)			blue12 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 253)			blue12 = false;
            		}
HXDLIN( 253)		if (!(blue12)) {
HXLINE( 253)			::cpp::Int64 this12 = _hx_int64_make(x21,y21);
HXDLIN( 253)			int blue15 = _hx_int64_high(this12);
HXDLIN( 253)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue15,_hx_int64_low(this12))));
            		}
HXDLIN( 253)		int position10 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x21) * 4);
HXDLIN( 253)		position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 253)		Float blue16 = (blue11 * ( (Float)((((((( (int)(this1->b->__get(position10)) ) << 24) | (( (int)(this1->b->__get((position10 + 1))) ) << 16)) | (( (int)(this1->b->__get((position10 + 2))) ) << 8)) | ( (int)(this1->b->__get((position10 + 3))) )) & 255)) ));
HXDLIN( 253)		int x22 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 253)		int y22 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 253)		int ma16 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 253)		::Array< int > values32 = ::Array_obj< int >::__new(2)->init(0,x22)->init(1,0);
HXDLIN( 253)		int max16 = values32->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g64 = 0;
HXDLIN( 253)			int _g65 = values32->length;
HXDLIN( 253)			while((_g64 < _g65)){
HXLINE( 253)				_g64 = (_g64 + 1);
HXDLIN( 253)				int i32 = (_g64 - 1);
HXDLIN( 253)				if ((values32->__get(i32) > max16)) {
HXLINE( 253)					max16 = values32->__get(i32);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values33 = ::Array_obj< int >::__new(2)->init(0,max16)->init(1,ma16);
HXDLIN( 253)		int min16 = values33->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g66 = 0;
HXDLIN( 253)			int _g67 = values33->length;
HXDLIN( 253)			while((_g66 < _g67)){
HXLINE( 253)				_g66 = (_g66 + 1);
HXDLIN( 253)				int i33 = (_g66 - 1);
HXDLIN( 253)				if ((values33->__get(i33) < min16)) {
HXLINE( 253)					min16 = values33->__get(i33);
            				}
            			}
            		}
HXDLIN( 253)		int x23 = min16;
HXDLIN( 253)		int ma17 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 253)		::Array< int > values34 = ::Array_obj< int >::__new(2)->init(0,y22)->init(1,0);
HXDLIN( 253)		int max17 = values34->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g68 = 0;
HXDLIN( 253)			int _g69 = values34->length;
HXDLIN( 253)			while((_g68 < _g69)){
HXLINE( 253)				_g68 = (_g68 + 1);
HXDLIN( 253)				int i34 = (_g68 - 1);
HXDLIN( 253)				if ((values34->__get(i34) > max17)) {
HXLINE( 253)					max17 = values34->__get(i34);
            				}
            			}
            		}
HXDLIN( 253)		::Array< int > values35 = ::Array_obj< int >::__new(2)->init(0,max17)->init(1,ma17);
HXDLIN( 253)		int min17 = values35->__get(0);
HXDLIN( 253)		{
HXLINE( 253)			int _g70 = 0;
HXDLIN( 253)			int _g71 = values35->length;
HXDLIN( 253)			while((_g70 < _g71)){
HXLINE( 253)				_g70 = (_g70 + 1);
HXDLIN( 253)				int i35 = (_g70 - 1);
HXDLIN( 253)				if ((values35->__get(i35) < min17)) {
HXLINE( 253)					min17 = values35->__get(i35);
            				}
            			}
            		}
HXDLIN( 253)		int y23 = min17;
HXDLIN( 253)		bool blue17;
HXDLIN( 253)		bool blue18;
HXDLIN( 253)		bool blue19;
HXDLIN( 253)		if ((x23 >= 0)) {
HXLINE( 253)			blue19 = (y23 >= 0);
            		}
            		else {
HXLINE( 253)			blue19 = false;
            		}
HXDLIN( 253)		if (blue19) {
HXLINE( 253)			blue18 = (x23 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 253)			blue18 = false;
            		}
HXDLIN( 253)		if (blue18) {
HXLINE( 253)			blue17 = (y23 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 253)			blue17 = false;
            		}
HXDLIN( 253)		if (!(blue17)) {
HXLINE( 253)			::cpp::Int64 this13 = _hx_int64_make(x23,y23);
HXDLIN( 253)			int blue20 = _hx_int64_high(this13);
HXDLIN( 253)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue20,_hx_int64_low(this13))));
            		}
HXDLIN( 253)		int position11 = (((y23 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x23) * 4);
HXDLIN( 253)		position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 253)		int blue21 = ::Std_obj::_hx_int((blue10 + (yFraction * (blue16 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position11)) ) << 24) | (( (int)(this1->b->__get((position11 + 1))) ) << 16)) | (( (int)(this1->b->__get((position11 + 2))) ) << 8)) | ( (int)(this1->b->__get((position11 + 3))) )) & 255)) ))))));
HXLINE( 254)		Float alpha = (( (Float)(1) ) - yFraction);
HXDLIN( 254)		int x24 = ::Std_obj::_hx_int(x);
HXDLIN( 254)		int y24 = ::Std_obj::_hx_int(y);
HXDLIN( 254)		bool alpha1;
HXDLIN( 254)		bool alpha2;
HXDLIN( 254)		bool alpha3;
HXDLIN( 254)		if ((x24 >= 0)) {
HXLINE( 254)			alpha3 = (y24 >= 0);
            		}
            		else {
HXLINE( 254)			alpha3 = false;
            		}
HXDLIN( 254)		if (alpha3) {
HXLINE( 254)			alpha2 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 254)			alpha2 = false;
            		}
HXDLIN( 254)		if (alpha2) {
HXLINE( 254)			alpha1 = (y24 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 254)			alpha1 = false;
            		}
HXDLIN( 254)		if (!(alpha1)) {
HXLINE( 254)			::cpp::Int64 this14 = _hx_int64_make(x24,y24);
HXDLIN( 254)			int alpha4 = _hx_int64_high(this14);
HXDLIN( 254)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha4,_hx_int64_low(this14))));
            		}
HXDLIN( 254)		int position12 = (((y24 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN( 254)		position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 254)		Float alpha5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position12)) ) << 24) | (( (int)(this1->b->__get((position12 + 1))) ) << 16)) | (( (int)(this1->b->__get((position12 + 2))) ) << 8)) | ( (int)(this1->b->__get((position12 + 3))) )) >> 24) & 255)) ));
HXDLIN( 254)		int x25 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 254)		int y25 = ::Std_obj::_hx_int(y);
HXDLIN( 254)		int ma18 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 254)		::Array< int > values36 = ::Array_obj< int >::__new(2)->init(0,x25)->init(1,0);
HXDLIN( 254)		int max18 = values36->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g72 = 0;
HXDLIN( 254)			int _g73 = values36->length;
HXDLIN( 254)			while((_g72 < _g73)){
HXLINE( 254)				_g72 = (_g72 + 1);
HXDLIN( 254)				int i36 = (_g72 - 1);
HXDLIN( 254)				if ((values36->__get(i36) > max18)) {
HXLINE( 254)					max18 = values36->__get(i36);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values37 = ::Array_obj< int >::__new(2)->init(0,max18)->init(1,ma18);
HXDLIN( 254)		int min18 = values37->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g74 = 0;
HXDLIN( 254)			int _g75 = values37->length;
HXDLIN( 254)			while((_g74 < _g75)){
HXLINE( 254)				_g74 = (_g74 + 1);
HXDLIN( 254)				int i37 = (_g74 - 1);
HXDLIN( 254)				if ((values37->__get(i37) < min18)) {
HXLINE( 254)					min18 = values37->__get(i37);
            				}
            			}
            		}
HXDLIN( 254)		int x26 = min18;
HXDLIN( 254)		int ma19 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 254)		::Array< int > values38 = ::Array_obj< int >::__new(2)->init(0,y25)->init(1,0);
HXDLIN( 254)		int max19 = values38->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g76 = 0;
HXDLIN( 254)			int _g77 = values38->length;
HXDLIN( 254)			while((_g76 < _g77)){
HXLINE( 254)				_g76 = (_g76 + 1);
HXDLIN( 254)				int i38 = (_g76 - 1);
HXDLIN( 254)				if ((values38->__get(i38) > max19)) {
HXLINE( 254)					max19 = values38->__get(i38);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values39 = ::Array_obj< int >::__new(2)->init(0,max19)->init(1,ma19);
HXDLIN( 254)		int min19 = values39->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g78 = 0;
HXDLIN( 254)			int _g79 = values39->length;
HXDLIN( 254)			while((_g78 < _g79)){
HXLINE( 254)				_g78 = (_g78 + 1);
HXDLIN( 254)				int i39 = (_g78 - 1);
HXDLIN( 254)				if ((values39->__get(i39) < min19)) {
HXLINE( 254)					min19 = values39->__get(i39);
            				}
            			}
            		}
HXDLIN( 254)		int y26 = min19;
HXDLIN( 254)		bool alpha6;
HXDLIN( 254)		bool alpha7;
HXDLIN( 254)		bool alpha8;
HXDLIN( 254)		if ((x26 >= 0)) {
HXLINE( 254)			alpha8 = (y26 >= 0);
            		}
            		else {
HXLINE( 254)			alpha8 = false;
            		}
HXDLIN( 254)		if (alpha8) {
HXLINE( 254)			alpha7 = (x26 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 254)			alpha7 = false;
            		}
HXDLIN( 254)		if (alpha7) {
HXLINE( 254)			alpha6 = (y26 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 254)			alpha6 = false;
            		}
HXDLIN( 254)		if (!(alpha6)) {
HXLINE( 254)			::cpp::Int64 this15 = _hx_int64_make(x26,y26);
HXDLIN( 254)			int alpha9 = _hx_int64_high(this15);
HXDLIN( 254)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha9,_hx_int64_low(this15))));
            		}
HXDLIN( 254)		int position13 = (((y26 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x26) * 4);
HXDLIN( 254)		position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 254)		Float alpha10 = (alpha * (alpha5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position13)) ) << 24) | (( (int)(this1->b->__get((position13 + 1))) ) << 16)) | (( (int)(this1->b->__get((position13 + 2))) ) << 8)) | ( (int)(this1->b->__get((position13 + 3))) )) >> 24) & 255)) ))));
HXDLIN( 254)		Float alpha11 = (( (Float)(1) ) - xFraction);
HXDLIN( 254)		int x27 = ::Std_obj::_hx_int(x);
HXDLIN( 254)		int y27 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 254)		int ma20 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 254)		::Array< int > values40 = ::Array_obj< int >::__new(2)->init(0,x27)->init(1,0);
HXDLIN( 254)		int max20 = values40->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g80 = 0;
HXDLIN( 254)			int _g81 = values40->length;
HXDLIN( 254)			while((_g80 < _g81)){
HXLINE( 254)				_g80 = (_g80 + 1);
HXDLIN( 254)				int i40 = (_g80 - 1);
HXDLIN( 254)				if ((values40->__get(i40) > max20)) {
HXLINE( 254)					max20 = values40->__get(i40);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values41 = ::Array_obj< int >::__new(2)->init(0,max20)->init(1,ma20);
HXDLIN( 254)		int min20 = values41->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g82 = 0;
HXDLIN( 254)			int _g83 = values41->length;
HXDLIN( 254)			while((_g82 < _g83)){
HXLINE( 254)				_g82 = (_g82 + 1);
HXDLIN( 254)				int i41 = (_g82 - 1);
HXDLIN( 254)				if ((values41->__get(i41) < min20)) {
HXLINE( 254)					min20 = values41->__get(i41);
            				}
            			}
            		}
HXDLIN( 254)		int x28 = min20;
HXDLIN( 254)		int ma21 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 254)		::Array< int > values42 = ::Array_obj< int >::__new(2)->init(0,y27)->init(1,0);
HXDLIN( 254)		int max21 = values42->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g84 = 0;
HXDLIN( 254)			int _g85 = values42->length;
HXDLIN( 254)			while((_g84 < _g85)){
HXLINE( 254)				_g84 = (_g84 + 1);
HXDLIN( 254)				int i42 = (_g84 - 1);
HXDLIN( 254)				if ((values42->__get(i42) > max21)) {
HXLINE( 254)					max21 = values42->__get(i42);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values43 = ::Array_obj< int >::__new(2)->init(0,max21)->init(1,ma21);
HXDLIN( 254)		int min21 = values43->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g86 = 0;
HXDLIN( 254)			int _g87 = values43->length;
HXDLIN( 254)			while((_g86 < _g87)){
HXLINE( 254)				_g86 = (_g86 + 1);
HXDLIN( 254)				int i43 = (_g86 - 1);
HXDLIN( 254)				if ((values43->__get(i43) < min21)) {
HXLINE( 254)					min21 = values43->__get(i43);
            				}
            			}
            		}
HXDLIN( 254)		int y28 = min21;
HXDLIN( 254)		bool alpha12;
HXDLIN( 254)		bool alpha13;
HXDLIN( 254)		bool alpha14;
HXDLIN( 254)		if ((x28 >= 0)) {
HXLINE( 254)			alpha14 = (y28 >= 0);
            		}
            		else {
HXLINE( 254)			alpha14 = false;
            		}
HXDLIN( 254)		if (alpha14) {
HXLINE( 254)			alpha13 = (x28 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 254)			alpha13 = false;
            		}
HXDLIN( 254)		if (alpha13) {
HXLINE( 254)			alpha12 = (y28 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 254)			alpha12 = false;
            		}
HXDLIN( 254)		if (!(alpha12)) {
HXLINE( 254)			::cpp::Int64 this16 = _hx_int64_make(x28,y28);
HXDLIN( 254)			int alpha15 = _hx_int64_high(this16);
HXDLIN( 254)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha15,_hx_int64_low(this16))));
            		}
HXDLIN( 254)		int position14 = (((y28 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x28) * 4);
HXDLIN( 254)		position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 254)		Float alpha16 = (alpha11 * ( (Float)(((((((( (int)(this1->b->__get(position14)) ) << 24) | (( (int)(this1->b->__get((position14 + 1))) ) << 16)) | (( (int)(this1->b->__get((position14 + 2))) ) << 8)) | ( (int)(this1->b->__get((position14 + 3))) )) >> 24) & 255)) ));
HXDLIN( 254)		int x29 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 254)		int y29 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 254)		int ma22 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 254)		::Array< int > values44 = ::Array_obj< int >::__new(2)->init(0,x29)->init(1,0);
HXDLIN( 254)		int max22 = values44->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g88 = 0;
HXDLIN( 254)			int _g89 = values44->length;
HXDLIN( 254)			while((_g88 < _g89)){
HXLINE( 254)				_g88 = (_g88 + 1);
HXDLIN( 254)				int i44 = (_g88 - 1);
HXDLIN( 254)				if ((values44->__get(i44) > max22)) {
HXLINE( 254)					max22 = values44->__get(i44);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values45 = ::Array_obj< int >::__new(2)->init(0,max22)->init(1,ma22);
HXDLIN( 254)		int min22 = values45->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g90 = 0;
HXDLIN( 254)			int _g91 = values45->length;
HXDLIN( 254)			while((_g90 < _g91)){
HXLINE( 254)				_g90 = (_g90 + 1);
HXDLIN( 254)				int i45 = (_g90 - 1);
HXDLIN( 254)				if ((values45->__get(i45) < min22)) {
HXLINE( 254)					min22 = values45->__get(i45);
            				}
            			}
            		}
HXDLIN( 254)		int x30 = min22;
HXDLIN( 254)		int ma23 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 254)		::Array< int > values46 = ::Array_obj< int >::__new(2)->init(0,y29)->init(1,0);
HXDLIN( 254)		int max23 = values46->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g92 = 0;
HXDLIN( 254)			int _g93 = values46->length;
HXDLIN( 254)			while((_g92 < _g93)){
HXLINE( 254)				_g92 = (_g92 + 1);
HXDLIN( 254)				int i46 = (_g92 - 1);
HXDLIN( 254)				if ((values46->__get(i46) > max23)) {
HXLINE( 254)					max23 = values46->__get(i46);
            				}
            			}
            		}
HXDLIN( 254)		::Array< int > values47 = ::Array_obj< int >::__new(2)->init(0,max23)->init(1,ma23);
HXDLIN( 254)		int min23 = values47->__get(0);
HXDLIN( 254)		{
HXLINE( 254)			int _g94 = 0;
HXDLIN( 254)			int _g95 = values47->length;
HXDLIN( 254)			while((_g94 < _g95)){
HXLINE( 254)				_g94 = (_g94 + 1);
HXDLIN( 254)				int i47 = (_g94 - 1);
HXDLIN( 254)				if ((values47->__get(i47) < min23)) {
HXLINE( 254)					min23 = values47->__get(i47);
            				}
            			}
            		}
HXDLIN( 254)		int y30 = min23;
HXDLIN( 254)		bool alpha17;
HXDLIN( 254)		bool alpha18;
HXDLIN( 254)		bool alpha19;
HXDLIN( 254)		if ((x30 >= 0)) {
HXLINE( 254)			alpha19 = (y30 >= 0);
            		}
            		else {
HXLINE( 254)			alpha19 = false;
            		}
HXDLIN( 254)		if (alpha19) {
HXLINE( 254)			alpha18 = (x30 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 254)			alpha18 = false;
            		}
HXDLIN( 254)		if (alpha18) {
HXLINE( 254)			alpha17 = (y30 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 254)			alpha17 = false;
            		}
HXDLIN( 254)		if (!(alpha17)) {
HXLINE( 254)			::cpp::Int64 this17 = _hx_int64_make(x30,y30);
HXDLIN( 254)			int alpha20 = _hx_int64_high(this17);
HXDLIN( 254)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha20,_hx_int64_low(this17))));
            		}
HXDLIN( 254)		int position15 = (((y30 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x30) * 4);
HXDLIN( 254)		position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 254)		int alpha21 = ::Std_obj::_hx_int((alpha10 + (yFraction * (alpha16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position15)) ) << 24) | (( (int)(this1->b->__get((position15 + 1))) ) << 16)) | (( (int)(this1->b->__get((position15 + 2))) ) << 8)) | ( (int)(this1->b->__get((position15 + 3))) )) >> 24) & 255)) ))))));
HXLINE( 255)		int color = 0;
HXDLIN( 255)		{
HXLINE( 255)			color = (color & -16711681);
HXDLIN( 255)			int color1;
HXDLIN( 255)			if ((red21 > 255)) {
HXLINE( 255)				color1 = 255;
            			}
            			else {
HXLINE( 255)				if ((red21 < 0)) {
HXLINE( 255)					color1 = 0;
            				}
            				else {
HXLINE( 255)					color1 = red21;
            				}
            			}
HXDLIN( 255)			color = (color | (color1 << 16));
            		}
HXDLIN( 255)		{
HXLINE( 255)			color = (color & -65281);
HXDLIN( 255)			int color2;
HXDLIN( 255)			if ((green21 > 255)) {
HXLINE( 255)				color2 = 255;
            			}
            			else {
HXLINE( 255)				if ((green21 < 0)) {
HXLINE( 255)					color2 = 0;
            				}
            				else {
HXLINE( 255)					color2 = green21;
            				}
            			}
HXDLIN( 255)			color = (color | (color2 << 8));
            		}
HXDLIN( 255)		{
HXLINE( 255)			color = (color & -256);
HXDLIN( 255)			int color3;
HXDLIN( 255)			if ((blue21 > 255)) {
HXLINE( 255)				color3 = 255;
            			}
            			else {
HXLINE( 255)				if ((blue21 < 0)) {
HXLINE( 255)					color3 = 0;
            				}
            				else {
HXLINE( 255)					color3 = blue21;
            				}
            			}
HXDLIN( 255)			color = (color | color3);
            		}
HXDLIN( 255)		{
HXLINE( 255)			color = (color & 16777215);
HXDLIN( 255)			int color4;
HXDLIN( 255)			if ((alpha21 > 255)) {
HXLINE( 255)				color4 = 255;
            			}
            			else {
HXLINE( 255)				if ((alpha21 < 0)) {
HXLINE( 255)					color4 = 0;
            				}
            				else {
HXLINE( 255)					color4 = alpha21;
            				}
            			}
HXDLIN( 255)			color = (color | (color4 << 24));
            		}
HXDLIN( 255)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,getFloatingPixel,return )

void Image_Impl__obj::setPixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_276_setPixel)
HXDLIN( 276)		bool _hx_tmp;
HXDLIN( 276)		bool _hx_tmp1;
HXDLIN( 276)		bool _hx_tmp2;
HXDLIN( 276)		if ((x >= 0)) {
HXDLIN( 276)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXDLIN( 276)			_hx_tmp2 = false;
            		}
HXDLIN( 276)		if (_hx_tmp2) {
HXDLIN( 276)			_hx_tmp1 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 276)			_hx_tmp1 = false;
            		}
HXDLIN( 276)		if (_hx_tmp1) {
HXDLIN( 276)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 276)			_hx_tmp = false;
            		}
HXDLIN( 276)		if (!(_hx_tmp)) {
HXLINE( 279)			::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN( 279)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 279)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
            		else {
HXLINE( 282)			bool _hx_tmp4;
HXDLIN( 282)			bool _hx_tmp5;
HXDLIN( 282)			bool _hx_tmp6;
HXDLIN( 282)			bool _hx_tmp7;
HXDLIN( 282)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 282)			if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 282)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 282)				_hx_tmp7 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 282)				_hx_tmp7 = true;
            			}
HXDLIN( 282)			if (!(_hx_tmp7)) {
HXLINE( 282)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 282)				_hx_tmp6 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 282)				_hx_tmp6 = true;
            			}
HXDLIN( 282)			if (!(_hx_tmp6)) {
HXLINE( 282)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 282)				_hx_tmp5 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 282)				_hx_tmp5 = true;
            			}
HXDLIN( 282)			if (!(_hx_tmp5)) {
HXLINE( 282)				_hx_tmp4 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 282)				_hx_tmp4 = true;
            			}
HXDLIN( 282)			if (_hx_tmp4) {
HXLINE( 283)				 ::vision::ds::ImageView v = null();
HXDLIN( 283)				bool _hx_tmp8;
HXDLIN( 283)				bool _hx_tmp9;
HXDLIN( 283)				bool _hx_tmp10;
HXDLIN( 283)				bool _hx_tmp11;
HXDLIN( 283)				bool _hx_tmp12;
HXDLIN( 283)				bool _hx_tmp13;
HXDLIN( 283)				int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 283)				if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 283)					int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 283)					_hx_tmp13 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 283)					_hx_tmp13 = true;
            				}
HXDLIN( 283)				if (!(_hx_tmp13)) {
HXLINE( 283)					int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 283)					_hx_tmp12 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 283)					_hx_tmp12 = true;
            				}
HXDLIN( 283)				if (!(_hx_tmp12)) {
HXLINE( 283)					int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 283)					_hx_tmp11 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 283)					_hx_tmp11 = true;
            				}
HXDLIN( 283)				if (!(_hx_tmp11)) {
HXLINE( 283)					_hx_tmp10 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 283)					_hx_tmp10 = true;
            				}
HXDLIN( 283)				if (!(_hx_tmp10)) {
HXLINE( 283)					_hx_tmp9 = ::hx::IsNull( v );
            				}
            				else {
HXLINE( 283)					_hx_tmp9 = false;
            				}
HXDLIN( 283)				if (_hx_tmp9) {
HXLINE( 283)					bool _hx_tmp14;
HXDLIN( 283)					bool _hx_tmp15;
HXDLIN( 283)					if ((x >= 0)) {
HXLINE( 283)						_hx_tmp15 = (y >= 0);
            					}
            					else {
HXLINE( 283)						_hx_tmp15 = false;
            					}
HXDLIN( 283)					if (_hx_tmp15) {
HXLINE( 283)						_hx_tmp14 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 283)						_hx_tmp14 = false;
            					}
HXDLIN( 283)					if (_hx_tmp14) {
HXLINE( 283)						_hx_tmp8 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 283)						_hx_tmp8 = false;
            					}
            				}
            				else {
HXLINE( 283)					bool has = false;
HXDLIN( 283)					 ::vision::ds::ImageView view;
HXDLIN( 283)					if (::hx::IsNotNull( v )) {
HXLINE( 283)						view = v;
            					}
            					else {
HXLINE( 283)						int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 283)						int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 283)						int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 283)						int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 283)						view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 283)					switch((int)(view->shape)){
            						case (int)0: {
HXLINE( 283)							bool has1;
HXDLIN( 283)							bool has2;
HXDLIN( 283)							if ((x < (view->x + view->width))) {
HXLINE( 283)								has2 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 283)								has2 = false;
            							}
HXDLIN( 283)							if (has2) {
HXLINE( 283)								has1 = (x >= view->x);
            							}
            							else {
HXLINE( 283)								has1 = false;
            							}
HXDLIN( 283)							if (has1) {
HXLINE( 283)								has = (y >= view->y);
            							}
            							else {
HXLINE( 283)								has = false;
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 283)							bool has3;
HXDLIN( 283)							bool has4;
HXDLIN( 283)							bool has5;
HXDLIN( 283)							if ((x < (view->x + view->width))) {
HXLINE( 283)								has5 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 283)								has5 = false;
            							}
HXDLIN( 283)							if (has5) {
HXLINE( 283)								has4 = (x >= view->x);
            							}
            							else {
HXLINE( 283)								has4 = false;
            							}
HXDLIN( 283)							if (has4) {
HXLINE( 283)								has3 = (y >= view->y);
            							}
            							else {
HXLINE( 283)								has3 = false;
            							}
HXLINE(1400)							has = !(has3);
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 283)							if ((view->width > view->height)) {
HXLINE( 283)								Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 283)								Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 283)								Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 283)								Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 283)								Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 283)								Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 283)								Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 283)								::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 283)								Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 283)								Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 283)								Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 283)								Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 283)								Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)								has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 283)								if ((view->shape == 3)) {
HXLINE(1416)									has = !(has);
            								}
            							}
            							else {
HXLINE( 283)								if ((view->height > view->width)) {
HXLINE( 283)									Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 283)									Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 283)									Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 283)									Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 283)									Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 283)									Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 283)									Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 283)									::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 283)									Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 283)									Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 283)									Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 283)									Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 283)									Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)									has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 283)									if ((view->shape == 3)) {
HXLINE(1425)										has = !(has);
            									}
            								}
            								else {
HXLINE( 283)									Float point1_x = ( (Float)(x) );
HXDLIN( 283)									Float point1_y = ( (Float)(y) );
HXDLIN( 283)									Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 283)									Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 283)									Float x5 = (point2_x - point1_x);
HXDLIN( 283)									Float y5 = (point2_y - point1_y);
HXLINE(1428)									has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 283)									if ((view->shape == 3)) {
HXLINE(1429)										has = !(has);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 283)					_hx_tmp8 = has;
            				}
HXDLIN( 283)				if (_hx_tmp8) {
HXLINE( 284)					int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 284)					position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 284)					this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 284)					this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 284)					this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 284)					this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            				}
            			}
            			else {
HXLINE( 287)				int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 287)				position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 287)				this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 287)				this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 287)				this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 287)				this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,setPixel,(void))

void Image_Impl__obj::setSafePixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_293_setSafePixel)
HXLINE( 294)		int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 294)		::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x)->init(1,0);
HXDLIN( 294)		int max = values->__get(0);
HXDLIN( 294)		{
HXLINE( 294)			int _g = 0;
HXDLIN( 294)			int _g1 = values->length;
HXDLIN( 294)			while((_g < _g1)){
HXLINE( 294)				_g = (_g + 1);
HXDLIN( 294)				int i = (_g - 1);
HXDLIN( 294)				if ((values->__get(i) > max)) {
HXLINE( 688)					max = values->__get(i);
            				}
            			}
            		}
HXLINE( 294)		::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 294)		int min = values1->__get(0);
HXDLIN( 294)		int _g2 = 0;
HXDLIN( 294)		int _g3 = values1->length;
HXDLIN( 294)		while((_g2 < _g3)){
HXLINE( 294)			_g2 = (_g2 + 1);
HXDLIN( 294)			int i1 = (_g2 - 1);
HXDLIN( 294)			if ((values1->__get(i1) < min)) {
HXLINE( 652)				min = values1->__get(i1);
            			}
            		}
HXLINE( 294)		x = min;
HXLINE( 295)		int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 295)		::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y)->init(1,0);
HXDLIN( 295)		int max1 = values2->__get(0);
HXDLIN( 295)		{
HXLINE( 295)			int _g4 = 0;
HXDLIN( 295)			int _g5 = values2->length;
HXDLIN( 295)			while((_g4 < _g5)){
HXLINE( 295)				_g4 = (_g4 + 1);
HXDLIN( 295)				int i2 = (_g4 - 1);
HXDLIN( 295)				if ((values2->__get(i2) > max1)) {
HXLINE( 688)					max1 = values2->__get(i2);
            				}
            			}
            		}
HXLINE( 295)		::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 295)		int min1 = values3->__get(0);
HXDLIN( 295)		int _g6 = 0;
HXDLIN( 295)		int _g7 = values3->length;
HXDLIN( 295)		while((_g6 < _g7)){
HXLINE( 295)			_g6 = (_g6 + 1);
HXDLIN( 295)			int i3 = (_g6 - 1);
HXDLIN( 295)			if ((values3->__get(i3) < min1)) {
HXLINE( 652)				min1 = values3->__get(i3);
            			}
            		}
HXLINE( 295)		y = min1;
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		bool _hx_tmp1;
HXDLIN( 296)		bool _hx_tmp2;
HXDLIN( 296)		bool _hx_tmp3;
HXDLIN( 296)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 296)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 296)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 296)			_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp3 = true;
            		}
HXDLIN( 296)		if (!(_hx_tmp3)) {
HXLINE( 296)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 296)			_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp2 = true;
            		}
HXDLIN( 296)		if (!(_hx_tmp2)) {
HXLINE( 296)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 296)			_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp1 = true;
            		}
HXDLIN( 296)		if (!(_hx_tmp1)) {
HXLINE( 296)			_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp = true;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 297)			 ::vision::ds::ImageView v = null();
HXDLIN( 297)			bool _hx_tmp4;
HXDLIN( 297)			bool _hx_tmp5;
HXDLIN( 297)			bool _hx_tmp6;
HXDLIN( 297)			bool _hx_tmp7;
HXDLIN( 297)			bool _hx_tmp8;
HXDLIN( 297)			bool _hx_tmp9;
HXDLIN( 297)			int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 297)			if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 297)				int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 297)				_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 297)				_hx_tmp9 = true;
            			}
HXDLIN( 297)			if (!(_hx_tmp9)) {
HXLINE( 297)				int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 297)				_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 297)				_hx_tmp8 = true;
            			}
HXDLIN( 297)			if (!(_hx_tmp8)) {
HXLINE( 297)				int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 297)				_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 297)				_hx_tmp7 = true;
            			}
HXDLIN( 297)			if (!(_hx_tmp7)) {
HXLINE( 297)				_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 297)				_hx_tmp6 = true;
            			}
HXDLIN( 297)			if (!(_hx_tmp6)) {
HXLINE( 297)				_hx_tmp5 = ::hx::IsNull( v );
            			}
            			else {
HXLINE( 297)				_hx_tmp5 = false;
            			}
HXDLIN( 297)			if (_hx_tmp5) {
HXLINE( 297)				bool _hx_tmp10;
HXDLIN( 297)				bool _hx_tmp11;
HXDLIN( 297)				if ((x >= 0)) {
HXLINE( 297)					_hx_tmp11 = (y >= 0);
            				}
            				else {
HXLINE( 297)					_hx_tmp11 = false;
            				}
HXDLIN( 297)				if (_hx_tmp11) {
HXLINE( 297)					_hx_tmp10 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 297)					_hx_tmp10 = false;
            				}
HXDLIN( 297)				if (_hx_tmp10) {
HXLINE( 297)					_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 297)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE( 297)				bool has = false;
HXDLIN( 297)				 ::vision::ds::ImageView view;
HXDLIN( 297)				if (::hx::IsNotNull( v )) {
HXLINE( 297)					view = v;
            				}
            				else {
HXLINE( 297)					int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 297)					int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 297)					int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 297)					int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 297)					view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            				}
HXDLIN( 297)				switch((int)(view->shape)){
            					case (int)0: {
HXLINE( 297)						bool has1;
HXDLIN( 297)						bool has2;
HXDLIN( 297)						if ((x < (view->x + view->width))) {
HXLINE( 297)							has2 = (y < (view->y + view->height));
            						}
            						else {
HXLINE( 297)							has2 = false;
            						}
HXDLIN( 297)						if (has2) {
HXLINE( 297)							has1 = (x >= view->x);
            						}
            						else {
HXLINE( 297)							has1 = false;
            						}
HXDLIN( 297)						if (has1) {
HXLINE( 297)							has = (y >= view->y);
            						}
            						else {
HXLINE( 297)							has = false;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 297)						bool has3;
HXDLIN( 297)						bool has4;
HXDLIN( 297)						bool has5;
HXDLIN( 297)						if ((x < (view->x + view->width))) {
HXLINE( 297)							has5 = (y < (view->y + view->height));
            						}
            						else {
HXLINE( 297)							has5 = false;
            						}
HXDLIN( 297)						if (has5) {
HXLINE( 297)							has4 = (x >= view->x);
            						}
            						else {
HXLINE( 297)							has4 = false;
            						}
HXDLIN( 297)						if (has4) {
HXLINE( 297)							has3 = (y >= view->y);
            						}
            						else {
HXLINE( 297)							has3 = false;
            						}
HXLINE(1400)						has = !(has3);
            					}
            					break;
            					case (int)2: case (int)3: {
HXLINE( 297)						if ((view->width > view->height)) {
HXLINE( 297)							Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 297)							Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 297)							Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 297)							Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 297)							Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 297)							Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 297)							Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 297)							::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 297)							Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 297)							Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 297)							Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 297)							Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 297)							Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)							has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 297)							if ((view->shape == 3)) {
HXLINE(1416)								has = !(has);
            							}
            						}
            						else {
HXLINE( 297)							if ((view->height > view->width)) {
HXLINE( 297)								Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 297)								Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 297)								Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 297)								Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 297)								Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 297)								Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 297)								Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 297)								::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 297)								Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 297)								Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 297)								Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 297)								Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 297)								Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)								has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 297)								if ((view->shape == 3)) {
HXLINE(1425)									has = !(has);
            								}
            							}
            							else {
HXLINE( 297)								Float point1_x = ( (Float)(x) );
HXDLIN( 297)								Float point1_y = ( (Float)(y) );
HXDLIN( 297)								Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 297)								Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 297)								Float x5 = (point2_x - point1_x);
HXDLIN( 297)								Float y5 = (point2_y - point1_y);
HXLINE(1428)								has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 297)								if ((view->shape == 3)) {
HXLINE(1429)									has = !(has);
            								}
            							}
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1401)						has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            					}
            					break;
            					case (int)5: {
HXLINE(1402)						has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            					}
            					break;
            				}
HXLINE( 297)				_hx_tmp4 = has;
            			}
HXDLIN( 297)			if (_hx_tmp4) {
HXLINE( 298)				int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 298)				position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 298)				this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 298)				this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 298)				this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 298)				this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            			}
            		}
            		else {
HXLINE( 301)			int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 301)			position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 301)			this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 301)			this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 301)			this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 301)			this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,setSafePixel,(void))

void Image_Impl__obj::setFloatingPixel( ::haxe::io::Bytes this1,Float x,Float y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_305_setFloatingPixel)
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		Float x1 = ( (Float)(::Math_obj::ceil(x)) );
HXDLIN( 306)		Float y1 = ( (Float)(::Math_obj::ceil(y)) );
HXDLIN( 306)		bool _hx_tmp1;
HXDLIN( 306)		bool _hx_tmp2;
HXDLIN( 306)		bool _hx_tmp3;
HXDLIN( 306)		if ((x1 >= 0)) {
HXLINE( 306)			_hx_tmp3 = (y1 >= 0);
            		}
            		else {
HXLINE( 306)			_hx_tmp3 = false;
            		}
HXDLIN( 306)		if (_hx_tmp3) {
HXLINE( 306)			_hx_tmp2 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 306)			_hx_tmp2 = false;
            		}
HXDLIN( 306)		if (_hx_tmp2) {
HXLINE( 306)			_hx_tmp1 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 306)			_hx_tmp1 = false;
            		}
HXDLIN( 306)		if (_hx_tmp1) {
HXLINE( 306)			Float x2 = ( (Float)(::Math_obj::floor(x)) );
HXDLIN( 306)			Float y2 = ( (Float)(::Math_obj::floor(y)) );
HXDLIN( 306)			bool _hx_tmp4;
HXDLIN( 306)			bool _hx_tmp5;
HXDLIN( 306)			bool _hx_tmp6;
HXDLIN( 306)			if ((x2 >= 0)) {
HXLINE( 306)				_hx_tmp6 = (y2 >= 0);
            			}
            			else {
HXLINE( 306)				_hx_tmp6 = false;
            			}
HXDLIN( 306)			if (_hx_tmp6) {
HXLINE( 306)				_hx_tmp5 = (x2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 306)				_hx_tmp5 = false;
            			}
HXDLIN( 306)			if (_hx_tmp5) {
HXLINE( 306)				_hx_tmp4 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 306)				_hx_tmp4 = false;
            			}
HXDLIN( 306)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXLINE( 306)			_hx_tmp = true;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 307)			Float _hx_tmp7 = ::vision::tools::MathTools_obj::boundFloat(x,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 307)			::vision::ds::_Image::Image_Impl__obj::setFloatingPixel(this1,_hx_tmp7,::vision::tools::MathTools_obj::boundFloat(y,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) )),color);
HXLINE( 308)			return;
            		}
HXLINE( 310)		Float yFraction = (y - ( (Float)(::Std_obj::_hx_int(y)) ));
HXDLIN( 310)		Float xFraction = (x - ( (Float)(::Std_obj::_hx_int(x)) ));
HXLINE( 316)		{
HXLINE( 316)			int x3 = ::Math_obj::floor(x);
HXDLIN( 316)			int y3 = ::Math_obj::floor(y);
HXDLIN( 316)			Float Red = ((((( (Float)(1) ) - xFraction) + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 316)			Float Green = ((((( (Float)(1) ) - xFraction) + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 316)			Float Blue = ((((( (Float)(1) ) - xFraction) + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)((color & 255)) ) / ( (Float)(255) )));
HXDLIN( 316)			Float Alpha = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 316)			int color1 = 0;
HXDLIN( 316)			{
HXLINE( 316)				int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 316)				color1 = (color1 & -16711681);
HXDLIN( 316)				int color2;
HXDLIN( 316)				if ((value > 255)) {
HXLINE( 316)					color2 = 255;
            				}
            				else {
HXLINE( 316)					if ((value < 0)) {
HXLINE( 316)						color2 = 0;
            					}
            					else {
HXLINE( 316)						color2 = value;
            					}
            				}
HXDLIN( 316)				color1 = (color1 | (color2 << 16));
            			}
HXDLIN( 316)			{
HXLINE( 316)				int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 316)				color1 = (color1 & -65281);
HXDLIN( 316)				int color3;
HXDLIN( 316)				if ((value1 > 255)) {
HXLINE( 316)					color3 = 255;
            				}
            				else {
HXLINE( 316)					if ((value1 < 0)) {
HXLINE( 316)						color3 = 0;
            					}
            					else {
HXLINE( 316)						color3 = value1;
            					}
            				}
HXDLIN( 316)				color1 = (color1 | (color3 << 8));
            			}
HXDLIN( 316)			{
HXLINE( 316)				int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 316)				color1 = (color1 & -256);
HXDLIN( 316)				int color4;
HXDLIN( 316)				if ((value2 > 255)) {
HXLINE( 316)					color4 = 255;
            				}
            				else {
HXLINE( 316)					if ((value2 < 0)) {
HXLINE( 316)						color4 = 0;
            					}
            					else {
HXLINE( 316)						color4 = value2;
            					}
            				}
HXDLIN( 316)				color1 = (color1 | color4);
            			}
HXDLIN( 316)			{
HXLINE( 316)				int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 316)				color1 = (color1 & 16777215);
HXDLIN( 316)				int color5;
HXDLIN( 316)				if ((value3 > 255)) {
HXLINE( 316)					color5 = 255;
            				}
            				else {
HXLINE( 316)					if ((value3 < 0)) {
HXLINE( 316)						color5 = 0;
            					}
            					else {
HXLINE( 316)						color5 = value3;
            					}
            				}
HXDLIN( 316)				color1 = (color1 | (color5 << 24));
            			}
HXDLIN( 316)			int color6 = color1;
HXDLIN( 316)			bool _hx_tmp8;
HXDLIN( 316)			bool _hx_tmp9;
HXDLIN( 316)			bool _hx_tmp10;
HXDLIN( 316)			if ((x3 >= 0)) {
HXLINE( 316)				_hx_tmp10 = (y3 >= 0);
            			}
            			else {
HXLINE( 316)				_hx_tmp10 = false;
            			}
HXDLIN( 316)			if (_hx_tmp10) {
HXLINE( 316)				_hx_tmp9 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 316)				_hx_tmp9 = false;
            			}
HXDLIN( 316)			if (_hx_tmp9) {
HXLINE( 316)				_hx_tmp8 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 316)				_hx_tmp8 = false;
            			}
HXDLIN( 316)			if (!(_hx_tmp8)) {
HXLINE( 316)				::cpp::Int64 this2 = _hx_int64_make(x3,y3);
HXDLIN( 316)				int _hx_tmp11 = _hx_int64_high(this2);
HXDLIN( 316)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp11,_hx_int64_low(this2))));
            			}
            			else {
HXLINE( 316)				bool _hx_tmp12;
HXDLIN( 316)				bool _hx_tmp13;
HXDLIN( 316)				bool _hx_tmp14;
HXDLIN( 316)				bool _hx_tmp15;
HXDLIN( 316)				int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 316)				if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 316)					int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)					_hx_tmp15 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 316)					_hx_tmp15 = true;
            				}
HXDLIN( 316)				if (!(_hx_tmp15)) {
HXLINE( 316)					int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 316)					_hx_tmp14 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 316)					_hx_tmp14 = true;
            				}
HXDLIN( 316)				if (!(_hx_tmp14)) {
HXLINE( 316)					int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)					_hx_tmp13 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 316)					_hx_tmp13 = true;
            				}
HXDLIN( 316)				if (!(_hx_tmp13)) {
HXLINE( 316)					_hx_tmp12 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 316)					_hx_tmp12 = true;
            				}
HXDLIN( 316)				if (_hx_tmp12) {
HXLINE( 316)					 ::vision::ds::ImageView v = null();
HXDLIN( 316)					bool _hx_tmp16;
HXDLIN( 316)					bool _hx_tmp17;
HXDLIN( 316)					bool _hx_tmp18;
HXDLIN( 316)					bool _hx_tmp19;
HXDLIN( 316)					bool _hx_tmp20;
HXDLIN( 316)					bool _hx_tmp21;
HXDLIN( 316)					int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 316)					if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 316)						int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)						_hx_tmp21 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 316)						_hx_tmp21 = true;
            					}
HXDLIN( 316)					if (!(_hx_tmp21)) {
HXLINE( 316)						int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 316)						_hx_tmp20 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 316)						_hx_tmp20 = true;
            					}
HXDLIN( 316)					if (!(_hx_tmp20)) {
HXLINE( 316)						int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)						_hx_tmp19 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 316)						_hx_tmp19 = true;
            					}
HXDLIN( 316)					if (!(_hx_tmp19)) {
HXLINE( 316)						_hx_tmp18 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 316)						_hx_tmp18 = true;
            					}
HXDLIN( 316)					if (!(_hx_tmp18)) {
HXLINE( 316)						_hx_tmp17 = ::hx::IsNull( v );
            					}
            					else {
HXLINE( 316)						_hx_tmp17 = false;
            					}
HXDLIN( 316)					if (_hx_tmp17) {
HXLINE( 316)						bool _hx_tmp22;
HXDLIN( 316)						bool _hx_tmp23;
HXDLIN( 316)						if ((x3 >= 0)) {
HXLINE( 316)							_hx_tmp23 = (y3 >= 0);
            						}
            						else {
HXLINE( 316)							_hx_tmp23 = false;
            						}
HXDLIN( 316)						if (_hx_tmp23) {
HXLINE( 316)							_hx_tmp22 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 316)							_hx_tmp22 = false;
            						}
HXDLIN( 316)						if (_hx_tmp22) {
HXLINE( 316)							_hx_tmp16 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 316)							_hx_tmp16 = false;
            						}
            					}
            					else {
HXLINE( 316)						bool has = false;
HXDLIN( 316)						 ::vision::ds::ImageView view;
HXDLIN( 316)						if (::hx::IsNotNull( v )) {
HXLINE( 316)							view = v;
            						}
            						else {
HXLINE( 316)							int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 316)							int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)							int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 316)							int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 316)							view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 316)						switch((int)(view->shape)){
            							case (int)0: {
HXLINE( 316)								bool has1;
HXDLIN( 316)								bool has2;
HXDLIN( 316)								if ((x3 < (view->x + view->width))) {
HXLINE( 316)									has2 = (y3 < (view->y + view->height));
            								}
            								else {
HXLINE( 316)									has2 = false;
            								}
HXDLIN( 316)								if (has2) {
HXLINE( 316)									has1 = (x3 >= view->x);
            								}
            								else {
HXLINE( 316)									has1 = false;
            								}
HXDLIN( 316)								if (has1) {
HXLINE( 316)									has = (y3 >= view->y);
            								}
            								else {
HXLINE( 316)									has = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 316)								bool has3;
HXDLIN( 316)								bool has4;
HXDLIN( 316)								bool has5;
HXDLIN( 316)								if ((x3 < (view->x + view->width))) {
HXLINE( 316)									has5 = (y3 < (view->y + view->height));
            								}
            								else {
HXLINE( 316)									has5 = false;
            								}
HXDLIN( 316)								if (has5) {
HXLINE( 316)									has4 = (x3 >= view->x);
            								}
            								else {
HXLINE( 316)									has4 = false;
            								}
HXDLIN( 316)								if (has4) {
HXLINE( 316)									has3 = (y3 >= view->y);
            								}
            								else {
HXLINE( 316)									has3 = false;
            								}
HXLINE(1400)								has = !(has3);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 316)								if ((view->width > view->height)) {
HXLINE( 316)									Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 316)									Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 316)									Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 316)									Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 316)									Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 316)									Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 316)									Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 316)									::cpp::Int64 p = _hx_int64_make(x3,y3);
HXDLIN( 316)									Float x4 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 316)									Float y4 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 316)									Float has6 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 316)									Float x5 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 316)									Float y5 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)									has = ((has6 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->width);
HXLINE( 316)									if ((view->shape == 3)) {
HXLINE(1416)										has = !(has);
            									}
            								}
            								else {
HXLINE( 316)									if ((view->height > view->width)) {
HXLINE( 316)										Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 316)										Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 316)										Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 316)										Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 316)										Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 316)										Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 316)										Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 316)										::cpp::Int64 p1 = _hx_int64_make(x3,y3);
HXDLIN( 316)										Float x6 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 316)										Float y6 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 316)										Float has7 = ::Math_obj::sqrt(((x6 * x6) + (y6 * y6)));
HXDLIN( 316)										Float x7 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 316)										Float y7 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)										has = ((has7 + ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)))) <= view->height);
HXLINE( 316)										if ((view->shape == 3)) {
HXLINE(1425)											has = !(has);
            										}
            									}
            									else {
HXLINE( 316)										Float point1_x = ( (Float)(x3) );
HXDLIN( 316)										Float point1_y = ( (Float)(y3) );
HXDLIN( 316)										Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 316)										Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 316)										Float x8 = (point2_x - point1_x);
HXDLIN( 316)										Float y8 = (point2_y - point1_y);
HXLINE(1428)										has = (::Math_obj::sqrt(((x8 * x8) + (y8 * y8))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 316)										if ((view->shape == 3)) {
HXLINE(1429)											has = !(has);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has = (((::Math_obj::abs((( (Float)((x3 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has = !((((::Math_obj::abs((( (Float)((x3 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 316)						_hx_tmp16 = has;
            					}
HXDLIN( 316)					if (_hx_tmp16) {
HXLINE( 316)						int position = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 316)						position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 316)						this1->b[position] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN( 316)						this1->b[(position + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN( 316)						this1->b[(position + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN( 316)						this1->b[(position + 3)] = ( (unsigned char)((color6 & 255)) );
            					}
            				}
            				else {
HXLINE( 316)					int position1 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 316)					position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 316)					this1->b[position1] = ( (unsigned char)(((color6 >> 24) & 255)) );
HXDLIN( 316)					this1->b[(position1 + 1)] = ( (unsigned char)(((color6 >> 16) & 255)) );
HXDLIN( 316)					this1->b[(position1 + 2)] = ( (unsigned char)(((color6 >> 8) & 255)) );
HXDLIN( 316)					this1->b[(position1 + 3)] = ( (unsigned char)((color6 & 255)) );
            				}
            			}
            		}
HXLINE( 317)		if ((y != ::Std_obj::_hx_int(y))) {
HXLINE( 317)			int x9 = ::Math_obj::floor(x);
HXDLIN( 317)			int y9 = ::Math_obj::ceil(y);
HXDLIN( 317)			Float Red1 = ((((( (Float)(1) ) - xFraction) + yFraction) / ( (Float)(2) )) * (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 317)			Float Green1 = ((((( (Float)(1) ) - xFraction) + yFraction) / ( (Float)(2) )) * (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 317)			Float Blue1 = ((((( (Float)(1) ) - xFraction) + yFraction) / ( (Float)(2) )) * (( (Float)((color & 255)) ) / ( (Float)(255) )));
HXDLIN( 317)			Float Alpha1 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 317)			int color7 = 0;
HXDLIN( 317)			{
HXLINE( 317)				int value4 = ::Math_obj::round((Red1 * ( (Float)(255) )));
HXDLIN( 317)				color7 = (color7 & -16711681);
HXDLIN( 317)				int color8;
HXDLIN( 317)				if ((value4 > 255)) {
HXLINE( 317)					color8 = 255;
            				}
            				else {
HXLINE( 317)					if ((value4 < 0)) {
HXLINE( 317)						color8 = 0;
            					}
            					else {
HXLINE( 317)						color8 = value4;
            					}
            				}
HXDLIN( 317)				color7 = (color7 | (color8 << 16));
            			}
HXDLIN( 317)			{
HXLINE( 317)				int value5 = ::Math_obj::round((Green1 * ( (Float)(255) )));
HXDLIN( 317)				color7 = (color7 & -65281);
HXDLIN( 317)				int color9;
HXDLIN( 317)				if ((value5 > 255)) {
HXLINE( 317)					color9 = 255;
            				}
            				else {
HXLINE( 317)					if ((value5 < 0)) {
HXLINE( 317)						color9 = 0;
            					}
            					else {
HXLINE( 317)						color9 = value5;
            					}
            				}
HXDLIN( 317)				color7 = (color7 | (color9 << 8));
            			}
HXDLIN( 317)			{
HXLINE( 317)				int value6 = ::Math_obj::round((Blue1 * ( (Float)(255) )));
HXDLIN( 317)				color7 = (color7 & -256);
HXDLIN( 317)				int color10;
HXDLIN( 317)				if ((value6 > 255)) {
HXLINE( 317)					color10 = 255;
            				}
            				else {
HXLINE( 317)					if ((value6 < 0)) {
HXLINE( 317)						color10 = 0;
            					}
            					else {
HXLINE( 317)						color10 = value6;
            					}
            				}
HXDLIN( 317)				color7 = (color7 | color10);
            			}
HXDLIN( 317)			{
HXLINE( 317)				int value7 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 317)				color7 = (color7 & 16777215);
HXDLIN( 317)				int color11;
HXDLIN( 317)				if ((value7 > 255)) {
HXLINE( 317)					color11 = 255;
            				}
            				else {
HXLINE( 317)					if ((value7 < 0)) {
HXLINE( 317)						color11 = 0;
            					}
            					else {
HXLINE( 317)						color11 = value7;
            					}
            				}
HXDLIN( 317)				color7 = (color7 | (color11 << 24));
            			}
HXDLIN( 317)			int color12 = color7;
HXDLIN( 317)			bool _hx_tmp24;
HXDLIN( 317)			bool _hx_tmp25;
HXDLIN( 317)			bool _hx_tmp26;
HXDLIN( 317)			if ((x9 >= 0)) {
HXLINE( 317)				_hx_tmp26 = (y9 >= 0);
            			}
            			else {
HXLINE( 317)				_hx_tmp26 = false;
            			}
HXDLIN( 317)			if (_hx_tmp26) {
HXLINE( 317)				_hx_tmp25 = (x9 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 317)				_hx_tmp25 = false;
            			}
HXDLIN( 317)			if (_hx_tmp25) {
HXLINE( 317)				_hx_tmp24 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 317)				_hx_tmp24 = false;
            			}
HXDLIN( 317)			if (!(_hx_tmp24)) {
HXLINE( 317)				::cpp::Int64 this3 = _hx_int64_make(x9,y9);
HXDLIN( 317)				int _hx_tmp27 = _hx_int64_high(this3);
HXDLIN( 317)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp27,_hx_int64_low(this3))));
            			}
            			else {
HXLINE( 317)				bool _hx_tmp28;
HXDLIN( 317)				bool _hx_tmp29;
HXDLIN( 317)				bool _hx_tmp30;
HXDLIN( 317)				bool _hx_tmp31;
HXDLIN( 317)				int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 317)				if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 317)					int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)					_hx_tmp31 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 317)					_hx_tmp31 = true;
            				}
HXDLIN( 317)				if (!(_hx_tmp31)) {
HXLINE( 317)					int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 317)					_hx_tmp30 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 317)					_hx_tmp30 = true;
            				}
HXDLIN( 317)				if (!(_hx_tmp30)) {
HXLINE( 317)					int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)					_hx_tmp29 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 317)					_hx_tmp29 = true;
            				}
HXDLIN( 317)				if (!(_hx_tmp29)) {
HXLINE( 317)					_hx_tmp28 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 317)					_hx_tmp28 = true;
            				}
HXDLIN( 317)				if (_hx_tmp28) {
HXLINE( 317)					 ::vision::ds::ImageView v1 = null();
HXDLIN( 317)					bool _hx_tmp32;
HXDLIN( 317)					bool _hx_tmp33;
HXDLIN( 317)					bool _hx_tmp34;
HXDLIN( 317)					bool _hx_tmp35;
HXDLIN( 317)					bool _hx_tmp36;
HXDLIN( 317)					bool _hx_tmp37;
HXDLIN( 317)					int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 317)					if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 317)						int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)						_hx_tmp37 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 317)						_hx_tmp37 = true;
            					}
HXDLIN( 317)					if (!(_hx_tmp37)) {
HXLINE( 317)						int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 317)						_hx_tmp36 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 317)						_hx_tmp36 = true;
            					}
HXDLIN( 317)					if (!(_hx_tmp36)) {
HXLINE( 317)						int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)						_hx_tmp35 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 317)						_hx_tmp35 = true;
            					}
HXDLIN( 317)					if (!(_hx_tmp35)) {
HXLINE( 317)						_hx_tmp34 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 317)						_hx_tmp34 = true;
            					}
HXDLIN( 317)					if (!(_hx_tmp34)) {
HXLINE( 317)						_hx_tmp33 = ::hx::IsNull( v1 );
            					}
            					else {
HXLINE( 317)						_hx_tmp33 = false;
            					}
HXDLIN( 317)					if (_hx_tmp33) {
HXLINE( 317)						bool _hx_tmp38;
HXDLIN( 317)						bool _hx_tmp39;
HXDLIN( 317)						if ((x9 >= 0)) {
HXLINE( 317)							_hx_tmp39 = (y9 >= 0);
            						}
            						else {
HXLINE( 317)							_hx_tmp39 = false;
            						}
HXDLIN( 317)						if (_hx_tmp39) {
HXLINE( 317)							_hx_tmp38 = (x9 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 317)							_hx_tmp38 = false;
            						}
HXDLIN( 317)						if (_hx_tmp38) {
HXLINE( 317)							_hx_tmp32 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 317)							_hx_tmp32 = false;
            						}
            					}
            					else {
HXLINE( 317)						bool has8 = false;
HXDLIN( 317)						 ::vision::ds::ImageView view1;
HXDLIN( 317)						if (::hx::IsNotNull( v1 )) {
HXLINE( 317)							view1 = v1;
            						}
            						else {
HXLINE( 317)							int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 317)							int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)							int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 317)							int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 317)							view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 317)						switch((int)(view1->shape)){
            							case (int)0: {
HXLINE( 317)								bool has9;
HXDLIN( 317)								bool has10;
HXDLIN( 317)								if ((x9 < (view1->x + view1->width))) {
HXLINE( 317)									has10 = (y9 < (view1->y + view1->height));
            								}
            								else {
HXLINE( 317)									has10 = false;
            								}
HXDLIN( 317)								if (has10) {
HXLINE( 317)									has9 = (x9 >= view1->x);
            								}
            								else {
HXLINE( 317)									has9 = false;
            								}
HXDLIN( 317)								if (has9) {
HXLINE( 317)									has8 = (y9 >= view1->y);
            								}
            								else {
HXLINE( 317)									has8 = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 317)								bool has11;
HXDLIN( 317)								bool has12;
HXDLIN( 317)								bool has13;
HXDLIN( 317)								if ((x9 < (view1->x + view1->width))) {
HXLINE( 317)									has13 = (y9 < (view1->y + view1->height));
            								}
            								else {
HXLINE( 317)									has13 = false;
            								}
HXDLIN( 317)								if (has13) {
HXLINE( 317)									has12 = (x9 >= view1->x);
            								}
            								else {
HXLINE( 317)									has12 = false;
            								}
HXDLIN( 317)								if (has12) {
HXLINE( 317)									has11 = (y9 >= view1->y);
            								}
            								else {
HXLINE( 317)									has11 = false;
            								}
HXLINE(1400)								has8 = !(has11);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 317)								if ((view1->width > view1->height)) {
HXLINE( 317)									Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 317)									Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 317)									Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 317)									Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 317)									Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 317)									Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 317)									Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 317)									::cpp::Int64 p2 = _hx_int64_make(x9,y9);
HXDLIN( 317)									Float x10 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 317)									Float y10 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 317)									Float has14 = ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)));
HXDLIN( 317)									Float x11 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 317)									Float y11 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)									has8 = ((has14 + ::Math_obj::sqrt(((x11 * x11) + (y11 * y11)))) <= view1->width);
HXLINE( 317)									if ((view1->shape == 3)) {
HXLINE(1416)										has8 = !(has8);
            									}
            								}
            								else {
HXLINE( 317)									if ((view1->height > view1->width)) {
HXLINE( 317)										Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 317)										Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 317)										Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 317)										Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 317)										Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 317)										Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 317)										Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 317)										::cpp::Int64 p3 = _hx_int64_make(x9,y9);
HXDLIN( 317)										Float x12 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 317)										Float y12 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 317)										Float has15 = ::Math_obj::sqrt(((x12 * x12) + (y12 * y12)));
HXDLIN( 317)										Float x13 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 317)										Float y13 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)										has8 = ((has15 + ::Math_obj::sqrt(((x13 * x13) + (y13 * y13)))) <= view1->height);
HXLINE( 317)										if ((view1->shape == 3)) {
HXLINE(1425)											has8 = !(has8);
            										}
            									}
            									else {
HXLINE( 317)										Float point1_x1 = ( (Float)(x9) );
HXDLIN( 317)										Float point1_y1 = ( (Float)(y9) );
HXDLIN( 317)										Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 317)										Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 317)										Float x14 = (point2_x1 - point1_x1);
HXDLIN( 317)										Float y14 = (point2_y1 - point1_y1);
HXLINE(1428)										has8 = (::Math_obj::sqrt(((x14 * x14) + (y14 * y14))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 317)										if ((view1->shape == 3)) {
HXLINE(1429)											has8 = !(has8);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has8 = (((::Math_obj::abs((( (Float)((x9 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y9 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has8 = !((((::Math_obj::abs((( (Float)((x9 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y9 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 317)						_hx_tmp32 = has8;
            					}
HXDLIN( 317)					if (_hx_tmp32) {
HXLINE( 317)						int position2 = (((y9 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 317)						position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 317)						this1->b[position2] = ( (unsigned char)(((color12 >> 24) & 255)) );
HXDLIN( 317)						this1->b[(position2 + 1)] = ( (unsigned char)(((color12 >> 16) & 255)) );
HXDLIN( 317)						this1->b[(position2 + 2)] = ( (unsigned char)(((color12 >> 8) & 255)) );
HXDLIN( 317)						this1->b[(position2 + 3)] = ( (unsigned char)((color12 & 255)) );
            					}
            				}
            				else {
HXLINE( 317)					int position3 = (((y9 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 317)					position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 317)					this1->b[position3] = ( (unsigned char)(((color12 >> 24) & 255)) );
HXDLIN( 317)					this1->b[(position3 + 1)] = ( (unsigned char)(((color12 >> 16) & 255)) );
HXDLIN( 317)					this1->b[(position3 + 2)] = ( (unsigned char)(((color12 >> 8) & 255)) );
HXDLIN( 317)					this1->b[(position3 + 3)] = ( (unsigned char)((color12 & 255)) );
            				}
            			}
            		}
HXLINE( 318)		if ((x != ::Std_obj::_hx_int(x))) {
HXLINE( 318)			int x15 = ::Math_obj::ceil(x);
HXDLIN( 318)			int y15 = ::Math_obj::floor(y);
HXDLIN( 318)			Float Red2 = (((xFraction + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 318)			Float Green2 = (((xFraction + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 318)			Float Blue2 = (((xFraction + (( (Float)(1) ) - yFraction)) / ( (Float)(2) )) * (( (Float)((color & 255)) ) / ( (Float)(255) )));
HXDLIN( 318)			Float Alpha2 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 318)			int color13 = 0;
HXDLIN( 318)			{
HXLINE( 318)				int value8 = ::Math_obj::round((Red2 * ( (Float)(255) )));
HXDLIN( 318)				color13 = (color13 & -16711681);
HXDLIN( 318)				int color14;
HXDLIN( 318)				if ((value8 > 255)) {
HXLINE( 318)					color14 = 255;
            				}
            				else {
HXLINE( 318)					if ((value8 < 0)) {
HXLINE( 318)						color14 = 0;
            					}
            					else {
HXLINE( 318)						color14 = value8;
            					}
            				}
HXDLIN( 318)				color13 = (color13 | (color14 << 16));
            			}
HXDLIN( 318)			{
HXLINE( 318)				int value9 = ::Math_obj::round((Green2 * ( (Float)(255) )));
HXDLIN( 318)				color13 = (color13 & -65281);
HXDLIN( 318)				int color15;
HXDLIN( 318)				if ((value9 > 255)) {
HXLINE( 318)					color15 = 255;
            				}
            				else {
HXLINE( 318)					if ((value9 < 0)) {
HXLINE( 318)						color15 = 0;
            					}
            					else {
HXLINE( 318)						color15 = value9;
            					}
            				}
HXDLIN( 318)				color13 = (color13 | (color15 << 8));
            			}
HXDLIN( 318)			{
HXLINE( 318)				int value10 = ::Math_obj::round((Blue2 * ( (Float)(255) )));
HXDLIN( 318)				color13 = (color13 & -256);
HXDLIN( 318)				int color16;
HXDLIN( 318)				if ((value10 > 255)) {
HXLINE( 318)					color16 = 255;
            				}
            				else {
HXLINE( 318)					if ((value10 < 0)) {
HXLINE( 318)						color16 = 0;
            					}
            					else {
HXLINE( 318)						color16 = value10;
            					}
            				}
HXDLIN( 318)				color13 = (color13 | color16);
            			}
HXDLIN( 318)			{
HXLINE( 318)				int value11 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 318)				color13 = (color13 & 16777215);
HXDLIN( 318)				int color17;
HXDLIN( 318)				if ((value11 > 255)) {
HXLINE( 318)					color17 = 255;
            				}
            				else {
HXLINE( 318)					if ((value11 < 0)) {
HXLINE( 318)						color17 = 0;
            					}
            					else {
HXLINE( 318)						color17 = value11;
            					}
            				}
HXDLIN( 318)				color13 = (color13 | (color17 << 24));
            			}
HXDLIN( 318)			int color18 = color13;
HXDLIN( 318)			bool _hx_tmp40;
HXDLIN( 318)			bool _hx_tmp41;
HXDLIN( 318)			bool _hx_tmp42;
HXDLIN( 318)			if ((x15 >= 0)) {
HXLINE( 318)				_hx_tmp42 = (y15 >= 0);
            			}
            			else {
HXLINE( 318)				_hx_tmp42 = false;
            			}
HXDLIN( 318)			if (_hx_tmp42) {
HXLINE( 318)				_hx_tmp41 = (x15 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 318)				_hx_tmp41 = false;
            			}
HXDLIN( 318)			if (_hx_tmp41) {
HXLINE( 318)				_hx_tmp40 = (y15 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 318)				_hx_tmp40 = false;
            			}
HXDLIN( 318)			if (!(_hx_tmp40)) {
HXLINE( 318)				::cpp::Int64 this4 = _hx_int64_make(x15,y15);
HXDLIN( 318)				int _hx_tmp43 = _hx_int64_high(this4);
HXDLIN( 318)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp43,_hx_int64_low(this4))));
            			}
            			else {
HXLINE( 318)				bool _hx_tmp44;
HXDLIN( 318)				bool _hx_tmp45;
HXDLIN( 318)				bool _hx_tmp46;
HXDLIN( 318)				bool _hx_tmp47;
HXDLIN( 318)				int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 318)				if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 318)					int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)					_hx_tmp47 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 318)					_hx_tmp47 = true;
            				}
HXDLIN( 318)				if (!(_hx_tmp47)) {
HXLINE( 318)					int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 318)					_hx_tmp46 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 318)					_hx_tmp46 = true;
            				}
HXDLIN( 318)				if (!(_hx_tmp46)) {
HXLINE( 318)					int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)					_hx_tmp45 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 318)					_hx_tmp45 = true;
            				}
HXDLIN( 318)				if (!(_hx_tmp45)) {
HXLINE( 318)					_hx_tmp44 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 318)					_hx_tmp44 = true;
            				}
HXDLIN( 318)				if (_hx_tmp44) {
HXLINE( 318)					 ::vision::ds::ImageView v2 = null();
HXDLIN( 318)					bool _hx_tmp48;
HXDLIN( 318)					bool _hx_tmp49;
HXDLIN( 318)					bool _hx_tmp50;
HXDLIN( 318)					bool _hx_tmp51;
HXDLIN( 318)					bool _hx_tmp52;
HXDLIN( 318)					bool _hx_tmp53;
HXDLIN( 318)					int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 318)					if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 318)						int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)						_hx_tmp53 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 318)						_hx_tmp53 = true;
            					}
HXDLIN( 318)					if (!(_hx_tmp53)) {
HXLINE( 318)						int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 318)						_hx_tmp52 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 318)						_hx_tmp52 = true;
            					}
HXDLIN( 318)					if (!(_hx_tmp52)) {
HXLINE( 318)						int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)						_hx_tmp51 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 318)						_hx_tmp51 = true;
            					}
HXDLIN( 318)					if (!(_hx_tmp51)) {
HXLINE( 318)						_hx_tmp50 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 318)						_hx_tmp50 = true;
            					}
HXDLIN( 318)					if (!(_hx_tmp50)) {
HXLINE( 318)						_hx_tmp49 = ::hx::IsNull( v2 );
            					}
            					else {
HXLINE( 318)						_hx_tmp49 = false;
            					}
HXDLIN( 318)					if (_hx_tmp49) {
HXLINE( 318)						bool _hx_tmp54;
HXDLIN( 318)						bool _hx_tmp55;
HXDLIN( 318)						if ((x15 >= 0)) {
HXLINE( 318)							_hx_tmp55 = (y15 >= 0);
            						}
            						else {
HXLINE( 318)							_hx_tmp55 = false;
            						}
HXDLIN( 318)						if (_hx_tmp55) {
HXLINE( 318)							_hx_tmp54 = (x15 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 318)							_hx_tmp54 = false;
            						}
HXDLIN( 318)						if (_hx_tmp54) {
HXLINE( 318)							_hx_tmp48 = (y15 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 318)							_hx_tmp48 = false;
            						}
            					}
            					else {
HXLINE( 318)						bool has16 = false;
HXDLIN( 318)						 ::vision::ds::ImageView view2;
HXDLIN( 318)						if (::hx::IsNotNull( v2 )) {
HXLINE( 318)							view2 = v2;
            						}
            						else {
HXLINE( 318)							int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 318)							int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)							int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 318)							int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 318)							view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 318)						switch((int)(view2->shape)){
            							case (int)0: {
HXLINE( 318)								bool has17;
HXDLIN( 318)								bool has18;
HXDLIN( 318)								if ((x15 < (view2->x + view2->width))) {
HXLINE( 318)									has18 = (y15 < (view2->y + view2->height));
            								}
            								else {
HXLINE( 318)									has18 = false;
            								}
HXDLIN( 318)								if (has18) {
HXLINE( 318)									has17 = (x15 >= view2->x);
            								}
            								else {
HXLINE( 318)									has17 = false;
            								}
HXDLIN( 318)								if (has17) {
HXLINE( 318)									has16 = (y15 >= view2->y);
            								}
            								else {
HXLINE( 318)									has16 = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 318)								bool has19;
HXDLIN( 318)								bool has20;
HXDLIN( 318)								bool has21;
HXDLIN( 318)								if ((x15 < (view2->x + view2->width))) {
HXLINE( 318)									has21 = (y15 < (view2->y + view2->height));
            								}
            								else {
HXLINE( 318)									has21 = false;
            								}
HXDLIN( 318)								if (has21) {
HXLINE( 318)									has20 = (x15 >= view2->x);
            								}
            								else {
HXLINE( 318)									has20 = false;
            								}
HXDLIN( 318)								if (has20) {
HXLINE( 318)									has19 = (y15 >= view2->y);
            								}
            								else {
HXLINE( 318)									has19 = false;
            								}
HXLINE(1400)								has16 = !(has19);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 318)								if ((view2->width > view2->height)) {
HXLINE( 318)									Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 318)									Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 318)									Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN( 318)									Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 318)									Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 318)									Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 318)									Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 318)									::cpp::Int64 p4 = _hx_int64_make(x15,y15);
HXDLIN( 318)									Float x16 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 318)									Float y16 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 318)									Float has22 = ::Math_obj::sqrt(((x16 * x16) + (y16 * y16)));
HXDLIN( 318)									Float x17 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 318)									Float y17 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)									has16 = ((has22 + ::Math_obj::sqrt(((x17 * x17) + (y17 * y17)))) <= view2->width);
HXLINE( 318)									if ((view2->shape == 3)) {
HXLINE(1416)										has16 = !(has16);
            									}
            								}
            								else {
HXLINE( 318)									if ((view2->height > view2->width)) {
HXLINE( 318)										Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 318)										Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 318)										Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN( 318)										Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 318)										Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 318)										Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 318)										Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 318)										::cpp::Int64 p5 = _hx_int64_make(x15,y15);
HXDLIN( 318)										Float x18 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 318)										Float y18 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 318)										Float has23 = ::Math_obj::sqrt(((x18 * x18) + (y18 * y18)));
HXDLIN( 318)										Float x19 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 318)										Float y19 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)										has16 = ((has23 + ::Math_obj::sqrt(((x19 * x19) + (y19 * y19)))) <= view2->height);
HXLINE( 318)										if ((view2->shape == 3)) {
HXLINE(1425)											has16 = !(has16);
            										}
            									}
            									else {
HXLINE( 318)										Float point1_x2 = ( (Float)(x15) );
HXDLIN( 318)										Float point1_y2 = ( (Float)(y15) );
HXDLIN( 318)										Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 318)										Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 318)										Float x20 = (point2_x2 - point1_x2);
HXDLIN( 318)										Float y20 = (point2_y2 - point1_y2);
HXLINE(1428)										has16 = (::Math_obj::sqrt(((x20 * x20) + (y20 * y20))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 318)										if ((view2->shape == 3)) {
HXLINE(1429)											has16 = !(has16);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has16 = (((::Math_obj::abs((( (Float)((x15 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y15 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has16 = !((((::Math_obj::abs((( (Float)((x15 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y15 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 318)						_hx_tmp48 = has16;
            					}
HXDLIN( 318)					if (_hx_tmp48) {
HXLINE( 318)						int position4 = (((y15 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x15) * 4);
HXDLIN( 318)						position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 318)						this1->b[position4] = ( (unsigned char)(((color18 >> 24) & 255)) );
HXDLIN( 318)						this1->b[(position4 + 1)] = ( (unsigned char)(((color18 >> 16) & 255)) );
HXDLIN( 318)						this1->b[(position4 + 2)] = ( (unsigned char)(((color18 >> 8) & 255)) );
HXDLIN( 318)						this1->b[(position4 + 3)] = ( (unsigned char)((color18 & 255)) );
            					}
            				}
            				else {
HXLINE( 318)					int position5 = (((y15 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x15) * 4);
HXDLIN( 318)					position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 318)					this1->b[position5] = ( (unsigned char)(((color18 >> 24) & 255)) );
HXDLIN( 318)					this1->b[(position5 + 1)] = ( (unsigned char)(((color18 >> 16) & 255)) );
HXDLIN( 318)					this1->b[(position5 + 2)] = ( (unsigned char)(((color18 >> 8) & 255)) );
HXDLIN( 318)					this1->b[(position5 + 3)] = ( (unsigned char)((color18 & 255)) );
            				}
            			}
            		}
HXLINE( 319)		bool _hx_tmp56;
HXDLIN( 319)		if ((x != ::Std_obj::_hx_int(x))) {
HXLINE( 319)			_hx_tmp56 = (y != ::Std_obj::_hx_int(y));
            		}
            		else {
HXLINE( 319)			_hx_tmp56 = false;
            		}
HXDLIN( 319)		if (_hx_tmp56) {
HXLINE( 319)			int x21 = ::Math_obj::ceil(x);
HXDLIN( 319)			int y21 = ::Math_obj::ceil(y);
HXDLIN( 319)			Float Red3 = (((xFraction + yFraction) / ( (Float)(2) )) * (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 319)			Float Green3 = (((xFraction + yFraction) / ( (Float)(2) )) * (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 319)			Float Blue3 = (((xFraction + yFraction) / ( (Float)(2) )) * (( (Float)((color & 255)) ) / ( (Float)(255) )));
HXDLIN( 319)			Float Alpha3 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 319)			int color19 = 0;
HXDLIN( 319)			{
HXLINE( 319)				int value12 = ::Math_obj::round((Red3 * ( (Float)(255) )));
HXDLIN( 319)				color19 = (color19 & -16711681);
HXDLIN( 319)				int color20;
HXDLIN( 319)				if ((value12 > 255)) {
HXLINE( 319)					color20 = 255;
            				}
            				else {
HXLINE( 319)					if ((value12 < 0)) {
HXLINE( 319)						color20 = 0;
            					}
            					else {
HXLINE( 319)						color20 = value12;
            					}
            				}
HXDLIN( 319)				color19 = (color19 | (color20 << 16));
            			}
HXDLIN( 319)			{
HXLINE( 319)				int value13 = ::Math_obj::round((Green3 * ( (Float)(255) )));
HXDLIN( 319)				color19 = (color19 & -65281);
HXDLIN( 319)				int color21;
HXDLIN( 319)				if ((value13 > 255)) {
HXLINE( 319)					color21 = 255;
            				}
            				else {
HXLINE( 319)					if ((value13 < 0)) {
HXLINE( 319)						color21 = 0;
            					}
            					else {
HXLINE( 319)						color21 = value13;
            					}
            				}
HXDLIN( 319)				color19 = (color19 | (color21 << 8));
            			}
HXDLIN( 319)			{
HXLINE( 319)				int value14 = ::Math_obj::round((Blue3 * ( (Float)(255) )));
HXDLIN( 319)				color19 = (color19 & -256);
HXDLIN( 319)				int color22;
HXDLIN( 319)				if ((value14 > 255)) {
HXLINE( 319)					color22 = 255;
            				}
            				else {
HXLINE( 319)					if ((value14 < 0)) {
HXLINE( 319)						color22 = 0;
            					}
            					else {
HXLINE( 319)						color22 = value14;
            					}
            				}
HXDLIN( 319)				color19 = (color19 | color22);
            			}
HXDLIN( 319)			{
HXLINE( 319)				int value15 = ::Math_obj::round((Alpha3 * ( (Float)(255) )));
HXDLIN( 319)				color19 = (color19 & 16777215);
HXDLIN( 319)				int color23;
HXDLIN( 319)				if ((value15 > 255)) {
HXLINE( 319)					color23 = 255;
            				}
            				else {
HXLINE( 319)					if ((value15 < 0)) {
HXLINE( 319)						color23 = 0;
            					}
            					else {
HXLINE( 319)						color23 = value15;
            					}
            				}
HXDLIN( 319)				color19 = (color19 | (color23 << 24));
            			}
HXDLIN( 319)			int color24 = color19;
HXDLIN( 319)			bool _hx_tmp57;
HXDLIN( 319)			bool _hx_tmp58;
HXDLIN( 319)			bool _hx_tmp59;
HXDLIN( 319)			if ((x21 >= 0)) {
HXLINE( 319)				_hx_tmp59 = (y21 >= 0);
            			}
            			else {
HXLINE( 319)				_hx_tmp59 = false;
            			}
HXDLIN( 319)			if (_hx_tmp59) {
HXLINE( 319)				_hx_tmp58 = (x21 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 319)				_hx_tmp58 = false;
            			}
HXDLIN( 319)			if (_hx_tmp58) {
HXLINE( 319)				_hx_tmp57 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 319)				_hx_tmp57 = false;
            			}
HXDLIN( 319)			if (!(_hx_tmp57)) {
HXLINE( 319)				::cpp::Int64 this5 = _hx_int64_make(x21,y21);
HXDLIN( 319)				int _hx_tmp60 = _hx_int64_high(this5);
HXDLIN( 319)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp60,_hx_int64_low(this5))));
            			}
            			else {
HXLINE( 319)				bool _hx_tmp61;
HXDLIN( 319)				bool _hx_tmp62;
HXDLIN( 319)				bool _hx_tmp63;
HXDLIN( 319)				bool _hx_tmp64;
HXDLIN( 319)				int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 319)				if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE( 319)					int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)					_hx_tmp64 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 319)					_hx_tmp64 = true;
            				}
HXDLIN( 319)				if (!(_hx_tmp64)) {
HXLINE( 319)					int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 319)					_hx_tmp63 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 319)					_hx_tmp63 = true;
            				}
HXDLIN( 319)				if (!(_hx_tmp63)) {
HXLINE( 319)					int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)					_hx_tmp62 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 319)					_hx_tmp62 = true;
            				}
HXDLIN( 319)				if (!(_hx_tmp62)) {
HXLINE( 319)					_hx_tmp61 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 319)					_hx_tmp61 = true;
            				}
HXDLIN( 319)				if (_hx_tmp61) {
HXLINE( 319)					 ::vision::ds::ImageView v3 = null();
HXDLIN( 319)					bool _hx_tmp65;
HXDLIN( 319)					bool _hx_tmp66;
HXDLIN( 319)					bool _hx_tmp67;
HXDLIN( 319)					bool _hx_tmp68;
HXDLIN( 319)					bool _hx_tmp69;
HXDLIN( 319)					bool _hx_tmp70;
HXDLIN( 319)					int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 319)					if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE( 319)						int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)						_hx_tmp70 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 319)						_hx_tmp70 = true;
            					}
HXDLIN( 319)					if (!(_hx_tmp70)) {
HXLINE( 319)						int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 319)						_hx_tmp69 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 319)						_hx_tmp69 = true;
            					}
HXDLIN( 319)					if (!(_hx_tmp69)) {
HXLINE( 319)						int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)						_hx_tmp68 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 319)						_hx_tmp68 = true;
            					}
HXDLIN( 319)					if (!(_hx_tmp68)) {
HXLINE( 319)						_hx_tmp67 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 319)						_hx_tmp67 = true;
            					}
HXDLIN( 319)					if (!(_hx_tmp67)) {
HXLINE( 319)						_hx_tmp66 = ::hx::IsNull( v3 );
            					}
            					else {
HXLINE( 319)						_hx_tmp66 = false;
            					}
HXDLIN( 319)					if (_hx_tmp66) {
HXLINE( 319)						bool _hx_tmp71;
HXDLIN( 319)						bool _hx_tmp72;
HXDLIN( 319)						if ((x21 >= 0)) {
HXLINE( 319)							_hx_tmp72 = (y21 >= 0);
            						}
            						else {
HXLINE( 319)							_hx_tmp72 = false;
            						}
HXDLIN( 319)						if (_hx_tmp72) {
HXLINE( 319)							_hx_tmp71 = (x21 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 319)							_hx_tmp71 = false;
            						}
HXDLIN( 319)						if (_hx_tmp71) {
HXLINE( 319)							_hx_tmp65 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 319)							_hx_tmp65 = false;
            						}
            					}
            					else {
HXLINE( 319)						bool has24 = false;
HXDLIN( 319)						 ::vision::ds::ImageView view3;
HXDLIN( 319)						if (::hx::IsNotNull( v3 )) {
HXLINE( 319)							view3 = v3;
            						}
            						else {
HXLINE( 319)							int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 319)							int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)							int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 319)							int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 319)							view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 319)						switch((int)(view3->shape)){
            							case (int)0: {
HXLINE( 319)								bool has25;
HXDLIN( 319)								bool has26;
HXDLIN( 319)								if ((x21 < (view3->x + view3->width))) {
HXLINE( 319)									has26 = (y21 < (view3->y + view3->height));
            								}
            								else {
HXLINE( 319)									has26 = false;
            								}
HXDLIN( 319)								if (has26) {
HXLINE( 319)									has25 = (x21 >= view3->x);
            								}
            								else {
HXLINE( 319)									has25 = false;
            								}
HXDLIN( 319)								if (has25) {
HXLINE( 319)									has24 = (y21 >= view3->y);
            								}
            								else {
HXLINE( 319)									has24 = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 319)								bool has27;
HXDLIN( 319)								bool has28;
HXDLIN( 319)								bool has29;
HXDLIN( 319)								if ((x21 < (view3->x + view3->width))) {
HXLINE( 319)									has29 = (y21 < (view3->y + view3->height));
            								}
            								else {
HXLINE( 319)									has29 = false;
            								}
HXDLIN( 319)								if (has29) {
HXLINE( 319)									has28 = (x21 >= view3->x);
            								}
            								else {
HXLINE( 319)									has28 = false;
            								}
HXDLIN( 319)								if (has28) {
HXLINE( 319)									has27 = (y21 >= view3->y);
            								}
            								else {
HXLINE( 319)									has27 = false;
            								}
HXLINE(1400)								has24 = !(has27);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 319)								if ((view3->width > view3->height)) {
HXLINE( 319)									Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 319)									Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 319)									Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN( 319)									Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN( 319)									Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 319)									Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN( 319)									Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 319)									::cpp::Int64 p6 = _hx_int64_make(x21,y21);
HXDLIN( 319)									Float x22 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN( 319)									Float y22 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN( 319)									Float has30 = ::Math_obj::sqrt(((x22 * x22) + (y22 * y22)));
HXDLIN( 319)									Float x23 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN( 319)									Float y23 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)									has24 = ((has30 + ::Math_obj::sqrt(((x23 * x23) + (y23 * y23)))) <= view3->width);
HXLINE( 319)									if ((view3->shape == 3)) {
HXLINE(1416)										has24 = !(has24);
            									}
            								}
            								else {
HXLINE( 319)									if ((view3->height > view3->width)) {
HXLINE( 319)										Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 319)										Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 319)										Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN( 319)										Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 319)										Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN( 319)										Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 319)										Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN( 319)										::cpp::Int64 p7 = _hx_int64_make(x21,y21);
HXDLIN( 319)										Float x24 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN( 319)										Float y24 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN( 319)										Float has31 = ::Math_obj::sqrt(((x24 * x24) + (y24 * y24)));
HXDLIN( 319)										Float x25 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN( 319)										Float y25 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)										has24 = ((has31 + ::Math_obj::sqrt(((x25 * x25) + (y25 * y25)))) <= view3->height);
HXLINE( 319)										if ((view3->shape == 3)) {
HXLINE(1425)											has24 = !(has24);
            										}
            									}
            									else {
HXLINE( 319)										Float point1_x3 = ( (Float)(x21) );
HXDLIN( 319)										Float point1_y3 = ( (Float)(y21) );
HXDLIN( 319)										Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 319)										Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 319)										Float x26 = (point2_x3 - point1_x3);
HXDLIN( 319)										Float y26 = (point2_y3 - point1_y3);
HXLINE(1428)										has24 = (::Math_obj::sqrt(((x26 * x26) + (y26 * y26))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE( 319)										if ((view3->shape == 3)) {
HXLINE(1429)											has24 = !(has24);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has24 = (((::Math_obj::abs((( (Float)((x21 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y21 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has24 = !((((::Math_obj::abs((( (Float)((x21 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y21 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 319)						_hx_tmp65 = has24;
            					}
HXDLIN( 319)					if (_hx_tmp65) {
HXLINE( 319)						int position6 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x21) * 4);
HXDLIN( 319)						position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 319)						this1->b[position6] = ( (unsigned char)(((color24 >> 24) & 255)) );
HXDLIN( 319)						this1->b[(position6 + 1)] = ( (unsigned char)(((color24 >> 16) & 255)) );
HXDLIN( 319)						this1->b[(position6 + 2)] = ( (unsigned char)(((color24 >> 8) & 255)) );
HXDLIN( 319)						this1->b[(position6 + 3)] = ( (unsigned char)((color24 & 255)) );
            					}
            				}
            				else {
HXLINE( 319)					int position7 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x21) * 4);
HXDLIN( 319)					position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 319)					this1->b[position7] = ( (unsigned char)(((color24 >> 24) & 255)) );
HXDLIN( 319)					this1->b[(position7 + 1)] = ( (unsigned char)(((color24 >> 16) & 255)) );
HXDLIN( 319)					this1->b[(position7 + 2)] = ( (unsigned char)(((color24 >> 8) & 255)) );
HXDLIN( 319)					this1->b[(position7 + 3)] = ( (unsigned char)((color24 & 255)) );
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,setFloatingPixel,(void))

void Image_Impl__obj::setUnsafePixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_324_setUnsafePixel)
HXDLIN( 324)		int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 324)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 324)		this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 324)		this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 324)		this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 324)		this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,setUnsafePixel,(void))

void Image_Impl__obj::paintPixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_349_paintPixel)
HXDLIN( 349)		bool _hx_tmp;
HXDLIN( 349)		bool _hx_tmp1;
HXDLIN( 349)		bool _hx_tmp2;
HXDLIN( 349)		if ((x >= 0)) {
HXDLIN( 349)			_hx_tmp2 = (x >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 349)			_hx_tmp2 = true;
            		}
HXDLIN( 349)		if (!(_hx_tmp2)) {
HXDLIN( 349)			_hx_tmp1 = (y < 0);
            		}
            		else {
HXDLIN( 349)			_hx_tmp1 = true;
            		}
HXDLIN( 349)		if (!(_hx_tmp1)) {
HXDLIN( 349)			_hx_tmp = (y >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 349)			_hx_tmp = true;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 351)			::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN( 351)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 351)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
            		else {
HXLINE( 353)			if (((( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )) == 1)) {
HXLINE( 354)				bool _hx_tmp4;
HXDLIN( 354)				bool _hx_tmp5;
HXDLIN( 354)				bool _hx_tmp6;
HXDLIN( 354)				if ((x >= 0)) {
HXLINE( 354)					_hx_tmp6 = (y >= 0);
            				}
            				else {
HXLINE( 354)					_hx_tmp6 = false;
            				}
HXDLIN( 354)				if (_hx_tmp6) {
HXLINE( 354)					_hx_tmp5 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 354)					_hx_tmp5 = false;
            				}
HXDLIN( 354)				if (_hx_tmp5) {
HXLINE( 354)					_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 354)					_hx_tmp4 = false;
            				}
HXDLIN( 354)				if (!(_hx_tmp4)) {
HXLINE( 354)					::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 354)					int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 354)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            				}
            				else {
HXLINE( 354)					bool _hx_tmp8;
HXDLIN( 354)					bool _hx_tmp9;
HXDLIN( 354)					bool _hx_tmp10;
HXDLIN( 354)					bool _hx_tmp11;
HXDLIN( 354)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 354)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 354)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)						_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 354)						_hx_tmp11 = true;
            					}
HXDLIN( 354)					if (!(_hx_tmp11)) {
HXLINE( 354)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 354)						_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 354)						_hx_tmp10 = true;
            					}
HXDLIN( 354)					if (!(_hx_tmp10)) {
HXLINE( 354)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)						_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 354)						_hx_tmp9 = true;
            					}
HXDLIN( 354)					if (!(_hx_tmp9)) {
HXLINE( 354)						_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 354)						_hx_tmp8 = true;
            					}
HXDLIN( 354)					if (_hx_tmp8) {
HXLINE( 354)						 ::vision::ds::ImageView v = null();
HXDLIN( 354)						bool _hx_tmp12;
HXDLIN( 354)						bool _hx_tmp13;
HXDLIN( 354)						bool _hx_tmp14;
HXDLIN( 354)						bool _hx_tmp15;
HXDLIN( 354)						bool _hx_tmp16;
HXDLIN( 354)						bool _hx_tmp17;
HXDLIN( 354)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 354)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 354)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)							_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp17 = true;
            						}
HXDLIN( 354)						if (!(_hx_tmp17)) {
HXLINE( 354)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 354)							_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp16 = true;
            						}
HXDLIN( 354)						if (!(_hx_tmp16)) {
HXLINE( 354)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)							_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp15 = true;
            						}
HXDLIN( 354)						if (!(_hx_tmp15)) {
HXLINE( 354)							_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp14 = true;
            						}
HXDLIN( 354)						if (!(_hx_tmp14)) {
HXLINE( 354)							_hx_tmp13 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 354)							_hx_tmp13 = false;
            						}
HXDLIN( 354)						if (_hx_tmp13) {
HXLINE( 354)							bool _hx_tmp18;
HXDLIN( 354)							bool _hx_tmp19;
HXDLIN( 354)							if ((x >= 0)) {
HXLINE( 354)								_hx_tmp19 = (y >= 0);
            							}
            							else {
HXLINE( 354)								_hx_tmp19 = false;
            							}
HXDLIN( 354)							if (_hx_tmp19) {
HXLINE( 354)								_hx_tmp18 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 354)								_hx_tmp18 = false;
            							}
HXDLIN( 354)							if (_hx_tmp18) {
HXLINE( 354)								_hx_tmp12 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 354)								_hx_tmp12 = false;
            							}
            						}
            						else {
HXLINE( 354)							bool has = false;
HXDLIN( 354)							 ::vision::ds::ImageView view;
HXDLIN( 354)							if (::hx::IsNotNull( v )) {
HXLINE( 354)								view = v;
            							}
            							else {
HXLINE( 354)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 354)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 354)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 354)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 354)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 354)									bool has1;
HXDLIN( 354)									bool has2;
HXDLIN( 354)									if ((x < (view->x + view->width))) {
HXLINE( 354)										has2 = (y < (view->y + view->height));
            									}
            									else {
HXLINE( 354)										has2 = false;
            									}
HXDLIN( 354)									if (has2) {
HXLINE( 354)										has1 = (x >= view->x);
            									}
            									else {
HXLINE( 354)										has1 = false;
            									}
HXDLIN( 354)									if (has1) {
HXLINE( 354)										has = (y >= view->y);
            									}
            									else {
HXLINE( 354)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 354)									bool has3;
HXDLIN( 354)									bool has4;
HXDLIN( 354)									bool has5;
HXDLIN( 354)									if ((x < (view->x + view->width))) {
HXLINE( 354)										has5 = (y < (view->y + view->height));
            									}
            									else {
HXLINE( 354)										has5 = false;
            									}
HXDLIN( 354)									if (has5) {
HXLINE( 354)										has4 = (x >= view->x);
            									}
            									else {
HXLINE( 354)										has4 = false;
            									}
HXDLIN( 354)									if (has4) {
HXLINE( 354)										has3 = (y >= view->y);
            									}
            									else {
HXLINE( 354)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 354)									if ((view->width > view->height)) {
HXLINE( 354)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 354)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 354)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 354)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 354)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 354)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 354)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 354)										::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 354)										Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 354)										Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 354)										Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 354)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 354)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 354)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 354)										if ((view->height > view->width)) {
HXLINE( 354)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 354)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 354)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 354)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 354)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 354)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 354)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 354)											::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 354)											Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 354)											Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 354)											Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 354)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 354)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 354)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 354)											Float point1_x = ( (Float)(x) );
HXDLIN( 354)											Float point1_y = ( (Float)(y) );
HXDLIN( 354)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 354)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 354)											Float x5 = (point2_x - point1_x);
HXDLIN( 354)											Float y5 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 354)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 354)							_hx_tmp12 = has;
            						}
HXDLIN( 354)						if (_hx_tmp12) {
HXLINE( 354)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 354)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 354)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 354)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 354)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 354)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 354)						int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 354)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 354)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 354)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 354)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 354)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
            			else {
HXLINE( 356)				bool _hx_tmp20;
HXDLIN( 356)				bool _hx_tmp21;
HXDLIN( 356)				bool _hx_tmp22;
HXDLIN( 356)				if ((x >= 0)) {
HXLINE( 356)					_hx_tmp22 = (y >= 0);
            				}
            				else {
HXLINE( 356)					_hx_tmp22 = false;
            				}
HXDLIN( 356)				if (_hx_tmp22) {
HXLINE( 356)					_hx_tmp21 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 356)					_hx_tmp21 = false;
            				}
HXDLIN( 356)				if (_hx_tmp21) {
HXLINE( 356)					_hx_tmp20 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 356)					_hx_tmp20 = false;
            				}
HXDLIN( 356)				if (!(_hx_tmp20)) {
HXLINE( 356)					::cpp::Int64 this4 = _hx_int64_make(x,y);
HXDLIN( 356)					int _hx_tmp23 = _hx_int64_high(this4);
HXDLIN( 356)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp23,_hx_int64_low(this4))));
            				}
HXDLIN( 356)				int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 356)				position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 356)				int oldColor = ((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) ));
HXLINE( 357)				Float Red = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 357)				Float Green = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 357)				Float Blue = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 357)				Float Alpha = ((( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN( 357)				int color1 = 0;
HXDLIN( 357)				{
HXLINE( 357)					int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 357)					color1 = (color1 & -16711681);
HXDLIN( 357)					int color2;
HXDLIN( 357)					if ((value > 255)) {
HXLINE( 357)						color2 = 255;
            					}
            					else {
HXLINE( 357)						if ((value < 0)) {
HXLINE( 357)							color2 = 0;
            						}
            						else {
HXLINE( 357)							color2 = value;
            						}
            					}
HXDLIN( 357)					color1 = (color1 | (color2 << 16));
            				}
HXDLIN( 357)				{
HXLINE( 357)					int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 357)					color1 = (color1 & -65281);
HXDLIN( 357)					int color3;
HXDLIN( 357)					if ((value1 > 255)) {
HXLINE( 357)						color3 = 255;
            					}
            					else {
HXLINE( 357)						if ((value1 < 0)) {
HXLINE( 357)							color3 = 0;
            						}
            						else {
HXLINE( 357)							color3 = value1;
            						}
            					}
HXDLIN( 357)					color1 = (color1 | (color3 << 8));
            				}
HXDLIN( 357)				{
HXLINE( 357)					int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 357)					color1 = (color1 & -256);
HXDLIN( 357)					int color4;
HXDLIN( 357)					if ((value2 > 255)) {
HXLINE( 357)						color4 = 255;
            					}
            					else {
HXLINE( 357)						if ((value2 < 0)) {
HXLINE( 357)							color4 = 0;
            						}
            						else {
HXLINE( 357)							color4 = value2;
            						}
            					}
HXDLIN( 357)					color1 = (color1 | color4);
            				}
HXDLIN( 357)				{
HXLINE( 357)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 357)					color1 = (color1 & 16777215);
HXDLIN( 357)					int color5;
HXDLIN( 357)					if ((value3 > 255)) {
HXLINE( 357)						color5 = 255;
            					}
            					else {
HXLINE( 357)						if ((value3 < 0)) {
HXLINE( 357)							color5 = 0;
            						}
            						else {
HXLINE( 357)							color5 = value3;
            						}
            					}
HXDLIN( 357)					color1 = (color1 | (color5 << 24));
            				}
HXDLIN( 357)				int newColor = color1;
HXLINE( 363)				bool _hx_tmp24;
HXDLIN( 363)				bool _hx_tmp25;
HXDLIN( 363)				bool _hx_tmp26;
HXDLIN( 363)				if ((x >= 0)) {
HXLINE( 363)					_hx_tmp26 = (y >= 0);
            				}
            				else {
HXLINE( 363)					_hx_tmp26 = false;
            				}
HXDLIN( 363)				if (_hx_tmp26) {
HXLINE( 363)					_hx_tmp25 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 363)					_hx_tmp25 = false;
            				}
HXDLIN( 363)				if (_hx_tmp25) {
HXLINE( 363)					_hx_tmp24 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 363)					_hx_tmp24 = false;
            				}
HXDLIN( 363)				if (!(_hx_tmp24)) {
HXLINE( 363)					::cpp::Int64 this5 = _hx_int64_make(x,y);
HXDLIN( 363)					int _hx_tmp27 = _hx_int64_high(this5);
HXDLIN( 363)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp27,_hx_int64_low(this5))));
            				}
            				else {
HXLINE( 363)					bool _hx_tmp28;
HXDLIN( 363)					bool _hx_tmp29;
HXDLIN( 363)					bool _hx_tmp30;
HXDLIN( 363)					bool _hx_tmp31;
HXDLIN( 363)					int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 363)					if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 363)						int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)						_hx_tmp31 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 363)						_hx_tmp31 = true;
            					}
HXDLIN( 363)					if (!(_hx_tmp31)) {
HXLINE( 363)						int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 363)						_hx_tmp30 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 363)						_hx_tmp30 = true;
            					}
HXDLIN( 363)					if (!(_hx_tmp30)) {
HXLINE( 363)						int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)						_hx_tmp29 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 363)						_hx_tmp29 = true;
            					}
HXDLIN( 363)					if (!(_hx_tmp29)) {
HXLINE( 363)						_hx_tmp28 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 363)						_hx_tmp28 = true;
            					}
HXDLIN( 363)					if (_hx_tmp28) {
HXLINE( 363)						 ::vision::ds::ImageView v1 = null();
HXDLIN( 363)						bool _hx_tmp32;
HXDLIN( 363)						bool _hx_tmp33;
HXDLIN( 363)						bool _hx_tmp34;
HXDLIN( 363)						bool _hx_tmp35;
HXDLIN( 363)						bool _hx_tmp36;
HXDLIN( 363)						bool _hx_tmp37;
HXDLIN( 363)						int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 363)						if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 363)							int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)							_hx_tmp37 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 363)							_hx_tmp37 = true;
            						}
HXDLIN( 363)						if (!(_hx_tmp37)) {
HXLINE( 363)							int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 363)							_hx_tmp36 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 363)							_hx_tmp36 = true;
            						}
HXDLIN( 363)						if (!(_hx_tmp36)) {
HXLINE( 363)							int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)							_hx_tmp35 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 363)							_hx_tmp35 = true;
            						}
HXDLIN( 363)						if (!(_hx_tmp35)) {
HXLINE( 363)							_hx_tmp34 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 363)							_hx_tmp34 = true;
            						}
HXDLIN( 363)						if (!(_hx_tmp34)) {
HXLINE( 363)							_hx_tmp33 = ::hx::IsNull( v1 );
            						}
            						else {
HXLINE( 363)							_hx_tmp33 = false;
            						}
HXDLIN( 363)						if (_hx_tmp33) {
HXLINE( 363)							bool _hx_tmp38;
HXDLIN( 363)							bool _hx_tmp39;
HXDLIN( 363)							if ((x >= 0)) {
HXLINE( 363)								_hx_tmp39 = (y >= 0);
            							}
            							else {
HXLINE( 363)								_hx_tmp39 = false;
            							}
HXDLIN( 363)							if (_hx_tmp39) {
HXLINE( 363)								_hx_tmp38 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 363)								_hx_tmp38 = false;
            							}
HXDLIN( 363)							if (_hx_tmp38) {
HXLINE( 363)								_hx_tmp32 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 363)								_hx_tmp32 = false;
            							}
            						}
            						else {
HXLINE( 363)							bool has8 = false;
HXDLIN( 363)							 ::vision::ds::ImageView view1;
HXDLIN( 363)							if (::hx::IsNotNull( v1 )) {
HXLINE( 363)								view1 = v1;
            							}
            							else {
HXLINE( 363)								int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 363)								int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)								int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 363)								int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 363)								view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 363)							switch((int)(view1->shape)){
            								case (int)0: {
HXLINE( 363)									bool has9;
HXDLIN( 363)									bool has10;
HXDLIN( 363)									if ((x < (view1->x + view1->width))) {
HXLINE( 363)										has10 = (y < (view1->y + view1->height));
            									}
            									else {
HXLINE( 363)										has10 = false;
            									}
HXDLIN( 363)									if (has10) {
HXLINE( 363)										has9 = (x >= view1->x);
            									}
            									else {
HXLINE( 363)										has9 = false;
            									}
HXDLIN( 363)									if (has9) {
HXLINE( 363)										has8 = (y >= view1->y);
            									}
            									else {
HXLINE( 363)										has8 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 363)									bool has11;
HXDLIN( 363)									bool has12;
HXDLIN( 363)									bool has13;
HXDLIN( 363)									if ((x < (view1->x + view1->width))) {
HXLINE( 363)										has13 = (y < (view1->y + view1->height));
            									}
            									else {
HXLINE( 363)										has13 = false;
            									}
HXDLIN( 363)									if (has13) {
HXLINE( 363)										has12 = (x >= view1->x);
            									}
            									else {
HXLINE( 363)										has12 = false;
            									}
HXDLIN( 363)									if (has12) {
HXLINE( 363)										has11 = (y >= view1->y);
            									}
            									else {
HXLINE( 363)										has11 = false;
            									}
HXLINE(1400)									has8 = !(has11);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 363)									if ((view1->width > view1->height)) {
HXLINE( 363)										Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 363)										Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 363)										Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 363)										Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 363)										Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 363)										Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 363)										Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 363)										::cpp::Int64 p2 = _hx_int64_make(x,y);
HXDLIN( 363)										Float x6 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 363)										Float y6 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 363)										Float has14 = ::Math_obj::sqrt(((x6 * x6) + (y6 * y6)));
HXDLIN( 363)										Float x7 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 363)										Float y7 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)										has8 = ((has14 + ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)))) <= view1->width);
HXLINE( 363)										if ((view1->shape == 3)) {
HXLINE(1416)											has8 = !(has8);
            										}
            									}
            									else {
HXLINE( 363)										if ((view1->height > view1->width)) {
HXLINE( 363)											Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 363)											Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 363)											Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 363)											Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 363)											Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 363)											Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 363)											Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 363)											::cpp::Int64 p3 = _hx_int64_make(x,y);
HXDLIN( 363)											Float x8 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 363)											Float y8 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 363)											Float has15 = ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)));
HXDLIN( 363)											Float x9 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 363)											Float y9 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)											has8 = ((has15 + ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)))) <= view1->height);
HXLINE( 363)											if ((view1->shape == 3)) {
HXLINE(1425)												has8 = !(has8);
            											}
            										}
            										else {
HXLINE( 363)											Float point1_x1 = ( (Float)(x) );
HXDLIN( 363)											Float point1_y1 = ( (Float)(y) );
HXDLIN( 363)											Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 363)											Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 363)											Float x10 = (point2_x1 - point1_x1);
HXDLIN( 363)											Float y10 = (point2_y1 - point1_y1);
HXLINE(1428)											has8 = (::Math_obj::sqrt(((x10 * x10) + (y10 * y10))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 363)											if ((view1->shape == 3)) {
HXLINE(1429)												has8 = !(has8);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has8 = (((::Math_obj::abs((( (Float)((x - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has8 = !((((::Math_obj::abs((( (Float)((x - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 363)							_hx_tmp32 = has8;
            						}
HXDLIN( 363)						if (_hx_tmp32) {
HXLINE( 363)							int position3 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 363)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 363)							this1->b[position3] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 363)							this1->b[(position3 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 363)							this1->b[(position3 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 363)							this1->b[(position3 + 3)] = ( (unsigned char)((newColor & 255)) );
            						}
            					}
            					else {
HXLINE( 363)						int position4 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 363)						position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 363)						this1->b[position4] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 363)						this1->b[(position4 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 363)						this1->b[(position4 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 363)						this1->b[(position4 + 3)] = ( (unsigned char)((newColor & 255)) );
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,paintPixel,(void))

void Image_Impl__obj::paintFloatingPixel( ::haxe::io::Bytes this1,Float x,Float y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_368_paintFloatingPixel)
HXDLIN( 368)		bool _hx_tmp;
HXDLIN( 368)		bool _hx_tmp1;
HXDLIN( 368)		bool _hx_tmp2;
HXDLIN( 368)		if (!((x < 0))) {
HXDLIN( 368)			_hx_tmp2 = (x >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 368)			_hx_tmp2 = true;
            		}
HXDLIN( 368)		if (!(_hx_tmp2)) {
HXDLIN( 368)			_hx_tmp1 = (y < 0);
            		}
            		else {
HXDLIN( 368)			_hx_tmp1 = true;
            		}
HXDLIN( 368)		if (!(_hx_tmp1)) {
HXDLIN( 368)			_hx_tmp = (y >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 368)			_hx_tmp = true;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 369)			Float _hx_tmp3 = ::vision::tools::MathTools_obj::boundFloat(x,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 369)			::vision::ds::_Image::Image_Impl__obj::paintFloatingPixel(this1,_hx_tmp3,::vision::tools::MathTools_obj::boundFloat(y,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) )),color);
            		}
            		else {
HXLINE( 370)			bool _hx_tmp4;
HXDLIN( 370)			if ((x == ::Std_obj::_hx_int(x))) {
HXLINE( 370)				_hx_tmp4 = (y == ::Std_obj::_hx_int(y));
            			}
            			else {
HXLINE( 370)				_hx_tmp4 = false;
            			}
HXDLIN( 370)			if (_hx_tmp4) {
HXLINE( 371)				int x1 = ::Math_obj::floor(x);
HXDLIN( 371)				int y1 = ::Math_obj::floor(y);
HXDLIN( 371)				bool _hx_tmp5;
HXDLIN( 371)				bool _hx_tmp6;
HXDLIN( 371)				bool _hx_tmp7;
HXDLIN( 371)				if ((x1 >= 0)) {
HXLINE( 371)					_hx_tmp7 = (x1 >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 371)					_hx_tmp7 = true;
            				}
HXDLIN( 371)				if (!(_hx_tmp7)) {
HXLINE( 371)					_hx_tmp6 = (y1 < 0);
            				}
            				else {
HXLINE( 371)					_hx_tmp6 = true;
            				}
HXDLIN( 371)				if (!(_hx_tmp6)) {
HXLINE( 371)					_hx_tmp5 = (y1 >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 371)					_hx_tmp5 = true;
            				}
HXDLIN( 371)				if (_hx_tmp5) {
HXLINE( 371)					::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 371)					int _hx_tmp8 = _hx_int64_high(this2);
HXDLIN( 371)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp8,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 371)					if (((( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )) == 1)) {
HXLINE( 371)						bool _hx_tmp9;
HXDLIN( 371)						bool _hx_tmp10;
HXDLIN( 371)						bool _hx_tmp11;
HXDLIN( 371)						if ((x1 >= 0)) {
HXLINE( 371)							_hx_tmp11 = (y1 >= 0);
            						}
            						else {
HXLINE( 371)							_hx_tmp11 = false;
            						}
HXDLIN( 371)						if (_hx_tmp11) {
HXLINE( 371)							_hx_tmp10 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 371)							_hx_tmp10 = false;
            						}
HXDLIN( 371)						if (_hx_tmp10) {
HXLINE( 371)							_hx_tmp9 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 371)							_hx_tmp9 = false;
            						}
HXDLIN( 371)						if (!(_hx_tmp9)) {
HXLINE( 371)							::cpp::Int64 this3 = _hx_int64_make(x1,y1);
HXDLIN( 371)							int _hx_tmp12 = _hx_int64_high(this3);
HXDLIN( 371)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp12,_hx_int64_low(this3))));
            						}
            						else {
HXLINE( 371)							bool _hx_tmp13;
HXDLIN( 371)							bool _hx_tmp14;
HXDLIN( 371)							bool _hx_tmp15;
HXDLIN( 371)							bool _hx_tmp16;
HXDLIN( 371)							int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)							if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 371)								int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)								_hx_tmp16 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp16 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp16)) {
HXLINE( 371)								int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)								_hx_tmp15 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp15 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp15)) {
HXLINE( 371)								int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)								_hx_tmp14 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp14 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp14)) {
HXLINE( 371)								_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp13 = true;
            							}
HXDLIN( 371)							if (_hx_tmp13) {
HXLINE( 371)								 ::vision::ds::ImageView v = null();
HXDLIN( 371)								bool _hx_tmp17;
HXDLIN( 371)								bool _hx_tmp18;
HXDLIN( 371)								bool _hx_tmp19;
HXDLIN( 371)								bool _hx_tmp20;
HXDLIN( 371)								bool _hx_tmp21;
HXDLIN( 371)								bool _hx_tmp22;
HXDLIN( 371)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)								if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 371)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)									_hx_tmp22 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp22 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp22)) {
HXLINE( 371)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)									_hx_tmp21 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp21 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp21)) {
HXLINE( 371)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)									_hx_tmp20 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp20 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp20)) {
HXLINE( 371)									_hx_tmp19 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp19 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp19)) {
HXLINE( 371)									_hx_tmp18 = ::hx::IsNull( v );
            								}
            								else {
HXLINE( 371)									_hx_tmp18 = false;
            								}
HXDLIN( 371)								if (_hx_tmp18) {
HXLINE( 371)									bool _hx_tmp23;
HXDLIN( 371)									bool _hx_tmp24;
HXDLIN( 371)									if ((x1 >= 0)) {
HXLINE( 371)										_hx_tmp24 = (y1 >= 0);
            									}
            									else {
HXLINE( 371)										_hx_tmp24 = false;
            									}
HXDLIN( 371)									if (_hx_tmp24) {
HXLINE( 371)										_hx_tmp23 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 371)										_hx_tmp23 = false;
            									}
HXDLIN( 371)									if (_hx_tmp23) {
HXLINE( 371)										_hx_tmp17 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 371)										_hx_tmp17 = false;
            									}
            								}
            								else {
HXLINE( 371)									bool has = false;
HXDLIN( 371)									 ::vision::ds::ImageView view;
HXDLIN( 371)									if (::hx::IsNotNull( v )) {
HXLINE( 371)										view = v;
            									}
            									else {
HXLINE( 371)										int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)										view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 371)									switch((int)(view->shape)){
            										case (int)0: {
HXLINE( 371)											bool has1;
HXDLIN( 371)											bool has2;
HXDLIN( 371)											if ((x1 < (view->x + view->width))) {
HXLINE( 371)												has2 = (y1 < (view->y + view->height));
            											}
            											else {
HXLINE( 371)												has2 = false;
            											}
HXDLIN( 371)											if (has2) {
HXLINE( 371)												has1 = (x1 >= view->x);
            											}
            											else {
HXLINE( 371)												has1 = false;
            											}
HXDLIN( 371)											if (has1) {
HXLINE( 371)												has = (y1 >= view->y);
            											}
            											else {
HXLINE( 371)												has = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 371)											bool has3;
HXDLIN( 371)											bool has4;
HXDLIN( 371)											bool has5;
HXDLIN( 371)											if ((x1 < (view->x + view->width))) {
HXLINE( 371)												has5 = (y1 < (view->y + view->height));
            											}
            											else {
HXLINE( 371)												has5 = false;
            											}
HXDLIN( 371)											if (has5) {
HXLINE( 371)												has4 = (x1 >= view->x);
            											}
            											else {
HXLINE( 371)												has4 = false;
            											}
HXDLIN( 371)											if (has4) {
HXLINE( 371)												has3 = (y1 >= view->y);
            											}
            											else {
HXLINE( 371)												has3 = false;
            											}
HXLINE(1400)											has = !(has3);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 371)											if ((view->width > view->height)) {
HXLINE( 371)												Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 371)												Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 371)												Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 371)												Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 371)												Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 371)												Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 371)												Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 371)												::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN( 371)												Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 371)												Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 371)												Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 371)												Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 371)												Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)												has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 371)												if ((view->shape == 3)) {
HXLINE(1416)													has = !(has);
            												}
            											}
            											else {
HXLINE( 371)												if ((view->height > view->width)) {
HXLINE( 371)													Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 371)													Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 371)													Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 371)													Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 371)													Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 371)													::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN( 371)													Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 371)													Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 371)													Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 371)													Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 371)													Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)													has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 371)													if ((view->shape == 3)) {
HXLINE(1425)														has = !(has);
            													}
            												}
            												else {
HXLINE( 371)													Float point1_x = ( (Float)(x1) );
HXDLIN( 371)													Float point1_y = ( (Float)(y1) );
HXDLIN( 371)													Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 371)													Float x6 = (point2_x - point1_x);
HXDLIN( 371)													Float y6 = (point2_y - point1_y);
HXLINE(1428)													has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 371)													if ((view->shape == 3)) {
HXLINE(1429)														has = !(has);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 371)									_hx_tmp17 = has;
            								}
HXDLIN( 371)								if (_hx_tmp17) {
HXLINE( 371)									int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 371)									position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 371)									this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 371)									this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 371)									this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 371)									this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            							else {
HXLINE( 371)								int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 371)								position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 371)								this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 371)								this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 371)								this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 371)								this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            					else {
HXLINE( 371)						bool _hx_tmp25;
HXDLIN( 371)						bool _hx_tmp26;
HXDLIN( 371)						bool _hx_tmp27;
HXDLIN( 371)						if ((x1 >= 0)) {
HXLINE( 371)							_hx_tmp27 = (y1 >= 0);
            						}
            						else {
HXLINE( 371)							_hx_tmp27 = false;
            						}
HXDLIN( 371)						if (_hx_tmp27) {
HXLINE( 371)							_hx_tmp26 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 371)							_hx_tmp26 = false;
            						}
HXDLIN( 371)						if (_hx_tmp26) {
HXLINE( 371)							_hx_tmp25 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 371)							_hx_tmp25 = false;
            						}
HXDLIN( 371)						if (!(_hx_tmp25)) {
HXLINE( 371)							::cpp::Int64 this4 = _hx_int64_make(x1,y1);
HXDLIN( 371)							int _hx_tmp28 = _hx_int64_high(this4);
HXDLIN( 371)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp28,_hx_int64_low(this4))));
            						}
HXDLIN( 371)						int position2 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 371)						position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 371)						int oldColor = ((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) ));
HXDLIN( 371)						Float Red = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 371)						Float Green = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 371)						Float Blue = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 371)						Float Alpha = ((( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN( 371)						int color1 = 0;
HXDLIN( 371)						{
HXLINE( 371)							int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 371)							color1 = (color1 & -16711681);
HXDLIN( 371)							int color2;
HXDLIN( 371)							if ((value > 255)) {
HXLINE( 371)								color2 = 255;
            							}
            							else {
HXLINE( 371)								if ((value < 0)) {
HXLINE( 371)									color2 = 0;
            								}
            								else {
HXLINE( 371)									color2 = value;
            								}
            							}
HXDLIN( 371)							color1 = (color1 | (color2 << 16));
            						}
HXDLIN( 371)						{
HXLINE( 371)							int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 371)							color1 = (color1 & -65281);
HXDLIN( 371)							int color3;
HXDLIN( 371)							if ((value1 > 255)) {
HXLINE( 371)								color3 = 255;
            							}
            							else {
HXLINE( 371)								if ((value1 < 0)) {
HXLINE( 371)									color3 = 0;
            								}
            								else {
HXLINE( 371)									color3 = value1;
            								}
            							}
HXDLIN( 371)							color1 = (color1 | (color3 << 8));
            						}
HXDLIN( 371)						{
HXLINE( 371)							int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 371)							color1 = (color1 & -256);
HXDLIN( 371)							int color4;
HXDLIN( 371)							if ((value2 > 255)) {
HXLINE( 371)								color4 = 255;
            							}
            							else {
HXLINE( 371)								if ((value2 < 0)) {
HXLINE( 371)									color4 = 0;
            								}
            								else {
HXLINE( 371)									color4 = value2;
            								}
            							}
HXDLIN( 371)							color1 = (color1 | color4);
            						}
HXDLIN( 371)						{
HXLINE( 371)							int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 371)							color1 = (color1 & 16777215);
HXDLIN( 371)							int color5;
HXDLIN( 371)							if ((value3 > 255)) {
HXLINE( 371)								color5 = 255;
            							}
            							else {
HXLINE( 371)								if ((value3 < 0)) {
HXLINE( 371)									color5 = 0;
            								}
            								else {
HXLINE( 371)									color5 = value3;
            								}
            							}
HXDLIN( 371)							color1 = (color1 | (color5 << 24));
            						}
HXDLIN( 371)						int newColor = color1;
HXDLIN( 371)						bool _hx_tmp29;
HXDLIN( 371)						bool _hx_tmp30;
HXDLIN( 371)						bool _hx_tmp31;
HXDLIN( 371)						if ((x1 >= 0)) {
HXLINE( 371)							_hx_tmp31 = (y1 >= 0);
            						}
            						else {
HXLINE( 371)							_hx_tmp31 = false;
            						}
HXDLIN( 371)						if (_hx_tmp31) {
HXLINE( 371)							_hx_tmp30 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 371)							_hx_tmp30 = false;
            						}
HXDLIN( 371)						if (_hx_tmp30) {
HXLINE( 371)							_hx_tmp29 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 371)							_hx_tmp29 = false;
            						}
HXDLIN( 371)						if (!(_hx_tmp29)) {
HXLINE( 371)							::cpp::Int64 this5 = _hx_int64_make(x1,y1);
HXDLIN( 371)							int _hx_tmp32 = _hx_int64_high(this5);
HXDLIN( 371)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp32,_hx_int64_low(this5))));
            						}
            						else {
HXLINE( 371)							bool _hx_tmp33;
HXDLIN( 371)							bool _hx_tmp34;
HXDLIN( 371)							bool _hx_tmp35;
HXDLIN( 371)							bool _hx_tmp36;
HXDLIN( 371)							int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)							if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 371)								int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)								_hx_tmp36 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp36 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp36)) {
HXLINE( 371)								int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)								_hx_tmp35 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp35 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp35)) {
HXLINE( 371)								int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)								_hx_tmp34 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp34 = true;
            							}
HXDLIN( 371)							if (!(_hx_tmp34)) {
HXLINE( 371)								_hx_tmp33 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 371)								_hx_tmp33 = true;
            							}
HXDLIN( 371)							if (_hx_tmp33) {
HXLINE( 371)								 ::vision::ds::ImageView v1 = null();
HXDLIN( 371)								bool _hx_tmp37;
HXDLIN( 371)								bool _hx_tmp38;
HXDLIN( 371)								bool _hx_tmp39;
HXDLIN( 371)								bool _hx_tmp40;
HXDLIN( 371)								bool _hx_tmp41;
HXDLIN( 371)								bool _hx_tmp42;
HXDLIN( 371)								int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)								if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 371)									int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)									_hx_tmp42 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp42 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp42)) {
HXLINE( 371)									int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)									_hx_tmp41 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp41 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp41)) {
HXLINE( 371)									int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)									_hx_tmp40 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp40 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp40)) {
HXLINE( 371)									_hx_tmp39 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 371)									_hx_tmp39 = true;
            								}
HXDLIN( 371)								if (!(_hx_tmp39)) {
HXLINE( 371)									_hx_tmp38 = ::hx::IsNull( v1 );
            								}
            								else {
HXLINE( 371)									_hx_tmp38 = false;
            								}
HXDLIN( 371)								if (_hx_tmp38) {
HXLINE( 371)									bool _hx_tmp43;
HXDLIN( 371)									bool _hx_tmp44;
HXDLIN( 371)									if ((x1 >= 0)) {
HXLINE( 371)										_hx_tmp44 = (y1 >= 0);
            									}
            									else {
HXLINE( 371)										_hx_tmp44 = false;
            									}
HXDLIN( 371)									if (_hx_tmp44) {
HXLINE( 371)										_hx_tmp43 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 371)										_hx_tmp43 = false;
            									}
HXDLIN( 371)									if (_hx_tmp43) {
HXLINE( 371)										_hx_tmp37 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 371)										_hx_tmp37 = false;
            									}
            								}
            								else {
HXLINE( 371)									bool has8 = false;
HXDLIN( 371)									 ::vision::ds::ImageView view1;
HXDLIN( 371)									if (::hx::IsNotNull( v1 )) {
HXLINE( 371)										view1 = v1;
            									}
            									else {
HXLINE( 371)										int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 371)										int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)										int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 371)										int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 371)										view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 371)									switch((int)(view1->shape)){
            										case (int)0: {
HXLINE( 371)											bool has9;
HXDLIN( 371)											bool has10;
HXDLIN( 371)											if ((x1 < (view1->x + view1->width))) {
HXLINE( 371)												has10 = (y1 < (view1->y + view1->height));
            											}
            											else {
HXLINE( 371)												has10 = false;
            											}
HXDLIN( 371)											if (has10) {
HXLINE( 371)												has9 = (x1 >= view1->x);
            											}
            											else {
HXLINE( 371)												has9 = false;
            											}
HXDLIN( 371)											if (has9) {
HXLINE( 371)												has8 = (y1 >= view1->y);
            											}
            											else {
HXLINE( 371)												has8 = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 371)											bool has11;
HXDLIN( 371)											bool has12;
HXDLIN( 371)											bool has13;
HXDLIN( 371)											if ((x1 < (view1->x + view1->width))) {
HXLINE( 371)												has13 = (y1 < (view1->y + view1->height));
            											}
            											else {
HXLINE( 371)												has13 = false;
            											}
HXDLIN( 371)											if (has13) {
HXLINE( 371)												has12 = (x1 >= view1->x);
            											}
            											else {
HXLINE( 371)												has12 = false;
            											}
HXDLIN( 371)											if (has12) {
HXLINE( 371)												has11 = (y1 >= view1->y);
            											}
            											else {
HXLINE( 371)												has11 = false;
            											}
HXLINE(1400)											has8 = !(has11);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 371)											if ((view1->width > view1->height)) {
HXLINE( 371)												Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 371)												Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 371)												Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 371)												Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 371)												Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 371)												Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 371)												Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 371)												::cpp::Int64 p2 = _hx_int64_make(x1,y1);
HXDLIN( 371)												Float x7 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 371)												Float y7 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 371)												Float has14 = ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)));
HXDLIN( 371)												Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 371)												Float y8 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)												has8 = ((has14 + ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)))) <= view1->width);
HXLINE( 371)												if ((view1->shape == 3)) {
HXLINE(1416)													has8 = !(has8);
            												}
            											}
            											else {
HXLINE( 371)												if ((view1->height > view1->width)) {
HXLINE( 371)													Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 371)													Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 371)													Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 371)													Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 371)													Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 371)													::cpp::Int64 p3 = _hx_int64_make(x1,y1);
HXDLIN( 371)													Float x9 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 371)													Float y9 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 371)													Float has15 = ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)));
HXDLIN( 371)													Float x10 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 371)													Float y10 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)													has8 = ((has15 + ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)))) <= view1->height);
HXLINE( 371)													if ((view1->shape == 3)) {
HXLINE(1425)														has8 = !(has8);
            													}
            												}
            												else {
HXLINE( 371)													Float point1_x1 = ( (Float)(x1) );
HXDLIN( 371)													Float point1_y1 = ( (Float)(y1) );
HXDLIN( 371)													Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 371)													Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 371)													Float x11 = (point2_x1 - point1_x1);
HXDLIN( 371)													Float y11 = (point2_y1 - point1_y1);
HXLINE(1428)													has8 = (::Math_obj::sqrt(((x11 * x11) + (y11 * y11))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 371)													if ((view1->shape == 3)) {
HXLINE(1429)														has8 = !(has8);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has8 = (((::Math_obj::abs((( (Float)((x1 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has8 = !((((::Math_obj::abs((( (Float)((x1 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 371)									_hx_tmp37 = has8;
            								}
HXDLIN( 371)								if (_hx_tmp37) {
HXLINE( 371)									int position3 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 371)									position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 371)									this1->b[position3] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 371)									this1->b[(position3 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 371)									this1->b[(position3 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 371)									this1->b[(position3 + 3)] = ( (unsigned char)((newColor & 255)) );
            								}
            							}
            							else {
HXLINE( 371)								int position4 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 371)								position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 371)								this1->b[position4] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 371)								this1->b[(position4 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 371)								this1->b[(position4 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 371)								this1->b[(position4 + 3)] = ( (unsigned char)((newColor & 255)) );
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 374)				Float yFraction = (y - ( (Float)(::Std_obj::_hx_int(y)) ));
HXDLIN( 374)				Float xFraction = (x - ( (Float)(::Std_obj::_hx_int(x)) ));
HXLINE( 380)				int ix = ::Math_obj::floor(x);
HXDLIN( 380)				int iy = ::Math_obj::floor(y);
HXLINE( 381)				{
HXLINE( 381)					int _g = 0;
HXDLIN( 381)					::Array< int > _g1 = ::Array_obj< int >::fromData( _hx_array_data_cc34fda2_77,2);
HXDLIN( 381)					while((_g < _g1->length)){
HXLINE( 381)						int posX = _g1->__get(_g);
HXDLIN( 381)						_g = (_g + 1);
HXLINE( 382)						bool _hx_tmp45;
HXDLIN( 382)						if ((posX == 1)) {
HXLINE( 382)							_hx_tmp45 = (x == ix);
            						}
            						else {
HXLINE( 382)							_hx_tmp45 = false;
            						}
HXDLIN( 382)						if (_hx_tmp45) {
HXLINE( 382)							continue;
            						}
HXLINE( 383)						{
HXLINE( 383)							int _g2 = 0;
HXDLIN( 383)							::Array< int > _g3 = ::Array_obj< int >::fromData( _hx_array_data_cc34fda2_78,2);
HXDLIN( 383)							while((_g2 < _g3->length)){
HXLINE( 383)								int posY = _g3->__get(_g2);
HXDLIN( 383)								_g2 = (_g2 + 1);
HXLINE( 384)								bool _hx_tmp46;
HXDLIN( 384)								if ((posY == 1)) {
HXLINE( 384)									_hx_tmp46 = (y == iy);
            								}
            								else {
HXLINE( 384)									_hx_tmp46 = false;
            								}
HXDLIN( 384)								if (_hx_tmp46) {
HXLINE( 384)									continue;
            								}
HXLINE( 385)								int x12 = (ix + posX);
HXDLIN( 385)								int y12 = (iy + posY);
HXDLIN( 385)								bool _hx_tmp47;
HXDLIN( 385)								bool _hx_tmp48;
HXDLIN( 385)								bool _hx_tmp49;
HXDLIN( 385)								if ((x12 >= 0)) {
HXLINE( 385)									_hx_tmp49 = (y12 >= 0);
            								}
            								else {
HXLINE( 385)									_hx_tmp49 = false;
            								}
HXDLIN( 385)								if (_hx_tmp49) {
HXLINE( 385)									_hx_tmp48 = (x12 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 385)									_hx_tmp48 = false;
            								}
HXDLIN( 385)								if (_hx_tmp48) {
HXLINE( 385)									_hx_tmp47 = (y12 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 385)									_hx_tmp47 = false;
            								}
HXDLIN( 385)								if (!(_hx_tmp47)) {
HXLINE( 385)									::cpp::Int64 this6 = _hx_int64_make(x12,y12);
HXDLIN( 385)									int _hx_tmp50 = _hx_int64_high(this6);
HXDLIN( 385)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp50,_hx_int64_low(this6))));
            								}
HXDLIN( 385)								int position5 = (((y12 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x12) * 4);
HXDLIN( 385)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 385)								int oldColor1 = ((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) ));
HXLINE( 386)								{
HXLINE( 386)									Float value4;
HXDLIN( 386)									if ((posX == 0)) {
HXLINE( 386)										value4 = (( (Float)(1) ) - xFraction);
            									}
            									else {
HXLINE( 386)										value4 = xFraction;
            									}
HXDLIN( 386)									Float value5;
HXDLIN( 386)									if ((posY == 0)) {
HXLINE( 386)										value5 = (( (Float)(1) ) - yFraction);
            									}
            									else {
HXLINE( 386)										value5 = yFraction;
            									}
HXDLIN( 386)									Float value6 = ((value4 + value5) / ( (Float)(2) ));
HXDLIN( 386)									{
HXLINE( 386)										int value7 = ::Math_obj::round((value6 * ( (Float)(255) )));
HXDLIN( 386)										color = (color & 16777215);
HXDLIN( 386)										int color6;
HXDLIN( 386)										if ((value7 > 255)) {
HXLINE( 386)											color6 = 255;
            										}
            										else {
HXLINE( 386)											if ((value7 < 0)) {
HXLINE( 386)												color6 = 0;
            											}
            											else {
HXLINE( 386)												color6 = value7;
            											}
            										}
HXDLIN( 386)										color = (color | (color6 << 24));
            									}
            								}
HXLINE( 387)								Float Red1 = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor1 >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 387)								Float Green1 = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor1 >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 387)								Float Blue1 = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor1 & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 387)								Float Alpha1 = ((( (Float)(((oldColor1 >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor1 >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN( 387)								int color7 = 0;
HXDLIN( 387)								{
HXLINE( 387)									int value8 = ::Math_obj::round((Red1 * ( (Float)(255) )));
HXDLIN( 387)									color7 = (color7 & -16711681);
HXDLIN( 387)									int color8;
HXDLIN( 387)									if ((value8 > 255)) {
HXLINE( 387)										color8 = 255;
            									}
            									else {
HXLINE( 387)										if ((value8 < 0)) {
HXLINE( 387)											color8 = 0;
            										}
            										else {
HXLINE( 387)											color8 = value8;
            										}
            									}
HXDLIN( 387)									color7 = (color7 | (color8 << 16));
            								}
HXDLIN( 387)								{
HXLINE( 387)									int value9 = ::Math_obj::round((Green1 * ( (Float)(255) )));
HXDLIN( 387)									color7 = (color7 & -65281);
HXDLIN( 387)									int color9;
HXDLIN( 387)									if ((value9 > 255)) {
HXLINE( 387)										color9 = 255;
            									}
            									else {
HXLINE( 387)										if ((value9 < 0)) {
HXLINE( 387)											color9 = 0;
            										}
            										else {
HXLINE( 387)											color9 = value9;
            										}
            									}
HXDLIN( 387)									color7 = (color7 | (color9 << 8));
            								}
HXDLIN( 387)								{
HXLINE( 387)									int value10 = ::Math_obj::round((Blue1 * ( (Float)(255) )));
HXDLIN( 387)									color7 = (color7 & -256);
HXDLIN( 387)									int color10;
HXDLIN( 387)									if ((value10 > 255)) {
HXLINE( 387)										color10 = 255;
            									}
            									else {
HXLINE( 387)										if ((value10 < 0)) {
HXLINE( 387)											color10 = 0;
            										}
            										else {
HXLINE( 387)											color10 = value10;
            										}
            									}
HXDLIN( 387)									color7 = (color7 | color10);
            								}
HXDLIN( 387)								{
HXLINE( 387)									int value11 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 387)									color7 = (color7 & 16777215);
HXDLIN( 387)									int color11;
HXDLIN( 387)									if ((value11 > 255)) {
HXLINE( 387)										color11 = 255;
            									}
            									else {
HXLINE( 387)										if ((value11 < 0)) {
HXLINE( 387)											color11 = 0;
            										}
            										else {
HXLINE( 387)											color11 = value11;
            										}
            									}
HXDLIN( 387)									color7 = (color7 | (color11 << 24));
            								}
HXDLIN( 387)								int newColor1 = color7;
HXLINE( 393)								{
HXLINE( 393)									int x13 = (ix + posX);
HXDLIN( 393)									int y13 = (iy + posY);
HXDLIN( 393)									bool _hx_tmp51;
HXDLIN( 393)									bool _hx_tmp52;
HXDLIN( 393)									bool _hx_tmp53;
HXDLIN( 393)									if ((x13 >= 0)) {
HXLINE( 393)										_hx_tmp53 = (y13 >= 0);
            									}
            									else {
HXLINE( 393)										_hx_tmp53 = false;
            									}
HXDLIN( 393)									if (_hx_tmp53) {
HXLINE( 393)										_hx_tmp52 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 393)										_hx_tmp52 = false;
            									}
HXDLIN( 393)									if (_hx_tmp52) {
HXLINE( 393)										_hx_tmp51 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 393)										_hx_tmp51 = false;
            									}
HXDLIN( 393)									if (!(_hx_tmp51)) {
HXLINE( 393)										::cpp::Int64 this7 = _hx_int64_make(x13,y13);
HXDLIN( 393)										int _hx_tmp54 = _hx_int64_high(this7);
HXDLIN( 393)										HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp54,_hx_int64_low(this7))));
            									}
            									else {
HXLINE( 393)										bool _hx_tmp55;
HXDLIN( 393)										bool _hx_tmp56;
HXDLIN( 393)										bool _hx_tmp57;
HXDLIN( 393)										bool _hx_tmp58;
HXDLIN( 393)										int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 393)										if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 393)											int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)											_hx_tmp58 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE( 393)											_hx_tmp58 = true;
            										}
HXDLIN( 393)										if (!(_hx_tmp58)) {
HXLINE( 393)											int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 393)											_hx_tmp57 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE( 393)											_hx_tmp57 = true;
            										}
HXDLIN( 393)										if (!(_hx_tmp57)) {
HXLINE( 393)											int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)											_hx_tmp56 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE( 393)											_hx_tmp56 = true;
            										}
HXDLIN( 393)										if (!(_hx_tmp56)) {
HXLINE( 393)											_hx_tmp55 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            										}
            										else {
HXLINE( 393)											_hx_tmp55 = true;
            										}
HXDLIN( 393)										if (_hx_tmp55) {
HXLINE( 393)											 ::vision::ds::ImageView v2 = null();
HXDLIN( 393)											bool _hx_tmp59;
HXDLIN( 393)											bool _hx_tmp60;
HXDLIN( 393)											bool _hx_tmp61;
HXDLIN( 393)											bool _hx_tmp62;
HXDLIN( 393)											bool _hx_tmp63;
HXDLIN( 393)											bool _hx_tmp64;
HXDLIN( 393)											int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 393)											if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 393)												int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)												_hx_tmp64 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE( 393)												_hx_tmp64 = true;
            											}
HXDLIN( 393)											if (!(_hx_tmp64)) {
HXLINE( 393)												int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 393)												_hx_tmp63 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE( 393)												_hx_tmp63 = true;
            											}
HXDLIN( 393)											if (!(_hx_tmp63)) {
HXLINE( 393)												int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)												_hx_tmp62 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE( 393)												_hx_tmp62 = true;
            											}
HXDLIN( 393)											if (!(_hx_tmp62)) {
HXLINE( 393)												_hx_tmp61 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE( 393)												_hx_tmp61 = true;
            											}
HXDLIN( 393)											if (!(_hx_tmp61)) {
HXLINE( 393)												_hx_tmp60 = ::hx::IsNull( v2 );
            											}
            											else {
HXLINE( 393)												_hx_tmp60 = false;
            											}
HXDLIN( 393)											if (_hx_tmp60) {
HXLINE( 393)												bool _hx_tmp65;
HXDLIN( 393)												bool _hx_tmp66;
HXDLIN( 393)												if ((x13 >= 0)) {
HXLINE( 393)													_hx_tmp66 = (y13 >= 0);
            												}
            												else {
HXLINE( 393)													_hx_tmp66 = false;
            												}
HXDLIN( 393)												if (_hx_tmp66) {
HXLINE( 393)													_hx_tmp65 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            												}
            												else {
HXLINE( 393)													_hx_tmp65 = false;
            												}
HXDLIN( 393)												if (_hx_tmp65) {
HXLINE( 393)													_hx_tmp59 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            												}
            												else {
HXLINE( 393)													_hx_tmp59 = false;
            												}
            											}
            											else {
HXLINE( 393)												bool has16 = false;
HXDLIN( 393)												 ::vision::ds::ImageView view2;
HXDLIN( 393)												if (::hx::IsNotNull( v2 )) {
HXLINE( 393)													view2 = v2;
            												}
            												else {
HXLINE( 393)													int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 393)													int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)													int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 393)													int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 393)													view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            												}
HXDLIN( 393)												switch((int)(view2->shape)){
            													case (int)0: {
HXLINE( 393)														bool has17;
HXDLIN( 393)														bool has18;
HXDLIN( 393)														if ((x13 < (view2->x + view2->width))) {
HXLINE( 393)															has18 = (y13 < (view2->y + view2->height));
            														}
            														else {
HXLINE( 393)															has18 = false;
            														}
HXDLIN( 393)														if (has18) {
HXLINE( 393)															has17 = (x13 >= view2->x);
            														}
            														else {
HXLINE( 393)															has17 = false;
            														}
HXDLIN( 393)														if (has17) {
HXLINE( 393)															has16 = (y13 >= view2->y);
            														}
            														else {
HXLINE( 393)															has16 = false;
            														}
            													}
            													break;
            													case (int)1: {
HXLINE( 393)														bool has19;
HXDLIN( 393)														bool has20;
HXDLIN( 393)														bool has21;
HXDLIN( 393)														if ((x13 < (view2->x + view2->width))) {
HXLINE( 393)															has21 = (y13 < (view2->y + view2->height));
            														}
            														else {
HXLINE( 393)															has21 = false;
            														}
HXDLIN( 393)														if (has21) {
HXLINE( 393)															has20 = (x13 >= view2->x);
            														}
            														else {
HXLINE( 393)															has20 = false;
            														}
HXDLIN( 393)														if (has20) {
HXLINE( 393)															has19 = (y13 >= view2->y);
            														}
            														else {
HXLINE( 393)															has19 = false;
            														}
HXLINE(1400)														has16 = !(has19);
            													}
            													break;
            													case (int)2: case (int)3: {
HXLINE( 393)														if ((view2->width > view2->height)) {
HXLINE( 393)															Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 393)															Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 393)															Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN( 393)															Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 393)															Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 393)															Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 393)															Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 393)															::cpp::Int64 p4 = _hx_int64_make(x13,y13);
HXDLIN( 393)															Float x14 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 393)															Float y14 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 393)															Float has22 = ::Math_obj::sqrt(((x14 * x14) + (y14 * y14)));
HXDLIN( 393)															Float x15 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 393)															Float y15 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)															has16 = ((has22 + ::Math_obj::sqrt(((x15 * x15) + (y15 * y15)))) <= view2->width);
HXLINE( 393)															if ((view2->shape == 3)) {
HXLINE(1416)																has16 = !(has16);
            															}
            														}
            														else {
HXLINE( 393)															if ((view2->height > view2->width)) {
HXLINE( 393)																Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 393)																Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 393)																Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN( 393)																Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 393)																Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 393)																Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 393)																Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 393)																::cpp::Int64 p5 = _hx_int64_make(x13,y13);
HXDLIN( 393)																Float x16 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 393)																Float y16 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 393)																Float has23 = ::Math_obj::sqrt(((x16 * x16) + (y16 * y16)));
HXDLIN( 393)																Float x17 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 393)																Float y17 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)																has16 = ((has23 + ::Math_obj::sqrt(((x17 * x17) + (y17 * y17)))) <= view2->height);
HXLINE( 393)																if ((view2->shape == 3)) {
HXLINE(1425)																	has16 = !(has16);
            																}
            															}
            															else {
HXLINE( 393)																Float point1_x2 = ( (Float)(x13) );
HXDLIN( 393)																Float point1_y2 = ( (Float)(y13) );
HXDLIN( 393)																Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 393)																Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 393)																Float x18 = (point2_x2 - point1_x2);
HXDLIN( 393)																Float y18 = (point2_y2 - point1_y2);
HXLINE(1428)																has16 = (::Math_obj::sqrt(((x18 * x18) + (y18 * y18))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 393)																if ((view2->shape == 3)) {
HXLINE(1429)																	has16 = !(has16);
            																}
            															}
            														}
            													}
            													break;
            													case (int)4: {
HXLINE(1401)														has16 = (((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            													}
            													break;
            													case (int)5: {
HXLINE(1402)														has16 = !((((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            													}
            													break;
            												}
HXLINE( 393)												_hx_tmp59 = has16;
            											}
HXDLIN( 393)											if (_hx_tmp59) {
HXLINE( 393)												int position6 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 393)												position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 393)												this1->b[position6] = ( (unsigned char)(((newColor1 >> 24) & 255)) );
HXDLIN( 393)												this1->b[(position6 + 1)] = ( (unsigned char)(((newColor1 >> 16) & 255)) );
HXDLIN( 393)												this1->b[(position6 + 2)] = ( (unsigned char)(((newColor1 >> 8) & 255)) );
HXDLIN( 393)												this1->b[(position6 + 3)] = ( (unsigned char)((newColor1 & 255)) );
            											}
            										}
            										else {
HXLINE( 393)											int position7 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 393)											position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 393)											this1->b[position7] = ( (unsigned char)(((newColor1 >> 24) & 255)) );
HXDLIN( 393)											this1->b[(position7 + 1)] = ( (unsigned char)(((newColor1 >> 16) & 255)) );
HXDLIN( 393)											this1->b[(position7 + 2)] = ( (unsigned char)(((newColor1 >> 8) & 255)) );
HXDLIN( 393)											this1->b[(position7 + 3)] = ( (unsigned char)((newColor1 & 255)) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,paintFloatingPixel,(void))

void Image_Impl__obj::paintSafePixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_401_paintSafePixel)
HXDLIN( 401)		int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 401)		::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x)->init(1,0);
HXDLIN( 401)		int max = values->__get(0);
HXDLIN( 401)		{
HXDLIN( 401)			int _g = 0;
HXDLIN( 401)			int _g1 = values->length;
HXDLIN( 401)			while((_g < _g1)){
HXDLIN( 401)				_g = (_g + 1);
HXDLIN( 401)				int i = (_g - 1);
HXDLIN( 401)				if ((values->__get(i) > max)) {
HXLINE( 688)					max = values->__get(i);
            				}
            			}
            		}
HXLINE( 401)		::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 401)		int min = values1->__get(0);
HXDLIN( 401)		{
HXDLIN( 401)			int _g2 = 0;
HXDLIN( 401)			int _g3 = values1->length;
HXDLIN( 401)			while((_g2 < _g3)){
HXDLIN( 401)				_g2 = (_g2 + 1);
HXDLIN( 401)				int i1 = (_g2 - 1);
HXDLIN( 401)				if ((values1->__get(i1) < min)) {
HXLINE( 652)					min = values1->__get(i1);
            				}
            			}
            		}
HXLINE( 401)		int x1 = min;
HXDLIN( 401)		int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 401)		::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y)->init(1,0);
HXDLIN( 401)		int max1 = values2->__get(0);
HXDLIN( 401)		{
HXDLIN( 401)			int _g4 = 0;
HXDLIN( 401)			int _g5 = values2->length;
HXDLIN( 401)			while((_g4 < _g5)){
HXDLIN( 401)				_g4 = (_g4 + 1);
HXDLIN( 401)				int i2 = (_g4 - 1);
HXDLIN( 401)				if ((values2->__get(i2) > max1)) {
HXLINE( 688)					max1 = values2->__get(i2);
            				}
            			}
            		}
HXLINE( 401)		::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 401)		int min1 = values3->__get(0);
HXDLIN( 401)		{
HXDLIN( 401)			int _g6 = 0;
HXDLIN( 401)			int _g7 = values3->length;
HXDLIN( 401)			while((_g6 < _g7)){
HXDLIN( 401)				_g6 = (_g6 + 1);
HXDLIN( 401)				int i3 = (_g6 - 1);
HXDLIN( 401)				if ((values3->__get(i3) < min1)) {
HXLINE( 652)					min1 = values3->__get(i3);
            				}
            			}
            		}
HXLINE( 401)		int y1 = min1;
HXDLIN( 401)		bool _hx_tmp;
HXDLIN( 401)		bool _hx_tmp1;
HXDLIN( 401)		bool _hx_tmp2;
HXDLIN( 401)		if ((x1 >= 0)) {
HXDLIN( 401)			_hx_tmp2 = (x1 >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 401)			_hx_tmp2 = true;
            		}
HXDLIN( 401)		if (!(_hx_tmp2)) {
HXDLIN( 401)			_hx_tmp1 = (y1 < 0);
            		}
            		else {
HXDLIN( 401)			_hx_tmp1 = true;
            		}
HXDLIN( 401)		if (!(_hx_tmp1)) {
HXDLIN( 401)			_hx_tmp = (y1 >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 401)			_hx_tmp = true;
            		}
HXDLIN( 401)		if (_hx_tmp) {
HXDLIN( 401)			::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 401)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 401)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
            		else {
HXDLIN( 401)			if (((( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )) == 1)) {
HXDLIN( 401)				bool _hx_tmp4;
HXDLIN( 401)				bool _hx_tmp5;
HXDLIN( 401)				bool _hx_tmp6;
HXDLIN( 401)				if ((x1 >= 0)) {
HXDLIN( 401)					_hx_tmp6 = (y1 >= 0);
            				}
            				else {
HXDLIN( 401)					_hx_tmp6 = false;
            				}
HXDLIN( 401)				if (_hx_tmp6) {
HXDLIN( 401)					_hx_tmp5 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXDLIN( 401)					_hx_tmp5 = false;
            				}
HXDLIN( 401)				if (_hx_tmp5) {
HXDLIN( 401)					_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXDLIN( 401)					_hx_tmp4 = false;
            				}
HXDLIN( 401)				if (!(_hx_tmp4)) {
HXDLIN( 401)					::cpp::Int64 this3 = _hx_int64_make(x1,y1);
HXDLIN( 401)					int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 401)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            				}
            				else {
HXDLIN( 401)					bool _hx_tmp8;
HXDLIN( 401)					bool _hx_tmp9;
HXDLIN( 401)					bool _hx_tmp10;
HXDLIN( 401)					bool _hx_tmp11;
HXDLIN( 401)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXDLIN( 401)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)						_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp11 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp11)) {
HXDLIN( 401)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)						_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp10 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp10)) {
HXDLIN( 401)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)						_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp9 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp9)) {
HXDLIN( 401)						_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp8 = true;
            					}
HXDLIN( 401)					if (_hx_tmp8) {
HXDLIN( 401)						 ::vision::ds::ImageView v = null();
HXDLIN( 401)						bool _hx_tmp12;
HXDLIN( 401)						bool _hx_tmp13;
HXDLIN( 401)						bool _hx_tmp14;
HXDLIN( 401)						bool _hx_tmp15;
HXDLIN( 401)						bool _hx_tmp16;
HXDLIN( 401)						bool _hx_tmp17;
HXDLIN( 401)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXDLIN( 401)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)							_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp17 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp17)) {
HXDLIN( 401)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)							_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp16 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp16)) {
HXDLIN( 401)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)							_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp15 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp15)) {
HXDLIN( 401)							_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp14 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp14)) {
HXDLIN( 401)							_hx_tmp13 = ::hx::IsNull( v );
            						}
            						else {
HXDLIN( 401)							_hx_tmp13 = false;
            						}
HXDLIN( 401)						if (_hx_tmp13) {
HXDLIN( 401)							bool _hx_tmp18;
HXDLIN( 401)							bool _hx_tmp19;
HXDLIN( 401)							if ((x1 >= 0)) {
HXDLIN( 401)								_hx_tmp19 = (y1 >= 0);
            							}
            							else {
HXDLIN( 401)								_hx_tmp19 = false;
            							}
HXDLIN( 401)							if (_hx_tmp19) {
HXDLIN( 401)								_hx_tmp18 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXDLIN( 401)								_hx_tmp18 = false;
            							}
HXDLIN( 401)							if (_hx_tmp18) {
HXDLIN( 401)								_hx_tmp12 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXDLIN( 401)								_hx_tmp12 = false;
            							}
            						}
            						else {
HXDLIN( 401)							bool has = false;
HXDLIN( 401)							 ::vision::ds::ImageView view;
HXDLIN( 401)							if (::hx::IsNotNull( v )) {
HXDLIN( 401)								view = v;
            							}
            							else {
HXDLIN( 401)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 401)							switch((int)(view->shape)){
            								case (int)0: {
HXDLIN( 401)									bool has1;
HXDLIN( 401)									bool has2;
HXDLIN( 401)									if ((x1 < (view->x + view->width))) {
HXDLIN( 401)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXDLIN( 401)										has2 = false;
            									}
HXDLIN( 401)									if (has2) {
HXDLIN( 401)										has1 = (x1 >= view->x);
            									}
            									else {
HXDLIN( 401)										has1 = false;
            									}
HXDLIN( 401)									if (has1) {
HXDLIN( 401)										has = (y1 >= view->y);
            									}
            									else {
HXDLIN( 401)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXDLIN( 401)									bool has3;
HXDLIN( 401)									bool has4;
HXDLIN( 401)									bool has5;
HXDLIN( 401)									if ((x1 < (view->x + view->width))) {
HXDLIN( 401)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXDLIN( 401)										has5 = false;
            									}
HXDLIN( 401)									if (has5) {
HXDLIN( 401)										has4 = (x1 >= view->x);
            									}
            									else {
HXDLIN( 401)										has4 = false;
            									}
HXDLIN( 401)									if (has4) {
HXDLIN( 401)										has3 = (y1 >= view->y);
            									}
            									else {
HXDLIN( 401)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXDLIN( 401)									if ((view->width > view->height)) {
HXDLIN( 401)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 401)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 401)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 401)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 401)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 401)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 401)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 401)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN( 401)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 401)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 401)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 401)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 401)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 401)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXDLIN( 401)										if ((view->height > view->width)) {
HXDLIN( 401)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 401)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 401)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 401)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 401)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 401)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN( 401)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 401)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 401)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 401)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 401)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 401)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXDLIN( 401)											Float point1_x = ( (Float)(x1) );
HXDLIN( 401)											Float point1_y = ( (Float)(y1) );
HXDLIN( 401)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 401)											Float x6 = (point2_x - point1_x);
HXDLIN( 401)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 401)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 401)							_hx_tmp12 = has;
            						}
HXDLIN( 401)						if (_hx_tmp12) {
HXDLIN( 401)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 401)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 401)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 401)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 401)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 401)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXDLIN( 401)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 401)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 401)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 401)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 401)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 401)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
            			else {
HXDLIN( 401)				bool _hx_tmp20;
HXDLIN( 401)				bool _hx_tmp21;
HXDLIN( 401)				bool _hx_tmp22;
HXDLIN( 401)				if ((x1 >= 0)) {
HXDLIN( 401)					_hx_tmp22 = (y1 >= 0);
            				}
            				else {
HXDLIN( 401)					_hx_tmp22 = false;
            				}
HXDLIN( 401)				if (_hx_tmp22) {
HXDLIN( 401)					_hx_tmp21 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXDLIN( 401)					_hx_tmp21 = false;
            				}
HXDLIN( 401)				if (_hx_tmp21) {
HXDLIN( 401)					_hx_tmp20 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXDLIN( 401)					_hx_tmp20 = false;
            				}
HXDLIN( 401)				if (!(_hx_tmp20)) {
HXDLIN( 401)					::cpp::Int64 this4 = _hx_int64_make(x1,y1);
HXDLIN( 401)					int _hx_tmp23 = _hx_int64_high(this4);
HXDLIN( 401)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp23,_hx_int64_low(this4))));
            				}
HXDLIN( 401)				int position2 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 401)				position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 401)				int oldColor = ((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) ));
HXDLIN( 401)				Float Red = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 401)				Float Green = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 401)				Float Blue = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 401)				Float Alpha = ((( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN( 401)				int color1 = 0;
HXDLIN( 401)				{
HXDLIN( 401)					int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 401)					color1 = (color1 & -16711681);
HXDLIN( 401)					int color2;
HXDLIN( 401)					if ((value > 255)) {
HXDLIN( 401)						color2 = 255;
            					}
            					else {
HXDLIN( 401)						if ((value < 0)) {
HXDLIN( 401)							color2 = 0;
            						}
            						else {
HXDLIN( 401)							color2 = value;
            						}
            					}
HXDLIN( 401)					color1 = (color1 | (color2 << 16));
            				}
HXDLIN( 401)				{
HXDLIN( 401)					int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 401)					color1 = (color1 & -65281);
HXDLIN( 401)					int color3;
HXDLIN( 401)					if ((value1 > 255)) {
HXDLIN( 401)						color3 = 255;
            					}
            					else {
HXDLIN( 401)						if ((value1 < 0)) {
HXDLIN( 401)							color3 = 0;
            						}
            						else {
HXDLIN( 401)							color3 = value1;
            						}
            					}
HXDLIN( 401)					color1 = (color1 | (color3 << 8));
            				}
HXDLIN( 401)				{
HXDLIN( 401)					int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 401)					color1 = (color1 & -256);
HXDLIN( 401)					int color4;
HXDLIN( 401)					if ((value2 > 255)) {
HXDLIN( 401)						color4 = 255;
            					}
            					else {
HXDLIN( 401)						if ((value2 < 0)) {
HXDLIN( 401)							color4 = 0;
            						}
            						else {
HXDLIN( 401)							color4 = value2;
            						}
            					}
HXDLIN( 401)					color1 = (color1 | color4);
            				}
HXDLIN( 401)				{
HXDLIN( 401)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 401)					color1 = (color1 & 16777215);
HXDLIN( 401)					int color5;
HXDLIN( 401)					if ((value3 > 255)) {
HXDLIN( 401)						color5 = 255;
            					}
            					else {
HXDLIN( 401)						if ((value3 < 0)) {
HXDLIN( 401)							color5 = 0;
            						}
            						else {
HXDLIN( 401)							color5 = value3;
            						}
            					}
HXDLIN( 401)					color1 = (color1 | (color5 << 24));
            				}
HXDLIN( 401)				int newColor = color1;
HXDLIN( 401)				bool _hx_tmp24;
HXDLIN( 401)				bool _hx_tmp25;
HXDLIN( 401)				bool _hx_tmp26;
HXDLIN( 401)				if ((x1 >= 0)) {
HXDLIN( 401)					_hx_tmp26 = (y1 >= 0);
            				}
            				else {
HXDLIN( 401)					_hx_tmp26 = false;
            				}
HXDLIN( 401)				if (_hx_tmp26) {
HXDLIN( 401)					_hx_tmp25 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXDLIN( 401)					_hx_tmp25 = false;
            				}
HXDLIN( 401)				if (_hx_tmp25) {
HXDLIN( 401)					_hx_tmp24 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXDLIN( 401)					_hx_tmp24 = false;
            				}
HXDLIN( 401)				if (!(_hx_tmp24)) {
HXDLIN( 401)					::cpp::Int64 this5 = _hx_int64_make(x1,y1);
HXDLIN( 401)					int _hx_tmp27 = _hx_int64_high(this5);
HXDLIN( 401)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp27,_hx_int64_low(this5))));
            				}
            				else {
HXDLIN( 401)					bool _hx_tmp28;
HXDLIN( 401)					bool _hx_tmp29;
HXDLIN( 401)					bool _hx_tmp30;
HXDLIN( 401)					bool _hx_tmp31;
HXDLIN( 401)					int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)					if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXDLIN( 401)						int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)						_hx_tmp31 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp31 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp31)) {
HXDLIN( 401)						int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)						_hx_tmp30 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp30 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp30)) {
HXDLIN( 401)						int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)						_hx_tmp29 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp29 = true;
            					}
HXDLIN( 401)					if (!(_hx_tmp29)) {
HXDLIN( 401)						_hx_tmp28 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXDLIN( 401)						_hx_tmp28 = true;
            					}
HXDLIN( 401)					if (_hx_tmp28) {
HXDLIN( 401)						 ::vision::ds::ImageView v1 = null();
HXDLIN( 401)						bool _hx_tmp32;
HXDLIN( 401)						bool _hx_tmp33;
HXDLIN( 401)						bool _hx_tmp34;
HXDLIN( 401)						bool _hx_tmp35;
HXDLIN( 401)						bool _hx_tmp36;
HXDLIN( 401)						bool _hx_tmp37;
HXDLIN( 401)						int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)						if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXDLIN( 401)							int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)							_hx_tmp37 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp37 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp37)) {
HXDLIN( 401)							int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)							_hx_tmp36 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp36 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp36)) {
HXDLIN( 401)							int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)							_hx_tmp35 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp35 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp35)) {
HXDLIN( 401)							_hx_tmp34 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXDLIN( 401)							_hx_tmp34 = true;
            						}
HXDLIN( 401)						if (!(_hx_tmp34)) {
HXDLIN( 401)							_hx_tmp33 = ::hx::IsNull( v1 );
            						}
            						else {
HXDLIN( 401)							_hx_tmp33 = false;
            						}
HXDLIN( 401)						if (_hx_tmp33) {
HXDLIN( 401)							bool _hx_tmp38;
HXDLIN( 401)							bool _hx_tmp39;
HXDLIN( 401)							if ((x1 >= 0)) {
HXDLIN( 401)								_hx_tmp39 = (y1 >= 0);
            							}
            							else {
HXDLIN( 401)								_hx_tmp39 = false;
            							}
HXDLIN( 401)							if (_hx_tmp39) {
HXDLIN( 401)								_hx_tmp38 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXDLIN( 401)								_hx_tmp38 = false;
            							}
HXDLIN( 401)							if (_hx_tmp38) {
HXDLIN( 401)								_hx_tmp32 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXDLIN( 401)								_hx_tmp32 = false;
            							}
            						}
            						else {
HXDLIN( 401)							bool has8 = false;
HXDLIN( 401)							 ::vision::ds::ImageView view1;
HXDLIN( 401)							if (::hx::IsNotNull( v1 )) {
HXDLIN( 401)								view1 = v1;
            							}
            							else {
HXDLIN( 401)								int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 401)								int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)								int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 401)								int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 401)								view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 401)							switch((int)(view1->shape)){
            								case (int)0: {
HXDLIN( 401)									bool has9;
HXDLIN( 401)									bool has10;
HXDLIN( 401)									if ((x1 < (view1->x + view1->width))) {
HXDLIN( 401)										has10 = (y1 < (view1->y + view1->height));
            									}
            									else {
HXDLIN( 401)										has10 = false;
            									}
HXDLIN( 401)									if (has10) {
HXDLIN( 401)										has9 = (x1 >= view1->x);
            									}
            									else {
HXDLIN( 401)										has9 = false;
            									}
HXDLIN( 401)									if (has9) {
HXDLIN( 401)										has8 = (y1 >= view1->y);
            									}
            									else {
HXDLIN( 401)										has8 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXDLIN( 401)									bool has11;
HXDLIN( 401)									bool has12;
HXDLIN( 401)									bool has13;
HXDLIN( 401)									if ((x1 < (view1->x + view1->width))) {
HXDLIN( 401)										has13 = (y1 < (view1->y + view1->height));
            									}
            									else {
HXDLIN( 401)										has13 = false;
            									}
HXDLIN( 401)									if (has13) {
HXDLIN( 401)										has12 = (x1 >= view1->x);
            									}
            									else {
HXDLIN( 401)										has12 = false;
            									}
HXDLIN( 401)									if (has12) {
HXDLIN( 401)										has11 = (y1 >= view1->y);
            									}
            									else {
HXDLIN( 401)										has11 = false;
            									}
HXLINE(1400)									has8 = !(has11);
            								}
            								break;
            								case (int)2: case (int)3: {
HXDLIN( 401)									if ((view1->width > view1->height)) {
HXDLIN( 401)										Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 401)										Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 401)										Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 401)										Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 401)										Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 401)										Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 401)										Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 401)										::cpp::Int64 p2 = _hx_int64_make(x1,y1);
HXDLIN( 401)										Float x7 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 401)										Float y7 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 401)										Float has14 = ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)));
HXDLIN( 401)										Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 401)										Float y8 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)										has8 = ((has14 + ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)))) <= view1->width);
HXLINE( 401)										if ((view1->shape == 3)) {
HXLINE(1416)											has8 = !(has8);
            										}
            									}
            									else {
HXDLIN( 401)										if ((view1->height > view1->width)) {
HXDLIN( 401)											Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 401)											Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 401)											Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 401)											Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 401)											Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 401)											::cpp::Int64 p3 = _hx_int64_make(x1,y1);
HXDLIN( 401)											Float x9 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 401)											Float y9 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 401)											Float has15 = ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)));
HXDLIN( 401)											Float x10 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 401)											Float y10 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)											has8 = ((has15 + ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)))) <= view1->height);
HXLINE( 401)											if ((view1->shape == 3)) {
HXLINE(1425)												has8 = !(has8);
            											}
            										}
            										else {
HXDLIN( 401)											Float point1_x1 = ( (Float)(x1) );
HXDLIN( 401)											Float point1_y1 = ( (Float)(y1) );
HXDLIN( 401)											Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 401)											Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 401)											Float x11 = (point2_x1 - point1_x1);
HXDLIN( 401)											Float y11 = (point2_y1 - point1_y1);
HXLINE(1428)											has8 = (::Math_obj::sqrt(((x11 * x11) + (y11 * y11))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 401)											if ((view1->shape == 3)) {
HXLINE(1429)												has8 = !(has8);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has8 = (((::Math_obj::abs((( (Float)((x1 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has8 = !((((::Math_obj::abs((( (Float)((x1 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 401)							_hx_tmp32 = has8;
            						}
HXDLIN( 401)						if (_hx_tmp32) {
HXDLIN( 401)							int position3 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 401)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 401)							this1->b[position3] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 401)							this1->b[(position3 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 401)							this1->b[(position3 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 401)							this1->b[(position3 + 3)] = ( (unsigned char)((newColor & 255)) );
            						}
            					}
            					else {
HXDLIN( 401)						int position4 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 401)						position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 401)						this1->b[position4] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 401)						this1->b[(position4 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 401)						this1->b[(position4 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 401)						this1->b[(position4 + 3)] = ( (unsigned char)((newColor & 255)) );
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,paintSafePixel,(void))

void Image_Impl__obj::paintUnsafePixel( ::haxe::io::Bytes this1,int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_405_paintUnsafePixel)
HXLINE( 406)		int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 406)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 406)		int oldColor = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXLINE( 407)		Float Red = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 407)		Float Green = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 407)		Float Blue = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN( 407)		Float Alpha = ((( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN( 407)		int color1 = 0;
HXDLIN( 407)		{
HXLINE( 407)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 407)			color1 = (color1 & -16711681);
HXDLIN( 407)			int color2;
HXDLIN( 407)			if ((value > 255)) {
HXLINE( 407)				color2 = 255;
            			}
            			else {
HXLINE( 407)				if ((value < 0)) {
HXLINE( 407)					color2 = 0;
            				}
            				else {
HXLINE( 407)					color2 = value;
            				}
            			}
HXDLIN( 407)			color1 = (color1 | (color2 << 16));
            		}
HXDLIN( 407)		{
HXLINE( 407)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 407)			color1 = (color1 & -65281);
HXDLIN( 407)			int color3;
HXDLIN( 407)			if ((value1 > 255)) {
HXLINE( 407)				color3 = 255;
            			}
            			else {
HXLINE( 407)				if ((value1 < 0)) {
HXLINE( 407)					color3 = 0;
            				}
            				else {
HXLINE( 407)					color3 = value1;
            				}
            			}
HXDLIN( 407)			color1 = (color1 | (color3 << 8));
            		}
HXDLIN( 407)		{
HXLINE( 407)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 407)			color1 = (color1 & -256);
HXDLIN( 407)			int color4;
HXDLIN( 407)			if ((value2 > 255)) {
HXLINE( 407)				color4 = 255;
            			}
            			else {
HXLINE( 407)				if ((value2 < 0)) {
HXLINE( 407)					color4 = 0;
            				}
            				else {
HXLINE( 407)					color4 = value2;
            				}
            			}
HXDLIN( 407)			color1 = (color1 | color4);
            		}
HXDLIN( 407)		{
HXLINE( 407)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 407)			color1 = (color1 & 16777215);
HXDLIN( 407)			int color5;
HXDLIN( 407)			if ((value3 > 255)) {
HXLINE( 407)				color5 = 255;
            			}
            			else {
HXLINE( 407)				if ((value3 < 0)) {
HXLINE( 407)					color5 = 0;
            				}
            				else {
HXLINE( 407)					color5 = value3;
            				}
            			}
HXDLIN( 407)			color1 = (color1 | (color5 << 24));
            		}
HXDLIN( 407)		int newColor = color1;
HXLINE( 413)		{
HXLINE( 413)			int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 413)			position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 413)			this1->b[position1] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN( 413)			this1->b[(position1 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN( 413)			this1->b[(position1 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN( 413)			this1->b[(position1 + 3)] = ( (unsigned char)((newColor & 255)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,paintUnsafePixel,(void))

bool Image_Impl__obj::hasPixel( ::haxe::io::Bytes this1,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_432_hasPixel)
HXDLIN( 432)		bool _hx_tmp;
HXDLIN( 432)		bool _hx_tmp1;
HXDLIN( 432)		if ((x >= 0)) {
HXDLIN( 432)			_hx_tmp1 = (y >= 0);
            		}
            		else {
HXDLIN( 432)			_hx_tmp1 = false;
            		}
HXDLIN( 432)		if (_hx_tmp1) {
HXDLIN( 432)			_hx_tmp = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 432)			_hx_tmp = false;
            		}
HXDLIN( 432)		if (_hx_tmp) {
HXDLIN( 432)			return (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 432)			return false;
            		}
HXDLIN( 432)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,hasPixel,return )

void Image_Impl__obj::movePixel( ::haxe::io::Bytes this1,int fromX,int fromY,int toX,int toY,int oldPixelResetColor){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_450_movePixel)
HXLINE( 451)		{
HXLINE( 451)			bool _hx_tmp;
HXDLIN( 451)			bool _hx_tmp1;
HXDLIN( 451)			bool _hx_tmp2;
HXDLIN( 451)			if ((fromX >= 0)) {
HXLINE( 451)				_hx_tmp2 = (fromY >= 0);
            			}
            			else {
HXLINE( 451)				_hx_tmp2 = false;
            			}
HXDLIN( 451)			if (_hx_tmp2) {
HXLINE( 451)				_hx_tmp1 = (fromX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 451)				_hx_tmp1 = false;
            			}
HXDLIN( 451)			if (_hx_tmp1) {
HXLINE( 451)				_hx_tmp = (fromY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 451)				_hx_tmp = false;
            			}
HXDLIN( 451)			if (!(_hx_tmp)) {
HXLINE( 451)				::cpp::Int64 this2 = _hx_int64_make(fromX,fromY);
HXDLIN( 451)				int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 451)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            			}
HXDLIN( 451)			int position = (((fromY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + fromX) * 4);
HXDLIN( 451)			position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 451)			int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN( 451)			bool _hx_tmp4;
HXDLIN( 451)			bool _hx_tmp5;
HXDLIN( 451)			bool _hx_tmp6;
HXDLIN( 451)			if ((toX >= 0)) {
HXLINE( 451)				_hx_tmp6 = (toY >= 0);
            			}
            			else {
HXLINE( 451)				_hx_tmp6 = false;
            			}
HXDLIN( 451)			if (_hx_tmp6) {
HXLINE( 451)				_hx_tmp5 = (toX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 451)				_hx_tmp5 = false;
            			}
HXDLIN( 451)			if (_hx_tmp5) {
HXLINE( 451)				_hx_tmp4 = (toY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 451)				_hx_tmp4 = false;
            			}
HXDLIN( 451)			if (!(_hx_tmp4)) {
HXLINE( 451)				::cpp::Int64 this3 = _hx_int64_make(toX,toY);
HXDLIN( 451)				int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 451)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            			}
            			else {
HXLINE( 451)				bool _hx_tmp8;
HXDLIN( 451)				bool _hx_tmp9;
HXDLIN( 451)				bool _hx_tmp10;
HXDLIN( 451)				bool _hx_tmp11;
HXDLIN( 451)				int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 451)				if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 451)					int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)					_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 451)					_hx_tmp11 = true;
            				}
HXDLIN( 451)				if (!(_hx_tmp11)) {
HXLINE( 451)					int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 451)					_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 451)					_hx_tmp10 = true;
            				}
HXDLIN( 451)				if (!(_hx_tmp10)) {
HXLINE( 451)					int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)					_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 451)					_hx_tmp9 = true;
            				}
HXDLIN( 451)				if (!(_hx_tmp9)) {
HXLINE( 451)					_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 451)					_hx_tmp8 = true;
            				}
HXDLIN( 451)				if (_hx_tmp8) {
HXLINE( 451)					 ::vision::ds::ImageView v = null();
HXDLIN( 451)					bool _hx_tmp12;
HXDLIN( 451)					bool _hx_tmp13;
HXDLIN( 451)					bool _hx_tmp14;
HXDLIN( 451)					bool _hx_tmp15;
HXDLIN( 451)					bool _hx_tmp16;
HXDLIN( 451)					bool _hx_tmp17;
HXDLIN( 451)					int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 451)					if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 451)						int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)						_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 451)						_hx_tmp17 = true;
            					}
HXDLIN( 451)					if (!(_hx_tmp17)) {
HXLINE( 451)						int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 451)						_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 451)						_hx_tmp16 = true;
            					}
HXDLIN( 451)					if (!(_hx_tmp16)) {
HXLINE( 451)						int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)						_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 451)						_hx_tmp15 = true;
            					}
HXDLIN( 451)					if (!(_hx_tmp15)) {
HXLINE( 451)						_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 451)						_hx_tmp14 = true;
            					}
HXDLIN( 451)					if (!(_hx_tmp14)) {
HXLINE( 451)						_hx_tmp13 = ::hx::IsNull( v );
            					}
            					else {
HXLINE( 451)						_hx_tmp13 = false;
            					}
HXDLIN( 451)					if (_hx_tmp13) {
HXLINE( 451)						bool _hx_tmp18;
HXDLIN( 451)						bool _hx_tmp19;
HXDLIN( 451)						if ((toX >= 0)) {
HXLINE( 451)							_hx_tmp19 = (toY >= 0);
            						}
            						else {
HXLINE( 451)							_hx_tmp19 = false;
            						}
HXDLIN( 451)						if (_hx_tmp19) {
HXLINE( 451)							_hx_tmp18 = (toX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 451)							_hx_tmp18 = false;
            						}
HXDLIN( 451)						if (_hx_tmp18) {
HXLINE( 451)							_hx_tmp12 = (toY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 451)							_hx_tmp12 = false;
            						}
            					}
            					else {
HXLINE( 451)						bool has = false;
HXDLIN( 451)						 ::vision::ds::ImageView view;
HXDLIN( 451)						if (::hx::IsNotNull( v )) {
HXLINE( 451)							view = v;
            						}
            						else {
HXLINE( 451)							int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 451)							int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)							int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 451)							int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 451)							view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 451)						switch((int)(view->shape)){
            							case (int)0: {
HXLINE( 451)								bool has1;
HXDLIN( 451)								bool has2;
HXDLIN( 451)								if ((toX < (view->x + view->width))) {
HXLINE( 451)									has2 = (toY < (view->y + view->height));
            								}
            								else {
HXLINE( 451)									has2 = false;
            								}
HXDLIN( 451)								if (has2) {
HXLINE( 451)									has1 = (toX >= view->x);
            								}
            								else {
HXLINE( 451)									has1 = false;
            								}
HXDLIN( 451)								if (has1) {
HXLINE( 451)									has = (toY >= view->y);
            								}
            								else {
HXLINE( 451)									has = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 451)								bool has3;
HXDLIN( 451)								bool has4;
HXDLIN( 451)								bool has5;
HXDLIN( 451)								if ((toX < (view->x + view->width))) {
HXLINE( 451)									has5 = (toY < (view->y + view->height));
            								}
            								else {
HXLINE( 451)									has5 = false;
            								}
HXDLIN( 451)								if (has5) {
HXLINE( 451)									has4 = (toX >= view->x);
            								}
            								else {
HXLINE( 451)									has4 = false;
            								}
HXDLIN( 451)								if (has4) {
HXLINE( 451)									has3 = (toY >= view->y);
            								}
            								else {
HXLINE( 451)									has3 = false;
            								}
HXLINE(1400)								has = !(has3);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 451)								if ((view->width > view->height)) {
HXLINE( 451)									Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 451)									Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 451)									Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 451)									Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 451)									Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 451)									Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 451)									Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 451)									::cpp::Int64 p = _hx_int64_make(toX,toY);
HXDLIN( 451)									Float x = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 451)									Float y = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 451)									Float has6 = ::Math_obj::sqrt(((x * x) + (y * y)));
HXDLIN( 451)									Float x1 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 451)									Float y1 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)									has = ((has6 + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)))) <= view->width);
HXLINE( 451)									if ((view->shape == 3)) {
HXLINE(1416)										has = !(has);
            									}
            								}
            								else {
HXLINE( 451)									if ((view->height > view->width)) {
HXLINE( 451)										Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 451)										Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 451)										Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 451)										Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 451)										Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 451)										Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 451)										Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 451)										::cpp::Int64 p1 = _hx_int64_make(toX,toY);
HXDLIN( 451)										Float x2 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 451)										Float y2 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 451)										Float has7 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 451)										Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 451)										Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)										has = ((has7 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->height);
HXLINE( 451)										if ((view->shape == 3)) {
HXLINE(1425)											has = !(has);
            										}
            									}
            									else {
HXLINE( 451)										Float point1_x = ( (Float)(toX) );
HXDLIN( 451)										Float point1_y = ( (Float)(toY) );
HXDLIN( 451)										Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 451)										Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 451)										Float x4 = (point2_x - point1_x);
HXDLIN( 451)										Float y4 = (point2_y - point1_y);
HXLINE(1428)										has = (::Math_obj::sqrt(((x4 * x4) + (y4 * y4))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 451)										if ((view->shape == 3)) {
HXLINE(1429)											has = !(has);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has = (((::Math_obj::abs((( (Float)((toX - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((toY - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has = !((((::Math_obj::abs((( (Float)((toX - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((toY - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 451)						_hx_tmp12 = has;
            					}
HXDLIN( 451)					if (_hx_tmp12) {
HXLINE( 451)						int position1 = (((toY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + toX) * 4);
HXDLIN( 451)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 451)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 451)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 451)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 451)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            				else {
HXLINE( 451)					int position2 = (((toY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + toX) * 4);
HXDLIN( 451)					position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 451)					this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 451)					this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 451)					this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 451)					this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            				}
            			}
            		}
HXLINE( 452)		bool _hx_tmp20;
HXDLIN( 452)		bool _hx_tmp21;
HXDLIN( 452)		bool _hx_tmp22;
HXDLIN( 452)		if ((fromX >= 0)) {
HXLINE( 452)			_hx_tmp22 = (fromY >= 0);
            		}
            		else {
HXLINE( 452)			_hx_tmp22 = false;
            		}
HXDLIN( 452)		if (_hx_tmp22) {
HXLINE( 452)			_hx_tmp21 = (fromX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 452)			_hx_tmp21 = false;
            		}
HXDLIN( 452)		if (_hx_tmp21) {
HXLINE( 452)			_hx_tmp20 = (fromY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 452)			_hx_tmp20 = false;
            		}
HXDLIN( 452)		if (!(_hx_tmp20)) {
HXLINE( 452)			::cpp::Int64 this4 = _hx_int64_make(fromX,fromY);
HXDLIN( 452)			int _hx_tmp23 = _hx_int64_high(this4);
HXDLIN( 452)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp23,_hx_int64_low(this4))));
            		}
            		else {
HXLINE( 452)			bool _hx_tmp24;
HXDLIN( 452)			bool _hx_tmp25;
HXDLIN( 452)			bool _hx_tmp26;
HXDLIN( 452)			bool _hx_tmp27;
HXDLIN( 452)			int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 452)			if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 452)				int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)				_hx_tmp27 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 452)				_hx_tmp27 = true;
            			}
HXDLIN( 452)			if (!(_hx_tmp27)) {
HXLINE( 452)				int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 452)				_hx_tmp26 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 452)				_hx_tmp26 = true;
            			}
HXDLIN( 452)			if (!(_hx_tmp26)) {
HXLINE( 452)				int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)				_hx_tmp25 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 452)				_hx_tmp25 = true;
            			}
HXDLIN( 452)			if (!(_hx_tmp25)) {
HXLINE( 452)				_hx_tmp24 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 452)				_hx_tmp24 = true;
            			}
HXDLIN( 452)			if (_hx_tmp24) {
HXLINE( 452)				 ::vision::ds::ImageView v1 = null();
HXDLIN( 452)				bool _hx_tmp28;
HXDLIN( 452)				bool _hx_tmp29;
HXDLIN( 452)				bool _hx_tmp30;
HXDLIN( 452)				bool _hx_tmp31;
HXDLIN( 452)				bool _hx_tmp32;
HXDLIN( 452)				bool _hx_tmp33;
HXDLIN( 452)				int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 452)				if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 452)					int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)					_hx_tmp33 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 452)					_hx_tmp33 = true;
            				}
HXDLIN( 452)				if (!(_hx_tmp33)) {
HXLINE( 452)					int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 452)					_hx_tmp32 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 452)					_hx_tmp32 = true;
            				}
HXDLIN( 452)				if (!(_hx_tmp32)) {
HXLINE( 452)					int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)					_hx_tmp31 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 452)					_hx_tmp31 = true;
            				}
HXDLIN( 452)				if (!(_hx_tmp31)) {
HXLINE( 452)					_hx_tmp30 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 452)					_hx_tmp30 = true;
            				}
HXDLIN( 452)				if (!(_hx_tmp30)) {
HXLINE( 452)					_hx_tmp29 = ::hx::IsNull( v1 );
            				}
            				else {
HXLINE( 452)					_hx_tmp29 = false;
            				}
HXDLIN( 452)				if (_hx_tmp29) {
HXLINE( 452)					bool _hx_tmp34;
HXDLIN( 452)					bool _hx_tmp35;
HXDLIN( 452)					if ((fromX >= 0)) {
HXLINE( 452)						_hx_tmp35 = (fromY >= 0);
            					}
            					else {
HXLINE( 452)						_hx_tmp35 = false;
            					}
HXDLIN( 452)					if (_hx_tmp35) {
HXLINE( 452)						_hx_tmp34 = (fromX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 452)						_hx_tmp34 = false;
            					}
HXDLIN( 452)					if (_hx_tmp34) {
HXLINE( 452)						_hx_tmp28 = (fromY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 452)						_hx_tmp28 = false;
            					}
            				}
            				else {
HXLINE( 452)					bool has8 = false;
HXDLIN( 452)					 ::vision::ds::ImageView view1;
HXDLIN( 452)					if (::hx::IsNotNull( v1 )) {
HXLINE( 452)						view1 = v1;
            					}
            					else {
HXLINE( 452)						int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 452)						int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)						int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 452)						int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 452)						view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 452)					switch((int)(view1->shape)){
            						case (int)0: {
HXLINE( 452)							bool has9;
HXDLIN( 452)							bool has10;
HXDLIN( 452)							if ((fromX < (view1->x + view1->width))) {
HXLINE( 452)								has10 = (fromY < (view1->y + view1->height));
            							}
            							else {
HXLINE( 452)								has10 = false;
            							}
HXDLIN( 452)							if (has10) {
HXLINE( 452)								has9 = (fromX >= view1->x);
            							}
            							else {
HXLINE( 452)								has9 = false;
            							}
HXDLIN( 452)							if (has9) {
HXLINE( 452)								has8 = (fromY >= view1->y);
            							}
            							else {
HXLINE( 452)								has8 = false;
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 452)							bool has11;
HXDLIN( 452)							bool has12;
HXDLIN( 452)							bool has13;
HXDLIN( 452)							if ((fromX < (view1->x + view1->width))) {
HXLINE( 452)								has13 = (fromY < (view1->y + view1->height));
            							}
            							else {
HXLINE( 452)								has13 = false;
            							}
HXDLIN( 452)							if (has13) {
HXLINE( 452)								has12 = (fromX >= view1->x);
            							}
            							else {
HXLINE( 452)								has12 = false;
            							}
HXDLIN( 452)							if (has12) {
HXLINE( 452)								has11 = (fromY >= view1->y);
            							}
            							else {
HXLINE( 452)								has11 = false;
            							}
HXLINE(1400)							has8 = !(has11);
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 452)							if ((view1->width > view1->height)) {
HXLINE( 452)								Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 452)								Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 452)								Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 452)								Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 452)								Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 452)								Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 452)								Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 452)								::cpp::Int64 p2 = _hx_int64_make(fromX,fromY);
HXDLIN( 452)								Float x5 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 452)								Float y5 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 452)								Float has14 = ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)));
HXDLIN( 452)								Float x6 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 452)								Float y6 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)								has8 = ((has14 + ::Math_obj::sqrt(((x6 * x6) + (y6 * y6)))) <= view1->width);
HXLINE( 452)								if ((view1->shape == 3)) {
HXLINE(1416)									has8 = !(has8);
            								}
            							}
            							else {
HXLINE( 452)								if ((view1->height > view1->width)) {
HXLINE( 452)									Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 452)									Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 452)									Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 452)									Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 452)									Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 452)									Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 452)									Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 452)									::cpp::Int64 p3 = _hx_int64_make(fromX,fromY);
HXDLIN( 452)									Float x7 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 452)									Float y7 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 452)									Float has15 = ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)));
HXDLIN( 452)									Float x8 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 452)									Float y8 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)									has8 = ((has15 + ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)))) <= view1->height);
HXLINE( 452)									if ((view1->shape == 3)) {
HXLINE(1425)										has8 = !(has8);
            									}
            								}
            								else {
HXLINE( 452)									Float point1_x1 = ( (Float)(fromX) );
HXDLIN( 452)									Float point1_y1 = ( (Float)(fromY) );
HXDLIN( 452)									Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 452)									Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 452)									Float x9 = (point2_x1 - point1_x1);
HXDLIN( 452)									Float y9 = (point2_y1 - point1_y1);
HXLINE(1428)									has8 = (::Math_obj::sqrt(((x9 * x9) + (y9 * y9))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 452)									if ((view1->shape == 3)) {
HXLINE(1429)										has8 = !(has8);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has8 = (((::Math_obj::abs((( (Float)((fromX - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((fromY - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has8 = !((((::Math_obj::abs((( (Float)((fromX - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((fromY - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 452)					_hx_tmp28 = has8;
            				}
HXDLIN( 452)				if (_hx_tmp28) {
HXLINE( 452)					int position3 = (((fromY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + fromX) * 4);
HXDLIN( 452)					position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 452)					this1->b[position3] = ( (unsigned char)(((oldPixelResetColor >> 24) & 255)) );
HXDLIN( 452)					this1->b[(position3 + 1)] = ( (unsigned char)(((oldPixelResetColor >> 16) & 255)) );
HXDLIN( 452)					this1->b[(position3 + 2)] = ( (unsigned char)(((oldPixelResetColor >> 8) & 255)) );
HXDLIN( 452)					this1->b[(position3 + 3)] = ( (unsigned char)((oldPixelResetColor & 255)) );
            				}
            			}
            			else {
HXLINE( 452)				int position4 = (((fromY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + fromX) * 4);
HXDLIN( 452)				position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 452)				this1->b[position4] = ( (unsigned char)(((oldPixelResetColor >> 24) & 255)) );
HXDLIN( 452)				this1->b[(position4 + 1)] = ( (unsigned char)(((oldPixelResetColor >> 16) & 255)) );
HXDLIN( 452)				this1->b[(position4 + 2)] = ( (unsigned char)(((oldPixelResetColor >> 8) & 255)) );
HXDLIN( 452)				this1->b[(position4 + 3)] = ( (unsigned char)((oldPixelResetColor & 255)) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,movePixel,(void))

void Image_Impl__obj::moveSafePixel( ::haxe::io::Bytes this1,int fromX,int fromY,int toX,int toY,int oldPixelResetColor){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_464_moveSafePixel)
HXLINE( 465)		{
HXLINE( 465)			int x = toX;
HXDLIN( 465)			int y = toY;
HXDLIN( 465)			int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 465)			::Array< int > values = ::Array_obj< int >::__new(2)->init(0,fromX)->init(1,0);
HXDLIN( 465)			int max = values->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g = 0;
HXDLIN( 465)				int _g1 = values->length;
HXDLIN( 465)				while((_g < _g1)){
HXLINE( 465)					_g = (_g + 1);
HXDLIN( 465)					int i = (_g - 1);
HXDLIN( 465)					if ((values->__get(i) > max)) {
HXLINE( 688)						max = values->__get(i);
            					}
            				}
            			}
HXLINE( 465)			::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 465)			int min = values1->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g2 = 0;
HXDLIN( 465)				int _g3 = values1->length;
HXDLIN( 465)				while((_g2 < _g3)){
HXLINE( 465)					_g2 = (_g2 + 1);
HXDLIN( 465)					int i1 = (_g2 - 1);
HXDLIN( 465)					if ((values1->__get(i1) < min)) {
HXLINE( 652)						min = values1->__get(i1);
            					}
            				}
            			}
HXLINE( 465)			int x1 = min;
HXDLIN( 465)			int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 465)			::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,fromY)->init(1,0);
HXDLIN( 465)			int max1 = values2->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g4 = 0;
HXDLIN( 465)				int _g5 = values2->length;
HXDLIN( 465)				while((_g4 < _g5)){
HXLINE( 465)					_g4 = (_g4 + 1);
HXDLIN( 465)					int i2 = (_g4 - 1);
HXDLIN( 465)					if ((values2->__get(i2) > max1)) {
HXLINE( 688)						max1 = values2->__get(i2);
            					}
            				}
            			}
HXLINE( 465)			::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 465)			int min1 = values3->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g6 = 0;
HXDLIN( 465)				int _g7 = values3->length;
HXDLIN( 465)				while((_g6 < _g7)){
HXLINE( 465)					_g6 = (_g6 + 1);
HXDLIN( 465)					int i3 = (_g6 - 1);
HXDLIN( 465)					if ((values3->__get(i3) < min1)) {
HXLINE( 652)						min1 = values3->__get(i3);
            					}
            				}
            			}
HXLINE( 465)			int y1 = min1;
HXDLIN( 465)			bool _hx_tmp;
HXDLIN( 465)			bool _hx_tmp1;
HXDLIN( 465)			bool _hx_tmp2;
HXDLIN( 465)			if ((x1 >= 0)) {
HXLINE( 465)				_hx_tmp2 = (y1 >= 0);
            			}
            			else {
HXLINE( 465)				_hx_tmp2 = false;
            			}
HXDLIN( 465)			if (_hx_tmp2) {
HXLINE( 465)				_hx_tmp1 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 465)				_hx_tmp1 = false;
            			}
HXDLIN( 465)			if (_hx_tmp1) {
HXLINE( 465)				_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 465)				_hx_tmp = false;
            			}
HXDLIN( 465)			if (!(_hx_tmp)) {
HXLINE( 465)				::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 465)				int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 465)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            			}
HXDLIN( 465)			int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 465)			position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 465)			int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN( 465)			int ma2 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 465)			::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x)->init(1,0);
HXDLIN( 465)			int max2 = values4->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g8 = 0;
HXDLIN( 465)				int _g9 = values4->length;
HXDLIN( 465)				while((_g8 < _g9)){
HXLINE( 465)					_g8 = (_g8 + 1);
HXDLIN( 465)					int i4 = (_g8 - 1);
HXDLIN( 465)					if ((values4->__get(i4) > max2)) {
HXLINE( 688)						max2 = values4->__get(i4);
            					}
            				}
            			}
HXLINE( 465)			::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN( 465)			int min2 = values5->__get(0);
HXDLIN( 465)			int _g10 = 0;
HXDLIN( 465)			int _g11 = values5->length;
HXDLIN( 465)			while((_g10 < _g11)){
HXLINE( 465)				_g10 = (_g10 + 1);
HXDLIN( 465)				int i5 = (_g10 - 1);
HXDLIN( 465)				if ((values5->__get(i5) < min2)) {
HXLINE( 652)					min2 = values5->__get(i5);
            				}
            			}
HXLINE( 465)			x = min2;
HXDLIN( 465)			int ma3 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 465)			::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y)->init(1,0);
HXDLIN( 465)			int max3 = values6->__get(0);
HXDLIN( 465)			{
HXLINE( 465)				int _g12 = 0;
HXDLIN( 465)				int _g13 = values6->length;
HXDLIN( 465)				while((_g12 < _g13)){
HXLINE( 465)					_g12 = (_g12 + 1);
HXDLIN( 465)					int i6 = (_g12 - 1);
HXDLIN( 465)					if ((values6->__get(i6) > max3)) {
HXLINE( 688)						max3 = values6->__get(i6);
            					}
            				}
            			}
HXLINE( 465)			::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN( 465)			int min3 = values7->__get(0);
HXDLIN( 465)			int _g14 = 0;
HXDLIN( 465)			int _g15 = values7->length;
HXDLIN( 465)			while((_g14 < _g15)){
HXLINE( 465)				_g14 = (_g14 + 1);
HXDLIN( 465)				int i7 = (_g14 - 1);
HXDLIN( 465)				if ((values7->__get(i7) < min3)) {
HXLINE( 652)					min3 = values7->__get(i7);
            				}
            			}
HXLINE( 465)			y = min3;
HXDLIN( 465)			bool _hx_tmp4;
HXDLIN( 465)			bool _hx_tmp5;
HXDLIN( 465)			bool _hx_tmp6;
HXDLIN( 465)			bool _hx_tmp7;
HXDLIN( 465)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 465)			if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 465)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)				_hx_tmp7 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 465)				_hx_tmp7 = true;
            			}
HXDLIN( 465)			if (!(_hx_tmp7)) {
HXLINE( 465)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 465)				_hx_tmp6 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 465)				_hx_tmp6 = true;
            			}
HXDLIN( 465)			if (!(_hx_tmp6)) {
HXLINE( 465)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)				_hx_tmp5 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 465)				_hx_tmp5 = true;
            			}
HXDLIN( 465)			if (!(_hx_tmp5)) {
HXLINE( 465)				_hx_tmp4 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 465)				_hx_tmp4 = true;
            			}
HXDLIN( 465)			if (_hx_tmp4) {
HXLINE( 465)				 ::vision::ds::ImageView v = null();
HXDLIN( 465)				bool _hx_tmp8;
HXDLIN( 465)				bool _hx_tmp9;
HXDLIN( 465)				bool _hx_tmp10;
HXDLIN( 465)				bool _hx_tmp11;
HXDLIN( 465)				bool _hx_tmp12;
HXDLIN( 465)				bool _hx_tmp13;
HXDLIN( 465)				int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 465)				if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 465)					int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)					_hx_tmp13 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 465)					_hx_tmp13 = true;
            				}
HXDLIN( 465)				if (!(_hx_tmp13)) {
HXLINE( 465)					int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 465)					_hx_tmp12 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 465)					_hx_tmp12 = true;
            				}
HXDLIN( 465)				if (!(_hx_tmp12)) {
HXLINE( 465)					int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)					_hx_tmp11 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 465)					_hx_tmp11 = true;
            				}
HXDLIN( 465)				if (!(_hx_tmp11)) {
HXLINE( 465)					_hx_tmp10 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 465)					_hx_tmp10 = true;
            				}
HXDLIN( 465)				if (!(_hx_tmp10)) {
HXLINE( 465)					_hx_tmp9 = ::hx::IsNull( v );
            				}
            				else {
HXLINE( 465)					_hx_tmp9 = false;
            				}
HXDLIN( 465)				if (_hx_tmp9) {
HXLINE( 465)					bool _hx_tmp14;
HXDLIN( 465)					bool _hx_tmp15;
HXDLIN( 465)					if ((x >= 0)) {
HXLINE( 465)						_hx_tmp15 = (y >= 0);
            					}
            					else {
HXLINE( 465)						_hx_tmp15 = false;
            					}
HXDLIN( 465)					if (_hx_tmp15) {
HXLINE( 465)						_hx_tmp14 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 465)						_hx_tmp14 = false;
            					}
HXDLIN( 465)					if (_hx_tmp14) {
HXLINE( 465)						_hx_tmp8 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 465)						_hx_tmp8 = false;
            					}
            				}
            				else {
HXLINE( 465)					bool has = false;
HXDLIN( 465)					 ::vision::ds::ImageView view;
HXDLIN( 465)					if (::hx::IsNotNull( v )) {
HXLINE( 465)						view = v;
            					}
            					else {
HXLINE( 465)						int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 465)						int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)						int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 465)						int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 465)						view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 465)					switch((int)(view->shape)){
            						case (int)0: {
HXLINE( 465)							bool has1;
HXDLIN( 465)							bool has2;
HXDLIN( 465)							if ((x < (view->x + view->width))) {
HXLINE( 465)								has2 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 465)								has2 = false;
            							}
HXDLIN( 465)							if (has2) {
HXLINE( 465)								has1 = (x >= view->x);
            							}
            							else {
HXLINE( 465)								has1 = false;
            							}
HXDLIN( 465)							if (has1) {
HXLINE( 465)								has = (y >= view->y);
            							}
            							else {
HXLINE( 465)								has = false;
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 465)							bool has3;
HXDLIN( 465)							bool has4;
HXDLIN( 465)							bool has5;
HXDLIN( 465)							if ((x < (view->x + view->width))) {
HXLINE( 465)								has5 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 465)								has5 = false;
            							}
HXDLIN( 465)							if (has5) {
HXLINE( 465)								has4 = (x >= view->x);
            							}
            							else {
HXLINE( 465)								has4 = false;
            							}
HXDLIN( 465)							if (has4) {
HXLINE( 465)								has3 = (y >= view->y);
            							}
            							else {
HXLINE( 465)								has3 = false;
            							}
HXLINE(1400)							has = !(has3);
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 465)							if ((view->width > view->height)) {
HXLINE( 465)								Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 465)								Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 465)								Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 465)								Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 465)								Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 465)								Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 465)								Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 465)								::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 465)								Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 465)								Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 465)								Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 465)								Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 465)								Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)								has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 465)								if ((view->shape == 3)) {
HXLINE(1416)									has = !(has);
            								}
            							}
            							else {
HXLINE( 465)								if ((view->height > view->width)) {
HXLINE( 465)									Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 465)									Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 465)									Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 465)									Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 465)									Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 465)									Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 465)									Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 465)									::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 465)									Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 465)									Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 465)									Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 465)									Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 465)									Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)									has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 465)									if ((view->shape == 3)) {
HXLINE(1425)										has = !(has);
            									}
            								}
            								else {
HXLINE( 465)									Float point1_x = ( (Float)(x) );
HXDLIN( 465)									Float point1_y = ( (Float)(y) );
HXDLIN( 465)									Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 465)									Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 465)									Float x6 = (point2_x - point1_x);
HXDLIN( 465)									Float y6 = (point2_y - point1_y);
HXLINE(1428)									has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 465)									if ((view->shape == 3)) {
HXLINE(1429)										has = !(has);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 465)					_hx_tmp8 = has;
            				}
HXDLIN( 465)				if (_hx_tmp8) {
HXLINE( 465)					int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 465)					position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 465)					this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 465)					this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 465)					this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 465)					this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            				}
            			}
            			else {
HXLINE( 465)				int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 465)				position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 465)				this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 465)				this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 465)				this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 465)				this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            			}
            		}
HXLINE( 466)		{
HXLINE( 466)			int x7 = fromX;
HXDLIN( 466)			int y7 = fromY;
HXDLIN( 466)			int ma4 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 466)			::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x7)->init(1,0);
HXDLIN( 466)			int max4 = values8->__get(0);
HXDLIN( 466)			{
HXLINE( 466)				int _g16 = 0;
HXDLIN( 466)				int _g17 = values8->length;
HXDLIN( 466)				while((_g16 < _g17)){
HXLINE( 466)					_g16 = (_g16 + 1);
HXDLIN( 466)					int i8 = (_g16 - 1);
HXDLIN( 466)					if ((values8->__get(i8) > max4)) {
HXLINE( 688)						max4 = values8->__get(i8);
            					}
            				}
            			}
HXLINE( 466)			::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN( 466)			int min4 = values9->__get(0);
HXDLIN( 466)			int _g18 = 0;
HXDLIN( 466)			int _g19 = values9->length;
HXDLIN( 466)			while((_g18 < _g19)){
HXLINE( 466)				_g18 = (_g18 + 1);
HXDLIN( 466)				int i9 = (_g18 - 1);
HXDLIN( 466)				if ((values9->__get(i9) < min4)) {
HXLINE( 652)					min4 = values9->__get(i9);
            				}
            			}
HXLINE( 466)			x7 = min4;
HXDLIN( 466)			int ma5 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 466)			::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y7)->init(1,0);
HXDLIN( 466)			int max5 = values10->__get(0);
HXDLIN( 466)			{
HXLINE( 466)				int _g20 = 0;
HXDLIN( 466)				int _g21 = values10->length;
HXDLIN( 466)				while((_g20 < _g21)){
HXLINE( 466)					_g20 = (_g20 + 1);
HXDLIN( 466)					int i10 = (_g20 - 1);
HXDLIN( 466)					if ((values10->__get(i10) > max5)) {
HXLINE( 688)						max5 = values10->__get(i10);
            					}
            				}
            			}
HXLINE( 466)			::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN( 466)			int min5 = values11->__get(0);
HXDLIN( 466)			int _g22 = 0;
HXDLIN( 466)			int _g23 = values11->length;
HXDLIN( 466)			while((_g22 < _g23)){
HXLINE( 466)				_g22 = (_g22 + 1);
HXDLIN( 466)				int i11 = (_g22 - 1);
HXDLIN( 466)				if ((values11->__get(i11) < min5)) {
HXLINE( 652)					min5 = values11->__get(i11);
            				}
            			}
HXLINE( 466)			y7 = min5;
HXDLIN( 466)			bool _hx_tmp16;
HXDLIN( 466)			bool _hx_tmp17;
HXDLIN( 466)			bool _hx_tmp18;
HXDLIN( 466)			bool _hx_tmp19;
HXDLIN( 466)			int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 466)			if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 466)				int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)				_hx_tmp19 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 466)				_hx_tmp19 = true;
            			}
HXDLIN( 466)			if (!(_hx_tmp19)) {
HXLINE( 466)				int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 466)				_hx_tmp18 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 466)				_hx_tmp18 = true;
            			}
HXDLIN( 466)			if (!(_hx_tmp18)) {
HXLINE( 466)				int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)				_hx_tmp17 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 466)				_hx_tmp17 = true;
            			}
HXDLIN( 466)			if (!(_hx_tmp17)) {
HXLINE( 466)				_hx_tmp16 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 466)				_hx_tmp16 = true;
            			}
HXDLIN( 466)			if (_hx_tmp16) {
HXLINE( 466)				 ::vision::ds::ImageView v1 = null();
HXDLIN( 466)				bool _hx_tmp20;
HXDLIN( 466)				bool _hx_tmp21;
HXDLIN( 466)				bool _hx_tmp22;
HXDLIN( 466)				bool _hx_tmp23;
HXDLIN( 466)				bool _hx_tmp24;
HXDLIN( 466)				bool _hx_tmp25;
HXDLIN( 466)				int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 466)				if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 466)					int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)					_hx_tmp25 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 466)					_hx_tmp25 = true;
            				}
HXDLIN( 466)				if (!(_hx_tmp25)) {
HXLINE( 466)					int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 466)					_hx_tmp24 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 466)					_hx_tmp24 = true;
            				}
HXDLIN( 466)				if (!(_hx_tmp24)) {
HXLINE( 466)					int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)					_hx_tmp23 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 466)					_hx_tmp23 = true;
            				}
HXDLIN( 466)				if (!(_hx_tmp23)) {
HXLINE( 466)					_hx_tmp22 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 466)					_hx_tmp22 = true;
            				}
HXDLIN( 466)				if (!(_hx_tmp22)) {
HXLINE( 466)					_hx_tmp21 = ::hx::IsNull( v1 );
            				}
            				else {
HXLINE( 466)					_hx_tmp21 = false;
            				}
HXDLIN( 466)				if (_hx_tmp21) {
HXLINE( 466)					bool _hx_tmp26;
HXDLIN( 466)					bool _hx_tmp27;
HXDLIN( 466)					if ((x7 >= 0)) {
HXLINE( 466)						_hx_tmp27 = (y7 >= 0);
            					}
            					else {
HXLINE( 466)						_hx_tmp27 = false;
            					}
HXDLIN( 466)					if (_hx_tmp27) {
HXLINE( 466)						_hx_tmp26 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 466)						_hx_tmp26 = false;
            					}
HXDLIN( 466)					if (_hx_tmp26) {
HXLINE( 466)						_hx_tmp20 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 466)						_hx_tmp20 = false;
            					}
            				}
            				else {
HXLINE( 466)					bool has8 = false;
HXDLIN( 466)					 ::vision::ds::ImageView view1;
HXDLIN( 466)					if (::hx::IsNotNull( v1 )) {
HXLINE( 466)						view1 = v1;
            					}
            					else {
HXLINE( 466)						int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 466)						int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)						int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 466)						int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 466)						view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 466)					switch((int)(view1->shape)){
            						case (int)0: {
HXLINE( 466)							bool has9;
HXDLIN( 466)							bool has10;
HXDLIN( 466)							if ((x7 < (view1->x + view1->width))) {
HXLINE( 466)								has10 = (y7 < (view1->y + view1->height));
            							}
            							else {
HXLINE( 466)								has10 = false;
            							}
HXDLIN( 466)							if (has10) {
HXLINE( 466)								has9 = (x7 >= view1->x);
            							}
            							else {
HXLINE( 466)								has9 = false;
            							}
HXDLIN( 466)							if (has9) {
HXLINE( 466)								has8 = (y7 >= view1->y);
            							}
            							else {
HXLINE( 466)								has8 = false;
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 466)							bool has11;
HXDLIN( 466)							bool has12;
HXDLIN( 466)							bool has13;
HXDLIN( 466)							if ((x7 < (view1->x + view1->width))) {
HXLINE( 466)								has13 = (y7 < (view1->y + view1->height));
            							}
            							else {
HXLINE( 466)								has13 = false;
            							}
HXDLIN( 466)							if (has13) {
HXLINE( 466)								has12 = (x7 >= view1->x);
            							}
            							else {
HXLINE( 466)								has12 = false;
            							}
HXDLIN( 466)							if (has12) {
HXLINE( 466)								has11 = (y7 >= view1->y);
            							}
            							else {
HXLINE( 466)								has11 = false;
            							}
HXLINE(1400)							has8 = !(has11);
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 466)							if ((view1->width > view1->height)) {
HXLINE( 466)								Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 466)								Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 466)								Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 466)								Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 466)								Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 466)								Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 466)								Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 466)								::cpp::Int64 p2 = _hx_int64_make(x7,y7);
HXDLIN( 466)								Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 466)								Float y8 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 466)								Float has14 = ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)));
HXDLIN( 466)								Float x9 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 466)								Float y9 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)								has8 = ((has14 + ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)))) <= view1->width);
HXLINE( 466)								if ((view1->shape == 3)) {
HXLINE(1416)									has8 = !(has8);
            								}
            							}
            							else {
HXLINE( 466)								if ((view1->height > view1->width)) {
HXLINE( 466)									Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 466)									Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 466)									Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 466)									Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 466)									Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 466)									Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 466)									Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 466)									::cpp::Int64 p3 = _hx_int64_make(x7,y7);
HXDLIN( 466)									Float x10 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 466)									Float y10 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 466)									Float has15 = ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)));
HXDLIN( 466)									Float x11 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 466)									Float y11 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)									has8 = ((has15 + ::Math_obj::sqrt(((x11 * x11) + (y11 * y11)))) <= view1->height);
HXLINE( 466)									if ((view1->shape == 3)) {
HXLINE(1425)										has8 = !(has8);
            									}
            								}
            								else {
HXLINE( 466)									Float point1_x1 = ( (Float)(x7) );
HXDLIN( 466)									Float point1_y1 = ( (Float)(y7) );
HXDLIN( 466)									Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 466)									Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 466)									Float x12 = (point2_x1 - point1_x1);
HXDLIN( 466)									Float y12 = (point2_y1 - point1_y1);
HXLINE(1428)									has8 = (::Math_obj::sqrt(((x12 * x12) + (y12 * y12))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 466)									if ((view1->shape == 3)) {
HXLINE(1429)										has8 = !(has8);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has8 = (((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has8 = !((((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 466)					_hx_tmp20 = has8;
            				}
HXDLIN( 466)				if (_hx_tmp20) {
HXLINE( 466)					int position3 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 466)					position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 466)					this1->b[position3] = ( (unsigned char)(((oldPixelResetColor >> 24) & 255)) );
HXDLIN( 466)					this1->b[(position3 + 1)] = ( (unsigned char)(((oldPixelResetColor >> 16) & 255)) );
HXDLIN( 466)					this1->b[(position3 + 2)] = ( (unsigned char)(((oldPixelResetColor >> 8) & 255)) );
HXDLIN( 466)					this1->b[(position3 + 3)] = ( (unsigned char)((oldPixelResetColor & 255)) );
            				}
            			}
            			else {
HXLINE( 466)				int position4 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 466)				position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 466)				this1->b[position4] = ( (unsigned char)(((oldPixelResetColor >> 24) & 255)) );
HXDLIN( 466)				this1->b[(position4 + 1)] = ( (unsigned char)(((oldPixelResetColor >> 16) & 255)) );
HXDLIN( 466)				this1->b[(position4 + 2)] = ( (unsigned char)(((oldPixelResetColor >> 8) & 255)) );
HXDLIN( 466)				this1->b[(position4 + 3)] = ( (unsigned char)((oldPixelResetColor & 255)) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,moveSafePixel,(void))

void Image_Impl__obj::moveFloatingPixel( ::haxe::io::Bytes this1,Float fromX,Float fromY,Float toX,Float toY,int oldPixelResetColor){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_480_moveFloatingPixel)
HXLINE( 481)		{
HXLINE( 481)			Float x = fromX;
HXDLIN( 481)			Float y = fromY;
HXDLIN( 481)			bool _hx_tmp;
HXDLIN( 481)			Float x1 = ( (Float)(::Math_obj::ceil(x)) );
HXDLIN( 481)			Float y1 = ( (Float)(::Math_obj::ceil(y)) );
HXDLIN( 481)			bool _hx_tmp1;
HXDLIN( 481)			bool _hx_tmp2;
HXDLIN( 481)			bool _hx_tmp3;
HXDLIN( 481)			if ((x1 >= 0)) {
HXLINE( 481)				_hx_tmp3 = (y1 >= 0);
            			}
            			else {
HXLINE( 481)				_hx_tmp3 = false;
            			}
HXDLIN( 481)			if (_hx_tmp3) {
HXLINE( 481)				_hx_tmp2 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				_hx_tmp2 = false;
            			}
HXDLIN( 481)			if (_hx_tmp2) {
HXLINE( 481)				_hx_tmp1 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				_hx_tmp1 = false;
            			}
HXDLIN( 481)			if (_hx_tmp1) {
HXLINE( 481)				Float x2 = ( (Float)(::Math_obj::floor(x)) );
HXDLIN( 481)				Float y2 = ( (Float)(::Math_obj::floor(y)) );
HXDLIN( 481)				bool _hx_tmp4;
HXDLIN( 481)				bool _hx_tmp5;
HXDLIN( 481)				bool _hx_tmp6;
HXDLIN( 481)				if ((x2 >= 0)) {
HXLINE( 481)					_hx_tmp6 = (y2 >= 0);
            				}
            				else {
HXLINE( 481)					_hx_tmp6 = false;
            				}
HXDLIN( 481)				if (_hx_tmp6) {
HXLINE( 481)					_hx_tmp5 = (x2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 481)					_hx_tmp5 = false;
            				}
HXDLIN( 481)				if (_hx_tmp5) {
HXLINE( 481)					_hx_tmp4 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 481)					_hx_tmp4 = false;
            				}
HXDLIN( 481)				_hx_tmp = !(_hx_tmp4);
            			}
            			else {
HXLINE( 481)				_hx_tmp = true;
            			}
HXDLIN( 481)			if (_hx_tmp) {
HXLINE( 247)				x = ::vision::tools::MathTools_obj::boundFloat(x,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXLINE( 248)				y = ::vision::tools::MathTools_obj::boundFloat(y,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
            			}
HXLINE( 481)			Float yFraction = (y - ( (Float)(::Std_obj::_hx_int(y)) ));
HXDLIN( 481)			Float xFraction = (x - ( (Float)(::Std_obj::_hx_int(x)) ));
HXDLIN( 481)			Float red = (( (Float)(1) ) - yFraction);
HXDLIN( 481)			int x3 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y3 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			bool red1;
HXDLIN( 481)			bool red2;
HXDLIN( 481)			bool red3;
HXDLIN( 481)			if ((x3 >= 0)) {
HXLINE( 481)				red3 = (y3 >= 0);
            			}
            			else {
HXLINE( 481)				red3 = false;
            			}
HXDLIN( 481)			if (red3) {
HXLINE( 481)				red2 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				red2 = false;
            			}
HXDLIN( 481)			if (red2) {
HXLINE( 481)				red1 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				red1 = false;
            			}
HXDLIN( 481)			if (!(red1)) {
HXLINE( 481)				::cpp::Int64 this2 = _hx_int64_make(x3,y3);
HXDLIN( 481)				int red4 = _hx_int64_high(this2);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red4,_hx_int64_low(this2))));
            			}
HXDLIN( 481)			int position = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 481)			position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float red5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )) >> 16) & 255)) ));
HXDLIN( 481)			int x4 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y4 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x4)->init(1,0);
HXDLIN( 481)			int max = values->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g = 0;
HXDLIN( 481)				int _g1 = values->length;
HXDLIN( 481)				while((_g < _g1)){
HXLINE( 481)					_g = (_g + 1);
HXDLIN( 481)					int i = (_g - 1);
HXDLIN( 481)					if ((values->__get(i) > max)) {
HXLINE( 688)						max = values->__get(i);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 481)			int min = values1->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g2 = 0;
HXDLIN( 481)				int _g3 = values1->length;
HXDLIN( 481)				while((_g2 < _g3)){
HXLINE( 481)					_g2 = (_g2 + 1);
HXDLIN( 481)					int i1 = (_g2 - 1);
HXDLIN( 481)					if ((values1->__get(i1) < min)) {
HXLINE( 652)						min = values1->__get(i1);
            					}
            				}
            			}
HXLINE( 481)			int x5 = min;
HXDLIN( 481)			int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y4)->init(1,0);
HXDLIN( 481)			int max1 = values2->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g4 = 0;
HXDLIN( 481)				int _g5 = values2->length;
HXDLIN( 481)				while((_g4 < _g5)){
HXLINE( 481)					_g4 = (_g4 + 1);
HXDLIN( 481)					int i2 = (_g4 - 1);
HXDLIN( 481)					if ((values2->__get(i2) > max1)) {
HXLINE( 688)						max1 = values2->__get(i2);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 481)			int min1 = values3->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g6 = 0;
HXDLIN( 481)				int _g7 = values3->length;
HXDLIN( 481)				while((_g6 < _g7)){
HXLINE( 481)					_g6 = (_g6 + 1);
HXDLIN( 481)					int i3 = (_g6 - 1);
HXDLIN( 481)					if ((values3->__get(i3) < min1)) {
HXLINE( 652)						min1 = values3->__get(i3);
            					}
            				}
            			}
HXLINE( 481)			int y5 = min1;
HXDLIN( 481)			bool red6;
HXDLIN( 481)			bool red7;
HXDLIN( 481)			bool red8;
HXDLIN( 481)			if ((x5 >= 0)) {
HXLINE( 481)				red8 = (y5 >= 0);
            			}
            			else {
HXLINE( 481)				red8 = false;
            			}
HXDLIN( 481)			if (red8) {
HXLINE( 481)				red7 = (x5 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				red7 = false;
            			}
HXDLIN( 481)			if (red7) {
HXLINE( 481)				red6 = (y5 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				red6 = false;
            			}
HXDLIN( 481)			if (!(red6)) {
HXLINE( 481)				::cpp::Int64 this3 = _hx_int64_make(x5,y5);
HXDLIN( 481)				int red9 = _hx_int64_high(this3);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red9,_hx_int64_low(this3))));
            			}
HXDLIN( 481)			int position1 = (((y5 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x5) * 4);
HXDLIN( 481)			position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float red10 = (red * (red5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )) >> 16) & 255)) ))));
HXDLIN( 481)			Float red11 = (( (Float)(1) ) - xFraction);
HXDLIN( 481)			int x6 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y6 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma2 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x6)->init(1,0);
HXDLIN( 481)			int max2 = values4->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g8 = 0;
HXDLIN( 481)				int _g9 = values4->length;
HXDLIN( 481)				while((_g8 < _g9)){
HXLINE( 481)					_g8 = (_g8 + 1);
HXDLIN( 481)					int i4 = (_g8 - 1);
HXDLIN( 481)					if ((values4->__get(i4) > max2)) {
HXLINE( 688)						max2 = values4->__get(i4);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN( 481)			int min2 = values5->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g10 = 0;
HXDLIN( 481)				int _g11 = values5->length;
HXDLIN( 481)				while((_g10 < _g11)){
HXLINE( 481)					_g10 = (_g10 + 1);
HXDLIN( 481)					int i5 = (_g10 - 1);
HXDLIN( 481)					if ((values5->__get(i5) < min2)) {
HXLINE( 652)						min2 = values5->__get(i5);
            					}
            				}
            			}
HXLINE( 481)			int x7 = min2;
HXDLIN( 481)			int ma3 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y6)->init(1,0);
HXDLIN( 481)			int max3 = values6->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g12 = 0;
HXDLIN( 481)				int _g13 = values6->length;
HXDLIN( 481)				while((_g12 < _g13)){
HXLINE( 481)					_g12 = (_g12 + 1);
HXDLIN( 481)					int i6 = (_g12 - 1);
HXDLIN( 481)					if ((values6->__get(i6) > max3)) {
HXLINE( 688)						max3 = values6->__get(i6);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN( 481)			int min3 = values7->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g14 = 0;
HXDLIN( 481)				int _g15 = values7->length;
HXDLIN( 481)				while((_g14 < _g15)){
HXLINE( 481)					_g14 = (_g14 + 1);
HXDLIN( 481)					int i7 = (_g14 - 1);
HXDLIN( 481)					if ((values7->__get(i7) < min3)) {
HXLINE( 652)						min3 = values7->__get(i7);
            					}
            				}
            			}
HXLINE( 481)			int y7 = min3;
HXDLIN( 481)			bool red12;
HXDLIN( 481)			bool red13;
HXDLIN( 481)			bool red14;
HXDLIN( 481)			if ((x7 >= 0)) {
HXLINE( 481)				red14 = (y7 >= 0);
            			}
            			else {
HXLINE( 481)				red14 = false;
            			}
HXDLIN( 481)			if (red14) {
HXLINE( 481)				red13 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				red13 = false;
            			}
HXDLIN( 481)			if (red13) {
HXLINE( 481)				red12 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				red12 = false;
            			}
HXDLIN( 481)			if (!(red12)) {
HXLINE( 481)				::cpp::Int64 this4 = _hx_int64_make(x7,y7);
HXDLIN( 481)				int red15 = _hx_int64_high(this4);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red15,_hx_int64_low(this4))));
            			}
HXDLIN( 481)			int position2 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 481)			position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float red16 = (red11 * ( (Float)(((((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) )) >> 16) & 255)) ));
HXDLIN( 481)			int x8 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y8 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma4 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x8)->init(1,0);
HXDLIN( 481)			int max4 = values8->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g16 = 0;
HXDLIN( 481)				int _g17 = values8->length;
HXDLIN( 481)				while((_g16 < _g17)){
HXLINE( 481)					_g16 = (_g16 + 1);
HXDLIN( 481)					int i8 = (_g16 - 1);
HXDLIN( 481)					if ((values8->__get(i8) > max4)) {
HXLINE( 688)						max4 = values8->__get(i8);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN( 481)			int min4 = values9->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g18 = 0;
HXDLIN( 481)				int _g19 = values9->length;
HXDLIN( 481)				while((_g18 < _g19)){
HXLINE( 481)					_g18 = (_g18 + 1);
HXDLIN( 481)					int i9 = (_g18 - 1);
HXDLIN( 481)					if ((values9->__get(i9) < min4)) {
HXLINE( 652)						min4 = values9->__get(i9);
            					}
            				}
            			}
HXLINE( 481)			int x9 = min4;
HXDLIN( 481)			int ma5 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y8)->init(1,0);
HXDLIN( 481)			int max5 = values10->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g20 = 0;
HXDLIN( 481)				int _g21 = values10->length;
HXDLIN( 481)				while((_g20 < _g21)){
HXLINE( 481)					_g20 = (_g20 + 1);
HXDLIN( 481)					int i10 = (_g20 - 1);
HXDLIN( 481)					if ((values10->__get(i10) > max5)) {
HXLINE( 688)						max5 = values10->__get(i10);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN( 481)			int min5 = values11->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g22 = 0;
HXDLIN( 481)				int _g23 = values11->length;
HXDLIN( 481)				while((_g22 < _g23)){
HXLINE( 481)					_g22 = (_g22 + 1);
HXDLIN( 481)					int i11 = (_g22 - 1);
HXDLIN( 481)					if ((values11->__get(i11) < min5)) {
HXLINE( 652)						min5 = values11->__get(i11);
            					}
            				}
            			}
HXLINE( 481)			int y9 = min5;
HXDLIN( 481)			bool red17;
HXDLIN( 481)			bool red18;
HXDLIN( 481)			bool red19;
HXDLIN( 481)			if ((x9 >= 0)) {
HXLINE( 481)				red19 = (y9 >= 0);
            			}
            			else {
HXLINE( 481)				red19 = false;
            			}
HXDLIN( 481)			if (red19) {
HXLINE( 481)				red18 = (x9 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				red18 = false;
            			}
HXDLIN( 481)			if (red18) {
HXLINE( 481)				red17 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				red17 = false;
            			}
HXDLIN( 481)			if (!(red17)) {
HXLINE( 481)				::cpp::Int64 this5 = _hx_int64_make(x9,y9);
HXDLIN( 481)				int red20 = _hx_int64_high(this5);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red20,_hx_int64_low(this5))));
            			}
HXDLIN( 481)			int position3 = (((y9 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 481)			position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			int red21 = ::Std_obj::_hx_int((red10 + (yFraction * (red16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) )) >> 16) & 255)) ))))));
HXDLIN( 481)			Float green = (( (Float)(1) ) - yFraction);
HXDLIN( 481)			int x10 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y10 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			bool green1;
HXDLIN( 481)			bool green2;
HXDLIN( 481)			bool green3;
HXDLIN( 481)			if ((x10 >= 0)) {
HXLINE( 481)				green3 = (y10 >= 0);
            			}
            			else {
HXLINE( 481)				green3 = false;
            			}
HXDLIN( 481)			if (green3) {
HXLINE( 481)				green2 = (x10 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				green2 = false;
            			}
HXDLIN( 481)			if (green2) {
HXLINE( 481)				green1 = (y10 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				green1 = false;
            			}
HXDLIN( 481)			if (!(green1)) {
HXLINE( 481)				::cpp::Int64 this6 = _hx_int64_make(x10,y10);
HXDLIN( 481)				int green4 = _hx_int64_high(this6);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green4,_hx_int64_low(this6))));
            			}
HXDLIN( 481)			int position4 = (((y10 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x10) * 4);
HXDLIN( 481)			position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float green5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position4)) ) << 24) | (( (int)(this1->b->__get((position4 + 1))) ) << 16)) | (( (int)(this1->b->__get((position4 + 2))) ) << 8)) | ( (int)(this1->b->__get((position4 + 3))) )) >> 8) & 255)) ));
HXDLIN( 481)			int x11 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y11 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			int ma6 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values12 = ::Array_obj< int >::__new(2)->init(0,x11)->init(1,0);
HXDLIN( 481)			int max6 = values12->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g24 = 0;
HXDLIN( 481)				int _g25 = values12->length;
HXDLIN( 481)				while((_g24 < _g25)){
HXLINE( 481)					_g24 = (_g24 + 1);
HXDLIN( 481)					int i12 = (_g24 - 1);
HXDLIN( 481)					if ((values12->__get(i12) > max6)) {
HXLINE( 688)						max6 = values12->__get(i12);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values13 = ::Array_obj< int >::__new(2)->init(0,max6)->init(1,ma6);
HXDLIN( 481)			int min6 = values13->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g26 = 0;
HXDLIN( 481)				int _g27 = values13->length;
HXDLIN( 481)				while((_g26 < _g27)){
HXLINE( 481)					_g26 = (_g26 + 1);
HXDLIN( 481)					int i13 = (_g26 - 1);
HXDLIN( 481)					if ((values13->__get(i13) < min6)) {
HXLINE( 652)						min6 = values13->__get(i13);
            					}
            				}
            			}
HXLINE( 481)			int x12 = min6;
HXDLIN( 481)			int ma7 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values14 = ::Array_obj< int >::__new(2)->init(0,y11)->init(1,0);
HXDLIN( 481)			int max7 = values14->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g28 = 0;
HXDLIN( 481)				int _g29 = values14->length;
HXDLIN( 481)				while((_g28 < _g29)){
HXLINE( 481)					_g28 = (_g28 + 1);
HXDLIN( 481)					int i14 = (_g28 - 1);
HXDLIN( 481)					if ((values14->__get(i14) > max7)) {
HXLINE( 688)						max7 = values14->__get(i14);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values15 = ::Array_obj< int >::__new(2)->init(0,max7)->init(1,ma7);
HXDLIN( 481)			int min7 = values15->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g30 = 0;
HXDLIN( 481)				int _g31 = values15->length;
HXDLIN( 481)				while((_g30 < _g31)){
HXLINE( 481)					_g30 = (_g30 + 1);
HXDLIN( 481)					int i15 = (_g30 - 1);
HXDLIN( 481)					if ((values15->__get(i15) < min7)) {
HXLINE( 652)						min7 = values15->__get(i15);
            					}
            				}
            			}
HXLINE( 481)			int y12 = min7;
HXDLIN( 481)			bool green6;
HXDLIN( 481)			bool green7;
HXDLIN( 481)			bool green8;
HXDLIN( 481)			if ((x12 >= 0)) {
HXLINE( 481)				green8 = (y12 >= 0);
            			}
            			else {
HXLINE( 481)				green8 = false;
            			}
HXDLIN( 481)			if (green8) {
HXLINE( 481)				green7 = (x12 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				green7 = false;
            			}
HXDLIN( 481)			if (green7) {
HXLINE( 481)				green6 = (y12 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				green6 = false;
            			}
HXDLIN( 481)			if (!(green6)) {
HXLINE( 481)				::cpp::Int64 this7 = _hx_int64_make(x12,y12);
HXDLIN( 481)				int green9 = _hx_int64_high(this7);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green9,_hx_int64_low(this7))));
            			}
HXDLIN( 481)			int position5 = (((y12 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x12) * 4);
HXDLIN( 481)			position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float green10 = (green * (green5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) )) >> 8) & 255)) ))));
HXDLIN( 481)			Float green11 = (( (Float)(1) ) - xFraction);
HXDLIN( 481)			int x13 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y13 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma8 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values16 = ::Array_obj< int >::__new(2)->init(0,x13)->init(1,0);
HXDLIN( 481)			int max8 = values16->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g32 = 0;
HXDLIN( 481)				int _g33 = values16->length;
HXDLIN( 481)				while((_g32 < _g33)){
HXLINE( 481)					_g32 = (_g32 + 1);
HXDLIN( 481)					int i16 = (_g32 - 1);
HXDLIN( 481)					if ((values16->__get(i16) > max8)) {
HXLINE( 688)						max8 = values16->__get(i16);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values17 = ::Array_obj< int >::__new(2)->init(0,max8)->init(1,ma8);
HXDLIN( 481)			int min8 = values17->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g34 = 0;
HXDLIN( 481)				int _g35 = values17->length;
HXDLIN( 481)				while((_g34 < _g35)){
HXLINE( 481)					_g34 = (_g34 + 1);
HXDLIN( 481)					int i17 = (_g34 - 1);
HXDLIN( 481)					if ((values17->__get(i17) < min8)) {
HXLINE( 652)						min8 = values17->__get(i17);
            					}
            				}
            			}
HXLINE( 481)			int x14 = min8;
HXDLIN( 481)			int ma9 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values18 = ::Array_obj< int >::__new(2)->init(0,y13)->init(1,0);
HXDLIN( 481)			int max9 = values18->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g36 = 0;
HXDLIN( 481)				int _g37 = values18->length;
HXDLIN( 481)				while((_g36 < _g37)){
HXLINE( 481)					_g36 = (_g36 + 1);
HXDLIN( 481)					int i18 = (_g36 - 1);
HXDLIN( 481)					if ((values18->__get(i18) > max9)) {
HXLINE( 688)						max9 = values18->__get(i18);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values19 = ::Array_obj< int >::__new(2)->init(0,max9)->init(1,ma9);
HXDLIN( 481)			int min9 = values19->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g38 = 0;
HXDLIN( 481)				int _g39 = values19->length;
HXDLIN( 481)				while((_g38 < _g39)){
HXLINE( 481)					_g38 = (_g38 + 1);
HXDLIN( 481)					int i19 = (_g38 - 1);
HXDLIN( 481)					if ((values19->__get(i19) < min9)) {
HXLINE( 652)						min9 = values19->__get(i19);
            					}
            				}
            			}
HXLINE( 481)			int y14 = min9;
HXDLIN( 481)			bool green12;
HXDLIN( 481)			bool green13;
HXDLIN( 481)			bool green14;
HXDLIN( 481)			if ((x14 >= 0)) {
HXLINE( 481)				green14 = (y14 >= 0);
            			}
            			else {
HXLINE( 481)				green14 = false;
            			}
HXDLIN( 481)			if (green14) {
HXLINE( 481)				green13 = (x14 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				green13 = false;
            			}
HXDLIN( 481)			if (green13) {
HXLINE( 481)				green12 = (y14 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				green12 = false;
            			}
HXDLIN( 481)			if (!(green12)) {
HXLINE( 481)				::cpp::Int64 this8 = _hx_int64_make(x14,y14);
HXDLIN( 481)				int green15 = _hx_int64_high(this8);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green15,_hx_int64_low(this8))));
            			}
HXDLIN( 481)			int position6 = (((y14 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x14) * 4);
HXDLIN( 481)			position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float green16 = (green11 * ( (Float)(((((((( (int)(this1->b->__get(position6)) ) << 24) | (( (int)(this1->b->__get((position6 + 1))) ) << 16)) | (( (int)(this1->b->__get((position6 + 2))) ) << 8)) | ( (int)(this1->b->__get((position6 + 3))) )) >> 8) & 255)) ));
HXDLIN( 481)			int x15 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y15 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma10 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values20 = ::Array_obj< int >::__new(2)->init(0,x15)->init(1,0);
HXDLIN( 481)			int max10 = values20->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g40 = 0;
HXDLIN( 481)				int _g41 = values20->length;
HXDLIN( 481)				while((_g40 < _g41)){
HXLINE( 481)					_g40 = (_g40 + 1);
HXDLIN( 481)					int i20 = (_g40 - 1);
HXDLIN( 481)					if ((values20->__get(i20) > max10)) {
HXLINE( 688)						max10 = values20->__get(i20);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values21 = ::Array_obj< int >::__new(2)->init(0,max10)->init(1,ma10);
HXDLIN( 481)			int min10 = values21->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g42 = 0;
HXDLIN( 481)				int _g43 = values21->length;
HXDLIN( 481)				while((_g42 < _g43)){
HXLINE( 481)					_g42 = (_g42 + 1);
HXDLIN( 481)					int i21 = (_g42 - 1);
HXDLIN( 481)					if ((values21->__get(i21) < min10)) {
HXLINE( 652)						min10 = values21->__get(i21);
            					}
            				}
            			}
HXLINE( 481)			int x16 = min10;
HXDLIN( 481)			int ma11 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values22 = ::Array_obj< int >::__new(2)->init(0,y15)->init(1,0);
HXDLIN( 481)			int max11 = values22->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g44 = 0;
HXDLIN( 481)				int _g45 = values22->length;
HXDLIN( 481)				while((_g44 < _g45)){
HXLINE( 481)					_g44 = (_g44 + 1);
HXDLIN( 481)					int i22 = (_g44 - 1);
HXDLIN( 481)					if ((values22->__get(i22) > max11)) {
HXLINE( 688)						max11 = values22->__get(i22);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values23 = ::Array_obj< int >::__new(2)->init(0,max11)->init(1,ma11);
HXDLIN( 481)			int min11 = values23->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g46 = 0;
HXDLIN( 481)				int _g47 = values23->length;
HXDLIN( 481)				while((_g46 < _g47)){
HXLINE( 481)					_g46 = (_g46 + 1);
HXDLIN( 481)					int i23 = (_g46 - 1);
HXDLIN( 481)					if ((values23->__get(i23) < min11)) {
HXLINE( 652)						min11 = values23->__get(i23);
            					}
            				}
            			}
HXLINE( 481)			int y16 = min11;
HXDLIN( 481)			bool green17;
HXDLIN( 481)			bool green18;
HXDLIN( 481)			bool green19;
HXDLIN( 481)			if ((x16 >= 0)) {
HXLINE( 481)				green19 = (y16 >= 0);
            			}
            			else {
HXLINE( 481)				green19 = false;
            			}
HXDLIN( 481)			if (green19) {
HXLINE( 481)				green18 = (x16 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				green18 = false;
            			}
HXDLIN( 481)			if (green18) {
HXLINE( 481)				green17 = (y16 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				green17 = false;
            			}
HXDLIN( 481)			if (!(green17)) {
HXLINE( 481)				::cpp::Int64 this9 = _hx_int64_make(x16,y16);
HXDLIN( 481)				int green20 = _hx_int64_high(this9);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green20,_hx_int64_low(this9))));
            			}
HXDLIN( 481)			int position7 = (((y16 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x16) * 4);
HXDLIN( 481)			position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			int green21 = ::Std_obj::_hx_int((green10 + (yFraction * (green16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position7)) ) << 24) | (( (int)(this1->b->__get((position7 + 1))) ) << 16)) | (( (int)(this1->b->__get((position7 + 2))) ) << 8)) | ( (int)(this1->b->__get((position7 + 3))) )) >> 8) & 255)) ))))));
HXDLIN( 481)			Float blue = (( (Float)(1) ) - yFraction);
HXDLIN( 481)			int x17 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y17 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			bool blue1;
HXDLIN( 481)			bool blue2;
HXDLIN( 481)			bool blue3;
HXDLIN( 481)			if ((x17 >= 0)) {
HXLINE( 481)				blue3 = (y17 >= 0);
            			}
            			else {
HXLINE( 481)				blue3 = false;
            			}
HXDLIN( 481)			if (blue3) {
HXLINE( 481)				blue2 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				blue2 = false;
            			}
HXDLIN( 481)			if (blue2) {
HXLINE( 481)				blue1 = (y17 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				blue1 = false;
            			}
HXDLIN( 481)			if (!(blue1)) {
HXLINE( 481)				::cpp::Int64 this10 = _hx_int64_make(x17,y17);
HXDLIN( 481)				int blue4 = _hx_int64_high(this10);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue4,_hx_int64_low(this10))));
            			}
HXDLIN( 481)			int position8 = (((y17 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN( 481)			position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float blue5 = ((( (Float)(1) ) - xFraction) * ( (Float)((((((( (int)(this1->b->__get(position8)) ) << 24) | (( (int)(this1->b->__get((position8 + 1))) ) << 16)) | (( (int)(this1->b->__get((position8 + 2))) ) << 8)) | ( (int)(this1->b->__get((position8 + 3))) )) & 255)) ));
HXDLIN( 481)			int x18 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y18 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			int ma12 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values24 = ::Array_obj< int >::__new(2)->init(0,x18)->init(1,0);
HXDLIN( 481)			int max12 = values24->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g48 = 0;
HXDLIN( 481)				int _g49 = values24->length;
HXDLIN( 481)				while((_g48 < _g49)){
HXLINE( 481)					_g48 = (_g48 + 1);
HXDLIN( 481)					int i24 = (_g48 - 1);
HXDLIN( 481)					if ((values24->__get(i24) > max12)) {
HXLINE( 688)						max12 = values24->__get(i24);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values25 = ::Array_obj< int >::__new(2)->init(0,max12)->init(1,ma12);
HXDLIN( 481)			int min12 = values25->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g50 = 0;
HXDLIN( 481)				int _g51 = values25->length;
HXDLIN( 481)				while((_g50 < _g51)){
HXLINE( 481)					_g50 = (_g50 + 1);
HXDLIN( 481)					int i25 = (_g50 - 1);
HXDLIN( 481)					if ((values25->__get(i25) < min12)) {
HXLINE( 652)						min12 = values25->__get(i25);
            					}
            				}
            			}
HXLINE( 481)			int x19 = min12;
HXDLIN( 481)			int ma13 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values26 = ::Array_obj< int >::__new(2)->init(0,y18)->init(1,0);
HXDLIN( 481)			int max13 = values26->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g52 = 0;
HXDLIN( 481)				int _g53 = values26->length;
HXDLIN( 481)				while((_g52 < _g53)){
HXLINE( 481)					_g52 = (_g52 + 1);
HXDLIN( 481)					int i26 = (_g52 - 1);
HXDLIN( 481)					if ((values26->__get(i26) > max13)) {
HXLINE( 688)						max13 = values26->__get(i26);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values27 = ::Array_obj< int >::__new(2)->init(0,max13)->init(1,ma13);
HXDLIN( 481)			int min13 = values27->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g54 = 0;
HXDLIN( 481)				int _g55 = values27->length;
HXDLIN( 481)				while((_g54 < _g55)){
HXLINE( 481)					_g54 = (_g54 + 1);
HXDLIN( 481)					int i27 = (_g54 - 1);
HXDLIN( 481)					if ((values27->__get(i27) < min13)) {
HXLINE( 652)						min13 = values27->__get(i27);
            					}
            				}
            			}
HXLINE( 481)			int y19 = min13;
HXDLIN( 481)			bool blue6;
HXDLIN( 481)			bool blue7;
HXDLIN( 481)			bool blue8;
HXDLIN( 481)			if ((x19 >= 0)) {
HXLINE( 481)				blue8 = (y19 >= 0);
            			}
            			else {
HXLINE( 481)				blue8 = false;
            			}
HXDLIN( 481)			if (blue8) {
HXLINE( 481)				blue7 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				blue7 = false;
            			}
HXDLIN( 481)			if (blue7) {
HXLINE( 481)				blue6 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				blue6 = false;
            			}
HXDLIN( 481)			if (!(blue6)) {
HXLINE( 481)				::cpp::Int64 this11 = _hx_int64_make(x19,y19);
HXDLIN( 481)				int blue9 = _hx_int64_high(this11);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue9,_hx_int64_low(this11))));
            			}
HXDLIN( 481)			int position9 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 481)			position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float blue10 = (blue * (blue5 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position9)) ) << 24) | (( (int)(this1->b->__get((position9 + 1))) ) << 16)) | (( (int)(this1->b->__get((position9 + 2))) ) << 8)) | ( (int)(this1->b->__get((position9 + 3))) )) & 255)) ))));
HXDLIN( 481)			Float blue11 = (( (Float)(1) ) - xFraction);
HXDLIN( 481)			int x20 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y20 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma14 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values28 = ::Array_obj< int >::__new(2)->init(0,x20)->init(1,0);
HXDLIN( 481)			int max14 = values28->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g56 = 0;
HXDLIN( 481)				int _g57 = values28->length;
HXDLIN( 481)				while((_g56 < _g57)){
HXLINE( 481)					_g56 = (_g56 + 1);
HXDLIN( 481)					int i28 = (_g56 - 1);
HXDLIN( 481)					if ((values28->__get(i28) > max14)) {
HXLINE( 688)						max14 = values28->__get(i28);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values29 = ::Array_obj< int >::__new(2)->init(0,max14)->init(1,ma14);
HXDLIN( 481)			int min14 = values29->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g58 = 0;
HXDLIN( 481)				int _g59 = values29->length;
HXDLIN( 481)				while((_g58 < _g59)){
HXLINE( 481)					_g58 = (_g58 + 1);
HXDLIN( 481)					int i29 = (_g58 - 1);
HXDLIN( 481)					if ((values29->__get(i29) < min14)) {
HXLINE( 652)						min14 = values29->__get(i29);
            					}
            				}
            			}
HXLINE( 481)			int x21 = min14;
HXDLIN( 481)			int ma15 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values30 = ::Array_obj< int >::__new(2)->init(0,y20)->init(1,0);
HXDLIN( 481)			int max15 = values30->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g60 = 0;
HXDLIN( 481)				int _g61 = values30->length;
HXDLIN( 481)				while((_g60 < _g61)){
HXLINE( 481)					_g60 = (_g60 + 1);
HXDLIN( 481)					int i30 = (_g60 - 1);
HXDLIN( 481)					if ((values30->__get(i30) > max15)) {
HXLINE( 688)						max15 = values30->__get(i30);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values31 = ::Array_obj< int >::__new(2)->init(0,max15)->init(1,ma15);
HXDLIN( 481)			int min15 = values31->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g62 = 0;
HXDLIN( 481)				int _g63 = values31->length;
HXDLIN( 481)				while((_g62 < _g63)){
HXLINE( 481)					_g62 = (_g62 + 1);
HXDLIN( 481)					int i31 = (_g62 - 1);
HXDLIN( 481)					if ((values31->__get(i31) < min15)) {
HXLINE( 652)						min15 = values31->__get(i31);
            					}
            				}
            			}
HXLINE( 481)			int y21 = min15;
HXDLIN( 481)			bool blue12;
HXDLIN( 481)			bool blue13;
HXDLIN( 481)			bool blue14;
HXDLIN( 481)			if ((x21 >= 0)) {
HXLINE( 481)				blue14 = (y21 >= 0);
            			}
            			else {
HXLINE( 481)				blue14 = false;
            			}
HXDLIN( 481)			if (blue14) {
HXLINE( 481)				blue13 = (x21 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				blue13 = false;
            			}
HXDLIN( 481)			if (blue13) {
HXLINE( 481)				blue12 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				blue12 = false;
            			}
HXDLIN( 481)			if (!(blue12)) {
HXLINE( 481)				::cpp::Int64 this12 = _hx_int64_make(x21,y21);
HXDLIN( 481)				int blue15 = _hx_int64_high(this12);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue15,_hx_int64_low(this12))));
            			}
HXDLIN( 481)			int position10 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x21) * 4);
HXDLIN( 481)			position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float blue16 = (blue11 * ( (Float)((((((( (int)(this1->b->__get(position10)) ) << 24) | (( (int)(this1->b->__get((position10 + 1))) ) << 16)) | (( (int)(this1->b->__get((position10 + 2))) ) << 8)) | ( (int)(this1->b->__get((position10 + 3))) )) & 255)) ));
HXDLIN( 481)			int x22 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y22 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma16 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values32 = ::Array_obj< int >::__new(2)->init(0,x22)->init(1,0);
HXDLIN( 481)			int max16 = values32->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g64 = 0;
HXDLIN( 481)				int _g65 = values32->length;
HXDLIN( 481)				while((_g64 < _g65)){
HXLINE( 481)					_g64 = (_g64 + 1);
HXDLIN( 481)					int i32 = (_g64 - 1);
HXDLIN( 481)					if ((values32->__get(i32) > max16)) {
HXLINE( 688)						max16 = values32->__get(i32);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values33 = ::Array_obj< int >::__new(2)->init(0,max16)->init(1,ma16);
HXDLIN( 481)			int min16 = values33->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g66 = 0;
HXDLIN( 481)				int _g67 = values33->length;
HXDLIN( 481)				while((_g66 < _g67)){
HXLINE( 481)					_g66 = (_g66 + 1);
HXDLIN( 481)					int i33 = (_g66 - 1);
HXDLIN( 481)					if ((values33->__get(i33) < min16)) {
HXLINE( 652)						min16 = values33->__get(i33);
            					}
            				}
            			}
HXLINE( 481)			int x23 = min16;
HXDLIN( 481)			int ma17 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values34 = ::Array_obj< int >::__new(2)->init(0,y22)->init(1,0);
HXDLIN( 481)			int max17 = values34->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g68 = 0;
HXDLIN( 481)				int _g69 = values34->length;
HXDLIN( 481)				while((_g68 < _g69)){
HXLINE( 481)					_g68 = (_g68 + 1);
HXDLIN( 481)					int i34 = (_g68 - 1);
HXDLIN( 481)					if ((values34->__get(i34) > max17)) {
HXLINE( 688)						max17 = values34->__get(i34);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values35 = ::Array_obj< int >::__new(2)->init(0,max17)->init(1,ma17);
HXDLIN( 481)			int min17 = values35->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g70 = 0;
HXDLIN( 481)				int _g71 = values35->length;
HXDLIN( 481)				while((_g70 < _g71)){
HXLINE( 481)					_g70 = (_g70 + 1);
HXDLIN( 481)					int i35 = (_g70 - 1);
HXDLIN( 481)					if ((values35->__get(i35) < min17)) {
HXLINE( 652)						min17 = values35->__get(i35);
            					}
            				}
            			}
HXLINE( 481)			int y23 = min17;
HXDLIN( 481)			bool blue17;
HXDLIN( 481)			bool blue18;
HXDLIN( 481)			bool blue19;
HXDLIN( 481)			if ((x23 >= 0)) {
HXLINE( 481)				blue19 = (y23 >= 0);
            			}
            			else {
HXLINE( 481)				blue19 = false;
            			}
HXDLIN( 481)			if (blue19) {
HXLINE( 481)				blue18 = (x23 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				blue18 = false;
            			}
HXDLIN( 481)			if (blue18) {
HXLINE( 481)				blue17 = (y23 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				blue17 = false;
            			}
HXDLIN( 481)			if (!(blue17)) {
HXLINE( 481)				::cpp::Int64 this13 = _hx_int64_make(x23,y23);
HXDLIN( 481)				int blue20 = _hx_int64_high(this13);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue20,_hx_int64_low(this13))));
            			}
HXDLIN( 481)			int position11 = (((y23 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x23) * 4);
HXDLIN( 481)			position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			int blue21 = ::Std_obj::_hx_int((blue10 + (yFraction * (blue16 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position11)) ) << 24) | (( (int)(this1->b->__get((position11 + 1))) ) << 16)) | (( (int)(this1->b->__get((position11 + 2))) ) << 8)) | ( (int)(this1->b->__get((position11 + 3))) )) & 255)) ))))));
HXDLIN( 481)			Float alpha = (( (Float)(1) ) - yFraction);
HXDLIN( 481)			int x24 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y24 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			bool alpha1;
HXDLIN( 481)			bool alpha2;
HXDLIN( 481)			bool alpha3;
HXDLIN( 481)			if ((x24 >= 0)) {
HXLINE( 481)				alpha3 = (y24 >= 0);
            			}
            			else {
HXLINE( 481)				alpha3 = false;
            			}
HXDLIN( 481)			if (alpha3) {
HXLINE( 481)				alpha2 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				alpha2 = false;
            			}
HXDLIN( 481)			if (alpha2) {
HXLINE( 481)				alpha1 = (y24 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				alpha1 = false;
            			}
HXDLIN( 481)			if (!(alpha1)) {
HXLINE( 481)				::cpp::Int64 this14 = _hx_int64_make(x24,y24);
HXDLIN( 481)				int alpha4 = _hx_int64_high(this14);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha4,_hx_int64_low(this14))));
            			}
HXDLIN( 481)			int position12 = (((y24 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN( 481)			position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float alpha5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position12)) ) << 24) | (( (int)(this1->b->__get((position12 + 1))) ) << 16)) | (( (int)(this1->b->__get((position12 + 2))) ) << 8)) | ( (int)(this1->b->__get((position12 + 3))) )) >> 24) & 255)) ));
HXDLIN( 481)			int x25 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y25 = ::Std_obj::_hx_int(y);
HXDLIN( 481)			int ma18 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values36 = ::Array_obj< int >::__new(2)->init(0,x25)->init(1,0);
HXDLIN( 481)			int max18 = values36->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g72 = 0;
HXDLIN( 481)				int _g73 = values36->length;
HXDLIN( 481)				while((_g72 < _g73)){
HXLINE( 481)					_g72 = (_g72 + 1);
HXDLIN( 481)					int i36 = (_g72 - 1);
HXDLIN( 481)					if ((values36->__get(i36) > max18)) {
HXLINE( 688)						max18 = values36->__get(i36);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values37 = ::Array_obj< int >::__new(2)->init(0,max18)->init(1,ma18);
HXDLIN( 481)			int min18 = values37->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g74 = 0;
HXDLIN( 481)				int _g75 = values37->length;
HXDLIN( 481)				while((_g74 < _g75)){
HXLINE( 481)					_g74 = (_g74 + 1);
HXDLIN( 481)					int i37 = (_g74 - 1);
HXDLIN( 481)					if ((values37->__get(i37) < min18)) {
HXLINE( 652)						min18 = values37->__get(i37);
            					}
            				}
            			}
HXLINE( 481)			int x26 = min18;
HXDLIN( 481)			int ma19 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values38 = ::Array_obj< int >::__new(2)->init(0,y25)->init(1,0);
HXDLIN( 481)			int max19 = values38->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g76 = 0;
HXDLIN( 481)				int _g77 = values38->length;
HXDLIN( 481)				while((_g76 < _g77)){
HXLINE( 481)					_g76 = (_g76 + 1);
HXDLIN( 481)					int i38 = (_g76 - 1);
HXDLIN( 481)					if ((values38->__get(i38) > max19)) {
HXLINE( 688)						max19 = values38->__get(i38);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values39 = ::Array_obj< int >::__new(2)->init(0,max19)->init(1,ma19);
HXDLIN( 481)			int min19 = values39->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g78 = 0;
HXDLIN( 481)				int _g79 = values39->length;
HXDLIN( 481)				while((_g78 < _g79)){
HXLINE( 481)					_g78 = (_g78 + 1);
HXDLIN( 481)					int i39 = (_g78 - 1);
HXDLIN( 481)					if ((values39->__get(i39) < min19)) {
HXLINE( 652)						min19 = values39->__get(i39);
            					}
            				}
            			}
HXLINE( 481)			int y26 = min19;
HXDLIN( 481)			bool alpha6;
HXDLIN( 481)			bool alpha7;
HXDLIN( 481)			bool alpha8;
HXDLIN( 481)			if ((x26 >= 0)) {
HXLINE( 481)				alpha8 = (y26 >= 0);
            			}
            			else {
HXLINE( 481)				alpha8 = false;
            			}
HXDLIN( 481)			if (alpha8) {
HXLINE( 481)				alpha7 = (x26 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				alpha7 = false;
            			}
HXDLIN( 481)			if (alpha7) {
HXLINE( 481)				alpha6 = (y26 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				alpha6 = false;
            			}
HXDLIN( 481)			if (!(alpha6)) {
HXLINE( 481)				::cpp::Int64 this15 = _hx_int64_make(x26,y26);
HXDLIN( 481)				int alpha9 = _hx_int64_high(this15);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha9,_hx_int64_low(this15))));
            			}
HXDLIN( 481)			int position13 = (((y26 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x26) * 4);
HXDLIN( 481)			position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float alpha10 = (alpha * (alpha5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position13)) ) << 24) | (( (int)(this1->b->__get((position13 + 1))) ) << 16)) | (( (int)(this1->b->__get((position13 + 2))) ) << 8)) | ( (int)(this1->b->__get((position13 + 3))) )) >> 24) & 255)) ))));
HXDLIN( 481)			Float alpha11 = (( (Float)(1) ) - xFraction);
HXDLIN( 481)			int x27 = ::Std_obj::_hx_int(x);
HXDLIN( 481)			int y27 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma20 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values40 = ::Array_obj< int >::__new(2)->init(0,x27)->init(1,0);
HXDLIN( 481)			int max20 = values40->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g80 = 0;
HXDLIN( 481)				int _g81 = values40->length;
HXDLIN( 481)				while((_g80 < _g81)){
HXLINE( 481)					_g80 = (_g80 + 1);
HXDLIN( 481)					int i40 = (_g80 - 1);
HXDLIN( 481)					if ((values40->__get(i40) > max20)) {
HXLINE( 688)						max20 = values40->__get(i40);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values41 = ::Array_obj< int >::__new(2)->init(0,max20)->init(1,ma20);
HXDLIN( 481)			int min20 = values41->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g82 = 0;
HXDLIN( 481)				int _g83 = values41->length;
HXDLIN( 481)				while((_g82 < _g83)){
HXLINE( 481)					_g82 = (_g82 + 1);
HXDLIN( 481)					int i41 = (_g82 - 1);
HXDLIN( 481)					if ((values41->__get(i41) < min20)) {
HXLINE( 652)						min20 = values41->__get(i41);
            					}
            				}
            			}
HXLINE( 481)			int x28 = min20;
HXDLIN( 481)			int ma21 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values42 = ::Array_obj< int >::__new(2)->init(0,y27)->init(1,0);
HXDLIN( 481)			int max21 = values42->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g84 = 0;
HXDLIN( 481)				int _g85 = values42->length;
HXDLIN( 481)				while((_g84 < _g85)){
HXLINE( 481)					_g84 = (_g84 + 1);
HXDLIN( 481)					int i42 = (_g84 - 1);
HXDLIN( 481)					if ((values42->__get(i42) > max21)) {
HXLINE( 688)						max21 = values42->__get(i42);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values43 = ::Array_obj< int >::__new(2)->init(0,max21)->init(1,ma21);
HXDLIN( 481)			int min21 = values43->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g86 = 0;
HXDLIN( 481)				int _g87 = values43->length;
HXDLIN( 481)				while((_g86 < _g87)){
HXLINE( 481)					_g86 = (_g86 + 1);
HXDLIN( 481)					int i43 = (_g86 - 1);
HXDLIN( 481)					if ((values43->__get(i43) < min21)) {
HXLINE( 652)						min21 = values43->__get(i43);
            					}
            				}
            			}
HXLINE( 481)			int y28 = min21;
HXDLIN( 481)			bool alpha12;
HXDLIN( 481)			bool alpha13;
HXDLIN( 481)			bool alpha14;
HXDLIN( 481)			if ((x28 >= 0)) {
HXLINE( 481)				alpha14 = (y28 >= 0);
            			}
            			else {
HXLINE( 481)				alpha14 = false;
            			}
HXDLIN( 481)			if (alpha14) {
HXLINE( 481)				alpha13 = (x28 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				alpha13 = false;
            			}
HXDLIN( 481)			if (alpha13) {
HXLINE( 481)				alpha12 = (y28 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				alpha12 = false;
            			}
HXDLIN( 481)			if (!(alpha12)) {
HXLINE( 481)				::cpp::Int64 this16 = _hx_int64_make(x28,y28);
HXDLIN( 481)				int alpha15 = _hx_int64_high(this16);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha15,_hx_int64_low(this16))));
            			}
HXDLIN( 481)			int position14 = (((y28 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x28) * 4);
HXDLIN( 481)			position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			Float alpha16 = (alpha11 * ( (Float)(((((((( (int)(this1->b->__get(position14)) ) << 24) | (( (int)(this1->b->__get((position14 + 1))) ) << 16)) | (( (int)(this1->b->__get((position14 + 2))) ) << 8)) | ( (int)(this1->b->__get((position14 + 3))) )) >> 24) & 255)) ));
HXDLIN( 481)			int x29 = (::Std_obj::_hx_int(x) + 1);
HXDLIN( 481)			int y29 = (::Std_obj::_hx_int(y) + 1);
HXDLIN( 481)			int ma22 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 481)			::Array< int > values44 = ::Array_obj< int >::__new(2)->init(0,x29)->init(1,0);
HXDLIN( 481)			int max22 = values44->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g88 = 0;
HXDLIN( 481)				int _g89 = values44->length;
HXDLIN( 481)				while((_g88 < _g89)){
HXLINE( 481)					_g88 = (_g88 + 1);
HXDLIN( 481)					int i44 = (_g88 - 1);
HXDLIN( 481)					if ((values44->__get(i44) > max22)) {
HXLINE( 688)						max22 = values44->__get(i44);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values45 = ::Array_obj< int >::__new(2)->init(0,max22)->init(1,ma22);
HXDLIN( 481)			int min22 = values45->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g90 = 0;
HXDLIN( 481)				int _g91 = values45->length;
HXDLIN( 481)				while((_g90 < _g91)){
HXLINE( 481)					_g90 = (_g90 + 1);
HXDLIN( 481)					int i45 = (_g90 - 1);
HXDLIN( 481)					if ((values45->__get(i45) < min22)) {
HXLINE( 652)						min22 = values45->__get(i45);
            					}
            				}
            			}
HXLINE( 481)			int x30 = min22;
HXDLIN( 481)			int ma23 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 481)			::Array< int > values46 = ::Array_obj< int >::__new(2)->init(0,y29)->init(1,0);
HXDLIN( 481)			int max23 = values46->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g92 = 0;
HXDLIN( 481)				int _g93 = values46->length;
HXDLIN( 481)				while((_g92 < _g93)){
HXLINE( 481)					_g92 = (_g92 + 1);
HXDLIN( 481)					int i46 = (_g92 - 1);
HXDLIN( 481)					if ((values46->__get(i46) > max23)) {
HXLINE( 688)						max23 = values46->__get(i46);
            					}
            				}
            			}
HXLINE( 481)			::Array< int > values47 = ::Array_obj< int >::__new(2)->init(0,max23)->init(1,ma23);
HXDLIN( 481)			int min23 = values47->__get(0);
HXDLIN( 481)			{
HXLINE( 481)				int _g94 = 0;
HXDLIN( 481)				int _g95 = values47->length;
HXDLIN( 481)				while((_g94 < _g95)){
HXLINE( 481)					_g94 = (_g94 + 1);
HXDLIN( 481)					int i47 = (_g94 - 1);
HXDLIN( 481)					if ((values47->__get(i47) < min23)) {
HXLINE( 652)						min23 = values47->__get(i47);
            					}
            				}
            			}
HXLINE( 481)			int y30 = min23;
HXDLIN( 481)			bool alpha17;
HXDLIN( 481)			bool alpha18;
HXDLIN( 481)			bool alpha19;
HXDLIN( 481)			if ((x30 >= 0)) {
HXLINE( 481)				alpha19 = (y30 >= 0);
            			}
            			else {
HXLINE( 481)				alpha19 = false;
            			}
HXDLIN( 481)			if (alpha19) {
HXLINE( 481)				alpha18 = (x30 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				alpha18 = false;
            			}
HXDLIN( 481)			if (alpha18) {
HXLINE( 481)				alpha17 = (y30 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				alpha17 = false;
            			}
HXDLIN( 481)			if (!(alpha17)) {
HXLINE( 481)				::cpp::Int64 this17 = _hx_int64_make(x30,y30);
HXDLIN( 481)				int alpha20 = _hx_int64_high(this17);
HXDLIN( 481)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha20,_hx_int64_low(this17))));
            			}
HXDLIN( 481)			int position15 = (((y30 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x30) * 4);
HXDLIN( 481)			position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)			int alpha21 = ::Std_obj::_hx_int((alpha10 + (yFraction * (alpha16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position15)) ) << 24) | (( (int)(this1->b->__get((position15 + 1))) ) << 16)) | (( (int)(this1->b->__get((position15 + 2))) ) << 8)) | ( (int)(this1->b->__get((position15 + 3))) )) >> 24) & 255)) ))))));
HXDLIN( 481)			int color = 0;
HXDLIN( 481)			{
HXLINE( 481)				color = (color & -16711681);
HXDLIN( 481)				int color1;
HXDLIN( 481)				if ((red21 > 255)) {
HXLINE( 481)					color1 = 255;
            				}
            				else {
HXLINE( 481)					if ((red21 < 0)) {
HXLINE( 481)						color1 = 0;
            					}
            					else {
HXLINE( 481)						color1 = red21;
            					}
            				}
HXDLIN( 481)				color = (color | (color1 << 16));
            			}
HXDLIN( 481)			{
HXLINE( 481)				color = (color & -65281);
HXDLIN( 481)				int color2;
HXDLIN( 481)				if ((green21 > 255)) {
HXLINE( 481)					color2 = 255;
            				}
            				else {
HXLINE( 481)					if ((green21 < 0)) {
HXLINE( 481)						color2 = 0;
            					}
            					else {
HXLINE( 481)						color2 = green21;
            					}
            				}
HXDLIN( 481)				color = (color | (color2 << 8));
            			}
HXDLIN( 481)			{
HXLINE( 481)				color = (color & -256);
HXDLIN( 481)				int color3;
HXDLIN( 481)				if ((blue21 > 255)) {
HXLINE( 481)					color3 = 255;
            				}
            				else {
HXLINE( 481)					if ((blue21 < 0)) {
HXLINE( 481)						color3 = 0;
            					}
            					else {
HXLINE( 481)						color3 = blue21;
            					}
            				}
HXDLIN( 481)				color = (color | color3);
            			}
HXDLIN( 481)			{
HXLINE( 481)				color = (color & 16777215);
HXDLIN( 481)				int color4;
HXDLIN( 481)				if ((alpha21 > 255)) {
HXLINE( 481)					color4 = 255;
            				}
            				else {
HXLINE( 481)					if ((alpha21 < 0)) {
HXLINE( 481)						color4 = 0;
            					}
            					else {
HXLINE( 481)						color4 = alpha21;
            					}
            				}
HXDLIN( 481)				color = (color | (color4 << 24));
            			}
HXDLIN( 481)			int color5 = color;
HXDLIN( 481)			bool _hx_tmp7;
HXDLIN( 481)			Float x31 = ( (Float)(::Math_obj::ceil(toX)) );
HXDLIN( 481)			Float y31 = ( (Float)(::Math_obj::ceil(toY)) );
HXDLIN( 481)			bool _hx_tmp8;
HXDLIN( 481)			bool _hx_tmp9;
HXDLIN( 481)			bool _hx_tmp10;
HXDLIN( 481)			if ((x31 >= 0)) {
HXLINE( 481)				_hx_tmp10 = (y31 >= 0);
            			}
            			else {
HXLINE( 481)				_hx_tmp10 = false;
            			}
HXDLIN( 481)			if (_hx_tmp10) {
HXLINE( 481)				_hx_tmp9 = (x31 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 481)				_hx_tmp9 = false;
            			}
HXDLIN( 481)			if (_hx_tmp9) {
HXLINE( 481)				_hx_tmp8 = (y31 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 481)				_hx_tmp8 = false;
            			}
HXDLIN( 481)			if (_hx_tmp8) {
HXLINE( 481)				Float x32 = ( (Float)(::Math_obj::floor(toX)) );
HXDLIN( 481)				Float y32 = ( (Float)(::Math_obj::floor(toY)) );
HXDLIN( 481)				bool _hx_tmp11;
HXDLIN( 481)				bool _hx_tmp12;
HXDLIN( 481)				bool _hx_tmp13;
HXDLIN( 481)				if ((x32 >= 0)) {
HXLINE( 481)					_hx_tmp13 = (y32 >= 0);
            				}
            				else {
HXLINE( 481)					_hx_tmp13 = false;
            				}
HXDLIN( 481)				if (_hx_tmp13) {
HXLINE( 481)					_hx_tmp12 = (x32 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 481)					_hx_tmp12 = false;
            				}
HXDLIN( 481)				if (_hx_tmp12) {
HXLINE( 481)					_hx_tmp11 = (y32 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 481)					_hx_tmp11 = false;
            				}
HXDLIN( 481)				_hx_tmp7 = !(_hx_tmp11);
            			}
            			else {
HXLINE( 481)				_hx_tmp7 = true;
            			}
HXDLIN( 481)			if (_hx_tmp7) {
HXLINE( 481)				 ::haxe::io::Bytes this18 = this1;
HXDLIN( 481)				Float x33 = ::vision::tools::MathTools_obj::boundFloat(toX,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 481)				Float y33 = ::vision::tools::MathTools_obj::boundFloat(toY,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
HXDLIN( 481)				bool _hx_tmp14;
HXDLIN( 481)				Float x34 = ( (Float)(::Math_obj::ceil(x33)) );
HXDLIN( 481)				Float y34 = ( (Float)(::Math_obj::ceil(y33)) );
HXDLIN( 481)				bool _hx_tmp15;
HXDLIN( 481)				bool _hx_tmp16;
HXDLIN( 481)				bool _hx_tmp17;
HXDLIN( 481)				if ((x34 >= 0)) {
HXLINE( 481)					_hx_tmp17 = (y34 >= 0);
            				}
            				else {
HXLINE( 481)					_hx_tmp17 = false;
            				}
HXDLIN( 481)				if (_hx_tmp17) {
HXLINE( 481)					_hx_tmp16 = (x34 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 481)					_hx_tmp16 = false;
            				}
HXDLIN( 481)				if (_hx_tmp16) {
HXLINE( 481)					_hx_tmp15 = (y34 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 481)					_hx_tmp15 = false;
            				}
HXDLIN( 481)				if (_hx_tmp15) {
HXLINE( 481)					Float x35 = ( (Float)(::Math_obj::floor(x33)) );
HXDLIN( 481)					Float y35 = ( (Float)(::Math_obj::floor(y33)) );
HXDLIN( 481)					bool _hx_tmp18;
HXDLIN( 481)					bool _hx_tmp19;
HXDLIN( 481)					bool _hx_tmp20;
HXDLIN( 481)					if ((x35 >= 0)) {
HXLINE( 481)						_hx_tmp20 = (y35 >= 0);
            					}
            					else {
HXLINE( 481)						_hx_tmp20 = false;
            					}
HXDLIN( 481)					if (_hx_tmp20) {
HXLINE( 481)						_hx_tmp19 = (x35 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 481)						_hx_tmp19 = false;
            					}
HXDLIN( 481)					if (_hx_tmp19) {
HXLINE( 481)						_hx_tmp18 = (y35 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 481)						_hx_tmp18 = false;
            					}
HXDLIN( 481)					_hx_tmp14 = !(_hx_tmp18);
            				}
            				else {
HXLINE( 481)					_hx_tmp14 = true;
            				}
HXDLIN( 481)				if (_hx_tmp14) {
HXLINE( 481)					Float _hx_tmp21 = ::vision::tools::MathTools_obj::boundFloat(x33,( (Float)(0) ),( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 481)					::vision::ds::_Image::Image_Impl__obj::setFloatingPixel(this18,_hx_tmp21,::vision::tools::MathTools_obj::boundFloat(y33,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))) - 1)) )),color5);
            				}
            				else {
HXLINE( 481)					Float yFraction1 = (y33 - ( (Float)(::Std_obj::_hx_int(y33)) ));
HXDLIN( 481)					Float xFraction1 = (x33 - ( (Float)(::Std_obj::_hx_int(x33)) ));
HXDLIN( 481)					{
HXLINE( 481)						int x36 = ::Math_obj::floor(x33);
HXDLIN( 481)						int y36 = ::Math_obj::floor(y33);
HXDLIN( 481)						Float Red = ((((( (Float)(1) ) - xFraction1) + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Green = ((((( (Float)(1) ) - xFraction1) + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Blue = ((((( (Float)(1) ) - xFraction1) + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Alpha = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)						int color6 = 0;
HXDLIN( 481)						{
HXLINE( 481)							int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 481)							color6 = (color6 & -16711681);
HXDLIN( 481)							int color7;
HXDLIN( 481)							if ((value > 255)) {
HXLINE( 481)								color7 = 255;
            							}
            							else {
HXLINE( 481)								if ((value < 0)) {
HXLINE( 481)									color7 = 0;
            								}
            								else {
HXLINE( 481)									color7 = value;
            								}
            							}
HXDLIN( 481)							color6 = (color6 | (color7 << 16));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 481)							color6 = (color6 & -65281);
HXDLIN( 481)							int color8;
HXDLIN( 481)							if ((value1 > 255)) {
HXLINE( 481)								color8 = 255;
            							}
            							else {
HXLINE( 481)								if ((value1 < 0)) {
HXLINE( 481)									color8 = 0;
            								}
            								else {
HXLINE( 481)									color8 = value1;
            								}
            							}
HXDLIN( 481)							color6 = (color6 | (color8 << 8));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 481)							color6 = (color6 & -256);
HXDLIN( 481)							int color9;
HXDLIN( 481)							if ((value2 > 255)) {
HXLINE( 481)								color9 = 255;
            							}
            							else {
HXLINE( 481)								if ((value2 < 0)) {
HXLINE( 481)									color9 = 0;
            								}
            								else {
HXLINE( 481)									color9 = value2;
            								}
            							}
HXDLIN( 481)							color6 = (color6 | color9);
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 481)							color6 = (color6 & 16777215);
HXDLIN( 481)							int color10;
HXDLIN( 481)							if ((value3 > 255)) {
HXLINE( 481)								color10 = 255;
            							}
            							else {
HXLINE( 481)								if ((value3 < 0)) {
HXLINE( 481)									color10 = 0;
            								}
            								else {
HXLINE( 481)									color10 = value3;
            								}
            							}
HXDLIN( 481)							color6 = (color6 | (color10 << 24));
            						}
HXDLIN( 481)						int color11 = color6;
HXDLIN( 481)						bool _hx_tmp22;
HXDLIN( 481)						bool _hx_tmp23;
HXDLIN( 481)						bool _hx_tmp24;
HXDLIN( 481)						if ((x36 >= 0)) {
HXLINE( 481)							_hx_tmp24 = (y36 >= 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp24 = false;
            						}
HXDLIN( 481)						if (_hx_tmp24) {
HXLINE( 481)							_hx_tmp23 = (x36 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 481)							_hx_tmp23 = false;
            						}
HXDLIN( 481)						if (_hx_tmp23) {
HXLINE( 481)							_hx_tmp22 = (y36 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 481)							_hx_tmp22 = false;
            						}
HXDLIN( 481)						if (!(_hx_tmp22)) {
HXLINE( 481)							::cpp::Int64 this19 = _hx_int64_make(x36,y36);
HXDLIN( 481)							int _hx_tmp25 = _hx_int64_high(this19);
HXDLIN( 481)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this18, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp25,_hx_int64_low(this19))));
            						}
            						else {
HXLINE( 481)							bool _hx_tmp26;
HXDLIN( 481)							bool _hx_tmp27;
HXDLIN( 481)							bool _hx_tmp28;
HXDLIN( 481)							bool _hx_tmp29;
HXDLIN( 481)							int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this18->b->__get(pos)) ) | (( (int)(this18->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp29 = ((( (int)(this18->b->__get(pos1)) ) | (( (int)(this18->b->__get((pos1 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp29 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp29)) {
HXLINE( 481)								int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp28 = ((( (int)(this18->b->__get(pos2)) ) | (( (int)(this18->b->__get((pos2 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp28 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp28)) {
HXLINE( 481)								int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp27 = ((( (int)(this18->b->__get(pos3)) ) | (( (int)(this18->b->__get((pos3 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp27 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp27)) {
HXLINE( 481)								_hx_tmp26 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp26 = true;
            							}
HXDLIN( 481)							if (_hx_tmp26) {
HXLINE( 481)								 ::vision::ds::ImageView v = null();
HXDLIN( 481)								bool _hx_tmp30;
HXDLIN( 481)								bool _hx_tmp31;
HXDLIN( 481)								bool _hx_tmp32;
HXDLIN( 481)								bool _hx_tmp33;
HXDLIN( 481)								bool _hx_tmp34;
HXDLIN( 481)								bool _hx_tmp35;
HXDLIN( 481)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)								if (((( (int)(this18->b->__get(pos4)) ) | (( (int)(this18->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 481)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp35 = ((( (int)(this18->b->__get(pos5)) ) | (( (int)(this18->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp35 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp35)) {
HXLINE( 481)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									_hx_tmp34 = ((( (int)(this18->b->__get(pos6)) ) | (( (int)(this18->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp34 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp34)) {
HXLINE( 481)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp33 = ((( (int)(this18->b->__get(pos7)) ) | (( (int)(this18->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp33 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp33)) {
HXLINE( 481)									_hx_tmp32 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp32 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp32)) {
HXLINE( 481)									_hx_tmp31 = ::hx::IsNull( v );
            								}
            								else {
HXLINE( 481)									_hx_tmp31 = false;
            								}
HXDLIN( 481)								if (_hx_tmp31) {
HXLINE( 481)									bool _hx_tmp36;
HXDLIN( 481)									bool _hx_tmp37;
HXDLIN( 481)									if ((x36 >= 0)) {
HXLINE( 481)										_hx_tmp37 = (y36 >= 0);
            									}
            									else {
HXLINE( 481)										_hx_tmp37 = false;
            									}
HXDLIN( 481)									if (_hx_tmp37) {
HXLINE( 481)										_hx_tmp36 = (x36 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 481)										_hx_tmp36 = false;
            									}
HXDLIN( 481)									if (_hx_tmp36) {
HXLINE( 481)										_hx_tmp30 = (y36 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 481)										_hx_tmp30 = false;
            									}
            								}
            								else {
HXLINE( 481)									bool has = false;
HXDLIN( 481)									 ::vision::ds::ImageView view;
HXDLIN( 481)									if (::hx::IsNotNull( v )) {
HXLINE( 481)										view = v;
            									}
            									else {
HXLINE( 481)										int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this18->b->__get(pos8)) ) | (( (int)(this18->b->__get((pos8 + 1))) ) << 8)),(( (int)(this18->b->__get(pos9)) ) | (( (int)(this18->b->__get((pos9 + 1))) ) << 8)),(( (int)(this18->b->__get(pos10)) ) | (( (int)(this18->b->__get((pos10 + 1))) ) << 8)),(( (int)(this18->b->__get(pos11)) ) | (( (int)(this18->b->__get((pos11 + 1))) ) << 8)),this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 481)									switch((int)(view->shape)){
            										case (int)0: {
HXLINE( 481)											bool has1;
HXDLIN( 481)											bool has2;
HXDLIN( 481)											if ((x36 < (view->x + view->width))) {
HXLINE( 481)												has2 = (y36 < (view->y + view->height));
            											}
            											else {
HXLINE( 481)												has2 = false;
            											}
HXDLIN( 481)											if (has2) {
HXLINE( 481)												has1 = (x36 >= view->x);
            											}
            											else {
HXLINE( 481)												has1 = false;
            											}
HXDLIN( 481)											if (has1) {
HXLINE( 481)												has = (y36 >= view->y);
            											}
            											else {
HXLINE( 481)												has = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 481)											bool has3;
HXDLIN( 481)											bool has4;
HXDLIN( 481)											bool has5;
HXDLIN( 481)											if ((x36 < (view->x + view->width))) {
HXLINE( 481)												has5 = (y36 < (view->y + view->height));
            											}
            											else {
HXLINE( 481)												has5 = false;
            											}
HXDLIN( 481)											if (has5) {
HXLINE( 481)												has4 = (x36 >= view->x);
            											}
            											else {
HXLINE( 481)												has4 = false;
            											}
HXDLIN( 481)											if (has4) {
HXLINE( 481)												has3 = (y36 >= view->y);
            											}
            											else {
HXLINE( 481)												has3 = false;
            											}
HXLINE(1400)											has = !(has3);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 481)											if ((view->width > view->height)) {
HXLINE( 481)												Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 481)												Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 481)												Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 481)												Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 481)												::cpp::Int64 p = _hx_int64_make(x36,y36);
HXDLIN( 481)												Float x37 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 481)												Float y37 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 481)												Float has6 = ::Math_obj::sqrt(((x37 * x37) + (y37 * y37)));
HXDLIN( 481)												Float x38 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 481)												Float y38 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)												has = ((has6 + ::Math_obj::sqrt(((x38 * x38) + (y38 * y38)))) <= view->width);
HXLINE( 481)												if ((view->shape == 3)) {
HXLINE(1416)													has = !(has);
            												}
            											}
            											else {
HXLINE( 481)												if ((view->height > view->width)) {
HXLINE( 481)													Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 481)													Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 481)													Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 481)													Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 481)													Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 481)													::cpp::Int64 p1 = _hx_int64_make(x36,y36);
HXDLIN( 481)													Float x39 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 481)													Float y39 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 481)													Float has7 = ::Math_obj::sqrt(((x39 * x39) + (y39 * y39)));
HXDLIN( 481)													Float x40 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 481)													Float y40 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)													has = ((has7 + ::Math_obj::sqrt(((x40 * x40) + (y40 * y40)))) <= view->height);
HXLINE( 481)													if ((view->shape == 3)) {
HXLINE(1425)														has = !(has);
            													}
            												}
            												else {
HXLINE( 481)													Float point1_x = ( (Float)(x36) );
HXDLIN( 481)													Float point1_y = ( (Float)(y36) );
HXDLIN( 481)													Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 481)													Float x41 = (point2_x - point1_x);
HXDLIN( 481)													Float y41 = (point2_y - point1_y);
HXLINE(1428)													has = (::Math_obj::sqrt(((x41 * x41) + (y41 * y41))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 481)													if ((view->shape == 3)) {
HXLINE(1429)														has = !(has);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has = (((::Math_obj::abs((( (Float)((x36 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y36 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has = !((((::Math_obj::abs((( (Float)((x36 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y36 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 481)									_hx_tmp30 = has;
            								}
HXDLIN( 481)								if (_hx_tmp30) {
HXLINE( 481)									int position16 = (((y36 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x36) * 4);
HXDLIN( 481)									position16 = (position16 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)									this18->b[position16] = ( (unsigned char)(((color11 >> 24) & 255)) );
HXDLIN( 481)									this18->b[(position16 + 1)] = ( (unsigned char)(((color11 >> 16) & 255)) );
HXDLIN( 481)									this18->b[(position16 + 2)] = ( (unsigned char)(((color11 >> 8) & 255)) );
HXDLIN( 481)									this18->b[(position16 + 3)] = ( (unsigned char)((color11 & 255)) );
            								}
            							}
            							else {
HXLINE( 481)								int position17 = (((y36 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x36) * 4);
HXDLIN( 481)								position17 = (position17 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this18->b[position17] = ( (unsigned char)(((color11 >> 24) & 255)) );
HXDLIN( 481)								this18->b[(position17 + 1)] = ( (unsigned char)(((color11 >> 16) & 255)) );
HXDLIN( 481)								this18->b[(position17 + 2)] = ( (unsigned char)(((color11 >> 8) & 255)) );
HXDLIN( 481)								this18->b[(position17 + 3)] = ( (unsigned char)((color11 & 255)) );
            							}
            						}
            					}
HXDLIN( 481)					if ((y33 != ::Std_obj::_hx_int(y33))) {
HXLINE( 481)						int x42 = ::Math_obj::floor(x33);
HXDLIN( 481)						int y42 = ::Math_obj::ceil(y33);
HXDLIN( 481)						Float Red1 = ((((( (Float)(1) ) - xFraction1) + yFraction1) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Green1 = ((((( (Float)(1) ) - xFraction1) + yFraction1) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Blue1 = ((((( (Float)(1) ) - xFraction1) + yFraction1) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Alpha1 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)						int color12 = 0;
HXDLIN( 481)						{
HXLINE( 481)							int value4 = ::Math_obj::round((Red1 * ( (Float)(255) )));
HXDLIN( 481)							color12 = (color12 & -16711681);
HXDLIN( 481)							int color13;
HXDLIN( 481)							if ((value4 > 255)) {
HXLINE( 481)								color13 = 255;
            							}
            							else {
HXLINE( 481)								if ((value4 < 0)) {
HXLINE( 481)									color13 = 0;
            								}
            								else {
HXLINE( 481)									color13 = value4;
            								}
            							}
HXDLIN( 481)							color12 = (color12 | (color13 << 16));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value5 = ::Math_obj::round((Green1 * ( (Float)(255) )));
HXDLIN( 481)							color12 = (color12 & -65281);
HXDLIN( 481)							int color14;
HXDLIN( 481)							if ((value5 > 255)) {
HXLINE( 481)								color14 = 255;
            							}
            							else {
HXLINE( 481)								if ((value5 < 0)) {
HXLINE( 481)									color14 = 0;
            								}
            								else {
HXLINE( 481)									color14 = value5;
            								}
            							}
HXDLIN( 481)							color12 = (color12 | (color14 << 8));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value6 = ::Math_obj::round((Blue1 * ( (Float)(255) )));
HXDLIN( 481)							color12 = (color12 & -256);
HXDLIN( 481)							int color15;
HXDLIN( 481)							if ((value6 > 255)) {
HXLINE( 481)								color15 = 255;
            							}
            							else {
HXLINE( 481)								if ((value6 < 0)) {
HXLINE( 481)									color15 = 0;
            								}
            								else {
HXLINE( 481)									color15 = value6;
            								}
            							}
HXDLIN( 481)							color12 = (color12 | color15);
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value7 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 481)							color12 = (color12 & 16777215);
HXDLIN( 481)							int color16;
HXDLIN( 481)							if ((value7 > 255)) {
HXLINE( 481)								color16 = 255;
            							}
            							else {
HXLINE( 481)								if ((value7 < 0)) {
HXLINE( 481)									color16 = 0;
            								}
            								else {
HXLINE( 481)									color16 = value7;
            								}
            							}
HXDLIN( 481)							color12 = (color12 | (color16 << 24));
            						}
HXDLIN( 481)						int color17 = color12;
HXDLIN( 481)						bool _hx_tmp38;
HXDLIN( 481)						bool _hx_tmp39;
HXDLIN( 481)						bool _hx_tmp40;
HXDLIN( 481)						if ((x42 >= 0)) {
HXLINE( 481)							_hx_tmp40 = (y42 >= 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp40 = false;
            						}
HXDLIN( 481)						if (_hx_tmp40) {
HXLINE( 481)							_hx_tmp39 = (x42 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 481)							_hx_tmp39 = false;
            						}
HXDLIN( 481)						if (_hx_tmp39) {
HXLINE( 481)							_hx_tmp38 = (y42 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 481)							_hx_tmp38 = false;
            						}
HXDLIN( 481)						if (!(_hx_tmp38)) {
HXLINE( 481)							::cpp::Int64 this20 = _hx_int64_make(x42,y42);
HXDLIN( 481)							int _hx_tmp41 = _hx_int64_high(this20);
HXDLIN( 481)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this18, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp41,_hx_int64_low(this20))));
            						}
            						else {
HXLINE( 481)							bool _hx_tmp42;
HXDLIN( 481)							bool _hx_tmp43;
HXDLIN( 481)							bool _hx_tmp44;
HXDLIN( 481)							bool _hx_tmp45;
HXDLIN( 481)							int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this18->b->__get(pos12)) ) | (( (int)(this18->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp45 = ((( (int)(this18->b->__get(pos13)) ) | (( (int)(this18->b->__get((pos13 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp45 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp45)) {
HXLINE( 481)								int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp44 = ((( (int)(this18->b->__get(pos14)) ) | (( (int)(this18->b->__get((pos14 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp44 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp44)) {
HXLINE( 481)								int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp43 = ((( (int)(this18->b->__get(pos15)) ) | (( (int)(this18->b->__get((pos15 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp43 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp43)) {
HXLINE( 481)								_hx_tmp42 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp42 = true;
            							}
HXDLIN( 481)							if (_hx_tmp42) {
HXLINE( 481)								 ::vision::ds::ImageView v1 = null();
HXDLIN( 481)								bool _hx_tmp46;
HXDLIN( 481)								bool _hx_tmp47;
HXDLIN( 481)								bool _hx_tmp48;
HXDLIN( 481)								bool _hx_tmp49;
HXDLIN( 481)								bool _hx_tmp50;
HXDLIN( 481)								bool _hx_tmp51;
HXDLIN( 481)								int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)								if (((( (int)(this18->b->__get(pos16)) ) | (( (int)(this18->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 481)									int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp51 = ((( (int)(this18->b->__get(pos17)) ) | (( (int)(this18->b->__get((pos17 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp51 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp51)) {
HXLINE( 481)									int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									_hx_tmp50 = ((( (int)(this18->b->__get(pos18)) ) | (( (int)(this18->b->__get((pos18 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp50 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp50)) {
HXLINE( 481)									int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp49 = ((( (int)(this18->b->__get(pos19)) ) | (( (int)(this18->b->__get((pos19 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp49 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp49)) {
HXLINE( 481)									_hx_tmp48 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp48 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp48)) {
HXLINE( 481)									_hx_tmp47 = ::hx::IsNull( v1 );
            								}
            								else {
HXLINE( 481)									_hx_tmp47 = false;
            								}
HXDLIN( 481)								if (_hx_tmp47) {
HXLINE( 481)									bool _hx_tmp52;
HXDLIN( 481)									bool _hx_tmp53;
HXDLIN( 481)									if ((x42 >= 0)) {
HXLINE( 481)										_hx_tmp53 = (y42 >= 0);
            									}
            									else {
HXLINE( 481)										_hx_tmp53 = false;
            									}
HXDLIN( 481)									if (_hx_tmp53) {
HXLINE( 481)										_hx_tmp52 = (x42 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 481)										_hx_tmp52 = false;
            									}
HXDLIN( 481)									if (_hx_tmp52) {
HXLINE( 481)										_hx_tmp46 = (y42 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 481)										_hx_tmp46 = false;
            									}
            								}
            								else {
HXLINE( 481)									bool has8 = false;
HXDLIN( 481)									 ::vision::ds::ImageView view1;
HXDLIN( 481)									if (::hx::IsNotNull( v1 )) {
HXLINE( 481)										view1 = v1;
            									}
            									else {
HXLINE( 481)										int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)										int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)										int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this18->b->__get(pos20)) ) | (( (int)(this18->b->__get((pos20 + 1))) ) << 8)),(( (int)(this18->b->__get(pos21)) ) | (( (int)(this18->b->__get((pos21 + 1))) ) << 8)),(( (int)(this18->b->__get(pos22)) ) | (( (int)(this18->b->__get((pos22 + 1))) ) << 8)),(( (int)(this18->b->__get(pos23)) ) | (( (int)(this18->b->__get((pos23 + 1))) ) << 8)),this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 481)									switch((int)(view1->shape)){
            										case (int)0: {
HXLINE( 481)											bool has9;
HXDLIN( 481)											bool has10;
HXDLIN( 481)											if ((x42 < (view1->x + view1->width))) {
HXLINE( 481)												has10 = (y42 < (view1->y + view1->height));
            											}
            											else {
HXLINE( 481)												has10 = false;
            											}
HXDLIN( 481)											if (has10) {
HXLINE( 481)												has9 = (x42 >= view1->x);
            											}
            											else {
HXLINE( 481)												has9 = false;
            											}
HXDLIN( 481)											if (has9) {
HXLINE( 481)												has8 = (y42 >= view1->y);
            											}
            											else {
HXLINE( 481)												has8 = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 481)											bool has11;
HXDLIN( 481)											bool has12;
HXDLIN( 481)											bool has13;
HXDLIN( 481)											if ((x42 < (view1->x + view1->width))) {
HXLINE( 481)												has13 = (y42 < (view1->y + view1->height));
            											}
            											else {
HXLINE( 481)												has13 = false;
            											}
HXDLIN( 481)											if (has13) {
HXLINE( 481)												has12 = (x42 >= view1->x);
            											}
            											else {
HXLINE( 481)												has12 = false;
            											}
HXDLIN( 481)											if (has12) {
HXLINE( 481)												has11 = (y42 >= view1->y);
            											}
            											else {
HXLINE( 481)												has11 = false;
            											}
HXLINE(1400)											has8 = !(has11);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 481)											if ((view1->width > view1->height)) {
HXLINE( 481)												Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 481)												Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 481)												Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 481)												Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 481)												::cpp::Int64 p2 = _hx_int64_make(x42,y42);
HXDLIN( 481)												Float x43 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 481)												Float y43 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 481)												Float has14 = ::Math_obj::sqrt(((x43 * x43) + (y43 * y43)));
HXDLIN( 481)												Float x44 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 481)												Float y44 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)												has8 = ((has14 + ::Math_obj::sqrt(((x44 * x44) + (y44 * y44)))) <= view1->width);
HXLINE( 481)												if ((view1->shape == 3)) {
HXLINE(1416)													has8 = !(has8);
            												}
            											}
            											else {
HXLINE( 481)												if ((view1->height > view1->width)) {
HXLINE( 481)													Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 481)													Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 481)													Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 481)													Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 481)													Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 481)													::cpp::Int64 p3 = _hx_int64_make(x42,y42);
HXDLIN( 481)													Float x45 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 481)													Float y45 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 481)													Float has15 = ::Math_obj::sqrt(((x45 * x45) + (y45 * y45)));
HXDLIN( 481)													Float x46 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 481)													Float y46 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)													has8 = ((has15 + ::Math_obj::sqrt(((x46 * x46) + (y46 * y46)))) <= view1->height);
HXLINE( 481)													if ((view1->shape == 3)) {
HXLINE(1425)														has8 = !(has8);
            													}
            												}
            												else {
HXLINE( 481)													Float point1_x1 = ( (Float)(x42) );
HXDLIN( 481)													Float point1_y1 = ( (Float)(y42) );
HXDLIN( 481)													Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 481)													Float x47 = (point2_x1 - point1_x1);
HXDLIN( 481)													Float y47 = (point2_y1 - point1_y1);
HXLINE(1428)													has8 = (::Math_obj::sqrt(((x47 * x47) + (y47 * y47))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 481)													if ((view1->shape == 3)) {
HXLINE(1429)														has8 = !(has8);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has8 = (((::Math_obj::abs((( (Float)((x42 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y42 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has8 = !((((::Math_obj::abs((( (Float)((x42 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y42 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 481)									_hx_tmp46 = has8;
            								}
HXDLIN( 481)								if (_hx_tmp46) {
HXLINE( 481)									int position18 = (((y42 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x42) * 4);
HXDLIN( 481)									position18 = (position18 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)									this18->b[position18] = ( (unsigned char)(((color17 >> 24) & 255)) );
HXDLIN( 481)									this18->b[(position18 + 1)] = ( (unsigned char)(((color17 >> 16) & 255)) );
HXDLIN( 481)									this18->b[(position18 + 2)] = ( (unsigned char)(((color17 >> 8) & 255)) );
HXDLIN( 481)									this18->b[(position18 + 3)] = ( (unsigned char)((color17 & 255)) );
            								}
            							}
            							else {
HXLINE( 481)								int position19 = (((y42 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x42) * 4);
HXDLIN( 481)								position19 = (position19 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this18->b[position19] = ( (unsigned char)(((color17 >> 24) & 255)) );
HXDLIN( 481)								this18->b[(position19 + 1)] = ( (unsigned char)(((color17 >> 16) & 255)) );
HXDLIN( 481)								this18->b[(position19 + 2)] = ( (unsigned char)(((color17 >> 8) & 255)) );
HXDLIN( 481)								this18->b[(position19 + 3)] = ( (unsigned char)((color17 & 255)) );
            							}
            						}
            					}
HXDLIN( 481)					if ((x33 != ::Std_obj::_hx_int(x33))) {
HXLINE( 481)						int x48 = ::Math_obj::ceil(x33);
HXDLIN( 481)						int y48 = ::Math_obj::floor(y33);
HXDLIN( 481)						Float Red2 = (((xFraction1 + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Green2 = (((xFraction1 + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Blue2 = (((xFraction1 + (( (Float)(1) ) - yFraction1)) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Alpha2 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)						int color18 = 0;
HXDLIN( 481)						{
HXLINE( 481)							int value8 = ::Math_obj::round((Red2 * ( (Float)(255) )));
HXDLIN( 481)							color18 = (color18 & -16711681);
HXDLIN( 481)							int color19;
HXDLIN( 481)							if ((value8 > 255)) {
HXLINE( 481)								color19 = 255;
            							}
            							else {
HXLINE( 481)								if ((value8 < 0)) {
HXLINE( 481)									color19 = 0;
            								}
            								else {
HXLINE( 481)									color19 = value8;
            								}
            							}
HXDLIN( 481)							color18 = (color18 | (color19 << 16));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value9 = ::Math_obj::round((Green2 * ( (Float)(255) )));
HXDLIN( 481)							color18 = (color18 & -65281);
HXDLIN( 481)							int color20;
HXDLIN( 481)							if ((value9 > 255)) {
HXLINE( 481)								color20 = 255;
            							}
            							else {
HXLINE( 481)								if ((value9 < 0)) {
HXLINE( 481)									color20 = 0;
            								}
            								else {
HXLINE( 481)									color20 = value9;
            								}
            							}
HXDLIN( 481)							color18 = (color18 | (color20 << 8));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value10 = ::Math_obj::round((Blue2 * ( (Float)(255) )));
HXDLIN( 481)							color18 = (color18 & -256);
HXDLIN( 481)							int color21;
HXDLIN( 481)							if ((value10 > 255)) {
HXLINE( 481)								color21 = 255;
            							}
            							else {
HXLINE( 481)								if ((value10 < 0)) {
HXLINE( 481)									color21 = 0;
            								}
            								else {
HXLINE( 481)									color21 = value10;
            								}
            							}
HXDLIN( 481)							color18 = (color18 | color21);
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value11 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 481)							color18 = (color18 & 16777215);
HXDLIN( 481)							int color22;
HXDLIN( 481)							if ((value11 > 255)) {
HXLINE( 481)								color22 = 255;
            							}
            							else {
HXLINE( 481)								if ((value11 < 0)) {
HXLINE( 481)									color22 = 0;
            								}
            								else {
HXLINE( 481)									color22 = value11;
            								}
            							}
HXDLIN( 481)							color18 = (color18 | (color22 << 24));
            						}
HXDLIN( 481)						int color23 = color18;
HXDLIN( 481)						bool _hx_tmp54;
HXDLIN( 481)						bool _hx_tmp55;
HXDLIN( 481)						bool _hx_tmp56;
HXDLIN( 481)						if ((x48 >= 0)) {
HXLINE( 481)							_hx_tmp56 = (y48 >= 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp56 = false;
            						}
HXDLIN( 481)						if (_hx_tmp56) {
HXLINE( 481)							_hx_tmp55 = (x48 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 481)							_hx_tmp55 = false;
            						}
HXDLIN( 481)						if (_hx_tmp55) {
HXLINE( 481)							_hx_tmp54 = (y48 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 481)							_hx_tmp54 = false;
            						}
HXDLIN( 481)						if (!(_hx_tmp54)) {
HXLINE( 481)							::cpp::Int64 this21 = _hx_int64_make(x48,y48);
HXDLIN( 481)							int _hx_tmp57 = _hx_int64_high(this21);
HXDLIN( 481)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this18, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp57,_hx_int64_low(this21))));
            						}
            						else {
HXLINE( 481)							bool _hx_tmp58;
HXDLIN( 481)							bool _hx_tmp59;
HXDLIN( 481)							bool _hx_tmp60;
HXDLIN( 481)							bool _hx_tmp61;
HXDLIN( 481)							int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this18->b->__get(pos24)) ) | (( (int)(this18->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp61 = ((( (int)(this18->b->__get(pos25)) ) | (( (int)(this18->b->__get((pos25 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp61 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp61)) {
HXLINE( 481)								int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp60 = ((( (int)(this18->b->__get(pos26)) ) | (( (int)(this18->b->__get((pos26 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp60 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp60)) {
HXLINE( 481)								int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp59 = ((( (int)(this18->b->__get(pos27)) ) | (( (int)(this18->b->__get((pos27 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp59 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp59)) {
HXLINE( 481)								_hx_tmp58 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp58 = true;
            							}
HXDLIN( 481)							if (_hx_tmp58) {
HXLINE( 481)								 ::vision::ds::ImageView v2 = null();
HXDLIN( 481)								bool _hx_tmp62;
HXDLIN( 481)								bool _hx_tmp63;
HXDLIN( 481)								bool _hx_tmp64;
HXDLIN( 481)								bool _hx_tmp65;
HXDLIN( 481)								bool _hx_tmp66;
HXDLIN( 481)								bool _hx_tmp67;
HXDLIN( 481)								int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)								if (((( (int)(this18->b->__get(pos28)) ) | (( (int)(this18->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 481)									int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp67 = ((( (int)(this18->b->__get(pos29)) ) | (( (int)(this18->b->__get((pos29 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp67 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp67)) {
HXLINE( 481)									int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									_hx_tmp66 = ((( (int)(this18->b->__get(pos30)) ) | (( (int)(this18->b->__get((pos30 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp66 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp66)) {
HXLINE( 481)									int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp65 = ((( (int)(this18->b->__get(pos31)) ) | (( (int)(this18->b->__get((pos31 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp65 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp65)) {
HXLINE( 481)									_hx_tmp64 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp64 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp64)) {
HXLINE( 481)									_hx_tmp63 = ::hx::IsNull( v2 );
            								}
            								else {
HXLINE( 481)									_hx_tmp63 = false;
            								}
HXDLIN( 481)								if (_hx_tmp63) {
HXLINE( 481)									bool _hx_tmp68;
HXDLIN( 481)									bool _hx_tmp69;
HXDLIN( 481)									if ((x48 >= 0)) {
HXLINE( 481)										_hx_tmp69 = (y48 >= 0);
            									}
            									else {
HXLINE( 481)										_hx_tmp69 = false;
            									}
HXDLIN( 481)									if (_hx_tmp69) {
HXLINE( 481)										_hx_tmp68 = (x48 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 481)										_hx_tmp68 = false;
            									}
HXDLIN( 481)									if (_hx_tmp68) {
HXLINE( 481)										_hx_tmp62 = (y48 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 481)										_hx_tmp62 = false;
            									}
            								}
            								else {
HXLINE( 481)									bool has16 = false;
HXDLIN( 481)									 ::vision::ds::ImageView view2;
HXDLIN( 481)									if (::hx::IsNotNull( v2 )) {
HXLINE( 481)										view2 = v2;
            									}
            									else {
HXLINE( 481)										int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)										int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)										int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this18->b->__get(pos32)) ) | (( (int)(this18->b->__get((pos32 + 1))) ) << 8)),(( (int)(this18->b->__get(pos33)) ) | (( (int)(this18->b->__get((pos33 + 1))) ) << 8)),(( (int)(this18->b->__get(pos34)) ) | (( (int)(this18->b->__get((pos34 + 1))) ) << 8)),(( (int)(this18->b->__get(pos35)) ) | (( (int)(this18->b->__get((pos35 + 1))) ) << 8)),this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 481)									switch((int)(view2->shape)){
            										case (int)0: {
HXLINE( 481)											bool has17;
HXDLIN( 481)											bool has18;
HXDLIN( 481)											if ((x48 < (view2->x + view2->width))) {
HXLINE( 481)												has18 = (y48 < (view2->y + view2->height));
            											}
            											else {
HXLINE( 481)												has18 = false;
            											}
HXDLIN( 481)											if (has18) {
HXLINE( 481)												has17 = (x48 >= view2->x);
            											}
            											else {
HXLINE( 481)												has17 = false;
            											}
HXDLIN( 481)											if (has17) {
HXLINE( 481)												has16 = (y48 >= view2->y);
            											}
            											else {
HXLINE( 481)												has16 = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 481)											bool has19;
HXDLIN( 481)											bool has20;
HXDLIN( 481)											bool has21;
HXDLIN( 481)											if ((x48 < (view2->x + view2->width))) {
HXLINE( 481)												has21 = (y48 < (view2->y + view2->height));
            											}
            											else {
HXLINE( 481)												has21 = false;
            											}
HXDLIN( 481)											if (has21) {
HXLINE( 481)												has20 = (x48 >= view2->x);
            											}
            											else {
HXLINE( 481)												has20 = false;
            											}
HXDLIN( 481)											if (has20) {
HXLINE( 481)												has19 = (y48 >= view2->y);
            											}
            											else {
HXLINE( 481)												has19 = false;
            											}
HXLINE(1400)											has16 = !(has19);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 481)											if ((view2->width > view2->height)) {
HXLINE( 481)												Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN( 481)												Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 481)												Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 481)												Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 481)												::cpp::Int64 p4 = _hx_int64_make(x48,y48);
HXDLIN( 481)												Float x49 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 481)												Float y49 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 481)												Float has22 = ::Math_obj::sqrt(((x49 * x49) + (y49 * y49)));
HXDLIN( 481)												Float x50 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 481)												Float y50 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)												has16 = ((has22 + ::Math_obj::sqrt(((x50 * x50) + (y50 * y50)))) <= view2->width);
HXLINE( 481)												if ((view2->shape == 3)) {
HXLINE(1416)													has16 = !(has16);
            												}
            											}
            											else {
HXLINE( 481)												if ((view2->height > view2->width)) {
HXLINE( 481)													Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 481)													Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 481)													Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN( 481)													Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 481)													Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 481)													::cpp::Int64 p5 = _hx_int64_make(x48,y48);
HXDLIN( 481)													Float x51 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 481)													Float y51 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 481)													Float has23 = ::Math_obj::sqrt(((x51 * x51) + (y51 * y51)));
HXDLIN( 481)													Float x52 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 481)													Float y52 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)													has16 = ((has23 + ::Math_obj::sqrt(((x52 * x52) + (y52 * y52)))) <= view2->height);
HXLINE( 481)													if ((view2->shape == 3)) {
HXLINE(1425)														has16 = !(has16);
            													}
            												}
            												else {
HXLINE( 481)													Float point1_x2 = ( (Float)(x48) );
HXDLIN( 481)													Float point1_y2 = ( (Float)(y48) );
HXDLIN( 481)													Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 481)													Float x53 = (point2_x2 - point1_x2);
HXDLIN( 481)													Float y53 = (point2_y2 - point1_y2);
HXLINE(1428)													has16 = (::Math_obj::sqrt(((x53 * x53) + (y53 * y53))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 481)													if ((view2->shape == 3)) {
HXLINE(1429)														has16 = !(has16);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has16 = (((::Math_obj::abs((( (Float)((x48 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y48 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has16 = !((((::Math_obj::abs((( (Float)((x48 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y48 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 481)									_hx_tmp62 = has16;
            								}
HXDLIN( 481)								if (_hx_tmp62) {
HXLINE( 481)									int position20 = (((y48 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x48) * 4);
HXDLIN( 481)									position20 = (position20 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)									this18->b[position20] = ( (unsigned char)(((color23 >> 24) & 255)) );
HXDLIN( 481)									this18->b[(position20 + 1)] = ( (unsigned char)(((color23 >> 16) & 255)) );
HXDLIN( 481)									this18->b[(position20 + 2)] = ( (unsigned char)(((color23 >> 8) & 255)) );
HXDLIN( 481)									this18->b[(position20 + 3)] = ( (unsigned char)((color23 & 255)) );
            								}
            							}
            							else {
HXLINE( 481)								int position21 = (((y48 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x48) * 4);
HXDLIN( 481)								position21 = (position21 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this18->b[position21] = ( (unsigned char)(((color23 >> 24) & 255)) );
HXDLIN( 481)								this18->b[(position21 + 1)] = ( (unsigned char)(((color23 >> 16) & 255)) );
HXDLIN( 481)								this18->b[(position21 + 2)] = ( (unsigned char)(((color23 >> 8) & 255)) );
HXDLIN( 481)								this18->b[(position21 + 3)] = ( (unsigned char)((color23 & 255)) );
            							}
            						}
            					}
HXDLIN( 481)					bool _hx_tmp70;
HXDLIN( 481)					if ((x33 != ::Std_obj::_hx_int(x33))) {
HXLINE( 481)						_hx_tmp70 = (y33 != ::Std_obj::_hx_int(y33));
            					}
            					else {
HXLINE( 481)						_hx_tmp70 = false;
            					}
HXDLIN( 481)					if (_hx_tmp70) {
HXLINE( 481)						int x54 = ::Math_obj::ceil(x33);
HXDLIN( 481)						int y54 = ::Math_obj::ceil(y33);
HXDLIN( 481)						Float Red3 = (((xFraction1 + yFraction1) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Green3 = (((xFraction1 + yFraction1) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Blue3 = (((xFraction1 + yFraction1) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)						Float Alpha3 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)						int color24 = 0;
HXDLIN( 481)						{
HXLINE( 481)							int value12 = ::Math_obj::round((Red3 * ( (Float)(255) )));
HXDLIN( 481)							color24 = (color24 & -16711681);
HXDLIN( 481)							int color25;
HXDLIN( 481)							if ((value12 > 255)) {
HXLINE( 481)								color25 = 255;
            							}
            							else {
HXLINE( 481)								if ((value12 < 0)) {
HXLINE( 481)									color25 = 0;
            								}
            								else {
HXLINE( 481)									color25 = value12;
            								}
            							}
HXDLIN( 481)							color24 = (color24 | (color25 << 16));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value13 = ::Math_obj::round((Green3 * ( (Float)(255) )));
HXDLIN( 481)							color24 = (color24 & -65281);
HXDLIN( 481)							int color26;
HXDLIN( 481)							if ((value13 > 255)) {
HXLINE( 481)								color26 = 255;
            							}
            							else {
HXLINE( 481)								if ((value13 < 0)) {
HXLINE( 481)									color26 = 0;
            								}
            								else {
HXLINE( 481)									color26 = value13;
            								}
            							}
HXDLIN( 481)							color24 = (color24 | (color26 << 8));
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value14 = ::Math_obj::round((Blue3 * ( (Float)(255) )));
HXDLIN( 481)							color24 = (color24 & -256);
HXDLIN( 481)							int color27;
HXDLIN( 481)							if ((value14 > 255)) {
HXLINE( 481)								color27 = 255;
            							}
            							else {
HXLINE( 481)								if ((value14 < 0)) {
HXLINE( 481)									color27 = 0;
            								}
            								else {
HXLINE( 481)									color27 = value14;
            								}
            							}
HXDLIN( 481)							color24 = (color24 | color27);
            						}
HXDLIN( 481)						{
HXLINE( 481)							int value15 = ::Math_obj::round((Alpha3 * ( (Float)(255) )));
HXDLIN( 481)							color24 = (color24 & 16777215);
HXDLIN( 481)							int color28;
HXDLIN( 481)							if ((value15 > 255)) {
HXLINE( 481)								color28 = 255;
            							}
            							else {
HXLINE( 481)								if ((value15 < 0)) {
HXLINE( 481)									color28 = 0;
            								}
            								else {
HXLINE( 481)									color28 = value15;
            								}
            							}
HXDLIN( 481)							color24 = (color24 | (color28 << 24));
            						}
HXDLIN( 481)						int color29 = color24;
HXDLIN( 481)						bool _hx_tmp71;
HXDLIN( 481)						bool _hx_tmp72;
HXDLIN( 481)						bool _hx_tmp73;
HXDLIN( 481)						if ((x54 >= 0)) {
HXLINE( 481)							_hx_tmp73 = (y54 >= 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp73 = false;
            						}
HXDLIN( 481)						if (_hx_tmp73) {
HXLINE( 481)							_hx_tmp72 = (x54 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 481)							_hx_tmp72 = false;
            						}
HXDLIN( 481)						if (_hx_tmp72) {
HXLINE( 481)							_hx_tmp71 = (y54 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 481)							_hx_tmp71 = false;
            						}
HXDLIN( 481)						if (!(_hx_tmp71)) {
HXLINE( 481)							::cpp::Int64 this22 = _hx_int64_make(x54,y54);
HXDLIN( 481)							int _hx_tmp74 = _hx_int64_high(this22);
HXDLIN( 481)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this18, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp74,_hx_int64_low(this22))));
            						}
            						else {
HXLINE( 481)							bool _hx_tmp75;
HXDLIN( 481)							bool _hx_tmp76;
HXDLIN( 481)							bool _hx_tmp77;
HXDLIN( 481)							bool _hx_tmp78;
HXDLIN( 481)							int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this18->b->__get(pos36)) ) | (( (int)(this18->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp78 = ((( (int)(this18->b->__get(pos37)) ) | (( (int)(this18->b->__get((pos37 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp78 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp78)) {
HXLINE( 481)								int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp77 = ((( (int)(this18->b->__get(pos38)) ) | (( (int)(this18->b->__get((pos38 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp77 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp77)) {
HXLINE( 481)								int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp76 = ((( (int)(this18->b->__get(pos39)) ) | (( (int)(this18->b->__get((pos39 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp76 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp76)) {
HXLINE( 481)								_hx_tmp75 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp75 = true;
            							}
HXDLIN( 481)							if (_hx_tmp75) {
HXLINE( 481)								 ::vision::ds::ImageView v3 = null();
HXDLIN( 481)								bool _hx_tmp79;
HXDLIN( 481)								bool _hx_tmp80;
HXDLIN( 481)								bool _hx_tmp81;
HXDLIN( 481)								bool _hx_tmp82;
HXDLIN( 481)								bool _hx_tmp83;
HXDLIN( 481)								bool _hx_tmp84;
HXDLIN( 481)								int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)								if (((( (int)(this18->b->__get(pos40)) ) | (( (int)(this18->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE( 481)									int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp84 = ((( (int)(this18->b->__get(pos41)) ) | (( (int)(this18->b->__get((pos41 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp84 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp84)) {
HXLINE( 481)									int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									_hx_tmp83 = ((( (int)(this18->b->__get(pos42)) ) | (( (int)(this18->b->__get((pos42 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp83 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp83)) {
HXLINE( 481)									int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									_hx_tmp82 = ((( (int)(this18->b->__get(pos43)) ) | (( (int)(this18->b->__get((pos43 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp82 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp82)) {
HXLINE( 481)									_hx_tmp81 = (this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp81 = true;
            								}
HXDLIN( 481)								if (!(_hx_tmp81)) {
HXLINE( 481)									_hx_tmp80 = ::hx::IsNull( v3 );
            								}
            								else {
HXLINE( 481)									_hx_tmp80 = false;
            								}
HXDLIN( 481)								if (_hx_tmp80) {
HXLINE( 481)									bool _hx_tmp85;
HXDLIN( 481)									bool _hx_tmp86;
HXDLIN( 481)									if ((x54 >= 0)) {
HXLINE( 481)										_hx_tmp86 = (y54 >= 0);
            									}
            									else {
HXLINE( 481)										_hx_tmp86 = false;
            									}
HXDLIN( 481)									if (_hx_tmp86) {
HXLINE( 481)										_hx_tmp85 = (x54 < (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 481)										_hx_tmp85 = false;
            									}
HXDLIN( 481)									if (_hx_tmp85) {
HXLINE( 481)										_hx_tmp79 = (y54 < ::Math_obj::ceil((( (Float)((this18->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 481)										_hx_tmp79 = false;
            									}
            								}
            								else {
HXLINE( 481)									bool has24 = false;
HXDLIN( 481)									 ::vision::ds::ImageView view3;
HXDLIN( 481)									if (::hx::IsNotNull( v3 )) {
HXLINE( 481)										view3 = v3;
            									}
            									else {
HXLINE( 481)										int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)										int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)										int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)										view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this18->b->__get(pos44)) ) | (( (int)(this18->b->__get((pos44 + 1))) ) << 8)),(( (int)(this18->b->__get(pos45)) ) | (( (int)(this18->b->__get((pos45 + 1))) ) << 8)),(( (int)(this18->b->__get(pos46)) ) | (( (int)(this18->b->__get((pos46 + 1))) ) << 8)),(( (int)(this18->b->__get(pos47)) ) | (( (int)(this18->b->__get((pos47 + 1))) ) << 8)),this18->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 481)									switch((int)(view3->shape)){
            										case (int)0: {
HXLINE( 481)											bool has25;
HXDLIN( 481)											bool has26;
HXDLIN( 481)											if ((x54 < (view3->x + view3->width))) {
HXLINE( 481)												has26 = (y54 < (view3->y + view3->height));
            											}
            											else {
HXLINE( 481)												has26 = false;
            											}
HXDLIN( 481)											if (has26) {
HXLINE( 481)												has25 = (x54 >= view3->x);
            											}
            											else {
HXLINE( 481)												has25 = false;
            											}
HXDLIN( 481)											if (has25) {
HXLINE( 481)												has24 = (y54 >= view3->y);
            											}
            											else {
HXLINE( 481)												has24 = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 481)											bool has27;
HXDLIN( 481)											bool has28;
HXDLIN( 481)											bool has29;
HXDLIN( 481)											if ((x54 < (view3->x + view3->width))) {
HXLINE( 481)												has29 = (y54 < (view3->y + view3->height));
            											}
            											else {
HXLINE( 481)												has29 = false;
            											}
HXDLIN( 481)											if (has29) {
HXLINE( 481)												has28 = (x54 >= view3->x);
            											}
            											else {
HXLINE( 481)												has28 = false;
            											}
HXDLIN( 481)											if (has28) {
HXLINE( 481)												has27 = (y54 >= view3->y);
            											}
            											else {
HXLINE( 481)												has27 = false;
            											}
HXLINE(1400)											has24 = !(has27);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 481)											if ((view3->width > view3->height)) {
HXLINE( 481)												Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN( 481)												Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN( 481)												Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN( 481)												Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 481)												::cpp::Int64 p6 = _hx_int64_make(x54,y54);
HXDLIN( 481)												Float x55 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN( 481)												Float y55 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN( 481)												Float has30 = ::Math_obj::sqrt(((x55 * x55) + (y55 * y55)));
HXDLIN( 481)												Float x56 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN( 481)												Float y56 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)												has24 = ((has30 + ::Math_obj::sqrt(((x56 * x56) + (y56 * y56)))) <= view3->width);
HXLINE( 481)												if ((view3->shape == 3)) {
HXLINE(1416)													has24 = !(has24);
            												}
            											}
            											else {
HXLINE( 481)												if ((view3->height > view3->width)) {
HXLINE( 481)													Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 481)													Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 481)													Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN( 481)													Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN( 481)													Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN( 481)													::cpp::Int64 p7 = _hx_int64_make(x54,y54);
HXDLIN( 481)													Float x57 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN( 481)													Float y57 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN( 481)													Float has31 = ::Math_obj::sqrt(((x57 * x57) + (y57 * y57)));
HXDLIN( 481)													Float x58 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN( 481)													Float y58 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)													has24 = ((has31 + ::Math_obj::sqrt(((x58 * x58) + (y58 * y58)))) <= view3->height);
HXLINE( 481)													if ((view3->shape == 3)) {
HXLINE(1425)														has24 = !(has24);
            													}
            												}
            												else {
HXLINE( 481)													Float point1_x3 = ( (Float)(x54) );
HXDLIN( 481)													Float point1_y3 = ( (Float)(y54) );
HXDLIN( 481)													Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 481)													Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 481)													Float x59 = (point2_x3 - point1_x3);
HXDLIN( 481)													Float y59 = (point2_y3 - point1_y3);
HXLINE(1428)													has24 = (::Math_obj::sqrt(((x59 * x59) + (y59 * y59))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE( 481)													if ((view3->shape == 3)) {
HXLINE(1429)														has24 = !(has24);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has24 = (((::Math_obj::abs((( (Float)((x54 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y54 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has24 = !((((::Math_obj::abs((( (Float)((x54 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y54 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 481)									_hx_tmp79 = has24;
            								}
HXDLIN( 481)								if (_hx_tmp79) {
HXLINE( 481)									int position22 = (((y54 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x54) * 4);
HXDLIN( 481)									position22 = (position22 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)									this18->b[position22] = ( (unsigned char)(((color29 >> 24) & 255)) );
HXDLIN( 481)									this18->b[(position22 + 1)] = ( (unsigned char)(((color29 >> 16) & 255)) );
HXDLIN( 481)									this18->b[(position22 + 2)] = ( (unsigned char)(((color29 >> 8) & 255)) );
HXDLIN( 481)									this18->b[(position22 + 3)] = ( (unsigned char)((color29 & 255)) );
            								}
            							}
            							else {
HXLINE( 481)								int position23 = (((y54 * (( (int)(this18->b->__get(0)) ) | (( (int)(this18->b->__get(1)) ) << 8))) + x54) * 4);
HXDLIN( 481)								position23 = (position23 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this18->b[position23] = ( (unsigned char)(((color29 >> 24) & 255)) );
HXDLIN( 481)								this18->b[(position23 + 1)] = ( (unsigned char)(((color29 >> 16) & 255)) );
HXDLIN( 481)								this18->b[(position23 + 2)] = ( (unsigned char)(((color29 >> 8) & 255)) );
HXDLIN( 481)								this18->b[(position23 + 3)] = ( (unsigned char)((color29 & 255)) );
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 481)				Float yFraction2 = (toY - ( (Float)(::Std_obj::_hx_int(toY)) ));
HXDLIN( 481)				Float xFraction2 = (toX - ( (Float)(::Std_obj::_hx_int(toX)) ));
HXDLIN( 481)				{
HXLINE( 481)					int x60 = ::Math_obj::floor(toX);
HXDLIN( 481)					int y60 = ::Math_obj::floor(toY);
HXDLIN( 481)					Float Red4 = ((((( (Float)(1) ) - xFraction2) + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Green4 = ((((( (Float)(1) ) - xFraction2) + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Blue4 = ((((( (Float)(1) ) - xFraction2) + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Alpha4 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)					int color30 = 0;
HXDLIN( 481)					{
HXLINE( 481)						int value16 = ::Math_obj::round((Red4 * ( (Float)(255) )));
HXDLIN( 481)						color30 = (color30 & -16711681);
HXDLIN( 481)						int color31;
HXDLIN( 481)						if ((value16 > 255)) {
HXLINE( 481)							color31 = 255;
            						}
            						else {
HXLINE( 481)							if ((value16 < 0)) {
HXLINE( 481)								color31 = 0;
            							}
            							else {
HXLINE( 481)								color31 = value16;
            							}
            						}
HXDLIN( 481)						color30 = (color30 | (color31 << 16));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value17 = ::Math_obj::round((Green4 * ( (Float)(255) )));
HXDLIN( 481)						color30 = (color30 & -65281);
HXDLIN( 481)						int color32;
HXDLIN( 481)						if ((value17 > 255)) {
HXLINE( 481)							color32 = 255;
            						}
            						else {
HXLINE( 481)							if ((value17 < 0)) {
HXLINE( 481)								color32 = 0;
            							}
            							else {
HXLINE( 481)								color32 = value17;
            							}
            						}
HXDLIN( 481)						color30 = (color30 | (color32 << 8));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value18 = ::Math_obj::round((Blue4 * ( (Float)(255) )));
HXDLIN( 481)						color30 = (color30 & -256);
HXDLIN( 481)						int color33;
HXDLIN( 481)						if ((value18 > 255)) {
HXLINE( 481)							color33 = 255;
            						}
            						else {
HXLINE( 481)							if ((value18 < 0)) {
HXLINE( 481)								color33 = 0;
            							}
            							else {
HXLINE( 481)								color33 = value18;
            							}
            						}
HXDLIN( 481)						color30 = (color30 | color33);
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value19 = ::Math_obj::round((Alpha4 * ( (Float)(255) )));
HXDLIN( 481)						color30 = (color30 & 16777215);
HXDLIN( 481)						int color34;
HXDLIN( 481)						if ((value19 > 255)) {
HXLINE( 481)							color34 = 255;
            						}
            						else {
HXLINE( 481)							if ((value19 < 0)) {
HXLINE( 481)								color34 = 0;
            							}
            							else {
HXLINE( 481)								color34 = value19;
            							}
            						}
HXDLIN( 481)						color30 = (color30 | (color34 << 24));
            					}
HXDLIN( 481)					int color35 = color30;
HXDLIN( 481)					bool _hx_tmp87;
HXDLIN( 481)					bool _hx_tmp88;
HXDLIN( 481)					bool _hx_tmp89;
HXDLIN( 481)					if ((x60 >= 0)) {
HXLINE( 481)						_hx_tmp89 = (y60 >= 0);
            					}
            					else {
HXLINE( 481)						_hx_tmp89 = false;
            					}
HXDLIN( 481)					if (_hx_tmp89) {
HXLINE( 481)						_hx_tmp88 = (x60 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 481)						_hx_tmp88 = false;
            					}
HXDLIN( 481)					if (_hx_tmp88) {
HXLINE( 481)						_hx_tmp87 = (y60 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 481)						_hx_tmp87 = false;
            					}
HXDLIN( 481)					if (!(_hx_tmp87)) {
HXLINE( 481)						::cpp::Int64 this23 = _hx_int64_make(x60,y60);
HXDLIN( 481)						int _hx_tmp90 = _hx_int64_high(this23);
HXDLIN( 481)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp90,_hx_int64_low(this23))));
            					}
            					else {
HXLINE( 481)						bool _hx_tmp91;
HXDLIN( 481)						bool _hx_tmp92;
HXDLIN( 481)						bool _hx_tmp93;
HXDLIN( 481)						bool _hx_tmp94;
HXDLIN( 481)						int pos48 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)						if (((( (int)(this1->b->__get(pos48)) ) | (( (int)(this1->b->__get((pos48 + 1))) ) << 8)) == 0)) {
HXLINE( 481)							int pos49 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp94 = ((( (int)(this1->b->__get(pos49)) ) | (( (int)(this1->b->__get((pos49 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp94 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp94)) {
HXLINE( 481)							int pos50 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)							_hx_tmp93 = ((( (int)(this1->b->__get(pos50)) ) | (( (int)(this1->b->__get((pos50 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp93 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp93)) {
HXLINE( 481)							int pos51 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp92 = ((( (int)(this1->b->__get(pos51)) ) | (( (int)(this1->b->__get((pos51 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp92 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp92)) {
HXLINE( 481)							_hx_tmp91 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp91 = true;
            						}
HXDLIN( 481)						if (_hx_tmp91) {
HXLINE( 481)							 ::vision::ds::ImageView v4 = null();
HXDLIN( 481)							bool _hx_tmp95;
HXDLIN( 481)							bool _hx_tmp96;
HXDLIN( 481)							bool _hx_tmp97;
HXDLIN( 481)							bool _hx_tmp98;
HXDLIN( 481)							bool _hx_tmp99;
HXDLIN( 481)							bool _hx_tmp100;
HXDLIN( 481)							int pos52 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this1->b->__get(pos52)) ) | (( (int)(this1->b->__get((pos52 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos53 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp100 = ((( (int)(this1->b->__get(pos53)) ) | (( (int)(this1->b->__get((pos53 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp100 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp100)) {
HXLINE( 481)								int pos54 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp99 = ((( (int)(this1->b->__get(pos54)) ) | (( (int)(this1->b->__get((pos54 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp99 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp99)) {
HXLINE( 481)								int pos55 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp98 = ((( (int)(this1->b->__get(pos55)) ) | (( (int)(this1->b->__get((pos55 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp98 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp98)) {
HXLINE( 481)								_hx_tmp97 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp97 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp97)) {
HXLINE( 481)								_hx_tmp96 = ::hx::IsNull( v4 );
            							}
            							else {
HXLINE( 481)								_hx_tmp96 = false;
            							}
HXDLIN( 481)							if (_hx_tmp96) {
HXLINE( 481)								bool _hx_tmp101;
HXDLIN( 481)								bool _hx_tmp102;
HXDLIN( 481)								if ((x60 >= 0)) {
HXLINE( 481)									_hx_tmp102 = (y60 >= 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp102 = false;
            								}
HXDLIN( 481)								if (_hx_tmp102) {
HXLINE( 481)									_hx_tmp101 = (x60 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 481)									_hx_tmp101 = false;
            								}
HXDLIN( 481)								if (_hx_tmp101) {
HXLINE( 481)									_hx_tmp95 = (y60 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 481)									_hx_tmp95 = false;
            								}
            							}
            							else {
HXLINE( 481)								bool has32 = false;
HXDLIN( 481)								 ::vision::ds::ImageView view4;
HXDLIN( 481)								if (::hx::IsNotNull( v4 )) {
HXLINE( 481)									view4 = v4;
            								}
            								else {
HXLINE( 481)									int pos56 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)									int pos57 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									int pos58 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									int pos59 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									view4 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos56)) ) | (( (int)(this1->b->__get((pos56 + 1))) ) << 8)),(( (int)(this1->b->__get(pos57)) ) | (( (int)(this1->b->__get((pos57 + 1))) ) << 8)),(( (int)(this1->b->__get(pos58)) ) | (( (int)(this1->b->__get((pos58 + 1))) ) << 8)),(( (int)(this1->b->__get(pos59)) ) | (( (int)(this1->b->__get((pos59 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 481)								switch((int)(view4->shape)){
            									case (int)0: {
HXLINE( 481)										bool has33;
HXDLIN( 481)										bool has34;
HXDLIN( 481)										if ((x60 < (view4->x + view4->width))) {
HXLINE( 481)											has34 = (y60 < (view4->y + view4->height));
            										}
            										else {
HXLINE( 481)											has34 = false;
            										}
HXDLIN( 481)										if (has34) {
HXLINE( 481)											has33 = (x60 >= view4->x);
            										}
            										else {
HXLINE( 481)											has33 = false;
            										}
HXDLIN( 481)										if (has33) {
HXLINE( 481)											has32 = (y60 >= view4->y);
            										}
            										else {
HXLINE( 481)											has32 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 481)										bool has35;
HXDLIN( 481)										bool has36;
HXDLIN( 481)										bool has37;
HXDLIN( 481)										if ((x60 < (view4->x + view4->width))) {
HXLINE( 481)											has37 = (y60 < (view4->y + view4->height));
            										}
            										else {
HXLINE( 481)											has37 = false;
            										}
HXDLIN( 481)										if (has37) {
HXLINE( 481)											has36 = (x60 >= view4->x);
            										}
            										else {
HXLINE( 481)											has36 = false;
            										}
HXDLIN( 481)										if (has36) {
HXLINE( 481)											has35 = (y60 >= view4->y);
            										}
            										else {
HXLINE( 481)											has35 = false;
            										}
HXLINE(1400)										has32 = !(has35);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 481)										if ((view4->width > view4->height)) {
HXLINE( 481)											Float a8 = (( (Float)(view4->width) ) / ( (Float)(2) ));
HXDLIN( 481)											Float b8 = (( (Float)(view4->height) ) / ( (Float)(2) ));
HXDLIN( 481)											Float c8 = ::Math_obj::sqrt(((a8 * a8) - (b8 * b8)));
HXDLIN( 481)											Float f1_x8 = ((view4->x + (( (Float)(view4->width) ) / ( (Float)(2) ))) - c8);
HXDLIN( 481)											Float f1_y8 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 481)											Float f2_x8 = ((view4->x + (( (Float)(view4->width) ) / ( (Float)(2) ))) + c8);
HXDLIN( 481)											Float f2_y8 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 481)											::cpp::Int64 p8 = _hx_int64_make(x60,y60);
HXDLIN( 481)											Float x61 = (( (Float)(_hx_int64_high(p8)) ) - f1_x8);
HXDLIN( 481)											Float y61 = (( (Float)(_hx_int64_low(p8)) ) - f1_y8);
HXDLIN( 481)											Float has38 = ::Math_obj::sqrt(((x61 * x61) + (y61 * y61)));
HXDLIN( 481)											Float x62 = (( (Float)(_hx_int64_high(p8)) ) - f2_x8);
HXDLIN( 481)											Float y62 = (( (Float)(_hx_int64_low(p8)) ) - f2_y8);
HXLINE(1415)											has32 = ((has38 + ::Math_obj::sqrt(((x62 * x62) + (y62 * y62)))) <= view4->width);
HXLINE( 481)											if ((view4->shape == 3)) {
HXLINE(1416)												has32 = !(has32);
            											}
            										}
            										else {
HXLINE( 481)											if ((view4->height > view4->width)) {
HXLINE( 481)												Float a9 = (( (Float)(view4->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b9 = (( (Float)(view4->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c9 = ::Math_obj::sqrt(((a9 * a9) - (b9 * b9)));
HXDLIN( 481)												Float f1_x9 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f1_y9 = ((view4->y + (( (Float)(view4->height) ) / ( (Float)(2) ))) - c9);
HXDLIN( 481)												Float f2_x9 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_y9 = ((view4->y + (( (Float)(view4->height) ) / ( (Float)(2) ))) + c9);
HXDLIN( 481)												::cpp::Int64 p9 = _hx_int64_make(x60,y60);
HXDLIN( 481)												Float x63 = (( (Float)(_hx_int64_high(p9)) ) - f1_x9);
HXDLIN( 481)												Float y63 = (( (Float)(_hx_int64_low(p9)) ) - f1_y9);
HXDLIN( 481)												Float has39 = ::Math_obj::sqrt(((x63 * x63) + (y63 * y63)));
HXDLIN( 481)												Float x64 = (( (Float)(_hx_int64_high(p9)) ) - f2_x9);
HXDLIN( 481)												Float y64 = (( (Float)(_hx_int64_low(p9)) ) - f2_y9);
HXLINE(1424)												has32 = ((has39 + ::Math_obj::sqrt(((x64 * x64) + (y64 * y64)))) <= view4->height);
HXLINE( 481)												if ((view4->shape == 3)) {
HXLINE(1425)													has32 = !(has32);
            												}
            											}
            											else {
HXLINE( 481)												Float point1_x4 = ( (Float)(x60) );
HXDLIN( 481)												Float point1_y4 = ( (Float)(y60) );
HXDLIN( 481)												Float point2_x4 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float point2_y4 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float x65 = (point2_x4 - point1_x4);
HXDLIN( 481)												Float y65 = (point2_y4 - point1_y4);
HXLINE(1428)												has32 = (::Math_obj::sqrt(((x65 * x65) + (y65 * y65))) <= (( (Float)(view4->width) ) / ( (Float)(2) )));
HXLINE( 481)												if ((view4->shape == 3)) {
HXLINE(1429)													has32 = !(has32);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has32 = (((::Math_obj::abs((( (Float)((x60 - view4->x)) ) - (( (Float)(view4->width) ) / ( (Float)(2) )))) / (( (Float)(view4->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y60 - view4->y)) ) - (( (Float)(view4->height) ) / ( (Float)(2) )))) / (( (Float)(view4->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has32 = !((((::Math_obj::abs((( (Float)((x60 - view4->x)) ) - (( (Float)(view4->width) ) / ( (Float)(2) )))) / (( (Float)(view4->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y60 - view4->y)) ) - (( (Float)(view4->height) ) / ( (Float)(2) )))) / (( (Float)(view4->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 481)								_hx_tmp95 = has32;
            							}
HXDLIN( 481)							if (_hx_tmp95) {
HXLINE( 481)								int position24 = (((y60 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x60) * 4);
HXDLIN( 481)								position24 = (position24 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this1->b[position24] = ( (unsigned char)(((color35 >> 24) & 255)) );
HXDLIN( 481)								this1->b[(position24 + 1)] = ( (unsigned char)(((color35 >> 16) & 255)) );
HXDLIN( 481)								this1->b[(position24 + 2)] = ( (unsigned char)(((color35 >> 8) & 255)) );
HXDLIN( 481)								this1->b[(position24 + 3)] = ( (unsigned char)((color35 & 255)) );
            							}
            						}
            						else {
HXLINE( 481)							int position25 = (((y60 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x60) * 4);
HXDLIN( 481)							position25 = (position25 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)							this1->b[position25] = ( (unsigned char)(((color35 >> 24) & 255)) );
HXDLIN( 481)							this1->b[(position25 + 1)] = ( (unsigned char)(((color35 >> 16) & 255)) );
HXDLIN( 481)							this1->b[(position25 + 2)] = ( (unsigned char)(((color35 >> 8) & 255)) );
HXDLIN( 481)							this1->b[(position25 + 3)] = ( (unsigned char)((color35 & 255)) );
            						}
            					}
            				}
HXDLIN( 481)				if ((toY != ::Std_obj::_hx_int(toY))) {
HXLINE( 481)					int x66 = ::Math_obj::floor(toX);
HXDLIN( 481)					int y66 = ::Math_obj::ceil(toY);
HXDLIN( 481)					Float Red5 = ((((( (Float)(1) ) - xFraction2) + yFraction2) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Green5 = ((((( (Float)(1) ) - xFraction2) + yFraction2) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Blue5 = ((((( (Float)(1) ) - xFraction2) + yFraction2) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Alpha5 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)					int color36 = 0;
HXDLIN( 481)					{
HXLINE( 481)						int value20 = ::Math_obj::round((Red5 * ( (Float)(255) )));
HXDLIN( 481)						color36 = (color36 & -16711681);
HXDLIN( 481)						int color37;
HXDLIN( 481)						if ((value20 > 255)) {
HXLINE( 481)							color37 = 255;
            						}
            						else {
HXLINE( 481)							if ((value20 < 0)) {
HXLINE( 481)								color37 = 0;
            							}
            							else {
HXLINE( 481)								color37 = value20;
            							}
            						}
HXDLIN( 481)						color36 = (color36 | (color37 << 16));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value21 = ::Math_obj::round((Green5 * ( (Float)(255) )));
HXDLIN( 481)						color36 = (color36 & -65281);
HXDLIN( 481)						int color38;
HXDLIN( 481)						if ((value21 > 255)) {
HXLINE( 481)							color38 = 255;
            						}
            						else {
HXLINE( 481)							if ((value21 < 0)) {
HXLINE( 481)								color38 = 0;
            							}
            							else {
HXLINE( 481)								color38 = value21;
            							}
            						}
HXDLIN( 481)						color36 = (color36 | (color38 << 8));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value22 = ::Math_obj::round((Blue5 * ( (Float)(255) )));
HXDLIN( 481)						color36 = (color36 & -256);
HXDLIN( 481)						int color39;
HXDLIN( 481)						if ((value22 > 255)) {
HXLINE( 481)							color39 = 255;
            						}
            						else {
HXLINE( 481)							if ((value22 < 0)) {
HXLINE( 481)								color39 = 0;
            							}
            							else {
HXLINE( 481)								color39 = value22;
            							}
            						}
HXDLIN( 481)						color36 = (color36 | color39);
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value23 = ::Math_obj::round((Alpha5 * ( (Float)(255) )));
HXDLIN( 481)						color36 = (color36 & 16777215);
HXDLIN( 481)						int color40;
HXDLIN( 481)						if ((value23 > 255)) {
HXLINE( 481)							color40 = 255;
            						}
            						else {
HXLINE( 481)							if ((value23 < 0)) {
HXLINE( 481)								color40 = 0;
            							}
            							else {
HXLINE( 481)								color40 = value23;
            							}
            						}
HXDLIN( 481)						color36 = (color36 | (color40 << 24));
            					}
HXDLIN( 481)					int color41 = color36;
HXDLIN( 481)					bool _hx_tmp103;
HXDLIN( 481)					bool _hx_tmp104;
HXDLIN( 481)					bool _hx_tmp105;
HXDLIN( 481)					if ((x66 >= 0)) {
HXLINE( 481)						_hx_tmp105 = (y66 >= 0);
            					}
            					else {
HXLINE( 481)						_hx_tmp105 = false;
            					}
HXDLIN( 481)					if (_hx_tmp105) {
HXLINE( 481)						_hx_tmp104 = (x66 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 481)						_hx_tmp104 = false;
            					}
HXDLIN( 481)					if (_hx_tmp104) {
HXLINE( 481)						_hx_tmp103 = (y66 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 481)						_hx_tmp103 = false;
            					}
HXDLIN( 481)					if (!(_hx_tmp103)) {
HXLINE( 481)						::cpp::Int64 this24 = _hx_int64_make(x66,y66);
HXDLIN( 481)						int _hx_tmp106 = _hx_int64_high(this24);
HXDLIN( 481)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp106,_hx_int64_low(this24))));
            					}
            					else {
HXLINE( 481)						bool _hx_tmp107;
HXDLIN( 481)						bool _hx_tmp108;
HXDLIN( 481)						bool _hx_tmp109;
HXDLIN( 481)						bool _hx_tmp110;
HXDLIN( 481)						int pos60 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)						if (((( (int)(this1->b->__get(pos60)) ) | (( (int)(this1->b->__get((pos60 + 1))) ) << 8)) == 0)) {
HXLINE( 481)							int pos61 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp110 = ((( (int)(this1->b->__get(pos61)) ) | (( (int)(this1->b->__get((pos61 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp110 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp110)) {
HXLINE( 481)							int pos62 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)							_hx_tmp109 = ((( (int)(this1->b->__get(pos62)) ) | (( (int)(this1->b->__get((pos62 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp109 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp109)) {
HXLINE( 481)							int pos63 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp108 = ((( (int)(this1->b->__get(pos63)) ) | (( (int)(this1->b->__get((pos63 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp108 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp108)) {
HXLINE( 481)							_hx_tmp107 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp107 = true;
            						}
HXDLIN( 481)						if (_hx_tmp107) {
HXLINE( 481)							 ::vision::ds::ImageView v5 = null();
HXDLIN( 481)							bool _hx_tmp111;
HXDLIN( 481)							bool _hx_tmp112;
HXDLIN( 481)							bool _hx_tmp113;
HXDLIN( 481)							bool _hx_tmp114;
HXDLIN( 481)							bool _hx_tmp115;
HXDLIN( 481)							bool _hx_tmp116;
HXDLIN( 481)							int pos64 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this1->b->__get(pos64)) ) | (( (int)(this1->b->__get((pos64 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos65 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp116 = ((( (int)(this1->b->__get(pos65)) ) | (( (int)(this1->b->__get((pos65 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp116 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp116)) {
HXLINE( 481)								int pos66 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp115 = ((( (int)(this1->b->__get(pos66)) ) | (( (int)(this1->b->__get((pos66 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp115 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp115)) {
HXLINE( 481)								int pos67 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp114 = ((( (int)(this1->b->__get(pos67)) ) | (( (int)(this1->b->__get((pos67 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp114 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp114)) {
HXLINE( 481)								_hx_tmp113 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp113 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp113)) {
HXLINE( 481)								_hx_tmp112 = ::hx::IsNull( v5 );
            							}
            							else {
HXLINE( 481)								_hx_tmp112 = false;
            							}
HXDLIN( 481)							if (_hx_tmp112) {
HXLINE( 481)								bool _hx_tmp117;
HXDLIN( 481)								bool _hx_tmp118;
HXDLIN( 481)								if ((x66 >= 0)) {
HXLINE( 481)									_hx_tmp118 = (y66 >= 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp118 = false;
            								}
HXDLIN( 481)								if (_hx_tmp118) {
HXLINE( 481)									_hx_tmp117 = (x66 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 481)									_hx_tmp117 = false;
            								}
HXDLIN( 481)								if (_hx_tmp117) {
HXLINE( 481)									_hx_tmp111 = (y66 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 481)									_hx_tmp111 = false;
            								}
            							}
            							else {
HXLINE( 481)								bool has40 = false;
HXDLIN( 481)								 ::vision::ds::ImageView view5;
HXDLIN( 481)								if (::hx::IsNotNull( v5 )) {
HXLINE( 481)									view5 = v5;
            								}
            								else {
HXLINE( 481)									int pos68 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)									int pos69 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									int pos70 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									int pos71 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									view5 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos68)) ) | (( (int)(this1->b->__get((pos68 + 1))) ) << 8)),(( (int)(this1->b->__get(pos69)) ) | (( (int)(this1->b->__get((pos69 + 1))) ) << 8)),(( (int)(this1->b->__get(pos70)) ) | (( (int)(this1->b->__get((pos70 + 1))) ) << 8)),(( (int)(this1->b->__get(pos71)) ) | (( (int)(this1->b->__get((pos71 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 481)								switch((int)(view5->shape)){
            									case (int)0: {
HXLINE( 481)										bool has41;
HXDLIN( 481)										bool has42;
HXDLIN( 481)										if ((x66 < (view5->x + view5->width))) {
HXLINE( 481)											has42 = (y66 < (view5->y + view5->height));
            										}
            										else {
HXLINE( 481)											has42 = false;
            										}
HXDLIN( 481)										if (has42) {
HXLINE( 481)											has41 = (x66 >= view5->x);
            										}
            										else {
HXLINE( 481)											has41 = false;
            										}
HXDLIN( 481)										if (has41) {
HXLINE( 481)											has40 = (y66 >= view5->y);
            										}
            										else {
HXLINE( 481)											has40 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 481)										bool has43;
HXDLIN( 481)										bool has44;
HXDLIN( 481)										bool has45;
HXDLIN( 481)										if ((x66 < (view5->x + view5->width))) {
HXLINE( 481)											has45 = (y66 < (view5->y + view5->height));
            										}
            										else {
HXLINE( 481)											has45 = false;
            										}
HXDLIN( 481)										if (has45) {
HXLINE( 481)											has44 = (x66 >= view5->x);
            										}
            										else {
HXLINE( 481)											has44 = false;
            										}
HXDLIN( 481)										if (has44) {
HXLINE( 481)											has43 = (y66 >= view5->y);
            										}
            										else {
HXLINE( 481)											has43 = false;
            										}
HXLINE(1400)										has40 = !(has43);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 481)										if ((view5->width > view5->height)) {
HXLINE( 481)											Float a10 = (( (Float)(view5->width) ) / ( (Float)(2) ));
HXDLIN( 481)											Float b10 = (( (Float)(view5->height) ) / ( (Float)(2) ));
HXDLIN( 481)											Float c10 = ::Math_obj::sqrt(((a10 * a10) - (b10 * b10)));
HXDLIN( 481)											Float f1_x10 = ((view5->x + (( (Float)(view5->width) ) / ( (Float)(2) ))) - c10);
HXDLIN( 481)											Float f1_y10 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 481)											Float f2_x10 = ((view5->x + (( (Float)(view5->width) ) / ( (Float)(2) ))) + c10);
HXDLIN( 481)											Float f2_y10 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 481)											::cpp::Int64 p10 = _hx_int64_make(x66,y66);
HXDLIN( 481)											Float x67 = (( (Float)(_hx_int64_high(p10)) ) - f1_x10);
HXDLIN( 481)											Float y67 = (( (Float)(_hx_int64_low(p10)) ) - f1_y10);
HXDLIN( 481)											Float has46 = ::Math_obj::sqrt(((x67 * x67) + (y67 * y67)));
HXDLIN( 481)											Float x68 = (( (Float)(_hx_int64_high(p10)) ) - f2_x10);
HXDLIN( 481)											Float y68 = (( (Float)(_hx_int64_low(p10)) ) - f2_y10);
HXLINE(1415)											has40 = ((has46 + ::Math_obj::sqrt(((x68 * x68) + (y68 * y68)))) <= view5->width);
HXLINE( 481)											if ((view5->shape == 3)) {
HXLINE(1416)												has40 = !(has40);
            											}
            										}
            										else {
HXLINE( 481)											if ((view5->height > view5->width)) {
HXLINE( 481)												Float a11 = (( (Float)(view5->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b11 = (( (Float)(view5->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c11 = ::Math_obj::sqrt(((a11 * a11) - (b11 * b11)));
HXDLIN( 481)												Float f1_x11 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f1_y11 = ((view5->y + (( (Float)(view5->height) ) / ( (Float)(2) ))) - c11);
HXDLIN( 481)												Float f2_x11 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_y11 = ((view5->y + (( (Float)(view5->height) ) / ( (Float)(2) ))) + c11);
HXDLIN( 481)												::cpp::Int64 p11 = _hx_int64_make(x66,y66);
HXDLIN( 481)												Float x69 = (( (Float)(_hx_int64_high(p11)) ) - f1_x11);
HXDLIN( 481)												Float y69 = (( (Float)(_hx_int64_low(p11)) ) - f1_y11);
HXDLIN( 481)												Float has47 = ::Math_obj::sqrt(((x69 * x69) + (y69 * y69)));
HXDLIN( 481)												Float x70 = (( (Float)(_hx_int64_high(p11)) ) - f2_x11);
HXDLIN( 481)												Float y70 = (( (Float)(_hx_int64_low(p11)) ) - f2_y11);
HXLINE(1424)												has40 = ((has47 + ::Math_obj::sqrt(((x70 * x70) + (y70 * y70)))) <= view5->height);
HXLINE( 481)												if ((view5->shape == 3)) {
HXLINE(1425)													has40 = !(has40);
            												}
            											}
            											else {
HXLINE( 481)												Float point1_x5 = ( (Float)(x66) );
HXDLIN( 481)												Float point1_y5 = ( (Float)(y66) );
HXDLIN( 481)												Float point2_x5 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float point2_y5 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float x71 = (point2_x5 - point1_x5);
HXDLIN( 481)												Float y71 = (point2_y5 - point1_y5);
HXLINE(1428)												has40 = (::Math_obj::sqrt(((x71 * x71) + (y71 * y71))) <= (( (Float)(view5->width) ) / ( (Float)(2) )));
HXLINE( 481)												if ((view5->shape == 3)) {
HXLINE(1429)													has40 = !(has40);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has40 = (((::Math_obj::abs((( (Float)((x66 - view5->x)) ) - (( (Float)(view5->width) ) / ( (Float)(2) )))) / (( (Float)(view5->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y66 - view5->y)) ) - (( (Float)(view5->height) ) / ( (Float)(2) )))) / (( (Float)(view5->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has40 = !((((::Math_obj::abs((( (Float)((x66 - view5->x)) ) - (( (Float)(view5->width) ) / ( (Float)(2) )))) / (( (Float)(view5->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y66 - view5->y)) ) - (( (Float)(view5->height) ) / ( (Float)(2) )))) / (( (Float)(view5->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 481)								_hx_tmp111 = has40;
            							}
HXDLIN( 481)							if (_hx_tmp111) {
HXLINE( 481)								int position26 = (((y66 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x66) * 4);
HXDLIN( 481)								position26 = (position26 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this1->b[position26] = ( (unsigned char)(((color41 >> 24) & 255)) );
HXDLIN( 481)								this1->b[(position26 + 1)] = ( (unsigned char)(((color41 >> 16) & 255)) );
HXDLIN( 481)								this1->b[(position26 + 2)] = ( (unsigned char)(((color41 >> 8) & 255)) );
HXDLIN( 481)								this1->b[(position26 + 3)] = ( (unsigned char)((color41 & 255)) );
            							}
            						}
            						else {
HXLINE( 481)							int position27 = (((y66 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x66) * 4);
HXDLIN( 481)							position27 = (position27 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)							this1->b[position27] = ( (unsigned char)(((color41 >> 24) & 255)) );
HXDLIN( 481)							this1->b[(position27 + 1)] = ( (unsigned char)(((color41 >> 16) & 255)) );
HXDLIN( 481)							this1->b[(position27 + 2)] = ( (unsigned char)(((color41 >> 8) & 255)) );
HXDLIN( 481)							this1->b[(position27 + 3)] = ( (unsigned char)((color41 & 255)) );
            						}
            					}
            				}
HXDLIN( 481)				if ((toX != ::Std_obj::_hx_int(toX))) {
HXLINE( 481)					int x72 = ::Math_obj::ceil(toX);
HXDLIN( 481)					int y72 = ::Math_obj::floor(toY);
HXDLIN( 481)					Float Red6 = (((xFraction2 + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Green6 = (((xFraction2 + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Blue6 = (((xFraction2 + (( (Float)(1) ) - yFraction2)) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Alpha6 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)					int color42 = 0;
HXDLIN( 481)					{
HXLINE( 481)						int value24 = ::Math_obj::round((Red6 * ( (Float)(255) )));
HXDLIN( 481)						color42 = (color42 & -16711681);
HXDLIN( 481)						int color43;
HXDLIN( 481)						if ((value24 > 255)) {
HXLINE( 481)							color43 = 255;
            						}
            						else {
HXLINE( 481)							if ((value24 < 0)) {
HXLINE( 481)								color43 = 0;
            							}
            							else {
HXLINE( 481)								color43 = value24;
            							}
            						}
HXDLIN( 481)						color42 = (color42 | (color43 << 16));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value25 = ::Math_obj::round((Green6 * ( (Float)(255) )));
HXDLIN( 481)						color42 = (color42 & -65281);
HXDLIN( 481)						int color44;
HXDLIN( 481)						if ((value25 > 255)) {
HXLINE( 481)							color44 = 255;
            						}
            						else {
HXLINE( 481)							if ((value25 < 0)) {
HXLINE( 481)								color44 = 0;
            							}
            							else {
HXLINE( 481)								color44 = value25;
            							}
            						}
HXDLIN( 481)						color42 = (color42 | (color44 << 8));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value26 = ::Math_obj::round((Blue6 * ( (Float)(255) )));
HXDLIN( 481)						color42 = (color42 & -256);
HXDLIN( 481)						int color45;
HXDLIN( 481)						if ((value26 > 255)) {
HXLINE( 481)							color45 = 255;
            						}
            						else {
HXLINE( 481)							if ((value26 < 0)) {
HXLINE( 481)								color45 = 0;
            							}
            							else {
HXLINE( 481)								color45 = value26;
            							}
            						}
HXDLIN( 481)						color42 = (color42 | color45);
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value27 = ::Math_obj::round((Alpha6 * ( (Float)(255) )));
HXDLIN( 481)						color42 = (color42 & 16777215);
HXDLIN( 481)						int color46;
HXDLIN( 481)						if ((value27 > 255)) {
HXLINE( 481)							color46 = 255;
            						}
            						else {
HXLINE( 481)							if ((value27 < 0)) {
HXLINE( 481)								color46 = 0;
            							}
            							else {
HXLINE( 481)								color46 = value27;
            							}
            						}
HXDLIN( 481)						color42 = (color42 | (color46 << 24));
            					}
HXDLIN( 481)					int color47 = color42;
HXDLIN( 481)					bool _hx_tmp119;
HXDLIN( 481)					bool _hx_tmp120;
HXDLIN( 481)					bool _hx_tmp121;
HXDLIN( 481)					if ((x72 >= 0)) {
HXLINE( 481)						_hx_tmp121 = (y72 >= 0);
            					}
            					else {
HXLINE( 481)						_hx_tmp121 = false;
            					}
HXDLIN( 481)					if (_hx_tmp121) {
HXLINE( 481)						_hx_tmp120 = (x72 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 481)						_hx_tmp120 = false;
            					}
HXDLIN( 481)					if (_hx_tmp120) {
HXLINE( 481)						_hx_tmp119 = (y72 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 481)						_hx_tmp119 = false;
            					}
HXDLIN( 481)					if (!(_hx_tmp119)) {
HXLINE( 481)						::cpp::Int64 this25 = _hx_int64_make(x72,y72);
HXDLIN( 481)						int _hx_tmp122 = _hx_int64_high(this25);
HXDLIN( 481)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp122,_hx_int64_low(this25))));
            					}
            					else {
HXLINE( 481)						bool _hx_tmp123;
HXDLIN( 481)						bool _hx_tmp124;
HXDLIN( 481)						bool _hx_tmp125;
HXDLIN( 481)						bool _hx_tmp126;
HXDLIN( 481)						int pos72 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)						if (((( (int)(this1->b->__get(pos72)) ) | (( (int)(this1->b->__get((pos72 + 1))) ) << 8)) == 0)) {
HXLINE( 481)							int pos73 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp126 = ((( (int)(this1->b->__get(pos73)) ) | (( (int)(this1->b->__get((pos73 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp126 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp126)) {
HXLINE( 481)							int pos74 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)							_hx_tmp125 = ((( (int)(this1->b->__get(pos74)) ) | (( (int)(this1->b->__get((pos74 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp125 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp125)) {
HXLINE( 481)							int pos75 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp124 = ((( (int)(this1->b->__get(pos75)) ) | (( (int)(this1->b->__get((pos75 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp124 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp124)) {
HXLINE( 481)							_hx_tmp123 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp123 = true;
            						}
HXDLIN( 481)						if (_hx_tmp123) {
HXLINE( 481)							 ::vision::ds::ImageView v6 = null();
HXDLIN( 481)							bool _hx_tmp127;
HXDLIN( 481)							bool _hx_tmp128;
HXDLIN( 481)							bool _hx_tmp129;
HXDLIN( 481)							bool _hx_tmp130;
HXDLIN( 481)							bool _hx_tmp131;
HXDLIN( 481)							bool _hx_tmp132;
HXDLIN( 481)							int pos76 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this1->b->__get(pos76)) ) | (( (int)(this1->b->__get((pos76 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos77 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp132 = ((( (int)(this1->b->__get(pos77)) ) | (( (int)(this1->b->__get((pos77 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp132 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp132)) {
HXLINE( 481)								int pos78 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp131 = ((( (int)(this1->b->__get(pos78)) ) | (( (int)(this1->b->__get((pos78 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp131 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp131)) {
HXLINE( 481)								int pos79 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp130 = ((( (int)(this1->b->__get(pos79)) ) | (( (int)(this1->b->__get((pos79 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp130 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp130)) {
HXLINE( 481)								_hx_tmp129 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp129 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp129)) {
HXLINE( 481)								_hx_tmp128 = ::hx::IsNull( v6 );
            							}
            							else {
HXLINE( 481)								_hx_tmp128 = false;
            							}
HXDLIN( 481)							if (_hx_tmp128) {
HXLINE( 481)								bool _hx_tmp133;
HXDLIN( 481)								bool _hx_tmp134;
HXDLIN( 481)								if ((x72 >= 0)) {
HXLINE( 481)									_hx_tmp134 = (y72 >= 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp134 = false;
            								}
HXDLIN( 481)								if (_hx_tmp134) {
HXLINE( 481)									_hx_tmp133 = (x72 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 481)									_hx_tmp133 = false;
            								}
HXDLIN( 481)								if (_hx_tmp133) {
HXLINE( 481)									_hx_tmp127 = (y72 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 481)									_hx_tmp127 = false;
            								}
            							}
            							else {
HXLINE( 481)								bool has48 = false;
HXDLIN( 481)								 ::vision::ds::ImageView view6;
HXDLIN( 481)								if (::hx::IsNotNull( v6 )) {
HXLINE( 481)									view6 = v6;
            								}
            								else {
HXLINE( 481)									int pos80 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)									int pos81 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									int pos82 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									int pos83 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									view6 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos80)) ) | (( (int)(this1->b->__get((pos80 + 1))) ) << 8)),(( (int)(this1->b->__get(pos81)) ) | (( (int)(this1->b->__get((pos81 + 1))) ) << 8)),(( (int)(this1->b->__get(pos82)) ) | (( (int)(this1->b->__get((pos82 + 1))) ) << 8)),(( (int)(this1->b->__get(pos83)) ) | (( (int)(this1->b->__get((pos83 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 481)								switch((int)(view6->shape)){
            									case (int)0: {
HXLINE( 481)										bool has49;
HXDLIN( 481)										bool has50;
HXDLIN( 481)										if ((x72 < (view6->x + view6->width))) {
HXLINE( 481)											has50 = (y72 < (view6->y + view6->height));
            										}
            										else {
HXLINE( 481)											has50 = false;
            										}
HXDLIN( 481)										if (has50) {
HXLINE( 481)											has49 = (x72 >= view6->x);
            										}
            										else {
HXLINE( 481)											has49 = false;
            										}
HXDLIN( 481)										if (has49) {
HXLINE( 481)											has48 = (y72 >= view6->y);
            										}
            										else {
HXLINE( 481)											has48 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 481)										bool has51;
HXDLIN( 481)										bool has52;
HXDLIN( 481)										bool has53;
HXDLIN( 481)										if ((x72 < (view6->x + view6->width))) {
HXLINE( 481)											has53 = (y72 < (view6->y + view6->height));
            										}
            										else {
HXLINE( 481)											has53 = false;
            										}
HXDLIN( 481)										if (has53) {
HXLINE( 481)											has52 = (x72 >= view6->x);
            										}
            										else {
HXLINE( 481)											has52 = false;
            										}
HXDLIN( 481)										if (has52) {
HXLINE( 481)											has51 = (y72 >= view6->y);
            										}
            										else {
HXLINE( 481)											has51 = false;
            										}
HXLINE(1400)										has48 = !(has51);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 481)										if ((view6->width > view6->height)) {
HXLINE( 481)											Float a12 = (( (Float)(view6->width) ) / ( (Float)(2) ));
HXDLIN( 481)											Float b12 = (( (Float)(view6->height) ) / ( (Float)(2) ));
HXDLIN( 481)											Float c12 = ::Math_obj::sqrt(((a12 * a12) - (b12 * b12)));
HXDLIN( 481)											Float f1_x12 = ((view6->x + (( (Float)(view6->width) ) / ( (Float)(2) ))) - c12);
HXDLIN( 481)											Float f1_y12 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 481)											Float f2_x12 = ((view6->x + (( (Float)(view6->width) ) / ( (Float)(2) ))) + c12);
HXDLIN( 481)											Float f2_y12 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 481)											::cpp::Int64 p12 = _hx_int64_make(x72,y72);
HXDLIN( 481)											Float x73 = (( (Float)(_hx_int64_high(p12)) ) - f1_x12);
HXDLIN( 481)											Float y73 = (( (Float)(_hx_int64_low(p12)) ) - f1_y12);
HXDLIN( 481)											Float has54 = ::Math_obj::sqrt(((x73 * x73) + (y73 * y73)));
HXDLIN( 481)											Float x74 = (( (Float)(_hx_int64_high(p12)) ) - f2_x12);
HXDLIN( 481)											Float y74 = (( (Float)(_hx_int64_low(p12)) ) - f2_y12);
HXLINE(1415)											has48 = ((has54 + ::Math_obj::sqrt(((x74 * x74) + (y74 * y74)))) <= view6->width);
HXLINE( 481)											if ((view6->shape == 3)) {
HXLINE(1416)												has48 = !(has48);
            											}
            										}
            										else {
HXLINE( 481)											if ((view6->height > view6->width)) {
HXLINE( 481)												Float a13 = (( (Float)(view6->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b13 = (( (Float)(view6->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c13 = ::Math_obj::sqrt(((a13 * a13) - (b13 * b13)));
HXDLIN( 481)												Float f1_x13 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f1_y13 = ((view6->y + (( (Float)(view6->height) ) / ( (Float)(2) ))) - c13);
HXDLIN( 481)												Float f2_x13 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_y13 = ((view6->y + (( (Float)(view6->height) ) / ( (Float)(2) ))) + c13);
HXDLIN( 481)												::cpp::Int64 p13 = _hx_int64_make(x72,y72);
HXDLIN( 481)												Float x75 = (( (Float)(_hx_int64_high(p13)) ) - f1_x13);
HXDLIN( 481)												Float y75 = (( (Float)(_hx_int64_low(p13)) ) - f1_y13);
HXDLIN( 481)												Float has55 = ::Math_obj::sqrt(((x75 * x75) + (y75 * y75)));
HXDLIN( 481)												Float x76 = (( (Float)(_hx_int64_high(p13)) ) - f2_x13);
HXDLIN( 481)												Float y76 = (( (Float)(_hx_int64_low(p13)) ) - f2_y13);
HXLINE(1424)												has48 = ((has55 + ::Math_obj::sqrt(((x76 * x76) + (y76 * y76)))) <= view6->height);
HXLINE( 481)												if ((view6->shape == 3)) {
HXLINE(1425)													has48 = !(has48);
            												}
            											}
            											else {
HXLINE( 481)												Float point1_x6 = ( (Float)(x72) );
HXDLIN( 481)												Float point1_y6 = ( (Float)(y72) );
HXDLIN( 481)												Float point2_x6 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float point2_y6 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float x77 = (point2_x6 - point1_x6);
HXDLIN( 481)												Float y77 = (point2_y6 - point1_y6);
HXLINE(1428)												has48 = (::Math_obj::sqrt(((x77 * x77) + (y77 * y77))) <= (( (Float)(view6->width) ) / ( (Float)(2) )));
HXLINE( 481)												if ((view6->shape == 3)) {
HXLINE(1429)													has48 = !(has48);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has48 = (((::Math_obj::abs((( (Float)((x72 - view6->x)) ) - (( (Float)(view6->width) ) / ( (Float)(2) )))) / (( (Float)(view6->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y72 - view6->y)) ) - (( (Float)(view6->height) ) / ( (Float)(2) )))) / (( (Float)(view6->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has48 = !((((::Math_obj::abs((( (Float)((x72 - view6->x)) ) - (( (Float)(view6->width) ) / ( (Float)(2) )))) / (( (Float)(view6->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y72 - view6->y)) ) - (( (Float)(view6->height) ) / ( (Float)(2) )))) / (( (Float)(view6->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 481)								_hx_tmp127 = has48;
            							}
HXDLIN( 481)							if (_hx_tmp127) {
HXLINE( 481)								int position28 = (((y72 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x72) * 4);
HXDLIN( 481)								position28 = (position28 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this1->b[position28] = ( (unsigned char)(((color47 >> 24) & 255)) );
HXDLIN( 481)								this1->b[(position28 + 1)] = ( (unsigned char)(((color47 >> 16) & 255)) );
HXDLIN( 481)								this1->b[(position28 + 2)] = ( (unsigned char)(((color47 >> 8) & 255)) );
HXDLIN( 481)								this1->b[(position28 + 3)] = ( (unsigned char)((color47 & 255)) );
            							}
            						}
            						else {
HXLINE( 481)							int position29 = (((y72 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x72) * 4);
HXDLIN( 481)							position29 = (position29 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)							this1->b[position29] = ( (unsigned char)(((color47 >> 24) & 255)) );
HXDLIN( 481)							this1->b[(position29 + 1)] = ( (unsigned char)(((color47 >> 16) & 255)) );
HXDLIN( 481)							this1->b[(position29 + 2)] = ( (unsigned char)(((color47 >> 8) & 255)) );
HXDLIN( 481)							this1->b[(position29 + 3)] = ( (unsigned char)((color47 & 255)) );
            						}
            					}
            				}
HXDLIN( 481)				bool _hx_tmp135;
HXDLIN( 481)				if ((toX != ::Std_obj::_hx_int(toX))) {
HXLINE( 481)					_hx_tmp135 = (toY != ::Std_obj::_hx_int(toY));
            				}
            				else {
HXLINE( 481)					_hx_tmp135 = false;
            				}
HXDLIN( 481)				if (_hx_tmp135) {
HXLINE( 481)					int x78 = ::Math_obj::ceil(toX);
HXDLIN( 481)					int y78 = ::Math_obj::ceil(toY);
HXDLIN( 481)					Float Red7 = (((xFraction2 + yFraction2) / ( (Float)(2) )) * (( (Float)(((color5 >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Green7 = (((xFraction2 + yFraction2) / ( (Float)(2) )) * (( (Float)(((color5 >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Blue7 = (((xFraction2 + yFraction2) / ( (Float)(2) )) * (( (Float)((color5 & 255)) ) / ( (Float)(255) )));
HXDLIN( 481)					Float Alpha7 = (( (Float)(((color5 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 481)					int color48 = 0;
HXDLIN( 481)					{
HXLINE( 481)						int value28 = ::Math_obj::round((Red7 * ( (Float)(255) )));
HXDLIN( 481)						color48 = (color48 & -16711681);
HXDLIN( 481)						int color49;
HXDLIN( 481)						if ((value28 > 255)) {
HXLINE( 481)							color49 = 255;
            						}
            						else {
HXLINE( 481)							if ((value28 < 0)) {
HXLINE( 481)								color49 = 0;
            							}
            							else {
HXLINE( 481)								color49 = value28;
            							}
            						}
HXDLIN( 481)						color48 = (color48 | (color49 << 16));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value29 = ::Math_obj::round((Green7 * ( (Float)(255) )));
HXDLIN( 481)						color48 = (color48 & -65281);
HXDLIN( 481)						int color50;
HXDLIN( 481)						if ((value29 > 255)) {
HXLINE( 481)							color50 = 255;
            						}
            						else {
HXLINE( 481)							if ((value29 < 0)) {
HXLINE( 481)								color50 = 0;
            							}
            							else {
HXLINE( 481)								color50 = value29;
            							}
            						}
HXDLIN( 481)						color48 = (color48 | (color50 << 8));
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value30 = ::Math_obj::round((Blue7 * ( (Float)(255) )));
HXDLIN( 481)						color48 = (color48 & -256);
HXDLIN( 481)						int color51;
HXDLIN( 481)						if ((value30 > 255)) {
HXLINE( 481)							color51 = 255;
            						}
            						else {
HXLINE( 481)							if ((value30 < 0)) {
HXLINE( 481)								color51 = 0;
            							}
            							else {
HXLINE( 481)								color51 = value30;
            							}
            						}
HXDLIN( 481)						color48 = (color48 | color51);
            					}
HXDLIN( 481)					{
HXLINE( 481)						int value31 = ::Math_obj::round((Alpha7 * ( (Float)(255) )));
HXDLIN( 481)						color48 = (color48 & 16777215);
HXDLIN( 481)						int color52;
HXDLIN( 481)						if ((value31 > 255)) {
HXLINE( 481)							color52 = 255;
            						}
            						else {
HXLINE( 481)							if ((value31 < 0)) {
HXLINE( 481)								color52 = 0;
            							}
            							else {
HXLINE( 481)								color52 = value31;
            							}
            						}
HXDLIN( 481)						color48 = (color48 | (color52 << 24));
            					}
HXDLIN( 481)					int color53 = color48;
HXDLIN( 481)					bool _hx_tmp136;
HXDLIN( 481)					bool _hx_tmp137;
HXDLIN( 481)					bool _hx_tmp138;
HXDLIN( 481)					if ((x78 >= 0)) {
HXLINE( 481)						_hx_tmp138 = (y78 >= 0);
            					}
            					else {
HXLINE( 481)						_hx_tmp138 = false;
            					}
HXDLIN( 481)					if (_hx_tmp138) {
HXLINE( 481)						_hx_tmp137 = (x78 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 481)						_hx_tmp137 = false;
            					}
HXDLIN( 481)					if (_hx_tmp137) {
HXLINE( 481)						_hx_tmp136 = (y78 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 481)						_hx_tmp136 = false;
            					}
HXDLIN( 481)					if (!(_hx_tmp136)) {
HXLINE( 481)						::cpp::Int64 this26 = _hx_int64_make(x78,y78);
HXDLIN( 481)						int _hx_tmp139 = _hx_int64_high(this26);
HXDLIN( 481)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp139,_hx_int64_low(this26))));
            					}
            					else {
HXLINE( 481)						bool _hx_tmp140;
HXDLIN( 481)						bool _hx_tmp141;
HXDLIN( 481)						bool _hx_tmp142;
HXDLIN( 481)						bool _hx_tmp143;
HXDLIN( 481)						int pos84 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)						if (((( (int)(this1->b->__get(pos84)) ) | (( (int)(this1->b->__get((pos84 + 1))) ) << 8)) == 0)) {
HXLINE( 481)							int pos85 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp143 = ((( (int)(this1->b->__get(pos85)) ) | (( (int)(this1->b->__get((pos85 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp143 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp143)) {
HXLINE( 481)							int pos86 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)							_hx_tmp142 = ((( (int)(this1->b->__get(pos86)) ) | (( (int)(this1->b->__get((pos86 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp142 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp142)) {
HXLINE( 481)							int pos87 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)							_hx_tmp141 = ((( (int)(this1->b->__get(pos87)) ) | (( (int)(this1->b->__get((pos87 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp141 = true;
            						}
HXDLIN( 481)						if (!(_hx_tmp141)) {
HXLINE( 481)							_hx_tmp140 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 481)							_hx_tmp140 = true;
            						}
HXDLIN( 481)						if (_hx_tmp140) {
HXLINE( 481)							 ::vision::ds::ImageView v7 = null();
HXDLIN( 481)							bool _hx_tmp144;
HXDLIN( 481)							bool _hx_tmp145;
HXDLIN( 481)							bool _hx_tmp146;
HXDLIN( 481)							bool _hx_tmp147;
HXDLIN( 481)							bool _hx_tmp148;
HXDLIN( 481)							bool _hx_tmp149;
HXDLIN( 481)							int pos88 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)							if (((( (int)(this1->b->__get(pos88)) ) | (( (int)(this1->b->__get((pos88 + 1))) ) << 8)) == 0)) {
HXLINE( 481)								int pos89 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp149 = ((( (int)(this1->b->__get(pos89)) ) | (( (int)(this1->b->__get((pos89 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp149 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp149)) {
HXLINE( 481)								int pos90 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)								_hx_tmp148 = ((( (int)(this1->b->__get(pos90)) ) | (( (int)(this1->b->__get((pos90 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp148 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp148)) {
HXLINE( 481)								int pos91 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)								_hx_tmp147 = ((( (int)(this1->b->__get(pos91)) ) | (( (int)(this1->b->__get((pos91 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp147 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp147)) {
HXLINE( 481)								_hx_tmp146 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 481)								_hx_tmp146 = true;
            							}
HXDLIN( 481)							if (!(_hx_tmp146)) {
HXLINE( 481)								_hx_tmp145 = ::hx::IsNull( v7 );
            							}
            							else {
HXLINE( 481)								_hx_tmp145 = false;
            							}
HXDLIN( 481)							if (_hx_tmp145) {
HXLINE( 481)								bool _hx_tmp150;
HXDLIN( 481)								bool _hx_tmp151;
HXDLIN( 481)								if ((x78 >= 0)) {
HXLINE( 481)									_hx_tmp151 = (y78 >= 0);
            								}
            								else {
HXLINE( 481)									_hx_tmp151 = false;
            								}
HXDLIN( 481)								if (_hx_tmp151) {
HXLINE( 481)									_hx_tmp150 = (x78 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 481)									_hx_tmp150 = false;
            								}
HXDLIN( 481)								if (_hx_tmp150) {
HXLINE( 481)									_hx_tmp144 = (y78 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 481)									_hx_tmp144 = false;
            								}
            							}
            							else {
HXLINE( 481)								bool has56 = false;
HXDLIN( 481)								 ::vision::ds::ImageView view7;
HXDLIN( 481)								if (::hx::IsNotNull( v7 )) {
HXLINE( 481)									view7 = v7;
            								}
            								else {
HXLINE( 481)									int pos92 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 481)									int pos93 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									int pos94 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 481)									int pos95 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 481)									view7 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos92)) ) | (( (int)(this1->b->__get((pos92 + 1))) ) << 8)),(( (int)(this1->b->__get(pos93)) ) | (( (int)(this1->b->__get((pos93 + 1))) ) << 8)),(( (int)(this1->b->__get(pos94)) ) | (( (int)(this1->b->__get((pos94 + 1))) ) << 8)),(( (int)(this1->b->__get(pos95)) ) | (( (int)(this1->b->__get((pos95 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 481)								switch((int)(view7->shape)){
            									case (int)0: {
HXLINE( 481)										bool has57;
HXDLIN( 481)										bool has58;
HXDLIN( 481)										if ((x78 < (view7->x + view7->width))) {
HXLINE( 481)											has58 = (y78 < (view7->y + view7->height));
            										}
            										else {
HXLINE( 481)											has58 = false;
            										}
HXDLIN( 481)										if (has58) {
HXLINE( 481)											has57 = (x78 >= view7->x);
            										}
            										else {
HXLINE( 481)											has57 = false;
            										}
HXDLIN( 481)										if (has57) {
HXLINE( 481)											has56 = (y78 >= view7->y);
            										}
            										else {
HXLINE( 481)											has56 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 481)										bool has59;
HXDLIN( 481)										bool has60;
HXDLIN( 481)										bool has61;
HXDLIN( 481)										if ((x78 < (view7->x + view7->width))) {
HXLINE( 481)											has61 = (y78 < (view7->y + view7->height));
            										}
            										else {
HXLINE( 481)											has61 = false;
            										}
HXDLIN( 481)										if (has61) {
HXLINE( 481)											has60 = (x78 >= view7->x);
            										}
            										else {
HXLINE( 481)											has60 = false;
            										}
HXDLIN( 481)										if (has60) {
HXLINE( 481)											has59 = (y78 >= view7->y);
            										}
            										else {
HXLINE( 481)											has59 = false;
            										}
HXLINE(1400)										has56 = !(has59);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 481)										if ((view7->width > view7->height)) {
HXLINE( 481)											Float a14 = (( (Float)(view7->width) ) / ( (Float)(2) ));
HXDLIN( 481)											Float b14 = (( (Float)(view7->height) ) / ( (Float)(2) ));
HXDLIN( 481)											Float c14 = ::Math_obj::sqrt(((a14 * a14) - (b14 * b14)));
HXDLIN( 481)											Float f1_x14 = ((view7->x + (( (Float)(view7->width) ) / ( (Float)(2) ))) - c14);
HXDLIN( 481)											Float f1_y14 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 481)											Float f2_x14 = ((view7->x + (( (Float)(view7->width) ) / ( (Float)(2) ))) + c14);
HXDLIN( 481)											Float f2_y14 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 481)											::cpp::Int64 p14 = _hx_int64_make(x78,y78);
HXDLIN( 481)											Float x79 = (( (Float)(_hx_int64_high(p14)) ) - f1_x14);
HXDLIN( 481)											Float y79 = (( (Float)(_hx_int64_low(p14)) ) - f1_y14);
HXDLIN( 481)											Float has62 = ::Math_obj::sqrt(((x79 * x79) + (y79 * y79)));
HXDLIN( 481)											Float x80 = (( (Float)(_hx_int64_high(p14)) ) - f2_x14);
HXDLIN( 481)											Float y80 = (( (Float)(_hx_int64_low(p14)) ) - f2_y14);
HXLINE(1415)											has56 = ((has62 + ::Math_obj::sqrt(((x80 * x80) + (y80 * y80)))) <= view7->width);
HXLINE( 481)											if ((view7->shape == 3)) {
HXLINE(1416)												has56 = !(has56);
            											}
            										}
            										else {
HXLINE( 481)											if ((view7->height > view7->width)) {
HXLINE( 481)												Float a15 = (( (Float)(view7->height) ) / ( (Float)(2) ));
HXDLIN( 481)												Float b15 = (( (Float)(view7->width) ) / ( (Float)(2) ));
HXDLIN( 481)												Float c15 = ::Math_obj::sqrt(((a15 * a15) - (b15 * b15)));
HXDLIN( 481)												Float f1_x15 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f1_y15 = ((view7->y + (( (Float)(view7->height) ) / ( (Float)(2) ))) - c15);
HXDLIN( 481)												Float f2_x15 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float f2_y15 = ((view7->y + (( (Float)(view7->height) ) / ( (Float)(2) ))) + c15);
HXDLIN( 481)												::cpp::Int64 p15 = _hx_int64_make(x78,y78);
HXDLIN( 481)												Float x81 = (( (Float)(_hx_int64_high(p15)) ) - f1_x15);
HXDLIN( 481)												Float y81 = (( (Float)(_hx_int64_low(p15)) ) - f1_y15);
HXDLIN( 481)												Float has63 = ::Math_obj::sqrt(((x81 * x81) + (y81 * y81)));
HXDLIN( 481)												Float x82 = (( (Float)(_hx_int64_high(p15)) ) - f2_x15);
HXDLIN( 481)												Float y82 = (( (Float)(_hx_int64_low(p15)) ) - f2_y15);
HXLINE(1424)												has56 = ((has63 + ::Math_obj::sqrt(((x82 * x82) + (y82 * y82)))) <= view7->height);
HXLINE( 481)												if ((view7->shape == 3)) {
HXLINE(1425)													has56 = !(has56);
            												}
            											}
            											else {
HXLINE( 481)												Float point1_x7 = ( (Float)(x78) );
HXDLIN( 481)												Float point1_y7 = ( (Float)(y78) );
HXDLIN( 481)												Float point2_x7 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 481)												Float point2_y7 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 481)												Float x83 = (point2_x7 - point1_x7);
HXDLIN( 481)												Float y83 = (point2_y7 - point1_y7);
HXLINE(1428)												has56 = (::Math_obj::sqrt(((x83 * x83) + (y83 * y83))) <= (( (Float)(view7->width) ) / ( (Float)(2) )));
HXLINE( 481)												if ((view7->shape == 3)) {
HXLINE(1429)													has56 = !(has56);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has56 = (((::Math_obj::abs((( (Float)((x78 - view7->x)) ) - (( (Float)(view7->width) ) / ( (Float)(2) )))) / (( (Float)(view7->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y78 - view7->y)) ) - (( (Float)(view7->height) ) / ( (Float)(2) )))) / (( (Float)(view7->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has56 = !((((::Math_obj::abs((( (Float)((x78 - view7->x)) ) - (( (Float)(view7->width) ) / ( (Float)(2) )))) / (( (Float)(view7->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y78 - view7->y)) ) - (( (Float)(view7->height) ) / ( (Float)(2) )))) / (( (Float)(view7->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 481)								_hx_tmp144 = has56;
            							}
HXDLIN( 481)							if (_hx_tmp144) {
HXLINE( 481)								int position30 = (((y78 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x78) * 4);
HXDLIN( 481)								position30 = (position30 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)								this1->b[position30] = ( (unsigned char)(((color53 >> 24) & 255)) );
HXDLIN( 481)								this1->b[(position30 + 1)] = ( (unsigned char)(((color53 >> 16) & 255)) );
HXDLIN( 481)								this1->b[(position30 + 2)] = ( (unsigned char)(((color53 >> 8) & 255)) );
HXDLIN( 481)								this1->b[(position30 + 3)] = ( (unsigned char)((color53 & 255)) );
            							}
            						}
            						else {
HXLINE( 481)							int position31 = (((y78 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x78) * 4);
HXDLIN( 481)							position31 = (position31 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 481)							this1->b[position31] = ( (unsigned char)(((color53 >> 24) & 255)) );
HXDLIN( 481)							this1->b[(position31 + 1)] = ( (unsigned char)(((color53 >> 16) & 255)) );
HXDLIN( 481)							this1->b[(position31 + 2)] = ( (unsigned char)(((color53 >> 8) & 255)) );
HXDLIN( 481)							this1->b[(position31 + 3)] = ( (unsigned char)((color53 & 255)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 482)		bool _hx_tmp152;
HXDLIN( 482)		Float x84 = ( (Float)(::Math_obj::ceil(fromX)) );
HXDLIN( 482)		Float y84 = ( (Float)(::Math_obj::ceil(fromY)) );
HXDLIN( 482)		bool _hx_tmp153;
HXDLIN( 482)		bool _hx_tmp154;
HXDLIN( 482)		bool _hx_tmp155;
HXDLIN( 482)		if ((x84 >= 0)) {
HXLINE( 482)			_hx_tmp155 = (y84 >= 0);
            		}
            		else {
HXLINE( 482)			_hx_tmp155 = false;
            		}
HXDLIN( 482)		if (_hx_tmp155) {
HXLINE( 482)			_hx_tmp154 = (x84 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 482)			_hx_tmp154 = false;
            		}
HXDLIN( 482)		if (_hx_tmp154) {
HXLINE( 482)			_hx_tmp153 = (y84 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 482)			_hx_tmp153 = false;
            		}
HXDLIN( 482)		if (_hx_tmp153) {
HXLINE( 482)			Float x85 = ( (Float)(::Math_obj::floor(fromX)) );
HXDLIN( 482)			Float y85 = ( (Float)(::Math_obj::floor(fromY)) );
HXDLIN( 482)			bool _hx_tmp156;
HXDLIN( 482)			bool _hx_tmp157;
HXDLIN( 482)			bool _hx_tmp158;
HXDLIN( 482)			if ((x85 >= 0)) {
HXLINE( 482)				_hx_tmp158 = (y85 >= 0);
            			}
            			else {
HXLINE( 482)				_hx_tmp158 = false;
            			}
HXDLIN( 482)			if (_hx_tmp158) {
HXLINE( 482)				_hx_tmp157 = (x85 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 482)				_hx_tmp157 = false;
            			}
HXDLIN( 482)			if (_hx_tmp157) {
HXLINE( 482)				_hx_tmp156 = (y85 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 482)				_hx_tmp156 = false;
            			}
HXDLIN( 482)			_hx_tmp152 = !(_hx_tmp156);
            		}
            		else {
HXLINE( 482)			_hx_tmp152 = true;
            		}
HXDLIN( 482)		if (_hx_tmp152) {
HXLINE( 482)			 ::haxe::io::Bytes this27 = this1;
HXDLIN( 482)			Float x86 = ::vision::tools::MathTools_obj::boundFloat(fromX,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 482)			Float y86 = ::vision::tools::MathTools_obj::boundFloat(fromY,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
HXDLIN( 482)			bool _hx_tmp159;
HXDLIN( 482)			Float x87 = ( (Float)(::Math_obj::ceil(x86)) );
HXDLIN( 482)			Float y87 = ( (Float)(::Math_obj::ceil(y86)) );
HXDLIN( 482)			bool _hx_tmp160;
HXDLIN( 482)			bool _hx_tmp161;
HXDLIN( 482)			bool _hx_tmp162;
HXDLIN( 482)			if ((x87 >= 0)) {
HXLINE( 482)				_hx_tmp162 = (y87 >= 0);
            			}
            			else {
HXLINE( 482)				_hx_tmp162 = false;
            			}
HXDLIN( 482)			if (_hx_tmp162) {
HXLINE( 482)				_hx_tmp161 = (x87 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 482)				_hx_tmp161 = false;
            			}
HXDLIN( 482)			if (_hx_tmp161) {
HXLINE( 482)				_hx_tmp160 = (y87 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 482)				_hx_tmp160 = false;
            			}
HXDLIN( 482)			if (_hx_tmp160) {
HXLINE( 482)				Float x88 = ( (Float)(::Math_obj::floor(x86)) );
HXDLIN( 482)				Float y88 = ( (Float)(::Math_obj::floor(y86)) );
HXDLIN( 482)				bool _hx_tmp163;
HXDLIN( 482)				bool _hx_tmp164;
HXDLIN( 482)				bool _hx_tmp165;
HXDLIN( 482)				if ((x88 >= 0)) {
HXLINE( 482)					_hx_tmp165 = (y88 >= 0);
            				}
            				else {
HXLINE( 482)					_hx_tmp165 = false;
            				}
HXDLIN( 482)				if (_hx_tmp165) {
HXLINE( 482)					_hx_tmp164 = (x88 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 482)					_hx_tmp164 = false;
            				}
HXDLIN( 482)				if (_hx_tmp164) {
HXLINE( 482)					_hx_tmp163 = (y88 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 482)					_hx_tmp163 = false;
            				}
HXDLIN( 482)				_hx_tmp159 = !(_hx_tmp163);
            			}
            			else {
HXLINE( 482)				_hx_tmp159 = true;
            			}
HXDLIN( 482)			if (_hx_tmp159) {
HXLINE( 482)				Float _hx_tmp166 = ::vision::tools::MathTools_obj::boundFloat(x86,( (Float)(0) ),( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) - 1)) ));
HXDLIN( 482)				::vision::ds::_Image::Image_Impl__obj::setFloatingPixel(this27,_hx_tmp166,::vision::tools::MathTools_obj::boundFloat(y86,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))) - 1)) )),oldPixelResetColor);
            			}
            			else {
HXLINE( 482)				Float yFraction3 = (y86 - ( (Float)(::Std_obj::_hx_int(y86)) ));
HXDLIN( 482)				Float xFraction3 = (x86 - ( (Float)(::Std_obj::_hx_int(x86)) ));
HXDLIN( 482)				{
HXLINE( 482)					int x89 = ::Math_obj::floor(x86);
HXDLIN( 482)					int y89 = ::Math_obj::floor(y86);
HXDLIN( 482)					Float Red8 = ((((( (Float)(1) ) - xFraction3) + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Green8 = ((((( (Float)(1) ) - xFraction3) + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Blue8 = ((((( (Float)(1) ) - xFraction3) + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Alpha8 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)					int color54 = 0;
HXDLIN( 482)					{
HXLINE( 482)						int value32 = ::Math_obj::round((Red8 * ( (Float)(255) )));
HXDLIN( 482)						color54 = (color54 & -16711681);
HXDLIN( 482)						int color55;
HXDLIN( 482)						if ((value32 > 255)) {
HXLINE( 482)							color55 = 255;
            						}
            						else {
HXLINE( 482)							if ((value32 < 0)) {
HXLINE( 482)								color55 = 0;
            							}
            							else {
HXLINE( 482)								color55 = value32;
            							}
            						}
HXDLIN( 482)						color54 = (color54 | (color55 << 16));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value33 = ::Math_obj::round((Green8 * ( (Float)(255) )));
HXDLIN( 482)						color54 = (color54 & -65281);
HXDLIN( 482)						int color56;
HXDLIN( 482)						if ((value33 > 255)) {
HXLINE( 482)							color56 = 255;
            						}
            						else {
HXLINE( 482)							if ((value33 < 0)) {
HXLINE( 482)								color56 = 0;
            							}
            							else {
HXLINE( 482)								color56 = value33;
            							}
            						}
HXDLIN( 482)						color54 = (color54 | (color56 << 8));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value34 = ::Math_obj::round((Blue8 * ( (Float)(255) )));
HXDLIN( 482)						color54 = (color54 & -256);
HXDLIN( 482)						int color57;
HXDLIN( 482)						if ((value34 > 255)) {
HXLINE( 482)							color57 = 255;
            						}
            						else {
HXLINE( 482)							if ((value34 < 0)) {
HXLINE( 482)								color57 = 0;
            							}
            							else {
HXLINE( 482)								color57 = value34;
            							}
            						}
HXDLIN( 482)						color54 = (color54 | color57);
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value35 = ::Math_obj::round((Alpha8 * ( (Float)(255) )));
HXDLIN( 482)						color54 = (color54 & 16777215);
HXDLIN( 482)						int color58;
HXDLIN( 482)						if ((value35 > 255)) {
HXLINE( 482)							color58 = 255;
            						}
            						else {
HXLINE( 482)							if ((value35 < 0)) {
HXLINE( 482)								color58 = 0;
            							}
            							else {
HXLINE( 482)								color58 = value35;
            							}
            						}
HXDLIN( 482)						color54 = (color54 | (color58 << 24));
            					}
HXDLIN( 482)					int color59 = color54;
HXDLIN( 482)					bool _hx_tmp167;
HXDLIN( 482)					bool _hx_tmp168;
HXDLIN( 482)					bool _hx_tmp169;
HXDLIN( 482)					if ((x89 >= 0)) {
HXLINE( 482)						_hx_tmp169 = (y89 >= 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp169 = false;
            					}
HXDLIN( 482)					if (_hx_tmp169) {
HXLINE( 482)						_hx_tmp168 = (x89 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 482)						_hx_tmp168 = false;
            					}
HXDLIN( 482)					if (_hx_tmp168) {
HXLINE( 482)						_hx_tmp167 = (y89 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 482)						_hx_tmp167 = false;
            					}
HXDLIN( 482)					if (!(_hx_tmp167)) {
HXLINE( 482)						::cpp::Int64 this28 = _hx_int64_make(x89,y89);
HXDLIN( 482)						int _hx_tmp170 = _hx_int64_high(this28);
HXDLIN( 482)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this27, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp170,_hx_int64_low(this28))));
            					}
            					else {
HXLINE( 482)						bool _hx_tmp171;
HXDLIN( 482)						bool _hx_tmp172;
HXDLIN( 482)						bool _hx_tmp173;
HXDLIN( 482)						bool _hx_tmp174;
HXDLIN( 482)						int pos96 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this27->b->__get(pos96)) ) | (( (int)(this27->b->__get((pos96 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos97 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp174 = ((( (int)(this27->b->__get(pos97)) ) | (( (int)(this27->b->__get((pos97 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp174 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp174)) {
HXLINE( 482)							int pos98 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp173 = ((( (int)(this27->b->__get(pos98)) ) | (( (int)(this27->b->__get((pos98 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp173 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp173)) {
HXLINE( 482)							int pos99 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp172 = ((( (int)(this27->b->__get(pos99)) ) | (( (int)(this27->b->__get((pos99 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp172 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp172)) {
HXLINE( 482)							_hx_tmp171 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp171 = true;
            						}
HXDLIN( 482)						if (_hx_tmp171) {
HXLINE( 482)							 ::vision::ds::ImageView v8 = null();
HXDLIN( 482)							bool _hx_tmp175;
HXDLIN( 482)							bool _hx_tmp176;
HXDLIN( 482)							bool _hx_tmp177;
HXDLIN( 482)							bool _hx_tmp178;
HXDLIN( 482)							bool _hx_tmp179;
HXDLIN( 482)							bool _hx_tmp180;
HXDLIN( 482)							int pos100 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)							if (((( (int)(this27->b->__get(pos100)) ) | (( (int)(this27->b->__get((pos100 + 1))) ) << 8)) == 0)) {
HXLINE( 482)								int pos101 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp180 = ((( (int)(this27->b->__get(pos101)) ) | (( (int)(this27->b->__get((pos101 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp180 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp180)) {
HXLINE( 482)								int pos102 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								_hx_tmp179 = ((( (int)(this27->b->__get(pos102)) ) | (( (int)(this27->b->__get((pos102 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp179 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp179)) {
HXLINE( 482)								int pos103 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp178 = ((( (int)(this27->b->__get(pos103)) ) | (( (int)(this27->b->__get((pos103 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp178 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp178)) {
HXLINE( 482)								_hx_tmp177 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp177 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp177)) {
HXLINE( 482)								_hx_tmp176 = ::hx::IsNull( v8 );
            							}
            							else {
HXLINE( 482)								_hx_tmp176 = false;
            							}
HXDLIN( 482)							if (_hx_tmp176) {
HXLINE( 482)								bool _hx_tmp181;
HXDLIN( 482)								bool _hx_tmp182;
HXDLIN( 482)								if ((x89 >= 0)) {
HXLINE( 482)									_hx_tmp182 = (y89 >= 0);
            								}
            								else {
HXLINE( 482)									_hx_tmp182 = false;
            								}
HXDLIN( 482)								if (_hx_tmp182) {
HXLINE( 482)									_hx_tmp181 = (x89 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 482)									_hx_tmp181 = false;
            								}
HXDLIN( 482)								if (_hx_tmp181) {
HXLINE( 482)									_hx_tmp175 = (y89 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 482)									_hx_tmp175 = false;
            								}
            							}
            							else {
HXLINE( 482)								bool has64 = false;
HXDLIN( 482)								 ::vision::ds::ImageView view8;
HXDLIN( 482)								if (::hx::IsNotNull( v8 )) {
HXLINE( 482)									view8 = v8;
            								}
            								else {
HXLINE( 482)									int pos104 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)									int pos105 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									int pos106 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)									int pos107 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									view8 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this27->b->__get(pos104)) ) | (( (int)(this27->b->__get((pos104 + 1))) ) << 8)),(( (int)(this27->b->__get(pos105)) ) | (( (int)(this27->b->__get((pos105 + 1))) ) << 8)),(( (int)(this27->b->__get(pos106)) ) | (( (int)(this27->b->__get((pos106 + 1))) ) << 8)),(( (int)(this27->b->__get(pos107)) ) | (( (int)(this27->b->__get((pos107 + 1))) ) << 8)),this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 482)								switch((int)(view8->shape)){
            									case (int)0: {
HXLINE( 482)										bool has65;
HXDLIN( 482)										bool has66;
HXDLIN( 482)										if ((x89 < (view8->x + view8->width))) {
HXLINE( 482)											has66 = (y89 < (view8->y + view8->height));
            										}
            										else {
HXLINE( 482)											has66 = false;
            										}
HXDLIN( 482)										if (has66) {
HXLINE( 482)											has65 = (x89 >= view8->x);
            										}
            										else {
HXLINE( 482)											has65 = false;
            										}
HXDLIN( 482)										if (has65) {
HXLINE( 482)											has64 = (y89 >= view8->y);
            										}
            										else {
HXLINE( 482)											has64 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 482)										bool has67;
HXDLIN( 482)										bool has68;
HXDLIN( 482)										bool has69;
HXDLIN( 482)										if ((x89 < (view8->x + view8->width))) {
HXLINE( 482)											has69 = (y89 < (view8->y + view8->height));
            										}
            										else {
HXLINE( 482)											has69 = false;
            										}
HXDLIN( 482)										if (has69) {
HXLINE( 482)											has68 = (x89 >= view8->x);
            										}
            										else {
HXLINE( 482)											has68 = false;
            										}
HXDLIN( 482)										if (has68) {
HXLINE( 482)											has67 = (y89 >= view8->y);
            										}
            										else {
HXLINE( 482)											has67 = false;
            										}
HXLINE(1400)										has64 = !(has67);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 482)										if ((view8->width > view8->height)) {
HXLINE( 482)											Float a16 = (( (Float)(view8->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b16 = (( (Float)(view8->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c16 = ::Math_obj::sqrt(((a16 * a16) - (b16 * b16)));
HXDLIN( 482)											Float f1_x16 = ((view8->x + (( (Float)(view8->width) ) / ( (Float)(2) ))) - c16);
HXDLIN( 482)											Float f1_y16 = (view8->y + (( (Float)(view8->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_x16 = ((view8->x + (( (Float)(view8->width) ) / ( (Float)(2) ))) + c16);
HXDLIN( 482)											Float f2_y16 = (view8->y + (( (Float)(view8->height) ) / ( (Float)(2) )));
HXDLIN( 482)											::cpp::Int64 p16 = _hx_int64_make(x89,y89);
HXDLIN( 482)											Float x90 = (( (Float)(_hx_int64_high(p16)) ) - f1_x16);
HXDLIN( 482)											Float y90 = (( (Float)(_hx_int64_low(p16)) ) - f1_y16);
HXDLIN( 482)											Float has70 = ::Math_obj::sqrt(((x90 * x90) + (y90 * y90)));
HXDLIN( 482)											Float x91 = (( (Float)(_hx_int64_high(p16)) ) - f2_x16);
HXDLIN( 482)											Float y91 = (( (Float)(_hx_int64_low(p16)) ) - f2_y16);
HXLINE(1415)											has64 = ((has70 + ::Math_obj::sqrt(((x91 * x91) + (y91 * y91)))) <= view8->width);
HXLINE( 482)											if ((view8->shape == 3)) {
HXLINE(1416)												has64 = !(has64);
            											}
            										}
            										else {
HXLINE( 482)											if ((view8->height > view8->width)) {
HXLINE( 482)												Float a17 = (( (Float)(view8->height) ) / ( (Float)(2) ));
HXDLIN( 482)												Float b17 = (( (Float)(view8->width) ) / ( (Float)(2) ));
HXDLIN( 482)												Float c17 = ::Math_obj::sqrt(((a17 * a17) - (b17 * b17)));
HXDLIN( 482)												Float f1_x17 = (view8->x + (( (Float)(view8->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f1_y17 = ((view8->y + (( (Float)(view8->height) ) / ( (Float)(2) ))) - c17);
HXDLIN( 482)												Float f2_x17 = (view8->x + (( (Float)(view8->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f2_y17 = ((view8->y + (( (Float)(view8->height) ) / ( (Float)(2) ))) + c17);
HXDLIN( 482)												::cpp::Int64 p17 = _hx_int64_make(x89,y89);
HXDLIN( 482)												Float x92 = (( (Float)(_hx_int64_high(p17)) ) - f1_x17);
HXDLIN( 482)												Float y92 = (( (Float)(_hx_int64_low(p17)) ) - f1_y17);
HXDLIN( 482)												Float has71 = ::Math_obj::sqrt(((x92 * x92) + (y92 * y92)));
HXDLIN( 482)												Float x93 = (( (Float)(_hx_int64_high(p17)) ) - f2_x17);
HXDLIN( 482)												Float y93 = (( (Float)(_hx_int64_low(p17)) ) - f2_y17);
HXLINE(1424)												has64 = ((has71 + ::Math_obj::sqrt(((x93 * x93) + (y93 * y93)))) <= view8->height);
HXLINE( 482)												if ((view8->shape == 3)) {
HXLINE(1425)													has64 = !(has64);
            												}
            											}
            											else {
HXLINE( 482)												Float point1_x8 = ( (Float)(x89) );
HXDLIN( 482)												Float point1_y8 = ( (Float)(y89) );
HXDLIN( 482)												Float point2_x8 = (view8->x + (( (Float)(view8->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float point2_y8 = (view8->y + (( (Float)(view8->height) ) / ( (Float)(2) )));
HXDLIN( 482)												Float x94 = (point2_x8 - point1_x8);
HXDLIN( 482)												Float y94 = (point2_y8 - point1_y8);
HXLINE(1428)												has64 = (::Math_obj::sqrt(((x94 * x94) + (y94 * y94))) <= (( (Float)(view8->width) ) / ( (Float)(2) )));
HXLINE( 482)												if ((view8->shape == 3)) {
HXLINE(1429)													has64 = !(has64);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has64 = (((::Math_obj::abs((( (Float)((x89 - view8->x)) ) - (( (Float)(view8->width) ) / ( (Float)(2) )))) / (( (Float)(view8->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y89 - view8->y)) ) - (( (Float)(view8->height) ) / ( (Float)(2) )))) / (( (Float)(view8->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has64 = !((((::Math_obj::abs((( (Float)((x89 - view8->x)) ) - (( (Float)(view8->width) ) / ( (Float)(2) )))) / (( (Float)(view8->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y89 - view8->y)) ) - (( (Float)(view8->height) ) / ( (Float)(2) )))) / (( (Float)(view8->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 482)								_hx_tmp175 = has64;
            							}
HXDLIN( 482)							if (_hx_tmp175) {
HXLINE( 482)								int position32 = (((y89 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x89) * 4);
HXDLIN( 482)								position32 = (position32 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)								this27->b[position32] = ( (unsigned char)(((color59 >> 24) & 255)) );
HXDLIN( 482)								this27->b[(position32 + 1)] = ( (unsigned char)(((color59 >> 16) & 255)) );
HXDLIN( 482)								this27->b[(position32 + 2)] = ( (unsigned char)(((color59 >> 8) & 255)) );
HXDLIN( 482)								this27->b[(position32 + 3)] = ( (unsigned char)((color59 & 255)) );
            							}
            						}
            						else {
HXLINE( 482)							int position33 = (((y89 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x89) * 4);
HXDLIN( 482)							position33 = (position33 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this27->b[position33] = ( (unsigned char)(((color59 >> 24) & 255)) );
HXDLIN( 482)							this27->b[(position33 + 1)] = ( (unsigned char)(((color59 >> 16) & 255)) );
HXDLIN( 482)							this27->b[(position33 + 2)] = ( (unsigned char)(((color59 >> 8) & 255)) );
HXDLIN( 482)							this27->b[(position33 + 3)] = ( (unsigned char)((color59 & 255)) );
            						}
            					}
            				}
HXDLIN( 482)				if ((y86 != ::Std_obj::_hx_int(y86))) {
HXLINE( 482)					int x95 = ::Math_obj::floor(x86);
HXDLIN( 482)					int y95 = ::Math_obj::ceil(y86);
HXDLIN( 482)					Float Red9 = ((((( (Float)(1) ) - xFraction3) + yFraction3) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Green9 = ((((( (Float)(1) ) - xFraction3) + yFraction3) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Blue9 = ((((( (Float)(1) ) - xFraction3) + yFraction3) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Alpha9 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)					int color60 = 0;
HXDLIN( 482)					{
HXLINE( 482)						int value36 = ::Math_obj::round((Red9 * ( (Float)(255) )));
HXDLIN( 482)						color60 = (color60 & -16711681);
HXDLIN( 482)						int color61;
HXDLIN( 482)						if ((value36 > 255)) {
HXLINE( 482)							color61 = 255;
            						}
            						else {
HXLINE( 482)							if ((value36 < 0)) {
HXLINE( 482)								color61 = 0;
            							}
            							else {
HXLINE( 482)								color61 = value36;
            							}
            						}
HXDLIN( 482)						color60 = (color60 | (color61 << 16));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value37 = ::Math_obj::round((Green9 * ( (Float)(255) )));
HXDLIN( 482)						color60 = (color60 & -65281);
HXDLIN( 482)						int color62;
HXDLIN( 482)						if ((value37 > 255)) {
HXLINE( 482)							color62 = 255;
            						}
            						else {
HXLINE( 482)							if ((value37 < 0)) {
HXLINE( 482)								color62 = 0;
            							}
            							else {
HXLINE( 482)								color62 = value37;
            							}
            						}
HXDLIN( 482)						color60 = (color60 | (color62 << 8));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value38 = ::Math_obj::round((Blue9 * ( (Float)(255) )));
HXDLIN( 482)						color60 = (color60 & -256);
HXDLIN( 482)						int color63;
HXDLIN( 482)						if ((value38 > 255)) {
HXLINE( 482)							color63 = 255;
            						}
            						else {
HXLINE( 482)							if ((value38 < 0)) {
HXLINE( 482)								color63 = 0;
            							}
            							else {
HXLINE( 482)								color63 = value38;
            							}
            						}
HXDLIN( 482)						color60 = (color60 | color63);
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value39 = ::Math_obj::round((Alpha9 * ( (Float)(255) )));
HXDLIN( 482)						color60 = (color60 & 16777215);
HXDLIN( 482)						int color64;
HXDLIN( 482)						if ((value39 > 255)) {
HXLINE( 482)							color64 = 255;
            						}
            						else {
HXLINE( 482)							if ((value39 < 0)) {
HXLINE( 482)								color64 = 0;
            							}
            							else {
HXLINE( 482)								color64 = value39;
            							}
            						}
HXDLIN( 482)						color60 = (color60 | (color64 << 24));
            					}
HXDLIN( 482)					int color65 = color60;
HXDLIN( 482)					bool _hx_tmp183;
HXDLIN( 482)					bool _hx_tmp184;
HXDLIN( 482)					bool _hx_tmp185;
HXDLIN( 482)					if ((x95 >= 0)) {
HXLINE( 482)						_hx_tmp185 = (y95 >= 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp185 = false;
            					}
HXDLIN( 482)					if (_hx_tmp185) {
HXLINE( 482)						_hx_tmp184 = (x95 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 482)						_hx_tmp184 = false;
            					}
HXDLIN( 482)					if (_hx_tmp184) {
HXLINE( 482)						_hx_tmp183 = (y95 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 482)						_hx_tmp183 = false;
            					}
HXDLIN( 482)					if (!(_hx_tmp183)) {
HXLINE( 482)						::cpp::Int64 this29 = _hx_int64_make(x95,y95);
HXDLIN( 482)						int _hx_tmp186 = _hx_int64_high(this29);
HXDLIN( 482)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this27, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp186,_hx_int64_low(this29))));
            					}
            					else {
HXLINE( 482)						bool _hx_tmp187;
HXDLIN( 482)						bool _hx_tmp188;
HXDLIN( 482)						bool _hx_tmp189;
HXDLIN( 482)						bool _hx_tmp190;
HXDLIN( 482)						int pos108 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this27->b->__get(pos108)) ) | (( (int)(this27->b->__get((pos108 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos109 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp190 = ((( (int)(this27->b->__get(pos109)) ) | (( (int)(this27->b->__get((pos109 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp190 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp190)) {
HXLINE( 482)							int pos110 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp189 = ((( (int)(this27->b->__get(pos110)) ) | (( (int)(this27->b->__get((pos110 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp189 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp189)) {
HXLINE( 482)							int pos111 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp188 = ((( (int)(this27->b->__get(pos111)) ) | (( (int)(this27->b->__get((pos111 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp188 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp188)) {
HXLINE( 482)							_hx_tmp187 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp187 = true;
            						}
HXDLIN( 482)						if (_hx_tmp187) {
HXLINE( 482)							 ::vision::ds::ImageView v9 = null();
HXDLIN( 482)							bool _hx_tmp191;
HXDLIN( 482)							bool _hx_tmp192;
HXDLIN( 482)							bool _hx_tmp193;
HXDLIN( 482)							bool _hx_tmp194;
HXDLIN( 482)							bool _hx_tmp195;
HXDLIN( 482)							bool _hx_tmp196;
HXDLIN( 482)							int pos112 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)							if (((( (int)(this27->b->__get(pos112)) ) | (( (int)(this27->b->__get((pos112 + 1))) ) << 8)) == 0)) {
HXLINE( 482)								int pos113 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp196 = ((( (int)(this27->b->__get(pos113)) ) | (( (int)(this27->b->__get((pos113 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp196 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp196)) {
HXLINE( 482)								int pos114 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								_hx_tmp195 = ((( (int)(this27->b->__get(pos114)) ) | (( (int)(this27->b->__get((pos114 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp195 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp195)) {
HXLINE( 482)								int pos115 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp194 = ((( (int)(this27->b->__get(pos115)) ) | (( (int)(this27->b->__get((pos115 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp194 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp194)) {
HXLINE( 482)								_hx_tmp193 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp193 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp193)) {
HXLINE( 482)								_hx_tmp192 = ::hx::IsNull( v9 );
            							}
            							else {
HXLINE( 482)								_hx_tmp192 = false;
            							}
HXDLIN( 482)							if (_hx_tmp192) {
HXLINE( 482)								bool _hx_tmp197;
HXDLIN( 482)								bool _hx_tmp198;
HXDLIN( 482)								if ((x95 >= 0)) {
HXLINE( 482)									_hx_tmp198 = (y95 >= 0);
            								}
            								else {
HXLINE( 482)									_hx_tmp198 = false;
            								}
HXDLIN( 482)								if (_hx_tmp198) {
HXLINE( 482)									_hx_tmp197 = (x95 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 482)									_hx_tmp197 = false;
            								}
HXDLIN( 482)								if (_hx_tmp197) {
HXLINE( 482)									_hx_tmp191 = (y95 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 482)									_hx_tmp191 = false;
            								}
            							}
            							else {
HXLINE( 482)								bool has72 = false;
HXDLIN( 482)								 ::vision::ds::ImageView view9;
HXDLIN( 482)								if (::hx::IsNotNull( v9 )) {
HXLINE( 482)									view9 = v9;
            								}
            								else {
HXLINE( 482)									int pos116 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)									int pos117 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									int pos118 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)									int pos119 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									view9 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this27->b->__get(pos116)) ) | (( (int)(this27->b->__get((pos116 + 1))) ) << 8)),(( (int)(this27->b->__get(pos117)) ) | (( (int)(this27->b->__get((pos117 + 1))) ) << 8)),(( (int)(this27->b->__get(pos118)) ) | (( (int)(this27->b->__get((pos118 + 1))) ) << 8)),(( (int)(this27->b->__get(pos119)) ) | (( (int)(this27->b->__get((pos119 + 1))) ) << 8)),this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 482)								switch((int)(view9->shape)){
            									case (int)0: {
HXLINE( 482)										bool has73;
HXDLIN( 482)										bool has74;
HXDLIN( 482)										if ((x95 < (view9->x + view9->width))) {
HXLINE( 482)											has74 = (y95 < (view9->y + view9->height));
            										}
            										else {
HXLINE( 482)											has74 = false;
            										}
HXDLIN( 482)										if (has74) {
HXLINE( 482)											has73 = (x95 >= view9->x);
            										}
            										else {
HXLINE( 482)											has73 = false;
            										}
HXDLIN( 482)										if (has73) {
HXLINE( 482)											has72 = (y95 >= view9->y);
            										}
            										else {
HXLINE( 482)											has72 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 482)										bool has75;
HXDLIN( 482)										bool has76;
HXDLIN( 482)										bool has77;
HXDLIN( 482)										if ((x95 < (view9->x + view9->width))) {
HXLINE( 482)											has77 = (y95 < (view9->y + view9->height));
            										}
            										else {
HXLINE( 482)											has77 = false;
            										}
HXDLIN( 482)										if (has77) {
HXLINE( 482)											has76 = (x95 >= view9->x);
            										}
            										else {
HXLINE( 482)											has76 = false;
            										}
HXDLIN( 482)										if (has76) {
HXLINE( 482)											has75 = (y95 >= view9->y);
            										}
            										else {
HXLINE( 482)											has75 = false;
            										}
HXLINE(1400)										has72 = !(has75);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 482)										if ((view9->width > view9->height)) {
HXLINE( 482)											Float a18 = (( (Float)(view9->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b18 = (( (Float)(view9->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c18 = ::Math_obj::sqrt(((a18 * a18) - (b18 * b18)));
HXDLIN( 482)											Float f1_x18 = ((view9->x + (( (Float)(view9->width) ) / ( (Float)(2) ))) - c18);
HXDLIN( 482)											Float f1_y18 = (view9->y + (( (Float)(view9->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_x18 = ((view9->x + (( (Float)(view9->width) ) / ( (Float)(2) ))) + c18);
HXDLIN( 482)											Float f2_y18 = (view9->y + (( (Float)(view9->height) ) / ( (Float)(2) )));
HXDLIN( 482)											::cpp::Int64 p18 = _hx_int64_make(x95,y95);
HXDLIN( 482)											Float x96 = (( (Float)(_hx_int64_high(p18)) ) - f1_x18);
HXDLIN( 482)											Float y96 = (( (Float)(_hx_int64_low(p18)) ) - f1_y18);
HXDLIN( 482)											Float has78 = ::Math_obj::sqrt(((x96 * x96) + (y96 * y96)));
HXDLIN( 482)											Float x97 = (( (Float)(_hx_int64_high(p18)) ) - f2_x18);
HXDLIN( 482)											Float y97 = (( (Float)(_hx_int64_low(p18)) ) - f2_y18);
HXLINE(1415)											has72 = ((has78 + ::Math_obj::sqrt(((x97 * x97) + (y97 * y97)))) <= view9->width);
HXLINE( 482)											if ((view9->shape == 3)) {
HXLINE(1416)												has72 = !(has72);
            											}
            										}
            										else {
HXLINE( 482)											if ((view9->height > view9->width)) {
HXLINE( 482)												Float a19 = (( (Float)(view9->height) ) / ( (Float)(2) ));
HXDLIN( 482)												Float b19 = (( (Float)(view9->width) ) / ( (Float)(2) ));
HXDLIN( 482)												Float c19 = ::Math_obj::sqrt(((a19 * a19) - (b19 * b19)));
HXDLIN( 482)												Float f1_x19 = (view9->x + (( (Float)(view9->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f1_y19 = ((view9->y + (( (Float)(view9->height) ) / ( (Float)(2) ))) - c19);
HXDLIN( 482)												Float f2_x19 = (view9->x + (( (Float)(view9->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f2_y19 = ((view9->y + (( (Float)(view9->height) ) / ( (Float)(2) ))) + c19);
HXDLIN( 482)												::cpp::Int64 p19 = _hx_int64_make(x95,y95);
HXDLIN( 482)												Float x98 = (( (Float)(_hx_int64_high(p19)) ) - f1_x19);
HXDLIN( 482)												Float y98 = (( (Float)(_hx_int64_low(p19)) ) - f1_y19);
HXDLIN( 482)												Float has79 = ::Math_obj::sqrt(((x98 * x98) + (y98 * y98)));
HXDLIN( 482)												Float x99 = (( (Float)(_hx_int64_high(p19)) ) - f2_x19);
HXDLIN( 482)												Float y99 = (( (Float)(_hx_int64_low(p19)) ) - f2_y19);
HXLINE(1424)												has72 = ((has79 + ::Math_obj::sqrt(((x99 * x99) + (y99 * y99)))) <= view9->height);
HXLINE( 482)												if ((view9->shape == 3)) {
HXLINE(1425)													has72 = !(has72);
            												}
            											}
            											else {
HXLINE( 482)												Float point1_x9 = ( (Float)(x95) );
HXDLIN( 482)												Float point1_y9 = ( (Float)(y95) );
HXDLIN( 482)												Float point2_x9 = (view9->x + (( (Float)(view9->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float point2_y9 = (view9->y + (( (Float)(view9->height) ) / ( (Float)(2) )));
HXDLIN( 482)												Float x100 = (point2_x9 - point1_x9);
HXDLIN( 482)												Float y100 = (point2_y9 - point1_y9);
HXLINE(1428)												has72 = (::Math_obj::sqrt(((x100 * x100) + (y100 * y100))) <= (( (Float)(view9->width) ) / ( (Float)(2) )));
HXLINE( 482)												if ((view9->shape == 3)) {
HXLINE(1429)													has72 = !(has72);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has72 = (((::Math_obj::abs((( (Float)((x95 - view9->x)) ) - (( (Float)(view9->width) ) / ( (Float)(2) )))) / (( (Float)(view9->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y95 - view9->y)) ) - (( (Float)(view9->height) ) / ( (Float)(2) )))) / (( (Float)(view9->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has72 = !((((::Math_obj::abs((( (Float)((x95 - view9->x)) ) - (( (Float)(view9->width) ) / ( (Float)(2) )))) / (( (Float)(view9->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y95 - view9->y)) ) - (( (Float)(view9->height) ) / ( (Float)(2) )))) / (( (Float)(view9->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 482)								_hx_tmp191 = has72;
            							}
HXDLIN( 482)							if (_hx_tmp191) {
HXLINE( 482)								int position34 = (((y95 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x95) * 4);
HXDLIN( 482)								position34 = (position34 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)								this27->b[position34] = ( (unsigned char)(((color65 >> 24) & 255)) );
HXDLIN( 482)								this27->b[(position34 + 1)] = ( (unsigned char)(((color65 >> 16) & 255)) );
HXDLIN( 482)								this27->b[(position34 + 2)] = ( (unsigned char)(((color65 >> 8) & 255)) );
HXDLIN( 482)								this27->b[(position34 + 3)] = ( (unsigned char)((color65 & 255)) );
            							}
            						}
            						else {
HXLINE( 482)							int position35 = (((y95 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x95) * 4);
HXDLIN( 482)							position35 = (position35 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this27->b[position35] = ( (unsigned char)(((color65 >> 24) & 255)) );
HXDLIN( 482)							this27->b[(position35 + 1)] = ( (unsigned char)(((color65 >> 16) & 255)) );
HXDLIN( 482)							this27->b[(position35 + 2)] = ( (unsigned char)(((color65 >> 8) & 255)) );
HXDLIN( 482)							this27->b[(position35 + 3)] = ( (unsigned char)((color65 & 255)) );
            						}
            					}
            				}
HXDLIN( 482)				if ((x86 != ::Std_obj::_hx_int(x86))) {
HXLINE( 482)					int x101 = ::Math_obj::ceil(x86);
HXDLIN( 482)					int y101 = ::Math_obj::floor(y86);
HXDLIN( 482)					Float Red10 = (((xFraction3 + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Green10 = (((xFraction3 + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Blue10 = (((xFraction3 + (( (Float)(1) ) - yFraction3)) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Alpha10 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)					int color66 = 0;
HXDLIN( 482)					{
HXLINE( 482)						int value40 = ::Math_obj::round((Red10 * ( (Float)(255) )));
HXDLIN( 482)						color66 = (color66 & -16711681);
HXDLIN( 482)						int color67;
HXDLIN( 482)						if ((value40 > 255)) {
HXLINE( 482)							color67 = 255;
            						}
            						else {
HXLINE( 482)							if ((value40 < 0)) {
HXLINE( 482)								color67 = 0;
            							}
            							else {
HXLINE( 482)								color67 = value40;
            							}
            						}
HXDLIN( 482)						color66 = (color66 | (color67 << 16));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value41 = ::Math_obj::round((Green10 * ( (Float)(255) )));
HXDLIN( 482)						color66 = (color66 & -65281);
HXDLIN( 482)						int color68;
HXDLIN( 482)						if ((value41 > 255)) {
HXLINE( 482)							color68 = 255;
            						}
            						else {
HXLINE( 482)							if ((value41 < 0)) {
HXLINE( 482)								color68 = 0;
            							}
            							else {
HXLINE( 482)								color68 = value41;
            							}
            						}
HXDLIN( 482)						color66 = (color66 | (color68 << 8));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value42 = ::Math_obj::round((Blue10 * ( (Float)(255) )));
HXDLIN( 482)						color66 = (color66 & -256);
HXDLIN( 482)						int color69;
HXDLIN( 482)						if ((value42 > 255)) {
HXLINE( 482)							color69 = 255;
            						}
            						else {
HXLINE( 482)							if ((value42 < 0)) {
HXLINE( 482)								color69 = 0;
            							}
            							else {
HXLINE( 482)								color69 = value42;
            							}
            						}
HXDLIN( 482)						color66 = (color66 | color69);
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value43 = ::Math_obj::round((Alpha10 * ( (Float)(255) )));
HXDLIN( 482)						color66 = (color66 & 16777215);
HXDLIN( 482)						int color70;
HXDLIN( 482)						if ((value43 > 255)) {
HXLINE( 482)							color70 = 255;
            						}
            						else {
HXLINE( 482)							if ((value43 < 0)) {
HXLINE( 482)								color70 = 0;
            							}
            							else {
HXLINE( 482)								color70 = value43;
            							}
            						}
HXDLIN( 482)						color66 = (color66 | (color70 << 24));
            					}
HXDLIN( 482)					int color71 = color66;
HXDLIN( 482)					bool _hx_tmp199;
HXDLIN( 482)					bool _hx_tmp200;
HXDLIN( 482)					bool _hx_tmp201;
HXDLIN( 482)					if ((x101 >= 0)) {
HXLINE( 482)						_hx_tmp201 = (y101 >= 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp201 = false;
            					}
HXDLIN( 482)					if (_hx_tmp201) {
HXLINE( 482)						_hx_tmp200 = (x101 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 482)						_hx_tmp200 = false;
            					}
HXDLIN( 482)					if (_hx_tmp200) {
HXLINE( 482)						_hx_tmp199 = (y101 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 482)						_hx_tmp199 = false;
            					}
HXDLIN( 482)					if (!(_hx_tmp199)) {
HXLINE( 482)						::cpp::Int64 this30 = _hx_int64_make(x101,y101);
HXDLIN( 482)						int _hx_tmp202 = _hx_int64_high(this30);
HXDLIN( 482)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this27, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp202,_hx_int64_low(this30))));
            					}
            					else {
HXLINE( 482)						bool _hx_tmp203;
HXDLIN( 482)						bool _hx_tmp204;
HXDLIN( 482)						bool _hx_tmp205;
HXDLIN( 482)						bool _hx_tmp206;
HXDLIN( 482)						int pos120 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this27->b->__get(pos120)) ) | (( (int)(this27->b->__get((pos120 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos121 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp206 = ((( (int)(this27->b->__get(pos121)) ) | (( (int)(this27->b->__get((pos121 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp206 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp206)) {
HXLINE( 482)							int pos122 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp205 = ((( (int)(this27->b->__get(pos122)) ) | (( (int)(this27->b->__get((pos122 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp205 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp205)) {
HXLINE( 482)							int pos123 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp204 = ((( (int)(this27->b->__get(pos123)) ) | (( (int)(this27->b->__get((pos123 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp204 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp204)) {
HXLINE( 482)							_hx_tmp203 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp203 = true;
            						}
HXDLIN( 482)						if (_hx_tmp203) {
HXLINE( 482)							 ::vision::ds::ImageView v10 = null();
HXDLIN( 482)							bool _hx_tmp207;
HXDLIN( 482)							bool _hx_tmp208;
HXDLIN( 482)							bool _hx_tmp209;
HXDLIN( 482)							bool _hx_tmp210;
HXDLIN( 482)							bool _hx_tmp211;
HXDLIN( 482)							bool _hx_tmp212;
HXDLIN( 482)							int pos124 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)							if (((( (int)(this27->b->__get(pos124)) ) | (( (int)(this27->b->__get((pos124 + 1))) ) << 8)) == 0)) {
HXLINE( 482)								int pos125 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp212 = ((( (int)(this27->b->__get(pos125)) ) | (( (int)(this27->b->__get((pos125 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp212 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp212)) {
HXLINE( 482)								int pos126 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								_hx_tmp211 = ((( (int)(this27->b->__get(pos126)) ) | (( (int)(this27->b->__get((pos126 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp211 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp211)) {
HXLINE( 482)								int pos127 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp210 = ((( (int)(this27->b->__get(pos127)) ) | (( (int)(this27->b->__get((pos127 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp210 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp210)) {
HXLINE( 482)								_hx_tmp209 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp209 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp209)) {
HXLINE( 482)								_hx_tmp208 = ::hx::IsNull( v10 );
            							}
            							else {
HXLINE( 482)								_hx_tmp208 = false;
            							}
HXDLIN( 482)							if (_hx_tmp208) {
HXLINE( 482)								bool _hx_tmp213;
HXDLIN( 482)								bool _hx_tmp214;
HXDLIN( 482)								if ((x101 >= 0)) {
HXLINE( 482)									_hx_tmp214 = (y101 >= 0);
            								}
            								else {
HXLINE( 482)									_hx_tmp214 = false;
            								}
HXDLIN( 482)								if (_hx_tmp214) {
HXLINE( 482)									_hx_tmp213 = (x101 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 482)									_hx_tmp213 = false;
            								}
HXDLIN( 482)								if (_hx_tmp213) {
HXLINE( 482)									_hx_tmp207 = (y101 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 482)									_hx_tmp207 = false;
            								}
            							}
            							else {
HXLINE( 482)								bool has80 = false;
HXDLIN( 482)								 ::vision::ds::ImageView view10;
HXDLIN( 482)								if (::hx::IsNotNull( v10 )) {
HXLINE( 482)									view10 = v10;
            								}
            								else {
HXLINE( 482)									int pos128 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)									int pos129 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									int pos130 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)									int pos131 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									view10 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this27->b->__get(pos128)) ) | (( (int)(this27->b->__get((pos128 + 1))) ) << 8)),(( (int)(this27->b->__get(pos129)) ) | (( (int)(this27->b->__get((pos129 + 1))) ) << 8)),(( (int)(this27->b->__get(pos130)) ) | (( (int)(this27->b->__get((pos130 + 1))) ) << 8)),(( (int)(this27->b->__get(pos131)) ) | (( (int)(this27->b->__get((pos131 + 1))) ) << 8)),this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 482)								switch((int)(view10->shape)){
            									case (int)0: {
HXLINE( 482)										bool has81;
HXDLIN( 482)										bool has82;
HXDLIN( 482)										if ((x101 < (view10->x + view10->width))) {
HXLINE( 482)											has82 = (y101 < (view10->y + view10->height));
            										}
            										else {
HXLINE( 482)											has82 = false;
            										}
HXDLIN( 482)										if (has82) {
HXLINE( 482)											has81 = (x101 >= view10->x);
            										}
            										else {
HXLINE( 482)											has81 = false;
            										}
HXDLIN( 482)										if (has81) {
HXLINE( 482)											has80 = (y101 >= view10->y);
            										}
            										else {
HXLINE( 482)											has80 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 482)										bool has83;
HXDLIN( 482)										bool has84;
HXDLIN( 482)										bool has85;
HXDLIN( 482)										if ((x101 < (view10->x + view10->width))) {
HXLINE( 482)											has85 = (y101 < (view10->y + view10->height));
            										}
            										else {
HXLINE( 482)											has85 = false;
            										}
HXDLIN( 482)										if (has85) {
HXLINE( 482)											has84 = (x101 >= view10->x);
            										}
            										else {
HXLINE( 482)											has84 = false;
            										}
HXDLIN( 482)										if (has84) {
HXLINE( 482)											has83 = (y101 >= view10->y);
            										}
            										else {
HXLINE( 482)											has83 = false;
            										}
HXLINE(1400)										has80 = !(has83);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 482)										if ((view10->width > view10->height)) {
HXLINE( 482)											Float a20 = (( (Float)(view10->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b20 = (( (Float)(view10->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c20 = ::Math_obj::sqrt(((a20 * a20) - (b20 * b20)));
HXDLIN( 482)											Float f1_x20 = ((view10->x + (( (Float)(view10->width) ) / ( (Float)(2) ))) - c20);
HXDLIN( 482)											Float f1_y20 = (view10->y + (( (Float)(view10->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_x20 = ((view10->x + (( (Float)(view10->width) ) / ( (Float)(2) ))) + c20);
HXDLIN( 482)											Float f2_y20 = (view10->y + (( (Float)(view10->height) ) / ( (Float)(2) )));
HXDLIN( 482)											::cpp::Int64 p20 = _hx_int64_make(x101,y101);
HXDLIN( 482)											Float x102 = (( (Float)(_hx_int64_high(p20)) ) - f1_x20);
HXDLIN( 482)											Float y102 = (( (Float)(_hx_int64_low(p20)) ) - f1_y20);
HXDLIN( 482)											Float has86 = ::Math_obj::sqrt(((x102 * x102) + (y102 * y102)));
HXDLIN( 482)											Float x103 = (( (Float)(_hx_int64_high(p20)) ) - f2_x20);
HXDLIN( 482)											Float y103 = (( (Float)(_hx_int64_low(p20)) ) - f2_y20);
HXLINE(1415)											has80 = ((has86 + ::Math_obj::sqrt(((x103 * x103) + (y103 * y103)))) <= view10->width);
HXLINE( 482)											if ((view10->shape == 3)) {
HXLINE(1416)												has80 = !(has80);
            											}
            										}
            										else {
HXLINE( 482)											if ((view10->height > view10->width)) {
HXLINE( 482)												Float a21 = (( (Float)(view10->height) ) / ( (Float)(2) ));
HXDLIN( 482)												Float b21 = (( (Float)(view10->width) ) / ( (Float)(2) ));
HXDLIN( 482)												Float c21 = ::Math_obj::sqrt(((a21 * a21) - (b21 * b21)));
HXDLIN( 482)												Float f1_x21 = (view10->x + (( (Float)(view10->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f1_y21 = ((view10->y + (( (Float)(view10->height) ) / ( (Float)(2) ))) - c21);
HXDLIN( 482)												Float f2_x21 = (view10->x + (( (Float)(view10->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f2_y21 = ((view10->y + (( (Float)(view10->height) ) / ( (Float)(2) ))) + c21);
HXDLIN( 482)												::cpp::Int64 p21 = _hx_int64_make(x101,y101);
HXDLIN( 482)												Float x104 = (( (Float)(_hx_int64_high(p21)) ) - f1_x21);
HXDLIN( 482)												Float y104 = (( (Float)(_hx_int64_low(p21)) ) - f1_y21);
HXDLIN( 482)												Float has87 = ::Math_obj::sqrt(((x104 * x104) + (y104 * y104)));
HXDLIN( 482)												Float x105 = (( (Float)(_hx_int64_high(p21)) ) - f2_x21);
HXDLIN( 482)												Float y105 = (( (Float)(_hx_int64_low(p21)) ) - f2_y21);
HXLINE(1424)												has80 = ((has87 + ::Math_obj::sqrt(((x105 * x105) + (y105 * y105)))) <= view10->height);
HXLINE( 482)												if ((view10->shape == 3)) {
HXLINE(1425)													has80 = !(has80);
            												}
            											}
            											else {
HXLINE( 482)												Float point1_x10 = ( (Float)(x101) );
HXDLIN( 482)												Float point1_y10 = ( (Float)(y101) );
HXDLIN( 482)												Float point2_x10 = (view10->x + (( (Float)(view10->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float point2_y10 = (view10->y + (( (Float)(view10->height) ) / ( (Float)(2) )));
HXDLIN( 482)												Float x106 = (point2_x10 - point1_x10);
HXDLIN( 482)												Float y106 = (point2_y10 - point1_y10);
HXLINE(1428)												has80 = (::Math_obj::sqrt(((x106 * x106) + (y106 * y106))) <= (( (Float)(view10->width) ) / ( (Float)(2) )));
HXLINE( 482)												if ((view10->shape == 3)) {
HXLINE(1429)													has80 = !(has80);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has80 = (((::Math_obj::abs((( (Float)((x101 - view10->x)) ) - (( (Float)(view10->width) ) / ( (Float)(2) )))) / (( (Float)(view10->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y101 - view10->y)) ) - (( (Float)(view10->height) ) / ( (Float)(2) )))) / (( (Float)(view10->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has80 = !((((::Math_obj::abs((( (Float)((x101 - view10->x)) ) - (( (Float)(view10->width) ) / ( (Float)(2) )))) / (( (Float)(view10->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y101 - view10->y)) ) - (( (Float)(view10->height) ) / ( (Float)(2) )))) / (( (Float)(view10->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 482)								_hx_tmp207 = has80;
            							}
HXDLIN( 482)							if (_hx_tmp207) {
HXLINE( 482)								int position36 = (((y101 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x101) * 4);
HXDLIN( 482)								position36 = (position36 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)								this27->b[position36] = ( (unsigned char)(((color71 >> 24) & 255)) );
HXDLIN( 482)								this27->b[(position36 + 1)] = ( (unsigned char)(((color71 >> 16) & 255)) );
HXDLIN( 482)								this27->b[(position36 + 2)] = ( (unsigned char)(((color71 >> 8) & 255)) );
HXDLIN( 482)								this27->b[(position36 + 3)] = ( (unsigned char)((color71 & 255)) );
            							}
            						}
            						else {
HXLINE( 482)							int position37 = (((y101 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x101) * 4);
HXDLIN( 482)							position37 = (position37 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this27->b[position37] = ( (unsigned char)(((color71 >> 24) & 255)) );
HXDLIN( 482)							this27->b[(position37 + 1)] = ( (unsigned char)(((color71 >> 16) & 255)) );
HXDLIN( 482)							this27->b[(position37 + 2)] = ( (unsigned char)(((color71 >> 8) & 255)) );
HXDLIN( 482)							this27->b[(position37 + 3)] = ( (unsigned char)((color71 & 255)) );
            						}
            					}
            				}
HXDLIN( 482)				bool _hx_tmp215;
HXDLIN( 482)				if ((x86 != ::Std_obj::_hx_int(x86))) {
HXLINE( 482)					_hx_tmp215 = (y86 != ::Std_obj::_hx_int(y86));
            				}
            				else {
HXLINE( 482)					_hx_tmp215 = false;
            				}
HXDLIN( 482)				if (_hx_tmp215) {
HXLINE( 482)					int x107 = ::Math_obj::ceil(x86);
HXDLIN( 482)					int y107 = ::Math_obj::ceil(y86);
HXDLIN( 482)					Float Red11 = (((xFraction3 + yFraction3) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Green11 = (((xFraction3 + yFraction3) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Blue11 = (((xFraction3 + yFraction3) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)					Float Alpha11 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)					int color72 = 0;
HXDLIN( 482)					{
HXLINE( 482)						int value44 = ::Math_obj::round((Red11 * ( (Float)(255) )));
HXDLIN( 482)						color72 = (color72 & -16711681);
HXDLIN( 482)						int color73;
HXDLIN( 482)						if ((value44 > 255)) {
HXLINE( 482)							color73 = 255;
            						}
            						else {
HXLINE( 482)							if ((value44 < 0)) {
HXLINE( 482)								color73 = 0;
            							}
            							else {
HXLINE( 482)								color73 = value44;
            							}
            						}
HXDLIN( 482)						color72 = (color72 | (color73 << 16));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value45 = ::Math_obj::round((Green11 * ( (Float)(255) )));
HXDLIN( 482)						color72 = (color72 & -65281);
HXDLIN( 482)						int color74;
HXDLIN( 482)						if ((value45 > 255)) {
HXLINE( 482)							color74 = 255;
            						}
            						else {
HXLINE( 482)							if ((value45 < 0)) {
HXLINE( 482)								color74 = 0;
            							}
            							else {
HXLINE( 482)								color74 = value45;
            							}
            						}
HXDLIN( 482)						color72 = (color72 | (color74 << 8));
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value46 = ::Math_obj::round((Blue11 * ( (Float)(255) )));
HXDLIN( 482)						color72 = (color72 & -256);
HXDLIN( 482)						int color75;
HXDLIN( 482)						if ((value46 > 255)) {
HXLINE( 482)							color75 = 255;
            						}
            						else {
HXLINE( 482)							if ((value46 < 0)) {
HXLINE( 482)								color75 = 0;
            							}
            							else {
HXLINE( 482)								color75 = value46;
            							}
            						}
HXDLIN( 482)						color72 = (color72 | color75);
            					}
HXDLIN( 482)					{
HXLINE( 482)						int value47 = ::Math_obj::round((Alpha11 * ( (Float)(255) )));
HXDLIN( 482)						color72 = (color72 & 16777215);
HXDLIN( 482)						int color76;
HXDLIN( 482)						if ((value47 > 255)) {
HXLINE( 482)							color76 = 255;
            						}
            						else {
HXLINE( 482)							if ((value47 < 0)) {
HXLINE( 482)								color76 = 0;
            							}
            							else {
HXLINE( 482)								color76 = value47;
            							}
            						}
HXDLIN( 482)						color72 = (color72 | (color76 << 24));
            					}
HXDLIN( 482)					int color77 = color72;
HXDLIN( 482)					bool _hx_tmp216;
HXDLIN( 482)					bool _hx_tmp217;
HXDLIN( 482)					bool _hx_tmp218;
HXDLIN( 482)					if ((x107 >= 0)) {
HXLINE( 482)						_hx_tmp218 = (y107 >= 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp218 = false;
            					}
HXDLIN( 482)					if (_hx_tmp218) {
HXLINE( 482)						_hx_tmp217 = (x107 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 482)						_hx_tmp217 = false;
            					}
HXDLIN( 482)					if (_hx_tmp217) {
HXLINE( 482)						_hx_tmp216 = (y107 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 482)						_hx_tmp216 = false;
            					}
HXDLIN( 482)					if (!(_hx_tmp216)) {
HXLINE( 482)						::cpp::Int64 this31 = _hx_int64_make(x107,y107);
HXDLIN( 482)						int _hx_tmp219 = _hx_int64_high(this31);
HXDLIN( 482)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this27, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp219,_hx_int64_low(this31))));
            					}
            					else {
HXLINE( 482)						bool _hx_tmp220;
HXDLIN( 482)						bool _hx_tmp221;
HXDLIN( 482)						bool _hx_tmp222;
HXDLIN( 482)						bool _hx_tmp223;
HXDLIN( 482)						int pos132 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this27->b->__get(pos132)) ) | (( (int)(this27->b->__get((pos132 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos133 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp223 = ((( (int)(this27->b->__get(pos133)) ) | (( (int)(this27->b->__get((pos133 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp223 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp223)) {
HXLINE( 482)							int pos134 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp222 = ((( (int)(this27->b->__get(pos134)) ) | (( (int)(this27->b->__get((pos134 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp222 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp222)) {
HXLINE( 482)							int pos135 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp221 = ((( (int)(this27->b->__get(pos135)) ) | (( (int)(this27->b->__get((pos135 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp221 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp221)) {
HXLINE( 482)							_hx_tmp220 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp220 = true;
            						}
HXDLIN( 482)						if (_hx_tmp220) {
HXLINE( 482)							 ::vision::ds::ImageView v11 = null();
HXDLIN( 482)							bool _hx_tmp224;
HXDLIN( 482)							bool _hx_tmp225;
HXDLIN( 482)							bool _hx_tmp226;
HXDLIN( 482)							bool _hx_tmp227;
HXDLIN( 482)							bool _hx_tmp228;
HXDLIN( 482)							bool _hx_tmp229;
HXDLIN( 482)							int pos136 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)							if (((( (int)(this27->b->__get(pos136)) ) | (( (int)(this27->b->__get((pos136 + 1))) ) << 8)) == 0)) {
HXLINE( 482)								int pos137 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp229 = ((( (int)(this27->b->__get(pos137)) ) | (( (int)(this27->b->__get((pos137 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp229 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp229)) {
HXLINE( 482)								int pos138 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								_hx_tmp228 = ((( (int)(this27->b->__get(pos138)) ) | (( (int)(this27->b->__get((pos138 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp228 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp228)) {
HXLINE( 482)								int pos139 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								_hx_tmp227 = ((( (int)(this27->b->__get(pos139)) ) | (( (int)(this27->b->__get((pos139 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp227 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp227)) {
HXLINE( 482)								_hx_tmp226 = (this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp226 = true;
            							}
HXDLIN( 482)							if (!(_hx_tmp226)) {
HXLINE( 482)								_hx_tmp225 = ::hx::IsNull( v11 );
            							}
            							else {
HXLINE( 482)								_hx_tmp225 = false;
            							}
HXDLIN( 482)							if (_hx_tmp225) {
HXLINE( 482)								bool _hx_tmp230;
HXDLIN( 482)								bool _hx_tmp231;
HXDLIN( 482)								if ((x107 >= 0)) {
HXLINE( 482)									_hx_tmp231 = (y107 >= 0);
            								}
            								else {
HXLINE( 482)									_hx_tmp231 = false;
            								}
HXDLIN( 482)								if (_hx_tmp231) {
HXLINE( 482)									_hx_tmp230 = (x107 < (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 482)									_hx_tmp230 = false;
            								}
HXDLIN( 482)								if (_hx_tmp230) {
HXLINE( 482)									_hx_tmp224 = (y107 < ::Math_obj::ceil((( (Float)((this27->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 482)									_hx_tmp224 = false;
            								}
            							}
            							else {
HXLINE( 482)								bool has88 = false;
HXDLIN( 482)								 ::vision::ds::ImageView view11;
HXDLIN( 482)								if (::hx::IsNotNull( v11 )) {
HXLINE( 482)									view11 = v11;
            								}
            								else {
HXLINE( 482)									int pos140 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)									int pos141 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									int pos142 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)									int pos143 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)									view11 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this27->b->__get(pos140)) ) | (( (int)(this27->b->__get((pos140 + 1))) ) << 8)),(( (int)(this27->b->__get(pos141)) ) | (( (int)(this27->b->__get((pos141 + 1))) ) << 8)),(( (int)(this27->b->__get(pos142)) ) | (( (int)(this27->b->__get((pos142 + 1))) ) << 8)),(( (int)(this27->b->__get(pos143)) ) | (( (int)(this27->b->__get((pos143 + 1))) ) << 8)),this27->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 482)								switch((int)(view11->shape)){
            									case (int)0: {
HXLINE( 482)										bool has89;
HXDLIN( 482)										bool has90;
HXDLIN( 482)										if ((x107 < (view11->x + view11->width))) {
HXLINE( 482)											has90 = (y107 < (view11->y + view11->height));
            										}
            										else {
HXLINE( 482)											has90 = false;
            										}
HXDLIN( 482)										if (has90) {
HXLINE( 482)											has89 = (x107 >= view11->x);
            										}
            										else {
HXLINE( 482)											has89 = false;
            										}
HXDLIN( 482)										if (has89) {
HXLINE( 482)											has88 = (y107 >= view11->y);
            										}
            										else {
HXLINE( 482)											has88 = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 482)										bool has91;
HXDLIN( 482)										bool has92;
HXDLIN( 482)										bool has93;
HXDLIN( 482)										if ((x107 < (view11->x + view11->width))) {
HXLINE( 482)											has93 = (y107 < (view11->y + view11->height));
            										}
            										else {
HXLINE( 482)											has93 = false;
            										}
HXDLIN( 482)										if (has93) {
HXLINE( 482)											has92 = (x107 >= view11->x);
            										}
            										else {
HXLINE( 482)											has92 = false;
            										}
HXDLIN( 482)										if (has92) {
HXLINE( 482)											has91 = (y107 >= view11->y);
            										}
            										else {
HXLINE( 482)											has91 = false;
            										}
HXLINE(1400)										has88 = !(has91);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 482)										if ((view11->width > view11->height)) {
HXLINE( 482)											Float a22 = (( (Float)(view11->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b22 = (( (Float)(view11->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c22 = ::Math_obj::sqrt(((a22 * a22) - (b22 * b22)));
HXDLIN( 482)											Float f1_x22 = ((view11->x + (( (Float)(view11->width) ) / ( (Float)(2) ))) - c22);
HXDLIN( 482)											Float f1_y22 = (view11->y + (( (Float)(view11->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_x22 = ((view11->x + (( (Float)(view11->width) ) / ( (Float)(2) ))) + c22);
HXDLIN( 482)											Float f2_y22 = (view11->y + (( (Float)(view11->height) ) / ( (Float)(2) )));
HXDLIN( 482)											::cpp::Int64 p22 = _hx_int64_make(x107,y107);
HXDLIN( 482)											Float x108 = (( (Float)(_hx_int64_high(p22)) ) - f1_x22);
HXDLIN( 482)											Float y108 = (( (Float)(_hx_int64_low(p22)) ) - f1_y22);
HXDLIN( 482)											Float has94 = ::Math_obj::sqrt(((x108 * x108) + (y108 * y108)));
HXDLIN( 482)											Float x109 = (( (Float)(_hx_int64_high(p22)) ) - f2_x22);
HXDLIN( 482)											Float y109 = (( (Float)(_hx_int64_low(p22)) ) - f2_y22);
HXLINE(1415)											has88 = ((has94 + ::Math_obj::sqrt(((x109 * x109) + (y109 * y109)))) <= view11->width);
HXLINE( 482)											if ((view11->shape == 3)) {
HXLINE(1416)												has88 = !(has88);
            											}
            										}
            										else {
HXLINE( 482)											if ((view11->height > view11->width)) {
HXLINE( 482)												Float a23 = (( (Float)(view11->height) ) / ( (Float)(2) ));
HXDLIN( 482)												Float b23 = (( (Float)(view11->width) ) / ( (Float)(2) ));
HXDLIN( 482)												Float c23 = ::Math_obj::sqrt(((a23 * a23) - (b23 * b23)));
HXDLIN( 482)												Float f1_x23 = (view11->x + (( (Float)(view11->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f1_y23 = ((view11->y + (( (Float)(view11->height) ) / ( (Float)(2) ))) - c23);
HXDLIN( 482)												Float f2_x23 = (view11->x + (( (Float)(view11->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float f2_y23 = ((view11->y + (( (Float)(view11->height) ) / ( (Float)(2) ))) + c23);
HXDLIN( 482)												::cpp::Int64 p23 = _hx_int64_make(x107,y107);
HXDLIN( 482)												Float x110 = (( (Float)(_hx_int64_high(p23)) ) - f1_x23);
HXDLIN( 482)												Float y110 = (( (Float)(_hx_int64_low(p23)) ) - f1_y23);
HXDLIN( 482)												Float has95 = ::Math_obj::sqrt(((x110 * x110) + (y110 * y110)));
HXDLIN( 482)												Float x111 = (( (Float)(_hx_int64_high(p23)) ) - f2_x23);
HXDLIN( 482)												Float y111 = (( (Float)(_hx_int64_low(p23)) ) - f2_y23);
HXLINE(1424)												has88 = ((has95 + ::Math_obj::sqrt(((x111 * x111) + (y111 * y111)))) <= view11->height);
HXLINE( 482)												if ((view11->shape == 3)) {
HXLINE(1425)													has88 = !(has88);
            												}
            											}
            											else {
HXLINE( 482)												Float point1_x11 = ( (Float)(x107) );
HXDLIN( 482)												Float point1_y11 = ( (Float)(y107) );
HXDLIN( 482)												Float point2_x11 = (view11->x + (( (Float)(view11->width) ) / ( (Float)(2) )));
HXDLIN( 482)												Float point2_y11 = (view11->y + (( (Float)(view11->height) ) / ( (Float)(2) )));
HXDLIN( 482)												Float x112 = (point2_x11 - point1_x11);
HXDLIN( 482)												Float y112 = (point2_y11 - point1_y11);
HXLINE(1428)												has88 = (::Math_obj::sqrt(((x112 * x112) + (y112 * y112))) <= (( (Float)(view11->width) ) / ( (Float)(2) )));
HXLINE( 482)												if ((view11->shape == 3)) {
HXLINE(1429)													has88 = !(has88);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has88 = (((::Math_obj::abs((( (Float)((x107 - view11->x)) ) - (( (Float)(view11->width) ) / ( (Float)(2) )))) / (( (Float)(view11->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y107 - view11->y)) ) - (( (Float)(view11->height) ) / ( (Float)(2) )))) / (( (Float)(view11->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has88 = !((((::Math_obj::abs((( (Float)((x107 - view11->x)) ) - (( (Float)(view11->width) ) / ( (Float)(2) )))) / (( (Float)(view11->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y107 - view11->y)) ) - (( (Float)(view11->height) ) / ( (Float)(2) )))) / (( (Float)(view11->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 482)								_hx_tmp224 = has88;
            							}
HXDLIN( 482)							if (_hx_tmp224) {
HXLINE( 482)								int position38 = (((y107 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x107) * 4);
HXDLIN( 482)								position38 = (position38 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)								this27->b[position38] = ( (unsigned char)(((color77 >> 24) & 255)) );
HXDLIN( 482)								this27->b[(position38 + 1)] = ( (unsigned char)(((color77 >> 16) & 255)) );
HXDLIN( 482)								this27->b[(position38 + 2)] = ( (unsigned char)(((color77 >> 8) & 255)) );
HXDLIN( 482)								this27->b[(position38 + 3)] = ( (unsigned char)((color77 & 255)) );
            							}
            						}
            						else {
HXLINE( 482)							int position39 = (((y107 * (( (int)(this27->b->__get(0)) ) | (( (int)(this27->b->__get(1)) ) << 8))) + x107) * 4);
HXDLIN( 482)							position39 = (position39 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this27->b[position39] = ( (unsigned char)(((color77 >> 24) & 255)) );
HXDLIN( 482)							this27->b[(position39 + 1)] = ( (unsigned char)(((color77 >> 16) & 255)) );
HXDLIN( 482)							this27->b[(position39 + 2)] = ( (unsigned char)(((color77 >> 8) & 255)) );
HXDLIN( 482)							this27->b[(position39 + 3)] = ( (unsigned char)((color77 & 255)) );
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 482)			Float yFraction4 = (fromY - ( (Float)(::Std_obj::_hx_int(fromY)) ));
HXDLIN( 482)			Float xFraction4 = (fromX - ( (Float)(::Std_obj::_hx_int(fromX)) ));
HXDLIN( 482)			{
HXLINE( 482)				int x113 = ::Math_obj::floor(fromX);
HXDLIN( 482)				int y113 = ::Math_obj::floor(fromY);
HXDLIN( 482)				Float Red12 = ((((( (Float)(1) ) - xFraction4) + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Green12 = ((((( (Float)(1) ) - xFraction4) + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Blue12 = ((((( (Float)(1) ) - xFraction4) + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Alpha12 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)				int color78 = 0;
HXDLIN( 482)				{
HXLINE( 482)					int value48 = ::Math_obj::round((Red12 * ( (Float)(255) )));
HXDLIN( 482)					color78 = (color78 & -16711681);
HXDLIN( 482)					int color79;
HXDLIN( 482)					if ((value48 > 255)) {
HXLINE( 482)						color79 = 255;
            					}
            					else {
HXLINE( 482)						if ((value48 < 0)) {
HXLINE( 482)							color79 = 0;
            						}
            						else {
HXLINE( 482)							color79 = value48;
            						}
            					}
HXDLIN( 482)					color78 = (color78 | (color79 << 16));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value49 = ::Math_obj::round((Green12 * ( (Float)(255) )));
HXDLIN( 482)					color78 = (color78 & -65281);
HXDLIN( 482)					int color80;
HXDLIN( 482)					if ((value49 > 255)) {
HXLINE( 482)						color80 = 255;
            					}
            					else {
HXLINE( 482)						if ((value49 < 0)) {
HXLINE( 482)							color80 = 0;
            						}
            						else {
HXLINE( 482)							color80 = value49;
            						}
            					}
HXDLIN( 482)					color78 = (color78 | (color80 << 8));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value50 = ::Math_obj::round((Blue12 * ( (Float)(255) )));
HXDLIN( 482)					color78 = (color78 & -256);
HXDLIN( 482)					int color81;
HXDLIN( 482)					if ((value50 > 255)) {
HXLINE( 482)						color81 = 255;
            					}
            					else {
HXLINE( 482)						if ((value50 < 0)) {
HXLINE( 482)							color81 = 0;
            						}
            						else {
HXLINE( 482)							color81 = value50;
            						}
            					}
HXDLIN( 482)					color78 = (color78 | color81);
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value51 = ::Math_obj::round((Alpha12 * ( (Float)(255) )));
HXDLIN( 482)					color78 = (color78 & 16777215);
HXDLIN( 482)					int color82;
HXDLIN( 482)					if ((value51 > 255)) {
HXLINE( 482)						color82 = 255;
            					}
            					else {
HXLINE( 482)						if ((value51 < 0)) {
HXLINE( 482)							color82 = 0;
            						}
            						else {
HXLINE( 482)							color82 = value51;
            						}
            					}
HXDLIN( 482)					color78 = (color78 | (color82 << 24));
            				}
HXDLIN( 482)				int color83 = color78;
HXDLIN( 482)				bool _hx_tmp232;
HXDLIN( 482)				bool _hx_tmp233;
HXDLIN( 482)				bool _hx_tmp234;
HXDLIN( 482)				if ((x113 >= 0)) {
HXLINE( 482)					_hx_tmp234 = (y113 >= 0);
            				}
            				else {
HXLINE( 482)					_hx_tmp234 = false;
            				}
HXDLIN( 482)				if (_hx_tmp234) {
HXLINE( 482)					_hx_tmp233 = (x113 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 482)					_hx_tmp233 = false;
            				}
HXDLIN( 482)				if (_hx_tmp233) {
HXLINE( 482)					_hx_tmp232 = (y113 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 482)					_hx_tmp232 = false;
            				}
HXDLIN( 482)				if (!(_hx_tmp232)) {
HXLINE( 482)					::cpp::Int64 this32 = _hx_int64_make(x113,y113);
HXDLIN( 482)					int _hx_tmp235 = _hx_int64_high(this32);
HXDLIN( 482)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp235,_hx_int64_low(this32))));
            				}
            				else {
HXLINE( 482)					bool _hx_tmp236;
HXDLIN( 482)					bool _hx_tmp237;
HXDLIN( 482)					bool _hx_tmp238;
HXDLIN( 482)					bool _hx_tmp239;
HXDLIN( 482)					int pos144 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)					if (((( (int)(this1->b->__get(pos144)) ) | (( (int)(this1->b->__get((pos144 + 1))) ) << 8)) == 0)) {
HXLINE( 482)						int pos145 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp239 = ((( (int)(this1->b->__get(pos145)) ) | (( (int)(this1->b->__get((pos145 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp239 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp239)) {
HXLINE( 482)						int pos146 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)						_hx_tmp238 = ((( (int)(this1->b->__get(pos146)) ) | (( (int)(this1->b->__get((pos146 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp238 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp238)) {
HXLINE( 482)						int pos147 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp237 = ((( (int)(this1->b->__get(pos147)) ) | (( (int)(this1->b->__get((pos147 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp237 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp237)) {
HXLINE( 482)						_hx_tmp236 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp236 = true;
            					}
HXDLIN( 482)					if (_hx_tmp236) {
HXLINE( 482)						 ::vision::ds::ImageView v12 = null();
HXDLIN( 482)						bool _hx_tmp240;
HXDLIN( 482)						bool _hx_tmp241;
HXDLIN( 482)						bool _hx_tmp242;
HXDLIN( 482)						bool _hx_tmp243;
HXDLIN( 482)						bool _hx_tmp244;
HXDLIN( 482)						bool _hx_tmp245;
HXDLIN( 482)						int pos148 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this1->b->__get(pos148)) ) | (( (int)(this1->b->__get((pos148 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos149 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp245 = ((( (int)(this1->b->__get(pos149)) ) | (( (int)(this1->b->__get((pos149 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp245 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp245)) {
HXLINE( 482)							int pos150 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp244 = ((( (int)(this1->b->__get(pos150)) ) | (( (int)(this1->b->__get((pos150 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp244 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp244)) {
HXLINE( 482)							int pos151 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp243 = ((( (int)(this1->b->__get(pos151)) ) | (( (int)(this1->b->__get((pos151 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp243 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp243)) {
HXLINE( 482)							_hx_tmp242 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp242 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp242)) {
HXLINE( 482)							_hx_tmp241 = ::hx::IsNull( v12 );
            						}
            						else {
HXLINE( 482)							_hx_tmp241 = false;
            						}
HXDLIN( 482)						if (_hx_tmp241) {
HXLINE( 482)							bool _hx_tmp246;
HXDLIN( 482)							bool _hx_tmp247;
HXDLIN( 482)							if ((x113 >= 0)) {
HXLINE( 482)								_hx_tmp247 = (y113 >= 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp247 = false;
            							}
HXDLIN( 482)							if (_hx_tmp247) {
HXLINE( 482)								_hx_tmp246 = (x113 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 482)								_hx_tmp246 = false;
            							}
HXDLIN( 482)							if (_hx_tmp246) {
HXLINE( 482)								_hx_tmp240 = (y113 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 482)								_hx_tmp240 = false;
            							}
            						}
            						else {
HXLINE( 482)							bool has96 = false;
HXDLIN( 482)							 ::vision::ds::ImageView view12;
HXDLIN( 482)							if (::hx::IsNotNull( v12 )) {
HXLINE( 482)								view12 = v12;
            							}
            							else {
HXLINE( 482)								int pos152 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)								int pos153 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								int pos154 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								int pos155 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								view12 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos152)) ) | (( (int)(this1->b->__get((pos152 + 1))) ) << 8)),(( (int)(this1->b->__get(pos153)) ) | (( (int)(this1->b->__get((pos153 + 1))) ) << 8)),(( (int)(this1->b->__get(pos154)) ) | (( (int)(this1->b->__get((pos154 + 1))) ) << 8)),(( (int)(this1->b->__get(pos155)) ) | (( (int)(this1->b->__get((pos155 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 482)							switch((int)(view12->shape)){
            								case (int)0: {
HXLINE( 482)									bool has97;
HXDLIN( 482)									bool has98;
HXDLIN( 482)									if ((x113 < (view12->x + view12->width))) {
HXLINE( 482)										has98 = (y113 < (view12->y + view12->height));
            									}
            									else {
HXLINE( 482)										has98 = false;
            									}
HXDLIN( 482)									if (has98) {
HXLINE( 482)										has97 = (x113 >= view12->x);
            									}
            									else {
HXLINE( 482)										has97 = false;
            									}
HXDLIN( 482)									if (has97) {
HXLINE( 482)										has96 = (y113 >= view12->y);
            									}
            									else {
HXLINE( 482)										has96 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 482)									bool has99;
HXDLIN( 482)									bool has100;
HXDLIN( 482)									bool has101;
HXDLIN( 482)									if ((x113 < (view12->x + view12->width))) {
HXLINE( 482)										has101 = (y113 < (view12->y + view12->height));
            									}
            									else {
HXLINE( 482)										has101 = false;
            									}
HXDLIN( 482)									if (has101) {
HXLINE( 482)										has100 = (x113 >= view12->x);
            									}
            									else {
HXLINE( 482)										has100 = false;
            									}
HXDLIN( 482)									if (has100) {
HXLINE( 482)										has99 = (y113 >= view12->y);
            									}
            									else {
HXLINE( 482)										has99 = false;
            									}
HXLINE(1400)									has96 = !(has99);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 482)									if ((view12->width > view12->height)) {
HXLINE( 482)										Float a24 = (( (Float)(view12->width) ) / ( (Float)(2) ));
HXDLIN( 482)										Float b24 = (( (Float)(view12->height) ) / ( (Float)(2) ));
HXDLIN( 482)										Float c24 = ::Math_obj::sqrt(((a24 * a24) - (b24 * b24)));
HXDLIN( 482)										Float f1_x24 = ((view12->x + (( (Float)(view12->width) ) / ( (Float)(2) ))) - c24);
HXDLIN( 482)										Float f1_y24 = (view12->y + (( (Float)(view12->height) ) / ( (Float)(2) )));
HXDLIN( 482)										Float f2_x24 = ((view12->x + (( (Float)(view12->width) ) / ( (Float)(2) ))) + c24);
HXDLIN( 482)										Float f2_y24 = (view12->y + (( (Float)(view12->height) ) / ( (Float)(2) )));
HXDLIN( 482)										::cpp::Int64 p24 = _hx_int64_make(x113,y113);
HXDLIN( 482)										Float x114 = (( (Float)(_hx_int64_high(p24)) ) - f1_x24);
HXDLIN( 482)										Float y114 = (( (Float)(_hx_int64_low(p24)) ) - f1_y24);
HXDLIN( 482)										Float has102 = ::Math_obj::sqrt(((x114 * x114) + (y114 * y114)));
HXDLIN( 482)										Float x115 = (( (Float)(_hx_int64_high(p24)) ) - f2_x24);
HXDLIN( 482)										Float y115 = (( (Float)(_hx_int64_low(p24)) ) - f2_y24);
HXLINE(1415)										has96 = ((has102 + ::Math_obj::sqrt(((x115 * x115) + (y115 * y115)))) <= view12->width);
HXLINE( 482)										if ((view12->shape == 3)) {
HXLINE(1416)											has96 = !(has96);
            										}
            									}
            									else {
HXLINE( 482)										if ((view12->height > view12->width)) {
HXLINE( 482)											Float a25 = (( (Float)(view12->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b25 = (( (Float)(view12->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c25 = ::Math_obj::sqrt(((a25 * a25) - (b25 * b25)));
HXDLIN( 482)											Float f1_x25 = (view12->x + (( (Float)(view12->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f1_y25 = ((view12->y + (( (Float)(view12->height) ) / ( (Float)(2) ))) - c25);
HXDLIN( 482)											Float f2_x25 = (view12->x + (( (Float)(view12->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_y25 = ((view12->y + (( (Float)(view12->height) ) / ( (Float)(2) ))) + c25);
HXDLIN( 482)											::cpp::Int64 p25 = _hx_int64_make(x113,y113);
HXDLIN( 482)											Float x116 = (( (Float)(_hx_int64_high(p25)) ) - f1_x25);
HXDLIN( 482)											Float y116 = (( (Float)(_hx_int64_low(p25)) ) - f1_y25);
HXDLIN( 482)											Float has103 = ::Math_obj::sqrt(((x116 * x116) + (y116 * y116)));
HXDLIN( 482)											Float x117 = (( (Float)(_hx_int64_high(p25)) ) - f2_x25);
HXDLIN( 482)											Float y117 = (( (Float)(_hx_int64_low(p25)) ) - f2_y25);
HXLINE(1424)											has96 = ((has103 + ::Math_obj::sqrt(((x117 * x117) + (y117 * y117)))) <= view12->height);
HXLINE( 482)											if ((view12->shape == 3)) {
HXLINE(1425)												has96 = !(has96);
            											}
            										}
            										else {
HXLINE( 482)											Float point1_x12 = ( (Float)(x113) );
HXDLIN( 482)											Float point1_y12 = ( (Float)(y113) );
HXDLIN( 482)											Float point2_x12 = (view12->x + (( (Float)(view12->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float point2_y12 = (view12->y + (( (Float)(view12->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float x118 = (point2_x12 - point1_x12);
HXDLIN( 482)											Float y118 = (point2_y12 - point1_y12);
HXLINE(1428)											has96 = (::Math_obj::sqrt(((x118 * x118) + (y118 * y118))) <= (( (Float)(view12->width) ) / ( (Float)(2) )));
HXLINE( 482)											if ((view12->shape == 3)) {
HXLINE(1429)												has96 = !(has96);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has96 = (((::Math_obj::abs((( (Float)((x113 - view12->x)) ) - (( (Float)(view12->width) ) / ( (Float)(2) )))) / (( (Float)(view12->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y113 - view12->y)) ) - (( (Float)(view12->height) ) / ( (Float)(2) )))) / (( (Float)(view12->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has96 = !((((::Math_obj::abs((( (Float)((x113 - view12->x)) ) - (( (Float)(view12->width) ) / ( (Float)(2) )))) / (( (Float)(view12->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y113 - view12->y)) ) - (( (Float)(view12->height) ) / ( (Float)(2) )))) / (( (Float)(view12->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 482)							_hx_tmp240 = has96;
            						}
HXDLIN( 482)						if (_hx_tmp240) {
HXLINE( 482)							int position40 = (((y113 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x113) * 4);
HXDLIN( 482)							position40 = (position40 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this1->b[position40] = ( (unsigned char)(((color83 >> 24) & 255)) );
HXDLIN( 482)							this1->b[(position40 + 1)] = ( (unsigned char)(((color83 >> 16) & 255)) );
HXDLIN( 482)							this1->b[(position40 + 2)] = ( (unsigned char)(((color83 >> 8) & 255)) );
HXDLIN( 482)							this1->b[(position40 + 3)] = ( (unsigned char)((color83 & 255)) );
            						}
            					}
            					else {
HXLINE( 482)						int position41 = (((y113 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x113) * 4);
HXDLIN( 482)						position41 = (position41 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)						this1->b[position41] = ( (unsigned char)(((color83 >> 24) & 255)) );
HXDLIN( 482)						this1->b[(position41 + 1)] = ( (unsigned char)(((color83 >> 16) & 255)) );
HXDLIN( 482)						this1->b[(position41 + 2)] = ( (unsigned char)(((color83 >> 8) & 255)) );
HXDLIN( 482)						this1->b[(position41 + 3)] = ( (unsigned char)((color83 & 255)) );
            					}
            				}
            			}
HXDLIN( 482)			if ((fromY != ::Std_obj::_hx_int(fromY))) {
HXLINE( 482)				int x119 = ::Math_obj::floor(fromX);
HXDLIN( 482)				int y119 = ::Math_obj::ceil(fromY);
HXDLIN( 482)				Float Red13 = ((((( (Float)(1) ) - xFraction4) + yFraction4) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Green13 = ((((( (Float)(1) ) - xFraction4) + yFraction4) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Blue13 = ((((( (Float)(1) ) - xFraction4) + yFraction4) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Alpha13 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)				int color84 = 0;
HXDLIN( 482)				{
HXLINE( 482)					int value52 = ::Math_obj::round((Red13 * ( (Float)(255) )));
HXDLIN( 482)					color84 = (color84 & -16711681);
HXDLIN( 482)					int color85;
HXDLIN( 482)					if ((value52 > 255)) {
HXLINE( 482)						color85 = 255;
            					}
            					else {
HXLINE( 482)						if ((value52 < 0)) {
HXLINE( 482)							color85 = 0;
            						}
            						else {
HXLINE( 482)							color85 = value52;
            						}
            					}
HXDLIN( 482)					color84 = (color84 | (color85 << 16));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value53 = ::Math_obj::round((Green13 * ( (Float)(255) )));
HXDLIN( 482)					color84 = (color84 & -65281);
HXDLIN( 482)					int color86;
HXDLIN( 482)					if ((value53 > 255)) {
HXLINE( 482)						color86 = 255;
            					}
            					else {
HXLINE( 482)						if ((value53 < 0)) {
HXLINE( 482)							color86 = 0;
            						}
            						else {
HXLINE( 482)							color86 = value53;
            						}
            					}
HXDLIN( 482)					color84 = (color84 | (color86 << 8));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value54 = ::Math_obj::round((Blue13 * ( (Float)(255) )));
HXDLIN( 482)					color84 = (color84 & -256);
HXDLIN( 482)					int color87;
HXDLIN( 482)					if ((value54 > 255)) {
HXLINE( 482)						color87 = 255;
            					}
            					else {
HXLINE( 482)						if ((value54 < 0)) {
HXLINE( 482)							color87 = 0;
            						}
            						else {
HXLINE( 482)							color87 = value54;
            						}
            					}
HXDLIN( 482)					color84 = (color84 | color87);
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value55 = ::Math_obj::round((Alpha13 * ( (Float)(255) )));
HXDLIN( 482)					color84 = (color84 & 16777215);
HXDLIN( 482)					int color88;
HXDLIN( 482)					if ((value55 > 255)) {
HXLINE( 482)						color88 = 255;
            					}
            					else {
HXLINE( 482)						if ((value55 < 0)) {
HXLINE( 482)							color88 = 0;
            						}
            						else {
HXLINE( 482)							color88 = value55;
            						}
            					}
HXDLIN( 482)					color84 = (color84 | (color88 << 24));
            				}
HXDLIN( 482)				int color89 = color84;
HXDLIN( 482)				bool _hx_tmp248;
HXDLIN( 482)				bool _hx_tmp249;
HXDLIN( 482)				bool _hx_tmp250;
HXDLIN( 482)				if ((x119 >= 0)) {
HXLINE( 482)					_hx_tmp250 = (y119 >= 0);
            				}
            				else {
HXLINE( 482)					_hx_tmp250 = false;
            				}
HXDLIN( 482)				if (_hx_tmp250) {
HXLINE( 482)					_hx_tmp249 = (x119 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 482)					_hx_tmp249 = false;
            				}
HXDLIN( 482)				if (_hx_tmp249) {
HXLINE( 482)					_hx_tmp248 = (y119 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 482)					_hx_tmp248 = false;
            				}
HXDLIN( 482)				if (!(_hx_tmp248)) {
HXLINE( 482)					::cpp::Int64 this33 = _hx_int64_make(x119,y119);
HXDLIN( 482)					int _hx_tmp251 = _hx_int64_high(this33);
HXDLIN( 482)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp251,_hx_int64_low(this33))));
            				}
            				else {
HXLINE( 482)					bool _hx_tmp252;
HXDLIN( 482)					bool _hx_tmp253;
HXDLIN( 482)					bool _hx_tmp254;
HXDLIN( 482)					bool _hx_tmp255;
HXDLIN( 482)					int pos156 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)					if (((( (int)(this1->b->__get(pos156)) ) | (( (int)(this1->b->__get((pos156 + 1))) ) << 8)) == 0)) {
HXLINE( 482)						int pos157 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp255 = ((( (int)(this1->b->__get(pos157)) ) | (( (int)(this1->b->__get((pos157 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp255 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp255)) {
HXLINE( 482)						int pos158 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)						_hx_tmp254 = ((( (int)(this1->b->__get(pos158)) ) | (( (int)(this1->b->__get((pos158 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp254 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp254)) {
HXLINE( 482)						int pos159 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp253 = ((( (int)(this1->b->__get(pos159)) ) | (( (int)(this1->b->__get((pos159 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp253 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp253)) {
HXLINE( 482)						_hx_tmp252 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp252 = true;
            					}
HXDLIN( 482)					if (_hx_tmp252) {
HXLINE( 482)						 ::vision::ds::ImageView v13 = null();
HXDLIN( 482)						bool _hx_tmp256;
HXDLIN( 482)						bool _hx_tmp257;
HXDLIN( 482)						bool _hx_tmp258;
HXDLIN( 482)						bool _hx_tmp259;
HXDLIN( 482)						bool _hx_tmp260;
HXDLIN( 482)						bool _hx_tmp261;
HXDLIN( 482)						int pos160 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this1->b->__get(pos160)) ) | (( (int)(this1->b->__get((pos160 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos161 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp261 = ((( (int)(this1->b->__get(pos161)) ) | (( (int)(this1->b->__get((pos161 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp261 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp261)) {
HXLINE( 482)							int pos162 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp260 = ((( (int)(this1->b->__get(pos162)) ) | (( (int)(this1->b->__get((pos162 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp260 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp260)) {
HXLINE( 482)							int pos163 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp259 = ((( (int)(this1->b->__get(pos163)) ) | (( (int)(this1->b->__get((pos163 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp259 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp259)) {
HXLINE( 482)							_hx_tmp258 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp258 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp258)) {
HXLINE( 482)							_hx_tmp257 = ::hx::IsNull( v13 );
            						}
            						else {
HXLINE( 482)							_hx_tmp257 = false;
            						}
HXDLIN( 482)						if (_hx_tmp257) {
HXLINE( 482)							bool _hx_tmp262;
HXDLIN( 482)							bool _hx_tmp263;
HXDLIN( 482)							if ((x119 >= 0)) {
HXLINE( 482)								_hx_tmp263 = (y119 >= 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp263 = false;
            							}
HXDLIN( 482)							if (_hx_tmp263) {
HXLINE( 482)								_hx_tmp262 = (x119 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 482)								_hx_tmp262 = false;
            							}
HXDLIN( 482)							if (_hx_tmp262) {
HXLINE( 482)								_hx_tmp256 = (y119 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 482)								_hx_tmp256 = false;
            							}
            						}
            						else {
HXLINE( 482)							bool has104 = false;
HXDLIN( 482)							 ::vision::ds::ImageView view13;
HXDLIN( 482)							if (::hx::IsNotNull( v13 )) {
HXLINE( 482)								view13 = v13;
            							}
            							else {
HXLINE( 482)								int pos164 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)								int pos165 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								int pos166 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								int pos167 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								view13 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos164)) ) | (( (int)(this1->b->__get((pos164 + 1))) ) << 8)),(( (int)(this1->b->__get(pos165)) ) | (( (int)(this1->b->__get((pos165 + 1))) ) << 8)),(( (int)(this1->b->__get(pos166)) ) | (( (int)(this1->b->__get((pos166 + 1))) ) << 8)),(( (int)(this1->b->__get(pos167)) ) | (( (int)(this1->b->__get((pos167 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 482)							switch((int)(view13->shape)){
            								case (int)0: {
HXLINE( 482)									bool has105;
HXDLIN( 482)									bool has106;
HXDLIN( 482)									if ((x119 < (view13->x + view13->width))) {
HXLINE( 482)										has106 = (y119 < (view13->y + view13->height));
            									}
            									else {
HXLINE( 482)										has106 = false;
            									}
HXDLIN( 482)									if (has106) {
HXLINE( 482)										has105 = (x119 >= view13->x);
            									}
            									else {
HXLINE( 482)										has105 = false;
            									}
HXDLIN( 482)									if (has105) {
HXLINE( 482)										has104 = (y119 >= view13->y);
            									}
            									else {
HXLINE( 482)										has104 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 482)									bool has107;
HXDLIN( 482)									bool has108;
HXDLIN( 482)									bool has109;
HXDLIN( 482)									if ((x119 < (view13->x + view13->width))) {
HXLINE( 482)										has109 = (y119 < (view13->y + view13->height));
            									}
            									else {
HXLINE( 482)										has109 = false;
            									}
HXDLIN( 482)									if (has109) {
HXLINE( 482)										has108 = (x119 >= view13->x);
            									}
            									else {
HXLINE( 482)										has108 = false;
            									}
HXDLIN( 482)									if (has108) {
HXLINE( 482)										has107 = (y119 >= view13->y);
            									}
            									else {
HXLINE( 482)										has107 = false;
            									}
HXLINE(1400)									has104 = !(has107);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 482)									if ((view13->width > view13->height)) {
HXLINE( 482)										Float a26 = (( (Float)(view13->width) ) / ( (Float)(2) ));
HXDLIN( 482)										Float b26 = (( (Float)(view13->height) ) / ( (Float)(2) ));
HXDLIN( 482)										Float c26 = ::Math_obj::sqrt(((a26 * a26) - (b26 * b26)));
HXDLIN( 482)										Float f1_x26 = ((view13->x + (( (Float)(view13->width) ) / ( (Float)(2) ))) - c26);
HXDLIN( 482)										Float f1_y26 = (view13->y + (( (Float)(view13->height) ) / ( (Float)(2) )));
HXDLIN( 482)										Float f2_x26 = ((view13->x + (( (Float)(view13->width) ) / ( (Float)(2) ))) + c26);
HXDLIN( 482)										Float f2_y26 = (view13->y + (( (Float)(view13->height) ) / ( (Float)(2) )));
HXDLIN( 482)										::cpp::Int64 p26 = _hx_int64_make(x119,y119);
HXDLIN( 482)										Float x120 = (( (Float)(_hx_int64_high(p26)) ) - f1_x26);
HXDLIN( 482)										Float y120 = (( (Float)(_hx_int64_low(p26)) ) - f1_y26);
HXDLIN( 482)										Float has110 = ::Math_obj::sqrt(((x120 * x120) + (y120 * y120)));
HXDLIN( 482)										Float x121 = (( (Float)(_hx_int64_high(p26)) ) - f2_x26);
HXDLIN( 482)										Float y121 = (( (Float)(_hx_int64_low(p26)) ) - f2_y26);
HXLINE(1415)										has104 = ((has110 + ::Math_obj::sqrt(((x121 * x121) + (y121 * y121)))) <= view13->width);
HXLINE( 482)										if ((view13->shape == 3)) {
HXLINE(1416)											has104 = !(has104);
            										}
            									}
            									else {
HXLINE( 482)										if ((view13->height > view13->width)) {
HXLINE( 482)											Float a27 = (( (Float)(view13->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b27 = (( (Float)(view13->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c27 = ::Math_obj::sqrt(((a27 * a27) - (b27 * b27)));
HXDLIN( 482)											Float f1_x27 = (view13->x + (( (Float)(view13->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f1_y27 = ((view13->y + (( (Float)(view13->height) ) / ( (Float)(2) ))) - c27);
HXDLIN( 482)											Float f2_x27 = (view13->x + (( (Float)(view13->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_y27 = ((view13->y + (( (Float)(view13->height) ) / ( (Float)(2) ))) + c27);
HXDLIN( 482)											::cpp::Int64 p27 = _hx_int64_make(x119,y119);
HXDLIN( 482)											Float x122 = (( (Float)(_hx_int64_high(p27)) ) - f1_x27);
HXDLIN( 482)											Float y122 = (( (Float)(_hx_int64_low(p27)) ) - f1_y27);
HXDLIN( 482)											Float has111 = ::Math_obj::sqrt(((x122 * x122) + (y122 * y122)));
HXDLIN( 482)											Float x123 = (( (Float)(_hx_int64_high(p27)) ) - f2_x27);
HXDLIN( 482)											Float y123 = (( (Float)(_hx_int64_low(p27)) ) - f2_y27);
HXLINE(1424)											has104 = ((has111 + ::Math_obj::sqrt(((x123 * x123) + (y123 * y123)))) <= view13->height);
HXLINE( 482)											if ((view13->shape == 3)) {
HXLINE(1425)												has104 = !(has104);
            											}
            										}
            										else {
HXLINE( 482)											Float point1_x13 = ( (Float)(x119) );
HXDLIN( 482)											Float point1_y13 = ( (Float)(y119) );
HXDLIN( 482)											Float point2_x13 = (view13->x + (( (Float)(view13->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float point2_y13 = (view13->y + (( (Float)(view13->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float x124 = (point2_x13 - point1_x13);
HXDLIN( 482)											Float y124 = (point2_y13 - point1_y13);
HXLINE(1428)											has104 = (::Math_obj::sqrt(((x124 * x124) + (y124 * y124))) <= (( (Float)(view13->width) ) / ( (Float)(2) )));
HXLINE( 482)											if ((view13->shape == 3)) {
HXLINE(1429)												has104 = !(has104);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has104 = (((::Math_obj::abs((( (Float)((x119 - view13->x)) ) - (( (Float)(view13->width) ) / ( (Float)(2) )))) / (( (Float)(view13->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y119 - view13->y)) ) - (( (Float)(view13->height) ) / ( (Float)(2) )))) / (( (Float)(view13->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has104 = !((((::Math_obj::abs((( (Float)((x119 - view13->x)) ) - (( (Float)(view13->width) ) / ( (Float)(2) )))) / (( (Float)(view13->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y119 - view13->y)) ) - (( (Float)(view13->height) ) / ( (Float)(2) )))) / (( (Float)(view13->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 482)							_hx_tmp256 = has104;
            						}
HXDLIN( 482)						if (_hx_tmp256) {
HXLINE( 482)							int position42 = (((y119 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x119) * 4);
HXDLIN( 482)							position42 = (position42 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this1->b[position42] = ( (unsigned char)(((color89 >> 24) & 255)) );
HXDLIN( 482)							this1->b[(position42 + 1)] = ( (unsigned char)(((color89 >> 16) & 255)) );
HXDLIN( 482)							this1->b[(position42 + 2)] = ( (unsigned char)(((color89 >> 8) & 255)) );
HXDLIN( 482)							this1->b[(position42 + 3)] = ( (unsigned char)((color89 & 255)) );
            						}
            					}
            					else {
HXLINE( 482)						int position43 = (((y119 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x119) * 4);
HXDLIN( 482)						position43 = (position43 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)						this1->b[position43] = ( (unsigned char)(((color89 >> 24) & 255)) );
HXDLIN( 482)						this1->b[(position43 + 1)] = ( (unsigned char)(((color89 >> 16) & 255)) );
HXDLIN( 482)						this1->b[(position43 + 2)] = ( (unsigned char)(((color89 >> 8) & 255)) );
HXDLIN( 482)						this1->b[(position43 + 3)] = ( (unsigned char)((color89 & 255)) );
            					}
            				}
            			}
HXDLIN( 482)			if ((fromX != ::Std_obj::_hx_int(fromX))) {
HXLINE( 482)				int x125 = ::Math_obj::ceil(fromX);
HXDLIN( 482)				int y125 = ::Math_obj::floor(fromY);
HXDLIN( 482)				Float Red14 = (((xFraction4 + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Green14 = (((xFraction4 + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Blue14 = (((xFraction4 + (( (Float)(1) ) - yFraction4)) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Alpha14 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)				int color90 = 0;
HXDLIN( 482)				{
HXLINE( 482)					int value56 = ::Math_obj::round((Red14 * ( (Float)(255) )));
HXDLIN( 482)					color90 = (color90 & -16711681);
HXDLIN( 482)					int color91;
HXDLIN( 482)					if ((value56 > 255)) {
HXLINE( 482)						color91 = 255;
            					}
            					else {
HXLINE( 482)						if ((value56 < 0)) {
HXLINE( 482)							color91 = 0;
            						}
            						else {
HXLINE( 482)							color91 = value56;
            						}
            					}
HXDLIN( 482)					color90 = (color90 | (color91 << 16));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value57 = ::Math_obj::round((Green14 * ( (Float)(255) )));
HXDLIN( 482)					color90 = (color90 & -65281);
HXDLIN( 482)					int color92;
HXDLIN( 482)					if ((value57 > 255)) {
HXLINE( 482)						color92 = 255;
            					}
            					else {
HXLINE( 482)						if ((value57 < 0)) {
HXLINE( 482)							color92 = 0;
            						}
            						else {
HXLINE( 482)							color92 = value57;
            						}
            					}
HXDLIN( 482)					color90 = (color90 | (color92 << 8));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value58 = ::Math_obj::round((Blue14 * ( (Float)(255) )));
HXDLIN( 482)					color90 = (color90 & -256);
HXDLIN( 482)					int color93;
HXDLIN( 482)					if ((value58 > 255)) {
HXLINE( 482)						color93 = 255;
            					}
            					else {
HXLINE( 482)						if ((value58 < 0)) {
HXLINE( 482)							color93 = 0;
            						}
            						else {
HXLINE( 482)							color93 = value58;
            						}
            					}
HXDLIN( 482)					color90 = (color90 | color93);
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value59 = ::Math_obj::round((Alpha14 * ( (Float)(255) )));
HXDLIN( 482)					color90 = (color90 & 16777215);
HXDLIN( 482)					int color94;
HXDLIN( 482)					if ((value59 > 255)) {
HXLINE( 482)						color94 = 255;
            					}
            					else {
HXLINE( 482)						if ((value59 < 0)) {
HXLINE( 482)							color94 = 0;
            						}
            						else {
HXLINE( 482)							color94 = value59;
            						}
            					}
HXDLIN( 482)					color90 = (color90 | (color94 << 24));
            				}
HXDLIN( 482)				int color95 = color90;
HXDLIN( 482)				bool _hx_tmp264;
HXDLIN( 482)				bool _hx_tmp265;
HXDLIN( 482)				bool _hx_tmp266;
HXDLIN( 482)				if ((x125 >= 0)) {
HXLINE( 482)					_hx_tmp266 = (y125 >= 0);
            				}
            				else {
HXLINE( 482)					_hx_tmp266 = false;
            				}
HXDLIN( 482)				if (_hx_tmp266) {
HXLINE( 482)					_hx_tmp265 = (x125 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 482)					_hx_tmp265 = false;
            				}
HXDLIN( 482)				if (_hx_tmp265) {
HXLINE( 482)					_hx_tmp264 = (y125 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 482)					_hx_tmp264 = false;
            				}
HXDLIN( 482)				if (!(_hx_tmp264)) {
HXLINE( 482)					::cpp::Int64 this34 = _hx_int64_make(x125,y125);
HXDLIN( 482)					int _hx_tmp267 = _hx_int64_high(this34);
HXDLIN( 482)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp267,_hx_int64_low(this34))));
            				}
            				else {
HXLINE( 482)					bool _hx_tmp268;
HXDLIN( 482)					bool _hx_tmp269;
HXDLIN( 482)					bool _hx_tmp270;
HXDLIN( 482)					bool _hx_tmp271;
HXDLIN( 482)					int pos168 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)					if (((( (int)(this1->b->__get(pos168)) ) | (( (int)(this1->b->__get((pos168 + 1))) ) << 8)) == 0)) {
HXLINE( 482)						int pos169 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp271 = ((( (int)(this1->b->__get(pos169)) ) | (( (int)(this1->b->__get((pos169 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp271 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp271)) {
HXLINE( 482)						int pos170 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)						_hx_tmp270 = ((( (int)(this1->b->__get(pos170)) ) | (( (int)(this1->b->__get((pos170 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp270 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp270)) {
HXLINE( 482)						int pos171 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp269 = ((( (int)(this1->b->__get(pos171)) ) | (( (int)(this1->b->__get((pos171 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp269 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp269)) {
HXLINE( 482)						_hx_tmp268 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp268 = true;
            					}
HXDLIN( 482)					if (_hx_tmp268) {
HXLINE( 482)						 ::vision::ds::ImageView v14 = null();
HXDLIN( 482)						bool _hx_tmp272;
HXDLIN( 482)						bool _hx_tmp273;
HXDLIN( 482)						bool _hx_tmp274;
HXDLIN( 482)						bool _hx_tmp275;
HXDLIN( 482)						bool _hx_tmp276;
HXDLIN( 482)						bool _hx_tmp277;
HXDLIN( 482)						int pos172 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this1->b->__get(pos172)) ) | (( (int)(this1->b->__get((pos172 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos173 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp277 = ((( (int)(this1->b->__get(pos173)) ) | (( (int)(this1->b->__get((pos173 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp277 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp277)) {
HXLINE( 482)							int pos174 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp276 = ((( (int)(this1->b->__get(pos174)) ) | (( (int)(this1->b->__get((pos174 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp276 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp276)) {
HXLINE( 482)							int pos175 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp275 = ((( (int)(this1->b->__get(pos175)) ) | (( (int)(this1->b->__get((pos175 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp275 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp275)) {
HXLINE( 482)							_hx_tmp274 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp274 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp274)) {
HXLINE( 482)							_hx_tmp273 = ::hx::IsNull( v14 );
            						}
            						else {
HXLINE( 482)							_hx_tmp273 = false;
            						}
HXDLIN( 482)						if (_hx_tmp273) {
HXLINE( 482)							bool _hx_tmp278;
HXDLIN( 482)							bool _hx_tmp279;
HXDLIN( 482)							if ((x125 >= 0)) {
HXLINE( 482)								_hx_tmp279 = (y125 >= 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp279 = false;
            							}
HXDLIN( 482)							if (_hx_tmp279) {
HXLINE( 482)								_hx_tmp278 = (x125 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 482)								_hx_tmp278 = false;
            							}
HXDLIN( 482)							if (_hx_tmp278) {
HXLINE( 482)								_hx_tmp272 = (y125 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 482)								_hx_tmp272 = false;
            							}
            						}
            						else {
HXLINE( 482)							bool has112 = false;
HXDLIN( 482)							 ::vision::ds::ImageView view14;
HXDLIN( 482)							if (::hx::IsNotNull( v14 )) {
HXLINE( 482)								view14 = v14;
            							}
            							else {
HXLINE( 482)								int pos176 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)								int pos177 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								int pos178 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								int pos179 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								view14 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos176)) ) | (( (int)(this1->b->__get((pos176 + 1))) ) << 8)),(( (int)(this1->b->__get(pos177)) ) | (( (int)(this1->b->__get((pos177 + 1))) ) << 8)),(( (int)(this1->b->__get(pos178)) ) | (( (int)(this1->b->__get((pos178 + 1))) ) << 8)),(( (int)(this1->b->__get(pos179)) ) | (( (int)(this1->b->__get((pos179 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 482)							switch((int)(view14->shape)){
            								case (int)0: {
HXLINE( 482)									bool has113;
HXDLIN( 482)									bool has114;
HXDLIN( 482)									if ((x125 < (view14->x + view14->width))) {
HXLINE( 482)										has114 = (y125 < (view14->y + view14->height));
            									}
            									else {
HXLINE( 482)										has114 = false;
            									}
HXDLIN( 482)									if (has114) {
HXLINE( 482)										has113 = (x125 >= view14->x);
            									}
            									else {
HXLINE( 482)										has113 = false;
            									}
HXDLIN( 482)									if (has113) {
HXLINE( 482)										has112 = (y125 >= view14->y);
            									}
            									else {
HXLINE( 482)										has112 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 482)									bool has115;
HXDLIN( 482)									bool has116;
HXDLIN( 482)									bool has117;
HXDLIN( 482)									if ((x125 < (view14->x + view14->width))) {
HXLINE( 482)										has117 = (y125 < (view14->y + view14->height));
            									}
            									else {
HXLINE( 482)										has117 = false;
            									}
HXDLIN( 482)									if (has117) {
HXLINE( 482)										has116 = (x125 >= view14->x);
            									}
            									else {
HXLINE( 482)										has116 = false;
            									}
HXDLIN( 482)									if (has116) {
HXLINE( 482)										has115 = (y125 >= view14->y);
            									}
            									else {
HXLINE( 482)										has115 = false;
            									}
HXLINE(1400)									has112 = !(has115);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 482)									if ((view14->width > view14->height)) {
HXLINE( 482)										Float a28 = (( (Float)(view14->width) ) / ( (Float)(2) ));
HXDLIN( 482)										Float b28 = (( (Float)(view14->height) ) / ( (Float)(2) ));
HXDLIN( 482)										Float c28 = ::Math_obj::sqrt(((a28 * a28) - (b28 * b28)));
HXDLIN( 482)										Float f1_x28 = ((view14->x + (( (Float)(view14->width) ) / ( (Float)(2) ))) - c28);
HXDLIN( 482)										Float f1_y28 = (view14->y + (( (Float)(view14->height) ) / ( (Float)(2) )));
HXDLIN( 482)										Float f2_x28 = ((view14->x + (( (Float)(view14->width) ) / ( (Float)(2) ))) + c28);
HXDLIN( 482)										Float f2_y28 = (view14->y + (( (Float)(view14->height) ) / ( (Float)(2) )));
HXDLIN( 482)										::cpp::Int64 p28 = _hx_int64_make(x125,y125);
HXDLIN( 482)										Float x126 = (( (Float)(_hx_int64_high(p28)) ) - f1_x28);
HXDLIN( 482)										Float y126 = (( (Float)(_hx_int64_low(p28)) ) - f1_y28);
HXDLIN( 482)										Float has118 = ::Math_obj::sqrt(((x126 * x126) + (y126 * y126)));
HXDLIN( 482)										Float x127 = (( (Float)(_hx_int64_high(p28)) ) - f2_x28);
HXDLIN( 482)										Float y127 = (( (Float)(_hx_int64_low(p28)) ) - f2_y28);
HXLINE(1415)										has112 = ((has118 + ::Math_obj::sqrt(((x127 * x127) + (y127 * y127)))) <= view14->width);
HXLINE( 482)										if ((view14->shape == 3)) {
HXLINE(1416)											has112 = !(has112);
            										}
            									}
            									else {
HXLINE( 482)										if ((view14->height > view14->width)) {
HXLINE( 482)											Float a29 = (( (Float)(view14->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b29 = (( (Float)(view14->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c29 = ::Math_obj::sqrt(((a29 * a29) - (b29 * b29)));
HXDLIN( 482)											Float f1_x29 = (view14->x + (( (Float)(view14->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f1_y29 = ((view14->y + (( (Float)(view14->height) ) / ( (Float)(2) ))) - c29);
HXDLIN( 482)											Float f2_x29 = (view14->x + (( (Float)(view14->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_y29 = ((view14->y + (( (Float)(view14->height) ) / ( (Float)(2) ))) + c29);
HXDLIN( 482)											::cpp::Int64 p29 = _hx_int64_make(x125,y125);
HXDLIN( 482)											Float x128 = (( (Float)(_hx_int64_high(p29)) ) - f1_x29);
HXDLIN( 482)											Float y128 = (( (Float)(_hx_int64_low(p29)) ) - f1_y29);
HXDLIN( 482)											Float has119 = ::Math_obj::sqrt(((x128 * x128) + (y128 * y128)));
HXDLIN( 482)											Float x129 = (( (Float)(_hx_int64_high(p29)) ) - f2_x29);
HXDLIN( 482)											Float y129 = (( (Float)(_hx_int64_low(p29)) ) - f2_y29);
HXLINE(1424)											has112 = ((has119 + ::Math_obj::sqrt(((x129 * x129) + (y129 * y129)))) <= view14->height);
HXLINE( 482)											if ((view14->shape == 3)) {
HXLINE(1425)												has112 = !(has112);
            											}
            										}
            										else {
HXLINE( 482)											Float point1_x14 = ( (Float)(x125) );
HXDLIN( 482)											Float point1_y14 = ( (Float)(y125) );
HXDLIN( 482)											Float point2_x14 = (view14->x + (( (Float)(view14->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float point2_y14 = (view14->y + (( (Float)(view14->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float x130 = (point2_x14 - point1_x14);
HXDLIN( 482)											Float y130 = (point2_y14 - point1_y14);
HXLINE(1428)											has112 = (::Math_obj::sqrt(((x130 * x130) + (y130 * y130))) <= (( (Float)(view14->width) ) / ( (Float)(2) )));
HXLINE( 482)											if ((view14->shape == 3)) {
HXLINE(1429)												has112 = !(has112);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has112 = (((::Math_obj::abs((( (Float)((x125 - view14->x)) ) - (( (Float)(view14->width) ) / ( (Float)(2) )))) / (( (Float)(view14->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y125 - view14->y)) ) - (( (Float)(view14->height) ) / ( (Float)(2) )))) / (( (Float)(view14->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has112 = !((((::Math_obj::abs((( (Float)((x125 - view14->x)) ) - (( (Float)(view14->width) ) / ( (Float)(2) )))) / (( (Float)(view14->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y125 - view14->y)) ) - (( (Float)(view14->height) ) / ( (Float)(2) )))) / (( (Float)(view14->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 482)							_hx_tmp272 = has112;
            						}
HXDLIN( 482)						if (_hx_tmp272) {
HXLINE( 482)							int position44 = (((y125 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x125) * 4);
HXDLIN( 482)							position44 = (position44 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this1->b[position44] = ( (unsigned char)(((color95 >> 24) & 255)) );
HXDLIN( 482)							this1->b[(position44 + 1)] = ( (unsigned char)(((color95 >> 16) & 255)) );
HXDLIN( 482)							this1->b[(position44 + 2)] = ( (unsigned char)(((color95 >> 8) & 255)) );
HXDLIN( 482)							this1->b[(position44 + 3)] = ( (unsigned char)((color95 & 255)) );
            						}
            					}
            					else {
HXLINE( 482)						int position45 = (((y125 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x125) * 4);
HXDLIN( 482)						position45 = (position45 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)						this1->b[position45] = ( (unsigned char)(((color95 >> 24) & 255)) );
HXDLIN( 482)						this1->b[(position45 + 1)] = ( (unsigned char)(((color95 >> 16) & 255)) );
HXDLIN( 482)						this1->b[(position45 + 2)] = ( (unsigned char)(((color95 >> 8) & 255)) );
HXDLIN( 482)						this1->b[(position45 + 3)] = ( (unsigned char)((color95 & 255)) );
            					}
            				}
            			}
HXDLIN( 482)			bool _hx_tmp280;
HXDLIN( 482)			if ((fromX != ::Std_obj::_hx_int(fromX))) {
HXLINE( 482)				_hx_tmp280 = (fromY != ::Std_obj::_hx_int(fromY));
            			}
            			else {
HXLINE( 482)				_hx_tmp280 = false;
            			}
HXDLIN( 482)			if (_hx_tmp280) {
HXLINE( 482)				int x131 = ::Math_obj::ceil(fromX);
HXDLIN( 482)				int y131 = ::Math_obj::ceil(fromY);
HXDLIN( 482)				Float Red15 = (((xFraction4 + yFraction4) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Green15 = (((xFraction4 + yFraction4) / ( (Float)(2) )) * (( (Float)(((oldPixelResetColor >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Blue15 = (((xFraction4 + yFraction4) / ( (Float)(2) )) * (( (Float)((oldPixelResetColor & 255)) ) / ( (Float)(255) )));
HXDLIN( 482)				Float Alpha15 = (( (Float)(((oldPixelResetColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 482)				int color96 = 0;
HXDLIN( 482)				{
HXLINE( 482)					int value60 = ::Math_obj::round((Red15 * ( (Float)(255) )));
HXDLIN( 482)					color96 = (color96 & -16711681);
HXDLIN( 482)					int color97;
HXDLIN( 482)					if ((value60 > 255)) {
HXLINE( 482)						color97 = 255;
            					}
            					else {
HXLINE( 482)						if ((value60 < 0)) {
HXLINE( 482)							color97 = 0;
            						}
            						else {
HXLINE( 482)							color97 = value60;
            						}
            					}
HXDLIN( 482)					color96 = (color96 | (color97 << 16));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value61 = ::Math_obj::round((Green15 * ( (Float)(255) )));
HXDLIN( 482)					color96 = (color96 & -65281);
HXDLIN( 482)					int color98;
HXDLIN( 482)					if ((value61 > 255)) {
HXLINE( 482)						color98 = 255;
            					}
            					else {
HXLINE( 482)						if ((value61 < 0)) {
HXLINE( 482)							color98 = 0;
            						}
            						else {
HXLINE( 482)							color98 = value61;
            						}
            					}
HXDLIN( 482)					color96 = (color96 | (color98 << 8));
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value62 = ::Math_obj::round((Blue15 * ( (Float)(255) )));
HXDLIN( 482)					color96 = (color96 & -256);
HXDLIN( 482)					int color99;
HXDLIN( 482)					if ((value62 > 255)) {
HXLINE( 482)						color99 = 255;
            					}
            					else {
HXLINE( 482)						if ((value62 < 0)) {
HXLINE( 482)							color99 = 0;
            						}
            						else {
HXLINE( 482)							color99 = value62;
            						}
            					}
HXDLIN( 482)					color96 = (color96 | color99);
            				}
HXDLIN( 482)				{
HXLINE( 482)					int value63 = ::Math_obj::round((Alpha15 * ( (Float)(255) )));
HXDLIN( 482)					color96 = (color96 & 16777215);
HXDLIN( 482)					int color100;
HXDLIN( 482)					if ((value63 > 255)) {
HXLINE( 482)						color100 = 255;
            					}
            					else {
HXLINE( 482)						if ((value63 < 0)) {
HXLINE( 482)							color100 = 0;
            						}
            						else {
HXLINE( 482)							color100 = value63;
            						}
            					}
HXDLIN( 482)					color96 = (color96 | (color100 << 24));
            				}
HXDLIN( 482)				int color101 = color96;
HXDLIN( 482)				bool _hx_tmp281;
HXDLIN( 482)				bool _hx_tmp282;
HXDLIN( 482)				bool _hx_tmp283;
HXDLIN( 482)				if ((x131 >= 0)) {
HXLINE( 482)					_hx_tmp283 = (y131 >= 0);
            				}
            				else {
HXLINE( 482)					_hx_tmp283 = false;
            				}
HXDLIN( 482)				if (_hx_tmp283) {
HXLINE( 482)					_hx_tmp282 = (x131 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 482)					_hx_tmp282 = false;
            				}
HXDLIN( 482)				if (_hx_tmp282) {
HXLINE( 482)					_hx_tmp281 = (y131 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 482)					_hx_tmp281 = false;
            				}
HXDLIN( 482)				if (!(_hx_tmp281)) {
HXLINE( 482)					::cpp::Int64 this35 = _hx_int64_make(x131,y131);
HXDLIN( 482)					int _hx_tmp284 = _hx_int64_high(this35);
HXDLIN( 482)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp284,_hx_int64_low(this35))));
            				}
            				else {
HXLINE( 482)					bool _hx_tmp285;
HXDLIN( 482)					bool _hx_tmp286;
HXDLIN( 482)					bool _hx_tmp287;
HXDLIN( 482)					bool _hx_tmp288;
HXDLIN( 482)					int pos180 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)					if (((( (int)(this1->b->__get(pos180)) ) | (( (int)(this1->b->__get((pos180 + 1))) ) << 8)) == 0)) {
HXLINE( 482)						int pos181 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp288 = ((( (int)(this1->b->__get(pos181)) ) | (( (int)(this1->b->__get((pos181 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp288 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp288)) {
HXLINE( 482)						int pos182 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)						_hx_tmp287 = ((( (int)(this1->b->__get(pos182)) ) | (( (int)(this1->b->__get((pos182 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp287 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp287)) {
HXLINE( 482)						int pos183 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)						_hx_tmp286 = ((( (int)(this1->b->__get(pos183)) ) | (( (int)(this1->b->__get((pos183 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp286 = true;
            					}
HXDLIN( 482)					if (!(_hx_tmp286)) {
HXLINE( 482)						_hx_tmp285 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 482)						_hx_tmp285 = true;
            					}
HXDLIN( 482)					if (_hx_tmp285) {
HXLINE( 482)						 ::vision::ds::ImageView v15 = null();
HXDLIN( 482)						bool _hx_tmp289;
HXDLIN( 482)						bool _hx_tmp290;
HXDLIN( 482)						bool _hx_tmp291;
HXDLIN( 482)						bool _hx_tmp292;
HXDLIN( 482)						bool _hx_tmp293;
HXDLIN( 482)						bool _hx_tmp294;
HXDLIN( 482)						int pos184 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)						if (((( (int)(this1->b->__get(pos184)) ) | (( (int)(this1->b->__get((pos184 + 1))) ) << 8)) == 0)) {
HXLINE( 482)							int pos185 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp294 = ((( (int)(this1->b->__get(pos185)) ) | (( (int)(this1->b->__get((pos185 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp294 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp294)) {
HXLINE( 482)							int pos186 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)							_hx_tmp293 = ((( (int)(this1->b->__get(pos186)) ) | (( (int)(this1->b->__get((pos186 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp293 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp293)) {
HXLINE( 482)							int pos187 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)							_hx_tmp292 = ((( (int)(this1->b->__get(pos187)) ) | (( (int)(this1->b->__get((pos187 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp292 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp292)) {
HXLINE( 482)							_hx_tmp291 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 482)							_hx_tmp291 = true;
            						}
HXDLIN( 482)						if (!(_hx_tmp291)) {
HXLINE( 482)							_hx_tmp290 = ::hx::IsNull( v15 );
            						}
            						else {
HXLINE( 482)							_hx_tmp290 = false;
            						}
HXDLIN( 482)						if (_hx_tmp290) {
HXLINE( 482)							bool _hx_tmp295;
HXDLIN( 482)							bool _hx_tmp296;
HXDLIN( 482)							if ((x131 >= 0)) {
HXLINE( 482)								_hx_tmp296 = (y131 >= 0);
            							}
            							else {
HXLINE( 482)								_hx_tmp296 = false;
            							}
HXDLIN( 482)							if (_hx_tmp296) {
HXLINE( 482)								_hx_tmp295 = (x131 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 482)								_hx_tmp295 = false;
            							}
HXDLIN( 482)							if (_hx_tmp295) {
HXLINE( 482)								_hx_tmp289 = (y131 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 482)								_hx_tmp289 = false;
            							}
            						}
            						else {
HXLINE( 482)							bool has120 = false;
HXDLIN( 482)							 ::vision::ds::ImageView view15;
HXDLIN( 482)							if (::hx::IsNotNull( v15 )) {
HXLINE( 482)								view15 = v15;
            							}
            							else {
HXLINE( 482)								int pos188 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 482)								int pos189 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								int pos190 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 482)								int pos191 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 482)								view15 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos188)) ) | (( (int)(this1->b->__get((pos188 + 1))) ) << 8)),(( (int)(this1->b->__get(pos189)) ) | (( (int)(this1->b->__get((pos189 + 1))) ) << 8)),(( (int)(this1->b->__get(pos190)) ) | (( (int)(this1->b->__get((pos190 + 1))) ) << 8)),(( (int)(this1->b->__get(pos191)) ) | (( (int)(this1->b->__get((pos191 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 482)							switch((int)(view15->shape)){
            								case (int)0: {
HXLINE( 482)									bool has121;
HXDLIN( 482)									bool has122;
HXDLIN( 482)									if ((x131 < (view15->x + view15->width))) {
HXLINE( 482)										has122 = (y131 < (view15->y + view15->height));
            									}
            									else {
HXLINE( 482)										has122 = false;
            									}
HXDLIN( 482)									if (has122) {
HXLINE( 482)										has121 = (x131 >= view15->x);
            									}
            									else {
HXLINE( 482)										has121 = false;
            									}
HXDLIN( 482)									if (has121) {
HXLINE( 482)										has120 = (y131 >= view15->y);
            									}
            									else {
HXLINE( 482)										has120 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 482)									bool has123;
HXDLIN( 482)									bool has124;
HXDLIN( 482)									bool has125;
HXDLIN( 482)									if ((x131 < (view15->x + view15->width))) {
HXLINE( 482)										has125 = (y131 < (view15->y + view15->height));
            									}
            									else {
HXLINE( 482)										has125 = false;
            									}
HXDLIN( 482)									if (has125) {
HXLINE( 482)										has124 = (x131 >= view15->x);
            									}
            									else {
HXLINE( 482)										has124 = false;
            									}
HXDLIN( 482)									if (has124) {
HXLINE( 482)										has123 = (y131 >= view15->y);
            									}
            									else {
HXLINE( 482)										has123 = false;
            									}
HXLINE(1400)									has120 = !(has123);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 482)									if ((view15->width > view15->height)) {
HXLINE( 482)										Float a30 = (( (Float)(view15->width) ) / ( (Float)(2) ));
HXDLIN( 482)										Float b30 = (( (Float)(view15->height) ) / ( (Float)(2) ));
HXDLIN( 482)										Float c30 = ::Math_obj::sqrt(((a30 * a30) - (b30 * b30)));
HXDLIN( 482)										Float f1_x30 = ((view15->x + (( (Float)(view15->width) ) / ( (Float)(2) ))) - c30);
HXDLIN( 482)										Float f1_y30 = (view15->y + (( (Float)(view15->height) ) / ( (Float)(2) )));
HXDLIN( 482)										Float f2_x30 = ((view15->x + (( (Float)(view15->width) ) / ( (Float)(2) ))) + c30);
HXDLIN( 482)										Float f2_y30 = (view15->y + (( (Float)(view15->height) ) / ( (Float)(2) )));
HXDLIN( 482)										::cpp::Int64 p30 = _hx_int64_make(x131,y131);
HXDLIN( 482)										Float x132 = (( (Float)(_hx_int64_high(p30)) ) - f1_x30);
HXDLIN( 482)										Float y132 = (( (Float)(_hx_int64_low(p30)) ) - f1_y30);
HXDLIN( 482)										Float has126 = ::Math_obj::sqrt(((x132 * x132) + (y132 * y132)));
HXDLIN( 482)										Float x133 = (( (Float)(_hx_int64_high(p30)) ) - f2_x30);
HXDLIN( 482)										Float y133 = (( (Float)(_hx_int64_low(p30)) ) - f2_y30);
HXLINE(1415)										has120 = ((has126 + ::Math_obj::sqrt(((x133 * x133) + (y133 * y133)))) <= view15->width);
HXLINE( 482)										if ((view15->shape == 3)) {
HXLINE(1416)											has120 = !(has120);
            										}
            									}
            									else {
HXLINE( 482)										if ((view15->height > view15->width)) {
HXLINE( 482)											Float a31 = (( (Float)(view15->height) ) / ( (Float)(2) ));
HXDLIN( 482)											Float b31 = (( (Float)(view15->width) ) / ( (Float)(2) ));
HXDLIN( 482)											Float c31 = ::Math_obj::sqrt(((a31 * a31) - (b31 * b31)));
HXDLIN( 482)											Float f1_x31 = (view15->x + (( (Float)(view15->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f1_y31 = ((view15->y + (( (Float)(view15->height) ) / ( (Float)(2) ))) - c31);
HXDLIN( 482)											Float f2_x31 = (view15->x + (( (Float)(view15->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float f2_y31 = ((view15->y + (( (Float)(view15->height) ) / ( (Float)(2) ))) + c31);
HXDLIN( 482)											::cpp::Int64 p31 = _hx_int64_make(x131,y131);
HXDLIN( 482)											Float x134 = (( (Float)(_hx_int64_high(p31)) ) - f1_x31);
HXDLIN( 482)											Float y134 = (( (Float)(_hx_int64_low(p31)) ) - f1_y31);
HXDLIN( 482)											Float has127 = ::Math_obj::sqrt(((x134 * x134) + (y134 * y134)));
HXDLIN( 482)											Float x135 = (( (Float)(_hx_int64_high(p31)) ) - f2_x31);
HXDLIN( 482)											Float y135 = (( (Float)(_hx_int64_low(p31)) ) - f2_y31);
HXLINE(1424)											has120 = ((has127 + ::Math_obj::sqrt(((x135 * x135) + (y135 * y135)))) <= view15->height);
HXLINE( 482)											if ((view15->shape == 3)) {
HXLINE(1425)												has120 = !(has120);
            											}
            										}
            										else {
HXLINE( 482)											Float point1_x15 = ( (Float)(x131) );
HXDLIN( 482)											Float point1_y15 = ( (Float)(y131) );
HXDLIN( 482)											Float point2_x15 = (view15->x + (( (Float)(view15->width) ) / ( (Float)(2) )));
HXDLIN( 482)											Float point2_y15 = (view15->y + (( (Float)(view15->height) ) / ( (Float)(2) )));
HXDLIN( 482)											Float x136 = (point2_x15 - point1_x15);
HXDLIN( 482)											Float y136 = (point2_y15 - point1_y15);
HXLINE(1428)											has120 = (::Math_obj::sqrt(((x136 * x136) + (y136 * y136))) <= (( (Float)(view15->width) ) / ( (Float)(2) )));
HXLINE( 482)											if ((view15->shape == 3)) {
HXLINE(1429)												has120 = !(has120);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has120 = (((::Math_obj::abs((( (Float)((x131 - view15->x)) ) - (( (Float)(view15->width) ) / ( (Float)(2) )))) / (( (Float)(view15->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y131 - view15->y)) ) - (( (Float)(view15->height) ) / ( (Float)(2) )))) / (( (Float)(view15->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has120 = !((((::Math_obj::abs((( (Float)((x131 - view15->x)) ) - (( (Float)(view15->width) ) / ( (Float)(2) )))) / (( (Float)(view15->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y131 - view15->y)) ) - (( (Float)(view15->height) ) / ( (Float)(2) )))) / (( (Float)(view15->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 482)							_hx_tmp289 = has120;
            						}
HXDLIN( 482)						if (_hx_tmp289) {
HXLINE( 482)							int position46 = (((y131 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x131) * 4);
HXDLIN( 482)							position46 = (position46 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)							this1->b[position46] = ( (unsigned char)(((color101 >> 24) & 255)) );
HXDLIN( 482)							this1->b[(position46 + 1)] = ( (unsigned char)(((color101 >> 16) & 255)) );
HXDLIN( 482)							this1->b[(position46 + 2)] = ( (unsigned char)(((color101 >> 8) & 255)) );
HXDLIN( 482)							this1->b[(position46 + 3)] = ( (unsigned char)((color101 & 255)) );
            						}
            					}
            					else {
HXLINE( 482)						int position47 = (((y131 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x131) * 4);
HXDLIN( 482)						position47 = (position47 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 482)						this1->b[position47] = ( (unsigned char)(((color101 >> 24) & 255)) );
HXDLIN( 482)						this1->b[(position47 + 1)] = ( (unsigned char)(((color101 >> 16) & 255)) );
HXDLIN( 482)						this1->b[(position47 + 2)] = ( (unsigned char)(((color101 >> 8) & 255)) );
HXDLIN( 482)						this1->b[(position47 + 3)] = ( (unsigned char)((color101 & 255)) );
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,moveFloatingPixel,(void))

void Image_Impl__obj::moveUnsafePixel( ::haxe::io::Bytes this1,int fromX,int fromY,int toX,int toY,int oldPixelResetColor){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_485_moveUnsafePixel)
HXLINE( 486)		{
HXLINE( 486)			int position = (((fromY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + fromX) * 4);
HXDLIN( 486)			position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 486)			int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN( 486)			{
HXLINE( 486)				int position1 = (((toY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + toX) * 4);
HXDLIN( 486)				position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 486)				this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 486)				this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 486)				this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 486)				this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            			}
            		}
HXLINE( 487)		{
HXLINE( 487)			int position2 = (((fromY * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + fromX) * 4);
HXDLIN( 487)			position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 487)			this1->b[position2] = ( (unsigned char)(((oldPixelResetColor >> 24) & 255)) );
HXDLIN( 487)			this1->b[(position2 + 1)] = ( (unsigned char)(((oldPixelResetColor >> 16) & 255)) );
HXDLIN( 487)			this1->b[(position2 + 2)] = ( (unsigned char)(((oldPixelResetColor >> 8) & 255)) );
HXDLIN( 487)			this1->b[(position2 + 3)] = ( (unsigned char)((oldPixelResetColor & 255)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,moveUnsafePixel,(void))

int Image_Impl__obj::copyPixelFrom( ::haxe::io::Bytes this1, ::haxe::io::Bytes image,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_500_copyPixelFrom)
HXLINE( 501)		bool _hx_tmp;
HXDLIN( 501)		bool _hx_tmp1;
HXDLIN( 501)		bool _hx_tmp2;
HXDLIN( 501)		if ((x >= 0)) {
HXLINE( 501)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXLINE( 501)			_hx_tmp2 = false;
            		}
HXDLIN( 501)		if (_hx_tmp2) {
HXLINE( 501)			_hx_tmp1 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 501)			_hx_tmp1 = false;
            		}
HXDLIN( 501)		if (_hx_tmp1) {
HXLINE( 501)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 501)			_hx_tmp = false;
            		}
HXDLIN( 501)		if (!(_hx_tmp)) {
HXLINE( 501)			::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN( 501)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 501)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
HXDLIN( 501)		int position = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 501)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 501)		int c = ((((( (int)(image->b->__get(position)) ) << 24) | (( (int)(image->b->__get((position + 1))) ) << 16)) | (( (int)(image->b->__get((position + 2))) ) << 8)) | ( (int)(image->b->__get((position + 3))) ));
HXLINE( 502)		bool _hx_tmp4;
HXDLIN( 502)		bool _hx_tmp5;
HXDLIN( 502)		bool _hx_tmp6;
HXDLIN( 502)		if ((x >= 0)) {
HXLINE( 502)			_hx_tmp6 = (y >= 0);
            		}
            		else {
HXLINE( 502)			_hx_tmp6 = false;
            		}
HXDLIN( 502)		if (_hx_tmp6) {
HXLINE( 502)			_hx_tmp5 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 502)			_hx_tmp5 = false;
            		}
HXDLIN( 502)		if (_hx_tmp5) {
HXLINE( 502)			_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 502)			_hx_tmp4 = false;
            		}
HXDLIN( 502)		if (!(_hx_tmp4)) {
HXLINE( 502)			::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 502)			int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 502)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            		}
            		else {
HXLINE( 502)			bool _hx_tmp8;
HXDLIN( 502)			bool _hx_tmp9;
HXDLIN( 502)			bool _hx_tmp10;
HXDLIN( 502)			bool _hx_tmp11;
HXDLIN( 502)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 502)			if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 502)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)				_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 502)				_hx_tmp11 = true;
            			}
HXDLIN( 502)			if (!(_hx_tmp11)) {
HXLINE( 502)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 502)				_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 502)				_hx_tmp10 = true;
            			}
HXDLIN( 502)			if (!(_hx_tmp10)) {
HXLINE( 502)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)				_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            			}
            			else {
HXLINE( 502)				_hx_tmp9 = true;
            			}
HXDLIN( 502)			if (!(_hx_tmp9)) {
HXLINE( 502)				_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXLINE( 502)				_hx_tmp8 = true;
            			}
HXDLIN( 502)			if (_hx_tmp8) {
HXLINE( 502)				 ::vision::ds::ImageView v = null();
HXDLIN( 502)				bool _hx_tmp12;
HXDLIN( 502)				bool _hx_tmp13;
HXDLIN( 502)				bool _hx_tmp14;
HXDLIN( 502)				bool _hx_tmp15;
HXDLIN( 502)				bool _hx_tmp16;
HXDLIN( 502)				bool _hx_tmp17;
HXDLIN( 502)				int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 502)				if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 502)					int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)					_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 502)					_hx_tmp17 = true;
            				}
HXDLIN( 502)				if (!(_hx_tmp17)) {
HXLINE( 502)					int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 502)					_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 502)					_hx_tmp16 = true;
            				}
HXDLIN( 502)				if (!(_hx_tmp16)) {
HXLINE( 502)					int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)					_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 502)					_hx_tmp15 = true;
            				}
HXDLIN( 502)				if (!(_hx_tmp15)) {
HXLINE( 502)					_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 502)					_hx_tmp14 = true;
            				}
HXDLIN( 502)				if (!(_hx_tmp14)) {
HXLINE( 502)					_hx_tmp13 = ::hx::IsNull( v );
            				}
            				else {
HXLINE( 502)					_hx_tmp13 = false;
            				}
HXDLIN( 502)				if (_hx_tmp13) {
HXLINE( 502)					bool _hx_tmp18;
HXDLIN( 502)					bool _hx_tmp19;
HXDLIN( 502)					if ((x >= 0)) {
HXLINE( 502)						_hx_tmp19 = (y >= 0);
            					}
            					else {
HXLINE( 502)						_hx_tmp19 = false;
            					}
HXDLIN( 502)					if (_hx_tmp19) {
HXLINE( 502)						_hx_tmp18 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 502)						_hx_tmp18 = false;
            					}
HXDLIN( 502)					if (_hx_tmp18) {
HXLINE( 502)						_hx_tmp12 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 502)						_hx_tmp12 = false;
            					}
            				}
            				else {
HXLINE( 502)					bool has = false;
HXDLIN( 502)					 ::vision::ds::ImageView view;
HXDLIN( 502)					if (::hx::IsNotNull( v )) {
HXLINE( 502)						view = v;
            					}
            					else {
HXLINE( 502)						int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 502)						int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)						int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 502)						int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 502)						view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 502)					switch((int)(view->shape)){
            						case (int)0: {
HXLINE( 502)							bool has1;
HXDLIN( 502)							bool has2;
HXDLIN( 502)							if ((x < (view->x + view->width))) {
HXLINE( 502)								has2 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 502)								has2 = false;
            							}
HXDLIN( 502)							if (has2) {
HXLINE( 502)								has1 = (x >= view->x);
            							}
            							else {
HXLINE( 502)								has1 = false;
            							}
HXDLIN( 502)							if (has1) {
HXLINE( 502)								has = (y >= view->y);
            							}
            							else {
HXLINE( 502)								has = false;
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							bool has3;
HXDLIN( 502)							bool has4;
HXDLIN( 502)							bool has5;
HXDLIN( 502)							if ((x < (view->x + view->width))) {
HXLINE( 502)								has5 = (y < (view->y + view->height));
            							}
            							else {
HXLINE( 502)								has5 = false;
            							}
HXDLIN( 502)							if (has5) {
HXLINE( 502)								has4 = (x >= view->x);
            							}
            							else {
HXLINE( 502)								has4 = false;
            							}
HXDLIN( 502)							if (has4) {
HXLINE( 502)								has3 = (y >= view->y);
            							}
            							else {
HXLINE( 502)								has3 = false;
            							}
HXLINE(1400)							has = !(has3);
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 502)							if ((view->width > view->height)) {
HXLINE( 502)								Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 502)								Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 502)								Float c1 = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 502)								Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c1);
HXDLIN( 502)								Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 502)								Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c1);
HXDLIN( 502)								Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 502)								::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 502)								Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 502)								Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 502)								Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 502)								Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 502)								Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)								has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 502)								if ((view->shape == 3)) {
HXLINE(1416)									has = !(has);
            								}
            							}
            							else {
HXLINE( 502)								if ((view->height > view->width)) {
HXLINE( 502)									Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 502)									Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 502)									Float c2 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 502)									Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 502)									Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c2);
HXDLIN( 502)									Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 502)									Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c2);
HXDLIN( 502)									::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 502)									Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 502)									Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 502)									Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 502)									Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 502)									Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)									has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 502)									if ((view->shape == 3)) {
HXLINE(1425)										has = !(has);
            									}
            								}
            								else {
HXLINE( 502)									Float point1_x = ( (Float)(x) );
HXDLIN( 502)									Float point1_y = ( (Float)(y) );
HXDLIN( 502)									Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 502)									Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 502)									Float x5 = (point2_x - point1_x);
HXDLIN( 502)									Float y5 = (point2_y - point1_y);
HXLINE(1428)									has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 502)									if ((view->shape == 3)) {
HXLINE(1429)										has = !(has);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 502)					_hx_tmp12 = has;
            				}
HXDLIN( 502)				if (_hx_tmp12) {
HXLINE( 502)					int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 502)					position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 502)					this1->b[position1] = ( (unsigned char)(((c >> 24) & 255)) );
HXDLIN( 502)					this1->b[(position1 + 1)] = ( (unsigned char)(((c >> 16) & 255)) );
HXDLIN( 502)					this1->b[(position1 + 2)] = ( (unsigned char)(((c >> 8) & 255)) );
HXDLIN( 502)					this1->b[(position1 + 3)] = ( (unsigned char)((c & 255)) );
            				}
            			}
            			else {
HXLINE( 502)				int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 502)				position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 502)				this1->b[position2] = ( (unsigned char)(((c >> 24) & 255)) );
HXDLIN( 502)				this1->b[(position2 + 1)] = ( (unsigned char)(((c >> 16) & 255)) );
HXDLIN( 502)				this1->b[(position2 + 2)] = ( (unsigned char)(((c >> 8) & 255)) );
HXDLIN( 502)				this1->b[(position2 + 3)] = ( (unsigned char)((c & 255)) );
            			}
            		}
HXLINE( 503)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,copyPixelFrom,return )

int Image_Impl__obj::copyPixelTo( ::haxe::io::Bytes this1, ::haxe::io::Bytes image,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_517_copyPixelTo)
HXDLIN( 517)		 ::haxe::io::Bytes image1 = this1;
HXDLIN( 517)		bool _hx_tmp;
HXDLIN( 517)		bool _hx_tmp1;
HXDLIN( 517)		bool _hx_tmp2;
HXDLIN( 517)		if ((x >= 0)) {
HXDLIN( 517)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXDLIN( 517)			_hx_tmp2 = false;
            		}
HXDLIN( 517)		if (_hx_tmp2) {
HXDLIN( 517)			_hx_tmp1 = (x < (( (int)(image1->b->__get(0)) ) | (( (int)(image1->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 517)			_hx_tmp1 = false;
            		}
HXDLIN( 517)		if (_hx_tmp1) {
HXDLIN( 517)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((image1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image1->b->__get(0)) ) | (( (int)(image1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 517)			_hx_tmp = false;
            		}
HXDLIN( 517)		if (!(_hx_tmp)) {
HXDLIN( 517)			::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN( 517)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 517)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
HXDLIN( 517)		int position = (((y * (( (int)(image1->b->__get(0)) ) | (( (int)(image1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 517)		position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 517)		int c = ((((( (int)(image1->b->__get(position)) ) << 24) | (( (int)(image1->b->__get((position + 1))) ) << 16)) | (( (int)(image1->b->__get((position + 2))) ) << 8)) | ( (int)(image1->b->__get((position + 3))) ));
HXDLIN( 517)		bool _hx_tmp4;
HXDLIN( 517)		bool _hx_tmp5;
HXDLIN( 517)		bool _hx_tmp6;
HXDLIN( 517)		if ((x >= 0)) {
HXDLIN( 517)			_hx_tmp6 = (y >= 0);
            		}
            		else {
HXDLIN( 517)			_hx_tmp6 = false;
            		}
HXDLIN( 517)		if (_hx_tmp6) {
HXDLIN( 517)			_hx_tmp5 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            		}
            		else {
HXDLIN( 517)			_hx_tmp5 = false;
            		}
HXDLIN( 517)		if (_hx_tmp5) {
HXDLIN( 517)			_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXDLIN( 517)			_hx_tmp4 = false;
            		}
HXDLIN( 517)		if (!(_hx_tmp4)) {
HXDLIN( 517)			::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 517)			int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 517)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            		}
            		else {
HXDLIN( 517)			bool _hx_tmp8;
HXDLIN( 517)			bool _hx_tmp9;
HXDLIN( 517)			bool _hx_tmp10;
HXDLIN( 517)			bool _hx_tmp11;
HXDLIN( 517)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 517)			if (((( (int)(image->b->__get(pos)) ) | (( (int)(image->b->__get((pos + 1))) ) << 8)) == 0)) {
HXDLIN( 517)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)				_hx_tmp11 = ((( (int)(image->b->__get(pos1)) ) | (( (int)(image->b->__get((pos1 + 1))) ) << 8)) != 0);
            			}
            			else {
HXDLIN( 517)				_hx_tmp11 = true;
            			}
HXDLIN( 517)			if (!(_hx_tmp11)) {
HXDLIN( 517)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 517)				_hx_tmp10 = ((( (int)(image->b->__get(pos2)) ) | (( (int)(image->b->__get((pos2 + 1))) ) << 8)) != 0);
            			}
            			else {
HXDLIN( 517)				_hx_tmp10 = true;
            			}
HXDLIN( 517)			if (!(_hx_tmp10)) {
HXDLIN( 517)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)				_hx_tmp9 = ((( (int)(image->b->__get(pos3)) ) | (( (int)(image->b->__get((pos3 + 1))) ) << 8)) != 0);
            			}
            			else {
HXDLIN( 517)				_hx_tmp9 = true;
            			}
HXDLIN( 517)			if (!(_hx_tmp9)) {
HXDLIN( 517)				_hx_tmp8 = (image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            			}
            			else {
HXDLIN( 517)				_hx_tmp8 = true;
            			}
HXDLIN( 517)			if (_hx_tmp8) {
HXDLIN( 517)				 ::vision::ds::ImageView v = null();
HXDLIN( 517)				bool _hx_tmp12;
HXDLIN( 517)				bool _hx_tmp13;
HXDLIN( 517)				bool _hx_tmp14;
HXDLIN( 517)				bool _hx_tmp15;
HXDLIN( 517)				bool _hx_tmp16;
HXDLIN( 517)				bool _hx_tmp17;
HXDLIN( 517)				int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 517)				if (((( (int)(image->b->__get(pos4)) ) | (( (int)(image->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXDLIN( 517)					int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)					_hx_tmp17 = ((( (int)(image->b->__get(pos5)) ) | (( (int)(image->b->__get((pos5 + 1))) ) << 8)) != 0);
            				}
            				else {
HXDLIN( 517)					_hx_tmp17 = true;
            				}
HXDLIN( 517)				if (!(_hx_tmp17)) {
HXDLIN( 517)					int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 517)					_hx_tmp16 = ((( (int)(image->b->__get(pos6)) ) | (( (int)(image->b->__get((pos6 + 1))) ) << 8)) != 0);
            				}
            				else {
HXDLIN( 517)					_hx_tmp16 = true;
            				}
HXDLIN( 517)				if (!(_hx_tmp16)) {
HXDLIN( 517)					int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)					_hx_tmp15 = ((( (int)(image->b->__get(pos7)) ) | (( (int)(image->b->__get((pos7 + 1))) ) << 8)) != 0);
            				}
            				else {
HXDLIN( 517)					_hx_tmp15 = true;
            				}
HXDLIN( 517)				if (!(_hx_tmp15)) {
HXDLIN( 517)					_hx_tmp14 = (image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXDLIN( 517)					_hx_tmp14 = true;
            				}
HXDLIN( 517)				if (!(_hx_tmp14)) {
HXDLIN( 517)					_hx_tmp13 = ::hx::IsNull( v );
            				}
            				else {
HXDLIN( 517)					_hx_tmp13 = false;
            				}
HXDLIN( 517)				if (_hx_tmp13) {
HXDLIN( 517)					bool _hx_tmp18;
HXDLIN( 517)					bool _hx_tmp19;
HXDLIN( 517)					if ((x >= 0)) {
HXDLIN( 517)						_hx_tmp19 = (y >= 0);
            					}
            					else {
HXDLIN( 517)						_hx_tmp19 = false;
            					}
HXDLIN( 517)					if (_hx_tmp19) {
HXDLIN( 517)						_hx_tmp18 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            					}
            					else {
HXDLIN( 517)						_hx_tmp18 = false;
            					}
HXDLIN( 517)					if (_hx_tmp18) {
HXDLIN( 517)						_hx_tmp12 = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXDLIN( 517)						_hx_tmp12 = false;
            					}
            				}
            				else {
HXDLIN( 517)					bool has = false;
HXDLIN( 517)					 ::vision::ds::ImageView view;
HXDLIN( 517)					if (::hx::IsNotNull( v )) {
HXDLIN( 517)						view = v;
            					}
            					else {
HXDLIN( 517)						int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 517)						int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)						int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 517)						int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 517)						view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(image->b->__get(pos8)) ) | (( (int)(image->b->__get((pos8 + 1))) ) << 8)),(( (int)(image->b->__get(pos9)) ) | (( (int)(image->b->__get((pos9 + 1))) ) << 8)),(( (int)(image->b->__get(pos10)) ) | (( (int)(image->b->__get((pos10 + 1))) ) << 8)),(( (int)(image->b->__get(pos11)) ) | (( (int)(image->b->__get((pos11 + 1))) ) << 8)),image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            					}
HXDLIN( 517)					switch((int)(view->shape)){
            						case (int)0: {
HXDLIN( 517)							bool has1;
HXDLIN( 517)							bool has2;
HXDLIN( 517)							if ((x < (view->x + view->width))) {
HXDLIN( 517)								has2 = (y < (view->y + view->height));
            							}
            							else {
HXDLIN( 517)								has2 = false;
            							}
HXDLIN( 517)							if (has2) {
HXDLIN( 517)								has1 = (x >= view->x);
            							}
            							else {
HXDLIN( 517)								has1 = false;
            							}
HXDLIN( 517)							if (has1) {
HXDLIN( 517)								has = (y >= view->y);
            							}
            							else {
HXDLIN( 517)								has = false;
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN( 517)							bool has3;
HXDLIN( 517)							bool has4;
HXDLIN( 517)							bool has5;
HXDLIN( 517)							if ((x < (view->x + view->width))) {
HXDLIN( 517)								has5 = (y < (view->y + view->height));
            							}
            							else {
HXDLIN( 517)								has5 = false;
            							}
HXDLIN( 517)							if (has5) {
HXDLIN( 517)								has4 = (x >= view->x);
            							}
            							else {
HXDLIN( 517)								has4 = false;
            							}
HXDLIN( 517)							if (has4) {
HXDLIN( 517)								has3 = (y >= view->y);
            							}
            							else {
HXDLIN( 517)								has3 = false;
            							}
HXLINE(1400)							has = !(has3);
            						}
            						break;
            						case (int)2: case (int)3: {
HXDLIN( 517)							if ((view->width > view->height)) {
HXDLIN( 517)								Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 517)								Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 517)								Float c1 = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 517)								Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c1);
HXDLIN( 517)								Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 517)								Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c1);
HXDLIN( 517)								Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 517)								::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 517)								Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 517)								Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 517)								Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 517)								Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 517)								Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)								has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 517)								if ((view->shape == 3)) {
HXLINE(1416)									has = !(has);
            								}
            							}
            							else {
HXDLIN( 517)								if ((view->height > view->width)) {
HXDLIN( 517)									Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 517)									Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 517)									Float c2 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 517)									Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 517)									Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c2);
HXDLIN( 517)									Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 517)									Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c2);
HXDLIN( 517)									::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 517)									Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 517)									Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 517)									Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 517)									Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 517)									Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)									has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 517)									if ((view->shape == 3)) {
HXLINE(1425)										has = !(has);
            									}
            								}
            								else {
HXDLIN( 517)									Float point1_x = ( (Float)(x) );
HXDLIN( 517)									Float point1_y = ( (Float)(y) );
HXDLIN( 517)									Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 517)									Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 517)									Float x5 = (point2_x - point1_x);
HXDLIN( 517)									Float y5 = (point2_y - point1_y);
HXLINE(1428)									has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 517)									if ((view->shape == 3)) {
HXLINE(1429)										has = !(has);
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1401)							has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            						}
            						break;
            						case (int)5: {
HXLINE(1402)							has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            						}
            						break;
            					}
HXLINE( 517)					_hx_tmp12 = has;
            				}
HXDLIN( 517)				if (_hx_tmp12) {
HXDLIN( 517)					int position1 = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 517)					position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 517)					image->b[position1] = ( (unsigned char)(((c >> 24) & 255)) );
HXDLIN( 517)					image->b[(position1 + 1)] = ( (unsigned char)(((c >> 16) & 255)) );
HXDLIN( 517)					image->b[(position1 + 2)] = ( (unsigned char)(((c >> 8) & 255)) );
HXDLIN( 517)					image->b[(position1 + 3)] = ( (unsigned char)((c & 255)) );
            				}
            			}
            			else {
HXDLIN( 517)				int position2 = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 517)				position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 517)				image->b[position2] = ( (unsigned char)(((c >> 24) & 255)) );
HXDLIN( 517)				image->b[(position2 + 1)] = ( (unsigned char)(((c >> 16) & 255)) );
HXDLIN( 517)				image->b[(position2 + 2)] = ( (unsigned char)(((c >> 8) & 255)) );
HXDLIN( 517)				image->b[(position2 + 3)] = ( (unsigned char)((c & 255)) );
            			}
            		}
HXDLIN( 517)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,copyPixelTo,return )

 ::haxe::io::Bytes Image_Impl__obj::getImagePortion( ::haxe::io::Bytes this1, ::vision::ds::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_528_getImagePortion)
HXLINE( 529)		int width = rect->width;
HXDLIN( 529)		int length = (((width * rect->height) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 529)		 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN( 529)		this2->fill(0,length,0);
HXDLIN( 529)		 ::haxe::io::Bytes this3 = this2;
HXDLIN( 529)		{
HXLINE( 529)			this3->b[0] = ( (unsigned char)(width) );
HXDLIN( 529)			this3->b[1] = ( (unsigned char)((width >> 8)) );
            		}
HXDLIN( 529)		{
HXLINE( 529)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 529)			this3->b[pos] = ( (unsigned char)(0) );
HXDLIN( 529)			this3->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN( 529)		{
HXLINE( 529)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 529)			this3->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 529)			this3->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN( 529)		{
HXLINE( 529)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 529)			this3->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 529)			this3->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN( 529)		{
HXLINE( 529)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 529)			this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 529)			this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN( 529)		this3->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXDLIN( 529)		int i = ::vision::ds::_Image::Image_Impl__obj::OFFSET;
HXDLIN( 529)		while((i < this3->length)){
HXLINE( 529)			this3->b[i] = ( (unsigned char)(((0 >> 24) & 255)) );
HXDLIN( 529)			this3->b[(i + 1)] = ( (unsigned char)(((0 >> 16) & 255)) );
HXDLIN( 529)			this3->b[(i + 2)] = ( (unsigned char)(((0 >> 8) & 255)) );
HXDLIN( 529)			this3->b[(i + 3)] = ( (unsigned char)((0 & 255)) );
HXDLIN( 529)			i = (i + 4);
            		}
HXDLIN( 529)		 ::haxe::io::Bytes subImage = this3;
HXLINE( 530)		{
HXLINE( 530)			int _g = rect->x;
HXDLIN( 530)			int _g1 = (rect->x + rect->width);
HXDLIN( 530)			while((_g < _g1)){
HXLINE( 530)				_g = (_g + 1);
HXDLIN( 530)				int x = (_g - 1);
HXLINE( 531)				{
HXLINE( 531)					int _g2 = rect->y;
HXDLIN( 531)					int _g3 = (rect->y + rect->height);
HXDLIN( 531)					while((_g2 < _g3)){
HXLINE( 531)						_g2 = (_g2 + 1);
HXDLIN( 531)						int y = (_g2 - 1);
HXLINE( 532)						{
HXLINE( 532)							int x1 = (x - rect->x);
HXDLIN( 532)							int y1 = (y - rect->y);
HXDLIN( 532)							bool _hx_tmp;
HXDLIN( 532)							bool _hx_tmp1;
HXDLIN( 532)							bool _hx_tmp2;
HXDLIN( 532)							if ((x >= 0)) {
HXLINE( 532)								_hx_tmp2 = (y >= 0);
            							}
            							else {
HXLINE( 532)								_hx_tmp2 = false;
            							}
HXDLIN( 532)							if (_hx_tmp2) {
HXLINE( 532)								_hx_tmp1 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 532)								_hx_tmp1 = false;
            							}
HXDLIN( 532)							if (_hx_tmp1) {
HXLINE( 532)								_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 532)								_hx_tmp = false;
            							}
HXDLIN( 532)							if (!(_hx_tmp)) {
HXLINE( 532)								::cpp::Int64 this4 = _hx_int64_make(x,y);
HXDLIN( 532)								int _hx_tmp3 = _hx_int64_high(this4);
HXDLIN( 532)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this4))));
            							}
HXDLIN( 532)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 532)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 532)							int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN( 532)							bool _hx_tmp4;
HXDLIN( 532)							bool _hx_tmp5;
HXDLIN( 532)							bool _hx_tmp6;
HXDLIN( 532)							if ((x1 >= 0)) {
HXLINE( 532)								_hx_tmp6 = (y1 >= 0);
            							}
            							else {
HXLINE( 532)								_hx_tmp6 = false;
            							}
HXDLIN( 532)							if (_hx_tmp6) {
HXLINE( 532)								_hx_tmp5 = (x1 < (( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 532)								_hx_tmp5 = false;
            							}
HXDLIN( 532)							if (_hx_tmp5) {
HXLINE( 532)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((subImage->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 532)								_hx_tmp4 = false;
            							}
HXDLIN( 532)							if (!(_hx_tmp4)) {
HXLINE( 532)								::cpp::Int64 this5 = _hx_int64_make(x1,y1);
HXDLIN( 532)								int _hx_tmp7 = _hx_int64_high(this5);
HXDLIN( 532)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,subImage, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this5))));
            							}
            							else {
HXLINE( 532)								bool _hx_tmp8;
HXDLIN( 532)								bool _hx_tmp9;
HXDLIN( 532)								bool _hx_tmp10;
HXDLIN( 532)								bool _hx_tmp11;
HXDLIN( 532)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 532)								if (((( (int)(subImage->b->__get(pos4)) ) | (( (int)(subImage->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 532)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)									_hx_tmp11 = ((( (int)(subImage->b->__get(pos5)) ) | (( (int)(subImage->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 532)									_hx_tmp11 = true;
            								}
HXDLIN( 532)								if (!(_hx_tmp11)) {
HXLINE( 532)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 532)									_hx_tmp10 = ((( (int)(subImage->b->__get(pos6)) ) | (( (int)(subImage->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 532)									_hx_tmp10 = true;
            								}
HXDLIN( 532)								if (!(_hx_tmp10)) {
HXLINE( 532)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)									_hx_tmp9 = ((( (int)(subImage->b->__get(pos7)) ) | (( (int)(subImage->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 532)									_hx_tmp9 = true;
            								}
HXDLIN( 532)								if (!(_hx_tmp9)) {
HXLINE( 532)									_hx_tmp8 = (subImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 532)									_hx_tmp8 = true;
            								}
HXDLIN( 532)								if (_hx_tmp8) {
HXLINE( 532)									 ::vision::ds::ImageView v = null();
HXDLIN( 532)									bool _hx_tmp12;
HXDLIN( 532)									bool _hx_tmp13;
HXDLIN( 532)									bool _hx_tmp14;
HXDLIN( 532)									bool _hx_tmp15;
HXDLIN( 532)									bool _hx_tmp16;
HXDLIN( 532)									bool _hx_tmp17;
HXDLIN( 532)									int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 532)									if (((( (int)(subImage->b->__get(pos8)) ) | (( (int)(subImage->b->__get((pos8 + 1))) ) << 8)) == 0)) {
HXLINE( 532)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)										_hx_tmp17 = ((( (int)(subImage->b->__get(pos9)) ) | (( (int)(subImage->b->__get((pos9 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE( 532)										_hx_tmp17 = true;
            									}
HXDLIN( 532)									if (!(_hx_tmp17)) {
HXLINE( 532)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 532)										_hx_tmp16 = ((( (int)(subImage->b->__get(pos10)) ) | (( (int)(subImage->b->__get((pos10 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE( 532)										_hx_tmp16 = true;
            									}
HXDLIN( 532)									if (!(_hx_tmp16)) {
HXLINE( 532)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)										_hx_tmp15 = ((( (int)(subImage->b->__get(pos11)) ) | (( (int)(subImage->b->__get((pos11 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE( 532)										_hx_tmp15 = true;
            									}
HXDLIN( 532)									if (!(_hx_tmp15)) {
HXLINE( 532)										_hx_tmp14 = (subImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE( 532)										_hx_tmp14 = true;
            									}
HXDLIN( 532)									if (!(_hx_tmp14)) {
HXLINE( 532)										_hx_tmp13 = ::hx::IsNull( v );
            									}
            									else {
HXLINE( 532)										_hx_tmp13 = false;
            									}
HXDLIN( 532)									if (_hx_tmp13) {
HXLINE( 532)										bool _hx_tmp18;
HXDLIN( 532)										bool _hx_tmp19;
HXDLIN( 532)										if ((x1 >= 0)) {
HXLINE( 532)											_hx_tmp19 = (y1 >= 0);
            										}
            										else {
HXLINE( 532)											_hx_tmp19 = false;
            										}
HXDLIN( 532)										if (_hx_tmp19) {
HXLINE( 532)											_hx_tmp18 = (x1 < (( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE( 532)											_hx_tmp18 = false;
            										}
HXDLIN( 532)										if (_hx_tmp18) {
HXLINE( 532)											_hx_tmp12 = (y1 < ::Math_obj::ceil((( (Float)((subImage->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE( 532)											_hx_tmp12 = false;
            										}
            									}
            									else {
HXLINE( 532)										bool has = false;
HXDLIN( 532)										 ::vision::ds::ImageView view;
HXDLIN( 532)										if (::hx::IsNotNull( v )) {
HXLINE( 532)											view = v;
            										}
            										else {
HXLINE( 532)											int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 532)											int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)											int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 532)											int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 532)											view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(subImage->b->__get(pos12)) ) | (( (int)(subImage->b->__get((pos12 + 1))) ) << 8)),(( (int)(subImage->b->__get(pos13)) ) | (( (int)(subImage->b->__get((pos13 + 1))) ) << 8)),(( (int)(subImage->b->__get(pos14)) ) | (( (int)(subImage->b->__get((pos14 + 1))) ) << 8)),(( (int)(subImage->b->__get(pos15)) ) | (( (int)(subImage->b->__get((pos15 + 1))) ) << 8)),subImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN( 532)										switch((int)(view->shape)){
            											case (int)0: {
HXLINE( 532)												bool has1;
HXDLIN( 532)												bool has2;
HXDLIN( 532)												if ((x1 < (view->x + view->width))) {
HXLINE( 532)													has2 = (y1 < (view->y + view->height));
            												}
            												else {
HXLINE( 532)													has2 = false;
            												}
HXDLIN( 532)												if (has2) {
HXLINE( 532)													has1 = (x1 >= view->x);
            												}
            												else {
HXLINE( 532)													has1 = false;
            												}
HXDLIN( 532)												if (has1) {
HXLINE( 532)													has = (y1 >= view->y);
            												}
            												else {
HXLINE( 532)													has = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 532)												bool has3;
HXDLIN( 532)												bool has4;
HXDLIN( 532)												bool has5;
HXDLIN( 532)												if ((x1 < (view->x + view->width))) {
HXLINE( 532)													has5 = (y1 < (view->y + view->height));
            												}
            												else {
HXLINE( 532)													has5 = false;
            												}
HXDLIN( 532)												if (has5) {
HXLINE( 532)													has4 = (x1 >= view->x);
            												}
            												else {
HXLINE( 532)													has4 = false;
            												}
HXDLIN( 532)												if (has4) {
HXLINE( 532)													has3 = (y1 >= view->y);
            												}
            												else {
HXLINE( 532)													has3 = false;
            												}
HXLINE(1400)												has = !(has3);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE( 532)												if ((view->width > view->height)) {
HXLINE( 532)													Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 532)													Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 532)													Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 532)													Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 532)													Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 532)													Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 532)													Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 532)													::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN( 532)													Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 532)													Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 532)													Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 532)													Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 532)													Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)													has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 532)													if ((view->shape == 3)) {
HXLINE(1416)														has = !(has);
            													}
            												}
            												else {
HXLINE( 532)													if ((view->height > view->width)) {
HXLINE( 532)														Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 532)														Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 532)														Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 532)														Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 532)														Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 532)														Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 532)														Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 532)														::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN( 532)														Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 532)														Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 532)														Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 532)														Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 532)														Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)														has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 532)														if ((view->shape == 3)) {
HXLINE(1425)															has = !(has);
            														}
            													}
            													else {
HXLINE( 532)														Float point1_x = ( (Float)(x1) );
HXDLIN( 532)														Float point1_y = ( (Float)(y1) );
HXDLIN( 532)														Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 532)														Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 532)														Float x6 = (point2_x - point1_x);
HXDLIN( 532)														Float y6 = (point2_y - point1_y);
HXLINE(1428)														has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 532)														if ((view->shape == 3)) {
HXLINE(1429)															has = !(has);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE( 532)										_hx_tmp12 = has;
            									}
HXDLIN( 532)									if (_hx_tmp12) {
HXLINE( 532)										int position1 = (((y1 * (( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 532)										position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 532)										subImage->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 532)										subImage->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 532)										subImage->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 532)										subImage->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            									}
            								}
            								else {
HXLINE( 532)									int position2 = (((y1 * (( (int)(subImage->b->__get(0)) ) | (( (int)(subImage->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 532)									position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 532)									subImage->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 532)									subImage->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 532)									subImage->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 532)									subImage->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 535)		return subImage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,getImagePortion,return )

void Image_Impl__obj::setImagePortion( ::haxe::io::Bytes this1, ::vision::ds::Rectangle rect, ::haxe::io::Bytes image){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_547_setImagePortion)
HXDLIN( 547)		int _g = rect->x;
HXDLIN( 547)		int _g1 = (rect->x + rect->width);
HXDLIN( 547)		while((_g < _g1)){
HXDLIN( 547)			_g = (_g + 1);
HXDLIN( 547)			int x = (_g - 1);
HXLINE( 548)			{
HXLINE( 548)				int _g2 = rect->y;
HXDLIN( 548)				int _g3 = (rect->y + rect->height);
HXDLIN( 548)				while((_g2 < _g3)){
HXLINE( 548)					_g2 = (_g2 + 1);
HXDLIN( 548)					int y = (_g2 - 1);
HXLINE( 549)					{
HXLINE( 549)						int x1 = (x - rect->x);
HXDLIN( 549)						int y1 = (y - rect->y);
HXDLIN( 549)						bool _hx_tmp;
HXDLIN( 549)						bool _hx_tmp1;
HXDLIN( 549)						bool _hx_tmp2;
HXDLIN( 549)						if ((x1 >= 0)) {
HXLINE( 549)							_hx_tmp2 = (y1 >= 0);
            						}
            						else {
HXLINE( 549)							_hx_tmp2 = false;
            						}
HXDLIN( 549)						if (_hx_tmp2) {
HXLINE( 549)							_hx_tmp1 = (x1 < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 549)							_hx_tmp1 = false;
            						}
HXDLIN( 549)						if (_hx_tmp1) {
HXLINE( 549)							_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 549)							_hx_tmp = false;
            						}
HXDLIN( 549)						if (!(_hx_tmp)) {
HXLINE( 549)							::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 549)							int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 549)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            						}
HXDLIN( 549)						int position = (((y1 * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 549)						position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 549)						int color = ((((( (int)(image->b->__get(position)) ) << 24) | (( (int)(image->b->__get((position + 1))) ) << 16)) | (( (int)(image->b->__get((position + 2))) ) << 8)) | ( (int)(image->b->__get((position + 3))) ));
HXDLIN( 549)						bool _hx_tmp4;
HXDLIN( 549)						bool _hx_tmp5;
HXDLIN( 549)						bool _hx_tmp6;
HXDLIN( 549)						if ((x >= 0)) {
HXLINE( 549)							_hx_tmp6 = (y >= 0);
            						}
            						else {
HXLINE( 549)							_hx_tmp6 = false;
            						}
HXDLIN( 549)						if (_hx_tmp6) {
HXLINE( 549)							_hx_tmp5 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 549)							_hx_tmp5 = false;
            						}
HXDLIN( 549)						if (_hx_tmp5) {
HXLINE( 549)							_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 549)							_hx_tmp4 = false;
            						}
HXDLIN( 549)						if (!(_hx_tmp4)) {
HXLINE( 549)							::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 549)							int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN( 549)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            						}
            						else {
HXLINE( 549)							bool _hx_tmp8;
HXDLIN( 549)							bool _hx_tmp9;
HXDLIN( 549)							bool _hx_tmp10;
HXDLIN( 549)							bool _hx_tmp11;
HXDLIN( 549)							int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 549)							if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 549)								int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)								_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 549)								_hx_tmp11 = true;
            							}
HXDLIN( 549)							if (!(_hx_tmp11)) {
HXLINE( 549)								int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 549)								_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 549)								_hx_tmp10 = true;
            							}
HXDLIN( 549)							if (!(_hx_tmp10)) {
HXLINE( 549)								int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)								_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 549)								_hx_tmp9 = true;
            							}
HXDLIN( 549)							if (!(_hx_tmp9)) {
HXLINE( 549)								_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 549)								_hx_tmp8 = true;
            							}
HXDLIN( 549)							if (_hx_tmp8) {
HXLINE( 549)								 ::vision::ds::ImageView v = null();
HXDLIN( 549)								bool _hx_tmp12;
HXDLIN( 549)								bool _hx_tmp13;
HXDLIN( 549)								bool _hx_tmp14;
HXDLIN( 549)								bool _hx_tmp15;
HXDLIN( 549)								bool _hx_tmp16;
HXDLIN( 549)								bool _hx_tmp17;
HXDLIN( 549)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 549)								if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 549)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)									_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 549)									_hx_tmp17 = true;
            								}
HXDLIN( 549)								if (!(_hx_tmp17)) {
HXLINE( 549)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 549)									_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 549)									_hx_tmp16 = true;
            								}
HXDLIN( 549)								if (!(_hx_tmp16)) {
HXLINE( 549)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)									_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 549)									_hx_tmp15 = true;
            								}
HXDLIN( 549)								if (!(_hx_tmp15)) {
HXLINE( 549)									_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 549)									_hx_tmp14 = true;
            								}
HXDLIN( 549)								if (!(_hx_tmp14)) {
HXLINE( 549)									_hx_tmp13 = ::hx::IsNull( v );
            								}
            								else {
HXLINE( 549)									_hx_tmp13 = false;
            								}
HXDLIN( 549)								if (_hx_tmp13) {
HXLINE( 549)									bool _hx_tmp18;
HXDLIN( 549)									bool _hx_tmp19;
HXDLIN( 549)									if ((x >= 0)) {
HXLINE( 549)										_hx_tmp19 = (y >= 0);
            									}
            									else {
HXLINE( 549)										_hx_tmp19 = false;
            									}
HXDLIN( 549)									if (_hx_tmp19) {
HXLINE( 549)										_hx_tmp18 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 549)										_hx_tmp18 = false;
            									}
HXDLIN( 549)									if (_hx_tmp18) {
HXLINE( 549)										_hx_tmp12 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 549)										_hx_tmp12 = false;
            									}
            								}
            								else {
HXLINE( 549)									bool has = false;
HXDLIN( 549)									 ::vision::ds::ImageView view;
HXDLIN( 549)									if (::hx::IsNotNull( v )) {
HXLINE( 549)										view = v;
            									}
            									else {
HXLINE( 549)										int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 549)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 549)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 549)										view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 549)									switch((int)(view->shape)){
            										case (int)0: {
HXLINE( 549)											bool has1;
HXDLIN( 549)											bool has2;
HXDLIN( 549)											if ((x < (view->x + view->width))) {
HXLINE( 549)												has2 = (y < (view->y + view->height));
            											}
            											else {
HXLINE( 549)												has2 = false;
            											}
HXDLIN( 549)											if (has2) {
HXLINE( 549)												has1 = (x >= view->x);
            											}
            											else {
HXLINE( 549)												has1 = false;
            											}
HXDLIN( 549)											if (has1) {
HXLINE( 549)												has = (y >= view->y);
            											}
            											else {
HXLINE( 549)												has = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 549)											bool has3;
HXDLIN( 549)											bool has4;
HXDLIN( 549)											bool has5;
HXDLIN( 549)											if ((x < (view->x + view->width))) {
HXLINE( 549)												has5 = (y < (view->y + view->height));
            											}
            											else {
HXLINE( 549)												has5 = false;
            											}
HXDLIN( 549)											if (has5) {
HXLINE( 549)												has4 = (x >= view->x);
            											}
            											else {
HXLINE( 549)												has4 = false;
            											}
HXDLIN( 549)											if (has4) {
HXLINE( 549)												has3 = (y >= view->y);
            											}
            											else {
HXLINE( 549)												has3 = false;
            											}
HXLINE(1400)											has = !(has3);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 549)											if ((view->width > view->height)) {
HXLINE( 549)												Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 549)												Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 549)												Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 549)												Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 549)												Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 549)												Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 549)												Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 549)												::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 549)												Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 549)												Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 549)												Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 549)												Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 549)												Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)												has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 549)												if ((view->shape == 3)) {
HXLINE(1416)													has = !(has);
            												}
            											}
            											else {
HXLINE( 549)												if ((view->height > view->width)) {
HXLINE( 549)													Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 549)													Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 549)													Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 549)													Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 549)													Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 549)													Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 549)													Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 549)													::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 549)													Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 549)													Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 549)													Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 549)													Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 549)													Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)													has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 549)													if ((view->shape == 3)) {
HXLINE(1425)														has = !(has);
            													}
            												}
            												else {
HXLINE( 549)													Float point1_x = ( (Float)(x) );
HXDLIN( 549)													Float point1_y = ( (Float)(y) );
HXDLIN( 549)													Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 549)													Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 549)													Float x6 = (point2_x - point1_x);
HXDLIN( 549)													Float y6 = (point2_y - point1_y);
HXLINE(1428)													has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 549)													if ((view->shape == 3)) {
HXLINE(1429)														has = !(has);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 549)									_hx_tmp12 = has;
            								}
HXDLIN( 549)								if (_hx_tmp12) {
HXLINE( 549)									int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 549)									position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 549)									this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 549)									this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 549)									this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 549)									this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            							else {
HXLINE( 549)								int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 549)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 549)								this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 549)								this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 549)								this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 549)								this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,setImagePortion,(void))

void Image_Impl__obj::drawLine( ::haxe::io::Bytes this1,int x1,int y1,int x2,int y2,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_565_drawLine)
HXLINE( 566)		Float dx = ::Math_obj::abs(( (Float)((x2 - x1)) ));
HXLINE( 567)		Float dy = ::Math_obj::abs(( (Float)((y2 - y1)) ));
HXLINE( 568)		int sx;
HXDLIN( 568)		if ((x1 < x2)) {
HXLINE( 568)			sx = 1;
            		}
            		else {
HXLINE( 568)			sx = -1;
            		}
HXLINE( 569)		int sy;
HXDLIN( 569)		if ((y1 < y2)) {
HXLINE( 569)			sy = 1;
            		}
            		else {
HXLINE( 569)			sy = -1;
            		}
HXLINE( 570)		Float err = (dx - dy);
HXLINE( 571)		int safety = 0;
HXLINE( 572)		while(true){
HXLINE( 572)			safety = (safety + 1);
HXDLIN( 572)			if (!(((safety - 1) < 10000))) {
HXLINE( 572)				goto _hx_goto_159;
            			}
HXLINE( 573)			{
HXLINE( 573)				int x = x1;
HXDLIN( 573)				int y = y1;
HXDLIN( 573)				int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 573)				::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x)->init(1,0);
HXDLIN( 573)				int max = values->__get(0);
HXDLIN( 573)				{
HXLINE( 573)					int _g = 0;
HXDLIN( 573)					int _g1 = values->length;
HXDLIN( 573)					while((_g < _g1)){
HXLINE( 573)						_g = (_g + 1);
HXDLIN( 573)						int i = (_g - 1);
HXDLIN( 573)						if ((values->__get(i) > max)) {
HXLINE( 688)							max = values->__get(i);
            						}
            					}
            				}
HXLINE( 573)				::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 573)				int min = values1->__get(0);
HXDLIN( 573)				int _g2 = 0;
HXDLIN( 573)				int _g3 = values1->length;
HXDLIN( 573)				while((_g2 < _g3)){
HXLINE( 573)					_g2 = (_g2 + 1);
HXDLIN( 573)					int i1 = (_g2 - 1);
HXDLIN( 573)					if ((values1->__get(i1) < min)) {
HXLINE( 652)						min = values1->__get(i1);
            					}
            				}
HXLINE( 573)				x = min;
HXDLIN( 573)				int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 573)				::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y)->init(1,0);
HXDLIN( 573)				int max1 = values2->__get(0);
HXDLIN( 573)				{
HXLINE( 573)					int _g4 = 0;
HXDLIN( 573)					int _g5 = values2->length;
HXDLIN( 573)					while((_g4 < _g5)){
HXLINE( 573)						_g4 = (_g4 + 1);
HXDLIN( 573)						int i2 = (_g4 - 1);
HXDLIN( 573)						if ((values2->__get(i2) > max1)) {
HXLINE( 688)							max1 = values2->__get(i2);
            						}
            					}
            				}
HXLINE( 573)				::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 573)				int min1 = values3->__get(0);
HXDLIN( 573)				int _g6 = 0;
HXDLIN( 573)				int _g7 = values3->length;
HXDLIN( 573)				while((_g6 < _g7)){
HXLINE( 573)					_g6 = (_g6 + 1);
HXDLIN( 573)					int i3 = (_g6 - 1);
HXDLIN( 573)					if ((values3->__get(i3) < min1)) {
HXLINE( 652)						min1 = values3->__get(i3);
            					}
            				}
HXLINE( 573)				y = min1;
HXDLIN( 573)				bool _hx_tmp;
HXDLIN( 573)				bool _hx_tmp1;
HXDLIN( 573)				bool _hx_tmp2;
HXDLIN( 573)				bool _hx_tmp3;
HXDLIN( 573)				int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 573)				if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 573)					int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)					_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 573)					_hx_tmp3 = true;
            				}
HXDLIN( 573)				if (!(_hx_tmp3)) {
HXLINE( 573)					int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 573)					_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 573)					_hx_tmp2 = true;
            				}
HXDLIN( 573)				if (!(_hx_tmp2)) {
HXLINE( 573)					int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)					_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            				}
            				else {
HXLINE( 573)					_hx_tmp1 = true;
            				}
HXDLIN( 573)				if (!(_hx_tmp1)) {
HXLINE( 573)					_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            				}
            				else {
HXLINE( 573)					_hx_tmp = true;
            				}
HXDLIN( 573)				if (_hx_tmp) {
HXLINE( 573)					 ::vision::ds::ImageView v = null();
HXDLIN( 573)					bool _hx_tmp4;
HXDLIN( 573)					bool _hx_tmp5;
HXDLIN( 573)					bool _hx_tmp6;
HXDLIN( 573)					bool _hx_tmp7;
HXDLIN( 573)					bool _hx_tmp8;
HXDLIN( 573)					bool _hx_tmp9;
HXDLIN( 573)					int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 573)					if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 573)						int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)						_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 573)						_hx_tmp9 = true;
            					}
HXDLIN( 573)					if (!(_hx_tmp9)) {
HXLINE( 573)						int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 573)						_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 573)						_hx_tmp8 = true;
            					}
HXDLIN( 573)					if (!(_hx_tmp8)) {
HXLINE( 573)						int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)						_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 573)						_hx_tmp7 = true;
            					}
HXDLIN( 573)					if (!(_hx_tmp7)) {
HXLINE( 573)						_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 573)						_hx_tmp6 = true;
            					}
HXDLIN( 573)					if (!(_hx_tmp6)) {
HXLINE( 573)						_hx_tmp5 = ::hx::IsNull( v );
            					}
            					else {
HXLINE( 573)						_hx_tmp5 = false;
            					}
HXDLIN( 573)					if (_hx_tmp5) {
HXLINE( 573)						bool _hx_tmp10;
HXDLIN( 573)						bool _hx_tmp11;
HXDLIN( 573)						if ((x >= 0)) {
HXLINE( 573)							_hx_tmp11 = (y >= 0);
            						}
            						else {
HXLINE( 573)							_hx_tmp11 = false;
            						}
HXDLIN( 573)						if (_hx_tmp11) {
HXLINE( 573)							_hx_tmp10 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 573)							_hx_tmp10 = false;
            						}
HXDLIN( 573)						if (_hx_tmp10) {
HXLINE( 573)							_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 573)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 573)						bool has = false;
HXDLIN( 573)						 ::vision::ds::ImageView view;
HXDLIN( 573)						if (::hx::IsNotNull( v )) {
HXLINE( 573)							view = v;
            						}
            						else {
HXLINE( 573)							int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 573)							int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)							int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 573)							int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 573)							view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            						}
HXDLIN( 573)						switch((int)(view->shape)){
            							case (int)0: {
HXLINE( 573)								bool has1;
HXDLIN( 573)								bool has2;
HXDLIN( 573)								if ((x < (view->x + view->width))) {
HXLINE( 573)									has2 = (y < (view->y + view->height));
            								}
            								else {
HXLINE( 573)									has2 = false;
            								}
HXDLIN( 573)								if (has2) {
HXLINE( 573)									has1 = (x >= view->x);
            								}
            								else {
HXLINE( 573)									has1 = false;
            								}
HXDLIN( 573)								if (has1) {
HXLINE( 573)									has = (y >= view->y);
            								}
            								else {
HXLINE( 573)									has = false;
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 573)								bool has3;
HXDLIN( 573)								bool has4;
HXDLIN( 573)								bool has5;
HXDLIN( 573)								if ((x < (view->x + view->width))) {
HXLINE( 573)									has5 = (y < (view->y + view->height));
            								}
            								else {
HXLINE( 573)									has5 = false;
            								}
HXDLIN( 573)								if (has5) {
HXLINE( 573)									has4 = (x >= view->x);
            								}
            								else {
HXLINE( 573)									has4 = false;
            								}
HXDLIN( 573)								if (has4) {
HXLINE( 573)									has3 = (y >= view->y);
            								}
            								else {
HXLINE( 573)									has3 = false;
            								}
HXLINE(1400)								has = !(has3);
            							}
            							break;
            							case (int)2: case (int)3: {
HXLINE( 573)								if ((view->width > view->height)) {
HXLINE( 573)									Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 573)									Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 573)									Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 573)									Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 573)									Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 573)									Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 573)									Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 573)									::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 573)									Float x3 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 573)									Float y3 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 573)									Float has6 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 573)									Float x4 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 573)									Float y4 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)									has = ((has6 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->width);
HXLINE( 573)									if ((view->shape == 3)) {
HXLINE(1416)										has = !(has);
            									}
            								}
            								else {
HXLINE( 573)									if ((view->height > view->width)) {
HXLINE( 573)										Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 573)										Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 573)										Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 573)										Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 573)										Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 573)										Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 573)										Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 573)										::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 573)										Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 573)										Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 573)										Float has7 = ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)));
HXDLIN( 573)										Float x6 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 573)										Float y6 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)										has = ((has7 + ::Math_obj::sqrt(((x6 * x6) + (y6 * y6)))) <= view->height);
HXLINE( 573)										if ((view->shape == 3)) {
HXLINE(1425)											has = !(has);
            										}
            									}
            									else {
HXLINE( 573)										Float point1_x = ( (Float)(x) );
HXDLIN( 573)										Float point1_y = ( (Float)(y) );
HXDLIN( 573)										Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 573)										Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 573)										Float x7 = (point2_x - point1_x);
HXDLIN( 573)										Float y7 = (point2_y - point1_y);
HXLINE(1428)										has = (::Math_obj::sqrt(((x7 * x7) + (y7 * y7))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 573)										if ((view->shape == 3)) {
HXLINE(1429)											has = !(has);
            										}
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1401)								has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            							}
            							break;
            							case (int)5: {
HXLINE(1402)								has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            							}
            							break;
            						}
HXLINE( 573)						_hx_tmp4 = has;
            					}
HXDLIN( 573)					if (_hx_tmp4) {
HXLINE( 573)						int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 573)						position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 573)						this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 573)						this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 573)						this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 573)						this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            				else {
HXLINE( 573)					int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 573)					position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 573)					this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 573)					this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 573)					this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 573)					this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            				}
            			}
HXLINE( 574)			bool _hx_tmp12;
HXDLIN( 574)			if ((x1 == x2)) {
HXLINE( 574)				_hx_tmp12 = (y1 == y2);
            			}
            			else {
HXLINE( 574)				_hx_tmp12 = false;
            			}
HXDLIN( 574)			if (_hx_tmp12) {
HXLINE( 575)				goto _hx_goto_159;
            			}
HXLINE( 576)			Float e2 = (( (Float)(2) ) * err);
HXLINE( 577)			if ((e2 > -(dy))) {
HXLINE( 578)				err = (err - dy);
HXLINE( 579)				x1 = (x1 + sx);
            			}
HXLINE( 581)			if ((e2 < dx)) {
HXLINE( 582)				err = (err + dx);
HXLINE( 583)				y1 = (y1 + sy);
            			}
            		}
            		_hx_goto_159:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,drawLine,(void))

void Image_Impl__obj::drawRay2D( ::haxe::io::Bytes this1, ::vision::ds::Ray2D line,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_601_drawRay2D)
HXLINE( 602)		Float px = line->point->x;
HXDLIN( 602)		Float py = line->point->y;
HXDLIN( 602)		Float x;
HXDLIN( 602)		if ((px > 0)) {
HXLINE( 602)			x = (py - (line->slope * px));
            		}
            		else {
HXLINE( 602)			x = (py + (line->slope * px));
            		}
HXDLIN( 602)		Float p_x = ((( (Float)(0) ) - x) / line->slope);
HXDLIN( 602)		Float p_y = ( (Float)(0) );
HXDLIN( 602)		int x1 = ::Std_obj::_hx_int(p_x);
HXDLIN( 602)		::cpp::Int64 p1 = _hx_int64_make(x1,::Std_obj::_hx_int(p_y));
HXLINE( 603)		Float y = ( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) );
HXDLIN( 603)		Float px1 = line->point->x;
HXDLIN( 603)		Float py1 = line->point->y;
HXDLIN( 603)		Float x2;
HXDLIN( 603)		if ((px1 > 0)) {
HXLINE( 603)			x2 = (py1 - (line->slope * px1));
            		}
            		else {
HXLINE( 603)			x2 = (py1 + (line->slope * px1));
            		}
HXDLIN( 603)		Float p_x1 = ((y - x2) / line->slope);
HXDLIN( 603)		Float p_y1 = y;
HXDLIN( 603)		int x3 = ::Std_obj::_hx_int(p_x1);
HXDLIN( 603)		::cpp::Int64 p2 = _hx_int64_make(x3,::Std_obj::_hx_int(p_y1));
HXLINE( 604)		int x11 = _hx_int64_high(p1);
HXDLIN( 604)		int y1 = _hx_int64_low(p1);
HXDLIN( 604)		int x21 = _hx_int64_high(p2);
HXDLIN( 604)		int y2 = _hx_int64_low(p2);
HXLINE( 605)		Float dx = ::Math_obj::abs(( (Float)((x21 - x11)) ));
HXLINE( 606)		Float dy = ::Math_obj::abs(( (Float)((y2 - y1)) ));
HXLINE( 607)		int sx;
HXDLIN( 607)		if ((x11 < x21)) {
HXLINE( 607)			sx = 1;
            		}
            		else {
HXLINE( 607)			sx = -1;
            		}
HXLINE( 608)		int sy;
HXDLIN( 608)		if ((y1 < y2)) {
HXLINE( 608)			sy = 1;
            		}
            		else {
HXLINE( 608)			sy = -1;
            		}
HXLINE( 609)		Float err = (dx - dy);
HXLINE( 611)		int safetyNet = 0;
HXLINE( 612)		while(true){
HXLINE( 612)			safetyNet = (safetyNet + 1);
HXDLIN( 612)			if (!(((safetyNet - 1) <= 10000))) {
HXLINE( 612)				goto _hx_goto_165;
            			}
HXLINE( 613)			bool _hx_tmp;
HXDLIN( 613)			bool _hx_tmp1;
HXDLIN( 613)			bool _hx_tmp2;
HXDLIN( 613)			if ((x11 >= 0)) {
HXLINE( 613)				_hx_tmp2 = (y1 >= 0);
            			}
            			else {
HXLINE( 613)				_hx_tmp2 = false;
            			}
HXDLIN( 613)			if (_hx_tmp2) {
HXLINE( 613)				_hx_tmp1 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 613)				_hx_tmp1 = false;
            			}
HXDLIN( 613)			if (_hx_tmp1) {
HXLINE( 613)				_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 613)				_hx_tmp = false;
            			}
HXDLIN( 613)			if (_hx_tmp) {
HXLINE( 614)				bool _hx_tmp3;
HXDLIN( 614)				bool _hx_tmp4;
HXDLIN( 614)				bool _hx_tmp5;
HXDLIN( 614)				if ((x11 >= 0)) {
HXLINE( 614)					_hx_tmp5 = (y1 >= 0);
            				}
            				else {
HXLINE( 614)					_hx_tmp5 = false;
            				}
HXDLIN( 614)				if (_hx_tmp5) {
HXLINE( 614)					_hx_tmp4 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 614)					_hx_tmp4 = false;
            				}
HXDLIN( 614)				if (_hx_tmp4) {
HXLINE( 614)					_hx_tmp3 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 614)					_hx_tmp3 = false;
            				}
HXDLIN( 614)				if (!(_hx_tmp3)) {
HXLINE( 614)					::cpp::Int64 this2 = _hx_int64_make(x11,y1);
HXDLIN( 614)					int _hx_tmp6 = _hx_int64_high(this2);
HXDLIN( 614)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 614)					bool _hx_tmp7;
HXDLIN( 614)					bool _hx_tmp8;
HXDLIN( 614)					bool _hx_tmp9;
HXDLIN( 614)					bool _hx_tmp10;
HXDLIN( 614)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 614)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 614)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)						_hx_tmp10 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 614)						_hx_tmp10 = true;
            					}
HXDLIN( 614)					if (!(_hx_tmp10)) {
HXLINE( 614)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 614)						_hx_tmp9 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 614)						_hx_tmp9 = true;
            					}
HXDLIN( 614)					if (!(_hx_tmp9)) {
HXLINE( 614)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)						_hx_tmp8 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 614)						_hx_tmp8 = true;
            					}
HXDLIN( 614)					if (!(_hx_tmp8)) {
HXLINE( 614)						_hx_tmp7 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 614)						_hx_tmp7 = true;
            					}
HXDLIN( 614)					if (_hx_tmp7) {
HXLINE( 614)						 ::vision::ds::ImageView v = null();
HXDLIN( 614)						bool _hx_tmp11;
HXDLIN( 614)						bool _hx_tmp12;
HXDLIN( 614)						bool _hx_tmp13;
HXDLIN( 614)						bool _hx_tmp14;
HXDLIN( 614)						bool _hx_tmp15;
HXDLIN( 614)						bool _hx_tmp16;
HXDLIN( 614)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 614)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 614)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)							_hx_tmp16 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 614)							_hx_tmp16 = true;
            						}
HXDLIN( 614)						if (!(_hx_tmp16)) {
HXLINE( 614)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 614)							_hx_tmp15 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 614)							_hx_tmp15 = true;
            						}
HXDLIN( 614)						if (!(_hx_tmp15)) {
HXLINE( 614)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)							_hx_tmp14 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 614)							_hx_tmp14 = true;
            						}
HXDLIN( 614)						if (!(_hx_tmp14)) {
HXLINE( 614)							_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 614)							_hx_tmp13 = true;
            						}
HXDLIN( 614)						if (!(_hx_tmp13)) {
HXLINE( 614)							_hx_tmp12 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 614)							_hx_tmp12 = false;
            						}
HXDLIN( 614)						if (_hx_tmp12) {
HXLINE( 614)							bool _hx_tmp17;
HXDLIN( 614)							bool _hx_tmp18;
HXDLIN( 614)							if ((x11 >= 0)) {
HXLINE( 614)								_hx_tmp18 = (y1 >= 0);
            							}
            							else {
HXLINE( 614)								_hx_tmp18 = false;
            							}
HXDLIN( 614)							if (_hx_tmp18) {
HXLINE( 614)								_hx_tmp17 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 614)								_hx_tmp17 = false;
            							}
HXDLIN( 614)							if (_hx_tmp17) {
HXLINE( 614)								_hx_tmp11 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 614)								_hx_tmp11 = false;
            							}
            						}
            						else {
HXLINE( 614)							bool has = false;
HXDLIN( 614)							 ::vision::ds::ImageView view;
HXDLIN( 614)							if (::hx::IsNotNull( v )) {
HXLINE( 614)								view = v;
            							}
            							else {
HXLINE( 614)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 614)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 614)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 614)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 614)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 614)									bool has1;
HXDLIN( 614)									bool has2;
HXDLIN( 614)									if ((x11 < (view->x + view->width))) {
HXLINE( 614)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 614)										has2 = false;
            									}
HXDLIN( 614)									if (has2) {
HXLINE( 614)										has1 = (x11 >= view->x);
            									}
            									else {
HXLINE( 614)										has1 = false;
            									}
HXDLIN( 614)									if (has1) {
HXLINE( 614)										has = (y1 >= view->y);
            									}
            									else {
HXLINE( 614)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 614)									bool has3;
HXDLIN( 614)									bool has4;
HXDLIN( 614)									bool has5;
HXDLIN( 614)									if ((x11 < (view->x + view->width))) {
HXLINE( 614)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 614)										has5 = false;
            									}
HXDLIN( 614)									if (has5) {
HXLINE( 614)										has4 = (x11 >= view->x);
            									}
            									else {
HXLINE( 614)										has4 = false;
            									}
HXDLIN( 614)									if (has4) {
HXLINE( 614)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE( 614)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 614)									if ((view->width > view->height)) {
HXLINE( 614)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 614)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 614)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 614)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 614)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 614)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 614)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 614)										::cpp::Int64 p = _hx_int64_make(x11,y1);
HXDLIN( 614)										Float x4 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 614)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 614)										Float has6 = ::Math_obj::sqrt(((x4 * x4) + (y3 * y3)));
HXDLIN( 614)										Float x5 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 614)										Float y4 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x5 * x5) + (y4 * y4)))) <= view->width);
HXLINE( 614)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 614)										if ((view->height > view->width)) {
HXLINE( 614)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 614)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 614)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 614)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 614)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 614)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 614)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 614)											::cpp::Int64 p3 = _hx_int64_make(x11,y1);
HXDLIN( 614)											Float x6 = (( (Float)(_hx_int64_high(p3)) ) - f1_x1);
HXDLIN( 614)											Float y5 = (( (Float)(_hx_int64_low(p3)) ) - f1_y1);
HXDLIN( 614)											Float has7 = ::Math_obj::sqrt(((x6 * x6) + (y5 * y5)));
HXDLIN( 614)											Float x7 = (( (Float)(_hx_int64_high(p3)) ) - f2_x1);
HXDLIN( 614)											Float y6 = (( (Float)(_hx_int64_low(p3)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x7 * x7) + (y6 * y6)))) <= view->height);
HXLINE( 614)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 614)											Float point1_x = ( (Float)(x11) );
HXDLIN( 614)											Float point1_y = ( (Float)(y1) );
HXDLIN( 614)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 614)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 614)											Float x8 = (point2_x - point1_x);
HXDLIN( 614)											Float y7 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x8 * x8) + (y7 * y7))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 614)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x11 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x11 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 614)							_hx_tmp11 = has;
            						}
HXDLIN( 614)						if (_hx_tmp11) {
HXLINE( 614)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN( 614)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 614)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 614)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 614)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 614)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 614)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN( 614)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 614)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 614)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 614)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 614)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 616)			bool _hx_tmp19;
HXDLIN( 616)			if ((x11 == x21)) {
HXLINE( 616)				_hx_tmp19 = (y1 == y2);
            			}
            			else {
HXLINE( 616)				_hx_tmp19 = false;
            			}
HXDLIN( 616)			if (_hx_tmp19) {
HXLINE( 617)				goto _hx_goto_165;
            			}
HXLINE( 618)			Float e2 = (( (Float)(2) ) * err);
HXLINE( 619)			if ((e2 > -(dy))) {
HXLINE( 620)				err = (err - dy);
HXLINE( 621)				x11 = (x11 + sx);
            			}
HXLINE( 623)			if ((e2 < dx)) {
HXLINE( 624)				err = (err + dx);
HXLINE( 625)				y1 = (y1 + sy);
            			}
            		}
            		_hx_goto_165:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,drawRay2D,(void))

void Image_Impl__obj::drawLine2D( ::haxe::io::Bytes this1, ::vision::ds::Line2D line,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_642_drawLine2D)
HXLINE( 643)		 ::vision::ds::Point2D p = line->start;
HXDLIN( 643)		int x = ::Std_obj::_hx_int(p->x);
HXDLIN( 643)		::cpp::Int64 p1 = _hx_int64_make(x,::Std_obj::_hx_int(p->y));
HXLINE( 644)		 ::vision::ds::Point2D p2 = line->end;
HXDLIN( 644)		int x1 = ::Std_obj::_hx_int(p2->x);
HXDLIN( 644)		::cpp::Int64 p21 = _hx_int64_make(x1,::Std_obj::_hx_int(p2->y));
HXLINE( 645)		int x11 = _hx_int64_high(p1);
HXDLIN( 645)		int y1 = _hx_int64_low(p1);
HXDLIN( 645)		int x2 = _hx_int64_high(p21);
HXDLIN( 645)		int y2 = _hx_int64_low(p21);
HXLINE( 646)		Float dx = ::Math_obj::abs(( (Float)((x2 - x11)) ));
HXLINE( 647)		Float dy = ::Math_obj::abs(( (Float)((y2 - y1)) ));
HXLINE( 648)		int sx;
HXDLIN( 648)		if ((x11 < x2)) {
HXLINE( 648)			sx = 1;
            		}
            		else {
HXLINE( 648)			sx = -1;
            		}
HXLINE( 649)		int sy;
HXDLIN( 649)		if ((y1 < y2)) {
HXLINE( 649)			sy = 1;
            		}
            		else {
HXLINE( 649)			sy = -1;
            		}
HXLINE( 650)		Float err = (dx - dy);
HXLINE( 651)		while(true){
HXLINE( 652)			bool _hx_tmp;
HXDLIN( 652)			bool _hx_tmp1;
HXDLIN( 652)			bool _hx_tmp2;
HXDLIN( 652)			if ((x11 >= 0)) {
HXLINE( 652)				_hx_tmp2 = (y1 >= 0);
            			}
            			else {
HXLINE( 652)				_hx_tmp2 = false;
            			}
HXDLIN( 652)			if (_hx_tmp2) {
HXLINE( 652)				_hx_tmp1 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 652)				_hx_tmp1 = false;
            			}
HXDLIN( 652)			if (_hx_tmp1) {
HXLINE( 652)				_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 652)				_hx_tmp = false;
            			}
HXDLIN( 652)			if (_hx_tmp) {
HXLINE( 653)				bool _hx_tmp3;
HXDLIN( 653)				bool _hx_tmp4;
HXDLIN( 653)				bool _hx_tmp5;
HXDLIN( 653)				if ((x11 >= 0)) {
HXLINE( 653)					_hx_tmp5 = (y1 >= 0);
            				}
            				else {
HXLINE( 653)					_hx_tmp5 = false;
            				}
HXDLIN( 653)				if (_hx_tmp5) {
HXLINE( 653)					_hx_tmp4 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 653)					_hx_tmp4 = false;
            				}
HXDLIN( 653)				if (_hx_tmp4) {
HXLINE( 653)					_hx_tmp3 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 653)					_hx_tmp3 = false;
            				}
HXDLIN( 653)				if (!(_hx_tmp3)) {
HXLINE( 653)					::cpp::Int64 this2 = _hx_int64_make(x11,y1);
HXDLIN( 653)					int _hx_tmp6 = _hx_int64_high(this2);
HXDLIN( 653)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 653)					bool _hx_tmp7;
HXDLIN( 653)					bool _hx_tmp8;
HXDLIN( 653)					bool _hx_tmp9;
HXDLIN( 653)					bool _hx_tmp10;
HXDLIN( 653)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 653)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 653)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)						_hx_tmp10 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 653)						_hx_tmp10 = true;
            					}
HXDLIN( 653)					if (!(_hx_tmp10)) {
HXLINE( 653)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 653)						_hx_tmp9 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 653)						_hx_tmp9 = true;
            					}
HXDLIN( 653)					if (!(_hx_tmp9)) {
HXLINE( 653)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)						_hx_tmp8 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 653)						_hx_tmp8 = true;
            					}
HXDLIN( 653)					if (!(_hx_tmp8)) {
HXLINE( 653)						_hx_tmp7 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 653)						_hx_tmp7 = true;
            					}
HXDLIN( 653)					if (_hx_tmp7) {
HXLINE( 653)						 ::vision::ds::ImageView v = null();
HXDLIN( 653)						bool _hx_tmp11;
HXDLIN( 653)						bool _hx_tmp12;
HXDLIN( 653)						bool _hx_tmp13;
HXDLIN( 653)						bool _hx_tmp14;
HXDLIN( 653)						bool _hx_tmp15;
HXDLIN( 653)						bool _hx_tmp16;
HXDLIN( 653)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 653)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 653)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)							_hx_tmp16 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 653)							_hx_tmp16 = true;
            						}
HXDLIN( 653)						if (!(_hx_tmp16)) {
HXLINE( 653)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 653)							_hx_tmp15 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 653)							_hx_tmp15 = true;
            						}
HXDLIN( 653)						if (!(_hx_tmp15)) {
HXLINE( 653)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)							_hx_tmp14 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 653)							_hx_tmp14 = true;
            						}
HXDLIN( 653)						if (!(_hx_tmp14)) {
HXLINE( 653)							_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 653)							_hx_tmp13 = true;
            						}
HXDLIN( 653)						if (!(_hx_tmp13)) {
HXLINE( 653)							_hx_tmp12 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 653)							_hx_tmp12 = false;
            						}
HXDLIN( 653)						if (_hx_tmp12) {
HXLINE( 653)							bool _hx_tmp17;
HXDLIN( 653)							bool _hx_tmp18;
HXDLIN( 653)							if ((x11 >= 0)) {
HXLINE( 653)								_hx_tmp18 = (y1 >= 0);
            							}
            							else {
HXLINE( 653)								_hx_tmp18 = false;
            							}
HXDLIN( 653)							if (_hx_tmp18) {
HXLINE( 653)								_hx_tmp17 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 653)								_hx_tmp17 = false;
            							}
HXDLIN( 653)							if (_hx_tmp17) {
HXLINE( 653)								_hx_tmp11 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 653)								_hx_tmp11 = false;
            							}
            						}
            						else {
HXLINE( 653)							bool has = false;
HXDLIN( 653)							 ::vision::ds::ImageView view;
HXDLIN( 653)							if (::hx::IsNotNull( v )) {
HXLINE( 653)								view = v;
            							}
            							else {
HXLINE( 653)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 653)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 653)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 653)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 653)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 653)									bool has1;
HXDLIN( 653)									bool has2;
HXDLIN( 653)									if ((x11 < (view->x + view->width))) {
HXLINE( 653)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 653)										has2 = false;
            									}
HXDLIN( 653)									if (has2) {
HXLINE( 653)										has1 = (x11 >= view->x);
            									}
            									else {
HXLINE( 653)										has1 = false;
            									}
HXDLIN( 653)									if (has1) {
HXLINE( 653)										has = (y1 >= view->y);
            									}
            									else {
HXLINE( 653)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 653)									bool has3;
HXDLIN( 653)									bool has4;
HXDLIN( 653)									bool has5;
HXDLIN( 653)									if ((x11 < (view->x + view->width))) {
HXLINE( 653)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 653)										has5 = false;
            									}
HXDLIN( 653)									if (has5) {
HXLINE( 653)										has4 = (x11 >= view->x);
            									}
            									else {
HXLINE( 653)										has4 = false;
            									}
HXDLIN( 653)									if (has4) {
HXLINE( 653)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE( 653)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 653)									if ((view->width > view->height)) {
HXLINE( 653)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 653)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 653)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 653)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 653)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 653)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 653)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 653)										::cpp::Int64 p3 = _hx_int64_make(x11,y1);
HXDLIN( 653)										Float x3 = (( (Float)(_hx_int64_high(p3)) ) - f1_x);
HXDLIN( 653)										Float y = (( (Float)(_hx_int64_low(p3)) ) - f1_y);
HXDLIN( 653)										Float has6 = ::Math_obj::sqrt(((x3 * x3) + (y * y)));
HXDLIN( 653)										Float x4 = (( (Float)(_hx_int64_high(p3)) ) - f2_x);
HXDLIN( 653)										Float y3 = (( (Float)(_hx_int64_low(p3)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x4 * x4) + (y3 * y3)))) <= view->width);
HXLINE( 653)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 653)										if ((view->height > view->width)) {
HXLINE( 653)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 653)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 653)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 653)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 653)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 653)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 653)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 653)											::cpp::Int64 p4 = _hx_int64_make(x11,y1);
HXDLIN( 653)											Float x5 = (( (Float)(_hx_int64_high(p4)) ) - f1_x1);
HXDLIN( 653)											Float y4 = (( (Float)(_hx_int64_low(p4)) ) - f1_y1);
HXDLIN( 653)											Float has7 = ::Math_obj::sqrt(((x5 * x5) + (y4 * y4)));
HXDLIN( 653)											Float x6 = (( (Float)(_hx_int64_high(p4)) ) - f2_x1);
HXDLIN( 653)											Float y5 = (( (Float)(_hx_int64_low(p4)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x6 * x6) + (y5 * y5)))) <= view->height);
HXLINE( 653)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 653)											Float point1_x = ( (Float)(x11) );
HXDLIN( 653)											Float point1_y = ( (Float)(y1) );
HXDLIN( 653)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 653)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 653)											Float x7 = (point2_x - point1_x);
HXDLIN( 653)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x7 * x7) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 653)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x11 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x11 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 653)							_hx_tmp11 = has;
            						}
HXDLIN( 653)						if (_hx_tmp11) {
HXLINE( 653)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN( 653)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 653)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 653)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 653)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 653)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 653)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN( 653)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 653)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 653)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 653)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 653)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 655)			bool _hx_tmp19;
HXDLIN( 655)			if ((x11 == x2)) {
HXLINE( 655)				_hx_tmp19 = (y1 == y2);
            			}
            			else {
HXLINE( 655)				_hx_tmp19 = false;
            			}
HXDLIN( 655)			if (_hx_tmp19) {
HXLINE( 656)				goto _hx_goto_167;
            			}
HXLINE( 657)			Float e2 = (( (Float)(2) ) * err);
HXLINE( 658)			if ((e2 > -(dy))) {
HXLINE( 659)				err = (err - dy);
HXLINE( 660)				x11 = (x11 + sx);
            			}
HXLINE( 662)			if ((e2 < dx)) {
HXLINE( 663)				err = (err + dx);
HXLINE( 664)				y1 = (y1 + sy);
            			}
            		}
            		_hx_goto_167:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,drawLine2D,(void))

void Image_Impl__obj::fillRect( ::haxe::io::Bytes this1,int x,int y,int width,int height,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_676_fillRect)
HXDLIN( 676)		int _g = x;
HXDLIN( 676)		int _g1 = (x + width);
HXDLIN( 676)		while((_g < _g1)){
HXDLIN( 676)			_g = (_g + 1);
HXDLIN( 676)			int X = (_g - 1);
HXLINE( 677)			{
HXLINE( 677)				int _g2 = y;
HXDLIN( 677)				int _g3 = (y + height);
HXDLIN( 677)				while((_g2 < _g3)){
HXLINE( 677)					_g2 = (_g2 + 1);
HXDLIN( 677)					int Y = (_g2 - 1);
HXLINE( 678)					bool _hx_tmp;
HXDLIN( 678)					bool _hx_tmp1;
HXDLIN( 678)					bool _hx_tmp2;
HXDLIN( 678)					if ((X >= 0)) {
HXLINE( 678)						_hx_tmp2 = (Y >= 0);
            					}
            					else {
HXLINE( 678)						_hx_tmp2 = false;
            					}
HXDLIN( 678)					if (_hx_tmp2) {
HXLINE( 678)						_hx_tmp1 = (X < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE( 678)						_hx_tmp1 = false;
            					}
HXDLIN( 678)					if (_hx_tmp1) {
HXLINE( 678)						_hx_tmp = (Y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE( 678)						_hx_tmp = false;
            					}
HXDLIN( 678)					if (!(_hx_tmp)) {
HXLINE( 678)						::cpp::Int64 this2 = _hx_int64_make(X,Y);
HXDLIN( 678)						int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 678)						HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            					}
            					else {
HXLINE( 678)						bool _hx_tmp4;
HXDLIN( 678)						bool _hx_tmp5;
HXDLIN( 678)						bool _hx_tmp6;
HXDLIN( 678)						bool _hx_tmp7;
HXDLIN( 678)						int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 678)						if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 678)							int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)							_hx_tmp7 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 678)							_hx_tmp7 = true;
            						}
HXDLIN( 678)						if (!(_hx_tmp7)) {
HXLINE( 678)							int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 678)							_hx_tmp6 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 678)							_hx_tmp6 = true;
            						}
HXDLIN( 678)						if (!(_hx_tmp6)) {
HXLINE( 678)							int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)							_hx_tmp5 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 678)							_hx_tmp5 = true;
            						}
HXDLIN( 678)						if (!(_hx_tmp5)) {
HXLINE( 678)							_hx_tmp4 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 678)							_hx_tmp4 = true;
            						}
HXDLIN( 678)						if (_hx_tmp4) {
HXLINE( 678)							 ::vision::ds::ImageView v = null();
HXDLIN( 678)							bool _hx_tmp8;
HXDLIN( 678)							bool _hx_tmp9;
HXDLIN( 678)							bool _hx_tmp10;
HXDLIN( 678)							bool _hx_tmp11;
HXDLIN( 678)							bool _hx_tmp12;
HXDLIN( 678)							bool _hx_tmp13;
HXDLIN( 678)							int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 678)							if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 678)								int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)								_hx_tmp13 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 678)								_hx_tmp13 = true;
            							}
HXDLIN( 678)							if (!(_hx_tmp13)) {
HXLINE( 678)								int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 678)								_hx_tmp12 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 678)								_hx_tmp12 = true;
            							}
HXDLIN( 678)							if (!(_hx_tmp12)) {
HXLINE( 678)								int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)								_hx_tmp11 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 678)								_hx_tmp11 = true;
            							}
HXDLIN( 678)							if (!(_hx_tmp11)) {
HXLINE( 678)								_hx_tmp10 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 678)								_hx_tmp10 = true;
            							}
HXDLIN( 678)							if (!(_hx_tmp10)) {
HXLINE( 678)								_hx_tmp9 = ::hx::IsNull( v );
            							}
            							else {
HXLINE( 678)								_hx_tmp9 = false;
            							}
HXDLIN( 678)							if (_hx_tmp9) {
HXLINE( 678)								bool _hx_tmp14;
HXDLIN( 678)								bool _hx_tmp15;
HXDLIN( 678)								if ((X >= 0)) {
HXLINE( 678)									_hx_tmp15 = (Y >= 0);
            								}
            								else {
HXLINE( 678)									_hx_tmp15 = false;
            								}
HXDLIN( 678)								if (_hx_tmp15) {
HXLINE( 678)									_hx_tmp14 = (X < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE( 678)									_hx_tmp14 = false;
            								}
HXDLIN( 678)								if (_hx_tmp14) {
HXLINE( 678)									_hx_tmp8 = (Y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE( 678)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE( 678)								bool has = false;
HXDLIN( 678)								 ::vision::ds::ImageView view;
HXDLIN( 678)								if (::hx::IsNotNull( v )) {
HXLINE( 678)									view = v;
            								}
            								else {
HXLINE( 678)									int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 678)									int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)									int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 678)									int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 678)									view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            								}
HXDLIN( 678)								switch((int)(view->shape)){
            									case (int)0: {
HXLINE( 678)										bool has1;
HXDLIN( 678)										bool has2;
HXDLIN( 678)										if ((X < (view->x + view->width))) {
HXLINE( 678)											has2 = (Y < (view->y + view->height));
            										}
            										else {
HXLINE( 678)											has2 = false;
            										}
HXDLIN( 678)										if (has2) {
HXLINE( 678)											has1 = (X >= view->x);
            										}
            										else {
HXLINE( 678)											has1 = false;
            										}
HXDLIN( 678)										if (has1) {
HXLINE( 678)											has = (Y >= view->y);
            										}
            										else {
HXLINE( 678)											has = false;
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 678)										bool has3;
HXDLIN( 678)										bool has4;
HXDLIN( 678)										bool has5;
HXDLIN( 678)										if ((X < (view->x + view->width))) {
HXLINE( 678)											has5 = (Y < (view->y + view->height));
            										}
            										else {
HXLINE( 678)											has5 = false;
            										}
HXDLIN( 678)										if (has5) {
HXLINE( 678)											has4 = (X >= view->x);
            										}
            										else {
HXLINE( 678)											has4 = false;
            										}
HXDLIN( 678)										if (has4) {
HXLINE( 678)											has3 = (Y >= view->y);
            										}
            										else {
HXLINE( 678)											has3 = false;
            										}
HXLINE(1400)										has = !(has3);
            									}
            									break;
            									case (int)2: case (int)3: {
HXLINE( 678)										if ((view->width > view->height)) {
HXLINE( 678)											Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 678)											Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 678)											Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 678)											Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 678)											Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 678)											Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 678)											Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 678)											::cpp::Int64 p = _hx_int64_make(X,Y);
HXDLIN( 678)											Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 678)											Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 678)											Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 678)											Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 678)											Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)											has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 678)											if ((view->shape == 3)) {
HXLINE(1416)												has = !(has);
            											}
            										}
            										else {
HXLINE( 678)											if ((view->height > view->width)) {
HXLINE( 678)												Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 678)												Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 678)												Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 678)												Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 678)												Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 678)												Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 678)												Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 678)												::cpp::Int64 p1 = _hx_int64_make(X,Y);
HXDLIN( 678)												Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 678)												Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 678)												Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 678)												Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 678)												Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)												has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 678)												if ((view->shape == 3)) {
HXLINE(1425)													has = !(has);
            												}
            											}
            											else {
HXLINE( 678)												Float point1_x = ( (Float)(X) );
HXDLIN( 678)												Float point1_y = ( (Float)(Y) );
HXDLIN( 678)												Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 678)												Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 678)												Float x5 = (point2_x - point1_x);
HXDLIN( 678)												Float y5 = (point2_y - point1_y);
HXLINE(1428)												has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 678)												if ((view->shape == 3)) {
HXLINE(1429)													has = !(has);
            												}
            											}
            										}
            									}
            									break;
            									case (int)4: {
HXLINE(1401)										has = (((::Math_obj::abs((( (Float)((X - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((Y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            									}
            									break;
            									case (int)5: {
HXLINE(1402)										has = !((((::Math_obj::abs((( (Float)((X - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((Y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            									}
            									break;
            								}
HXLINE( 678)								_hx_tmp8 = has;
            							}
HXDLIN( 678)							if (_hx_tmp8) {
HXLINE( 678)								int position = (((Y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + X) * 4);
HXDLIN( 678)								position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 678)								this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 678)								this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 678)								this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 678)								this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            						else {
HXLINE( 678)							int position1 = (((Y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + X) * 4);
HXDLIN( 678)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 678)							this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 678)							this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 678)							this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 678)							this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,fillRect,(void))

void Image_Impl__obj::drawRect( ::haxe::io::Bytes this1,int x,int y,int width,int height,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_691_drawRect)
HXLINE( 692)		{
HXLINE( 692)			int x1 = x;
HXDLIN( 692)			int y1 = y;
HXDLIN( 692)			int x2 = (x + width);
HXDLIN( 692)			Float dx = ::Math_obj::abs(( (Float)((x2 - x1)) ));
HXDLIN( 692)			Float dy = ::Math_obj::abs(( (Float)((y - y1)) ));
HXDLIN( 692)			int sx;
HXDLIN( 692)			if ((x1 < x2)) {
HXLINE( 692)				sx = 1;
            			}
            			else {
HXLINE( 692)				sx = -1;
            			}
HXDLIN( 692)			int sy;
HXDLIN( 692)			if ((y1 < y)) {
HXLINE( 692)				sy = 1;
            			}
            			else {
HXLINE( 692)				sy = -1;
            			}
HXDLIN( 692)			Float err = (dx - dy);
HXDLIN( 692)			int safety = 0;
HXDLIN( 692)			while(true){
HXLINE( 692)				safety = (safety + 1);
HXDLIN( 692)				if (!(((safety - 1) < 10000))) {
HXLINE( 692)					goto _hx_goto_172;
            				}
HXDLIN( 692)				{
HXLINE( 692)					int x3 = x1;
HXDLIN( 692)					int y2 = y1;
HXDLIN( 692)					int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 692)					::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x3)->init(1,0);
HXDLIN( 692)					int max = values->__get(0);
HXDLIN( 692)					{
HXLINE( 692)						int _g = 0;
HXDLIN( 692)						int _g1 = values->length;
HXDLIN( 692)						while((_g < _g1)){
HXLINE( 692)							_g = (_g + 1);
HXDLIN( 692)							int i = (_g - 1);
HXDLIN( 692)							if ((values->__get(i) > max)) {
HXLINE( 688)								max = values->__get(i);
            							}
            						}
            					}
HXLINE( 692)					::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 692)					int min = values1->__get(0);
HXDLIN( 692)					int _g2 = 0;
HXDLIN( 692)					int _g3 = values1->length;
HXDLIN( 692)					while((_g2 < _g3)){
HXLINE( 692)						_g2 = (_g2 + 1);
HXDLIN( 692)						int i1 = (_g2 - 1);
HXDLIN( 692)						if ((values1->__get(i1) < min)) {
HXLINE( 652)							min = values1->__get(i1);
            						}
            					}
HXLINE( 692)					x3 = min;
HXDLIN( 692)					int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 692)					::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y2)->init(1,0);
HXDLIN( 692)					int max1 = values2->__get(0);
HXDLIN( 692)					{
HXLINE( 692)						int _g4 = 0;
HXDLIN( 692)						int _g5 = values2->length;
HXDLIN( 692)						while((_g4 < _g5)){
HXLINE( 692)							_g4 = (_g4 + 1);
HXDLIN( 692)							int i2 = (_g4 - 1);
HXDLIN( 692)							if ((values2->__get(i2) > max1)) {
HXLINE( 688)								max1 = values2->__get(i2);
            							}
            						}
            					}
HXLINE( 692)					::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN( 692)					int min1 = values3->__get(0);
HXDLIN( 692)					int _g6 = 0;
HXDLIN( 692)					int _g7 = values3->length;
HXDLIN( 692)					while((_g6 < _g7)){
HXLINE( 692)						_g6 = (_g6 + 1);
HXDLIN( 692)						int i3 = (_g6 - 1);
HXDLIN( 692)						if ((values3->__get(i3) < min1)) {
HXLINE( 652)							min1 = values3->__get(i3);
            						}
            					}
HXLINE( 692)					y2 = min1;
HXDLIN( 692)					bool _hx_tmp;
HXDLIN( 692)					bool _hx_tmp1;
HXDLIN( 692)					bool _hx_tmp2;
HXDLIN( 692)					bool _hx_tmp3;
HXDLIN( 692)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 692)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 692)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)						_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 692)						_hx_tmp3 = true;
            					}
HXDLIN( 692)					if (!(_hx_tmp3)) {
HXLINE( 692)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 692)						_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 692)						_hx_tmp2 = true;
            					}
HXDLIN( 692)					if (!(_hx_tmp2)) {
HXLINE( 692)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)						_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 692)						_hx_tmp1 = true;
            					}
HXDLIN( 692)					if (!(_hx_tmp1)) {
HXLINE( 692)						_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 692)						_hx_tmp = true;
            					}
HXDLIN( 692)					if (_hx_tmp) {
HXLINE( 692)						 ::vision::ds::ImageView v = null();
HXDLIN( 692)						bool _hx_tmp4;
HXDLIN( 692)						bool _hx_tmp5;
HXDLIN( 692)						bool _hx_tmp6;
HXDLIN( 692)						bool _hx_tmp7;
HXDLIN( 692)						bool _hx_tmp8;
HXDLIN( 692)						bool _hx_tmp9;
HXDLIN( 692)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 692)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 692)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)							_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 692)							_hx_tmp9 = true;
            						}
HXDLIN( 692)						if (!(_hx_tmp9)) {
HXLINE( 692)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 692)							_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 692)							_hx_tmp8 = true;
            						}
HXDLIN( 692)						if (!(_hx_tmp8)) {
HXLINE( 692)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)							_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 692)							_hx_tmp7 = true;
            						}
HXDLIN( 692)						if (!(_hx_tmp7)) {
HXLINE( 692)							_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 692)							_hx_tmp6 = true;
            						}
HXDLIN( 692)						if (!(_hx_tmp6)) {
HXLINE( 692)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 692)							_hx_tmp5 = false;
            						}
HXDLIN( 692)						if (_hx_tmp5) {
HXLINE( 692)							bool _hx_tmp10;
HXDLIN( 692)							bool _hx_tmp11;
HXDLIN( 692)							if ((x3 >= 0)) {
HXLINE( 692)								_hx_tmp11 = (y2 >= 0);
            							}
            							else {
HXLINE( 692)								_hx_tmp11 = false;
            							}
HXDLIN( 692)							if (_hx_tmp11) {
HXLINE( 692)								_hx_tmp10 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 692)								_hx_tmp10 = false;
            							}
HXDLIN( 692)							if (_hx_tmp10) {
HXLINE( 692)								_hx_tmp4 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 692)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE( 692)							bool has = false;
HXDLIN( 692)							 ::vision::ds::ImageView view;
HXDLIN( 692)							if (::hx::IsNotNull( v )) {
HXLINE( 692)								view = v;
            							}
            							else {
HXLINE( 692)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 692)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 692)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 692)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 692)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 692)									bool has1;
HXDLIN( 692)									bool has2;
HXDLIN( 692)									if ((x3 < (view->x + view->width))) {
HXLINE( 692)										has2 = (y2 < (view->y + view->height));
            									}
            									else {
HXLINE( 692)										has2 = false;
            									}
HXDLIN( 692)									if (has2) {
HXLINE( 692)										has1 = (x3 >= view->x);
            									}
            									else {
HXLINE( 692)										has1 = false;
            									}
HXDLIN( 692)									if (has1) {
HXLINE( 692)										has = (y2 >= view->y);
            									}
            									else {
HXLINE( 692)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 692)									bool has3;
HXDLIN( 692)									bool has4;
HXDLIN( 692)									bool has5;
HXDLIN( 692)									if ((x3 < (view->x + view->width))) {
HXLINE( 692)										has5 = (y2 < (view->y + view->height));
            									}
            									else {
HXLINE( 692)										has5 = false;
            									}
HXDLIN( 692)									if (has5) {
HXLINE( 692)										has4 = (x3 >= view->x);
            									}
            									else {
HXLINE( 692)										has4 = false;
            									}
HXDLIN( 692)									if (has4) {
HXLINE( 692)										has3 = (y2 >= view->y);
            									}
            									else {
HXLINE( 692)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 692)									if ((view->width > view->height)) {
HXLINE( 692)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 692)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 692)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 692)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 692)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 692)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 692)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 692)										::cpp::Int64 p = _hx_int64_make(x3,y2);
HXDLIN( 692)										Float x4 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 692)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 692)										Float has6 = ::Math_obj::sqrt(((x4 * x4) + (y3 * y3)));
HXDLIN( 692)										Float x5 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 692)										Float y4 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x5 * x5) + (y4 * y4)))) <= view->width);
HXLINE( 692)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 692)										if ((view->height > view->width)) {
HXLINE( 692)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 692)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 692)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 692)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 692)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 692)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 692)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 692)											::cpp::Int64 p1 = _hx_int64_make(x3,y2);
HXDLIN( 692)											Float x6 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 692)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 692)											Float has7 = ::Math_obj::sqrt(((x6 * x6) + (y5 * y5)));
HXDLIN( 692)											Float x7 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 692)											Float y6 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x7 * x7) + (y6 * y6)))) <= view->height);
HXLINE( 692)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 692)											Float point1_x = ( (Float)(x3) );
HXDLIN( 692)											Float point1_y = ( (Float)(y2) );
HXDLIN( 692)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 692)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 692)											Float x8 = (point2_x - point1_x);
HXDLIN( 692)											Float y7 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x8 * x8) + (y7 * y7))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 692)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x3 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y2 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x3 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y2 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 692)							_hx_tmp4 = has;
            						}
HXDLIN( 692)						if (_hx_tmp4) {
HXLINE( 692)							int position = (((y2 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 692)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 692)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 692)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 692)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 692)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 692)						int position1 = (((y2 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN( 692)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 692)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 692)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 692)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 692)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
HXDLIN( 692)				bool _hx_tmp12;
HXDLIN( 692)				if ((x1 == x2)) {
HXLINE( 692)					_hx_tmp12 = (y1 == y);
            				}
            				else {
HXLINE( 692)					_hx_tmp12 = false;
            				}
HXDLIN( 692)				if (_hx_tmp12) {
HXLINE( 692)					goto _hx_goto_172;
            				}
HXDLIN( 692)				Float e2 = (( (Float)(2) ) * err);
HXDLIN( 692)				if ((e2 > -(dy))) {
HXLINE( 692)					err = (err - dy);
HXDLIN( 692)					x1 = (x1 + sx);
            				}
HXDLIN( 692)				if ((e2 < dx)) {
HXLINE( 692)					err = (err + dx);
HXDLIN( 692)					y1 = (y1 + sy);
            				}
            			}
            			_hx_goto_172:;
            		}
HXLINE( 693)		{
HXLINE( 693)			int x11 = (x + width);
HXDLIN( 693)			int y11 = y;
HXDLIN( 693)			int x21 = (x + width);
HXDLIN( 693)			int y21 = (y + height);
HXDLIN( 693)			Float dx1 = ::Math_obj::abs(( (Float)((x21 - x11)) ));
HXDLIN( 693)			Float dy1 = ::Math_obj::abs(( (Float)((y21 - y11)) ));
HXDLIN( 693)			int sx1;
HXDLIN( 693)			if ((x11 < x21)) {
HXLINE( 693)				sx1 = 1;
            			}
            			else {
HXLINE( 693)				sx1 = -1;
            			}
HXDLIN( 693)			int sy1;
HXDLIN( 693)			if ((y11 < y21)) {
HXLINE( 693)				sy1 = 1;
            			}
            			else {
HXLINE( 693)				sy1 = -1;
            			}
HXDLIN( 693)			Float err1 = (dx1 - dy1);
HXDLIN( 693)			int safety1 = 0;
HXDLIN( 693)			while(true){
HXLINE( 693)				safety1 = (safety1 + 1);
HXDLIN( 693)				if (!(((safety1 - 1) < 10000))) {
HXLINE( 693)					goto _hx_goto_177;
            				}
HXDLIN( 693)				{
HXLINE( 693)					int x9 = x11;
HXDLIN( 693)					int y8 = y11;
HXDLIN( 693)					int ma2 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 693)					::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x9)->init(1,0);
HXDLIN( 693)					int max2 = values4->__get(0);
HXDLIN( 693)					{
HXLINE( 693)						int _g8 = 0;
HXDLIN( 693)						int _g9 = values4->length;
HXDLIN( 693)						while((_g8 < _g9)){
HXLINE( 693)							_g8 = (_g8 + 1);
HXDLIN( 693)							int i4 = (_g8 - 1);
HXDLIN( 693)							if ((values4->__get(i4) > max2)) {
HXLINE( 688)								max2 = values4->__get(i4);
            							}
            						}
            					}
HXLINE( 693)					::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN( 693)					int min2 = values5->__get(0);
HXDLIN( 693)					int _g10 = 0;
HXDLIN( 693)					int _g11 = values5->length;
HXDLIN( 693)					while((_g10 < _g11)){
HXLINE( 693)						_g10 = (_g10 + 1);
HXDLIN( 693)						int i5 = (_g10 - 1);
HXDLIN( 693)						if ((values5->__get(i5) < min2)) {
HXLINE( 652)							min2 = values5->__get(i5);
            						}
            					}
HXLINE( 693)					x9 = min2;
HXDLIN( 693)					int ma3 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 693)					::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y8)->init(1,0);
HXDLIN( 693)					int max3 = values6->__get(0);
HXDLIN( 693)					{
HXLINE( 693)						int _g12 = 0;
HXDLIN( 693)						int _g13 = values6->length;
HXDLIN( 693)						while((_g12 < _g13)){
HXLINE( 693)							_g12 = (_g12 + 1);
HXDLIN( 693)							int i6 = (_g12 - 1);
HXDLIN( 693)							if ((values6->__get(i6) > max3)) {
HXLINE( 688)								max3 = values6->__get(i6);
            							}
            						}
            					}
HXLINE( 693)					::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN( 693)					int min3 = values7->__get(0);
HXDLIN( 693)					int _g14 = 0;
HXDLIN( 693)					int _g15 = values7->length;
HXDLIN( 693)					while((_g14 < _g15)){
HXLINE( 693)						_g14 = (_g14 + 1);
HXDLIN( 693)						int i7 = (_g14 - 1);
HXDLIN( 693)						if ((values7->__get(i7) < min3)) {
HXLINE( 652)							min3 = values7->__get(i7);
            						}
            					}
HXLINE( 693)					y8 = min3;
HXDLIN( 693)					bool _hx_tmp13;
HXDLIN( 693)					bool _hx_tmp14;
HXDLIN( 693)					bool _hx_tmp15;
HXDLIN( 693)					bool _hx_tmp16;
HXDLIN( 693)					int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 693)					if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 693)						int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)						_hx_tmp16 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 693)						_hx_tmp16 = true;
            					}
HXDLIN( 693)					if (!(_hx_tmp16)) {
HXLINE( 693)						int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 693)						_hx_tmp15 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 693)						_hx_tmp15 = true;
            					}
HXDLIN( 693)					if (!(_hx_tmp15)) {
HXLINE( 693)						int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)						_hx_tmp14 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 693)						_hx_tmp14 = true;
            					}
HXDLIN( 693)					if (!(_hx_tmp14)) {
HXLINE( 693)						_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 693)						_hx_tmp13 = true;
            					}
HXDLIN( 693)					if (_hx_tmp13) {
HXLINE( 693)						 ::vision::ds::ImageView v1 = null();
HXDLIN( 693)						bool _hx_tmp17;
HXDLIN( 693)						bool _hx_tmp18;
HXDLIN( 693)						bool _hx_tmp19;
HXDLIN( 693)						bool _hx_tmp20;
HXDLIN( 693)						bool _hx_tmp21;
HXDLIN( 693)						bool _hx_tmp22;
HXDLIN( 693)						int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 693)						if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 693)							int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)							_hx_tmp22 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 693)							_hx_tmp22 = true;
            						}
HXDLIN( 693)						if (!(_hx_tmp22)) {
HXLINE( 693)							int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 693)							_hx_tmp21 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 693)							_hx_tmp21 = true;
            						}
HXDLIN( 693)						if (!(_hx_tmp21)) {
HXLINE( 693)							int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)							_hx_tmp20 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 693)							_hx_tmp20 = true;
            						}
HXDLIN( 693)						if (!(_hx_tmp20)) {
HXLINE( 693)							_hx_tmp19 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 693)							_hx_tmp19 = true;
            						}
HXDLIN( 693)						if (!(_hx_tmp19)) {
HXLINE( 693)							_hx_tmp18 = ::hx::IsNull( v1 );
            						}
            						else {
HXLINE( 693)							_hx_tmp18 = false;
            						}
HXDLIN( 693)						if (_hx_tmp18) {
HXLINE( 693)							bool _hx_tmp23;
HXDLIN( 693)							bool _hx_tmp24;
HXDLIN( 693)							if ((x9 >= 0)) {
HXLINE( 693)								_hx_tmp24 = (y8 >= 0);
            							}
            							else {
HXLINE( 693)								_hx_tmp24 = false;
            							}
HXDLIN( 693)							if (_hx_tmp24) {
HXLINE( 693)								_hx_tmp23 = (x9 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 693)								_hx_tmp23 = false;
            							}
HXDLIN( 693)							if (_hx_tmp23) {
HXLINE( 693)								_hx_tmp17 = (y8 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 693)								_hx_tmp17 = false;
            							}
            						}
            						else {
HXLINE( 693)							bool has8 = false;
HXDLIN( 693)							 ::vision::ds::ImageView view1;
HXDLIN( 693)							if (::hx::IsNotNull( v1 )) {
HXLINE( 693)								view1 = v1;
            							}
            							else {
HXLINE( 693)								int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 693)								int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)								int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 693)								int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 693)								view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 693)							switch((int)(view1->shape)){
            								case (int)0: {
HXLINE( 693)									bool has9;
HXDLIN( 693)									bool has10;
HXDLIN( 693)									if ((x9 < (view1->x + view1->width))) {
HXLINE( 693)										has10 = (y8 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 693)										has10 = false;
            									}
HXDLIN( 693)									if (has10) {
HXLINE( 693)										has9 = (x9 >= view1->x);
            									}
            									else {
HXLINE( 693)										has9 = false;
            									}
HXDLIN( 693)									if (has9) {
HXLINE( 693)										has8 = (y8 >= view1->y);
            									}
            									else {
HXLINE( 693)										has8 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 693)									bool has11;
HXDLIN( 693)									bool has12;
HXDLIN( 693)									bool has13;
HXDLIN( 693)									if ((x9 < (view1->x + view1->width))) {
HXLINE( 693)										has13 = (y8 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 693)										has13 = false;
            									}
HXDLIN( 693)									if (has13) {
HXLINE( 693)										has12 = (x9 >= view1->x);
            									}
            									else {
HXLINE( 693)										has12 = false;
            									}
HXDLIN( 693)									if (has12) {
HXLINE( 693)										has11 = (y8 >= view1->y);
            									}
            									else {
HXLINE( 693)										has11 = false;
            									}
HXLINE(1400)									has8 = !(has11);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 693)									if ((view1->width > view1->height)) {
HXLINE( 693)										Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 693)										Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 693)										Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 693)										Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 693)										Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 693)										Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 693)										Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 693)										::cpp::Int64 p2 = _hx_int64_make(x9,y8);
HXDLIN( 693)										Float x10 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 693)										Float y9 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 693)										Float has14 = ::Math_obj::sqrt(((x10 * x10) + (y9 * y9)));
HXDLIN( 693)										Float x12 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 693)										Float y10 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)										has8 = ((has14 + ::Math_obj::sqrt(((x12 * x12) + (y10 * y10)))) <= view1->width);
HXLINE( 693)										if ((view1->shape == 3)) {
HXLINE(1416)											has8 = !(has8);
            										}
            									}
            									else {
HXLINE( 693)										if ((view1->height > view1->width)) {
HXLINE( 693)											Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 693)											Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 693)											Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 693)											Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 693)											Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 693)											Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 693)											Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 693)											::cpp::Int64 p3 = _hx_int64_make(x9,y8);
HXDLIN( 693)											Float x13 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 693)											Float y12 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 693)											Float has15 = ::Math_obj::sqrt(((x13 * x13) + (y12 * y12)));
HXDLIN( 693)											Float x14 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 693)											Float y13 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)											has8 = ((has15 + ::Math_obj::sqrt(((x14 * x14) + (y13 * y13)))) <= view1->height);
HXLINE( 693)											if ((view1->shape == 3)) {
HXLINE(1425)												has8 = !(has8);
            											}
            										}
            										else {
HXLINE( 693)											Float point1_x1 = ( (Float)(x9) );
HXDLIN( 693)											Float point1_y1 = ( (Float)(y8) );
HXDLIN( 693)											Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 693)											Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 693)											Float x15 = (point2_x1 - point1_x1);
HXDLIN( 693)											Float y14 = (point2_y1 - point1_y1);
HXLINE(1428)											has8 = (::Math_obj::sqrt(((x15 * x15) + (y14 * y14))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 693)											if ((view1->shape == 3)) {
HXLINE(1429)												has8 = !(has8);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has8 = (((::Math_obj::abs((( (Float)((x9 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y8 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has8 = !((((::Math_obj::abs((( (Float)((x9 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y8 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 693)							_hx_tmp17 = has8;
            						}
HXDLIN( 693)						if (_hx_tmp17) {
HXLINE( 693)							int position2 = (((y8 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 693)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 693)							this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 693)							this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 693)							this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 693)							this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 693)						int position3 = (((y8 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x9) * 4);
HXDLIN( 693)						position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 693)						this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 693)						this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 693)						this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 693)						this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
HXDLIN( 693)				bool _hx_tmp25;
HXDLIN( 693)				if ((x11 == x21)) {
HXLINE( 693)					_hx_tmp25 = (y11 == y21);
            				}
            				else {
HXLINE( 693)					_hx_tmp25 = false;
            				}
HXDLIN( 693)				if (_hx_tmp25) {
HXLINE( 693)					goto _hx_goto_177;
            				}
HXDLIN( 693)				Float e21 = (( (Float)(2) ) * err1);
HXDLIN( 693)				if ((e21 > -(dy1))) {
HXLINE( 693)					err1 = (err1 - dy1);
HXDLIN( 693)					x11 = (x11 + sx1);
            				}
HXDLIN( 693)				if ((e21 < dx1)) {
HXLINE( 693)					err1 = (err1 + dx1);
HXDLIN( 693)					y11 = (y11 + sy1);
            				}
            			}
            			_hx_goto_177:;
            		}
HXLINE( 694)		{
HXLINE( 694)			int x16 = (x + width);
HXDLIN( 694)			int y15 = (y + height);
HXDLIN( 694)			int y22 = (y + height);
HXDLIN( 694)			Float dx2 = ::Math_obj::abs(( (Float)((x - x16)) ));
HXDLIN( 694)			Float dy2 = ::Math_obj::abs(( (Float)((y22 - y15)) ));
HXDLIN( 694)			int sx2;
HXDLIN( 694)			if ((x16 < x)) {
HXLINE( 694)				sx2 = 1;
            			}
            			else {
HXLINE( 694)				sx2 = -1;
            			}
HXDLIN( 694)			int sy2;
HXDLIN( 694)			if ((y15 < y22)) {
HXLINE( 694)				sy2 = 1;
            			}
            			else {
HXLINE( 694)				sy2 = -1;
            			}
HXDLIN( 694)			Float err2 = (dx2 - dy2);
HXDLIN( 694)			int safety2 = 0;
HXDLIN( 694)			while(true){
HXLINE( 694)				safety2 = (safety2 + 1);
HXDLIN( 694)				if (!(((safety2 - 1) < 10000))) {
HXLINE( 694)					goto _hx_goto_182;
            				}
HXDLIN( 694)				{
HXLINE( 694)					int x17 = x16;
HXDLIN( 694)					int y16 = y15;
HXDLIN( 694)					int ma4 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 694)					::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x17)->init(1,0);
HXDLIN( 694)					int max4 = values8->__get(0);
HXDLIN( 694)					{
HXLINE( 694)						int _g16 = 0;
HXDLIN( 694)						int _g17 = values8->length;
HXDLIN( 694)						while((_g16 < _g17)){
HXLINE( 694)							_g16 = (_g16 + 1);
HXDLIN( 694)							int i8 = (_g16 - 1);
HXDLIN( 694)							if ((values8->__get(i8) > max4)) {
HXLINE( 688)								max4 = values8->__get(i8);
            							}
            						}
            					}
HXLINE( 694)					::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN( 694)					int min4 = values9->__get(0);
HXDLIN( 694)					int _g18 = 0;
HXDLIN( 694)					int _g19 = values9->length;
HXDLIN( 694)					while((_g18 < _g19)){
HXLINE( 694)						_g18 = (_g18 + 1);
HXDLIN( 694)						int i9 = (_g18 - 1);
HXDLIN( 694)						if ((values9->__get(i9) < min4)) {
HXLINE( 652)							min4 = values9->__get(i9);
            						}
            					}
HXLINE( 694)					x17 = min4;
HXDLIN( 694)					int ma5 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 694)					::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y16)->init(1,0);
HXDLIN( 694)					int max5 = values10->__get(0);
HXDLIN( 694)					{
HXLINE( 694)						int _g20 = 0;
HXDLIN( 694)						int _g21 = values10->length;
HXDLIN( 694)						while((_g20 < _g21)){
HXLINE( 694)							_g20 = (_g20 + 1);
HXDLIN( 694)							int i10 = (_g20 - 1);
HXDLIN( 694)							if ((values10->__get(i10) > max5)) {
HXLINE( 688)								max5 = values10->__get(i10);
            							}
            						}
            					}
HXLINE( 694)					::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN( 694)					int min5 = values11->__get(0);
HXDLIN( 694)					int _g22 = 0;
HXDLIN( 694)					int _g23 = values11->length;
HXDLIN( 694)					while((_g22 < _g23)){
HXLINE( 694)						_g22 = (_g22 + 1);
HXDLIN( 694)						int i11 = (_g22 - 1);
HXDLIN( 694)						if ((values11->__get(i11) < min5)) {
HXLINE( 652)							min5 = values11->__get(i11);
            						}
            					}
HXLINE( 694)					y16 = min5;
HXDLIN( 694)					bool _hx_tmp26;
HXDLIN( 694)					bool _hx_tmp27;
HXDLIN( 694)					bool _hx_tmp28;
HXDLIN( 694)					bool _hx_tmp29;
HXDLIN( 694)					int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 694)					if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 694)						int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)						_hx_tmp29 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 694)						_hx_tmp29 = true;
            					}
HXDLIN( 694)					if (!(_hx_tmp29)) {
HXLINE( 694)						int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 694)						_hx_tmp28 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 694)						_hx_tmp28 = true;
            					}
HXDLIN( 694)					if (!(_hx_tmp28)) {
HXLINE( 694)						int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)						_hx_tmp27 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 694)						_hx_tmp27 = true;
            					}
HXDLIN( 694)					if (!(_hx_tmp27)) {
HXLINE( 694)						_hx_tmp26 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 694)						_hx_tmp26 = true;
            					}
HXDLIN( 694)					if (_hx_tmp26) {
HXLINE( 694)						 ::vision::ds::ImageView v2 = null();
HXDLIN( 694)						bool _hx_tmp30;
HXDLIN( 694)						bool _hx_tmp31;
HXDLIN( 694)						bool _hx_tmp32;
HXDLIN( 694)						bool _hx_tmp33;
HXDLIN( 694)						bool _hx_tmp34;
HXDLIN( 694)						bool _hx_tmp35;
HXDLIN( 694)						int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 694)						if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 694)							int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)							_hx_tmp35 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 694)							_hx_tmp35 = true;
            						}
HXDLIN( 694)						if (!(_hx_tmp35)) {
HXLINE( 694)							int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 694)							_hx_tmp34 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 694)							_hx_tmp34 = true;
            						}
HXDLIN( 694)						if (!(_hx_tmp34)) {
HXLINE( 694)							int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)							_hx_tmp33 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 694)							_hx_tmp33 = true;
            						}
HXDLIN( 694)						if (!(_hx_tmp33)) {
HXLINE( 694)							_hx_tmp32 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 694)							_hx_tmp32 = true;
            						}
HXDLIN( 694)						if (!(_hx_tmp32)) {
HXLINE( 694)							_hx_tmp31 = ::hx::IsNull( v2 );
            						}
            						else {
HXLINE( 694)							_hx_tmp31 = false;
            						}
HXDLIN( 694)						if (_hx_tmp31) {
HXLINE( 694)							bool _hx_tmp36;
HXDLIN( 694)							bool _hx_tmp37;
HXDLIN( 694)							if ((x17 >= 0)) {
HXLINE( 694)								_hx_tmp37 = (y16 >= 0);
            							}
            							else {
HXLINE( 694)								_hx_tmp37 = false;
            							}
HXDLIN( 694)							if (_hx_tmp37) {
HXLINE( 694)								_hx_tmp36 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 694)								_hx_tmp36 = false;
            							}
HXDLIN( 694)							if (_hx_tmp36) {
HXLINE( 694)								_hx_tmp30 = (y16 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 694)								_hx_tmp30 = false;
            							}
            						}
            						else {
HXLINE( 694)							bool has16 = false;
HXDLIN( 694)							 ::vision::ds::ImageView view2;
HXDLIN( 694)							if (::hx::IsNotNull( v2 )) {
HXLINE( 694)								view2 = v2;
            							}
            							else {
HXLINE( 694)								int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 694)								int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)								int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 694)								int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 694)								view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 694)							switch((int)(view2->shape)){
            								case (int)0: {
HXLINE( 694)									bool has17;
HXDLIN( 694)									bool has18;
HXDLIN( 694)									if ((x17 < (view2->x + view2->width))) {
HXLINE( 694)										has18 = (y16 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 694)										has18 = false;
            									}
HXDLIN( 694)									if (has18) {
HXLINE( 694)										has17 = (x17 >= view2->x);
            									}
            									else {
HXLINE( 694)										has17 = false;
            									}
HXDLIN( 694)									if (has17) {
HXLINE( 694)										has16 = (y16 >= view2->y);
            									}
            									else {
HXLINE( 694)										has16 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 694)									bool has19;
HXDLIN( 694)									bool has20;
HXDLIN( 694)									bool has21;
HXDLIN( 694)									if ((x17 < (view2->x + view2->width))) {
HXLINE( 694)										has21 = (y16 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 694)										has21 = false;
            									}
HXDLIN( 694)									if (has21) {
HXLINE( 694)										has20 = (x17 >= view2->x);
            									}
            									else {
HXLINE( 694)										has20 = false;
            									}
HXDLIN( 694)									if (has20) {
HXLINE( 694)										has19 = (y16 >= view2->y);
            									}
            									else {
HXLINE( 694)										has19 = false;
            									}
HXLINE(1400)									has16 = !(has19);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 694)									if ((view2->width > view2->height)) {
HXLINE( 694)										Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 694)										Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 694)										Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN( 694)										Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 694)										Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 694)										Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 694)										Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 694)										::cpp::Int64 p4 = _hx_int64_make(x17,y16);
HXDLIN( 694)										Float x18 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 694)										Float y17 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 694)										Float has22 = ::Math_obj::sqrt(((x18 * x18) + (y17 * y17)));
HXDLIN( 694)										Float x19 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 694)										Float y18 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)										has16 = ((has22 + ::Math_obj::sqrt(((x19 * x19) + (y18 * y18)))) <= view2->width);
HXLINE( 694)										if ((view2->shape == 3)) {
HXLINE(1416)											has16 = !(has16);
            										}
            									}
            									else {
HXLINE( 694)										if ((view2->height > view2->width)) {
HXLINE( 694)											Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 694)											Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 694)											Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN( 694)											Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 694)											Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 694)											Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 694)											Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 694)											::cpp::Int64 p5 = _hx_int64_make(x17,y16);
HXDLIN( 694)											Float x20 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 694)											Float y19 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 694)											Float has23 = ::Math_obj::sqrt(((x20 * x20) + (y19 * y19)));
HXDLIN( 694)											Float x22 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 694)											Float y20 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)											has16 = ((has23 + ::Math_obj::sqrt(((x22 * x22) + (y20 * y20)))) <= view2->height);
HXLINE( 694)											if ((view2->shape == 3)) {
HXLINE(1425)												has16 = !(has16);
            											}
            										}
            										else {
HXLINE( 694)											Float point1_x2 = ( (Float)(x17) );
HXDLIN( 694)											Float point1_y2 = ( (Float)(y16) );
HXDLIN( 694)											Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 694)											Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 694)											Float x23 = (point2_x2 - point1_x2);
HXDLIN( 694)											Float y23 = (point2_y2 - point1_y2);
HXLINE(1428)											has16 = (::Math_obj::sqrt(((x23 * x23) + (y23 * y23))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 694)											if ((view2->shape == 3)) {
HXLINE(1429)												has16 = !(has16);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has16 = (((::Math_obj::abs((( (Float)((x17 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y16 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has16 = !((((::Math_obj::abs((( (Float)((x17 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y16 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 694)							_hx_tmp30 = has16;
            						}
HXDLIN( 694)						if (_hx_tmp30) {
HXLINE( 694)							int position4 = (((y16 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN( 694)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 694)							this1->b[position4] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 694)							this1->b[(position4 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 694)							this1->b[(position4 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 694)							this1->b[(position4 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 694)						int position5 = (((y16 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN( 694)						position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 694)						this1->b[position5] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 694)						this1->b[(position5 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 694)						this1->b[(position5 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 694)						this1->b[(position5 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
HXDLIN( 694)				bool _hx_tmp38;
HXDLIN( 694)				if ((x16 == x)) {
HXLINE( 694)					_hx_tmp38 = (y15 == y22);
            				}
            				else {
HXLINE( 694)					_hx_tmp38 = false;
            				}
HXDLIN( 694)				if (_hx_tmp38) {
HXLINE( 694)					goto _hx_goto_182;
            				}
HXDLIN( 694)				Float e22 = (( (Float)(2) ) * err2);
HXDLIN( 694)				if ((e22 > -(dy2))) {
HXLINE( 694)					err2 = (err2 - dy2);
HXDLIN( 694)					x16 = (x16 + sx2);
            				}
HXDLIN( 694)				if ((e22 < dx2)) {
HXLINE( 694)					err2 = (err2 + dx2);
HXDLIN( 694)					y15 = (y15 + sy2);
            				}
            			}
            			_hx_goto_182:;
            		}
HXLINE( 695)		{
HXLINE( 695)			int x110 = x;
HXDLIN( 695)			int y110 = (y + height);
HXDLIN( 695)			Float dx3 = ::Math_obj::abs(( (Float)((x - x110)) ));
HXDLIN( 695)			Float dy3 = ::Math_obj::abs(( (Float)((y - y110)) ));
HXDLIN( 695)			int sx3;
HXDLIN( 695)			if ((x110 < x)) {
HXLINE( 695)				sx3 = 1;
            			}
            			else {
HXLINE( 695)				sx3 = -1;
            			}
HXDLIN( 695)			int sy3;
HXDLIN( 695)			if ((y110 < y)) {
HXLINE( 695)				sy3 = 1;
            			}
            			else {
HXLINE( 695)				sy3 = -1;
            			}
HXDLIN( 695)			Float err3 = (dx3 - dy3);
HXDLIN( 695)			int safety3 = 0;
HXDLIN( 695)			while(true){
HXLINE( 695)				safety3 = (safety3 + 1);
HXDLIN( 695)				if (!(((safety3 - 1) < 10000))) {
HXLINE( 695)					goto _hx_goto_187;
            				}
HXDLIN( 695)				{
HXLINE( 695)					int x24 = x110;
HXDLIN( 695)					int y24 = y110;
HXDLIN( 695)					int ma6 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN( 695)					::Array< int > values12 = ::Array_obj< int >::__new(2)->init(0,x24)->init(1,0);
HXDLIN( 695)					int max6 = values12->__get(0);
HXDLIN( 695)					{
HXLINE( 695)						int _g24 = 0;
HXDLIN( 695)						int _g25 = values12->length;
HXDLIN( 695)						while((_g24 < _g25)){
HXLINE( 695)							_g24 = (_g24 + 1);
HXDLIN( 695)							int i12 = (_g24 - 1);
HXDLIN( 695)							if ((values12->__get(i12) > max6)) {
HXLINE( 688)								max6 = values12->__get(i12);
            							}
            						}
            					}
HXLINE( 695)					::Array< int > values13 = ::Array_obj< int >::__new(2)->init(0,max6)->init(1,ma6);
HXDLIN( 695)					int min6 = values13->__get(0);
HXDLIN( 695)					int _g26 = 0;
HXDLIN( 695)					int _g27 = values13->length;
HXDLIN( 695)					while((_g26 < _g27)){
HXLINE( 695)						_g26 = (_g26 + 1);
HXDLIN( 695)						int i13 = (_g26 - 1);
HXDLIN( 695)						if ((values13->__get(i13) < min6)) {
HXLINE( 652)							min6 = values13->__get(i13);
            						}
            					}
HXLINE( 695)					x24 = min6;
HXDLIN( 695)					int ma7 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN( 695)					::Array< int > values14 = ::Array_obj< int >::__new(2)->init(0,y24)->init(1,0);
HXDLIN( 695)					int max7 = values14->__get(0);
HXDLIN( 695)					{
HXLINE( 695)						int _g28 = 0;
HXDLIN( 695)						int _g29 = values14->length;
HXDLIN( 695)						while((_g28 < _g29)){
HXLINE( 695)							_g28 = (_g28 + 1);
HXDLIN( 695)							int i14 = (_g28 - 1);
HXDLIN( 695)							if ((values14->__get(i14) > max7)) {
HXLINE( 688)								max7 = values14->__get(i14);
            							}
            						}
            					}
HXLINE( 695)					::Array< int > values15 = ::Array_obj< int >::__new(2)->init(0,max7)->init(1,ma7);
HXDLIN( 695)					int min7 = values15->__get(0);
HXDLIN( 695)					int _g30 = 0;
HXDLIN( 695)					int _g31 = values15->length;
HXDLIN( 695)					while((_g30 < _g31)){
HXLINE( 695)						_g30 = (_g30 + 1);
HXDLIN( 695)						int i15 = (_g30 - 1);
HXDLIN( 695)						if ((values15->__get(i15) < min7)) {
HXLINE( 652)							min7 = values15->__get(i15);
            						}
            					}
HXLINE( 695)					y24 = min7;
HXDLIN( 695)					bool _hx_tmp39;
HXDLIN( 695)					bool _hx_tmp40;
HXDLIN( 695)					bool _hx_tmp41;
HXDLIN( 695)					bool _hx_tmp42;
HXDLIN( 695)					int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 695)					if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE( 695)						int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)						_hx_tmp42 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 695)						_hx_tmp42 = true;
            					}
HXDLIN( 695)					if (!(_hx_tmp42)) {
HXLINE( 695)						int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 695)						_hx_tmp41 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 695)						_hx_tmp41 = true;
            					}
HXDLIN( 695)					if (!(_hx_tmp41)) {
HXLINE( 695)						int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)						_hx_tmp40 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 695)						_hx_tmp40 = true;
            					}
HXDLIN( 695)					if (!(_hx_tmp40)) {
HXLINE( 695)						_hx_tmp39 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 695)						_hx_tmp39 = true;
            					}
HXDLIN( 695)					if (_hx_tmp39) {
HXLINE( 695)						 ::vision::ds::ImageView v3 = null();
HXDLIN( 695)						bool _hx_tmp43;
HXDLIN( 695)						bool _hx_tmp44;
HXDLIN( 695)						bool _hx_tmp45;
HXDLIN( 695)						bool _hx_tmp46;
HXDLIN( 695)						bool _hx_tmp47;
HXDLIN( 695)						bool _hx_tmp48;
HXDLIN( 695)						int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 695)						if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE( 695)							int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)							_hx_tmp48 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 695)							_hx_tmp48 = true;
            						}
HXDLIN( 695)						if (!(_hx_tmp48)) {
HXLINE( 695)							int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 695)							_hx_tmp47 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 695)							_hx_tmp47 = true;
            						}
HXDLIN( 695)						if (!(_hx_tmp47)) {
HXLINE( 695)							int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)							_hx_tmp46 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 695)							_hx_tmp46 = true;
            						}
HXDLIN( 695)						if (!(_hx_tmp46)) {
HXLINE( 695)							_hx_tmp45 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 695)							_hx_tmp45 = true;
            						}
HXDLIN( 695)						if (!(_hx_tmp45)) {
HXLINE( 695)							_hx_tmp44 = ::hx::IsNull( v3 );
            						}
            						else {
HXLINE( 695)							_hx_tmp44 = false;
            						}
HXDLIN( 695)						if (_hx_tmp44) {
HXLINE( 695)							bool _hx_tmp49;
HXDLIN( 695)							bool _hx_tmp50;
HXDLIN( 695)							if ((x24 >= 0)) {
HXLINE( 695)								_hx_tmp50 = (y24 >= 0);
            							}
            							else {
HXLINE( 695)								_hx_tmp50 = false;
            							}
HXDLIN( 695)							if (_hx_tmp50) {
HXLINE( 695)								_hx_tmp49 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 695)								_hx_tmp49 = false;
            							}
HXDLIN( 695)							if (_hx_tmp49) {
HXLINE( 695)								_hx_tmp43 = (y24 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 695)								_hx_tmp43 = false;
            							}
            						}
            						else {
HXLINE( 695)							bool has24 = false;
HXDLIN( 695)							 ::vision::ds::ImageView view3;
HXDLIN( 695)							if (::hx::IsNotNull( v3 )) {
HXLINE( 695)								view3 = v3;
            							}
            							else {
HXLINE( 695)								int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 695)								int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)								int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 695)								int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 695)								view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 695)							switch((int)(view3->shape)){
            								case (int)0: {
HXLINE( 695)									bool has25;
HXDLIN( 695)									bool has26;
HXDLIN( 695)									if ((x24 < (view3->x + view3->width))) {
HXLINE( 695)										has26 = (y24 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 695)										has26 = false;
            									}
HXDLIN( 695)									if (has26) {
HXLINE( 695)										has25 = (x24 >= view3->x);
            									}
            									else {
HXLINE( 695)										has25 = false;
            									}
HXDLIN( 695)									if (has25) {
HXLINE( 695)										has24 = (y24 >= view3->y);
            									}
            									else {
HXLINE( 695)										has24 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 695)									bool has27;
HXDLIN( 695)									bool has28;
HXDLIN( 695)									bool has29;
HXDLIN( 695)									if ((x24 < (view3->x + view3->width))) {
HXLINE( 695)										has29 = (y24 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 695)										has29 = false;
            									}
HXDLIN( 695)									if (has29) {
HXLINE( 695)										has28 = (x24 >= view3->x);
            									}
            									else {
HXLINE( 695)										has28 = false;
            									}
HXDLIN( 695)									if (has28) {
HXLINE( 695)										has27 = (y24 >= view3->y);
            									}
            									else {
HXLINE( 695)										has27 = false;
            									}
HXLINE(1400)									has24 = !(has27);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 695)									if ((view3->width > view3->height)) {
HXLINE( 695)										Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 695)										Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 695)										Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN( 695)										Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN( 695)										Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 695)										Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN( 695)										Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 695)										::cpp::Int64 p6 = _hx_int64_make(x24,y24);
HXDLIN( 695)										Float x25 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN( 695)										Float y25 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN( 695)										Float has30 = ::Math_obj::sqrt(((x25 * x25) + (y25 * y25)));
HXDLIN( 695)										Float x26 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN( 695)										Float y26 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)										has24 = ((has30 + ::Math_obj::sqrt(((x26 * x26) + (y26 * y26)))) <= view3->width);
HXLINE( 695)										if ((view3->shape == 3)) {
HXLINE(1416)											has24 = !(has24);
            										}
            									}
            									else {
HXLINE( 695)										if ((view3->height > view3->width)) {
HXLINE( 695)											Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 695)											Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 695)											Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN( 695)											Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 695)											Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN( 695)											Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 695)											Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN( 695)											::cpp::Int64 p7 = _hx_int64_make(x24,y24);
HXDLIN( 695)											Float x27 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN( 695)											Float y27 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN( 695)											Float has31 = ::Math_obj::sqrt(((x27 * x27) + (y27 * y27)));
HXDLIN( 695)											Float x28 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN( 695)											Float y28 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)											has24 = ((has31 + ::Math_obj::sqrt(((x28 * x28) + (y28 * y28)))) <= view3->height);
HXLINE( 695)											if ((view3->shape == 3)) {
HXLINE(1425)												has24 = !(has24);
            											}
            										}
            										else {
HXLINE( 695)											Float point1_x3 = ( (Float)(x24) );
HXDLIN( 695)											Float point1_y3 = ( (Float)(y24) );
HXDLIN( 695)											Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 695)											Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 695)											Float x29 = (point2_x3 - point1_x3);
HXDLIN( 695)											Float y29 = (point2_y3 - point1_y3);
HXLINE(1428)											has24 = (::Math_obj::sqrt(((x29 * x29) + (y29 * y29))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE( 695)											if ((view3->shape == 3)) {
HXLINE(1429)												has24 = !(has24);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has24 = (((::Math_obj::abs((( (Float)((x24 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y24 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has24 = !((((::Math_obj::abs((( (Float)((x24 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y24 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 695)							_hx_tmp43 = has24;
            						}
HXDLIN( 695)						if (_hx_tmp43) {
HXLINE( 695)							int position6 = (((y24 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN( 695)							position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 695)							this1->b[position6] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 695)							this1->b[(position6 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 695)							this1->b[(position6 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 695)							this1->b[(position6 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 695)						int position7 = (((y24 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN( 695)						position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 695)						this1->b[position7] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 695)						this1->b[(position7 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 695)						this1->b[(position7 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 695)						this1->b[(position7 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
HXDLIN( 695)				bool _hx_tmp51;
HXDLIN( 695)				if ((x110 == x)) {
HXLINE( 695)					_hx_tmp51 = (y110 == y);
            				}
            				else {
HXLINE( 695)					_hx_tmp51 = false;
            				}
HXDLIN( 695)				if (_hx_tmp51) {
HXLINE( 695)					goto _hx_goto_187;
            				}
HXDLIN( 695)				Float e23 = (( (Float)(2) ) * err3);
HXDLIN( 695)				if ((e23 > -(dy3))) {
HXLINE( 695)					err3 = (err3 - dy3);
HXDLIN( 695)					x110 = (x110 + sx3);
            				}
HXDLIN( 695)				if ((e23 < dx3)) {
HXLINE( 695)					err3 = (err3 + dx3);
HXDLIN( 695)					y110 = (y110 + sy3);
            				}
            			}
            			_hx_goto_187:;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,drawRect,(void))

void Image_Impl__obj::drawQuadraticBezier( ::haxe::io::Bytes this1, ::vision::ds::Line2D line,::cpp::Int64 control,int color,::hx::Null< Float >  __o_accuracy){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(4)
            		::cpp::Int64 _hx_run(Float t,::cpp::Int64 p0,::cpp::Int64 p1,::cpp::Int64 p2){
            			HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_711_drawQuadraticBezier)
HXLINE( 712)			Float t2 = (t * t);
HXLINE( 713)			Float t3 = (t2 * t);
HXLINE( 714)			Float x = ((( (Float)(_hx_int64_high(p0)) ) * (( (Float)(1) ) - t)) * (( (Float)(1) ) - t));
HXDLIN( 714)			Float x1 = (x + ((( (Float)((_hx_int64_high(p1) * 2)) ) * t) * (( (Float)(1) ) - t)));
HXDLIN( 714)			Float x2 = (x1 + ((( (Float)(_hx_int64_high(p2)) ) * t) * t));
HXLINE( 717)			Float y = ((( (Float)(_hx_int64_low(p0)) ) * (( (Float)(1) ) - t)) * (( (Float)(1) ) - t));
HXDLIN( 717)			Float y1 = (y + ((( (Float)((_hx_int64_low(p1) * 2)) ) * t) * (( (Float)(1) ) - t)));
HXLINE( 714)			Float p_x = x2;
HXDLIN( 714)			Float p_y = (y1 + ((( (Float)(_hx_int64_low(p2)) ) * t) * t));
HXDLIN( 714)			int x3 = ::Std_obj::_hx_int(p_x);
HXDLIN( 714)			return _hx_int64_make(x3,::Std_obj::_hx_int(p_y));
            		}
            		HX_END_LOCAL_FUNC4(return)

            		Float accuracy = __o_accuracy.Default(1000);
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_710_drawQuadraticBezier)
HXLINE( 711)		 ::Dynamic bezier =  ::Dynamic(new _hx_Closure_0());
HXLINE( 722)		 ::vision::ds::Point2D p = line->start;
HXDLIN( 722)		int x = ::Std_obj::_hx_int(p->x);
HXDLIN( 722)		::cpp::Int64 p0 = _hx_int64_make(x,::Std_obj::_hx_int(p->y));
HXLINE( 723)		 ::vision::ds::Point2D p1 = line->end;
HXDLIN( 723)		int x1 = ::Std_obj::_hx_int(p1->x);
HXDLIN( 723)		::cpp::Int64 p11 = _hx_int64_make(x1,::Std_obj::_hx_int(p1->y));
HXLINE( 724)		Float p_x = ( (Float)(_hx_int64_high(control)) );
HXDLIN( 724)		Float p_y = ( (Float)(_hx_int64_low(control)) );
HXDLIN( 724)		int x2 = ::Std_obj::_hx_int(p_x);
HXDLIN( 724)		::cpp::Int64 p2 = _hx_int64_make(x2,::Std_obj::_hx_int(p_y));
HXLINE( 725)		Float i = ((Float)0.);
HXLINE( 726)		Float step = (( (Float)(1) ) / accuracy);
HXLINE( 727)		while((i <= 1)){
HXLINE( 728)			::cpp::Int64 p3 = ( (::cpp::Int64)(bezier(i,p0,p11,p2)) );
HXLINE( 729)			Float x3 = ( (Float)(_hx_int64_high(p3)) );
HXDLIN( 729)			Float y = ( (Float)(_hx_int64_low(p3)) );
HXDLIN( 729)			bool _hx_tmp;
HXDLIN( 729)			bool _hx_tmp1;
HXDLIN( 729)			bool _hx_tmp2;
HXDLIN( 729)			if ((x3 >= 0)) {
HXLINE( 729)				_hx_tmp2 = (y >= 0);
            			}
            			else {
HXLINE( 729)				_hx_tmp2 = false;
            			}
HXDLIN( 729)			if (_hx_tmp2) {
HXLINE( 729)				_hx_tmp1 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 729)				_hx_tmp1 = false;
            			}
HXDLIN( 729)			if (_hx_tmp1) {
HXLINE( 729)				_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 729)				_hx_tmp = false;
            			}
HXDLIN( 729)			if (_hx_tmp) {
HXLINE( 730)				int x4 = _hx_int64_high(p3);
HXDLIN( 730)				int y1 = _hx_int64_low(p3);
HXDLIN( 730)				bool _hx_tmp3;
HXDLIN( 730)				bool _hx_tmp4;
HXDLIN( 730)				bool _hx_tmp5;
HXDLIN( 730)				if ((x4 >= 0)) {
HXLINE( 730)					_hx_tmp5 = (y1 >= 0);
            				}
            				else {
HXLINE( 730)					_hx_tmp5 = false;
            				}
HXDLIN( 730)				if (_hx_tmp5) {
HXLINE( 730)					_hx_tmp4 = (x4 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 730)					_hx_tmp4 = false;
            				}
HXDLIN( 730)				if (_hx_tmp4) {
HXLINE( 730)					_hx_tmp3 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 730)					_hx_tmp3 = false;
            				}
HXDLIN( 730)				if (!(_hx_tmp3)) {
HXLINE( 730)					::cpp::Int64 this2 = _hx_int64_make(x4,y1);
HXDLIN( 730)					int _hx_tmp6 = _hx_int64_high(this2);
HXDLIN( 730)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 730)					bool _hx_tmp7;
HXDLIN( 730)					bool _hx_tmp8;
HXDLIN( 730)					bool _hx_tmp9;
HXDLIN( 730)					bool _hx_tmp10;
HXDLIN( 730)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 730)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 730)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)						_hx_tmp10 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 730)						_hx_tmp10 = true;
            					}
HXDLIN( 730)					if (!(_hx_tmp10)) {
HXLINE( 730)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 730)						_hx_tmp9 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 730)						_hx_tmp9 = true;
            					}
HXDLIN( 730)					if (!(_hx_tmp9)) {
HXLINE( 730)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)						_hx_tmp8 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 730)						_hx_tmp8 = true;
            					}
HXDLIN( 730)					if (!(_hx_tmp8)) {
HXLINE( 730)						_hx_tmp7 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 730)						_hx_tmp7 = true;
            					}
HXDLIN( 730)					if (_hx_tmp7) {
HXLINE( 730)						 ::vision::ds::ImageView v = null();
HXDLIN( 730)						bool _hx_tmp11;
HXDLIN( 730)						bool _hx_tmp12;
HXDLIN( 730)						bool _hx_tmp13;
HXDLIN( 730)						bool _hx_tmp14;
HXDLIN( 730)						bool _hx_tmp15;
HXDLIN( 730)						bool _hx_tmp16;
HXDLIN( 730)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 730)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 730)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)							_hx_tmp16 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 730)							_hx_tmp16 = true;
            						}
HXDLIN( 730)						if (!(_hx_tmp16)) {
HXLINE( 730)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 730)							_hx_tmp15 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 730)							_hx_tmp15 = true;
            						}
HXDLIN( 730)						if (!(_hx_tmp15)) {
HXLINE( 730)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)							_hx_tmp14 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 730)							_hx_tmp14 = true;
            						}
HXDLIN( 730)						if (!(_hx_tmp14)) {
HXLINE( 730)							_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 730)							_hx_tmp13 = true;
            						}
HXDLIN( 730)						if (!(_hx_tmp13)) {
HXLINE( 730)							_hx_tmp12 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 730)							_hx_tmp12 = false;
            						}
HXDLIN( 730)						if (_hx_tmp12) {
HXLINE( 730)							bool _hx_tmp17;
HXDLIN( 730)							bool _hx_tmp18;
HXDLIN( 730)							if ((x4 >= 0)) {
HXLINE( 730)								_hx_tmp18 = (y1 >= 0);
            							}
            							else {
HXLINE( 730)								_hx_tmp18 = false;
            							}
HXDLIN( 730)							if (_hx_tmp18) {
HXLINE( 730)								_hx_tmp17 = (x4 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 730)								_hx_tmp17 = false;
            							}
HXDLIN( 730)							if (_hx_tmp17) {
HXLINE( 730)								_hx_tmp11 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 730)								_hx_tmp11 = false;
            							}
            						}
            						else {
HXLINE( 730)							bool has = false;
HXDLIN( 730)							 ::vision::ds::ImageView view;
HXDLIN( 730)							if (::hx::IsNotNull( v )) {
HXLINE( 730)								view = v;
            							}
            							else {
HXLINE( 730)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 730)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 730)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 730)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 730)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 730)									bool has1;
HXDLIN( 730)									bool has2;
HXDLIN( 730)									if ((x4 < (view->x + view->width))) {
HXLINE( 730)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 730)										has2 = false;
            									}
HXDLIN( 730)									if (has2) {
HXLINE( 730)										has1 = (x4 >= view->x);
            									}
            									else {
HXLINE( 730)										has1 = false;
            									}
HXDLIN( 730)									if (has1) {
HXLINE( 730)										has = (y1 >= view->y);
            									}
            									else {
HXLINE( 730)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 730)									bool has3;
HXDLIN( 730)									bool has4;
HXDLIN( 730)									bool has5;
HXDLIN( 730)									if ((x4 < (view->x + view->width))) {
HXLINE( 730)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 730)										has5 = false;
            									}
HXDLIN( 730)									if (has5) {
HXLINE( 730)										has4 = (x4 >= view->x);
            									}
            									else {
HXLINE( 730)										has4 = false;
            									}
HXDLIN( 730)									if (has4) {
HXLINE( 730)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE( 730)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 730)									if ((view->width > view->height)) {
HXLINE( 730)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 730)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 730)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 730)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 730)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 730)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 730)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 730)										::cpp::Int64 p4 = _hx_int64_make(x4,y1);
HXDLIN( 730)										Float x5 = (( (Float)(_hx_int64_high(p4)) ) - f1_x);
HXDLIN( 730)										Float y2 = (( (Float)(_hx_int64_low(p4)) ) - f1_y);
HXDLIN( 730)										Float has6 = ::Math_obj::sqrt(((x5 * x5) + (y2 * y2)));
HXDLIN( 730)										Float x6 = (( (Float)(_hx_int64_high(p4)) ) - f2_x);
HXDLIN( 730)										Float y3 = (( (Float)(_hx_int64_low(p4)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x6 * x6) + (y3 * y3)))) <= view->width);
HXLINE( 730)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 730)										if ((view->height > view->width)) {
HXLINE( 730)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 730)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 730)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 730)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 730)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 730)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 730)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 730)											::cpp::Int64 p5 = _hx_int64_make(x4,y1);
HXDLIN( 730)											Float x7 = (( (Float)(_hx_int64_high(p5)) ) - f1_x1);
HXDLIN( 730)											Float y4 = (( (Float)(_hx_int64_low(p5)) ) - f1_y1);
HXDLIN( 730)											Float has7 = ::Math_obj::sqrt(((x7 * x7) + (y4 * y4)));
HXDLIN( 730)											Float x8 = (( (Float)(_hx_int64_high(p5)) ) - f2_x1);
HXDLIN( 730)											Float y5 = (( (Float)(_hx_int64_low(p5)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x8 * x8) + (y5 * y5)))) <= view->height);
HXLINE( 730)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 730)											Float point1_x = ( (Float)(x4) );
HXDLIN( 730)											Float point1_y = ( (Float)(y1) );
HXDLIN( 730)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 730)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 730)											Float x9 = (point2_x - point1_x);
HXDLIN( 730)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x9 * x9) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 730)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x4 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x4 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 730)							_hx_tmp11 = has;
            						}
HXDLIN( 730)						if (_hx_tmp11) {
HXLINE( 730)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN( 730)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 730)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 730)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 730)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 730)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 730)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN( 730)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 730)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 730)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 730)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 730)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 732)			i = (i + step);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_Impl__obj,drawQuadraticBezier,(void))

void Image_Impl__obj::drawCubicBezier( ::haxe::io::Bytes this1, ::vision::ds::Line2D line,::cpp::Int64 control1,::cpp::Int64 control2,int color, ::Dynamic __o_accuracy){
            		 ::Dynamic accuracy = __o_accuracy;
            		if (::hx::IsNull(__o_accuracy)) accuracy = 1000;
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_749_drawCubicBezier)
HXLINE( 765)		Float i = ((Float)0.);
HXLINE( 766)		Float step = (( (Float)(1) ) / ( (Float)(accuracy) ));
HXLINE( 767)		while((i < 1)){
HXLINE( 769)			 ::vision::ds::Point2D p = line->start;
HXDLIN( 769)			int x = ::Std_obj::_hx_int(p->x);
HXDLIN( 769)			::cpp::Int64 p0 = _hx_int64_make(x,::Std_obj::_hx_int(p->y));
HXDLIN( 769)			 ::vision::ds::Point2D p1 = line->end;
HXDLIN( 769)			int x1 = ::Std_obj::_hx_int(p1->x);
HXDLIN( 769)			::cpp::Int64 p11 = _hx_int64_make(x1,::Std_obj::_hx_int(p1->y));
HXDLIN( 769)			int cX = _hx_int64_high(p11);
HXDLIN( 769)			int cX1 = (3 * (cX - _hx_int64_high(p0)));
HXDLIN( 769)			int bX = _hx_int64_high(control1);
HXDLIN( 769)			int bX1 = ((3 * (bX - _hx_int64_high(p11))) - cX1);
HXDLIN( 769)			int aX = _hx_int64_high(control2);
HXDLIN( 769)			int aX1 = (((aX - _hx_int64_high(p0)) - cX1) - bX1);
HXDLIN( 769)			int cY = _hx_int64_low(p11);
HXDLIN( 769)			int cY1 = (3 * (cY - _hx_int64_low(p0)));
HXDLIN( 769)			int bY = _hx_int64_low(control1);
HXDLIN( 769)			int bY1 = ((3 * (bY - _hx_int64_low(p11))) - cY1);
HXDLIN( 769)			int aY = _hx_int64_low(control2);
HXDLIN( 769)			int aY1 = (((aY - _hx_int64_low(p0)) - cY1) - bY1);
HXDLIN( 769)			Float x2 = (((( (Float)(aX1) ) * ::Math_obj::pow(i,( (Float)(3) ))) + (( (Float)(bX1) ) * ::Math_obj::pow(i,( (Float)(2) )))) + (( (Float)(cX1) ) * i));
HXDLIN( 769)			Float x3 = (x2 + _hx_int64_high(p0));
HXDLIN( 769)			Float y = (((( (Float)(aY1) ) * ::Math_obj::pow(i,( (Float)(3) ))) + (( (Float)(bY1) ) * ::Math_obj::pow(i,( (Float)(2) )))) + (( (Float)(cY1) ) * i));
HXDLIN( 769)			Float y1 = (y + _hx_int64_low(p0));
HXDLIN( 769)			Float p_x = x3;
HXDLIN( 769)			Float p_y = y1;
HXDLIN( 769)			int x4 = ::Std_obj::_hx_int(p_x);
HXLINE( 768)			::cpp::Int64 p2 = _hx_int64_make(x4,::Std_obj::_hx_int(p_y));
HXLINE( 770)			Float x5 = ( (Float)(_hx_int64_high(p2)) );
HXDLIN( 770)			Float y2 = ( (Float)(_hx_int64_low(p2)) );
HXDLIN( 770)			bool _hx_tmp;
HXDLIN( 770)			bool _hx_tmp1;
HXDLIN( 770)			bool _hx_tmp2;
HXDLIN( 770)			if ((x5 >= 0)) {
HXLINE( 770)				_hx_tmp2 = (y2 >= 0);
            			}
            			else {
HXLINE( 770)				_hx_tmp2 = false;
            			}
HXDLIN( 770)			if (_hx_tmp2) {
HXLINE( 770)				_hx_tmp1 = (x5 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 770)				_hx_tmp1 = false;
            			}
HXDLIN( 770)			if (_hx_tmp1) {
HXLINE( 770)				_hx_tmp = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 770)				_hx_tmp = false;
            			}
HXDLIN( 770)			if (_hx_tmp) {
HXLINE( 771)				int x6 = _hx_int64_high(p2);
HXDLIN( 771)				int y3 = _hx_int64_low(p2);
HXDLIN( 771)				bool _hx_tmp3;
HXDLIN( 771)				bool _hx_tmp4;
HXDLIN( 771)				bool _hx_tmp5;
HXDLIN( 771)				if ((x6 >= 0)) {
HXLINE( 771)					_hx_tmp5 = (y3 >= 0);
            				}
            				else {
HXLINE( 771)					_hx_tmp5 = false;
            				}
HXDLIN( 771)				if (_hx_tmp5) {
HXLINE( 771)					_hx_tmp4 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 771)					_hx_tmp4 = false;
            				}
HXDLIN( 771)				if (_hx_tmp4) {
HXLINE( 771)					_hx_tmp3 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 771)					_hx_tmp3 = false;
            				}
HXDLIN( 771)				if (!(_hx_tmp3)) {
HXLINE( 771)					::cpp::Int64 this2 = _hx_int64_make(x6,y3);
HXDLIN( 771)					int _hx_tmp6 = _hx_int64_high(this2);
HXDLIN( 771)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 771)					bool _hx_tmp7;
HXDLIN( 771)					bool _hx_tmp8;
HXDLIN( 771)					bool _hx_tmp9;
HXDLIN( 771)					bool _hx_tmp10;
HXDLIN( 771)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 771)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 771)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)						_hx_tmp10 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 771)						_hx_tmp10 = true;
            					}
HXDLIN( 771)					if (!(_hx_tmp10)) {
HXLINE( 771)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 771)						_hx_tmp9 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 771)						_hx_tmp9 = true;
            					}
HXDLIN( 771)					if (!(_hx_tmp9)) {
HXLINE( 771)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)						_hx_tmp8 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 771)						_hx_tmp8 = true;
            					}
HXDLIN( 771)					if (!(_hx_tmp8)) {
HXLINE( 771)						_hx_tmp7 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 771)						_hx_tmp7 = true;
            					}
HXDLIN( 771)					if (_hx_tmp7) {
HXLINE( 771)						 ::vision::ds::ImageView v = null();
HXDLIN( 771)						bool _hx_tmp11;
HXDLIN( 771)						bool _hx_tmp12;
HXDLIN( 771)						bool _hx_tmp13;
HXDLIN( 771)						bool _hx_tmp14;
HXDLIN( 771)						bool _hx_tmp15;
HXDLIN( 771)						bool _hx_tmp16;
HXDLIN( 771)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 771)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 771)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)							_hx_tmp16 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 771)							_hx_tmp16 = true;
            						}
HXDLIN( 771)						if (!(_hx_tmp16)) {
HXLINE( 771)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 771)							_hx_tmp15 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 771)							_hx_tmp15 = true;
            						}
HXDLIN( 771)						if (!(_hx_tmp15)) {
HXLINE( 771)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)							_hx_tmp14 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 771)							_hx_tmp14 = true;
            						}
HXDLIN( 771)						if (!(_hx_tmp14)) {
HXLINE( 771)							_hx_tmp13 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 771)							_hx_tmp13 = true;
            						}
HXDLIN( 771)						if (!(_hx_tmp13)) {
HXLINE( 771)							_hx_tmp12 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 771)							_hx_tmp12 = false;
            						}
HXDLIN( 771)						if (_hx_tmp12) {
HXLINE( 771)							bool _hx_tmp17;
HXDLIN( 771)							bool _hx_tmp18;
HXDLIN( 771)							if ((x6 >= 0)) {
HXLINE( 771)								_hx_tmp18 = (y3 >= 0);
            							}
            							else {
HXLINE( 771)								_hx_tmp18 = false;
            							}
HXDLIN( 771)							if (_hx_tmp18) {
HXLINE( 771)								_hx_tmp17 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 771)								_hx_tmp17 = false;
            							}
HXDLIN( 771)							if (_hx_tmp17) {
HXLINE( 771)								_hx_tmp11 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 771)								_hx_tmp11 = false;
            							}
            						}
            						else {
HXLINE( 771)							bool has = false;
HXDLIN( 771)							 ::vision::ds::ImageView view;
HXDLIN( 771)							if (::hx::IsNotNull( v )) {
HXLINE( 771)								view = v;
            							}
            							else {
HXLINE( 771)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 771)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 771)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 771)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 771)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 771)									bool has1;
HXDLIN( 771)									bool has2;
HXDLIN( 771)									if ((x6 < (view->x + view->width))) {
HXLINE( 771)										has2 = (y3 < (view->y + view->height));
            									}
            									else {
HXLINE( 771)										has2 = false;
            									}
HXDLIN( 771)									if (has2) {
HXLINE( 771)										has1 = (x6 >= view->x);
            									}
            									else {
HXLINE( 771)										has1 = false;
            									}
HXDLIN( 771)									if (has1) {
HXLINE( 771)										has = (y3 >= view->y);
            									}
            									else {
HXLINE( 771)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 771)									bool has3;
HXDLIN( 771)									bool has4;
HXDLIN( 771)									bool has5;
HXDLIN( 771)									if ((x6 < (view->x + view->width))) {
HXLINE( 771)										has5 = (y3 < (view->y + view->height));
            									}
            									else {
HXLINE( 771)										has5 = false;
            									}
HXDLIN( 771)									if (has5) {
HXLINE( 771)										has4 = (x6 >= view->x);
            									}
            									else {
HXLINE( 771)										has4 = false;
            									}
HXDLIN( 771)									if (has4) {
HXLINE( 771)										has3 = (y3 >= view->y);
            									}
            									else {
HXLINE( 771)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 771)									if ((view->width > view->height)) {
HXLINE( 771)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 771)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 771)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 771)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 771)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 771)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 771)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 771)										::cpp::Int64 p3 = _hx_int64_make(x6,y3);
HXDLIN( 771)										Float x7 = (( (Float)(_hx_int64_high(p3)) ) - f1_x);
HXDLIN( 771)										Float y4 = (( (Float)(_hx_int64_low(p3)) ) - f1_y);
HXDLIN( 771)										Float has6 = ::Math_obj::sqrt(((x7 * x7) + (y4 * y4)));
HXDLIN( 771)										Float x8 = (( (Float)(_hx_int64_high(p3)) ) - f2_x);
HXDLIN( 771)										Float y5 = (( (Float)(_hx_int64_low(p3)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x8 * x8) + (y5 * y5)))) <= view->width);
HXLINE( 771)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 771)										if ((view->height > view->width)) {
HXLINE( 771)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 771)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 771)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 771)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 771)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 771)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 771)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 771)											::cpp::Int64 p4 = _hx_int64_make(x6,y3);
HXDLIN( 771)											Float x9 = (( (Float)(_hx_int64_high(p4)) ) - f1_x1);
HXDLIN( 771)											Float y6 = (( (Float)(_hx_int64_low(p4)) ) - f1_y1);
HXDLIN( 771)											Float has7 = ::Math_obj::sqrt(((x9 * x9) + (y6 * y6)));
HXDLIN( 771)											Float x10 = (( (Float)(_hx_int64_high(p4)) ) - f2_x1);
HXDLIN( 771)											Float y7 = (( (Float)(_hx_int64_low(p4)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x10 * x10) + (y7 * y7)))) <= view->height);
HXLINE( 771)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 771)											Float point1_x = ( (Float)(x6) );
HXDLIN( 771)											Float point1_y = ( (Float)(y3) );
HXDLIN( 771)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 771)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 771)											Float x11 = (point2_x - point1_x);
HXDLIN( 771)											Float y8 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x11 * x11) + (y8 * y8))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 771)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 771)							_hx_tmp11 = has;
            						}
HXDLIN( 771)						if (_hx_tmp11) {
HXLINE( 771)							int position = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN( 771)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 771)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 771)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 771)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 771)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 771)						int position1 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN( 771)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 771)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 771)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 771)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 771)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 773)			i = (i + step);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,drawCubicBezier,(void))

void Image_Impl__obj::fillCircle( ::haxe::io::Bytes this1,int X,int Y,int r,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_804_fillCircle)
HXLINE( 805)		::Array< ::cpp::Int64 > points = ::Array_obj< ::cpp::Int64 >::__new(0);
HXLINE( 806)		int x = -(r);
HXDLIN( 806)		int y = 0;
HXDLIN( 806)		int err = (2 - (2 * r));
HXLINE( 807)		do {
HXLINE( 808)			Float p_x = ( (Float)((X + x)) );
HXDLIN( 808)			Float p_y = ( (Float)((Y - y)) );
HXDLIN( 808)			int x1 = ::Std_obj::_hx_int(p_x);
HXDLIN( 808)			points->push(_hx_int64_make(x1,::Std_obj::_hx_int(p_y)));
HXLINE( 809)			Float p_x1 = ( (Float)((X - x)) );
HXDLIN( 809)			Float p_y1 = ( (Float)((Y + y)) );
HXDLIN( 809)			int x2 = ::Std_obj::_hx_int(p_x1);
HXDLIN( 809)			points->push(_hx_int64_make(x2,::Std_obj::_hx_int(p_y1)));
HXLINE( 810)			Float p_x2 = ( (Float)((X - y)) );
HXDLIN( 810)			Float p_y2 = ( (Float)((Y - x)) );
HXDLIN( 810)			int x3 = ::Std_obj::_hx_int(p_x2);
HXDLIN( 810)			points->push(_hx_int64_make(x3,::Std_obj::_hx_int(p_y2)));
HXLINE( 811)			Float p_x3 = ( (Float)((X + y)) );
HXDLIN( 811)			Float p_y3 = ( (Float)((Y + x)) );
HXDLIN( 811)			int x4 = ::Std_obj::_hx_int(p_x3);
HXDLIN( 811)			points->push(_hx_int64_make(x4,::Std_obj::_hx_int(p_y3)));
HXLINE( 812)			r = err;
HXLINE( 813)			if ((r <= y)) {
HXLINE( 814)				y = (y + 1);
HXDLIN( 814)				err = (err + ((y * 2) + 1));
            			}
HXLINE( 816)			bool _hx_tmp;
HXDLIN( 816)			if ((r <= x)) {
HXLINE( 816)				_hx_tmp = (err > y);
            			}
            			else {
HXLINE( 816)				_hx_tmp = true;
            			}
HXDLIN( 816)			if (_hx_tmp) {
HXLINE( 817)				x = (x + 1);
HXDLIN( 817)				err = (err + ((x * 2) + 1));
            			}
            		} while((x < 0));
;
HXLINE( 821)		::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 822)		{
HXLINE( 822)			int _g = 0;
HXDLIN( 822)			while((_g < points->length)){
HXLINE( 822)				::cpp::Int64 p = points->__get(_g);
HXDLIN( 822)				_g = (_g + 1);
HXLINE( 823)				if (::hx::IsNull( values->__get(_hx_int64_high(p)).StaticCast< ::Array< int > >() )) {
HXLINE( 823)					values[_hx_int64_high(p)] = ::Array_obj< int >::__new(0);
            				}
HXLINE( 824)				::Array< int > values1 = values->__get(_hx_int64_high(p)).StaticCast< ::Array< int > >();
HXDLIN( 824)				values1->push(_hx_int64_low(p));
            			}
            		}
HXLINE( 827)		{
HXLINE( 827)			int _g1 = 0;
HXDLIN( 827)			int _g2 = values->length;
HXDLIN( 827)			while((_g1 < _g2)){
HXLINE( 827)				_g1 = (_g1 + 1);
HXDLIN( 827)				int y1 = (_g1 - 1);
HXLINE( 828)				if (::hx::IsNull( values->__get(y1).StaticCast< ::Array< int > >() )) {
HXLINE( 828)					continue;
            				}
HXLINE( 829)				::Array< int > values2 = values->__get(y1).StaticCast< ::Array< int > >();
HXDLIN( 829)				int min = values2->__get(0);
HXDLIN( 829)				{
HXLINE( 829)					int _g3 = 0;
HXDLIN( 829)					int _g4 = values2->length;
HXDLIN( 829)					while((_g3 < _g4)){
HXLINE( 829)						_g3 = (_g3 + 1);
HXDLIN( 829)						int i = (_g3 - 1);
HXDLIN( 829)						if ((values2->__get(i) < min)) {
HXLINE( 661)							min = values2->__get(i);
            						}
            					}
            				}
HXLINE( 829)				int min1 = min;
HXLINE( 830)				::Array< int > values3 = values->__get(y1).StaticCast< ::Array< int > >();
HXDLIN( 830)				int max = values3->__get(0);
HXDLIN( 830)				{
HXLINE( 830)					int _g5 = 0;
HXDLIN( 830)					int _g6 = values3->length;
HXDLIN( 830)					while((_g5 < _g6)){
HXLINE( 830)						_g5 = (_g5 + 1);
HXDLIN( 830)						int i1 = (_g5 - 1);
HXDLIN( 830)						if ((values3->__get(i1) > max)) {
HXLINE( 697)							max = values3->__get(i1);
            						}
            					}
            				}
HXLINE( 830)				int max1 = max;
HXLINE( 831)				{
HXLINE( 831)					int _g7 = min1;
HXDLIN( 831)					int _g8 = (max1 + 1);
HXDLIN( 831)					while((_g7 < _g8)){
HXLINE( 831)						_g7 = (_g7 + 1);
HXDLIN( 831)						int i2 = (_g7 - 1);
HXDLIN( 831)						bool _hx_tmp1;
HXDLIN( 831)						bool _hx_tmp2;
HXDLIN( 831)						bool _hx_tmp3;
HXDLIN( 831)						if ((i2 >= 0)) {
HXLINE( 831)							_hx_tmp3 = (y1 >= 0);
            						}
            						else {
HXLINE( 831)							_hx_tmp3 = false;
            						}
HXDLIN( 831)						if (_hx_tmp3) {
HXLINE( 831)							_hx_tmp2 = (i2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE( 831)							_hx_tmp2 = false;
            						}
HXDLIN( 831)						if (_hx_tmp2) {
HXLINE( 831)							_hx_tmp1 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE( 831)							_hx_tmp1 = false;
            						}
HXDLIN( 831)						if (!(_hx_tmp1)) {
HXLINE( 831)							::cpp::Int64 this2 = _hx_int64_make(i2,y1);
HXDLIN( 831)							int _hx_tmp4 = _hx_int64_high(this2);
HXDLIN( 831)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_int64_low(this2))));
            						}
            						else {
HXLINE( 831)							bool _hx_tmp5;
HXDLIN( 831)							bool _hx_tmp6;
HXDLIN( 831)							bool _hx_tmp7;
HXDLIN( 831)							bool _hx_tmp8;
HXDLIN( 831)							int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 831)							if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 831)								int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)								_hx_tmp8 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 831)								_hx_tmp8 = true;
            							}
HXDLIN( 831)							if (!(_hx_tmp8)) {
HXLINE( 831)								int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 831)								_hx_tmp7 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 831)								_hx_tmp7 = true;
            							}
HXDLIN( 831)							if (!(_hx_tmp7)) {
HXLINE( 831)								int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)								_hx_tmp6 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            							}
            							else {
HXLINE( 831)								_hx_tmp6 = true;
            							}
HXDLIN( 831)							if (!(_hx_tmp6)) {
HXLINE( 831)								_hx_tmp5 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            							}
            							else {
HXLINE( 831)								_hx_tmp5 = true;
            							}
HXDLIN( 831)							if (_hx_tmp5) {
HXLINE( 831)								 ::vision::ds::ImageView v = null();
HXDLIN( 831)								bool _hx_tmp9;
HXDLIN( 831)								bool _hx_tmp10;
HXDLIN( 831)								bool _hx_tmp11;
HXDLIN( 831)								bool _hx_tmp12;
HXDLIN( 831)								bool _hx_tmp13;
HXDLIN( 831)								bool _hx_tmp14;
HXDLIN( 831)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 831)								if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 831)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)									_hx_tmp14 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 831)									_hx_tmp14 = true;
            								}
HXDLIN( 831)								if (!(_hx_tmp14)) {
HXLINE( 831)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 831)									_hx_tmp13 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 831)									_hx_tmp13 = true;
            								}
HXDLIN( 831)								if (!(_hx_tmp13)) {
HXLINE( 831)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)									_hx_tmp12 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE( 831)									_hx_tmp12 = true;
            								}
HXDLIN( 831)								if (!(_hx_tmp12)) {
HXLINE( 831)									_hx_tmp11 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE( 831)									_hx_tmp11 = true;
            								}
HXDLIN( 831)								if (!(_hx_tmp11)) {
HXLINE( 831)									_hx_tmp10 = ::hx::IsNull( v );
            								}
            								else {
HXLINE( 831)									_hx_tmp10 = false;
            								}
HXDLIN( 831)								if (_hx_tmp10) {
HXLINE( 831)									bool _hx_tmp15;
HXDLIN( 831)									bool _hx_tmp16;
HXDLIN( 831)									if ((i2 >= 0)) {
HXLINE( 831)										_hx_tmp16 = (y1 >= 0);
            									}
            									else {
HXLINE( 831)										_hx_tmp16 = false;
            									}
HXDLIN( 831)									if (_hx_tmp16) {
HXLINE( 831)										_hx_tmp15 = (i2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE( 831)										_hx_tmp15 = false;
            									}
HXDLIN( 831)									if (_hx_tmp15) {
HXLINE( 831)										_hx_tmp9 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE( 831)										_hx_tmp9 = false;
            									}
            								}
            								else {
HXLINE( 831)									bool has = false;
HXDLIN( 831)									 ::vision::ds::ImageView view;
HXDLIN( 831)									if (::hx::IsNotNull( v )) {
HXLINE( 831)										view = v;
            									}
            									else {
HXLINE( 831)										int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 831)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 831)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 831)										view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            									}
HXDLIN( 831)									switch((int)(view->shape)){
            										case (int)0: {
HXLINE( 831)											bool has1;
HXDLIN( 831)											bool has2;
HXDLIN( 831)											if ((i2 < (view->x + view->width))) {
HXLINE( 831)												has2 = (y1 < (view->y + view->height));
            											}
            											else {
HXLINE( 831)												has2 = false;
            											}
HXDLIN( 831)											if (has2) {
HXLINE( 831)												has1 = (i2 >= view->x);
            											}
            											else {
HXLINE( 831)												has1 = false;
            											}
HXDLIN( 831)											if (has1) {
HXLINE( 831)												has = (y1 >= view->y);
            											}
            											else {
HXLINE( 831)												has = false;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 831)											bool has3;
HXDLIN( 831)											bool has4;
HXDLIN( 831)											bool has5;
HXDLIN( 831)											if ((i2 < (view->x + view->width))) {
HXLINE( 831)												has5 = (y1 < (view->y + view->height));
            											}
            											else {
HXLINE( 831)												has5 = false;
            											}
HXDLIN( 831)											if (has5) {
HXLINE( 831)												has4 = (i2 >= view->x);
            											}
            											else {
HXLINE( 831)												has4 = false;
            											}
HXDLIN( 831)											if (has4) {
HXLINE( 831)												has3 = (y1 >= view->y);
            											}
            											else {
HXLINE( 831)												has3 = false;
            											}
HXLINE(1400)											has = !(has3);
            										}
            										break;
            										case (int)2: case (int)3: {
HXLINE( 831)											if ((view->width > view->height)) {
HXLINE( 831)												Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 831)												Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 831)												Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 831)												Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 831)												Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 831)												Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 831)												Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 831)												::cpp::Int64 p1 = _hx_int64_make(i2,y1);
HXDLIN( 831)												Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f1_x);
HXDLIN( 831)												Float y2 = (( (Float)(_hx_int64_low(p1)) ) - f1_y);
HXDLIN( 831)												Float has6 = ::Math_obj::sqrt(((x5 * x5) + (y2 * y2)));
HXDLIN( 831)												Float x6 = (( (Float)(_hx_int64_high(p1)) ) - f2_x);
HXDLIN( 831)												Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f2_y);
HXLINE(1415)												has = ((has6 + ::Math_obj::sqrt(((x6 * x6) + (y3 * y3)))) <= view->width);
HXLINE( 831)												if ((view->shape == 3)) {
HXLINE(1416)													has = !(has);
            												}
            											}
            											else {
HXLINE( 831)												if ((view->height > view->width)) {
HXLINE( 831)													Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 831)													Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 831)													Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 831)													Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 831)													Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 831)													Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 831)													Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 831)													::cpp::Int64 p2 = _hx_int64_make(i2,y1);
HXDLIN( 831)													Float x7 = (( (Float)(_hx_int64_high(p2)) ) - f1_x1);
HXDLIN( 831)													Float y4 = (( (Float)(_hx_int64_low(p2)) ) - f1_y1);
HXDLIN( 831)													Float has7 = ::Math_obj::sqrt(((x7 * x7) + (y4 * y4)));
HXDLIN( 831)													Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f2_x1);
HXDLIN( 831)													Float y5 = (( (Float)(_hx_int64_low(p2)) ) - f2_y1);
HXLINE(1424)													has = ((has7 + ::Math_obj::sqrt(((x8 * x8) + (y5 * y5)))) <= view->height);
HXLINE( 831)													if ((view->shape == 3)) {
HXLINE(1425)														has = !(has);
            													}
            												}
            												else {
HXLINE( 831)													Float point1_x = ( (Float)(i2) );
HXDLIN( 831)													Float point1_y = ( (Float)(y1) );
HXDLIN( 831)													Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 831)													Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 831)													Float x9 = (point2_x - point1_x);
HXDLIN( 831)													Float y6 = (point2_y - point1_y);
HXLINE(1428)													has = (::Math_obj::sqrt(((x9 * x9) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 831)													if ((view->shape == 3)) {
HXLINE(1429)														has = !(has);
            													}
            												}
            											}
            										}
            										break;
            										case (int)4: {
HXLINE(1401)											has = (((::Math_obj::abs((( (Float)((i2 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            										}
            										break;
            										case (int)5: {
HXLINE(1402)											has = !((((::Math_obj::abs((( (Float)((i2 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            										}
            										break;
            									}
HXLINE( 831)									_hx_tmp9 = has;
            								}
HXDLIN( 831)								if (_hx_tmp9) {
HXLINE( 831)									int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + i2) * 4);
HXDLIN( 831)									position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 831)									this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 831)									this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 831)									this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 831)									this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            							else {
HXLINE( 831)								int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + i2) * 4);
HXDLIN( 831)								position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 831)								this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 831)								this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 831)								this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 831)								this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_Impl__obj,fillCircle,(void))

void Image_Impl__obj::drawCircle( ::haxe::io::Bytes this1,int X,int Y,int r,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_847_drawCircle)
HXLINE( 848)		int x = -(r);
HXDLIN( 848)		int y = 0;
HXDLIN( 848)		int err = (2 - (2 * r));
HXLINE( 849)		do {
HXLINE( 850)			{
HXLINE( 850)				int x1 = (X + x);
HXDLIN( 850)				int y1 = (Y - y);
HXDLIN( 850)				bool _hx_tmp;
HXDLIN( 850)				bool _hx_tmp1;
HXDLIN( 850)				bool _hx_tmp2;
HXDLIN( 850)				if ((x1 >= 0)) {
HXLINE( 850)					_hx_tmp2 = (y1 >= 0);
            				}
            				else {
HXLINE( 850)					_hx_tmp2 = false;
            				}
HXDLIN( 850)				if (_hx_tmp2) {
HXLINE( 850)					_hx_tmp1 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 850)					_hx_tmp1 = false;
            				}
HXDLIN( 850)				if (_hx_tmp1) {
HXLINE( 850)					_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 850)					_hx_tmp = false;
            				}
HXDLIN( 850)				if (!(_hx_tmp)) {
HXLINE( 850)					::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 850)					int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 850)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 850)					bool _hx_tmp4;
HXDLIN( 850)					bool _hx_tmp5;
HXDLIN( 850)					bool _hx_tmp6;
HXDLIN( 850)					bool _hx_tmp7;
HXDLIN( 850)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 850)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 850)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)						_hx_tmp7 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 850)						_hx_tmp7 = true;
            					}
HXDLIN( 850)					if (!(_hx_tmp7)) {
HXLINE( 850)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 850)						_hx_tmp6 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 850)						_hx_tmp6 = true;
            					}
HXDLIN( 850)					if (!(_hx_tmp6)) {
HXLINE( 850)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)						_hx_tmp5 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 850)						_hx_tmp5 = true;
            					}
HXDLIN( 850)					if (!(_hx_tmp5)) {
HXLINE( 850)						_hx_tmp4 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 850)						_hx_tmp4 = true;
            					}
HXDLIN( 850)					if (_hx_tmp4) {
HXLINE( 850)						 ::vision::ds::ImageView v = null();
HXDLIN( 850)						bool _hx_tmp8;
HXDLIN( 850)						bool _hx_tmp9;
HXDLIN( 850)						bool _hx_tmp10;
HXDLIN( 850)						bool _hx_tmp11;
HXDLIN( 850)						bool _hx_tmp12;
HXDLIN( 850)						bool _hx_tmp13;
HXDLIN( 850)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 850)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 850)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)							_hx_tmp13 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 850)							_hx_tmp13 = true;
            						}
HXDLIN( 850)						if (!(_hx_tmp13)) {
HXLINE( 850)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 850)							_hx_tmp12 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 850)							_hx_tmp12 = true;
            						}
HXDLIN( 850)						if (!(_hx_tmp12)) {
HXLINE( 850)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)							_hx_tmp11 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 850)							_hx_tmp11 = true;
            						}
HXDLIN( 850)						if (!(_hx_tmp11)) {
HXLINE( 850)							_hx_tmp10 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 850)							_hx_tmp10 = true;
            						}
HXDLIN( 850)						if (!(_hx_tmp10)) {
HXLINE( 850)							_hx_tmp9 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 850)							_hx_tmp9 = false;
            						}
HXDLIN( 850)						if (_hx_tmp9) {
HXLINE( 850)							bool _hx_tmp14;
HXDLIN( 850)							bool _hx_tmp15;
HXDLIN( 850)							if ((x1 >= 0)) {
HXLINE( 850)								_hx_tmp15 = (y1 >= 0);
            							}
            							else {
HXLINE( 850)								_hx_tmp15 = false;
            							}
HXDLIN( 850)							if (_hx_tmp15) {
HXLINE( 850)								_hx_tmp14 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 850)								_hx_tmp14 = false;
            							}
HXDLIN( 850)							if (_hx_tmp14) {
HXLINE( 850)								_hx_tmp8 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 850)								_hx_tmp8 = false;
            							}
            						}
            						else {
HXLINE( 850)							bool has = false;
HXDLIN( 850)							 ::vision::ds::ImageView view;
HXDLIN( 850)							if (::hx::IsNotNull( v )) {
HXLINE( 850)								view = v;
            							}
            							else {
HXLINE( 850)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 850)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 850)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 850)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 850)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 850)									bool has1;
HXDLIN( 850)									bool has2;
HXDLIN( 850)									if ((x1 < (view->x + view->width))) {
HXLINE( 850)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 850)										has2 = false;
            									}
HXDLIN( 850)									if (has2) {
HXLINE( 850)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE( 850)										has1 = false;
            									}
HXDLIN( 850)									if (has1) {
HXLINE( 850)										has = (y1 >= view->y);
            									}
            									else {
HXLINE( 850)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 850)									bool has3;
HXDLIN( 850)									bool has4;
HXDLIN( 850)									bool has5;
HXDLIN( 850)									if ((x1 < (view->x + view->width))) {
HXLINE( 850)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 850)										has5 = false;
            									}
HXDLIN( 850)									if (has5) {
HXLINE( 850)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE( 850)										has4 = false;
            									}
HXDLIN( 850)									if (has4) {
HXLINE( 850)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE( 850)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 850)									if ((view->width > view->height)) {
HXLINE( 850)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 850)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 850)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 850)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 850)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 850)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 850)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 850)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN( 850)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 850)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 850)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 850)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 850)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 850)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 850)										if ((view->height > view->width)) {
HXLINE( 850)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 850)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 850)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 850)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 850)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 850)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 850)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 850)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN( 850)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 850)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 850)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 850)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 850)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 850)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 850)											Float point1_x = ( (Float)(x1) );
HXDLIN( 850)											Float point1_y = ( (Float)(y1) );
HXDLIN( 850)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 850)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 850)											Float x6 = (point2_x - point1_x);
HXDLIN( 850)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 850)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 850)							_hx_tmp8 = has;
            						}
HXDLIN( 850)						if (_hx_tmp8) {
HXLINE( 850)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 850)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 850)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 850)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 850)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 850)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 850)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 850)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 850)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 850)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 850)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 850)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 851)			{
HXLINE( 851)				int x7 = (X - x);
HXDLIN( 851)				int y7 = (Y + y);
HXDLIN( 851)				bool _hx_tmp16;
HXDLIN( 851)				bool _hx_tmp17;
HXDLIN( 851)				bool _hx_tmp18;
HXDLIN( 851)				if ((x7 >= 0)) {
HXLINE( 851)					_hx_tmp18 = (y7 >= 0);
            				}
            				else {
HXLINE( 851)					_hx_tmp18 = false;
            				}
HXDLIN( 851)				if (_hx_tmp18) {
HXLINE( 851)					_hx_tmp17 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 851)					_hx_tmp17 = false;
            				}
HXDLIN( 851)				if (_hx_tmp17) {
HXLINE( 851)					_hx_tmp16 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 851)					_hx_tmp16 = false;
            				}
HXDLIN( 851)				if (!(_hx_tmp16)) {
HXLINE( 851)					::cpp::Int64 this3 = _hx_int64_make(x7,y7);
HXDLIN( 851)					int _hx_tmp19 = _hx_int64_high(this3);
HXDLIN( 851)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp19,_hx_int64_low(this3))));
            				}
            				else {
HXLINE( 851)					bool _hx_tmp20;
HXDLIN( 851)					bool _hx_tmp21;
HXDLIN( 851)					bool _hx_tmp22;
HXDLIN( 851)					bool _hx_tmp23;
HXDLIN( 851)					int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 851)					if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 851)						int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)						_hx_tmp23 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 851)						_hx_tmp23 = true;
            					}
HXDLIN( 851)					if (!(_hx_tmp23)) {
HXLINE( 851)						int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 851)						_hx_tmp22 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 851)						_hx_tmp22 = true;
            					}
HXDLIN( 851)					if (!(_hx_tmp22)) {
HXLINE( 851)						int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)						_hx_tmp21 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 851)						_hx_tmp21 = true;
            					}
HXDLIN( 851)					if (!(_hx_tmp21)) {
HXLINE( 851)						_hx_tmp20 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 851)						_hx_tmp20 = true;
            					}
HXDLIN( 851)					if (_hx_tmp20) {
HXLINE( 851)						 ::vision::ds::ImageView v1 = null();
HXDLIN( 851)						bool _hx_tmp24;
HXDLIN( 851)						bool _hx_tmp25;
HXDLIN( 851)						bool _hx_tmp26;
HXDLIN( 851)						bool _hx_tmp27;
HXDLIN( 851)						bool _hx_tmp28;
HXDLIN( 851)						bool _hx_tmp29;
HXDLIN( 851)						int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 851)						if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 851)							int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)							_hx_tmp29 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 851)							_hx_tmp29 = true;
            						}
HXDLIN( 851)						if (!(_hx_tmp29)) {
HXLINE( 851)							int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 851)							_hx_tmp28 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 851)							_hx_tmp28 = true;
            						}
HXDLIN( 851)						if (!(_hx_tmp28)) {
HXLINE( 851)							int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)							_hx_tmp27 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 851)							_hx_tmp27 = true;
            						}
HXDLIN( 851)						if (!(_hx_tmp27)) {
HXLINE( 851)							_hx_tmp26 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 851)							_hx_tmp26 = true;
            						}
HXDLIN( 851)						if (!(_hx_tmp26)) {
HXLINE( 851)							_hx_tmp25 = ::hx::IsNull( v1 );
            						}
            						else {
HXLINE( 851)							_hx_tmp25 = false;
            						}
HXDLIN( 851)						if (_hx_tmp25) {
HXLINE( 851)							bool _hx_tmp30;
HXDLIN( 851)							bool _hx_tmp31;
HXDLIN( 851)							if ((x7 >= 0)) {
HXLINE( 851)								_hx_tmp31 = (y7 >= 0);
            							}
            							else {
HXLINE( 851)								_hx_tmp31 = false;
            							}
HXDLIN( 851)							if (_hx_tmp31) {
HXLINE( 851)								_hx_tmp30 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 851)								_hx_tmp30 = false;
            							}
HXDLIN( 851)							if (_hx_tmp30) {
HXLINE( 851)								_hx_tmp24 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 851)								_hx_tmp24 = false;
            							}
            						}
            						else {
HXLINE( 851)							bool has8 = false;
HXDLIN( 851)							 ::vision::ds::ImageView view1;
HXDLIN( 851)							if (::hx::IsNotNull( v1 )) {
HXLINE( 851)								view1 = v1;
            							}
            							else {
HXLINE( 851)								int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 851)								int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)								int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 851)								int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 851)								view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 851)							switch((int)(view1->shape)){
            								case (int)0: {
HXLINE( 851)									bool has9;
HXDLIN( 851)									bool has10;
HXDLIN( 851)									if ((x7 < (view1->x + view1->width))) {
HXLINE( 851)										has10 = (y7 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 851)										has10 = false;
            									}
HXDLIN( 851)									if (has10) {
HXLINE( 851)										has9 = (x7 >= view1->x);
            									}
            									else {
HXLINE( 851)										has9 = false;
            									}
HXDLIN( 851)									if (has9) {
HXLINE( 851)										has8 = (y7 >= view1->y);
            									}
            									else {
HXLINE( 851)										has8 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 851)									bool has11;
HXDLIN( 851)									bool has12;
HXDLIN( 851)									bool has13;
HXDLIN( 851)									if ((x7 < (view1->x + view1->width))) {
HXLINE( 851)										has13 = (y7 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 851)										has13 = false;
            									}
HXDLIN( 851)									if (has13) {
HXLINE( 851)										has12 = (x7 >= view1->x);
            									}
            									else {
HXLINE( 851)										has12 = false;
            									}
HXDLIN( 851)									if (has12) {
HXLINE( 851)										has11 = (y7 >= view1->y);
            									}
            									else {
HXLINE( 851)										has11 = false;
            									}
HXLINE(1400)									has8 = !(has11);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 851)									if ((view1->width > view1->height)) {
HXLINE( 851)										Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 851)										Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 851)										Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN( 851)										Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 851)										Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 851)										Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 851)										Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 851)										::cpp::Int64 p2 = _hx_int64_make(x7,y7);
HXDLIN( 851)										Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 851)										Float y8 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 851)										Float has14 = ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)));
HXDLIN( 851)										Float x9 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 851)										Float y9 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)										has8 = ((has14 + ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)))) <= view1->width);
HXLINE( 851)										if ((view1->shape == 3)) {
HXLINE(1416)											has8 = !(has8);
            										}
            									}
            									else {
HXLINE( 851)										if ((view1->height > view1->width)) {
HXLINE( 851)											Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 851)											Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 851)											Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN( 851)											Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 851)											Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 851)											Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 851)											Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 851)											::cpp::Int64 p3 = _hx_int64_make(x7,y7);
HXDLIN( 851)											Float x10 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 851)											Float y10 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 851)											Float has15 = ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)));
HXDLIN( 851)											Float x11 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 851)											Float y11 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)											has8 = ((has15 + ::Math_obj::sqrt(((x11 * x11) + (y11 * y11)))) <= view1->height);
HXLINE( 851)											if ((view1->shape == 3)) {
HXLINE(1425)												has8 = !(has8);
            											}
            										}
            										else {
HXLINE( 851)											Float point1_x1 = ( (Float)(x7) );
HXDLIN( 851)											Float point1_y1 = ( (Float)(y7) );
HXDLIN( 851)											Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 851)											Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 851)											Float x12 = (point2_x1 - point1_x1);
HXDLIN( 851)											Float y12 = (point2_y1 - point1_y1);
HXLINE(1428)											has8 = (::Math_obj::sqrt(((x12 * x12) + (y12 * y12))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 851)											if ((view1->shape == 3)) {
HXLINE(1429)												has8 = !(has8);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has8 = (((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has8 = !((((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 851)							_hx_tmp24 = has8;
            						}
HXDLIN( 851)						if (_hx_tmp24) {
HXLINE( 851)							int position2 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 851)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 851)							this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 851)							this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 851)							this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 851)							this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 851)						int position3 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 851)						position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 851)						this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 851)						this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 851)						this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 851)						this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 852)			{
HXLINE( 852)				int x13 = (X - y);
HXDLIN( 852)				int y13 = (Y - x);
HXDLIN( 852)				bool _hx_tmp32;
HXDLIN( 852)				bool _hx_tmp33;
HXDLIN( 852)				bool _hx_tmp34;
HXDLIN( 852)				if ((x13 >= 0)) {
HXLINE( 852)					_hx_tmp34 = (y13 >= 0);
            				}
            				else {
HXLINE( 852)					_hx_tmp34 = false;
            				}
HXDLIN( 852)				if (_hx_tmp34) {
HXLINE( 852)					_hx_tmp33 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 852)					_hx_tmp33 = false;
            				}
HXDLIN( 852)				if (_hx_tmp33) {
HXLINE( 852)					_hx_tmp32 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 852)					_hx_tmp32 = false;
            				}
HXDLIN( 852)				if (!(_hx_tmp32)) {
HXLINE( 852)					::cpp::Int64 this4 = _hx_int64_make(x13,y13);
HXDLIN( 852)					int _hx_tmp35 = _hx_int64_high(this4);
HXDLIN( 852)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp35,_hx_int64_low(this4))));
            				}
            				else {
HXLINE( 852)					bool _hx_tmp36;
HXDLIN( 852)					bool _hx_tmp37;
HXDLIN( 852)					bool _hx_tmp38;
HXDLIN( 852)					bool _hx_tmp39;
HXDLIN( 852)					int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 852)					if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 852)						int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)						_hx_tmp39 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 852)						_hx_tmp39 = true;
            					}
HXDLIN( 852)					if (!(_hx_tmp39)) {
HXLINE( 852)						int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 852)						_hx_tmp38 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 852)						_hx_tmp38 = true;
            					}
HXDLIN( 852)					if (!(_hx_tmp38)) {
HXLINE( 852)						int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)						_hx_tmp37 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 852)						_hx_tmp37 = true;
            					}
HXDLIN( 852)					if (!(_hx_tmp37)) {
HXLINE( 852)						_hx_tmp36 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 852)						_hx_tmp36 = true;
            					}
HXDLIN( 852)					if (_hx_tmp36) {
HXLINE( 852)						 ::vision::ds::ImageView v2 = null();
HXDLIN( 852)						bool _hx_tmp40;
HXDLIN( 852)						bool _hx_tmp41;
HXDLIN( 852)						bool _hx_tmp42;
HXDLIN( 852)						bool _hx_tmp43;
HXDLIN( 852)						bool _hx_tmp44;
HXDLIN( 852)						bool _hx_tmp45;
HXDLIN( 852)						int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 852)						if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 852)							int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)							_hx_tmp45 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 852)							_hx_tmp45 = true;
            						}
HXDLIN( 852)						if (!(_hx_tmp45)) {
HXLINE( 852)							int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 852)							_hx_tmp44 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 852)							_hx_tmp44 = true;
            						}
HXDLIN( 852)						if (!(_hx_tmp44)) {
HXLINE( 852)							int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)							_hx_tmp43 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 852)							_hx_tmp43 = true;
            						}
HXDLIN( 852)						if (!(_hx_tmp43)) {
HXLINE( 852)							_hx_tmp42 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 852)							_hx_tmp42 = true;
            						}
HXDLIN( 852)						if (!(_hx_tmp42)) {
HXLINE( 852)							_hx_tmp41 = ::hx::IsNull( v2 );
            						}
            						else {
HXLINE( 852)							_hx_tmp41 = false;
            						}
HXDLIN( 852)						if (_hx_tmp41) {
HXLINE( 852)							bool _hx_tmp46;
HXDLIN( 852)							bool _hx_tmp47;
HXDLIN( 852)							if ((x13 >= 0)) {
HXLINE( 852)								_hx_tmp47 = (y13 >= 0);
            							}
            							else {
HXLINE( 852)								_hx_tmp47 = false;
            							}
HXDLIN( 852)							if (_hx_tmp47) {
HXLINE( 852)								_hx_tmp46 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 852)								_hx_tmp46 = false;
            							}
HXDLIN( 852)							if (_hx_tmp46) {
HXLINE( 852)								_hx_tmp40 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 852)								_hx_tmp40 = false;
            							}
            						}
            						else {
HXLINE( 852)							bool has16 = false;
HXDLIN( 852)							 ::vision::ds::ImageView view2;
HXDLIN( 852)							if (::hx::IsNotNull( v2 )) {
HXLINE( 852)								view2 = v2;
            							}
            							else {
HXLINE( 852)								int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 852)								int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)								int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 852)								int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 852)								view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 852)							switch((int)(view2->shape)){
            								case (int)0: {
HXLINE( 852)									bool has17;
HXDLIN( 852)									bool has18;
HXDLIN( 852)									if ((x13 < (view2->x + view2->width))) {
HXLINE( 852)										has18 = (y13 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 852)										has18 = false;
            									}
HXDLIN( 852)									if (has18) {
HXLINE( 852)										has17 = (x13 >= view2->x);
            									}
            									else {
HXLINE( 852)										has17 = false;
            									}
HXDLIN( 852)									if (has17) {
HXLINE( 852)										has16 = (y13 >= view2->y);
            									}
            									else {
HXLINE( 852)										has16 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 852)									bool has19;
HXDLIN( 852)									bool has20;
HXDLIN( 852)									bool has21;
HXDLIN( 852)									if ((x13 < (view2->x + view2->width))) {
HXLINE( 852)										has21 = (y13 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 852)										has21 = false;
            									}
HXDLIN( 852)									if (has21) {
HXLINE( 852)										has20 = (x13 >= view2->x);
            									}
            									else {
HXLINE( 852)										has20 = false;
            									}
HXDLIN( 852)									if (has20) {
HXLINE( 852)										has19 = (y13 >= view2->y);
            									}
            									else {
HXLINE( 852)										has19 = false;
            									}
HXLINE(1400)									has16 = !(has19);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 852)									if ((view2->width > view2->height)) {
HXLINE( 852)										Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 852)										Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 852)										Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN( 852)										Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 852)										Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 852)										Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 852)										Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 852)										::cpp::Int64 p4 = _hx_int64_make(x13,y13);
HXDLIN( 852)										Float x14 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 852)										Float y14 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 852)										Float has22 = ::Math_obj::sqrt(((x14 * x14) + (y14 * y14)));
HXDLIN( 852)										Float x15 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 852)										Float y15 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)										has16 = ((has22 + ::Math_obj::sqrt(((x15 * x15) + (y15 * y15)))) <= view2->width);
HXLINE( 852)										if ((view2->shape == 3)) {
HXLINE(1416)											has16 = !(has16);
            										}
            									}
            									else {
HXLINE( 852)										if ((view2->height > view2->width)) {
HXLINE( 852)											Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 852)											Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 852)											Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN( 852)											Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 852)											Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 852)											Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 852)											Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 852)											::cpp::Int64 p5 = _hx_int64_make(x13,y13);
HXDLIN( 852)											Float x16 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 852)											Float y16 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 852)											Float has23 = ::Math_obj::sqrt(((x16 * x16) + (y16 * y16)));
HXDLIN( 852)											Float x17 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 852)											Float y17 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)											has16 = ((has23 + ::Math_obj::sqrt(((x17 * x17) + (y17 * y17)))) <= view2->height);
HXLINE( 852)											if ((view2->shape == 3)) {
HXLINE(1425)												has16 = !(has16);
            											}
            										}
            										else {
HXLINE( 852)											Float point1_x2 = ( (Float)(x13) );
HXDLIN( 852)											Float point1_y2 = ( (Float)(y13) );
HXDLIN( 852)											Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 852)											Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 852)											Float x18 = (point2_x2 - point1_x2);
HXDLIN( 852)											Float y18 = (point2_y2 - point1_y2);
HXLINE(1428)											has16 = (::Math_obj::sqrt(((x18 * x18) + (y18 * y18))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 852)											if ((view2->shape == 3)) {
HXLINE(1429)												has16 = !(has16);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has16 = (((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has16 = !((((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 852)							_hx_tmp40 = has16;
            						}
HXDLIN( 852)						if (_hx_tmp40) {
HXLINE( 852)							int position4 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 852)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 852)							this1->b[position4] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 852)							this1->b[(position4 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 852)							this1->b[(position4 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 852)							this1->b[(position4 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 852)						int position5 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 852)						position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 852)						this1->b[position5] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 852)						this1->b[(position5 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 852)						this1->b[(position5 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 852)						this1->b[(position5 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 853)			{
HXLINE( 853)				int x19 = (X + y);
HXDLIN( 853)				int y19 = (Y + x);
HXDLIN( 853)				bool _hx_tmp48;
HXDLIN( 853)				bool _hx_tmp49;
HXDLIN( 853)				bool _hx_tmp50;
HXDLIN( 853)				if ((x19 >= 0)) {
HXLINE( 853)					_hx_tmp50 = (y19 >= 0);
            				}
            				else {
HXLINE( 853)					_hx_tmp50 = false;
            				}
HXDLIN( 853)				if (_hx_tmp50) {
HXLINE( 853)					_hx_tmp49 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 853)					_hx_tmp49 = false;
            				}
HXDLIN( 853)				if (_hx_tmp49) {
HXLINE( 853)					_hx_tmp48 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 853)					_hx_tmp48 = false;
            				}
HXDLIN( 853)				if (!(_hx_tmp48)) {
HXLINE( 853)					::cpp::Int64 this5 = _hx_int64_make(x19,y19);
HXDLIN( 853)					int _hx_tmp51 = _hx_int64_high(this5);
HXDLIN( 853)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp51,_hx_int64_low(this5))));
            				}
            				else {
HXLINE( 853)					bool _hx_tmp52;
HXDLIN( 853)					bool _hx_tmp53;
HXDLIN( 853)					bool _hx_tmp54;
HXDLIN( 853)					bool _hx_tmp55;
HXDLIN( 853)					int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 853)					if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE( 853)						int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)						_hx_tmp55 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 853)						_hx_tmp55 = true;
            					}
HXDLIN( 853)					if (!(_hx_tmp55)) {
HXLINE( 853)						int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 853)						_hx_tmp54 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 853)						_hx_tmp54 = true;
            					}
HXDLIN( 853)					if (!(_hx_tmp54)) {
HXLINE( 853)						int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)						_hx_tmp53 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 853)						_hx_tmp53 = true;
            					}
HXDLIN( 853)					if (!(_hx_tmp53)) {
HXLINE( 853)						_hx_tmp52 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 853)						_hx_tmp52 = true;
            					}
HXDLIN( 853)					if (_hx_tmp52) {
HXLINE( 853)						 ::vision::ds::ImageView v3 = null();
HXDLIN( 853)						bool _hx_tmp56;
HXDLIN( 853)						bool _hx_tmp57;
HXDLIN( 853)						bool _hx_tmp58;
HXDLIN( 853)						bool _hx_tmp59;
HXDLIN( 853)						bool _hx_tmp60;
HXDLIN( 853)						bool _hx_tmp61;
HXDLIN( 853)						int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 853)						if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE( 853)							int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)							_hx_tmp61 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 853)							_hx_tmp61 = true;
            						}
HXDLIN( 853)						if (!(_hx_tmp61)) {
HXLINE( 853)							int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 853)							_hx_tmp60 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 853)							_hx_tmp60 = true;
            						}
HXDLIN( 853)						if (!(_hx_tmp60)) {
HXLINE( 853)							int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)							_hx_tmp59 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 853)							_hx_tmp59 = true;
            						}
HXDLIN( 853)						if (!(_hx_tmp59)) {
HXLINE( 853)							_hx_tmp58 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 853)							_hx_tmp58 = true;
            						}
HXDLIN( 853)						if (!(_hx_tmp58)) {
HXLINE( 853)							_hx_tmp57 = ::hx::IsNull( v3 );
            						}
            						else {
HXLINE( 853)							_hx_tmp57 = false;
            						}
HXDLIN( 853)						if (_hx_tmp57) {
HXLINE( 853)							bool _hx_tmp62;
HXDLIN( 853)							bool _hx_tmp63;
HXDLIN( 853)							if ((x19 >= 0)) {
HXLINE( 853)								_hx_tmp63 = (y19 >= 0);
            							}
            							else {
HXLINE( 853)								_hx_tmp63 = false;
            							}
HXDLIN( 853)							if (_hx_tmp63) {
HXLINE( 853)								_hx_tmp62 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 853)								_hx_tmp62 = false;
            							}
HXDLIN( 853)							if (_hx_tmp62) {
HXLINE( 853)								_hx_tmp56 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 853)								_hx_tmp56 = false;
            							}
            						}
            						else {
HXLINE( 853)							bool has24 = false;
HXDLIN( 853)							 ::vision::ds::ImageView view3;
HXDLIN( 853)							if (::hx::IsNotNull( v3 )) {
HXLINE( 853)								view3 = v3;
            							}
            							else {
HXLINE( 853)								int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 853)								int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)								int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 853)								int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 853)								view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 853)							switch((int)(view3->shape)){
            								case (int)0: {
HXLINE( 853)									bool has25;
HXDLIN( 853)									bool has26;
HXDLIN( 853)									if ((x19 < (view3->x + view3->width))) {
HXLINE( 853)										has26 = (y19 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 853)										has26 = false;
            									}
HXDLIN( 853)									if (has26) {
HXLINE( 853)										has25 = (x19 >= view3->x);
            									}
            									else {
HXLINE( 853)										has25 = false;
            									}
HXDLIN( 853)									if (has25) {
HXLINE( 853)										has24 = (y19 >= view3->y);
            									}
            									else {
HXLINE( 853)										has24 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 853)									bool has27;
HXDLIN( 853)									bool has28;
HXDLIN( 853)									bool has29;
HXDLIN( 853)									if ((x19 < (view3->x + view3->width))) {
HXLINE( 853)										has29 = (y19 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 853)										has29 = false;
            									}
HXDLIN( 853)									if (has29) {
HXLINE( 853)										has28 = (x19 >= view3->x);
            									}
            									else {
HXLINE( 853)										has28 = false;
            									}
HXDLIN( 853)									if (has28) {
HXLINE( 853)										has27 = (y19 >= view3->y);
            									}
            									else {
HXLINE( 853)										has27 = false;
            									}
HXLINE(1400)									has24 = !(has27);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 853)									if ((view3->width > view3->height)) {
HXLINE( 853)										Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 853)										Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 853)										Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN( 853)										Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN( 853)										Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 853)										Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN( 853)										Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 853)										::cpp::Int64 p6 = _hx_int64_make(x19,y19);
HXDLIN( 853)										Float x20 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN( 853)										Float y20 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN( 853)										Float has30 = ::Math_obj::sqrt(((x20 * x20) + (y20 * y20)));
HXDLIN( 853)										Float x21 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN( 853)										Float y21 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)										has24 = ((has30 + ::Math_obj::sqrt(((x21 * x21) + (y21 * y21)))) <= view3->width);
HXLINE( 853)										if ((view3->shape == 3)) {
HXLINE(1416)											has24 = !(has24);
            										}
            									}
            									else {
HXLINE( 853)										if ((view3->height > view3->width)) {
HXLINE( 853)											Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 853)											Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 853)											Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN( 853)											Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 853)											Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN( 853)											Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 853)											Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN( 853)											::cpp::Int64 p7 = _hx_int64_make(x19,y19);
HXDLIN( 853)											Float x22 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN( 853)											Float y22 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN( 853)											Float has31 = ::Math_obj::sqrt(((x22 * x22) + (y22 * y22)));
HXDLIN( 853)											Float x23 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN( 853)											Float y23 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)											has24 = ((has31 + ::Math_obj::sqrt(((x23 * x23) + (y23 * y23)))) <= view3->height);
HXLINE( 853)											if ((view3->shape == 3)) {
HXLINE(1425)												has24 = !(has24);
            											}
            										}
            										else {
HXLINE( 853)											Float point1_x3 = ( (Float)(x19) );
HXDLIN( 853)											Float point1_y3 = ( (Float)(y19) );
HXDLIN( 853)											Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 853)											Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 853)											Float x24 = (point2_x3 - point1_x3);
HXDLIN( 853)											Float y24 = (point2_y3 - point1_y3);
HXLINE(1428)											has24 = (::Math_obj::sqrt(((x24 * x24) + (y24 * y24))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE( 853)											if ((view3->shape == 3)) {
HXLINE(1429)												has24 = !(has24);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has24 = (((::Math_obj::abs((( (Float)((x19 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has24 = !((((::Math_obj::abs((( (Float)((x19 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 853)							_hx_tmp56 = has24;
            						}
HXDLIN( 853)						if (_hx_tmp56) {
HXLINE( 853)							int position6 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 853)							position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 853)							this1->b[position6] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 853)							this1->b[(position6 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 853)							this1->b[(position6 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 853)							this1->b[(position6 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 853)						int position7 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 853)						position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 853)						this1->b[position7] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 853)						this1->b[(position7 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 853)						this1->b[(position7 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 853)						this1->b[(position7 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 854)			r = err;
HXLINE( 855)			if ((r <= y)) {
HXLINE( 856)				y = (y + 1);
HXDLIN( 856)				err = (err + ((y * 2) + 1));
            			}
HXLINE( 858)			bool _hx_tmp64;
HXDLIN( 858)			if ((r <= x)) {
HXLINE( 858)				_hx_tmp64 = (err > y);
            			}
            			else {
HXLINE( 858)				_hx_tmp64 = true;
            			}
HXDLIN( 858)			if (_hx_tmp64) {
HXLINE( 859)				x = (x + 1);
HXDLIN( 859)				err = (err + ((x * 2) + 1));
            			}
            		} while((x < 0));
;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_Impl__obj,drawCircle,(void))

void Image_Impl__obj::drawEllipse( ::haxe::io::Bytes this1,int centerX,int centerY,int radiusX,int radiusY,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_877_drawEllipse)
HXLINE( 878)		Float twoASquare = ( (Float)(((2 * radiusX) * radiusX)) );
HXDLIN( 878)		Float twoBSquare = ( (Float)(((2 * radiusY) * radiusY)) );
HXDLIN( 878)		int x = (radiusX - 1);
HXLINE( 891)		bool b = true;
HXLINE( 878)		int y = 0;
HXDLIN( 878)		Float xChange = ( (Float)(((radiusY * radiusY) * (1 - (2 * radiusX)))) );
HXDLIN( 878)		Float yChange = ( (Float)((radiusX * radiusX)) );
HXDLIN( 878)		Float ellipseError = ( (Float)(0) );
HXDLIN( 878)		Float stoppingX = (twoBSquare * ( (Float)(radiusX) ));
HXDLIN( 878)		Float stoppingY = ( (Float)(0) );
HXLINE( 898)		while((stoppingX >= stoppingY)){
HXLINE( 899)			{
HXLINE( 899)				int x1 = (centerX + x);
HXDLIN( 899)				int y1 = (centerY + y);
HXDLIN( 899)				bool _hx_tmp;
HXDLIN( 899)				bool _hx_tmp1;
HXDLIN( 899)				bool _hx_tmp2;
HXDLIN( 899)				if ((x1 >= 0)) {
HXLINE( 899)					_hx_tmp2 = (y1 >= 0);
            				}
            				else {
HXLINE( 899)					_hx_tmp2 = false;
            				}
HXDLIN( 899)				if (_hx_tmp2) {
HXLINE( 899)					_hx_tmp1 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 899)					_hx_tmp1 = false;
            				}
HXDLIN( 899)				if (_hx_tmp1) {
HXLINE( 899)					_hx_tmp = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 899)					_hx_tmp = false;
            				}
HXDLIN( 899)				if (!(_hx_tmp)) {
HXLINE( 899)					::cpp::Int64 this2 = _hx_int64_make(x1,y1);
HXDLIN( 899)					int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 899)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            				}
            				else {
HXLINE( 899)					bool _hx_tmp4;
HXDLIN( 899)					bool _hx_tmp5;
HXDLIN( 899)					bool _hx_tmp6;
HXDLIN( 899)					bool _hx_tmp7;
HXDLIN( 899)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 899)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 899)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)						_hx_tmp7 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 899)						_hx_tmp7 = true;
            					}
HXDLIN( 899)					if (!(_hx_tmp7)) {
HXLINE( 899)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 899)						_hx_tmp6 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 899)						_hx_tmp6 = true;
            					}
HXDLIN( 899)					if (!(_hx_tmp6)) {
HXLINE( 899)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)						_hx_tmp5 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 899)						_hx_tmp5 = true;
            					}
HXDLIN( 899)					if (!(_hx_tmp5)) {
HXLINE( 899)						_hx_tmp4 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 899)						_hx_tmp4 = true;
            					}
HXDLIN( 899)					if (_hx_tmp4) {
HXLINE( 899)						 ::vision::ds::ImageView v = null();
HXDLIN( 899)						bool _hx_tmp8;
HXDLIN( 899)						bool _hx_tmp9;
HXDLIN( 899)						bool _hx_tmp10;
HXDLIN( 899)						bool _hx_tmp11;
HXDLIN( 899)						bool _hx_tmp12;
HXDLIN( 899)						bool _hx_tmp13;
HXDLIN( 899)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 899)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 899)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)							_hx_tmp13 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 899)							_hx_tmp13 = true;
            						}
HXDLIN( 899)						if (!(_hx_tmp13)) {
HXLINE( 899)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 899)							_hx_tmp12 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 899)							_hx_tmp12 = true;
            						}
HXDLIN( 899)						if (!(_hx_tmp12)) {
HXLINE( 899)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)							_hx_tmp11 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 899)							_hx_tmp11 = true;
            						}
HXDLIN( 899)						if (!(_hx_tmp11)) {
HXLINE( 899)							_hx_tmp10 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 899)							_hx_tmp10 = true;
            						}
HXDLIN( 899)						if (!(_hx_tmp10)) {
HXLINE( 899)							_hx_tmp9 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 899)							_hx_tmp9 = false;
            						}
HXDLIN( 899)						if (_hx_tmp9) {
HXLINE( 899)							bool _hx_tmp14;
HXDLIN( 899)							bool _hx_tmp15;
HXDLIN( 899)							if ((x1 >= 0)) {
HXLINE( 899)								_hx_tmp15 = (y1 >= 0);
            							}
            							else {
HXLINE( 899)								_hx_tmp15 = false;
            							}
HXDLIN( 899)							if (_hx_tmp15) {
HXLINE( 899)								_hx_tmp14 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 899)								_hx_tmp14 = false;
            							}
HXDLIN( 899)							if (_hx_tmp14) {
HXLINE( 899)								_hx_tmp8 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 899)								_hx_tmp8 = false;
            							}
            						}
            						else {
HXLINE( 899)							bool has = false;
HXDLIN( 899)							 ::vision::ds::ImageView view;
HXDLIN( 899)							if (::hx::IsNotNull( v )) {
HXLINE( 899)								view = v;
            							}
            							else {
HXLINE( 899)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 899)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 899)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 899)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 899)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 899)									bool has1;
HXDLIN( 899)									bool has2;
HXDLIN( 899)									if ((x1 < (view->x + view->width))) {
HXLINE( 899)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 899)										has2 = false;
            									}
HXDLIN( 899)									if (has2) {
HXLINE( 899)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE( 899)										has1 = false;
            									}
HXDLIN( 899)									if (has1) {
HXLINE( 899)										has = (y1 >= view->y);
            									}
            									else {
HXLINE( 899)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 899)									bool has3;
HXDLIN( 899)									bool has4;
HXDLIN( 899)									bool has5;
HXDLIN( 899)									if ((x1 < (view->x + view->width))) {
HXLINE( 899)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE( 899)										has5 = false;
            									}
HXDLIN( 899)									if (has5) {
HXLINE( 899)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE( 899)										has4 = false;
            									}
HXDLIN( 899)									if (has4) {
HXLINE( 899)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE( 899)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 899)									if ((view->width > view->height)) {
HXLINE( 899)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 899)										Float b1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 899)										Float c = ::Math_obj::sqrt(((a * a) - (b1 * b1)));
HXDLIN( 899)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 899)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 899)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 899)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 899)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN( 899)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 899)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 899)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN( 899)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 899)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE( 899)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 899)										if ((view->height > view->width)) {
HXLINE( 899)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 899)											Float b2 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 899)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b2 * b2)));
HXDLIN( 899)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 899)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 899)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 899)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 899)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN( 899)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 899)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 899)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN( 899)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 899)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE( 899)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 899)											Float point1_x = ( (Float)(x1) );
HXDLIN( 899)											Float point1_y = ( (Float)(y1) );
HXDLIN( 899)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 899)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 899)											Float x6 = (point2_x - point1_x);
HXDLIN( 899)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 899)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 899)							_hx_tmp8 = has;
            						}
HXDLIN( 899)						if (_hx_tmp8) {
HXLINE( 899)							int position = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 899)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 899)							this1->b[position] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 899)							this1->b[(position + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 899)							this1->b[(position + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 899)							this1->b[(position + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 899)						int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 899)						position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 899)						this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 899)						this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 899)						this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 899)						this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 900)			{
HXLINE( 900)				int x7 = (centerX - x);
HXDLIN( 900)				int y7 = (centerY + y);
HXDLIN( 900)				bool _hx_tmp16;
HXDLIN( 900)				bool _hx_tmp17;
HXDLIN( 900)				bool _hx_tmp18;
HXDLIN( 900)				if ((x7 >= 0)) {
HXLINE( 900)					_hx_tmp18 = (y7 >= 0);
            				}
            				else {
HXLINE( 900)					_hx_tmp18 = false;
            				}
HXDLIN( 900)				if (_hx_tmp18) {
HXLINE( 900)					_hx_tmp17 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 900)					_hx_tmp17 = false;
            				}
HXDLIN( 900)				if (_hx_tmp17) {
HXLINE( 900)					_hx_tmp16 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 900)					_hx_tmp16 = false;
            				}
HXDLIN( 900)				if (!(_hx_tmp16)) {
HXLINE( 900)					::cpp::Int64 this3 = _hx_int64_make(x7,y7);
HXDLIN( 900)					int _hx_tmp19 = _hx_int64_high(this3);
HXDLIN( 900)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp19,_hx_int64_low(this3))));
            				}
            				else {
HXLINE( 900)					bool _hx_tmp20;
HXDLIN( 900)					bool _hx_tmp21;
HXDLIN( 900)					bool _hx_tmp22;
HXDLIN( 900)					bool _hx_tmp23;
HXDLIN( 900)					int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 900)					if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE( 900)						int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)						_hx_tmp23 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 900)						_hx_tmp23 = true;
            					}
HXDLIN( 900)					if (!(_hx_tmp23)) {
HXLINE( 900)						int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 900)						_hx_tmp22 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 900)						_hx_tmp22 = true;
            					}
HXDLIN( 900)					if (!(_hx_tmp22)) {
HXLINE( 900)						int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)						_hx_tmp21 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 900)						_hx_tmp21 = true;
            					}
HXDLIN( 900)					if (!(_hx_tmp21)) {
HXLINE( 900)						_hx_tmp20 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 900)						_hx_tmp20 = true;
            					}
HXDLIN( 900)					if (_hx_tmp20) {
HXLINE( 900)						 ::vision::ds::ImageView v1 = null();
HXDLIN( 900)						bool _hx_tmp24;
HXDLIN( 900)						bool _hx_tmp25;
HXDLIN( 900)						bool _hx_tmp26;
HXDLIN( 900)						bool _hx_tmp27;
HXDLIN( 900)						bool _hx_tmp28;
HXDLIN( 900)						bool _hx_tmp29;
HXDLIN( 900)						int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 900)						if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE( 900)							int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)							_hx_tmp29 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 900)							_hx_tmp29 = true;
            						}
HXDLIN( 900)						if (!(_hx_tmp29)) {
HXLINE( 900)							int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 900)							_hx_tmp28 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 900)							_hx_tmp28 = true;
            						}
HXDLIN( 900)						if (!(_hx_tmp28)) {
HXLINE( 900)							int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)							_hx_tmp27 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 900)							_hx_tmp27 = true;
            						}
HXDLIN( 900)						if (!(_hx_tmp27)) {
HXLINE( 900)							_hx_tmp26 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 900)							_hx_tmp26 = true;
            						}
HXDLIN( 900)						if (!(_hx_tmp26)) {
HXLINE( 900)							_hx_tmp25 = ::hx::IsNull( v1 );
            						}
            						else {
HXLINE( 900)							_hx_tmp25 = false;
            						}
HXDLIN( 900)						if (_hx_tmp25) {
HXLINE( 900)							bool _hx_tmp30;
HXDLIN( 900)							bool _hx_tmp31;
HXDLIN( 900)							if ((x7 >= 0)) {
HXLINE( 900)								_hx_tmp31 = (y7 >= 0);
            							}
            							else {
HXLINE( 900)								_hx_tmp31 = false;
            							}
HXDLIN( 900)							if (_hx_tmp31) {
HXLINE( 900)								_hx_tmp30 = (x7 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 900)								_hx_tmp30 = false;
            							}
HXDLIN( 900)							if (_hx_tmp30) {
HXLINE( 900)								_hx_tmp24 = (y7 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 900)								_hx_tmp24 = false;
            							}
            						}
            						else {
HXLINE( 900)							bool has8 = false;
HXDLIN( 900)							 ::vision::ds::ImageView view1;
HXDLIN( 900)							if (::hx::IsNotNull( v1 )) {
HXLINE( 900)								view1 = v1;
            							}
            							else {
HXLINE( 900)								int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 900)								int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)								int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 900)								int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 900)								view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 900)							switch((int)(view1->shape)){
            								case (int)0: {
HXLINE( 900)									bool has9;
HXDLIN( 900)									bool has10;
HXDLIN( 900)									if ((x7 < (view1->x + view1->width))) {
HXLINE( 900)										has10 = (y7 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 900)										has10 = false;
            									}
HXDLIN( 900)									if (has10) {
HXLINE( 900)										has9 = (x7 >= view1->x);
            									}
            									else {
HXLINE( 900)										has9 = false;
            									}
HXDLIN( 900)									if (has9) {
HXLINE( 900)										has8 = (y7 >= view1->y);
            									}
            									else {
HXLINE( 900)										has8 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 900)									bool has11;
HXDLIN( 900)									bool has12;
HXDLIN( 900)									bool has13;
HXDLIN( 900)									if ((x7 < (view1->x + view1->width))) {
HXLINE( 900)										has13 = (y7 < (view1->y + view1->height));
            									}
            									else {
HXLINE( 900)										has13 = false;
            									}
HXDLIN( 900)									if (has13) {
HXLINE( 900)										has12 = (x7 >= view1->x);
            									}
            									else {
HXLINE( 900)										has12 = false;
            									}
HXDLIN( 900)									if (has12) {
HXLINE( 900)										has11 = (y7 >= view1->y);
            									}
            									else {
HXLINE( 900)										has11 = false;
            									}
HXLINE(1400)									has8 = !(has11);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 900)									if ((view1->width > view1->height)) {
HXLINE( 900)										Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 900)										Float b3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 900)										Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b3 * b3)));
HXDLIN( 900)										Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN( 900)										Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 900)										Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN( 900)										Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 900)										::cpp::Int64 p2 = _hx_int64_make(x7,y7);
HXDLIN( 900)										Float x8 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN( 900)										Float y8 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN( 900)										Float has14 = ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)));
HXDLIN( 900)										Float x9 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN( 900)										Float y9 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)										has8 = ((has14 + ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)))) <= view1->width);
HXLINE( 900)										if ((view1->shape == 3)) {
HXLINE(1416)											has8 = !(has8);
            										}
            									}
            									else {
HXLINE( 900)										if ((view1->height > view1->width)) {
HXLINE( 900)											Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN( 900)											Float b4 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN( 900)											Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b4 * b4)));
HXDLIN( 900)											Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 900)											Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN( 900)											Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 900)											Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN( 900)											::cpp::Int64 p3 = _hx_int64_make(x7,y7);
HXDLIN( 900)											Float x10 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN( 900)											Float y10 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN( 900)											Float has15 = ::Math_obj::sqrt(((x10 * x10) + (y10 * y10)));
HXDLIN( 900)											Float x11 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN( 900)											Float y11 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)											has8 = ((has15 + ::Math_obj::sqrt(((x11 * x11) + (y11 * y11)))) <= view1->height);
HXLINE( 900)											if ((view1->shape == 3)) {
HXLINE(1425)												has8 = !(has8);
            											}
            										}
            										else {
HXLINE( 900)											Float point1_x1 = ( (Float)(x7) );
HXDLIN( 900)											Float point1_y1 = ( (Float)(y7) );
HXDLIN( 900)											Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN( 900)											Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN( 900)											Float x12 = (point2_x1 - point1_x1);
HXDLIN( 900)											Float y12 = (point2_y1 - point1_y1);
HXLINE(1428)											has8 = (::Math_obj::sqrt(((x12 * x12) + (y12 * y12))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE( 900)											if ((view1->shape == 3)) {
HXLINE(1429)												has8 = !(has8);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has8 = (((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has8 = !((((::Math_obj::abs((( (Float)((x7 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y7 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 900)							_hx_tmp24 = has8;
            						}
HXDLIN( 900)						if (_hx_tmp24) {
HXLINE( 900)							int position2 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 900)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 900)							this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 900)							this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 900)							this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 900)							this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 900)						int position3 = (((y7 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x7) * 4);
HXDLIN( 900)						position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 900)						this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 900)						this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 900)						this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 900)						this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 901)			{
HXLINE( 901)				int x13 = (centerX + x);
HXDLIN( 901)				int y13 = (centerY - y);
HXDLIN( 901)				bool _hx_tmp32;
HXDLIN( 901)				bool _hx_tmp33;
HXDLIN( 901)				bool _hx_tmp34;
HXDLIN( 901)				if ((x13 >= 0)) {
HXLINE( 901)					_hx_tmp34 = (y13 >= 0);
            				}
            				else {
HXLINE( 901)					_hx_tmp34 = false;
            				}
HXDLIN( 901)				if (_hx_tmp34) {
HXLINE( 901)					_hx_tmp33 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 901)					_hx_tmp33 = false;
            				}
HXDLIN( 901)				if (_hx_tmp33) {
HXLINE( 901)					_hx_tmp32 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 901)					_hx_tmp32 = false;
            				}
HXDLIN( 901)				if (!(_hx_tmp32)) {
HXLINE( 901)					::cpp::Int64 this4 = _hx_int64_make(x13,y13);
HXDLIN( 901)					int _hx_tmp35 = _hx_int64_high(this4);
HXDLIN( 901)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp35,_hx_int64_low(this4))));
            				}
            				else {
HXLINE( 901)					bool _hx_tmp36;
HXDLIN( 901)					bool _hx_tmp37;
HXDLIN( 901)					bool _hx_tmp38;
HXDLIN( 901)					bool _hx_tmp39;
HXDLIN( 901)					int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 901)					if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE( 901)						int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)						_hx_tmp39 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 901)						_hx_tmp39 = true;
            					}
HXDLIN( 901)					if (!(_hx_tmp39)) {
HXLINE( 901)						int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 901)						_hx_tmp38 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 901)						_hx_tmp38 = true;
            					}
HXDLIN( 901)					if (!(_hx_tmp38)) {
HXLINE( 901)						int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)						_hx_tmp37 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 901)						_hx_tmp37 = true;
            					}
HXDLIN( 901)					if (!(_hx_tmp37)) {
HXLINE( 901)						_hx_tmp36 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 901)						_hx_tmp36 = true;
            					}
HXDLIN( 901)					if (_hx_tmp36) {
HXLINE( 901)						 ::vision::ds::ImageView v2 = null();
HXDLIN( 901)						bool _hx_tmp40;
HXDLIN( 901)						bool _hx_tmp41;
HXDLIN( 901)						bool _hx_tmp42;
HXDLIN( 901)						bool _hx_tmp43;
HXDLIN( 901)						bool _hx_tmp44;
HXDLIN( 901)						bool _hx_tmp45;
HXDLIN( 901)						int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 901)						if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE( 901)							int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)							_hx_tmp45 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 901)							_hx_tmp45 = true;
            						}
HXDLIN( 901)						if (!(_hx_tmp45)) {
HXLINE( 901)							int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 901)							_hx_tmp44 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 901)							_hx_tmp44 = true;
            						}
HXDLIN( 901)						if (!(_hx_tmp44)) {
HXLINE( 901)							int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)							_hx_tmp43 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 901)							_hx_tmp43 = true;
            						}
HXDLIN( 901)						if (!(_hx_tmp43)) {
HXLINE( 901)							_hx_tmp42 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 901)							_hx_tmp42 = true;
            						}
HXDLIN( 901)						if (!(_hx_tmp42)) {
HXLINE( 901)							_hx_tmp41 = ::hx::IsNull( v2 );
            						}
            						else {
HXLINE( 901)							_hx_tmp41 = false;
            						}
HXDLIN( 901)						if (_hx_tmp41) {
HXLINE( 901)							bool _hx_tmp46;
HXDLIN( 901)							bool _hx_tmp47;
HXDLIN( 901)							if ((x13 >= 0)) {
HXLINE( 901)								_hx_tmp47 = (y13 >= 0);
            							}
            							else {
HXLINE( 901)								_hx_tmp47 = false;
            							}
HXDLIN( 901)							if (_hx_tmp47) {
HXLINE( 901)								_hx_tmp46 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 901)								_hx_tmp46 = false;
            							}
HXDLIN( 901)							if (_hx_tmp46) {
HXLINE( 901)								_hx_tmp40 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 901)								_hx_tmp40 = false;
            							}
            						}
            						else {
HXLINE( 901)							bool has16 = false;
HXDLIN( 901)							 ::vision::ds::ImageView view2;
HXDLIN( 901)							if (::hx::IsNotNull( v2 )) {
HXLINE( 901)								view2 = v2;
            							}
            							else {
HXLINE( 901)								int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 901)								int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)								int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 901)								int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 901)								view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 901)							switch((int)(view2->shape)){
            								case (int)0: {
HXLINE( 901)									bool has17;
HXDLIN( 901)									bool has18;
HXDLIN( 901)									if ((x13 < (view2->x + view2->width))) {
HXLINE( 901)										has18 = (y13 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 901)										has18 = false;
            									}
HXDLIN( 901)									if (has18) {
HXLINE( 901)										has17 = (x13 >= view2->x);
            									}
            									else {
HXLINE( 901)										has17 = false;
            									}
HXDLIN( 901)									if (has17) {
HXLINE( 901)										has16 = (y13 >= view2->y);
            									}
            									else {
HXLINE( 901)										has16 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 901)									bool has19;
HXDLIN( 901)									bool has20;
HXDLIN( 901)									bool has21;
HXDLIN( 901)									if ((x13 < (view2->x + view2->width))) {
HXLINE( 901)										has21 = (y13 < (view2->y + view2->height));
            									}
            									else {
HXLINE( 901)										has21 = false;
            									}
HXDLIN( 901)									if (has21) {
HXLINE( 901)										has20 = (x13 >= view2->x);
            									}
            									else {
HXLINE( 901)										has20 = false;
            									}
HXDLIN( 901)									if (has20) {
HXLINE( 901)										has19 = (y13 >= view2->y);
            									}
            									else {
HXLINE( 901)										has19 = false;
            									}
HXLINE(1400)									has16 = !(has19);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 901)									if ((view2->width > view2->height)) {
HXLINE( 901)										Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 901)										Float b5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 901)										Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b5 * b5)));
HXDLIN( 901)										Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN( 901)										Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 901)										Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN( 901)										Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 901)										::cpp::Int64 p4 = _hx_int64_make(x13,y13);
HXDLIN( 901)										Float x14 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN( 901)										Float y14 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN( 901)										Float has22 = ::Math_obj::sqrt(((x14 * x14) + (y14 * y14)));
HXDLIN( 901)										Float x15 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN( 901)										Float y15 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)										has16 = ((has22 + ::Math_obj::sqrt(((x15 * x15) + (y15 * y15)))) <= view2->width);
HXLINE( 901)										if ((view2->shape == 3)) {
HXLINE(1416)											has16 = !(has16);
            										}
            									}
            									else {
HXLINE( 901)										if ((view2->height > view2->width)) {
HXLINE( 901)											Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN( 901)											Float b6 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN( 901)											Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b6 * b6)));
HXDLIN( 901)											Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 901)											Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN( 901)											Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 901)											Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN( 901)											::cpp::Int64 p5 = _hx_int64_make(x13,y13);
HXDLIN( 901)											Float x16 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN( 901)											Float y16 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN( 901)											Float has23 = ::Math_obj::sqrt(((x16 * x16) + (y16 * y16)));
HXDLIN( 901)											Float x17 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN( 901)											Float y17 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)											has16 = ((has23 + ::Math_obj::sqrt(((x17 * x17) + (y17 * y17)))) <= view2->height);
HXLINE( 901)											if ((view2->shape == 3)) {
HXLINE(1425)												has16 = !(has16);
            											}
            										}
            										else {
HXLINE( 901)											Float point1_x2 = ( (Float)(x13) );
HXDLIN( 901)											Float point1_y2 = ( (Float)(y13) );
HXDLIN( 901)											Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN( 901)											Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN( 901)											Float x18 = (point2_x2 - point1_x2);
HXDLIN( 901)											Float y18 = (point2_y2 - point1_y2);
HXLINE(1428)											has16 = (::Math_obj::sqrt(((x18 * x18) + (y18 * y18))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE( 901)											if ((view2->shape == 3)) {
HXLINE(1429)												has16 = !(has16);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has16 = (((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has16 = !((((::Math_obj::abs((( (Float)((x13 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y13 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 901)							_hx_tmp40 = has16;
            						}
HXDLIN( 901)						if (_hx_tmp40) {
HXLINE( 901)							int position4 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 901)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 901)							this1->b[position4] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 901)							this1->b[(position4 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 901)							this1->b[(position4 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 901)							this1->b[(position4 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 901)						int position5 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN( 901)						position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 901)						this1->b[position5] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 901)						this1->b[(position5 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 901)						this1->b[(position5 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 901)						this1->b[(position5 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 902)			{
HXLINE( 902)				int x19 = (centerX - x);
HXDLIN( 902)				int y19 = (centerY - y);
HXDLIN( 902)				bool _hx_tmp48;
HXDLIN( 902)				bool _hx_tmp49;
HXDLIN( 902)				bool _hx_tmp50;
HXDLIN( 902)				if ((x19 >= 0)) {
HXLINE( 902)					_hx_tmp50 = (y19 >= 0);
            				}
            				else {
HXLINE( 902)					_hx_tmp50 = false;
            				}
HXDLIN( 902)				if (_hx_tmp50) {
HXLINE( 902)					_hx_tmp49 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 902)					_hx_tmp49 = false;
            				}
HXDLIN( 902)				if (_hx_tmp49) {
HXLINE( 902)					_hx_tmp48 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 902)					_hx_tmp48 = false;
            				}
HXDLIN( 902)				if (!(_hx_tmp48)) {
HXLINE( 902)					::cpp::Int64 this5 = _hx_int64_make(x19,y19);
HXDLIN( 902)					int _hx_tmp51 = _hx_int64_high(this5);
HXDLIN( 902)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp51,_hx_int64_low(this5))));
            				}
            				else {
HXLINE( 902)					bool _hx_tmp52;
HXDLIN( 902)					bool _hx_tmp53;
HXDLIN( 902)					bool _hx_tmp54;
HXDLIN( 902)					bool _hx_tmp55;
HXDLIN( 902)					int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 902)					if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE( 902)						int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)						_hx_tmp55 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 902)						_hx_tmp55 = true;
            					}
HXDLIN( 902)					if (!(_hx_tmp55)) {
HXLINE( 902)						int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 902)						_hx_tmp54 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 902)						_hx_tmp54 = true;
            					}
HXDLIN( 902)					if (!(_hx_tmp54)) {
HXLINE( 902)						int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)						_hx_tmp53 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 902)						_hx_tmp53 = true;
            					}
HXDLIN( 902)					if (!(_hx_tmp53)) {
HXLINE( 902)						_hx_tmp52 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 902)						_hx_tmp52 = true;
            					}
HXDLIN( 902)					if (_hx_tmp52) {
HXLINE( 902)						 ::vision::ds::ImageView v3 = null();
HXDLIN( 902)						bool _hx_tmp56;
HXDLIN( 902)						bool _hx_tmp57;
HXDLIN( 902)						bool _hx_tmp58;
HXDLIN( 902)						bool _hx_tmp59;
HXDLIN( 902)						bool _hx_tmp60;
HXDLIN( 902)						bool _hx_tmp61;
HXDLIN( 902)						int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 902)						if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE( 902)							int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)							_hx_tmp61 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 902)							_hx_tmp61 = true;
            						}
HXDLIN( 902)						if (!(_hx_tmp61)) {
HXLINE( 902)							int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 902)							_hx_tmp60 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 902)							_hx_tmp60 = true;
            						}
HXDLIN( 902)						if (!(_hx_tmp60)) {
HXLINE( 902)							int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)							_hx_tmp59 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 902)							_hx_tmp59 = true;
            						}
HXDLIN( 902)						if (!(_hx_tmp59)) {
HXLINE( 902)							_hx_tmp58 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 902)							_hx_tmp58 = true;
            						}
HXDLIN( 902)						if (!(_hx_tmp58)) {
HXLINE( 902)							_hx_tmp57 = ::hx::IsNull( v3 );
            						}
            						else {
HXLINE( 902)							_hx_tmp57 = false;
            						}
HXDLIN( 902)						if (_hx_tmp57) {
HXLINE( 902)							bool _hx_tmp62;
HXDLIN( 902)							bool _hx_tmp63;
HXDLIN( 902)							if ((x19 >= 0)) {
HXLINE( 902)								_hx_tmp63 = (y19 >= 0);
            							}
            							else {
HXLINE( 902)								_hx_tmp63 = false;
            							}
HXDLIN( 902)							if (_hx_tmp63) {
HXLINE( 902)								_hx_tmp62 = (x19 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 902)								_hx_tmp62 = false;
            							}
HXDLIN( 902)							if (_hx_tmp62) {
HXLINE( 902)								_hx_tmp56 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 902)								_hx_tmp56 = false;
            							}
            						}
            						else {
HXLINE( 902)							bool has24 = false;
HXDLIN( 902)							 ::vision::ds::ImageView view3;
HXDLIN( 902)							if (::hx::IsNotNull( v3 )) {
HXLINE( 902)								view3 = v3;
            							}
            							else {
HXLINE( 902)								int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 902)								int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)								int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 902)								int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 902)								view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 902)							switch((int)(view3->shape)){
            								case (int)0: {
HXLINE( 902)									bool has25;
HXDLIN( 902)									bool has26;
HXDLIN( 902)									if ((x19 < (view3->x + view3->width))) {
HXLINE( 902)										has26 = (y19 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 902)										has26 = false;
            									}
HXDLIN( 902)									if (has26) {
HXLINE( 902)										has25 = (x19 >= view3->x);
            									}
            									else {
HXLINE( 902)										has25 = false;
            									}
HXDLIN( 902)									if (has25) {
HXLINE( 902)										has24 = (y19 >= view3->y);
            									}
            									else {
HXLINE( 902)										has24 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 902)									bool has27;
HXDLIN( 902)									bool has28;
HXDLIN( 902)									bool has29;
HXDLIN( 902)									if ((x19 < (view3->x + view3->width))) {
HXLINE( 902)										has29 = (y19 < (view3->y + view3->height));
            									}
            									else {
HXLINE( 902)										has29 = false;
            									}
HXDLIN( 902)									if (has29) {
HXLINE( 902)										has28 = (x19 >= view3->x);
            									}
            									else {
HXLINE( 902)										has28 = false;
            									}
HXDLIN( 902)									if (has28) {
HXLINE( 902)										has27 = (y19 >= view3->y);
            									}
            									else {
HXLINE( 902)										has27 = false;
            									}
HXLINE(1400)									has24 = !(has27);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 902)									if ((view3->width > view3->height)) {
HXLINE( 902)										Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 902)										Float b7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 902)										Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b7 * b7)));
HXDLIN( 902)										Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN( 902)										Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 902)										Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN( 902)										Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 902)										::cpp::Int64 p6 = _hx_int64_make(x19,y19);
HXDLIN( 902)										Float x20 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN( 902)										Float y20 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN( 902)										Float has30 = ::Math_obj::sqrt(((x20 * x20) + (y20 * y20)));
HXDLIN( 902)										Float x21 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN( 902)										Float y21 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)										has24 = ((has30 + ::Math_obj::sqrt(((x21 * x21) + (y21 * y21)))) <= view3->width);
HXLINE( 902)										if ((view3->shape == 3)) {
HXLINE(1416)											has24 = !(has24);
            										}
            									}
            									else {
HXLINE( 902)										if ((view3->height > view3->width)) {
HXLINE( 902)											Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN( 902)											Float b8 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN( 902)											Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b8 * b8)));
HXDLIN( 902)											Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 902)											Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN( 902)											Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 902)											Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN( 902)											::cpp::Int64 p7 = _hx_int64_make(x19,y19);
HXDLIN( 902)											Float x22 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN( 902)											Float y22 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN( 902)											Float has31 = ::Math_obj::sqrt(((x22 * x22) + (y22 * y22)));
HXDLIN( 902)											Float x23 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN( 902)											Float y23 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)											has24 = ((has31 + ::Math_obj::sqrt(((x23 * x23) + (y23 * y23)))) <= view3->height);
HXLINE( 902)											if ((view3->shape == 3)) {
HXLINE(1425)												has24 = !(has24);
            											}
            										}
            										else {
HXLINE( 902)											Float point1_x3 = ( (Float)(x19) );
HXDLIN( 902)											Float point1_y3 = ( (Float)(y19) );
HXDLIN( 902)											Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN( 902)											Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN( 902)											Float x24 = (point2_x3 - point1_x3);
HXDLIN( 902)											Float y24 = (point2_y3 - point1_y3);
HXLINE(1428)											has24 = (::Math_obj::sqrt(((x24 * x24) + (y24 * y24))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE( 902)											if ((view3->shape == 3)) {
HXLINE(1429)												has24 = !(has24);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has24 = (((::Math_obj::abs((( (Float)((x19 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has24 = !((((::Math_obj::abs((( (Float)((x19 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 902)							_hx_tmp56 = has24;
            						}
HXDLIN( 902)						if (_hx_tmp56) {
HXLINE( 902)							int position6 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 902)							position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 902)							this1->b[position6] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 902)							this1->b[(position6 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 902)							this1->b[(position6 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 902)							this1->b[(position6 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 902)						int position7 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x19) * 4);
HXDLIN( 902)						position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 902)						this1->b[position7] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 902)						this1->b[(position7 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 902)						this1->b[(position7 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 902)						this1->b[(position7 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 903)			if (b) {
HXLINE( 904)				x = (x + 1);
HXLINE( 905)				b = false;
            			}
HXLINE( 907)			if ((ellipseError <= 0)) {
HXLINE( 908)				y = (y + 1);
HXLINE( 909)				stoppingY = (stoppingY + twoASquare);
HXLINE( 910)				ellipseError = (ellipseError + yChange);
HXLINE( 911)				yChange = (yChange + twoASquare);
            			}
HXLINE( 913)			if ((ellipseError > 0)) {
HXLINE( 914)				x = (x - 1);
HXLINE( 915)				stoppingX = (stoppingX - twoBSquare);
HXLINE( 916)				ellipseError = (ellipseError + xChange);
HXLINE( 917)				xChange = (xChange + twoBSquare);
            			}
            		}
HXLINE( 920)		ellipseError = ((( (Float)((radiusY * radiusY)) ) / ( (Float)(4) )) - (( (Float)((radiusX * radiusX)) ) * (( (Float)(radiusY) ) - ((Float)0.5))));
HXLINE( 921)		x = 0;
HXLINE( 922)		y = radiusY;
HXLINE( 923)		xChange = ( (Float)((radiusY * radiusY)) );
HXLINE( 924)		yChange = ( (Float)(((radiusX * radiusX) * (1 - (2 * radiusY)))) );
HXLINE( 925)		stoppingX = ( (Float)(0) );
HXLINE( 926)		stoppingY = (twoASquare * ( (Float)(radiusY) ));
HXLINE( 927)		while((stoppingX <= stoppingY)){
HXLINE( 928)			{
HXLINE( 928)				int x25 = (centerX + x);
HXDLIN( 928)				int y25 = (centerY + y);
HXDLIN( 928)				bool _hx_tmp64;
HXDLIN( 928)				bool _hx_tmp65;
HXDLIN( 928)				bool _hx_tmp66;
HXDLIN( 928)				if ((x25 >= 0)) {
HXLINE( 928)					_hx_tmp66 = (y25 >= 0);
            				}
            				else {
HXLINE( 928)					_hx_tmp66 = false;
            				}
HXDLIN( 928)				if (_hx_tmp66) {
HXLINE( 928)					_hx_tmp65 = (x25 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 928)					_hx_tmp65 = false;
            				}
HXDLIN( 928)				if (_hx_tmp65) {
HXLINE( 928)					_hx_tmp64 = (y25 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 928)					_hx_tmp64 = false;
            				}
HXDLIN( 928)				if (!(_hx_tmp64)) {
HXLINE( 928)					::cpp::Int64 this6 = _hx_int64_make(x25,y25);
HXDLIN( 928)					int _hx_tmp67 = _hx_int64_high(this6);
HXDLIN( 928)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp67,_hx_int64_low(this6))));
            				}
            				else {
HXLINE( 928)					bool _hx_tmp68;
HXDLIN( 928)					bool _hx_tmp69;
HXDLIN( 928)					bool _hx_tmp70;
HXDLIN( 928)					bool _hx_tmp71;
HXDLIN( 928)					int pos48 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 928)					if (((( (int)(this1->b->__get(pos48)) ) | (( (int)(this1->b->__get((pos48 + 1))) ) << 8)) == 0)) {
HXLINE( 928)						int pos49 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)						_hx_tmp71 = ((( (int)(this1->b->__get(pos49)) ) | (( (int)(this1->b->__get((pos49 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 928)						_hx_tmp71 = true;
            					}
HXDLIN( 928)					if (!(_hx_tmp71)) {
HXLINE( 928)						int pos50 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 928)						_hx_tmp70 = ((( (int)(this1->b->__get(pos50)) ) | (( (int)(this1->b->__get((pos50 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 928)						_hx_tmp70 = true;
            					}
HXDLIN( 928)					if (!(_hx_tmp70)) {
HXLINE( 928)						int pos51 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)						_hx_tmp69 = ((( (int)(this1->b->__get(pos51)) ) | (( (int)(this1->b->__get((pos51 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 928)						_hx_tmp69 = true;
            					}
HXDLIN( 928)					if (!(_hx_tmp69)) {
HXLINE( 928)						_hx_tmp68 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 928)						_hx_tmp68 = true;
            					}
HXDLIN( 928)					if (_hx_tmp68) {
HXLINE( 928)						 ::vision::ds::ImageView v4 = null();
HXDLIN( 928)						bool _hx_tmp72;
HXDLIN( 928)						bool _hx_tmp73;
HXDLIN( 928)						bool _hx_tmp74;
HXDLIN( 928)						bool _hx_tmp75;
HXDLIN( 928)						bool _hx_tmp76;
HXDLIN( 928)						bool _hx_tmp77;
HXDLIN( 928)						int pos52 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 928)						if (((( (int)(this1->b->__get(pos52)) ) | (( (int)(this1->b->__get((pos52 + 1))) ) << 8)) == 0)) {
HXLINE( 928)							int pos53 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)							_hx_tmp77 = ((( (int)(this1->b->__get(pos53)) ) | (( (int)(this1->b->__get((pos53 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 928)							_hx_tmp77 = true;
            						}
HXDLIN( 928)						if (!(_hx_tmp77)) {
HXLINE( 928)							int pos54 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 928)							_hx_tmp76 = ((( (int)(this1->b->__get(pos54)) ) | (( (int)(this1->b->__get((pos54 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 928)							_hx_tmp76 = true;
            						}
HXDLIN( 928)						if (!(_hx_tmp76)) {
HXLINE( 928)							int pos55 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)							_hx_tmp75 = ((( (int)(this1->b->__get(pos55)) ) | (( (int)(this1->b->__get((pos55 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 928)							_hx_tmp75 = true;
            						}
HXDLIN( 928)						if (!(_hx_tmp75)) {
HXLINE( 928)							_hx_tmp74 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 928)							_hx_tmp74 = true;
            						}
HXDLIN( 928)						if (!(_hx_tmp74)) {
HXLINE( 928)							_hx_tmp73 = ::hx::IsNull( v4 );
            						}
            						else {
HXLINE( 928)							_hx_tmp73 = false;
            						}
HXDLIN( 928)						if (_hx_tmp73) {
HXLINE( 928)							bool _hx_tmp78;
HXDLIN( 928)							bool _hx_tmp79;
HXDLIN( 928)							if ((x25 >= 0)) {
HXLINE( 928)								_hx_tmp79 = (y25 >= 0);
            							}
            							else {
HXLINE( 928)								_hx_tmp79 = false;
            							}
HXDLIN( 928)							if (_hx_tmp79) {
HXLINE( 928)								_hx_tmp78 = (x25 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 928)								_hx_tmp78 = false;
            							}
HXDLIN( 928)							if (_hx_tmp78) {
HXLINE( 928)								_hx_tmp72 = (y25 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 928)								_hx_tmp72 = false;
            							}
            						}
            						else {
HXLINE( 928)							bool has32 = false;
HXDLIN( 928)							 ::vision::ds::ImageView view4;
HXDLIN( 928)							if (::hx::IsNotNull( v4 )) {
HXLINE( 928)								view4 = v4;
            							}
            							else {
HXLINE( 928)								int pos56 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 928)								int pos57 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)								int pos58 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 928)								int pos59 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 928)								view4 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos56)) ) | (( (int)(this1->b->__get((pos56 + 1))) ) << 8)),(( (int)(this1->b->__get(pos57)) ) | (( (int)(this1->b->__get((pos57 + 1))) ) << 8)),(( (int)(this1->b->__get(pos58)) ) | (( (int)(this1->b->__get((pos58 + 1))) ) << 8)),(( (int)(this1->b->__get(pos59)) ) | (( (int)(this1->b->__get((pos59 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 928)							switch((int)(view4->shape)){
            								case (int)0: {
HXLINE( 928)									bool has33;
HXDLIN( 928)									bool has34;
HXDLIN( 928)									if ((x25 < (view4->x + view4->width))) {
HXLINE( 928)										has34 = (y25 < (view4->y + view4->height));
            									}
            									else {
HXLINE( 928)										has34 = false;
            									}
HXDLIN( 928)									if (has34) {
HXLINE( 928)										has33 = (x25 >= view4->x);
            									}
            									else {
HXLINE( 928)										has33 = false;
            									}
HXDLIN( 928)									if (has33) {
HXLINE( 928)										has32 = (y25 >= view4->y);
            									}
            									else {
HXLINE( 928)										has32 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 928)									bool has35;
HXDLIN( 928)									bool has36;
HXDLIN( 928)									bool has37;
HXDLIN( 928)									if ((x25 < (view4->x + view4->width))) {
HXLINE( 928)										has37 = (y25 < (view4->y + view4->height));
            									}
            									else {
HXLINE( 928)										has37 = false;
            									}
HXDLIN( 928)									if (has37) {
HXLINE( 928)										has36 = (x25 >= view4->x);
            									}
            									else {
HXLINE( 928)										has36 = false;
            									}
HXDLIN( 928)									if (has36) {
HXLINE( 928)										has35 = (y25 >= view4->y);
            									}
            									else {
HXLINE( 928)										has35 = false;
            									}
HXLINE(1400)									has32 = !(has35);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 928)									if ((view4->width > view4->height)) {
HXLINE( 928)										Float a8 = (( (Float)(view4->width) ) / ( (Float)(2) ));
HXDLIN( 928)										Float b9 = (( (Float)(view4->height) ) / ( (Float)(2) ));
HXDLIN( 928)										Float c8 = ::Math_obj::sqrt(((a8 * a8) - (b9 * b9)));
HXDLIN( 928)										Float f1_x8 = ((view4->x + (( (Float)(view4->width) ) / ( (Float)(2) ))) - c8);
HXDLIN( 928)										Float f1_y8 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 928)										Float f2_x8 = ((view4->x + (( (Float)(view4->width) ) / ( (Float)(2) ))) + c8);
HXDLIN( 928)										Float f2_y8 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 928)										::cpp::Int64 p8 = _hx_int64_make(x25,y25);
HXDLIN( 928)										Float x26 = (( (Float)(_hx_int64_high(p8)) ) - f1_x8);
HXDLIN( 928)										Float y26 = (( (Float)(_hx_int64_low(p8)) ) - f1_y8);
HXDLIN( 928)										Float has38 = ::Math_obj::sqrt(((x26 * x26) + (y26 * y26)));
HXDLIN( 928)										Float x27 = (( (Float)(_hx_int64_high(p8)) ) - f2_x8);
HXDLIN( 928)										Float y27 = (( (Float)(_hx_int64_low(p8)) ) - f2_y8);
HXLINE(1415)										has32 = ((has38 + ::Math_obj::sqrt(((x27 * x27) + (y27 * y27)))) <= view4->width);
HXLINE( 928)										if ((view4->shape == 3)) {
HXLINE(1416)											has32 = !(has32);
            										}
            									}
            									else {
HXLINE( 928)										if ((view4->height > view4->width)) {
HXLINE( 928)											Float a9 = (( (Float)(view4->height) ) / ( (Float)(2) ));
HXDLIN( 928)											Float b10 = (( (Float)(view4->width) ) / ( (Float)(2) ));
HXDLIN( 928)											Float c9 = ::Math_obj::sqrt(((a9 * a9) - (b10 * b10)));
HXDLIN( 928)											Float f1_x9 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 928)											Float f1_y9 = ((view4->y + (( (Float)(view4->height) ) / ( (Float)(2) ))) - c9);
HXDLIN( 928)											Float f2_x9 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 928)											Float f2_y9 = ((view4->y + (( (Float)(view4->height) ) / ( (Float)(2) ))) + c9);
HXDLIN( 928)											::cpp::Int64 p9 = _hx_int64_make(x25,y25);
HXDLIN( 928)											Float x28 = (( (Float)(_hx_int64_high(p9)) ) - f1_x9);
HXDLIN( 928)											Float y28 = (( (Float)(_hx_int64_low(p9)) ) - f1_y9);
HXDLIN( 928)											Float has39 = ::Math_obj::sqrt(((x28 * x28) + (y28 * y28)));
HXDLIN( 928)											Float x29 = (( (Float)(_hx_int64_high(p9)) ) - f2_x9);
HXDLIN( 928)											Float y29 = (( (Float)(_hx_int64_low(p9)) ) - f2_y9);
HXLINE(1424)											has32 = ((has39 + ::Math_obj::sqrt(((x29 * x29) + (y29 * y29)))) <= view4->height);
HXLINE( 928)											if ((view4->shape == 3)) {
HXLINE(1425)												has32 = !(has32);
            											}
            										}
            										else {
HXLINE( 928)											Float point1_x4 = ( (Float)(x25) );
HXDLIN( 928)											Float point1_y4 = ( (Float)(y25) );
HXDLIN( 928)											Float point2_x4 = (view4->x + (( (Float)(view4->width) ) / ( (Float)(2) )));
HXDLIN( 928)											Float point2_y4 = (view4->y + (( (Float)(view4->height) ) / ( (Float)(2) )));
HXDLIN( 928)											Float x30 = (point2_x4 - point1_x4);
HXDLIN( 928)											Float y30 = (point2_y4 - point1_y4);
HXLINE(1428)											has32 = (::Math_obj::sqrt(((x30 * x30) + (y30 * y30))) <= (( (Float)(view4->width) ) / ( (Float)(2) )));
HXLINE( 928)											if ((view4->shape == 3)) {
HXLINE(1429)												has32 = !(has32);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has32 = (((::Math_obj::abs((( (Float)((x25 - view4->x)) ) - (( (Float)(view4->width) ) / ( (Float)(2) )))) / (( (Float)(view4->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y25 - view4->y)) ) - (( (Float)(view4->height) ) / ( (Float)(2) )))) / (( (Float)(view4->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has32 = !((((::Math_obj::abs((( (Float)((x25 - view4->x)) ) - (( (Float)(view4->width) ) / ( (Float)(2) )))) / (( (Float)(view4->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y25 - view4->y)) ) - (( (Float)(view4->height) ) / ( (Float)(2) )))) / (( (Float)(view4->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 928)							_hx_tmp72 = has32;
            						}
HXDLIN( 928)						if (_hx_tmp72) {
HXLINE( 928)							int position8 = (((y25 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x25) * 4);
HXDLIN( 928)							position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 928)							this1->b[position8] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 928)							this1->b[(position8 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 928)							this1->b[(position8 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 928)							this1->b[(position8 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 928)						int position9 = (((y25 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x25) * 4);
HXDLIN( 928)						position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 928)						this1->b[position9] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 928)						this1->b[(position9 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 928)						this1->b[(position9 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 928)						this1->b[(position9 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 929)			{
HXLINE( 929)				int x31 = (centerX - x);
HXDLIN( 929)				int y31 = (centerY + y);
HXDLIN( 929)				bool _hx_tmp80;
HXDLIN( 929)				bool _hx_tmp81;
HXDLIN( 929)				bool _hx_tmp82;
HXDLIN( 929)				if ((x31 >= 0)) {
HXLINE( 929)					_hx_tmp82 = (y31 >= 0);
            				}
            				else {
HXLINE( 929)					_hx_tmp82 = false;
            				}
HXDLIN( 929)				if (_hx_tmp82) {
HXLINE( 929)					_hx_tmp81 = (x31 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 929)					_hx_tmp81 = false;
            				}
HXDLIN( 929)				if (_hx_tmp81) {
HXLINE( 929)					_hx_tmp80 = (y31 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 929)					_hx_tmp80 = false;
            				}
HXDLIN( 929)				if (!(_hx_tmp80)) {
HXLINE( 929)					::cpp::Int64 this7 = _hx_int64_make(x31,y31);
HXDLIN( 929)					int _hx_tmp83 = _hx_int64_high(this7);
HXDLIN( 929)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp83,_hx_int64_low(this7))));
            				}
            				else {
HXLINE( 929)					bool _hx_tmp84;
HXDLIN( 929)					bool _hx_tmp85;
HXDLIN( 929)					bool _hx_tmp86;
HXDLIN( 929)					bool _hx_tmp87;
HXDLIN( 929)					int pos60 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 929)					if (((( (int)(this1->b->__get(pos60)) ) | (( (int)(this1->b->__get((pos60 + 1))) ) << 8)) == 0)) {
HXLINE( 929)						int pos61 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)						_hx_tmp87 = ((( (int)(this1->b->__get(pos61)) ) | (( (int)(this1->b->__get((pos61 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 929)						_hx_tmp87 = true;
            					}
HXDLIN( 929)					if (!(_hx_tmp87)) {
HXLINE( 929)						int pos62 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 929)						_hx_tmp86 = ((( (int)(this1->b->__get(pos62)) ) | (( (int)(this1->b->__get((pos62 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 929)						_hx_tmp86 = true;
            					}
HXDLIN( 929)					if (!(_hx_tmp86)) {
HXLINE( 929)						int pos63 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)						_hx_tmp85 = ((( (int)(this1->b->__get(pos63)) ) | (( (int)(this1->b->__get((pos63 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 929)						_hx_tmp85 = true;
            					}
HXDLIN( 929)					if (!(_hx_tmp85)) {
HXLINE( 929)						_hx_tmp84 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 929)						_hx_tmp84 = true;
            					}
HXDLIN( 929)					if (_hx_tmp84) {
HXLINE( 929)						 ::vision::ds::ImageView v5 = null();
HXDLIN( 929)						bool _hx_tmp88;
HXDLIN( 929)						bool _hx_tmp89;
HXDLIN( 929)						bool _hx_tmp90;
HXDLIN( 929)						bool _hx_tmp91;
HXDLIN( 929)						bool _hx_tmp92;
HXDLIN( 929)						bool _hx_tmp93;
HXDLIN( 929)						int pos64 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 929)						if (((( (int)(this1->b->__get(pos64)) ) | (( (int)(this1->b->__get((pos64 + 1))) ) << 8)) == 0)) {
HXLINE( 929)							int pos65 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)							_hx_tmp93 = ((( (int)(this1->b->__get(pos65)) ) | (( (int)(this1->b->__get((pos65 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 929)							_hx_tmp93 = true;
            						}
HXDLIN( 929)						if (!(_hx_tmp93)) {
HXLINE( 929)							int pos66 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 929)							_hx_tmp92 = ((( (int)(this1->b->__get(pos66)) ) | (( (int)(this1->b->__get((pos66 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 929)							_hx_tmp92 = true;
            						}
HXDLIN( 929)						if (!(_hx_tmp92)) {
HXLINE( 929)							int pos67 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)							_hx_tmp91 = ((( (int)(this1->b->__get(pos67)) ) | (( (int)(this1->b->__get((pos67 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 929)							_hx_tmp91 = true;
            						}
HXDLIN( 929)						if (!(_hx_tmp91)) {
HXLINE( 929)							_hx_tmp90 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 929)							_hx_tmp90 = true;
            						}
HXDLIN( 929)						if (!(_hx_tmp90)) {
HXLINE( 929)							_hx_tmp89 = ::hx::IsNull( v5 );
            						}
            						else {
HXLINE( 929)							_hx_tmp89 = false;
            						}
HXDLIN( 929)						if (_hx_tmp89) {
HXLINE( 929)							bool _hx_tmp94;
HXDLIN( 929)							bool _hx_tmp95;
HXDLIN( 929)							if ((x31 >= 0)) {
HXLINE( 929)								_hx_tmp95 = (y31 >= 0);
            							}
            							else {
HXLINE( 929)								_hx_tmp95 = false;
            							}
HXDLIN( 929)							if (_hx_tmp95) {
HXLINE( 929)								_hx_tmp94 = (x31 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 929)								_hx_tmp94 = false;
            							}
HXDLIN( 929)							if (_hx_tmp94) {
HXLINE( 929)								_hx_tmp88 = (y31 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 929)								_hx_tmp88 = false;
            							}
            						}
            						else {
HXLINE( 929)							bool has40 = false;
HXDLIN( 929)							 ::vision::ds::ImageView view5;
HXDLIN( 929)							if (::hx::IsNotNull( v5 )) {
HXLINE( 929)								view5 = v5;
            							}
            							else {
HXLINE( 929)								int pos68 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 929)								int pos69 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)								int pos70 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 929)								int pos71 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 929)								view5 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos68)) ) | (( (int)(this1->b->__get((pos68 + 1))) ) << 8)),(( (int)(this1->b->__get(pos69)) ) | (( (int)(this1->b->__get((pos69 + 1))) ) << 8)),(( (int)(this1->b->__get(pos70)) ) | (( (int)(this1->b->__get((pos70 + 1))) ) << 8)),(( (int)(this1->b->__get(pos71)) ) | (( (int)(this1->b->__get((pos71 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 929)							switch((int)(view5->shape)){
            								case (int)0: {
HXLINE( 929)									bool has41;
HXDLIN( 929)									bool has42;
HXDLIN( 929)									if ((x31 < (view5->x + view5->width))) {
HXLINE( 929)										has42 = (y31 < (view5->y + view5->height));
            									}
            									else {
HXLINE( 929)										has42 = false;
            									}
HXDLIN( 929)									if (has42) {
HXLINE( 929)										has41 = (x31 >= view5->x);
            									}
            									else {
HXLINE( 929)										has41 = false;
            									}
HXDLIN( 929)									if (has41) {
HXLINE( 929)										has40 = (y31 >= view5->y);
            									}
            									else {
HXLINE( 929)										has40 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 929)									bool has43;
HXDLIN( 929)									bool has44;
HXDLIN( 929)									bool has45;
HXDLIN( 929)									if ((x31 < (view5->x + view5->width))) {
HXLINE( 929)										has45 = (y31 < (view5->y + view5->height));
            									}
            									else {
HXLINE( 929)										has45 = false;
            									}
HXDLIN( 929)									if (has45) {
HXLINE( 929)										has44 = (x31 >= view5->x);
            									}
            									else {
HXLINE( 929)										has44 = false;
            									}
HXDLIN( 929)									if (has44) {
HXLINE( 929)										has43 = (y31 >= view5->y);
            									}
            									else {
HXLINE( 929)										has43 = false;
            									}
HXLINE(1400)									has40 = !(has43);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 929)									if ((view5->width > view5->height)) {
HXLINE( 929)										Float a10 = (( (Float)(view5->width) ) / ( (Float)(2) ));
HXDLIN( 929)										Float b11 = (( (Float)(view5->height) ) / ( (Float)(2) ));
HXDLIN( 929)										Float c10 = ::Math_obj::sqrt(((a10 * a10) - (b11 * b11)));
HXDLIN( 929)										Float f1_x10 = ((view5->x + (( (Float)(view5->width) ) / ( (Float)(2) ))) - c10);
HXDLIN( 929)										Float f1_y10 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 929)										Float f2_x10 = ((view5->x + (( (Float)(view5->width) ) / ( (Float)(2) ))) + c10);
HXDLIN( 929)										Float f2_y10 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 929)										::cpp::Int64 p10 = _hx_int64_make(x31,y31);
HXDLIN( 929)										Float x32 = (( (Float)(_hx_int64_high(p10)) ) - f1_x10);
HXDLIN( 929)										Float y32 = (( (Float)(_hx_int64_low(p10)) ) - f1_y10);
HXDLIN( 929)										Float has46 = ::Math_obj::sqrt(((x32 * x32) + (y32 * y32)));
HXDLIN( 929)										Float x33 = (( (Float)(_hx_int64_high(p10)) ) - f2_x10);
HXDLIN( 929)										Float y33 = (( (Float)(_hx_int64_low(p10)) ) - f2_y10);
HXLINE(1415)										has40 = ((has46 + ::Math_obj::sqrt(((x33 * x33) + (y33 * y33)))) <= view5->width);
HXLINE( 929)										if ((view5->shape == 3)) {
HXLINE(1416)											has40 = !(has40);
            										}
            									}
            									else {
HXLINE( 929)										if ((view5->height > view5->width)) {
HXLINE( 929)											Float a11 = (( (Float)(view5->height) ) / ( (Float)(2) ));
HXDLIN( 929)											Float b12 = (( (Float)(view5->width) ) / ( (Float)(2) ));
HXDLIN( 929)											Float c11 = ::Math_obj::sqrt(((a11 * a11) - (b12 * b12)));
HXDLIN( 929)											Float f1_x11 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 929)											Float f1_y11 = ((view5->y + (( (Float)(view5->height) ) / ( (Float)(2) ))) - c11);
HXDLIN( 929)											Float f2_x11 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 929)											Float f2_y11 = ((view5->y + (( (Float)(view5->height) ) / ( (Float)(2) ))) + c11);
HXDLIN( 929)											::cpp::Int64 p11 = _hx_int64_make(x31,y31);
HXDLIN( 929)											Float x34 = (( (Float)(_hx_int64_high(p11)) ) - f1_x11);
HXDLIN( 929)											Float y34 = (( (Float)(_hx_int64_low(p11)) ) - f1_y11);
HXDLIN( 929)											Float has47 = ::Math_obj::sqrt(((x34 * x34) + (y34 * y34)));
HXDLIN( 929)											Float x35 = (( (Float)(_hx_int64_high(p11)) ) - f2_x11);
HXDLIN( 929)											Float y35 = (( (Float)(_hx_int64_low(p11)) ) - f2_y11);
HXLINE(1424)											has40 = ((has47 + ::Math_obj::sqrt(((x35 * x35) + (y35 * y35)))) <= view5->height);
HXLINE( 929)											if ((view5->shape == 3)) {
HXLINE(1425)												has40 = !(has40);
            											}
            										}
            										else {
HXLINE( 929)											Float point1_x5 = ( (Float)(x31) );
HXDLIN( 929)											Float point1_y5 = ( (Float)(y31) );
HXDLIN( 929)											Float point2_x5 = (view5->x + (( (Float)(view5->width) ) / ( (Float)(2) )));
HXDLIN( 929)											Float point2_y5 = (view5->y + (( (Float)(view5->height) ) / ( (Float)(2) )));
HXDLIN( 929)											Float x36 = (point2_x5 - point1_x5);
HXDLIN( 929)											Float y36 = (point2_y5 - point1_y5);
HXLINE(1428)											has40 = (::Math_obj::sqrt(((x36 * x36) + (y36 * y36))) <= (( (Float)(view5->width) ) / ( (Float)(2) )));
HXLINE( 929)											if ((view5->shape == 3)) {
HXLINE(1429)												has40 = !(has40);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has40 = (((::Math_obj::abs((( (Float)((x31 - view5->x)) ) - (( (Float)(view5->width) ) / ( (Float)(2) )))) / (( (Float)(view5->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y31 - view5->y)) ) - (( (Float)(view5->height) ) / ( (Float)(2) )))) / (( (Float)(view5->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has40 = !((((::Math_obj::abs((( (Float)((x31 - view5->x)) ) - (( (Float)(view5->width) ) / ( (Float)(2) )))) / (( (Float)(view5->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y31 - view5->y)) ) - (( (Float)(view5->height) ) / ( (Float)(2) )))) / (( (Float)(view5->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 929)							_hx_tmp88 = has40;
            						}
HXDLIN( 929)						if (_hx_tmp88) {
HXLINE( 929)							int position10 = (((y31 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x31) * 4);
HXDLIN( 929)							position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 929)							this1->b[position10] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 929)							this1->b[(position10 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 929)							this1->b[(position10 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 929)							this1->b[(position10 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 929)						int position11 = (((y31 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x31) * 4);
HXDLIN( 929)						position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 929)						this1->b[position11] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 929)						this1->b[(position11 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 929)						this1->b[(position11 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 929)						this1->b[(position11 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 930)			{
HXLINE( 930)				int x37 = (centerX + x);
HXDLIN( 930)				int y37 = (centerY - y);
HXDLIN( 930)				bool _hx_tmp96;
HXDLIN( 930)				bool _hx_tmp97;
HXDLIN( 930)				bool _hx_tmp98;
HXDLIN( 930)				if ((x37 >= 0)) {
HXLINE( 930)					_hx_tmp98 = (y37 >= 0);
            				}
            				else {
HXLINE( 930)					_hx_tmp98 = false;
            				}
HXDLIN( 930)				if (_hx_tmp98) {
HXLINE( 930)					_hx_tmp97 = (x37 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 930)					_hx_tmp97 = false;
            				}
HXDLIN( 930)				if (_hx_tmp97) {
HXLINE( 930)					_hx_tmp96 = (y37 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 930)					_hx_tmp96 = false;
            				}
HXDLIN( 930)				if (!(_hx_tmp96)) {
HXLINE( 930)					::cpp::Int64 this8 = _hx_int64_make(x37,y37);
HXDLIN( 930)					int _hx_tmp99 = _hx_int64_high(this8);
HXDLIN( 930)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp99,_hx_int64_low(this8))));
            				}
            				else {
HXLINE( 930)					bool _hx_tmp100;
HXDLIN( 930)					bool _hx_tmp101;
HXDLIN( 930)					bool _hx_tmp102;
HXDLIN( 930)					bool _hx_tmp103;
HXDLIN( 930)					int pos72 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 930)					if (((( (int)(this1->b->__get(pos72)) ) | (( (int)(this1->b->__get((pos72 + 1))) ) << 8)) == 0)) {
HXLINE( 930)						int pos73 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)						_hx_tmp103 = ((( (int)(this1->b->__get(pos73)) ) | (( (int)(this1->b->__get((pos73 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 930)						_hx_tmp103 = true;
            					}
HXDLIN( 930)					if (!(_hx_tmp103)) {
HXLINE( 930)						int pos74 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 930)						_hx_tmp102 = ((( (int)(this1->b->__get(pos74)) ) | (( (int)(this1->b->__get((pos74 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 930)						_hx_tmp102 = true;
            					}
HXDLIN( 930)					if (!(_hx_tmp102)) {
HXLINE( 930)						int pos75 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)						_hx_tmp101 = ((( (int)(this1->b->__get(pos75)) ) | (( (int)(this1->b->__get((pos75 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 930)						_hx_tmp101 = true;
            					}
HXDLIN( 930)					if (!(_hx_tmp101)) {
HXLINE( 930)						_hx_tmp100 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 930)						_hx_tmp100 = true;
            					}
HXDLIN( 930)					if (_hx_tmp100) {
HXLINE( 930)						 ::vision::ds::ImageView v6 = null();
HXDLIN( 930)						bool _hx_tmp104;
HXDLIN( 930)						bool _hx_tmp105;
HXDLIN( 930)						bool _hx_tmp106;
HXDLIN( 930)						bool _hx_tmp107;
HXDLIN( 930)						bool _hx_tmp108;
HXDLIN( 930)						bool _hx_tmp109;
HXDLIN( 930)						int pos76 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 930)						if (((( (int)(this1->b->__get(pos76)) ) | (( (int)(this1->b->__get((pos76 + 1))) ) << 8)) == 0)) {
HXLINE( 930)							int pos77 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)							_hx_tmp109 = ((( (int)(this1->b->__get(pos77)) ) | (( (int)(this1->b->__get((pos77 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 930)							_hx_tmp109 = true;
            						}
HXDLIN( 930)						if (!(_hx_tmp109)) {
HXLINE( 930)							int pos78 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 930)							_hx_tmp108 = ((( (int)(this1->b->__get(pos78)) ) | (( (int)(this1->b->__get((pos78 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 930)							_hx_tmp108 = true;
            						}
HXDLIN( 930)						if (!(_hx_tmp108)) {
HXLINE( 930)							int pos79 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)							_hx_tmp107 = ((( (int)(this1->b->__get(pos79)) ) | (( (int)(this1->b->__get((pos79 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 930)							_hx_tmp107 = true;
            						}
HXDLIN( 930)						if (!(_hx_tmp107)) {
HXLINE( 930)							_hx_tmp106 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 930)							_hx_tmp106 = true;
            						}
HXDLIN( 930)						if (!(_hx_tmp106)) {
HXLINE( 930)							_hx_tmp105 = ::hx::IsNull( v6 );
            						}
            						else {
HXLINE( 930)							_hx_tmp105 = false;
            						}
HXDLIN( 930)						if (_hx_tmp105) {
HXLINE( 930)							bool _hx_tmp110;
HXDLIN( 930)							bool _hx_tmp111;
HXDLIN( 930)							if ((x37 >= 0)) {
HXLINE( 930)								_hx_tmp111 = (y37 >= 0);
            							}
            							else {
HXLINE( 930)								_hx_tmp111 = false;
            							}
HXDLIN( 930)							if (_hx_tmp111) {
HXLINE( 930)								_hx_tmp110 = (x37 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 930)								_hx_tmp110 = false;
            							}
HXDLIN( 930)							if (_hx_tmp110) {
HXLINE( 930)								_hx_tmp104 = (y37 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 930)								_hx_tmp104 = false;
            							}
            						}
            						else {
HXLINE( 930)							bool has48 = false;
HXDLIN( 930)							 ::vision::ds::ImageView view6;
HXDLIN( 930)							if (::hx::IsNotNull( v6 )) {
HXLINE( 930)								view6 = v6;
            							}
            							else {
HXLINE( 930)								int pos80 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 930)								int pos81 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)								int pos82 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 930)								int pos83 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 930)								view6 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos80)) ) | (( (int)(this1->b->__get((pos80 + 1))) ) << 8)),(( (int)(this1->b->__get(pos81)) ) | (( (int)(this1->b->__get((pos81 + 1))) ) << 8)),(( (int)(this1->b->__get(pos82)) ) | (( (int)(this1->b->__get((pos82 + 1))) ) << 8)),(( (int)(this1->b->__get(pos83)) ) | (( (int)(this1->b->__get((pos83 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 930)							switch((int)(view6->shape)){
            								case (int)0: {
HXLINE( 930)									bool has49;
HXDLIN( 930)									bool has50;
HXDLIN( 930)									if ((x37 < (view6->x + view6->width))) {
HXLINE( 930)										has50 = (y37 < (view6->y + view6->height));
            									}
            									else {
HXLINE( 930)										has50 = false;
            									}
HXDLIN( 930)									if (has50) {
HXLINE( 930)										has49 = (x37 >= view6->x);
            									}
            									else {
HXLINE( 930)										has49 = false;
            									}
HXDLIN( 930)									if (has49) {
HXLINE( 930)										has48 = (y37 >= view6->y);
            									}
            									else {
HXLINE( 930)										has48 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 930)									bool has51;
HXDLIN( 930)									bool has52;
HXDLIN( 930)									bool has53;
HXDLIN( 930)									if ((x37 < (view6->x + view6->width))) {
HXLINE( 930)										has53 = (y37 < (view6->y + view6->height));
            									}
            									else {
HXLINE( 930)										has53 = false;
            									}
HXDLIN( 930)									if (has53) {
HXLINE( 930)										has52 = (x37 >= view6->x);
            									}
            									else {
HXLINE( 930)										has52 = false;
            									}
HXDLIN( 930)									if (has52) {
HXLINE( 930)										has51 = (y37 >= view6->y);
            									}
            									else {
HXLINE( 930)										has51 = false;
            									}
HXLINE(1400)									has48 = !(has51);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 930)									if ((view6->width > view6->height)) {
HXLINE( 930)										Float a12 = (( (Float)(view6->width) ) / ( (Float)(2) ));
HXDLIN( 930)										Float b13 = (( (Float)(view6->height) ) / ( (Float)(2) ));
HXDLIN( 930)										Float c12 = ::Math_obj::sqrt(((a12 * a12) - (b13 * b13)));
HXDLIN( 930)										Float f1_x12 = ((view6->x + (( (Float)(view6->width) ) / ( (Float)(2) ))) - c12);
HXDLIN( 930)										Float f1_y12 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 930)										Float f2_x12 = ((view6->x + (( (Float)(view6->width) ) / ( (Float)(2) ))) + c12);
HXDLIN( 930)										Float f2_y12 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 930)										::cpp::Int64 p12 = _hx_int64_make(x37,y37);
HXDLIN( 930)										Float x38 = (( (Float)(_hx_int64_high(p12)) ) - f1_x12);
HXDLIN( 930)										Float y38 = (( (Float)(_hx_int64_low(p12)) ) - f1_y12);
HXDLIN( 930)										Float has54 = ::Math_obj::sqrt(((x38 * x38) + (y38 * y38)));
HXDLIN( 930)										Float x39 = (( (Float)(_hx_int64_high(p12)) ) - f2_x12);
HXDLIN( 930)										Float y39 = (( (Float)(_hx_int64_low(p12)) ) - f2_y12);
HXLINE(1415)										has48 = ((has54 + ::Math_obj::sqrt(((x39 * x39) + (y39 * y39)))) <= view6->width);
HXLINE( 930)										if ((view6->shape == 3)) {
HXLINE(1416)											has48 = !(has48);
            										}
            									}
            									else {
HXLINE( 930)										if ((view6->height > view6->width)) {
HXLINE( 930)											Float a13 = (( (Float)(view6->height) ) / ( (Float)(2) ));
HXDLIN( 930)											Float b14 = (( (Float)(view6->width) ) / ( (Float)(2) ));
HXDLIN( 930)											Float c13 = ::Math_obj::sqrt(((a13 * a13) - (b14 * b14)));
HXDLIN( 930)											Float f1_x13 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 930)											Float f1_y13 = ((view6->y + (( (Float)(view6->height) ) / ( (Float)(2) ))) - c13);
HXDLIN( 930)											Float f2_x13 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 930)											Float f2_y13 = ((view6->y + (( (Float)(view6->height) ) / ( (Float)(2) ))) + c13);
HXDLIN( 930)											::cpp::Int64 p13 = _hx_int64_make(x37,y37);
HXDLIN( 930)											Float x40 = (( (Float)(_hx_int64_high(p13)) ) - f1_x13);
HXDLIN( 930)											Float y40 = (( (Float)(_hx_int64_low(p13)) ) - f1_y13);
HXDLIN( 930)											Float has55 = ::Math_obj::sqrt(((x40 * x40) + (y40 * y40)));
HXDLIN( 930)											Float x41 = (( (Float)(_hx_int64_high(p13)) ) - f2_x13);
HXDLIN( 930)											Float y41 = (( (Float)(_hx_int64_low(p13)) ) - f2_y13);
HXLINE(1424)											has48 = ((has55 + ::Math_obj::sqrt(((x41 * x41) + (y41 * y41)))) <= view6->height);
HXLINE( 930)											if ((view6->shape == 3)) {
HXLINE(1425)												has48 = !(has48);
            											}
            										}
            										else {
HXLINE( 930)											Float point1_x6 = ( (Float)(x37) );
HXDLIN( 930)											Float point1_y6 = ( (Float)(y37) );
HXDLIN( 930)											Float point2_x6 = (view6->x + (( (Float)(view6->width) ) / ( (Float)(2) )));
HXDLIN( 930)											Float point2_y6 = (view6->y + (( (Float)(view6->height) ) / ( (Float)(2) )));
HXDLIN( 930)											Float x42 = (point2_x6 - point1_x6);
HXDLIN( 930)											Float y42 = (point2_y6 - point1_y6);
HXLINE(1428)											has48 = (::Math_obj::sqrt(((x42 * x42) + (y42 * y42))) <= (( (Float)(view6->width) ) / ( (Float)(2) )));
HXLINE( 930)											if ((view6->shape == 3)) {
HXLINE(1429)												has48 = !(has48);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has48 = (((::Math_obj::abs((( (Float)((x37 - view6->x)) ) - (( (Float)(view6->width) ) / ( (Float)(2) )))) / (( (Float)(view6->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y37 - view6->y)) ) - (( (Float)(view6->height) ) / ( (Float)(2) )))) / (( (Float)(view6->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has48 = !((((::Math_obj::abs((( (Float)((x37 - view6->x)) ) - (( (Float)(view6->width) ) / ( (Float)(2) )))) / (( (Float)(view6->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y37 - view6->y)) ) - (( (Float)(view6->height) ) / ( (Float)(2) )))) / (( (Float)(view6->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 930)							_hx_tmp104 = has48;
            						}
HXDLIN( 930)						if (_hx_tmp104) {
HXLINE( 930)							int position12 = (((y37 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x37) * 4);
HXDLIN( 930)							position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 930)							this1->b[position12] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 930)							this1->b[(position12 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 930)							this1->b[(position12 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 930)							this1->b[(position12 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 930)						int position13 = (((y37 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x37) * 4);
HXDLIN( 930)						position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 930)						this1->b[position13] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 930)						this1->b[(position13 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 930)						this1->b[(position13 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 930)						this1->b[(position13 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 931)			{
HXLINE( 931)				int x43 = (centerX - x);
HXDLIN( 931)				int y43 = (centerY - y);
HXDLIN( 931)				bool _hx_tmp112;
HXDLIN( 931)				bool _hx_tmp113;
HXDLIN( 931)				bool _hx_tmp114;
HXDLIN( 931)				if ((x43 >= 0)) {
HXLINE( 931)					_hx_tmp114 = (y43 >= 0);
            				}
            				else {
HXLINE( 931)					_hx_tmp114 = false;
            				}
HXDLIN( 931)				if (_hx_tmp114) {
HXLINE( 931)					_hx_tmp113 = (x43 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 931)					_hx_tmp113 = false;
            				}
HXDLIN( 931)				if (_hx_tmp113) {
HXLINE( 931)					_hx_tmp112 = (y43 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 931)					_hx_tmp112 = false;
            				}
HXDLIN( 931)				if (!(_hx_tmp112)) {
HXLINE( 931)					::cpp::Int64 this9 = _hx_int64_make(x43,y43);
HXDLIN( 931)					int _hx_tmp115 = _hx_int64_high(this9);
HXDLIN( 931)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp115,_hx_int64_low(this9))));
            				}
            				else {
HXLINE( 931)					bool _hx_tmp116;
HXDLIN( 931)					bool _hx_tmp117;
HXDLIN( 931)					bool _hx_tmp118;
HXDLIN( 931)					bool _hx_tmp119;
HXDLIN( 931)					int pos84 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 931)					if (((( (int)(this1->b->__get(pos84)) ) | (( (int)(this1->b->__get((pos84 + 1))) ) << 8)) == 0)) {
HXLINE( 931)						int pos85 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)						_hx_tmp119 = ((( (int)(this1->b->__get(pos85)) ) | (( (int)(this1->b->__get((pos85 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 931)						_hx_tmp119 = true;
            					}
HXDLIN( 931)					if (!(_hx_tmp119)) {
HXLINE( 931)						int pos86 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 931)						_hx_tmp118 = ((( (int)(this1->b->__get(pos86)) ) | (( (int)(this1->b->__get((pos86 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 931)						_hx_tmp118 = true;
            					}
HXDLIN( 931)					if (!(_hx_tmp118)) {
HXLINE( 931)						int pos87 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)						_hx_tmp117 = ((( (int)(this1->b->__get(pos87)) ) | (( (int)(this1->b->__get((pos87 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 931)						_hx_tmp117 = true;
            					}
HXDLIN( 931)					if (!(_hx_tmp117)) {
HXLINE( 931)						_hx_tmp116 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 931)						_hx_tmp116 = true;
            					}
HXDLIN( 931)					if (_hx_tmp116) {
HXLINE( 931)						 ::vision::ds::ImageView v7 = null();
HXDLIN( 931)						bool _hx_tmp120;
HXDLIN( 931)						bool _hx_tmp121;
HXDLIN( 931)						bool _hx_tmp122;
HXDLIN( 931)						bool _hx_tmp123;
HXDLIN( 931)						bool _hx_tmp124;
HXDLIN( 931)						bool _hx_tmp125;
HXDLIN( 931)						int pos88 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 931)						if (((( (int)(this1->b->__get(pos88)) ) | (( (int)(this1->b->__get((pos88 + 1))) ) << 8)) == 0)) {
HXLINE( 931)							int pos89 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)							_hx_tmp125 = ((( (int)(this1->b->__get(pos89)) ) | (( (int)(this1->b->__get((pos89 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 931)							_hx_tmp125 = true;
            						}
HXDLIN( 931)						if (!(_hx_tmp125)) {
HXLINE( 931)							int pos90 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 931)							_hx_tmp124 = ((( (int)(this1->b->__get(pos90)) ) | (( (int)(this1->b->__get((pos90 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 931)							_hx_tmp124 = true;
            						}
HXDLIN( 931)						if (!(_hx_tmp124)) {
HXLINE( 931)							int pos91 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)							_hx_tmp123 = ((( (int)(this1->b->__get(pos91)) ) | (( (int)(this1->b->__get((pos91 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 931)							_hx_tmp123 = true;
            						}
HXDLIN( 931)						if (!(_hx_tmp123)) {
HXLINE( 931)							_hx_tmp122 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 931)							_hx_tmp122 = true;
            						}
HXDLIN( 931)						if (!(_hx_tmp122)) {
HXLINE( 931)							_hx_tmp121 = ::hx::IsNull( v7 );
            						}
            						else {
HXLINE( 931)							_hx_tmp121 = false;
            						}
HXDLIN( 931)						if (_hx_tmp121) {
HXLINE( 931)							bool _hx_tmp126;
HXDLIN( 931)							bool _hx_tmp127;
HXDLIN( 931)							if ((x43 >= 0)) {
HXLINE( 931)								_hx_tmp127 = (y43 >= 0);
            							}
            							else {
HXLINE( 931)								_hx_tmp127 = false;
            							}
HXDLIN( 931)							if (_hx_tmp127) {
HXLINE( 931)								_hx_tmp126 = (x43 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 931)								_hx_tmp126 = false;
            							}
HXDLIN( 931)							if (_hx_tmp126) {
HXLINE( 931)								_hx_tmp120 = (y43 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 931)								_hx_tmp120 = false;
            							}
            						}
            						else {
HXLINE( 931)							bool has56 = false;
HXDLIN( 931)							 ::vision::ds::ImageView view7;
HXDLIN( 931)							if (::hx::IsNotNull( v7 )) {
HXLINE( 931)								view7 = v7;
            							}
            							else {
HXLINE( 931)								int pos92 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 931)								int pos93 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)								int pos94 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 931)								int pos95 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 931)								view7 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos92)) ) | (( (int)(this1->b->__get((pos92 + 1))) ) << 8)),(( (int)(this1->b->__get(pos93)) ) | (( (int)(this1->b->__get((pos93 + 1))) ) << 8)),(( (int)(this1->b->__get(pos94)) ) | (( (int)(this1->b->__get((pos94 + 1))) ) << 8)),(( (int)(this1->b->__get(pos95)) ) | (( (int)(this1->b->__get((pos95 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 931)							switch((int)(view7->shape)){
            								case (int)0: {
HXLINE( 931)									bool has57;
HXDLIN( 931)									bool has58;
HXDLIN( 931)									if ((x43 < (view7->x + view7->width))) {
HXLINE( 931)										has58 = (y43 < (view7->y + view7->height));
            									}
            									else {
HXLINE( 931)										has58 = false;
            									}
HXDLIN( 931)									if (has58) {
HXLINE( 931)										has57 = (x43 >= view7->x);
            									}
            									else {
HXLINE( 931)										has57 = false;
            									}
HXDLIN( 931)									if (has57) {
HXLINE( 931)										has56 = (y43 >= view7->y);
            									}
            									else {
HXLINE( 931)										has56 = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 931)									bool has59;
HXDLIN( 931)									bool has60;
HXDLIN( 931)									bool has61;
HXDLIN( 931)									if ((x43 < (view7->x + view7->width))) {
HXLINE( 931)										has61 = (y43 < (view7->y + view7->height));
            									}
            									else {
HXLINE( 931)										has61 = false;
            									}
HXDLIN( 931)									if (has61) {
HXLINE( 931)										has60 = (x43 >= view7->x);
            									}
            									else {
HXLINE( 931)										has60 = false;
            									}
HXDLIN( 931)									if (has60) {
HXLINE( 931)										has59 = (y43 >= view7->y);
            									}
            									else {
HXLINE( 931)										has59 = false;
            									}
HXLINE(1400)									has56 = !(has59);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 931)									if ((view7->width > view7->height)) {
HXLINE( 931)										Float a14 = (( (Float)(view7->width) ) / ( (Float)(2) ));
HXDLIN( 931)										Float b15 = (( (Float)(view7->height) ) / ( (Float)(2) ));
HXDLIN( 931)										Float c14 = ::Math_obj::sqrt(((a14 * a14) - (b15 * b15)));
HXDLIN( 931)										Float f1_x14 = ((view7->x + (( (Float)(view7->width) ) / ( (Float)(2) ))) - c14);
HXDLIN( 931)										Float f1_y14 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 931)										Float f2_x14 = ((view7->x + (( (Float)(view7->width) ) / ( (Float)(2) ))) + c14);
HXDLIN( 931)										Float f2_y14 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 931)										::cpp::Int64 p14 = _hx_int64_make(x43,y43);
HXDLIN( 931)										Float x44 = (( (Float)(_hx_int64_high(p14)) ) - f1_x14);
HXDLIN( 931)										Float y44 = (( (Float)(_hx_int64_low(p14)) ) - f1_y14);
HXDLIN( 931)										Float has62 = ::Math_obj::sqrt(((x44 * x44) + (y44 * y44)));
HXDLIN( 931)										Float x45 = (( (Float)(_hx_int64_high(p14)) ) - f2_x14);
HXDLIN( 931)										Float y45 = (( (Float)(_hx_int64_low(p14)) ) - f2_y14);
HXLINE(1415)										has56 = ((has62 + ::Math_obj::sqrt(((x45 * x45) + (y45 * y45)))) <= view7->width);
HXLINE( 931)										if ((view7->shape == 3)) {
HXLINE(1416)											has56 = !(has56);
            										}
            									}
            									else {
HXLINE( 931)										if ((view7->height > view7->width)) {
HXLINE( 931)											Float a15 = (( (Float)(view7->height) ) / ( (Float)(2) ));
HXDLIN( 931)											Float b16 = (( (Float)(view7->width) ) / ( (Float)(2) ));
HXDLIN( 931)											Float c15 = ::Math_obj::sqrt(((a15 * a15) - (b16 * b16)));
HXDLIN( 931)											Float f1_x15 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 931)											Float f1_y15 = ((view7->y + (( (Float)(view7->height) ) / ( (Float)(2) ))) - c15);
HXDLIN( 931)											Float f2_x15 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 931)											Float f2_y15 = ((view7->y + (( (Float)(view7->height) ) / ( (Float)(2) ))) + c15);
HXDLIN( 931)											::cpp::Int64 p15 = _hx_int64_make(x43,y43);
HXDLIN( 931)											Float x46 = (( (Float)(_hx_int64_high(p15)) ) - f1_x15);
HXDLIN( 931)											Float y46 = (( (Float)(_hx_int64_low(p15)) ) - f1_y15);
HXDLIN( 931)											Float has63 = ::Math_obj::sqrt(((x46 * x46) + (y46 * y46)));
HXDLIN( 931)											Float x47 = (( (Float)(_hx_int64_high(p15)) ) - f2_x15);
HXDLIN( 931)											Float y47 = (( (Float)(_hx_int64_low(p15)) ) - f2_y15);
HXLINE(1424)											has56 = ((has63 + ::Math_obj::sqrt(((x47 * x47) + (y47 * y47)))) <= view7->height);
HXLINE( 931)											if ((view7->shape == 3)) {
HXLINE(1425)												has56 = !(has56);
            											}
            										}
            										else {
HXLINE( 931)											Float point1_x7 = ( (Float)(x43) );
HXDLIN( 931)											Float point1_y7 = ( (Float)(y43) );
HXDLIN( 931)											Float point2_x7 = (view7->x + (( (Float)(view7->width) ) / ( (Float)(2) )));
HXDLIN( 931)											Float point2_y7 = (view7->y + (( (Float)(view7->height) ) / ( (Float)(2) )));
HXDLIN( 931)											Float x48 = (point2_x7 - point1_x7);
HXDLIN( 931)											Float y48 = (point2_y7 - point1_y7);
HXLINE(1428)											has56 = (::Math_obj::sqrt(((x48 * x48) + (y48 * y48))) <= (( (Float)(view7->width) ) / ( (Float)(2) )));
HXLINE( 931)											if ((view7->shape == 3)) {
HXLINE(1429)												has56 = !(has56);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has56 = (((::Math_obj::abs((( (Float)((x43 - view7->x)) ) - (( (Float)(view7->width) ) / ( (Float)(2) )))) / (( (Float)(view7->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y43 - view7->y)) ) - (( (Float)(view7->height) ) / ( (Float)(2) )))) / (( (Float)(view7->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has56 = !((((::Math_obj::abs((( (Float)((x43 - view7->x)) ) - (( (Float)(view7->width) ) / ( (Float)(2) )))) / (( (Float)(view7->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y43 - view7->y)) ) - (( (Float)(view7->height) ) / ( (Float)(2) )))) / (( (Float)(view7->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 931)							_hx_tmp120 = has56;
            						}
HXDLIN( 931)						if (_hx_tmp120) {
HXLINE( 931)							int position14 = (((y43 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x43) * 4);
HXDLIN( 931)							position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 931)							this1->b[position14] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 931)							this1->b[(position14 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 931)							this1->b[(position14 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 931)							this1->b[(position14 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 931)						int position15 = (((y43 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x43) * 4);
HXDLIN( 931)						position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 931)						this1->b[position15] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 931)						this1->b[(position15 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 931)						this1->b[(position15 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 931)						this1->b[(position15 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
            			}
HXLINE( 932)			if ((ellipseError <= 0)) {
HXLINE( 933)				x = (x + 1);
HXLINE( 934)				stoppingX = (stoppingX + twoBSquare);
HXLINE( 935)				ellipseError = (ellipseError + xChange);
HXLINE( 936)				xChange = (xChange + twoBSquare);
            			}
HXLINE( 938)			if ((ellipseError > 0)) {
HXLINE( 939)				y = (y - 1);
HXLINE( 940)				stoppingY = (stoppingY - twoASquare);
HXLINE( 941)				ellipseError = (ellipseError + yChange);
HXLINE( 942)				yChange = (yChange + twoASquare);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_Impl__obj,drawEllipse,(void))

void Image_Impl__obj::fillColorRecursive( ::haxe::io::Bytes this1,::cpp::Int64 position,int color){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0,int,originalColor, ::haxe::io::Bytes,this1,int,color,::Array< ::Dynamic>,expandFill) HXARGC(2)
            		void _hx_run(int x,int y){
            			HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_963_fillColorRecursive)
HXLINE( 964)			bool _hx_tmp;
HXDLIN( 964)			bool _hx_tmp1;
HXDLIN( 964)			bool _hx_tmp2;
HXDLIN( 964)			if ((x >= 0)) {
HXLINE( 964)				_hx_tmp2 = (x >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 964)				_hx_tmp2 = true;
            			}
HXDLIN( 964)			if (!(_hx_tmp2)) {
HXLINE( 964)				_hx_tmp1 = (y < 0);
            			}
            			else {
HXLINE( 964)				_hx_tmp1 = true;
            			}
HXDLIN( 964)			if (!(_hx_tmp1)) {
HXLINE( 964)				_hx_tmp = (y >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 964)				_hx_tmp = true;
            			}
HXDLIN( 964)			if (_hx_tmp) {
HXLINE( 965)				return;
            			}
HXLINE( 967)			bool _hx_tmp3;
HXDLIN( 967)			bool _hx_tmp4;
HXDLIN( 967)			bool _hx_tmp5;
HXDLIN( 967)			if ((x >= 0)) {
HXLINE( 967)				_hx_tmp5 = (y >= 0);
            			}
            			else {
HXLINE( 967)				_hx_tmp5 = false;
            			}
HXDLIN( 967)			if (_hx_tmp5) {
HXLINE( 967)				_hx_tmp4 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 967)				_hx_tmp4 = false;
            			}
HXDLIN( 967)			if (_hx_tmp4) {
HXLINE( 967)				_hx_tmp3 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 967)				_hx_tmp3 = false;
            			}
HXDLIN( 967)			if (!(_hx_tmp3)) {
HXLINE( 967)				 ::haxe::io::Bytes this2 = this1;
HXDLIN( 967)				::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 967)				int _hx_tmp6 = _hx_int64_high(this3);
HXDLIN( 967)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this2, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this3))));
            			}
HXDLIN( 967)			int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 967)			position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 967)			if ((((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )) == color)) {
HXLINE( 968)				return;
            			}
HXLINE( 969)			bool _hx_tmp7;
HXDLIN( 969)			bool _hx_tmp8;
HXDLIN( 969)			bool _hx_tmp9;
HXDLIN( 969)			if ((x >= 0)) {
HXLINE( 969)				_hx_tmp9 = (y >= 0);
            			}
            			else {
HXLINE( 969)				_hx_tmp9 = false;
            			}
HXDLIN( 969)			if (_hx_tmp9) {
HXLINE( 969)				_hx_tmp8 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE( 969)				_hx_tmp8 = false;
            			}
HXDLIN( 969)			if (_hx_tmp8) {
HXLINE( 969)				_hx_tmp7 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE( 969)				_hx_tmp7 = false;
            			}
HXDLIN( 969)			if (!(_hx_tmp7)) {
HXLINE( 969)				 ::haxe::io::Bytes this4 = this1;
HXDLIN( 969)				::cpp::Int64 this5 = _hx_int64_make(x,y);
HXDLIN( 969)				int _hx_tmp10 = _hx_int64_high(this5);
HXDLIN( 969)				HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this4, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_int64_low(this5))));
            			}
HXDLIN( 969)			int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 969)			position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 969)			if ((((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )) == originalColor)) {
HXLINE( 970)				bool _hx_tmp11;
HXDLIN( 970)				bool _hx_tmp12;
HXDLIN( 970)				bool _hx_tmp13;
HXDLIN( 970)				if ((x >= 0)) {
HXLINE( 970)					_hx_tmp13 = (y >= 0);
            				}
            				else {
HXLINE( 970)					_hx_tmp13 = false;
            				}
HXDLIN( 970)				if (_hx_tmp13) {
HXLINE( 970)					_hx_tmp12 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            				}
            				else {
HXLINE( 970)					_hx_tmp12 = false;
            				}
HXDLIN( 970)				if (_hx_tmp12) {
HXLINE( 970)					_hx_tmp11 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            				}
            				else {
HXLINE( 970)					_hx_tmp11 = false;
            				}
HXDLIN( 970)				if (!(_hx_tmp11)) {
HXLINE( 970)					 ::haxe::io::Bytes this6 = this1;
HXDLIN( 970)					::cpp::Int64 this7 = _hx_int64_make(x,y);
HXDLIN( 970)					int _hx_tmp14 = _hx_int64_high(this7);
HXDLIN( 970)					HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this6, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp14,_hx_int64_low(this7))));
            				}
            				else {
HXLINE( 970)					bool _hx_tmp15;
HXDLIN( 970)					bool _hx_tmp16;
HXDLIN( 970)					bool _hx_tmp17;
HXDLIN( 970)					bool _hx_tmp18;
HXDLIN( 970)					int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 970)					if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE( 970)						int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)						_hx_tmp18 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 970)						_hx_tmp18 = true;
            					}
HXDLIN( 970)					if (!(_hx_tmp18)) {
HXLINE( 970)						int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 970)						_hx_tmp17 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 970)						_hx_tmp17 = true;
            					}
HXDLIN( 970)					if (!(_hx_tmp17)) {
HXLINE( 970)						int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)						_hx_tmp16 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            					}
            					else {
HXLINE( 970)						_hx_tmp16 = true;
            					}
HXDLIN( 970)					if (!(_hx_tmp16)) {
HXLINE( 970)						_hx_tmp15 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            					}
            					else {
HXLINE( 970)						_hx_tmp15 = true;
            					}
HXDLIN( 970)					if (_hx_tmp15) {
HXLINE( 970)						 ::vision::ds::ImageView v = null();
HXDLIN( 970)						bool _hx_tmp19;
HXDLIN( 970)						bool _hx_tmp20;
HXDLIN( 970)						bool _hx_tmp21;
HXDLIN( 970)						bool _hx_tmp22;
HXDLIN( 970)						bool _hx_tmp23;
HXDLIN( 970)						bool _hx_tmp24;
HXDLIN( 970)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 970)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE( 970)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)							_hx_tmp24 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 970)							_hx_tmp24 = true;
            						}
HXDLIN( 970)						if (!(_hx_tmp24)) {
HXLINE( 970)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 970)							_hx_tmp23 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 970)							_hx_tmp23 = true;
            						}
HXDLIN( 970)						if (!(_hx_tmp23)) {
HXLINE( 970)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)							_hx_tmp22 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE( 970)							_hx_tmp22 = true;
            						}
HXDLIN( 970)						if (!(_hx_tmp22)) {
HXLINE( 970)							_hx_tmp21 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE( 970)							_hx_tmp21 = true;
            						}
HXDLIN( 970)						if (!(_hx_tmp21)) {
HXLINE( 970)							_hx_tmp20 = ::hx::IsNull( v );
            						}
            						else {
HXLINE( 970)							_hx_tmp20 = false;
            						}
HXDLIN( 970)						if (_hx_tmp20) {
HXLINE( 970)							bool _hx_tmp25;
HXDLIN( 970)							bool _hx_tmp26;
HXDLIN( 970)							if ((x >= 0)) {
HXLINE( 970)								_hx_tmp26 = (y >= 0);
            							}
            							else {
HXLINE( 970)								_hx_tmp26 = false;
            							}
HXDLIN( 970)							if (_hx_tmp26) {
HXLINE( 970)								_hx_tmp25 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE( 970)								_hx_tmp25 = false;
            							}
HXDLIN( 970)							if (_hx_tmp25) {
HXLINE( 970)								_hx_tmp19 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE( 970)								_hx_tmp19 = false;
            							}
            						}
            						else {
HXLINE( 970)							bool has = false;
HXDLIN( 970)							 ::vision::ds::ImageView view;
HXDLIN( 970)							if (::hx::IsNotNull( v )) {
HXLINE( 970)								view = v;
            							}
            							else {
HXLINE( 970)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN( 970)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN( 970)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN( 970)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN( 970)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE( 970)									bool has1;
HXDLIN( 970)									bool has2;
HXDLIN( 970)									if ((x < (view->x + view->width))) {
HXLINE( 970)										has2 = (y < (view->y + view->height));
            									}
            									else {
HXLINE( 970)										has2 = false;
            									}
HXDLIN( 970)									if (has2) {
HXLINE( 970)										has1 = (x >= view->x);
            									}
            									else {
HXLINE( 970)										has1 = false;
            									}
HXDLIN( 970)									if (has1) {
HXLINE( 970)										has = (y >= view->y);
            									}
            									else {
HXLINE( 970)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 970)									bool has3;
HXDLIN( 970)									bool has4;
HXDLIN( 970)									bool has5;
HXDLIN( 970)									if ((x < (view->x + view->width))) {
HXLINE( 970)										has5 = (y < (view->y + view->height));
            									}
            									else {
HXLINE( 970)										has5 = false;
            									}
HXDLIN( 970)									if (has5) {
HXLINE( 970)										has4 = (x >= view->x);
            									}
            									else {
HXLINE( 970)										has4 = false;
            									}
HXDLIN( 970)									if (has4) {
HXLINE( 970)										has3 = (y >= view->y);
            									}
            									else {
HXLINE( 970)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE( 970)									if ((view->width > view->height)) {
HXLINE( 970)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 970)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 970)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN( 970)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN( 970)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 970)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN( 970)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 970)										::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN( 970)										Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN( 970)										Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN( 970)										Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN( 970)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN( 970)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE( 970)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE( 970)										if ((view->height > view->width)) {
HXLINE( 970)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN( 970)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN( 970)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN( 970)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 970)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN( 970)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 970)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN( 970)											::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN( 970)											Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN( 970)											Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN( 970)											Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN( 970)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN( 970)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE( 970)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE( 970)											Float point1_x = ( (Float)(x) );
HXDLIN( 970)											Float point1_y = ( (Float)(y) );
HXDLIN( 970)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN( 970)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN( 970)											Float x5 = (point2_x - point1_x);
HXDLIN( 970)											Float y5 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE( 970)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE( 970)							_hx_tmp19 = has;
            						}
HXDLIN( 970)						if (_hx_tmp19) {
HXLINE( 970)							int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 970)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 970)							this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 970)							this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 970)							this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 970)							this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            						}
            					}
            					else {
HXLINE( 970)						int position3 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 970)						position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 970)						this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN( 970)						this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN( 970)						this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN( 970)						this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            					}
            				}
HXLINE( 971)				expandFill->__get(0)((x + 1),y);
HXLINE( 972)				expandFill->__get(0)((x - 1),y);
HXLINE( 973)				expandFill->__get(0)(x,(y + 1));
HXLINE( 974)				expandFill->__get(0)(x,(y - 1));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_960_fillColorRecursive)
HXLINE( 961)		int x = _hx_int64_high(position);
HXDLIN( 961)		int y = _hx_int64_low(position);
HXDLIN( 961)		bool _hx_tmp;
HXDLIN( 961)		bool _hx_tmp1;
HXDLIN( 961)		bool _hx_tmp2;
HXDLIN( 961)		if ((x >= 0)) {
HXLINE( 961)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXLINE( 961)			_hx_tmp2 = false;
            		}
HXDLIN( 961)		if (_hx_tmp2) {
HXLINE( 961)			_hx_tmp1 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 961)			_hx_tmp1 = false;
            		}
HXDLIN( 961)		if (_hx_tmp1) {
HXLINE( 961)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 961)			_hx_tmp = false;
            		}
HXDLIN( 961)		if (!(_hx_tmp)) {
HXLINE( 961)			 ::haxe::io::Bytes this2 = this1;
HXDLIN( 961)			::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN( 961)			int _hx_tmp3 = _hx_int64_high(this3);
HXDLIN( 961)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this2, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this3))));
            		}
HXDLIN( 961)		int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN( 961)		position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 961)		int originalColor = ((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) ));
HXLINE( 963)		::Array< ::Dynamic> expandFill = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 963)		expandFill[0] =  ::Dynamic(new _hx_Closure_0(originalColor,this1,color,expandFill));
HXLINE( 977)		 ::Dynamic expandFill1 = expandFill->__get(0);
HXDLIN( 977)		int _hx_tmp4 = _hx_int64_high(position);
HXDLIN( 977)		expandFill1(_hx_tmp4,_hx_int64_low(position));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,fillColorRecursive,(void))

void Image_Impl__obj::fillColor( ::haxe::io::Bytes this1,::cpp::Int64 position,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_989_fillColor)
HXLINE( 990)		 ::haxe::ds::List queue =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 991)		Float p_x = ( (Float)(_hx_int64_high(position)) );
HXDLIN( 991)		Float p_y = ( (Float)(_hx_int64_low(position)) );
HXDLIN( 991)		int x = ::Std_obj::_hx_int(p_x);
HXDLIN( 991)		queue->push(_hx_int64_make(x,::Std_obj::_hx_int(p_y)));
HXLINE( 992)		::Array< ::cpp::Int64 > explored = ::Array_obj< ::cpp::Int64 >::__new(0);
HXLINE( 993)		int x1 = _hx_int64_high(position);
HXDLIN( 993)		int y = _hx_int64_low(position);
HXDLIN( 993)		bool _hx_tmp;
HXDLIN( 993)		bool _hx_tmp1;
HXDLIN( 993)		bool _hx_tmp2;
HXDLIN( 993)		if ((x1 >= 0)) {
HXLINE( 993)			_hx_tmp2 = (y >= 0);
            		}
            		else {
HXLINE( 993)			_hx_tmp2 = false;
            		}
HXDLIN( 993)		if (_hx_tmp2) {
HXLINE( 993)			_hx_tmp1 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            		}
            		else {
HXLINE( 993)			_hx_tmp1 = false;
            		}
HXDLIN( 993)		if (_hx_tmp1) {
HXLINE( 993)			_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            		}
            		else {
HXLINE( 993)			_hx_tmp = false;
            		}
HXDLIN( 993)		if (!(_hx_tmp)) {
HXLINE( 993)			::cpp::Int64 this2 = _hx_int64_make(x1,y);
HXDLIN( 993)			int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN( 993)			HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            		}
HXDLIN( 993)		int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN( 993)		position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN( 993)		int originalColor = ((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) ));
HXLINE( 994)		int pc = 0;
HXLINE(1007)		while((queue->length > 0)){
HXLINE(1008)			 ::Dynamic v = queue->pop();
HXLINE(1009)			int high = _hx_int64_high(( (::cpp::Int64)(v) ));
HXDLIN(1009)			explored->push(_hx_int64_make(high,_hx_int64_low(( (::cpp::Int64)(v) ))));
HXLINE(1010)			{
HXLINE(1010)				Float p_x1 = ( (Float)((_hx_int64_high(( (::cpp::Int64)(v) )) + 1)) );
HXDLIN(1010)				Float p_y1 = ( (Float)(_hx_int64_low(( (::cpp::Int64)(v) ))) );
HXDLIN(1010)				int x2 = ::Std_obj::_hx_int(p_x1);
HXDLIN(1010)				::cpp::Int64 point = _hx_int64_make(x2,::Std_obj::_hx_int(p_y1));
HXDLIN(1010)				if ((pc >= 100000)) {
HXLINE(1010)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),997,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillColor",e0,97,03,19)));
HXDLIN(1010)					queue->clear();
            				}
            				else {
HXLINE(1010)					bool _hx_tmp4;
HXDLIN(1010)					bool _hx_tmp5;
HXDLIN(1010)					Float x3 = ( (Float)(_hx_int64_high(point)) );
HXDLIN(1010)					Float y1 = ( (Float)(_hx_int64_low(point)) );
HXDLIN(1010)					bool _hx_tmp6;
HXDLIN(1010)					bool _hx_tmp7;
HXDLIN(1010)					bool _hx_tmp8;
HXDLIN(1010)					if ((x3 >= 0)) {
HXLINE(1010)						_hx_tmp8 = (y1 >= 0);
            					}
            					else {
HXLINE(1010)						_hx_tmp8 = false;
            					}
HXDLIN(1010)					if (_hx_tmp8) {
HXLINE(1010)						_hx_tmp7 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1010)						_hx_tmp7 = false;
            					}
HXDLIN(1010)					if (_hx_tmp7) {
HXLINE(1010)						_hx_tmp6 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1010)						_hx_tmp6 = false;
            					}
HXDLIN(1010)					if (_hx_tmp6) {
HXLINE(1010)						int x4 = _hx_int64_high(point);
HXDLIN(1010)						int y2 = _hx_int64_low(point);
HXDLIN(1010)						bool _hx_tmp9;
HXDLIN(1010)						bool _hx_tmp10;
HXDLIN(1010)						bool _hx_tmp11;
HXDLIN(1010)						if ((x4 >= 0)) {
HXLINE(1010)							_hx_tmp11 = (y2 >= 0);
            						}
            						else {
HXLINE(1010)							_hx_tmp11 = false;
            						}
HXDLIN(1010)						if (_hx_tmp11) {
HXLINE(1010)							_hx_tmp10 = (x4 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(1010)							_hx_tmp10 = false;
            						}
HXDLIN(1010)						if (_hx_tmp10) {
HXLINE(1010)							_hx_tmp9 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(1010)							_hx_tmp9 = false;
            						}
HXDLIN(1010)						if (!(_hx_tmp9)) {
HXLINE(1010)							::cpp::Int64 this3 = _hx_int64_make(x4,y2);
HXDLIN(1010)							int _hx_tmp12 = _hx_int64_high(this3);
HXDLIN(1010)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp12,_hx_int64_low(this3))));
            						}
HXDLIN(1010)						int position2 = (((y2 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN(1010)						position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1010)						_hx_tmp5 = (((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) )) == originalColor);
            					}
            					else {
HXLINE(1010)						_hx_tmp5 = false;
            					}
HXDLIN(1010)					if (_hx_tmp5) {
HXLINE(1010)						int high1 = _hx_int64_high(point);
HXDLIN(1010)						_hx_tmp4 = !(explored->contains(_hx_int64_make(high1,_hx_int64_low(point))));
            					}
            					else {
HXLINE(1010)						_hx_tmp4 = false;
            					}
HXDLIN(1010)					if (_hx_tmp4) {
HXLINE(1010)						pc = (pc + 1);
HXDLIN(1010)						Float p_x2 = ( (Float)(_hx_int64_high(point)) );
HXDLIN(1010)						Float p_y2 = ( (Float)(_hx_int64_low(point)) );
HXDLIN(1010)						int x5 = ::Std_obj::_hx_int(p_x2);
HXDLIN(1010)						queue->push(_hx_int64_make(x5,::Std_obj::_hx_int(p_y2)));
HXDLIN(1010)						{
HXLINE(1010)							int x6 = _hx_int64_high(point);
HXDLIN(1010)							int y3 = _hx_int64_low(point);
HXDLIN(1010)							bool _hx_tmp13;
HXDLIN(1010)							bool _hx_tmp14;
HXDLIN(1010)							bool _hx_tmp15;
HXDLIN(1010)							if ((x6 >= 0)) {
HXLINE(1010)								_hx_tmp15 = (y3 >= 0);
            							}
            							else {
HXLINE(1010)								_hx_tmp15 = false;
            							}
HXDLIN(1010)							if (_hx_tmp15) {
HXLINE(1010)								_hx_tmp14 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1010)								_hx_tmp14 = false;
            							}
HXDLIN(1010)							if (_hx_tmp14) {
HXLINE(1010)								_hx_tmp13 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1010)								_hx_tmp13 = false;
            							}
HXDLIN(1010)							if (!(_hx_tmp13)) {
HXLINE(1010)								::cpp::Int64 this4 = _hx_int64_make(x6,y3);
HXDLIN(1010)								int _hx_tmp16 = _hx_int64_high(this4);
HXDLIN(1010)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp16,_hx_int64_low(this4))));
            							}
            							else {
HXLINE(1010)								bool _hx_tmp17;
HXDLIN(1010)								bool _hx_tmp18;
HXDLIN(1010)								bool _hx_tmp19;
HXDLIN(1010)								bool _hx_tmp20;
HXDLIN(1010)								int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1010)								if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1010)									int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)									_hx_tmp20 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1010)									_hx_tmp20 = true;
            								}
HXDLIN(1010)								if (!(_hx_tmp20)) {
HXLINE(1010)									int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1010)									_hx_tmp19 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1010)									_hx_tmp19 = true;
            								}
HXDLIN(1010)								if (!(_hx_tmp19)) {
HXLINE(1010)									int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)									_hx_tmp18 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1010)									_hx_tmp18 = true;
            								}
HXDLIN(1010)								if (!(_hx_tmp18)) {
HXLINE(1010)									_hx_tmp17 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(1010)									_hx_tmp17 = true;
            								}
HXDLIN(1010)								if (_hx_tmp17) {
HXLINE(1010)									 ::vision::ds::ImageView v1 = null();
HXDLIN(1010)									bool _hx_tmp21;
HXDLIN(1010)									bool _hx_tmp22;
HXDLIN(1010)									bool _hx_tmp23;
HXDLIN(1010)									bool _hx_tmp24;
HXDLIN(1010)									bool _hx_tmp25;
HXDLIN(1010)									bool _hx_tmp26;
HXDLIN(1010)									int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1010)									if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1010)										int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)										_hx_tmp26 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1010)										_hx_tmp26 = true;
            									}
HXDLIN(1010)									if (!(_hx_tmp26)) {
HXLINE(1010)										int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1010)										_hx_tmp25 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1010)										_hx_tmp25 = true;
            									}
HXDLIN(1010)									if (!(_hx_tmp25)) {
HXLINE(1010)										int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)										_hx_tmp24 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1010)										_hx_tmp24 = true;
            									}
HXDLIN(1010)									if (!(_hx_tmp24)) {
HXLINE(1010)										_hx_tmp23 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1010)										_hx_tmp23 = true;
            									}
HXDLIN(1010)									if (!(_hx_tmp23)) {
HXLINE(1010)										_hx_tmp22 = ::hx::IsNull( v1 );
            									}
            									else {
HXLINE(1010)										_hx_tmp22 = false;
            									}
HXDLIN(1010)									if (_hx_tmp22) {
HXLINE(1010)										bool _hx_tmp27;
HXDLIN(1010)										bool _hx_tmp28;
HXDLIN(1010)										if ((x6 >= 0)) {
HXLINE(1010)											_hx_tmp28 = (y3 >= 0);
            										}
            										else {
HXLINE(1010)											_hx_tmp28 = false;
            										}
HXDLIN(1010)										if (_hx_tmp28) {
HXLINE(1010)											_hx_tmp27 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1010)											_hx_tmp27 = false;
            										}
HXDLIN(1010)										if (_hx_tmp27) {
HXLINE(1010)											_hx_tmp21 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1010)											_hx_tmp21 = false;
            										}
            									}
            									else {
HXLINE(1010)										bool has = false;
HXDLIN(1010)										 ::vision::ds::ImageView view;
HXDLIN(1010)										if (::hx::IsNotNull( v1 )) {
HXLINE(1010)											view = v1;
            										}
            										else {
HXLINE(1010)											int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1010)											int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)											int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1010)											int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1010)											view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(1010)										switch((int)(view->shape)){
            											case (int)0: {
HXLINE(1010)												bool has1;
HXDLIN(1010)												bool has2;
HXDLIN(1010)												if ((x6 < (view->x + view->width))) {
HXLINE(1010)													has2 = (y3 < (view->y + view->height));
            												}
            												else {
HXLINE(1010)													has2 = false;
            												}
HXDLIN(1010)												if (has2) {
HXLINE(1010)													has1 = (x6 >= view->x);
            												}
            												else {
HXLINE(1010)													has1 = false;
            												}
HXDLIN(1010)												if (has1) {
HXLINE(1010)													has = (y3 >= view->y);
            												}
            												else {
HXLINE(1010)													has = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1010)												bool has3;
HXDLIN(1010)												bool has4;
HXDLIN(1010)												bool has5;
HXDLIN(1010)												if ((x6 < (view->x + view->width))) {
HXLINE(1010)													has5 = (y3 < (view->y + view->height));
            												}
            												else {
HXLINE(1010)													has5 = false;
            												}
HXDLIN(1010)												if (has5) {
HXLINE(1010)													has4 = (x6 >= view->x);
            												}
            												else {
HXLINE(1010)													has4 = false;
            												}
HXDLIN(1010)												if (has4) {
HXLINE(1010)													has3 = (y3 >= view->y);
            												}
            												else {
HXLINE(1010)													has3 = false;
            												}
HXLINE(1400)												has = !(has3);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(1010)												if ((view->width > view->height)) {
HXLINE(1010)													Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1010)													Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1010)													Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1010)													Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1010)													Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1010)													Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1010)													Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1010)													::cpp::Int64 p = _hx_int64_make(x6,y3);
HXDLIN(1010)													Float x7 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1010)													Float y4 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1010)													Float has6 = ::Math_obj::sqrt(((x7 * x7) + (y4 * y4)));
HXDLIN(1010)													Float x8 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1010)													Float y5 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)													has = ((has6 + ::Math_obj::sqrt(((x8 * x8) + (y5 * y5)))) <= view->width);
HXLINE(1010)													if ((view->shape == 3)) {
HXLINE(1416)														has = !(has);
            													}
            												}
            												else {
HXLINE(1010)													if ((view->height > view->width)) {
HXLINE(1010)														Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1010)														Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1010)														Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1010)														Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1010)														Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1010)														Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1010)														Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1010)														::cpp::Int64 p1 = _hx_int64_make(x6,y3);
HXDLIN(1010)														Float x9 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1010)														Float y6 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1010)														Float has7 = ::Math_obj::sqrt(((x9 * x9) + (y6 * y6)));
HXDLIN(1010)														Float x10 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1010)														Float y7 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)														has = ((has7 + ::Math_obj::sqrt(((x10 * x10) + (y7 * y7)))) <= view->height);
HXLINE(1010)														if ((view->shape == 3)) {
HXLINE(1425)															has = !(has);
            														}
            													}
            													else {
HXLINE(1010)														Float point1_x = ( (Float)(x6) );
HXDLIN(1010)														Float point1_y = ( (Float)(y3) );
HXDLIN(1010)														Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1010)														Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1010)														Float x11 = (point2_x - point1_x);
HXDLIN(1010)														Float y8 = (point2_y - point1_y);
HXLINE(1428)														has = (::Math_obj::sqrt(((x11 * x11) + (y8 * y8))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1010)														if ((view->shape == 3)) {
HXLINE(1429)															has = !(has);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has = (((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has = !((((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(1010)										_hx_tmp21 = has;
            									}
HXDLIN(1010)									if (_hx_tmp21) {
HXLINE(1010)										int position3 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(1010)										position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1010)										this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1010)										this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1010)										this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1010)										this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            									}
            								}
            								else {
HXLINE(1010)									int position4 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(1010)									position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1010)									this1->b[position4] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1010)									this1->b[(position4 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1010)									this1->b[(position4 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1010)									this1->b[(position4 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1011)			{
HXLINE(1011)				Float p_x3 = ( (Float)(_hx_int64_high(( (::cpp::Int64)(v) ))) );
HXDLIN(1011)				Float p_y3 = ( (Float)((_hx_int64_low(( (::cpp::Int64)(v) )) + 1)) );
HXDLIN(1011)				int x12 = ::Std_obj::_hx_int(p_x3);
HXDLIN(1011)				::cpp::Int64 point1 = _hx_int64_make(x12,::Std_obj::_hx_int(p_y3));
HXDLIN(1011)				if ((pc >= 100000)) {
HXLINE(1011)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),997,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillColor",e0,97,03,19)));
HXDLIN(1011)					queue->clear();
            				}
            				else {
HXLINE(1011)					bool _hx_tmp29;
HXDLIN(1011)					bool _hx_tmp30;
HXDLIN(1011)					Float x13 = ( (Float)(_hx_int64_high(point1)) );
HXDLIN(1011)					Float y9 = ( (Float)(_hx_int64_low(point1)) );
HXDLIN(1011)					bool _hx_tmp31;
HXDLIN(1011)					bool _hx_tmp32;
HXDLIN(1011)					bool _hx_tmp33;
HXDLIN(1011)					if ((x13 >= 0)) {
HXLINE(1011)						_hx_tmp33 = (y9 >= 0);
            					}
            					else {
HXLINE(1011)						_hx_tmp33 = false;
            					}
HXDLIN(1011)					if (_hx_tmp33) {
HXLINE(1011)						_hx_tmp32 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1011)						_hx_tmp32 = false;
            					}
HXDLIN(1011)					if (_hx_tmp32) {
HXLINE(1011)						_hx_tmp31 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1011)						_hx_tmp31 = false;
            					}
HXDLIN(1011)					if (_hx_tmp31) {
HXLINE(1011)						int x14 = _hx_int64_high(point1);
HXDLIN(1011)						int y10 = _hx_int64_low(point1);
HXDLIN(1011)						bool _hx_tmp34;
HXDLIN(1011)						bool _hx_tmp35;
HXDLIN(1011)						bool _hx_tmp36;
HXDLIN(1011)						if ((x14 >= 0)) {
HXLINE(1011)							_hx_tmp36 = (y10 >= 0);
            						}
            						else {
HXLINE(1011)							_hx_tmp36 = false;
            						}
HXDLIN(1011)						if (_hx_tmp36) {
HXLINE(1011)							_hx_tmp35 = (x14 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(1011)							_hx_tmp35 = false;
            						}
HXDLIN(1011)						if (_hx_tmp35) {
HXLINE(1011)							_hx_tmp34 = (y10 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(1011)							_hx_tmp34 = false;
            						}
HXDLIN(1011)						if (!(_hx_tmp34)) {
HXLINE(1011)							::cpp::Int64 this5 = _hx_int64_make(x14,y10);
HXDLIN(1011)							int _hx_tmp37 = _hx_int64_high(this5);
HXDLIN(1011)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp37,_hx_int64_low(this5))));
            						}
HXDLIN(1011)						int position5 = (((y10 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x14) * 4);
HXDLIN(1011)						position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1011)						_hx_tmp30 = (((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) )) == originalColor);
            					}
            					else {
HXLINE(1011)						_hx_tmp30 = false;
            					}
HXDLIN(1011)					if (_hx_tmp30) {
HXLINE(1011)						int high2 = _hx_int64_high(point1);
HXDLIN(1011)						_hx_tmp29 = !(explored->contains(_hx_int64_make(high2,_hx_int64_low(point1))));
            					}
            					else {
HXLINE(1011)						_hx_tmp29 = false;
            					}
HXDLIN(1011)					if (_hx_tmp29) {
HXLINE(1011)						pc = (pc + 1);
HXDLIN(1011)						Float p_x4 = ( (Float)(_hx_int64_high(point1)) );
HXDLIN(1011)						Float p_y4 = ( (Float)(_hx_int64_low(point1)) );
HXDLIN(1011)						int x15 = ::Std_obj::_hx_int(p_x4);
HXDLIN(1011)						queue->push(_hx_int64_make(x15,::Std_obj::_hx_int(p_y4)));
HXDLIN(1011)						{
HXLINE(1011)							int x16 = _hx_int64_high(point1);
HXDLIN(1011)							int y11 = _hx_int64_low(point1);
HXDLIN(1011)							bool _hx_tmp38;
HXDLIN(1011)							bool _hx_tmp39;
HXDLIN(1011)							bool _hx_tmp40;
HXDLIN(1011)							if ((x16 >= 0)) {
HXLINE(1011)								_hx_tmp40 = (y11 >= 0);
            							}
            							else {
HXLINE(1011)								_hx_tmp40 = false;
            							}
HXDLIN(1011)							if (_hx_tmp40) {
HXLINE(1011)								_hx_tmp39 = (x16 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1011)								_hx_tmp39 = false;
            							}
HXDLIN(1011)							if (_hx_tmp39) {
HXLINE(1011)								_hx_tmp38 = (y11 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1011)								_hx_tmp38 = false;
            							}
HXDLIN(1011)							if (!(_hx_tmp38)) {
HXLINE(1011)								::cpp::Int64 this6 = _hx_int64_make(x16,y11);
HXDLIN(1011)								int _hx_tmp41 = _hx_int64_high(this6);
HXDLIN(1011)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp41,_hx_int64_low(this6))));
            							}
            							else {
HXLINE(1011)								bool _hx_tmp42;
HXDLIN(1011)								bool _hx_tmp43;
HXDLIN(1011)								bool _hx_tmp44;
HXDLIN(1011)								bool _hx_tmp45;
HXDLIN(1011)								int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1011)								if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE(1011)									int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)									_hx_tmp45 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1011)									_hx_tmp45 = true;
            								}
HXDLIN(1011)								if (!(_hx_tmp45)) {
HXLINE(1011)									int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1011)									_hx_tmp44 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1011)									_hx_tmp44 = true;
            								}
HXDLIN(1011)								if (!(_hx_tmp44)) {
HXLINE(1011)									int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)									_hx_tmp43 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1011)									_hx_tmp43 = true;
            								}
HXDLIN(1011)								if (!(_hx_tmp43)) {
HXLINE(1011)									_hx_tmp42 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(1011)									_hx_tmp42 = true;
            								}
HXDLIN(1011)								if (_hx_tmp42) {
HXLINE(1011)									 ::vision::ds::ImageView v2 = null();
HXDLIN(1011)									bool _hx_tmp46;
HXDLIN(1011)									bool _hx_tmp47;
HXDLIN(1011)									bool _hx_tmp48;
HXDLIN(1011)									bool _hx_tmp49;
HXDLIN(1011)									bool _hx_tmp50;
HXDLIN(1011)									bool _hx_tmp51;
HXDLIN(1011)									int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1011)									if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE(1011)										int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)										_hx_tmp51 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1011)										_hx_tmp51 = true;
            									}
HXDLIN(1011)									if (!(_hx_tmp51)) {
HXLINE(1011)										int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1011)										_hx_tmp50 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1011)										_hx_tmp50 = true;
            									}
HXDLIN(1011)									if (!(_hx_tmp50)) {
HXLINE(1011)										int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)										_hx_tmp49 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1011)										_hx_tmp49 = true;
            									}
HXDLIN(1011)									if (!(_hx_tmp49)) {
HXLINE(1011)										_hx_tmp48 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1011)										_hx_tmp48 = true;
            									}
HXDLIN(1011)									if (!(_hx_tmp48)) {
HXLINE(1011)										_hx_tmp47 = ::hx::IsNull( v2 );
            									}
            									else {
HXLINE(1011)										_hx_tmp47 = false;
            									}
HXDLIN(1011)									if (_hx_tmp47) {
HXLINE(1011)										bool _hx_tmp52;
HXDLIN(1011)										bool _hx_tmp53;
HXDLIN(1011)										if ((x16 >= 0)) {
HXLINE(1011)											_hx_tmp53 = (y11 >= 0);
            										}
            										else {
HXLINE(1011)											_hx_tmp53 = false;
            										}
HXDLIN(1011)										if (_hx_tmp53) {
HXLINE(1011)											_hx_tmp52 = (x16 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1011)											_hx_tmp52 = false;
            										}
HXDLIN(1011)										if (_hx_tmp52) {
HXLINE(1011)											_hx_tmp46 = (y11 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1011)											_hx_tmp46 = false;
            										}
            									}
            									else {
HXLINE(1011)										bool has8 = false;
HXDLIN(1011)										 ::vision::ds::ImageView view1;
HXDLIN(1011)										if (::hx::IsNotNull( v2 )) {
HXLINE(1011)											view1 = v2;
            										}
            										else {
HXLINE(1011)											int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1011)											int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)											int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1011)											int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1011)											view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(1011)										switch((int)(view1->shape)){
            											case (int)0: {
HXLINE(1011)												bool has9;
HXDLIN(1011)												bool has10;
HXDLIN(1011)												if ((x16 < (view1->x + view1->width))) {
HXLINE(1011)													has10 = (y11 < (view1->y + view1->height));
            												}
            												else {
HXLINE(1011)													has10 = false;
            												}
HXDLIN(1011)												if (has10) {
HXLINE(1011)													has9 = (x16 >= view1->x);
            												}
            												else {
HXLINE(1011)													has9 = false;
            												}
HXDLIN(1011)												if (has9) {
HXLINE(1011)													has8 = (y11 >= view1->y);
            												}
            												else {
HXLINE(1011)													has8 = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1011)												bool has11;
HXDLIN(1011)												bool has12;
HXDLIN(1011)												bool has13;
HXDLIN(1011)												if ((x16 < (view1->x + view1->width))) {
HXLINE(1011)													has13 = (y11 < (view1->y + view1->height));
            												}
            												else {
HXLINE(1011)													has13 = false;
            												}
HXDLIN(1011)												if (has13) {
HXLINE(1011)													has12 = (x16 >= view1->x);
            												}
            												else {
HXLINE(1011)													has12 = false;
            												}
HXDLIN(1011)												if (has12) {
HXLINE(1011)													has11 = (y11 >= view1->y);
            												}
            												else {
HXLINE(1011)													has11 = false;
            												}
HXLINE(1400)												has8 = !(has11);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(1011)												if ((view1->width > view1->height)) {
HXLINE(1011)													Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1011)													Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1011)													Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN(1011)													Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN(1011)													Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1011)													Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN(1011)													Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1011)													::cpp::Int64 p2 = _hx_int64_make(x16,y11);
HXDLIN(1011)													Float x17 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN(1011)													Float y12 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN(1011)													Float has14 = ::Math_obj::sqrt(((x17 * x17) + (y12 * y12)));
HXDLIN(1011)													Float x18 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN(1011)													Float y13 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)													has8 = ((has14 + ::Math_obj::sqrt(((x18 * x18) + (y13 * y13)))) <= view1->width);
HXLINE(1011)													if ((view1->shape == 3)) {
HXLINE(1416)														has8 = !(has8);
            													}
            												}
            												else {
HXLINE(1011)													if ((view1->height > view1->width)) {
HXLINE(1011)														Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1011)														Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1011)														Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN(1011)														Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1011)														Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN(1011)														Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1011)														Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN(1011)														::cpp::Int64 p3 = _hx_int64_make(x16,y11);
HXDLIN(1011)														Float x19 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN(1011)														Float y14 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN(1011)														Float has15 = ::Math_obj::sqrt(((x19 * x19) + (y14 * y14)));
HXDLIN(1011)														Float x20 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN(1011)														Float y15 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)														has8 = ((has15 + ::Math_obj::sqrt(((x20 * x20) + (y15 * y15)))) <= view1->height);
HXLINE(1011)														if ((view1->shape == 3)) {
HXLINE(1425)															has8 = !(has8);
            														}
            													}
            													else {
HXLINE(1011)														Float point1_x1 = ( (Float)(x16) );
HXDLIN(1011)														Float point1_y1 = ( (Float)(y11) );
HXDLIN(1011)														Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1011)														Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1011)														Float x21 = (point2_x1 - point1_x1);
HXDLIN(1011)														Float y16 = (point2_y1 - point1_y1);
HXLINE(1428)														has8 = (::Math_obj::sqrt(((x21 * x21) + (y16 * y16))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE(1011)														if ((view1->shape == 3)) {
HXLINE(1429)															has8 = !(has8);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has8 = (((::Math_obj::abs((( (Float)((x16 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y11 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has8 = !((((::Math_obj::abs((( (Float)((x16 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y11 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(1011)										_hx_tmp46 = has8;
            									}
HXDLIN(1011)									if (_hx_tmp46) {
HXLINE(1011)										int position6 = (((y11 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x16) * 4);
HXDLIN(1011)										position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1011)										this1->b[position6] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1011)										this1->b[(position6 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1011)										this1->b[(position6 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1011)										this1->b[(position6 + 3)] = ( (unsigned char)((color & 255)) );
            									}
            								}
            								else {
HXLINE(1011)									int position7 = (((y11 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x16) * 4);
HXDLIN(1011)									position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1011)									this1->b[position7] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1011)									this1->b[(position7 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1011)									this1->b[(position7 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1011)									this1->b[(position7 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1012)			{
HXLINE(1012)				Float p_x5 = ( (Float)((_hx_int64_high(( (::cpp::Int64)(v) )) - 1)) );
HXDLIN(1012)				Float p_y5 = ( (Float)(_hx_int64_low(( (::cpp::Int64)(v) ))) );
HXDLIN(1012)				int x22 = ::Std_obj::_hx_int(p_x5);
HXDLIN(1012)				::cpp::Int64 point2 = _hx_int64_make(x22,::Std_obj::_hx_int(p_y5));
HXDLIN(1012)				if ((pc >= 100000)) {
HXLINE(1012)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),997,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillColor",e0,97,03,19)));
HXDLIN(1012)					queue->clear();
            				}
            				else {
HXLINE(1012)					bool _hx_tmp54;
HXDLIN(1012)					bool _hx_tmp55;
HXDLIN(1012)					Float x23 = ( (Float)(_hx_int64_high(point2)) );
HXDLIN(1012)					Float y17 = ( (Float)(_hx_int64_low(point2)) );
HXDLIN(1012)					bool _hx_tmp56;
HXDLIN(1012)					bool _hx_tmp57;
HXDLIN(1012)					bool _hx_tmp58;
HXDLIN(1012)					if ((x23 >= 0)) {
HXLINE(1012)						_hx_tmp58 = (y17 >= 0);
            					}
            					else {
HXLINE(1012)						_hx_tmp58 = false;
            					}
HXDLIN(1012)					if (_hx_tmp58) {
HXLINE(1012)						_hx_tmp57 = (x23 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1012)						_hx_tmp57 = false;
            					}
HXDLIN(1012)					if (_hx_tmp57) {
HXLINE(1012)						_hx_tmp56 = (y17 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1012)						_hx_tmp56 = false;
            					}
HXDLIN(1012)					if (_hx_tmp56) {
HXLINE(1012)						int x24 = _hx_int64_high(point2);
HXDLIN(1012)						int y18 = _hx_int64_low(point2);
HXDLIN(1012)						bool _hx_tmp59;
HXDLIN(1012)						bool _hx_tmp60;
HXDLIN(1012)						bool _hx_tmp61;
HXDLIN(1012)						if ((x24 >= 0)) {
HXLINE(1012)							_hx_tmp61 = (y18 >= 0);
            						}
            						else {
HXLINE(1012)							_hx_tmp61 = false;
            						}
HXDLIN(1012)						if (_hx_tmp61) {
HXLINE(1012)							_hx_tmp60 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(1012)							_hx_tmp60 = false;
            						}
HXDLIN(1012)						if (_hx_tmp60) {
HXLINE(1012)							_hx_tmp59 = (y18 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(1012)							_hx_tmp59 = false;
            						}
HXDLIN(1012)						if (!(_hx_tmp59)) {
HXLINE(1012)							::cpp::Int64 this7 = _hx_int64_make(x24,y18);
HXDLIN(1012)							int _hx_tmp62 = _hx_int64_high(this7);
HXDLIN(1012)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp62,_hx_int64_low(this7))));
            						}
HXDLIN(1012)						int position8 = (((y18 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN(1012)						position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1012)						_hx_tmp55 = (((((( (int)(this1->b->__get(position8)) ) << 24) | (( (int)(this1->b->__get((position8 + 1))) ) << 16)) | (( (int)(this1->b->__get((position8 + 2))) ) << 8)) | ( (int)(this1->b->__get((position8 + 3))) )) == originalColor);
            					}
            					else {
HXLINE(1012)						_hx_tmp55 = false;
            					}
HXDLIN(1012)					if (_hx_tmp55) {
HXLINE(1012)						int high3 = _hx_int64_high(point2);
HXDLIN(1012)						_hx_tmp54 = !(explored->contains(_hx_int64_make(high3,_hx_int64_low(point2))));
            					}
            					else {
HXLINE(1012)						_hx_tmp54 = false;
            					}
HXDLIN(1012)					if (_hx_tmp54) {
HXLINE(1012)						pc = (pc + 1);
HXDLIN(1012)						Float p_x6 = ( (Float)(_hx_int64_high(point2)) );
HXDLIN(1012)						Float p_y6 = ( (Float)(_hx_int64_low(point2)) );
HXDLIN(1012)						int x25 = ::Std_obj::_hx_int(p_x6);
HXDLIN(1012)						queue->push(_hx_int64_make(x25,::Std_obj::_hx_int(p_y6)));
HXDLIN(1012)						{
HXLINE(1012)							int x26 = _hx_int64_high(point2);
HXDLIN(1012)							int y19 = _hx_int64_low(point2);
HXDLIN(1012)							bool _hx_tmp63;
HXDLIN(1012)							bool _hx_tmp64;
HXDLIN(1012)							bool _hx_tmp65;
HXDLIN(1012)							if ((x26 >= 0)) {
HXLINE(1012)								_hx_tmp65 = (y19 >= 0);
            							}
            							else {
HXLINE(1012)								_hx_tmp65 = false;
            							}
HXDLIN(1012)							if (_hx_tmp65) {
HXLINE(1012)								_hx_tmp64 = (x26 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1012)								_hx_tmp64 = false;
            							}
HXDLIN(1012)							if (_hx_tmp64) {
HXLINE(1012)								_hx_tmp63 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1012)								_hx_tmp63 = false;
            							}
HXDLIN(1012)							if (!(_hx_tmp63)) {
HXLINE(1012)								::cpp::Int64 this8 = _hx_int64_make(x26,y19);
HXDLIN(1012)								int _hx_tmp66 = _hx_int64_high(this8);
HXDLIN(1012)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp66,_hx_int64_low(this8))));
            							}
            							else {
HXLINE(1012)								bool _hx_tmp67;
HXDLIN(1012)								bool _hx_tmp68;
HXDLIN(1012)								bool _hx_tmp69;
HXDLIN(1012)								bool _hx_tmp70;
HXDLIN(1012)								int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1012)								if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE(1012)									int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)									_hx_tmp70 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1012)									_hx_tmp70 = true;
            								}
HXDLIN(1012)								if (!(_hx_tmp70)) {
HXLINE(1012)									int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1012)									_hx_tmp69 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1012)									_hx_tmp69 = true;
            								}
HXDLIN(1012)								if (!(_hx_tmp69)) {
HXLINE(1012)									int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)									_hx_tmp68 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1012)									_hx_tmp68 = true;
            								}
HXDLIN(1012)								if (!(_hx_tmp68)) {
HXLINE(1012)									_hx_tmp67 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(1012)									_hx_tmp67 = true;
            								}
HXDLIN(1012)								if (_hx_tmp67) {
HXLINE(1012)									 ::vision::ds::ImageView v3 = null();
HXDLIN(1012)									bool _hx_tmp71;
HXDLIN(1012)									bool _hx_tmp72;
HXDLIN(1012)									bool _hx_tmp73;
HXDLIN(1012)									bool _hx_tmp74;
HXDLIN(1012)									bool _hx_tmp75;
HXDLIN(1012)									bool _hx_tmp76;
HXDLIN(1012)									int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1012)									if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE(1012)										int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)										_hx_tmp76 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1012)										_hx_tmp76 = true;
            									}
HXDLIN(1012)									if (!(_hx_tmp76)) {
HXLINE(1012)										int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1012)										_hx_tmp75 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1012)										_hx_tmp75 = true;
            									}
HXDLIN(1012)									if (!(_hx_tmp75)) {
HXLINE(1012)										int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)										_hx_tmp74 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1012)										_hx_tmp74 = true;
            									}
HXDLIN(1012)									if (!(_hx_tmp74)) {
HXLINE(1012)										_hx_tmp73 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1012)										_hx_tmp73 = true;
            									}
HXDLIN(1012)									if (!(_hx_tmp73)) {
HXLINE(1012)										_hx_tmp72 = ::hx::IsNull( v3 );
            									}
            									else {
HXLINE(1012)										_hx_tmp72 = false;
            									}
HXDLIN(1012)									if (_hx_tmp72) {
HXLINE(1012)										bool _hx_tmp77;
HXDLIN(1012)										bool _hx_tmp78;
HXDLIN(1012)										if ((x26 >= 0)) {
HXLINE(1012)											_hx_tmp78 = (y19 >= 0);
            										}
            										else {
HXLINE(1012)											_hx_tmp78 = false;
            										}
HXDLIN(1012)										if (_hx_tmp78) {
HXLINE(1012)											_hx_tmp77 = (x26 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1012)											_hx_tmp77 = false;
            										}
HXDLIN(1012)										if (_hx_tmp77) {
HXLINE(1012)											_hx_tmp71 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1012)											_hx_tmp71 = false;
            										}
            									}
            									else {
HXLINE(1012)										bool has16 = false;
HXDLIN(1012)										 ::vision::ds::ImageView view2;
HXDLIN(1012)										if (::hx::IsNotNull( v3 )) {
HXLINE(1012)											view2 = v3;
            										}
            										else {
HXLINE(1012)											int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1012)											int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)											int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1012)											int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1012)											view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(1012)										switch((int)(view2->shape)){
            											case (int)0: {
HXLINE(1012)												bool has17;
HXDLIN(1012)												bool has18;
HXDLIN(1012)												if ((x26 < (view2->x + view2->width))) {
HXLINE(1012)													has18 = (y19 < (view2->y + view2->height));
            												}
            												else {
HXLINE(1012)													has18 = false;
            												}
HXDLIN(1012)												if (has18) {
HXLINE(1012)													has17 = (x26 >= view2->x);
            												}
            												else {
HXLINE(1012)													has17 = false;
            												}
HXDLIN(1012)												if (has17) {
HXLINE(1012)													has16 = (y19 >= view2->y);
            												}
            												else {
HXLINE(1012)													has16 = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1012)												bool has19;
HXDLIN(1012)												bool has20;
HXDLIN(1012)												bool has21;
HXDLIN(1012)												if ((x26 < (view2->x + view2->width))) {
HXLINE(1012)													has21 = (y19 < (view2->y + view2->height));
            												}
            												else {
HXLINE(1012)													has21 = false;
            												}
HXDLIN(1012)												if (has21) {
HXLINE(1012)													has20 = (x26 >= view2->x);
            												}
            												else {
HXLINE(1012)													has20 = false;
            												}
HXDLIN(1012)												if (has20) {
HXLINE(1012)													has19 = (y19 >= view2->y);
            												}
            												else {
HXLINE(1012)													has19 = false;
            												}
HXLINE(1400)												has16 = !(has19);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(1012)												if ((view2->width > view2->height)) {
HXLINE(1012)													Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN(1012)													Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN(1012)													Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN(1012)													Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN(1012)													Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1012)													Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN(1012)													Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1012)													::cpp::Int64 p4 = _hx_int64_make(x26,y19);
HXDLIN(1012)													Float x27 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN(1012)													Float y20 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN(1012)													Float has22 = ::Math_obj::sqrt(((x27 * x27) + (y20 * y20)));
HXDLIN(1012)													Float x28 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN(1012)													Float y21 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)													has16 = ((has22 + ::Math_obj::sqrt(((x28 * x28) + (y21 * y21)))) <= view2->width);
HXLINE(1012)													if ((view2->shape == 3)) {
HXLINE(1416)														has16 = !(has16);
            													}
            												}
            												else {
HXLINE(1012)													if ((view2->height > view2->width)) {
HXLINE(1012)														Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN(1012)														Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN(1012)														Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN(1012)														Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1012)														Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN(1012)														Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1012)														Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN(1012)														::cpp::Int64 p5 = _hx_int64_make(x26,y19);
HXDLIN(1012)														Float x29 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN(1012)														Float y22 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN(1012)														Float has23 = ::Math_obj::sqrt(((x29 * x29) + (y22 * y22)));
HXDLIN(1012)														Float x30 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN(1012)														Float y23 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)														has16 = ((has23 + ::Math_obj::sqrt(((x30 * x30) + (y23 * y23)))) <= view2->height);
HXLINE(1012)														if ((view2->shape == 3)) {
HXLINE(1425)															has16 = !(has16);
            														}
            													}
            													else {
HXLINE(1012)														Float point1_x2 = ( (Float)(x26) );
HXDLIN(1012)														Float point1_y2 = ( (Float)(y19) );
HXDLIN(1012)														Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1012)														Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1012)														Float x31 = (point2_x2 - point1_x2);
HXDLIN(1012)														Float y24 = (point2_y2 - point1_y2);
HXLINE(1428)														has16 = (::Math_obj::sqrt(((x31 * x31) + (y24 * y24))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE(1012)														if ((view2->shape == 3)) {
HXLINE(1429)															has16 = !(has16);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has16 = (((::Math_obj::abs((( (Float)((x26 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has16 = !((((::Math_obj::abs((( (Float)((x26 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y19 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(1012)										_hx_tmp71 = has16;
            									}
HXDLIN(1012)									if (_hx_tmp71) {
HXLINE(1012)										int position9 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x26) * 4);
HXDLIN(1012)										position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1012)										this1->b[position9] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1012)										this1->b[(position9 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1012)										this1->b[(position9 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1012)										this1->b[(position9 + 3)] = ( (unsigned char)((color & 255)) );
            									}
            								}
            								else {
HXLINE(1012)									int position10 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x26) * 4);
HXDLIN(1012)									position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1012)									this1->b[position10] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1012)									this1->b[(position10 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1012)									this1->b[(position10 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1012)									this1->b[(position10 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1013)			{
HXLINE(1013)				Float p_x7 = ( (Float)(_hx_int64_high(( (::cpp::Int64)(v) ))) );
HXDLIN(1013)				Float p_y7 = ( (Float)((_hx_int64_low(( (::cpp::Int64)(v) )) - 1)) );
HXDLIN(1013)				int x32 = ::Std_obj::_hx_int(p_x7);
HXDLIN(1013)				::cpp::Int64 point3 = _hx_int64_make(x32,::Std_obj::_hx_int(p_y7));
HXDLIN(1013)				if ((pc >= 100000)) {
HXLINE(1013)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),997,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillColor",e0,97,03,19)));
HXDLIN(1013)					queue->clear();
            				}
            				else {
HXLINE(1013)					bool _hx_tmp79;
HXDLIN(1013)					bool _hx_tmp80;
HXDLIN(1013)					Float x33 = ( (Float)(_hx_int64_high(point3)) );
HXDLIN(1013)					Float y25 = ( (Float)(_hx_int64_low(point3)) );
HXDLIN(1013)					bool _hx_tmp81;
HXDLIN(1013)					bool _hx_tmp82;
HXDLIN(1013)					bool _hx_tmp83;
HXDLIN(1013)					if ((x33 >= 0)) {
HXLINE(1013)						_hx_tmp83 = (y25 >= 0);
            					}
            					else {
HXLINE(1013)						_hx_tmp83 = false;
            					}
HXDLIN(1013)					if (_hx_tmp83) {
HXLINE(1013)						_hx_tmp82 = (x33 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1013)						_hx_tmp82 = false;
            					}
HXDLIN(1013)					if (_hx_tmp82) {
HXLINE(1013)						_hx_tmp81 = (y25 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1013)						_hx_tmp81 = false;
            					}
HXDLIN(1013)					if (_hx_tmp81) {
HXLINE(1013)						int x34 = _hx_int64_high(point3);
HXDLIN(1013)						int y26 = _hx_int64_low(point3);
HXDLIN(1013)						bool _hx_tmp84;
HXDLIN(1013)						bool _hx_tmp85;
HXDLIN(1013)						bool _hx_tmp86;
HXDLIN(1013)						if ((x34 >= 0)) {
HXLINE(1013)							_hx_tmp86 = (y26 >= 0);
            						}
            						else {
HXLINE(1013)							_hx_tmp86 = false;
            						}
HXDLIN(1013)						if (_hx_tmp86) {
HXLINE(1013)							_hx_tmp85 = (x34 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(1013)							_hx_tmp85 = false;
            						}
HXDLIN(1013)						if (_hx_tmp85) {
HXLINE(1013)							_hx_tmp84 = (y26 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(1013)							_hx_tmp84 = false;
            						}
HXDLIN(1013)						if (!(_hx_tmp84)) {
HXLINE(1013)							::cpp::Int64 this9 = _hx_int64_make(x34,y26);
HXDLIN(1013)							int _hx_tmp87 = _hx_int64_high(this9);
HXDLIN(1013)							HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp87,_hx_int64_low(this9))));
            						}
HXDLIN(1013)						int position11 = (((y26 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x34) * 4);
HXDLIN(1013)						position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1013)						_hx_tmp80 = (((((( (int)(this1->b->__get(position11)) ) << 24) | (( (int)(this1->b->__get((position11 + 1))) ) << 16)) | (( (int)(this1->b->__get((position11 + 2))) ) << 8)) | ( (int)(this1->b->__get((position11 + 3))) )) == originalColor);
            					}
            					else {
HXLINE(1013)						_hx_tmp80 = false;
            					}
HXDLIN(1013)					if (_hx_tmp80) {
HXLINE(1013)						int high4 = _hx_int64_high(point3);
HXDLIN(1013)						_hx_tmp79 = !(explored->contains(_hx_int64_make(high4,_hx_int64_low(point3))));
            					}
            					else {
HXLINE(1013)						_hx_tmp79 = false;
            					}
HXDLIN(1013)					if (_hx_tmp79) {
HXLINE(1013)						pc = (pc + 1);
HXDLIN(1013)						Float p_x8 = ( (Float)(_hx_int64_high(point3)) );
HXDLIN(1013)						Float p_y8 = ( (Float)(_hx_int64_low(point3)) );
HXDLIN(1013)						int x35 = ::Std_obj::_hx_int(p_x8);
HXDLIN(1013)						queue->push(_hx_int64_make(x35,::Std_obj::_hx_int(p_y8)));
HXDLIN(1013)						{
HXLINE(1013)							int x36 = _hx_int64_high(point3);
HXDLIN(1013)							int y27 = _hx_int64_low(point3);
HXDLIN(1013)							bool _hx_tmp88;
HXDLIN(1013)							bool _hx_tmp89;
HXDLIN(1013)							bool _hx_tmp90;
HXDLIN(1013)							if ((x36 >= 0)) {
HXLINE(1013)								_hx_tmp90 = (y27 >= 0);
            							}
            							else {
HXLINE(1013)								_hx_tmp90 = false;
            							}
HXDLIN(1013)							if (_hx_tmp90) {
HXLINE(1013)								_hx_tmp89 = (x36 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1013)								_hx_tmp89 = false;
            							}
HXDLIN(1013)							if (_hx_tmp89) {
HXLINE(1013)								_hx_tmp88 = (y27 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1013)								_hx_tmp88 = false;
            							}
HXDLIN(1013)							if (!(_hx_tmp88)) {
HXLINE(1013)								::cpp::Int64 this10 = _hx_int64_make(x36,y27);
HXDLIN(1013)								int _hx_tmp91 = _hx_int64_high(this10);
HXDLIN(1013)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp91,_hx_int64_low(this10))));
            							}
            							else {
HXLINE(1013)								bool _hx_tmp92;
HXDLIN(1013)								bool _hx_tmp93;
HXDLIN(1013)								bool _hx_tmp94;
HXDLIN(1013)								bool _hx_tmp95;
HXDLIN(1013)								int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1013)								if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE(1013)									int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)									_hx_tmp95 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1013)									_hx_tmp95 = true;
            								}
HXDLIN(1013)								if (!(_hx_tmp95)) {
HXLINE(1013)									int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1013)									_hx_tmp94 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1013)									_hx_tmp94 = true;
            								}
HXDLIN(1013)								if (!(_hx_tmp94)) {
HXLINE(1013)									int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)									_hx_tmp93 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1013)									_hx_tmp93 = true;
            								}
HXDLIN(1013)								if (!(_hx_tmp93)) {
HXLINE(1013)									_hx_tmp92 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(1013)									_hx_tmp92 = true;
            								}
HXDLIN(1013)								if (_hx_tmp92) {
HXLINE(1013)									 ::vision::ds::ImageView v4 = null();
HXDLIN(1013)									bool _hx_tmp96;
HXDLIN(1013)									bool _hx_tmp97;
HXDLIN(1013)									bool _hx_tmp98;
HXDLIN(1013)									bool _hx_tmp99;
HXDLIN(1013)									bool _hx_tmp100;
HXDLIN(1013)									bool _hx_tmp101;
HXDLIN(1013)									int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1013)									if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE(1013)										int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)										_hx_tmp101 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1013)										_hx_tmp101 = true;
            									}
HXDLIN(1013)									if (!(_hx_tmp101)) {
HXLINE(1013)										int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1013)										_hx_tmp100 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1013)										_hx_tmp100 = true;
            									}
HXDLIN(1013)									if (!(_hx_tmp100)) {
HXLINE(1013)										int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)										_hx_tmp99 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1013)										_hx_tmp99 = true;
            									}
HXDLIN(1013)									if (!(_hx_tmp99)) {
HXLINE(1013)										_hx_tmp98 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1013)										_hx_tmp98 = true;
            									}
HXDLIN(1013)									if (!(_hx_tmp98)) {
HXLINE(1013)										_hx_tmp97 = ::hx::IsNull( v4 );
            									}
            									else {
HXLINE(1013)										_hx_tmp97 = false;
            									}
HXDLIN(1013)									if (_hx_tmp97) {
HXLINE(1013)										bool _hx_tmp102;
HXDLIN(1013)										bool _hx_tmp103;
HXDLIN(1013)										if ((x36 >= 0)) {
HXLINE(1013)											_hx_tmp103 = (y27 >= 0);
            										}
            										else {
HXLINE(1013)											_hx_tmp103 = false;
            										}
HXDLIN(1013)										if (_hx_tmp103) {
HXLINE(1013)											_hx_tmp102 = (x36 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1013)											_hx_tmp102 = false;
            										}
HXDLIN(1013)										if (_hx_tmp102) {
HXLINE(1013)											_hx_tmp96 = (y27 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1013)											_hx_tmp96 = false;
            										}
            									}
            									else {
HXLINE(1013)										bool has24 = false;
HXDLIN(1013)										 ::vision::ds::ImageView view3;
HXDLIN(1013)										if (::hx::IsNotNull( v4 )) {
HXLINE(1013)											view3 = v4;
            										}
            										else {
HXLINE(1013)											int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1013)											int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)											int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1013)											int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1013)											view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(1013)										switch((int)(view3->shape)){
            											case (int)0: {
HXLINE(1013)												bool has25;
HXDLIN(1013)												bool has26;
HXDLIN(1013)												if ((x36 < (view3->x + view3->width))) {
HXLINE(1013)													has26 = (y27 < (view3->y + view3->height));
            												}
            												else {
HXLINE(1013)													has26 = false;
            												}
HXDLIN(1013)												if (has26) {
HXLINE(1013)													has25 = (x36 >= view3->x);
            												}
            												else {
HXLINE(1013)													has25 = false;
            												}
HXDLIN(1013)												if (has25) {
HXLINE(1013)													has24 = (y27 >= view3->y);
            												}
            												else {
HXLINE(1013)													has24 = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1013)												bool has27;
HXDLIN(1013)												bool has28;
HXDLIN(1013)												bool has29;
HXDLIN(1013)												if ((x36 < (view3->x + view3->width))) {
HXLINE(1013)													has29 = (y27 < (view3->y + view3->height));
            												}
            												else {
HXLINE(1013)													has29 = false;
            												}
HXDLIN(1013)												if (has29) {
HXLINE(1013)													has28 = (x36 >= view3->x);
            												}
            												else {
HXLINE(1013)													has28 = false;
            												}
HXDLIN(1013)												if (has28) {
HXLINE(1013)													has27 = (y27 >= view3->y);
            												}
            												else {
HXLINE(1013)													has27 = false;
            												}
HXLINE(1400)												has24 = !(has27);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(1013)												if ((view3->width > view3->height)) {
HXLINE(1013)													Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN(1013)													Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN(1013)													Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN(1013)													Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN(1013)													Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1013)													Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN(1013)													Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1013)													::cpp::Int64 p6 = _hx_int64_make(x36,y27);
HXDLIN(1013)													Float x37 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN(1013)													Float y28 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN(1013)													Float has30 = ::Math_obj::sqrt(((x37 * x37) + (y28 * y28)));
HXDLIN(1013)													Float x38 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN(1013)													Float y29 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)													has24 = ((has30 + ::Math_obj::sqrt(((x38 * x38) + (y29 * y29)))) <= view3->width);
HXLINE(1013)													if ((view3->shape == 3)) {
HXLINE(1416)														has24 = !(has24);
            													}
            												}
            												else {
HXLINE(1013)													if ((view3->height > view3->width)) {
HXLINE(1013)														Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN(1013)														Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN(1013)														Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN(1013)														Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1013)														Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN(1013)														Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1013)														Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN(1013)														::cpp::Int64 p7 = _hx_int64_make(x36,y27);
HXDLIN(1013)														Float x39 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN(1013)														Float y30 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN(1013)														Float has31 = ::Math_obj::sqrt(((x39 * x39) + (y30 * y30)));
HXDLIN(1013)														Float x40 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN(1013)														Float y31 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)														has24 = ((has31 + ::Math_obj::sqrt(((x40 * x40) + (y31 * y31)))) <= view3->height);
HXLINE(1013)														if ((view3->shape == 3)) {
HXLINE(1425)															has24 = !(has24);
            														}
            													}
            													else {
HXLINE(1013)														Float point1_x3 = ( (Float)(x36) );
HXDLIN(1013)														Float point1_y3 = ( (Float)(y27) );
HXDLIN(1013)														Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1013)														Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1013)														Float x41 = (point2_x3 - point1_x3);
HXDLIN(1013)														Float y32 = (point2_y3 - point1_y3);
HXLINE(1428)														has24 = (::Math_obj::sqrt(((x41 * x41) + (y32 * y32))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE(1013)														if ((view3->shape == 3)) {
HXLINE(1429)															has24 = !(has24);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has24 = (((::Math_obj::abs((( (Float)((x36 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y27 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has24 = !((((::Math_obj::abs((( (Float)((x36 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y27 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(1013)										_hx_tmp96 = has24;
            									}
HXDLIN(1013)									if (_hx_tmp96) {
HXLINE(1013)										int position12 = (((y27 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x36) * 4);
HXDLIN(1013)										position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1013)										this1->b[position12] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1013)										this1->b[(position12 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1013)										this1->b[(position12 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1013)										this1->b[(position12 + 3)] = ( (unsigned char)((color & 255)) );
            									}
            								}
            								else {
HXLINE(1013)									int position13 = (((y27 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x36) * 4);
HXDLIN(1013)									position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1013)									this1->b[position13] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1013)									this1->b[(position13 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1013)									this1->b[(position13 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1013)									this1->b[(position13 + 3)] = ( (unsigned char)((color & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,fillColor,(void))

void Image_Impl__obj::fillUntilColor( ::haxe::io::Bytes this1,::cpp::Int64 position,int color,int borderColor){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1026_fillUntilColor)
HXLINE(1027)		 ::haxe::ds::List queue =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE(1028)		Float p_x = ( (Float)(_hx_int64_high(position)) );
HXDLIN(1028)		Float p_y = ( (Float)(_hx_int64_low(position)) );
HXDLIN(1028)		int x = ::Std_obj::_hx_int(p_x);
HXDLIN(1028)		queue->push(_hx_int64_make(x,::Std_obj::_hx_int(p_y)));
HXLINE(1029)		::Array< ::cpp::Int64 > explored = ::Array_obj< ::cpp::Int64 >::__new(0);
HXLINE(1030)		int pc = 0;
HXLINE(1049)		while((queue->length > 0)){
HXLINE(1050)			 ::Dynamic v = queue->pop();
HXLINE(1051)			int high = _hx_int64_high(( (::cpp::Int64)(v) ));
HXDLIN(1051)			explored->push(_hx_int64_make(high,_hx_int64_low(( (::cpp::Int64)(v) ))));
HXLINE(1052)			{
HXLINE(1052)				Float p_x1 = ( (Float)((_hx_int64_high(( (::cpp::Int64)(v) )) + 1)) );
HXDLIN(1052)				Float p_y1 = ( (Float)(_hx_int64_low(( (::cpp::Int64)(v) ))) );
HXDLIN(1052)				int x1 = ::Std_obj::_hx_int(p_x1);
HXDLIN(1052)				::cpp::Int64 point = _hx_int64_make(x1,::Std_obj::_hx_int(p_y1));
HXDLIN(1052)				if ((pc >= 100000)) {
HXLINE(1052)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),1033,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillUntilColor",48,60,4d,c9)));
HXDLIN(1052)					queue->clear();
            				}
            				else {
HXLINE(1052)					Float x2 = ( (Float)(_hx_int64_high(point)) );
HXDLIN(1052)					Float y = ( (Float)(_hx_int64_low(point)) );
HXDLIN(1052)					bool _hx_tmp;
HXDLIN(1052)					bool _hx_tmp1;
HXDLIN(1052)					bool _hx_tmp2;
HXDLIN(1052)					if ((x2 >= 0)) {
HXLINE(1052)						_hx_tmp2 = (y >= 0);
            					}
            					else {
HXLINE(1052)						_hx_tmp2 = false;
            					}
HXDLIN(1052)					if (_hx_tmp2) {
HXLINE(1052)						_hx_tmp1 = (x2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1052)						_hx_tmp1 = false;
            					}
HXDLIN(1052)					if (_hx_tmp1) {
HXLINE(1052)						_hx_tmp = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1052)						_hx_tmp = false;
            					}
HXDLIN(1052)					if (_hx_tmp) {
HXLINE(1052)						int high1 = _hx_int64_high(point);
HXDLIN(1052)						if (!(explored->contains(_hx_int64_make(high1,_hx_int64_low(point))))) {
HXLINE(1052)							int x3 = _hx_int64_high(point);
HXDLIN(1052)							int y1 = _hx_int64_low(point);
HXDLIN(1052)							bool _hx_tmp3;
HXDLIN(1052)							bool _hx_tmp4;
HXDLIN(1052)							bool _hx_tmp5;
HXDLIN(1052)							if ((x3 >= 0)) {
HXLINE(1052)								_hx_tmp5 = (y1 >= 0);
            							}
            							else {
HXLINE(1052)								_hx_tmp5 = false;
            							}
HXDLIN(1052)							if (_hx_tmp5) {
HXLINE(1052)								_hx_tmp4 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1052)								_hx_tmp4 = false;
            							}
HXDLIN(1052)							if (_hx_tmp4) {
HXLINE(1052)								_hx_tmp3 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1052)								_hx_tmp3 = false;
            							}
HXDLIN(1052)							if (!(_hx_tmp3)) {
HXLINE(1052)								::cpp::Int64 this2 = _hx_int64_make(x3,y1);
HXDLIN(1052)								int _hx_tmp6 = _hx_int64_high(this2);
HXDLIN(1052)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_int64_low(this2))));
            							}
HXDLIN(1052)							int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x3) * 4);
HXDLIN(1052)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1052)							if ((((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )) != color)) {
HXLINE(1052)								int x4 = _hx_int64_high(point);
HXDLIN(1052)								int y2 = _hx_int64_low(point);
HXDLIN(1052)								bool _hx_tmp7;
HXDLIN(1052)								bool _hx_tmp8;
HXDLIN(1052)								bool _hx_tmp9;
HXDLIN(1052)								if ((x4 >= 0)) {
HXLINE(1052)									_hx_tmp9 = (y2 >= 0);
            								}
            								else {
HXLINE(1052)									_hx_tmp9 = false;
            								}
HXDLIN(1052)								if (_hx_tmp9) {
HXLINE(1052)									_hx_tmp8 = (x4 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1052)									_hx_tmp8 = false;
            								}
HXDLIN(1052)								if (_hx_tmp8) {
HXLINE(1052)									_hx_tmp7 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1052)									_hx_tmp7 = false;
            								}
HXDLIN(1052)								if (!(_hx_tmp7)) {
HXLINE(1052)									::cpp::Int64 this3 = _hx_int64_make(x4,y2);
HXDLIN(1052)									int _hx_tmp10 = _hx_int64_high(this3);
HXDLIN(1052)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_int64_low(this3))));
            								}
HXDLIN(1052)								int position2 = (((y2 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN(1052)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1052)								if ((((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) )) != borderColor)) {
HXLINE(1052)									pc = (pc + 1);
HXDLIN(1052)									Float p_x2 = ( (Float)(_hx_int64_high(point)) );
HXDLIN(1052)									Float p_y2 = ( (Float)(_hx_int64_low(point)) );
HXDLIN(1052)									int x5 = ::Std_obj::_hx_int(p_x2);
HXDLIN(1052)									queue->push(_hx_int64_make(x5,::Std_obj::_hx_int(p_y2)));
HXDLIN(1052)									{
HXLINE(1052)										int x6 = _hx_int64_high(point);
HXDLIN(1052)										int y3 = _hx_int64_low(point);
HXDLIN(1052)										bool _hx_tmp11;
HXDLIN(1052)										bool _hx_tmp12;
HXDLIN(1052)										bool _hx_tmp13;
HXDLIN(1052)										if ((x6 >= 0)) {
HXLINE(1052)											_hx_tmp13 = (y3 >= 0);
            										}
            										else {
HXLINE(1052)											_hx_tmp13 = false;
            										}
HXDLIN(1052)										if (_hx_tmp13) {
HXLINE(1052)											_hx_tmp12 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1052)											_hx_tmp12 = false;
            										}
HXDLIN(1052)										if (_hx_tmp12) {
HXLINE(1052)											_hx_tmp11 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1052)											_hx_tmp11 = false;
            										}
HXDLIN(1052)										if (!(_hx_tmp11)) {
HXLINE(1052)											::cpp::Int64 this4 = _hx_int64_make(x6,y3);
HXDLIN(1052)											int _hx_tmp14 = _hx_int64_high(this4);
HXDLIN(1052)											HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp14,_hx_int64_low(this4))));
            										}
            										else {
HXLINE(1052)											bool _hx_tmp15;
HXDLIN(1052)											bool _hx_tmp16;
HXDLIN(1052)											bool _hx_tmp17;
HXDLIN(1052)											bool _hx_tmp18;
HXDLIN(1052)											int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1052)											if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1052)												int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)												_hx_tmp18 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1052)												_hx_tmp18 = true;
            											}
HXDLIN(1052)											if (!(_hx_tmp18)) {
HXLINE(1052)												int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1052)												_hx_tmp17 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1052)												_hx_tmp17 = true;
            											}
HXDLIN(1052)											if (!(_hx_tmp17)) {
HXLINE(1052)												int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)												_hx_tmp16 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1052)												_hx_tmp16 = true;
            											}
HXDLIN(1052)											if (!(_hx_tmp16)) {
HXLINE(1052)												_hx_tmp15 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1052)												_hx_tmp15 = true;
            											}
HXDLIN(1052)											if (_hx_tmp15) {
HXLINE(1052)												 ::vision::ds::ImageView v1 = null();
HXDLIN(1052)												bool _hx_tmp19;
HXDLIN(1052)												bool _hx_tmp20;
HXDLIN(1052)												bool _hx_tmp21;
HXDLIN(1052)												bool _hx_tmp22;
HXDLIN(1052)												bool _hx_tmp23;
HXDLIN(1052)												bool _hx_tmp24;
HXDLIN(1052)												int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1052)												if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1052)													int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)													_hx_tmp24 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1052)													_hx_tmp24 = true;
            												}
HXDLIN(1052)												if (!(_hx_tmp24)) {
HXLINE(1052)													int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1052)													_hx_tmp23 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1052)													_hx_tmp23 = true;
            												}
HXDLIN(1052)												if (!(_hx_tmp23)) {
HXLINE(1052)													int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)													_hx_tmp22 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1052)													_hx_tmp22 = true;
            												}
HXDLIN(1052)												if (!(_hx_tmp22)) {
HXLINE(1052)													_hx_tmp21 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            												}
            												else {
HXLINE(1052)													_hx_tmp21 = true;
            												}
HXDLIN(1052)												if (!(_hx_tmp21)) {
HXLINE(1052)													_hx_tmp20 = ::hx::IsNull( v1 );
            												}
            												else {
HXLINE(1052)													_hx_tmp20 = false;
            												}
HXDLIN(1052)												if (_hx_tmp20) {
HXLINE(1052)													bool _hx_tmp25;
HXDLIN(1052)													bool _hx_tmp26;
HXDLIN(1052)													if ((x6 >= 0)) {
HXLINE(1052)														_hx_tmp26 = (y3 >= 0);
            													}
            													else {
HXLINE(1052)														_hx_tmp26 = false;
            													}
HXDLIN(1052)													if (_hx_tmp26) {
HXLINE(1052)														_hx_tmp25 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            													}
            													else {
HXLINE(1052)														_hx_tmp25 = false;
            													}
HXDLIN(1052)													if (_hx_tmp25) {
HXLINE(1052)														_hx_tmp19 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            													}
            													else {
HXLINE(1052)														_hx_tmp19 = false;
            													}
            												}
            												else {
HXLINE(1052)													bool has = false;
HXDLIN(1052)													 ::vision::ds::ImageView view;
HXDLIN(1052)													if (::hx::IsNotNull( v1 )) {
HXLINE(1052)														view = v1;
            													}
            													else {
HXLINE(1052)														int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1052)														int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)														int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1052)														int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1052)														view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            													}
HXDLIN(1052)													switch((int)(view->shape)){
            														case (int)0: {
HXLINE(1052)															bool has1;
HXDLIN(1052)															bool has2;
HXDLIN(1052)															if ((x6 < (view->x + view->width))) {
HXLINE(1052)																has2 = (y3 < (view->y + view->height));
            															}
            															else {
HXLINE(1052)																has2 = false;
            															}
HXDLIN(1052)															if (has2) {
HXLINE(1052)																has1 = (x6 >= view->x);
            															}
            															else {
HXLINE(1052)																has1 = false;
            															}
HXDLIN(1052)															if (has1) {
HXLINE(1052)																has = (y3 >= view->y);
            															}
            															else {
HXLINE(1052)																has = false;
            															}
            														}
            														break;
            														case (int)1: {
HXLINE(1052)															bool has3;
HXDLIN(1052)															bool has4;
HXDLIN(1052)															bool has5;
HXDLIN(1052)															if ((x6 < (view->x + view->width))) {
HXLINE(1052)																has5 = (y3 < (view->y + view->height));
            															}
            															else {
HXLINE(1052)																has5 = false;
            															}
HXDLIN(1052)															if (has5) {
HXLINE(1052)																has4 = (x6 >= view->x);
            															}
            															else {
HXLINE(1052)																has4 = false;
            															}
HXDLIN(1052)															if (has4) {
HXLINE(1052)																has3 = (y3 >= view->y);
            															}
            															else {
HXLINE(1052)																has3 = false;
            															}
HXLINE(1400)															has = !(has3);
            														}
            														break;
            														case (int)2: case (int)3: {
HXLINE(1052)															if ((view->width > view->height)) {
HXLINE(1052)																Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1052)																Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1052)																Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1052)																Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1052)																Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1052)																Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1052)																Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1052)																::cpp::Int64 p = _hx_int64_make(x6,y3);
HXDLIN(1052)																Float x7 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1052)																Float y4 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1052)																Float has6 = ::Math_obj::sqrt(((x7 * x7) + (y4 * y4)));
HXDLIN(1052)																Float x8 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1052)																Float y5 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)																has = ((has6 + ::Math_obj::sqrt(((x8 * x8) + (y5 * y5)))) <= view->width);
HXLINE(1052)																if ((view->shape == 3)) {
HXLINE(1416)																	has = !(has);
            																}
            															}
            															else {
HXLINE(1052)																if ((view->height > view->width)) {
HXLINE(1052)																	Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1052)																	Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1052)																	Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1052)																	Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1052)																	Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1052)																	Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1052)																	Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1052)																	::cpp::Int64 p1 = _hx_int64_make(x6,y3);
HXDLIN(1052)																	Float x9 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1052)																	Float y6 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1052)																	Float has7 = ::Math_obj::sqrt(((x9 * x9) + (y6 * y6)));
HXDLIN(1052)																	Float x10 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1052)																	Float y7 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)																	has = ((has7 + ::Math_obj::sqrt(((x10 * x10) + (y7 * y7)))) <= view->height);
HXLINE(1052)																	if ((view->shape == 3)) {
HXLINE(1425)																		has = !(has);
            																	}
            																}
            																else {
HXLINE(1052)																	Float point1_x = ( (Float)(x6) );
HXDLIN(1052)																	Float point1_y = ( (Float)(y3) );
HXDLIN(1052)																	Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1052)																	Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1052)																	Float x11 = (point2_x - point1_x);
HXDLIN(1052)																	Float y8 = (point2_y - point1_y);
HXLINE(1428)																	has = (::Math_obj::sqrt(((x11 * x11) + (y8 * y8))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1052)																	if ((view->shape == 3)) {
HXLINE(1429)																		has = !(has);
            																	}
            																}
            															}
            														}
            														break;
            														case (int)4: {
HXLINE(1401)															has = (((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            														}
            														break;
            														case (int)5: {
HXLINE(1402)															has = !((((::Math_obj::abs((( (Float)((x6 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y3 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            														}
            														break;
            													}
HXLINE(1052)													_hx_tmp19 = has;
            												}
HXDLIN(1052)												if (_hx_tmp19) {
HXLINE(1052)													int position3 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(1052)													position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1052)													this1->b[position3] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1052)													this1->b[(position3 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1052)													this1->b[(position3 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1052)													this1->b[(position3 + 3)] = ( (unsigned char)((color & 255)) );
            												}
            											}
            											else {
HXLINE(1052)												int position4 = (((y3 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(1052)												position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1052)												this1->b[position4] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1052)												this1->b[(position4 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1052)												this1->b[(position4 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1052)												this1->b[(position4 + 3)] = ( (unsigned char)((color & 255)) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1053)			{
HXLINE(1053)				Float p_x3 = ( (Float)(_hx_int64_high(( (::cpp::Int64)(v) ))) );
HXDLIN(1053)				Float p_y3 = ( (Float)((_hx_int64_low(( (::cpp::Int64)(v) )) + 1)) );
HXDLIN(1053)				int x12 = ::Std_obj::_hx_int(p_x3);
HXDLIN(1053)				::cpp::Int64 point1 = _hx_int64_make(x12,::Std_obj::_hx_int(p_y3));
HXDLIN(1053)				if ((pc >= 100000)) {
HXLINE(1053)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),1033,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillUntilColor",48,60,4d,c9)));
HXDLIN(1053)					queue->clear();
            				}
            				else {
HXLINE(1053)					Float x13 = ( (Float)(_hx_int64_high(point1)) );
HXDLIN(1053)					Float y9 = ( (Float)(_hx_int64_low(point1)) );
HXDLIN(1053)					bool _hx_tmp27;
HXDLIN(1053)					bool _hx_tmp28;
HXDLIN(1053)					bool _hx_tmp29;
HXDLIN(1053)					if ((x13 >= 0)) {
HXLINE(1053)						_hx_tmp29 = (y9 >= 0);
            					}
            					else {
HXLINE(1053)						_hx_tmp29 = false;
            					}
HXDLIN(1053)					if (_hx_tmp29) {
HXLINE(1053)						_hx_tmp28 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1053)						_hx_tmp28 = false;
            					}
HXDLIN(1053)					if (_hx_tmp28) {
HXLINE(1053)						_hx_tmp27 = (y9 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1053)						_hx_tmp27 = false;
            					}
HXDLIN(1053)					if (_hx_tmp27) {
HXLINE(1053)						int high2 = _hx_int64_high(point1);
HXDLIN(1053)						if (!(explored->contains(_hx_int64_make(high2,_hx_int64_low(point1))))) {
HXLINE(1053)							int x14 = _hx_int64_high(point1);
HXDLIN(1053)							int y10 = _hx_int64_low(point1);
HXDLIN(1053)							bool _hx_tmp30;
HXDLIN(1053)							bool _hx_tmp31;
HXDLIN(1053)							bool _hx_tmp32;
HXDLIN(1053)							if ((x14 >= 0)) {
HXLINE(1053)								_hx_tmp32 = (y10 >= 0);
            							}
            							else {
HXLINE(1053)								_hx_tmp32 = false;
            							}
HXDLIN(1053)							if (_hx_tmp32) {
HXLINE(1053)								_hx_tmp31 = (x14 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1053)								_hx_tmp31 = false;
            							}
HXDLIN(1053)							if (_hx_tmp31) {
HXLINE(1053)								_hx_tmp30 = (y10 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1053)								_hx_tmp30 = false;
            							}
HXDLIN(1053)							if (!(_hx_tmp30)) {
HXLINE(1053)								::cpp::Int64 this5 = _hx_int64_make(x14,y10);
HXDLIN(1053)								int _hx_tmp33 = _hx_int64_high(this5);
HXDLIN(1053)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp33,_hx_int64_low(this5))));
            							}
HXDLIN(1053)							int position5 = (((y10 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x14) * 4);
HXDLIN(1053)							position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1053)							if ((((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) )) != color)) {
HXLINE(1053)								int x15 = _hx_int64_high(point1);
HXDLIN(1053)								int y11 = _hx_int64_low(point1);
HXDLIN(1053)								bool _hx_tmp34;
HXDLIN(1053)								bool _hx_tmp35;
HXDLIN(1053)								bool _hx_tmp36;
HXDLIN(1053)								if ((x15 >= 0)) {
HXLINE(1053)									_hx_tmp36 = (y11 >= 0);
            								}
            								else {
HXLINE(1053)									_hx_tmp36 = false;
            								}
HXDLIN(1053)								if (_hx_tmp36) {
HXLINE(1053)									_hx_tmp35 = (x15 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1053)									_hx_tmp35 = false;
            								}
HXDLIN(1053)								if (_hx_tmp35) {
HXLINE(1053)									_hx_tmp34 = (y11 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1053)									_hx_tmp34 = false;
            								}
HXDLIN(1053)								if (!(_hx_tmp34)) {
HXLINE(1053)									::cpp::Int64 this6 = _hx_int64_make(x15,y11);
HXDLIN(1053)									int _hx_tmp37 = _hx_int64_high(this6);
HXDLIN(1053)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp37,_hx_int64_low(this6))));
            								}
HXDLIN(1053)								int position6 = (((y11 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x15) * 4);
HXDLIN(1053)								position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1053)								if ((((((( (int)(this1->b->__get(position6)) ) << 24) | (( (int)(this1->b->__get((position6 + 1))) ) << 16)) | (( (int)(this1->b->__get((position6 + 2))) ) << 8)) | ( (int)(this1->b->__get((position6 + 3))) )) != borderColor)) {
HXLINE(1053)									pc = (pc + 1);
HXDLIN(1053)									Float p_x4 = ( (Float)(_hx_int64_high(point1)) );
HXDLIN(1053)									Float p_y4 = ( (Float)(_hx_int64_low(point1)) );
HXDLIN(1053)									int x16 = ::Std_obj::_hx_int(p_x4);
HXDLIN(1053)									queue->push(_hx_int64_make(x16,::Std_obj::_hx_int(p_y4)));
HXDLIN(1053)									{
HXLINE(1053)										int x17 = _hx_int64_high(point1);
HXDLIN(1053)										int y12 = _hx_int64_low(point1);
HXDLIN(1053)										bool _hx_tmp38;
HXDLIN(1053)										bool _hx_tmp39;
HXDLIN(1053)										bool _hx_tmp40;
HXDLIN(1053)										if ((x17 >= 0)) {
HXLINE(1053)											_hx_tmp40 = (y12 >= 0);
            										}
            										else {
HXLINE(1053)											_hx_tmp40 = false;
            										}
HXDLIN(1053)										if (_hx_tmp40) {
HXLINE(1053)											_hx_tmp39 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1053)											_hx_tmp39 = false;
            										}
HXDLIN(1053)										if (_hx_tmp39) {
HXLINE(1053)											_hx_tmp38 = (y12 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1053)											_hx_tmp38 = false;
            										}
HXDLIN(1053)										if (!(_hx_tmp38)) {
HXLINE(1053)											::cpp::Int64 this7 = _hx_int64_make(x17,y12);
HXDLIN(1053)											int _hx_tmp41 = _hx_int64_high(this7);
HXDLIN(1053)											HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp41,_hx_int64_low(this7))));
            										}
            										else {
HXLINE(1053)											bool _hx_tmp42;
HXDLIN(1053)											bool _hx_tmp43;
HXDLIN(1053)											bool _hx_tmp44;
HXDLIN(1053)											bool _hx_tmp45;
HXDLIN(1053)											int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1053)											if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE(1053)												int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)												_hx_tmp45 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1053)												_hx_tmp45 = true;
            											}
HXDLIN(1053)											if (!(_hx_tmp45)) {
HXLINE(1053)												int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1053)												_hx_tmp44 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1053)												_hx_tmp44 = true;
            											}
HXDLIN(1053)											if (!(_hx_tmp44)) {
HXLINE(1053)												int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)												_hx_tmp43 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1053)												_hx_tmp43 = true;
            											}
HXDLIN(1053)											if (!(_hx_tmp43)) {
HXLINE(1053)												_hx_tmp42 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1053)												_hx_tmp42 = true;
            											}
HXDLIN(1053)											if (_hx_tmp42) {
HXLINE(1053)												 ::vision::ds::ImageView v2 = null();
HXDLIN(1053)												bool _hx_tmp46;
HXDLIN(1053)												bool _hx_tmp47;
HXDLIN(1053)												bool _hx_tmp48;
HXDLIN(1053)												bool _hx_tmp49;
HXDLIN(1053)												bool _hx_tmp50;
HXDLIN(1053)												bool _hx_tmp51;
HXDLIN(1053)												int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1053)												if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE(1053)													int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)													_hx_tmp51 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1053)													_hx_tmp51 = true;
            												}
HXDLIN(1053)												if (!(_hx_tmp51)) {
HXLINE(1053)													int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1053)													_hx_tmp50 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1053)													_hx_tmp50 = true;
            												}
HXDLIN(1053)												if (!(_hx_tmp50)) {
HXLINE(1053)													int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)													_hx_tmp49 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1053)													_hx_tmp49 = true;
            												}
HXDLIN(1053)												if (!(_hx_tmp49)) {
HXLINE(1053)													_hx_tmp48 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            												}
            												else {
HXLINE(1053)													_hx_tmp48 = true;
            												}
HXDLIN(1053)												if (!(_hx_tmp48)) {
HXLINE(1053)													_hx_tmp47 = ::hx::IsNull( v2 );
            												}
            												else {
HXLINE(1053)													_hx_tmp47 = false;
            												}
HXDLIN(1053)												if (_hx_tmp47) {
HXLINE(1053)													bool _hx_tmp52;
HXDLIN(1053)													bool _hx_tmp53;
HXDLIN(1053)													if ((x17 >= 0)) {
HXLINE(1053)														_hx_tmp53 = (y12 >= 0);
            													}
            													else {
HXLINE(1053)														_hx_tmp53 = false;
            													}
HXDLIN(1053)													if (_hx_tmp53) {
HXLINE(1053)														_hx_tmp52 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            													}
            													else {
HXLINE(1053)														_hx_tmp52 = false;
            													}
HXDLIN(1053)													if (_hx_tmp52) {
HXLINE(1053)														_hx_tmp46 = (y12 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            													}
            													else {
HXLINE(1053)														_hx_tmp46 = false;
            													}
            												}
            												else {
HXLINE(1053)													bool has8 = false;
HXDLIN(1053)													 ::vision::ds::ImageView view1;
HXDLIN(1053)													if (::hx::IsNotNull( v2 )) {
HXLINE(1053)														view1 = v2;
            													}
            													else {
HXLINE(1053)														int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1053)														int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)														int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1053)														int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1053)														view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            													}
HXDLIN(1053)													switch((int)(view1->shape)){
            														case (int)0: {
HXLINE(1053)															bool has9;
HXDLIN(1053)															bool has10;
HXDLIN(1053)															if ((x17 < (view1->x + view1->width))) {
HXLINE(1053)																has10 = (y12 < (view1->y + view1->height));
            															}
            															else {
HXLINE(1053)																has10 = false;
            															}
HXDLIN(1053)															if (has10) {
HXLINE(1053)																has9 = (x17 >= view1->x);
            															}
            															else {
HXLINE(1053)																has9 = false;
            															}
HXDLIN(1053)															if (has9) {
HXLINE(1053)																has8 = (y12 >= view1->y);
            															}
            															else {
HXLINE(1053)																has8 = false;
            															}
            														}
            														break;
            														case (int)1: {
HXLINE(1053)															bool has11;
HXDLIN(1053)															bool has12;
HXDLIN(1053)															bool has13;
HXDLIN(1053)															if ((x17 < (view1->x + view1->width))) {
HXLINE(1053)																has13 = (y12 < (view1->y + view1->height));
            															}
            															else {
HXLINE(1053)																has13 = false;
            															}
HXDLIN(1053)															if (has13) {
HXLINE(1053)																has12 = (x17 >= view1->x);
            															}
            															else {
HXLINE(1053)																has12 = false;
            															}
HXDLIN(1053)															if (has12) {
HXLINE(1053)																has11 = (y12 >= view1->y);
            															}
            															else {
HXLINE(1053)																has11 = false;
            															}
HXLINE(1400)															has8 = !(has11);
            														}
            														break;
            														case (int)2: case (int)3: {
HXLINE(1053)															if ((view1->width > view1->height)) {
HXLINE(1053)																Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1053)																Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1053)																Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN(1053)																Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN(1053)																Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1053)																Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN(1053)																Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1053)																::cpp::Int64 p2 = _hx_int64_make(x17,y12);
HXDLIN(1053)																Float x18 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN(1053)																Float y13 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN(1053)																Float has14 = ::Math_obj::sqrt(((x18 * x18) + (y13 * y13)));
HXDLIN(1053)																Float x19 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN(1053)																Float y14 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)																has8 = ((has14 + ::Math_obj::sqrt(((x19 * x19) + (y14 * y14)))) <= view1->width);
HXLINE(1053)																if ((view1->shape == 3)) {
HXLINE(1416)																	has8 = !(has8);
            																}
            															}
            															else {
HXLINE(1053)																if ((view1->height > view1->width)) {
HXLINE(1053)																	Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1053)																	Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1053)																	Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN(1053)																	Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1053)																	Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN(1053)																	Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1053)																	Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN(1053)																	::cpp::Int64 p3 = _hx_int64_make(x17,y12);
HXDLIN(1053)																	Float x20 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN(1053)																	Float y15 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN(1053)																	Float has15 = ::Math_obj::sqrt(((x20 * x20) + (y15 * y15)));
HXDLIN(1053)																	Float x21 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN(1053)																	Float y16 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)																	has8 = ((has15 + ::Math_obj::sqrt(((x21 * x21) + (y16 * y16)))) <= view1->height);
HXLINE(1053)																	if ((view1->shape == 3)) {
HXLINE(1425)																		has8 = !(has8);
            																	}
            																}
            																else {
HXLINE(1053)																	Float point1_x1 = ( (Float)(x17) );
HXDLIN(1053)																	Float point1_y1 = ( (Float)(y12) );
HXDLIN(1053)																	Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1053)																	Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1053)																	Float x22 = (point2_x1 - point1_x1);
HXDLIN(1053)																	Float y17 = (point2_y1 - point1_y1);
HXLINE(1428)																	has8 = (::Math_obj::sqrt(((x22 * x22) + (y17 * y17))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE(1053)																	if ((view1->shape == 3)) {
HXLINE(1429)																		has8 = !(has8);
            																	}
            																}
            															}
            														}
            														break;
            														case (int)4: {
HXLINE(1401)															has8 = (((::Math_obj::abs((( (Float)((x17 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y12 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            														}
            														break;
            														case (int)5: {
HXLINE(1402)															has8 = !((((::Math_obj::abs((( (Float)((x17 - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y12 - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            														}
            														break;
            													}
HXLINE(1053)													_hx_tmp46 = has8;
            												}
HXDLIN(1053)												if (_hx_tmp46) {
HXLINE(1053)													int position7 = (((y12 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN(1053)													position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1053)													this1->b[position7] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1053)													this1->b[(position7 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1053)													this1->b[(position7 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1053)													this1->b[(position7 + 3)] = ( (unsigned char)((color & 255)) );
            												}
            											}
            											else {
HXLINE(1053)												int position8 = (((y12 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN(1053)												position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1053)												this1->b[position8] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1053)												this1->b[(position8 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1053)												this1->b[(position8 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1053)												this1->b[(position8 + 3)] = ( (unsigned char)((color & 255)) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1054)			{
HXLINE(1054)				Float p_x5 = ( (Float)((_hx_int64_high(( (::cpp::Int64)(v) )) - 1)) );
HXDLIN(1054)				Float p_y5 = ( (Float)(_hx_int64_low(( (::cpp::Int64)(v) ))) );
HXDLIN(1054)				int x23 = ::Std_obj::_hx_int(p_x5);
HXDLIN(1054)				::cpp::Int64 point2 = _hx_int64_make(x23,::Std_obj::_hx_int(p_y5));
HXDLIN(1054)				if ((pc >= 100000)) {
HXLINE(1054)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),1033,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillUntilColor",48,60,4d,c9)));
HXDLIN(1054)					queue->clear();
            				}
            				else {
HXLINE(1054)					Float x24 = ( (Float)(_hx_int64_high(point2)) );
HXDLIN(1054)					Float y18 = ( (Float)(_hx_int64_low(point2)) );
HXDLIN(1054)					bool _hx_tmp54;
HXDLIN(1054)					bool _hx_tmp55;
HXDLIN(1054)					bool _hx_tmp56;
HXDLIN(1054)					if ((x24 >= 0)) {
HXLINE(1054)						_hx_tmp56 = (y18 >= 0);
            					}
            					else {
HXLINE(1054)						_hx_tmp56 = false;
            					}
HXDLIN(1054)					if (_hx_tmp56) {
HXLINE(1054)						_hx_tmp55 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1054)						_hx_tmp55 = false;
            					}
HXDLIN(1054)					if (_hx_tmp55) {
HXLINE(1054)						_hx_tmp54 = (y18 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1054)						_hx_tmp54 = false;
            					}
HXDLIN(1054)					if (_hx_tmp54) {
HXLINE(1054)						int high3 = _hx_int64_high(point2);
HXDLIN(1054)						if (!(explored->contains(_hx_int64_make(high3,_hx_int64_low(point2))))) {
HXLINE(1054)							int x25 = _hx_int64_high(point2);
HXDLIN(1054)							int y19 = _hx_int64_low(point2);
HXDLIN(1054)							bool _hx_tmp57;
HXDLIN(1054)							bool _hx_tmp58;
HXDLIN(1054)							bool _hx_tmp59;
HXDLIN(1054)							if ((x25 >= 0)) {
HXLINE(1054)								_hx_tmp59 = (y19 >= 0);
            							}
            							else {
HXLINE(1054)								_hx_tmp59 = false;
            							}
HXDLIN(1054)							if (_hx_tmp59) {
HXLINE(1054)								_hx_tmp58 = (x25 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1054)								_hx_tmp58 = false;
            							}
HXDLIN(1054)							if (_hx_tmp58) {
HXLINE(1054)								_hx_tmp57 = (y19 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1054)								_hx_tmp57 = false;
            							}
HXDLIN(1054)							if (!(_hx_tmp57)) {
HXLINE(1054)								::cpp::Int64 this8 = _hx_int64_make(x25,y19);
HXDLIN(1054)								int _hx_tmp60 = _hx_int64_high(this8);
HXDLIN(1054)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp60,_hx_int64_low(this8))));
            							}
HXDLIN(1054)							int position9 = (((y19 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x25) * 4);
HXDLIN(1054)							position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1054)							if ((((((( (int)(this1->b->__get(position9)) ) << 24) | (( (int)(this1->b->__get((position9 + 1))) ) << 16)) | (( (int)(this1->b->__get((position9 + 2))) ) << 8)) | ( (int)(this1->b->__get((position9 + 3))) )) != color)) {
HXLINE(1054)								int x26 = _hx_int64_high(point2);
HXDLIN(1054)								int y20 = _hx_int64_low(point2);
HXDLIN(1054)								bool _hx_tmp61;
HXDLIN(1054)								bool _hx_tmp62;
HXDLIN(1054)								bool _hx_tmp63;
HXDLIN(1054)								if ((x26 >= 0)) {
HXLINE(1054)									_hx_tmp63 = (y20 >= 0);
            								}
            								else {
HXLINE(1054)									_hx_tmp63 = false;
            								}
HXDLIN(1054)								if (_hx_tmp63) {
HXLINE(1054)									_hx_tmp62 = (x26 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1054)									_hx_tmp62 = false;
            								}
HXDLIN(1054)								if (_hx_tmp62) {
HXLINE(1054)									_hx_tmp61 = (y20 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1054)									_hx_tmp61 = false;
            								}
HXDLIN(1054)								if (!(_hx_tmp61)) {
HXLINE(1054)									::cpp::Int64 this9 = _hx_int64_make(x26,y20);
HXDLIN(1054)									int _hx_tmp64 = _hx_int64_high(this9);
HXDLIN(1054)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp64,_hx_int64_low(this9))));
            								}
HXDLIN(1054)								int position10 = (((y20 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x26) * 4);
HXDLIN(1054)								position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1054)								if ((((((( (int)(this1->b->__get(position10)) ) << 24) | (( (int)(this1->b->__get((position10 + 1))) ) << 16)) | (( (int)(this1->b->__get((position10 + 2))) ) << 8)) | ( (int)(this1->b->__get((position10 + 3))) )) != borderColor)) {
HXLINE(1054)									pc = (pc + 1);
HXDLIN(1054)									Float p_x6 = ( (Float)(_hx_int64_high(point2)) );
HXDLIN(1054)									Float p_y6 = ( (Float)(_hx_int64_low(point2)) );
HXDLIN(1054)									int x27 = ::Std_obj::_hx_int(p_x6);
HXDLIN(1054)									queue->push(_hx_int64_make(x27,::Std_obj::_hx_int(p_y6)));
HXDLIN(1054)									{
HXLINE(1054)										int x28 = _hx_int64_high(point2);
HXDLIN(1054)										int y21 = _hx_int64_low(point2);
HXDLIN(1054)										bool _hx_tmp65;
HXDLIN(1054)										bool _hx_tmp66;
HXDLIN(1054)										bool _hx_tmp67;
HXDLIN(1054)										if ((x28 >= 0)) {
HXLINE(1054)											_hx_tmp67 = (y21 >= 0);
            										}
            										else {
HXLINE(1054)											_hx_tmp67 = false;
            										}
HXDLIN(1054)										if (_hx_tmp67) {
HXLINE(1054)											_hx_tmp66 = (x28 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1054)											_hx_tmp66 = false;
            										}
HXDLIN(1054)										if (_hx_tmp66) {
HXLINE(1054)											_hx_tmp65 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1054)											_hx_tmp65 = false;
            										}
HXDLIN(1054)										if (!(_hx_tmp65)) {
HXLINE(1054)											::cpp::Int64 this10 = _hx_int64_make(x28,y21);
HXDLIN(1054)											int _hx_tmp68 = _hx_int64_high(this10);
HXDLIN(1054)											HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp68,_hx_int64_low(this10))));
            										}
            										else {
HXLINE(1054)											bool _hx_tmp69;
HXDLIN(1054)											bool _hx_tmp70;
HXDLIN(1054)											bool _hx_tmp71;
HXDLIN(1054)											bool _hx_tmp72;
HXDLIN(1054)											int pos24 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1054)											if (((( (int)(this1->b->__get(pos24)) ) | (( (int)(this1->b->__get((pos24 + 1))) ) << 8)) == 0)) {
HXLINE(1054)												int pos25 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)												_hx_tmp72 = ((( (int)(this1->b->__get(pos25)) ) | (( (int)(this1->b->__get((pos25 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1054)												_hx_tmp72 = true;
            											}
HXDLIN(1054)											if (!(_hx_tmp72)) {
HXLINE(1054)												int pos26 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1054)												_hx_tmp71 = ((( (int)(this1->b->__get(pos26)) ) | (( (int)(this1->b->__get((pos26 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1054)												_hx_tmp71 = true;
            											}
HXDLIN(1054)											if (!(_hx_tmp71)) {
HXLINE(1054)												int pos27 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)												_hx_tmp70 = ((( (int)(this1->b->__get(pos27)) ) | (( (int)(this1->b->__get((pos27 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1054)												_hx_tmp70 = true;
            											}
HXDLIN(1054)											if (!(_hx_tmp70)) {
HXLINE(1054)												_hx_tmp69 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1054)												_hx_tmp69 = true;
            											}
HXDLIN(1054)											if (_hx_tmp69) {
HXLINE(1054)												 ::vision::ds::ImageView v3 = null();
HXDLIN(1054)												bool _hx_tmp73;
HXDLIN(1054)												bool _hx_tmp74;
HXDLIN(1054)												bool _hx_tmp75;
HXDLIN(1054)												bool _hx_tmp76;
HXDLIN(1054)												bool _hx_tmp77;
HXDLIN(1054)												bool _hx_tmp78;
HXDLIN(1054)												int pos28 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1054)												if (((( (int)(this1->b->__get(pos28)) ) | (( (int)(this1->b->__get((pos28 + 1))) ) << 8)) == 0)) {
HXLINE(1054)													int pos29 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)													_hx_tmp78 = ((( (int)(this1->b->__get(pos29)) ) | (( (int)(this1->b->__get((pos29 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1054)													_hx_tmp78 = true;
            												}
HXDLIN(1054)												if (!(_hx_tmp78)) {
HXLINE(1054)													int pos30 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1054)													_hx_tmp77 = ((( (int)(this1->b->__get(pos30)) ) | (( (int)(this1->b->__get((pos30 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1054)													_hx_tmp77 = true;
            												}
HXDLIN(1054)												if (!(_hx_tmp77)) {
HXLINE(1054)													int pos31 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)													_hx_tmp76 = ((( (int)(this1->b->__get(pos31)) ) | (( (int)(this1->b->__get((pos31 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1054)													_hx_tmp76 = true;
            												}
HXDLIN(1054)												if (!(_hx_tmp76)) {
HXLINE(1054)													_hx_tmp75 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            												}
            												else {
HXLINE(1054)													_hx_tmp75 = true;
            												}
HXDLIN(1054)												if (!(_hx_tmp75)) {
HXLINE(1054)													_hx_tmp74 = ::hx::IsNull( v3 );
            												}
            												else {
HXLINE(1054)													_hx_tmp74 = false;
            												}
HXDLIN(1054)												if (_hx_tmp74) {
HXLINE(1054)													bool _hx_tmp79;
HXDLIN(1054)													bool _hx_tmp80;
HXDLIN(1054)													if ((x28 >= 0)) {
HXLINE(1054)														_hx_tmp80 = (y21 >= 0);
            													}
            													else {
HXLINE(1054)														_hx_tmp80 = false;
            													}
HXDLIN(1054)													if (_hx_tmp80) {
HXLINE(1054)														_hx_tmp79 = (x28 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            													}
            													else {
HXLINE(1054)														_hx_tmp79 = false;
            													}
HXDLIN(1054)													if (_hx_tmp79) {
HXLINE(1054)														_hx_tmp73 = (y21 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            													}
            													else {
HXLINE(1054)														_hx_tmp73 = false;
            													}
            												}
            												else {
HXLINE(1054)													bool has16 = false;
HXDLIN(1054)													 ::vision::ds::ImageView view2;
HXDLIN(1054)													if (::hx::IsNotNull( v3 )) {
HXLINE(1054)														view2 = v3;
            													}
            													else {
HXLINE(1054)														int pos32 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1054)														int pos33 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)														int pos34 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1054)														int pos35 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1054)														view2 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos32)) ) | (( (int)(this1->b->__get((pos32 + 1))) ) << 8)),(( (int)(this1->b->__get(pos33)) ) | (( (int)(this1->b->__get((pos33 + 1))) ) << 8)),(( (int)(this1->b->__get(pos34)) ) | (( (int)(this1->b->__get((pos34 + 1))) ) << 8)),(( (int)(this1->b->__get(pos35)) ) | (( (int)(this1->b->__get((pos35 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            													}
HXDLIN(1054)													switch((int)(view2->shape)){
            														case (int)0: {
HXLINE(1054)															bool has17;
HXDLIN(1054)															bool has18;
HXDLIN(1054)															if ((x28 < (view2->x + view2->width))) {
HXLINE(1054)																has18 = (y21 < (view2->y + view2->height));
            															}
            															else {
HXLINE(1054)																has18 = false;
            															}
HXDLIN(1054)															if (has18) {
HXLINE(1054)																has17 = (x28 >= view2->x);
            															}
            															else {
HXLINE(1054)																has17 = false;
            															}
HXDLIN(1054)															if (has17) {
HXLINE(1054)																has16 = (y21 >= view2->y);
            															}
            															else {
HXLINE(1054)																has16 = false;
            															}
            														}
            														break;
            														case (int)1: {
HXLINE(1054)															bool has19;
HXDLIN(1054)															bool has20;
HXDLIN(1054)															bool has21;
HXDLIN(1054)															if ((x28 < (view2->x + view2->width))) {
HXLINE(1054)																has21 = (y21 < (view2->y + view2->height));
            															}
            															else {
HXLINE(1054)																has21 = false;
            															}
HXDLIN(1054)															if (has21) {
HXLINE(1054)																has20 = (x28 >= view2->x);
            															}
            															else {
HXLINE(1054)																has20 = false;
            															}
HXDLIN(1054)															if (has20) {
HXLINE(1054)																has19 = (y21 >= view2->y);
            															}
            															else {
HXLINE(1054)																has19 = false;
            															}
HXLINE(1400)															has16 = !(has19);
            														}
            														break;
            														case (int)2: case (int)3: {
HXLINE(1054)															if ((view2->width > view2->height)) {
HXLINE(1054)																Float a4 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN(1054)																Float b4 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN(1054)																Float c4 = ::Math_obj::sqrt(((a4 * a4) - (b4 * b4)));
HXDLIN(1054)																Float f1_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) - c4);
HXDLIN(1054)																Float f1_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1054)																Float f2_x4 = ((view2->x + (( (Float)(view2->width) ) / ( (Float)(2) ))) + c4);
HXDLIN(1054)																Float f2_y4 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1054)																::cpp::Int64 p4 = _hx_int64_make(x28,y21);
HXDLIN(1054)																Float x29 = (( (Float)(_hx_int64_high(p4)) ) - f1_x4);
HXDLIN(1054)																Float y22 = (( (Float)(_hx_int64_low(p4)) ) - f1_y4);
HXDLIN(1054)																Float has22 = ::Math_obj::sqrt(((x29 * x29) + (y22 * y22)));
HXDLIN(1054)																Float x30 = (( (Float)(_hx_int64_high(p4)) ) - f2_x4);
HXDLIN(1054)																Float y23 = (( (Float)(_hx_int64_low(p4)) ) - f2_y4);
HXLINE(1415)																has16 = ((has22 + ::Math_obj::sqrt(((x30 * x30) + (y23 * y23)))) <= view2->width);
HXLINE(1054)																if ((view2->shape == 3)) {
HXLINE(1416)																	has16 = !(has16);
            																}
            															}
            															else {
HXLINE(1054)																if ((view2->height > view2->width)) {
HXLINE(1054)																	Float a5 = (( (Float)(view2->height) ) / ( (Float)(2) ));
HXDLIN(1054)																	Float b5 = (( (Float)(view2->width) ) / ( (Float)(2) ));
HXDLIN(1054)																	Float c5 = ::Math_obj::sqrt(((a5 * a5) - (b5 * b5)));
HXDLIN(1054)																	Float f1_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1054)																	Float f1_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) - c5);
HXDLIN(1054)																	Float f2_x5 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1054)																	Float f2_y5 = ((view2->y + (( (Float)(view2->height) ) / ( (Float)(2) ))) + c5);
HXDLIN(1054)																	::cpp::Int64 p5 = _hx_int64_make(x28,y21);
HXDLIN(1054)																	Float x31 = (( (Float)(_hx_int64_high(p5)) ) - f1_x5);
HXDLIN(1054)																	Float y24 = (( (Float)(_hx_int64_low(p5)) ) - f1_y5);
HXDLIN(1054)																	Float has23 = ::Math_obj::sqrt(((x31 * x31) + (y24 * y24)));
HXDLIN(1054)																	Float x32 = (( (Float)(_hx_int64_high(p5)) ) - f2_x5);
HXDLIN(1054)																	Float y25 = (( (Float)(_hx_int64_low(p5)) ) - f2_y5);
HXLINE(1424)																	has16 = ((has23 + ::Math_obj::sqrt(((x32 * x32) + (y25 * y25)))) <= view2->height);
HXLINE(1054)																	if ((view2->shape == 3)) {
HXLINE(1425)																		has16 = !(has16);
            																	}
            																}
            																else {
HXLINE(1054)																	Float point1_x2 = ( (Float)(x28) );
HXDLIN(1054)																	Float point1_y2 = ( (Float)(y21) );
HXDLIN(1054)																	Float point2_x2 = (view2->x + (( (Float)(view2->width) ) / ( (Float)(2) )));
HXDLIN(1054)																	Float point2_y2 = (view2->y + (( (Float)(view2->height) ) / ( (Float)(2) )));
HXDLIN(1054)																	Float x33 = (point2_x2 - point1_x2);
HXDLIN(1054)																	Float y26 = (point2_y2 - point1_y2);
HXLINE(1428)																	has16 = (::Math_obj::sqrt(((x33 * x33) + (y26 * y26))) <= (( (Float)(view2->width) ) / ( (Float)(2) )));
HXLINE(1054)																	if ((view2->shape == 3)) {
HXLINE(1429)																		has16 = !(has16);
            																	}
            																}
            															}
            														}
            														break;
            														case (int)4: {
HXLINE(1401)															has16 = (((::Math_obj::abs((( (Float)((x28 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y21 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1);
            														}
            														break;
            														case (int)5: {
HXLINE(1402)															has16 = !((((::Math_obj::abs((( (Float)((x28 - view2->x)) ) - (( (Float)(view2->width) ) / ( (Float)(2) )))) / (( (Float)(view2->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y21 - view2->y)) ) - (( (Float)(view2->height) ) / ( (Float)(2) )))) / (( (Float)(view2->height) ) / ( (Float)(2) )))) <= 1));
            														}
            														break;
            													}
HXLINE(1054)													_hx_tmp73 = has16;
            												}
HXDLIN(1054)												if (_hx_tmp73) {
HXLINE(1054)													int position11 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x28) * 4);
HXDLIN(1054)													position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1054)													this1->b[position11] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1054)													this1->b[(position11 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1054)													this1->b[(position11 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1054)													this1->b[(position11 + 3)] = ( (unsigned char)((color & 255)) );
            												}
            											}
            											else {
HXLINE(1054)												int position12 = (((y21 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x28) * 4);
HXDLIN(1054)												position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1054)												this1->b[position12] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1054)												this1->b[(position12 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1054)												this1->b[(position12 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1054)												this1->b[(position12 + 3)] = ( (unsigned char)((color & 255)) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1055)			{
HXLINE(1055)				Float p_x7 = ( (Float)(_hx_int64_high(( (::cpp::Int64)(v) ))) );
HXDLIN(1055)				Float p_y7 = ( (Float)((_hx_int64_low(( (::cpp::Int64)(v) )) - 1)) );
HXDLIN(1055)				int x34 = ::Std_obj::_hx_int(p_x7);
HXDLIN(1055)				::cpp::Int64 point3 = _hx_int64_make(x34,::Std_obj::_hx_int(p_y7));
HXDLIN(1055)				if ((pc >= 100000)) {
HXLINE(1055)					::haxe::Log_obj::trace(HX_("fillColor: too much iterations",17,68,7b,ac),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),1033,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("fillUntilColor",48,60,4d,c9)));
HXDLIN(1055)					queue->clear();
            				}
            				else {
HXLINE(1055)					Float x35 = ( (Float)(_hx_int64_high(point3)) );
HXDLIN(1055)					Float y27 = ( (Float)(_hx_int64_low(point3)) );
HXDLIN(1055)					bool _hx_tmp81;
HXDLIN(1055)					bool _hx_tmp82;
HXDLIN(1055)					bool _hx_tmp83;
HXDLIN(1055)					if ((x35 >= 0)) {
HXLINE(1055)						_hx_tmp83 = (y27 >= 0);
            					}
            					else {
HXLINE(1055)						_hx_tmp83 = false;
            					}
HXDLIN(1055)					if (_hx_tmp83) {
HXLINE(1055)						_hx_tmp82 = (x35 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            					}
            					else {
HXLINE(1055)						_hx_tmp82 = false;
            					}
HXDLIN(1055)					if (_hx_tmp82) {
HXLINE(1055)						_hx_tmp81 = (y27 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            					}
            					else {
HXLINE(1055)						_hx_tmp81 = false;
            					}
HXDLIN(1055)					if (_hx_tmp81) {
HXLINE(1055)						int high4 = _hx_int64_high(point3);
HXDLIN(1055)						if (!(explored->contains(_hx_int64_make(high4,_hx_int64_low(point3))))) {
HXLINE(1055)							int x36 = _hx_int64_high(point3);
HXDLIN(1055)							int y28 = _hx_int64_low(point3);
HXDLIN(1055)							bool _hx_tmp84;
HXDLIN(1055)							bool _hx_tmp85;
HXDLIN(1055)							bool _hx_tmp86;
HXDLIN(1055)							if ((x36 >= 0)) {
HXLINE(1055)								_hx_tmp86 = (y28 >= 0);
            							}
            							else {
HXLINE(1055)								_hx_tmp86 = false;
            							}
HXDLIN(1055)							if (_hx_tmp86) {
HXLINE(1055)								_hx_tmp85 = (x36 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1055)								_hx_tmp85 = false;
            							}
HXDLIN(1055)							if (_hx_tmp85) {
HXLINE(1055)								_hx_tmp84 = (y28 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1055)								_hx_tmp84 = false;
            							}
HXDLIN(1055)							if (!(_hx_tmp84)) {
HXLINE(1055)								::cpp::Int64 this11 = _hx_int64_make(x36,y28);
HXDLIN(1055)								int _hx_tmp87 = _hx_int64_high(this11);
HXDLIN(1055)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp87,_hx_int64_low(this11))));
            							}
HXDLIN(1055)							int position13 = (((y28 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x36) * 4);
HXDLIN(1055)							position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1055)							if ((((((( (int)(this1->b->__get(position13)) ) << 24) | (( (int)(this1->b->__get((position13 + 1))) ) << 16)) | (( (int)(this1->b->__get((position13 + 2))) ) << 8)) | ( (int)(this1->b->__get((position13 + 3))) )) != color)) {
HXLINE(1055)								int x37 = _hx_int64_high(point3);
HXDLIN(1055)								int y29 = _hx_int64_low(point3);
HXDLIN(1055)								bool _hx_tmp88;
HXDLIN(1055)								bool _hx_tmp89;
HXDLIN(1055)								bool _hx_tmp90;
HXDLIN(1055)								if ((x37 >= 0)) {
HXLINE(1055)									_hx_tmp90 = (y29 >= 0);
            								}
            								else {
HXLINE(1055)									_hx_tmp90 = false;
            								}
HXDLIN(1055)								if (_hx_tmp90) {
HXLINE(1055)									_hx_tmp89 = (x37 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1055)									_hx_tmp89 = false;
            								}
HXDLIN(1055)								if (_hx_tmp89) {
HXLINE(1055)									_hx_tmp88 = (y29 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1055)									_hx_tmp88 = false;
            								}
HXDLIN(1055)								if (!(_hx_tmp88)) {
HXLINE(1055)									::cpp::Int64 this12 = _hx_int64_make(x37,y29);
HXDLIN(1055)									int _hx_tmp91 = _hx_int64_high(this12);
HXDLIN(1055)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp91,_hx_int64_low(this12))));
            								}
HXDLIN(1055)								int position14 = (((y29 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x37) * 4);
HXDLIN(1055)								position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1055)								if ((((((( (int)(this1->b->__get(position14)) ) << 24) | (( (int)(this1->b->__get((position14 + 1))) ) << 16)) | (( (int)(this1->b->__get((position14 + 2))) ) << 8)) | ( (int)(this1->b->__get((position14 + 3))) )) != borderColor)) {
HXLINE(1055)									pc = (pc + 1);
HXDLIN(1055)									Float p_x8 = ( (Float)(_hx_int64_high(point3)) );
HXDLIN(1055)									Float p_y8 = ( (Float)(_hx_int64_low(point3)) );
HXDLIN(1055)									int x38 = ::Std_obj::_hx_int(p_x8);
HXDLIN(1055)									queue->push(_hx_int64_make(x38,::Std_obj::_hx_int(p_y8)));
HXDLIN(1055)									{
HXLINE(1055)										int x39 = _hx_int64_high(point3);
HXDLIN(1055)										int y30 = _hx_int64_low(point3);
HXDLIN(1055)										bool _hx_tmp92;
HXDLIN(1055)										bool _hx_tmp93;
HXDLIN(1055)										bool _hx_tmp94;
HXDLIN(1055)										if ((x39 >= 0)) {
HXLINE(1055)											_hx_tmp94 = (y30 >= 0);
            										}
            										else {
HXLINE(1055)											_hx_tmp94 = false;
            										}
HXDLIN(1055)										if (_hx_tmp94) {
HXLINE(1055)											_hx_tmp93 = (x39 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1055)											_hx_tmp93 = false;
            										}
HXDLIN(1055)										if (_hx_tmp93) {
HXLINE(1055)											_hx_tmp92 = (y30 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1055)											_hx_tmp92 = false;
            										}
HXDLIN(1055)										if (!(_hx_tmp92)) {
HXLINE(1055)											::cpp::Int64 this13 = _hx_int64_make(x39,y30);
HXDLIN(1055)											int _hx_tmp95 = _hx_int64_high(this13);
HXDLIN(1055)											HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp95,_hx_int64_low(this13))));
            										}
            										else {
HXLINE(1055)											bool _hx_tmp96;
HXDLIN(1055)											bool _hx_tmp97;
HXDLIN(1055)											bool _hx_tmp98;
HXDLIN(1055)											bool _hx_tmp99;
HXDLIN(1055)											int pos36 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1055)											if (((( (int)(this1->b->__get(pos36)) ) | (( (int)(this1->b->__get((pos36 + 1))) ) << 8)) == 0)) {
HXLINE(1055)												int pos37 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)												_hx_tmp99 = ((( (int)(this1->b->__get(pos37)) ) | (( (int)(this1->b->__get((pos37 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1055)												_hx_tmp99 = true;
            											}
HXDLIN(1055)											if (!(_hx_tmp99)) {
HXLINE(1055)												int pos38 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1055)												_hx_tmp98 = ((( (int)(this1->b->__get(pos38)) ) | (( (int)(this1->b->__get((pos38 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1055)												_hx_tmp98 = true;
            											}
HXDLIN(1055)											if (!(_hx_tmp98)) {
HXLINE(1055)												int pos39 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)												_hx_tmp97 = ((( (int)(this1->b->__get(pos39)) ) | (( (int)(this1->b->__get((pos39 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1055)												_hx_tmp97 = true;
            											}
HXDLIN(1055)											if (!(_hx_tmp97)) {
HXLINE(1055)												_hx_tmp96 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1055)												_hx_tmp96 = true;
            											}
HXDLIN(1055)											if (_hx_tmp96) {
HXLINE(1055)												 ::vision::ds::ImageView v4 = null();
HXDLIN(1055)												bool _hx_tmp100;
HXDLIN(1055)												bool _hx_tmp101;
HXDLIN(1055)												bool _hx_tmp102;
HXDLIN(1055)												bool _hx_tmp103;
HXDLIN(1055)												bool _hx_tmp104;
HXDLIN(1055)												bool _hx_tmp105;
HXDLIN(1055)												int pos40 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1055)												if (((( (int)(this1->b->__get(pos40)) ) | (( (int)(this1->b->__get((pos40 + 1))) ) << 8)) == 0)) {
HXLINE(1055)													int pos41 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)													_hx_tmp105 = ((( (int)(this1->b->__get(pos41)) ) | (( (int)(this1->b->__get((pos41 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1055)													_hx_tmp105 = true;
            												}
HXDLIN(1055)												if (!(_hx_tmp105)) {
HXLINE(1055)													int pos42 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1055)													_hx_tmp104 = ((( (int)(this1->b->__get(pos42)) ) | (( (int)(this1->b->__get((pos42 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1055)													_hx_tmp104 = true;
            												}
HXDLIN(1055)												if (!(_hx_tmp104)) {
HXLINE(1055)													int pos43 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)													_hx_tmp103 = ((( (int)(this1->b->__get(pos43)) ) | (( (int)(this1->b->__get((pos43 + 1))) ) << 8)) != 0);
            												}
            												else {
HXLINE(1055)													_hx_tmp103 = true;
            												}
HXDLIN(1055)												if (!(_hx_tmp103)) {
HXLINE(1055)													_hx_tmp102 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            												}
            												else {
HXLINE(1055)													_hx_tmp102 = true;
            												}
HXDLIN(1055)												if (!(_hx_tmp102)) {
HXLINE(1055)													_hx_tmp101 = ::hx::IsNull( v4 );
            												}
            												else {
HXLINE(1055)													_hx_tmp101 = false;
            												}
HXDLIN(1055)												if (_hx_tmp101) {
HXLINE(1055)													bool _hx_tmp106;
HXDLIN(1055)													bool _hx_tmp107;
HXDLIN(1055)													if ((x39 >= 0)) {
HXLINE(1055)														_hx_tmp107 = (y30 >= 0);
            													}
            													else {
HXLINE(1055)														_hx_tmp107 = false;
            													}
HXDLIN(1055)													if (_hx_tmp107) {
HXLINE(1055)														_hx_tmp106 = (x39 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            													}
            													else {
HXLINE(1055)														_hx_tmp106 = false;
            													}
HXDLIN(1055)													if (_hx_tmp106) {
HXLINE(1055)														_hx_tmp100 = (y30 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            													}
            													else {
HXLINE(1055)														_hx_tmp100 = false;
            													}
            												}
            												else {
HXLINE(1055)													bool has24 = false;
HXDLIN(1055)													 ::vision::ds::ImageView view3;
HXDLIN(1055)													if (::hx::IsNotNull( v4 )) {
HXLINE(1055)														view3 = v4;
            													}
            													else {
HXLINE(1055)														int pos44 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1055)														int pos45 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)														int pos46 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1055)														int pos47 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1055)														view3 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos44)) ) | (( (int)(this1->b->__get((pos44 + 1))) ) << 8)),(( (int)(this1->b->__get(pos45)) ) | (( (int)(this1->b->__get((pos45 + 1))) ) << 8)),(( (int)(this1->b->__get(pos46)) ) | (( (int)(this1->b->__get((pos46 + 1))) ) << 8)),(( (int)(this1->b->__get(pos47)) ) | (( (int)(this1->b->__get((pos47 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            													}
HXDLIN(1055)													switch((int)(view3->shape)){
            														case (int)0: {
HXLINE(1055)															bool has25;
HXDLIN(1055)															bool has26;
HXDLIN(1055)															if ((x39 < (view3->x + view3->width))) {
HXLINE(1055)																has26 = (y30 < (view3->y + view3->height));
            															}
            															else {
HXLINE(1055)																has26 = false;
            															}
HXDLIN(1055)															if (has26) {
HXLINE(1055)																has25 = (x39 >= view3->x);
            															}
            															else {
HXLINE(1055)																has25 = false;
            															}
HXDLIN(1055)															if (has25) {
HXLINE(1055)																has24 = (y30 >= view3->y);
            															}
            															else {
HXLINE(1055)																has24 = false;
            															}
            														}
            														break;
            														case (int)1: {
HXLINE(1055)															bool has27;
HXDLIN(1055)															bool has28;
HXDLIN(1055)															bool has29;
HXDLIN(1055)															if ((x39 < (view3->x + view3->width))) {
HXLINE(1055)																has29 = (y30 < (view3->y + view3->height));
            															}
            															else {
HXLINE(1055)																has29 = false;
            															}
HXDLIN(1055)															if (has29) {
HXLINE(1055)																has28 = (x39 >= view3->x);
            															}
            															else {
HXLINE(1055)																has28 = false;
            															}
HXDLIN(1055)															if (has28) {
HXLINE(1055)																has27 = (y30 >= view3->y);
            															}
            															else {
HXLINE(1055)																has27 = false;
            															}
HXLINE(1400)															has24 = !(has27);
            														}
            														break;
            														case (int)2: case (int)3: {
HXLINE(1055)															if ((view3->width > view3->height)) {
HXLINE(1055)																Float a6 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN(1055)																Float b6 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN(1055)																Float c6 = ::Math_obj::sqrt(((a6 * a6) - (b6 * b6)));
HXDLIN(1055)																Float f1_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) - c6);
HXDLIN(1055)																Float f1_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1055)																Float f2_x6 = ((view3->x + (( (Float)(view3->width) ) / ( (Float)(2) ))) + c6);
HXDLIN(1055)																Float f2_y6 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1055)																::cpp::Int64 p6 = _hx_int64_make(x39,y30);
HXDLIN(1055)																Float x40 = (( (Float)(_hx_int64_high(p6)) ) - f1_x6);
HXDLIN(1055)																Float y31 = (( (Float)(_hx_int64_low(p6)) ) - f1_y6);
HXDLIN(1055)																Float has30 = ::Math_obj::sqrt(((x40 * x40) + (y31 * y31)));
HXDLIN(1055)																Float x41 = (( (Float)(_hx_int64_high(p6)) ) - f2_x6);
HXDLIN(1055)																Float y32 = (( (Float)(_hx_int64_low(p6)) ) - f2_y6);
HXLINE(1415)																has24 = ((has30 + ::Math_obj::sqrt(((x41 * x41) + (y32 * y32)))) <= view3->width);
HXLINE(1055)																if ((view3->shape == 3)) {
HXLINE(1416)																	has24 = !(has24);
            																}
            															}
            															else {
HXLINE(1055)																if ((view3->height > view3->width)) {
HXLINE(1055)																	Float a7 = (( (Float)(view3->height) ) / ( (Float)(2) ));
HXDLIN(1055)																	Float b7 = (( (Float)(view3->width) ) / ( (Float)(2) ));
HXDLIN(1055)																	Float c7 = ::Math_obj::sqrt(((a7 * a7) - (b7 * b7)));
HXDLIN(1055)																	Float f1_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1055)																	Float f1_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) - c7);
HXDLIN(1055)																	Float f2_x7 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1055)																	Float f2_y7 = ((view3->y + (( (Float)(view3->height) ) / ( (Float)(2) ))) + c7);
HXDLIN(1055)																	::cpp::Int64 p7 = _hx_int64_make(x39,y30);
HXDLIN(1055)																	Float x42 = (( (Float)(_hx_int64_high(p7)) ) - f1_x7);
HXDLIN(1055)																	Float y33 = (( (Float)(_hx_int64_low(p7)) ) - f1_y7);
HXDLIN(1055)																	Float has31 = ::Math_obj::sqrt(((x42 * x42) + (y33 * y33)));
HXDLIN(1055)																	Float x43 = (( (Float)(_hx_int64_high(p7)) ) - f2_x7);
HXDLIN(1055)																	Float y34 = (( (Float)(_hx_int64_low(p7)) ) - f2_y7);
HXLINE(1424)																	has24 = ((has31 + ::Math_obj::sqrt(((x43 * x43) + (y34 * y34)))) <= view3->height);
HXLINE(1055)																	if ((view3->shape == 3)) {
HXLINE(1425)																		has24 = !(has24);
            																	}
            																}
            																else {
HXLINE(1055)																	Float point1_x3 = ( (Float)(x39) );
HXDLIN(1055)																	Float point1_y3 = ( (Float)(y30) );
HXDLIN(1055)																	Float point2_x3 = (view3->x + (( (Float)(view3->width) ) / ( (Float)(2) )));
HXDLIN(1055)																	Float point2_y3 = (view3->y + (( (Float)(view3->height) ) / ( (Float)(2) )));
HXDLIN(1055)																	Float x44 = (point2_x3 - point1_x3);
HXDLIN(1055)																	Float y35 = (point2_y3 - point1_y3);
HXLINE(1428)																	has24 = (::Math_obj::sqrt(((x44 * x44) + (y35 * y35))) <= (( (Float)(view3->width) ) / ( (Float)(2) )));
HXLINE(1055)																	if ((view3->shape == 3)) {
HXLINE(1429)																		has24 = !(has24);
            																	}
            																}
            															}
            														}
            														break;
            														case (int)4: {
HXLINE(1401)															has24 = (((::Math_obj::abs((( (Float)((x39 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y30 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1);
            														}
            														break;
            														case (int)5: {
HXLINE(1402)															has24 = !((((::Math_obj::abs((( (Float)((x39 - view3->x)) ) - (( (Float)(view3->width) ) / ( (Float)(2) )))) / (( (Float)(view3->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y30 - view3->y)) ) - (( (Float)(view3->height) ) / ( (Float)(2) )))) / (( (Float)(view3->height) ) / ( (Float)(2) )))) <= 1));
            														}
            														break;
            													}
HXLINE(1055)													_hx_tmp100 = has24;
            												}
HXDLIN(1055)												if (_hx_tmp100) {
HXLINE(1055)													int position15 = (((y30 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x39) * 4);
HXDLIN(1055)													position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1055)													this1->b[position15] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1055)													this1->b[(position15 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1055)													this1->b[(position15 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1055)													this1->b[(position15 + 3)] = ( (unsigned char)((color & 255)) );
            												}
            											}
            											else {
HXLINE(1055)												int position16 = (((y30 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x39) * 4);
HXDLIN(1055)												position16 = (position16 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1055)												this1->b[position16] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1055)												this1->b[(position16 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1055)												this1->b[(position16 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1055)												this1->b[(position16 + 3)] = ( (unsigned char)((color & 255)) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,fillUntilColor,(void))

 ::haxe::io::Bytes Image_Impl__obj::clone( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1066_clone)
HXLINE(1067)		if (::hx::IsNull( this1 )) {
HXLINE(1068)			::haxe::Log_obj::trace(HX_("Warning: Cloning a null image",69,c1,f4,26),::hx::SourceInfo(HX_("vision/ds/Image.hx",3c,20,62,0a),1068,HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc),HX_("clone",5d,13,63,48)));
            		}
HXLINE(1070)		return this1->sub(0,this1->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,clone,return )

 ::haxe::io::Bytes Image_Impl__obj::mirror( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1077_mirror)
HXLINE(1078)		 ::haxe::io::Bytes inter = ::vision::ds::_Image::Image_Impl__obj::clone(this1);
HXLINE(1079)		bool _hx_tmp;
HXDLIN(1079)		bool _hx_tmp1;
HXDLIN(1079)		bool _hx_tmp2;
HXDLIN(1079)		bool _hx_tmp3;
HXDLIN(1079)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1079)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1079)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)			_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1079)			_hx_tmp3 = true;
            		}
HXDLIN(1079)		if (!(_hx_tmp3)) {
HXLINE(1079)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1079)			_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1079)			_hx_tmp2 = true;
            		}
HXDLIN(1079)		if (!(_hx_tmp2)) {
HXLINE(1079)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)			_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1079)			_hx_tmp1 = true;
            		}
HXDLIN(1079)		if (!(_hx_tmp1)) {
HXLINE(1079)			_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1079)			_hx_tmp = true;
            		}
HXDLIN(1079)		if (!(_hx_tmp)) {
HXLINE(1079)			int _g = 0;
HXDLIN(1079)			int _g1 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1079)			while((_g < _g1)){
HXLINE(1079)				_g = (_g + 1);
HXDLIN(1079)				int x = (_g - 1);
HXDLIN(1079)				{
HXLINE(1079)					int _g2 = 0;
HXDLIN(1079)					int _g3 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1079)					while((_g2 < _g3)){
HXLINE(1079)						_g2 = (_g2 + 1);
HXDLIN(1079)						int y = (_g2 - 1);
HXLINE(1080)						{
HXLINE(1079)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1079)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1080)							int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN(1080)							int position1 = (((y * (( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8))) + (((( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8)) - x) - 1)) * 4);
HXDLIN(1080)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1080)							int color1 = ((((( (int)(inter->b->__get(position1)) ) << 24) | (( (int)(inter->b->__get((position1 + 1))) ) << 16)) | (( (int)(inter->b->__get((position1 + 2))) ) << 8)) | ( (int)(inter->b->__get((position1 + 3))) ));
HXDLIN(1080)							{
HXLINE(1080)								int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1080)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1080)								this1->b[position2] = ( (unsigned char)(((color1 >> 24) & 255)) );
HXDLIN(1080)								this1->b[(position2 + 1)] = ( (unsigned char)(((color1 >> 16) & 255)) );
HXDLIN(1080)								this1->b[(position2 + 2)] = ( (unsigned char)(((color1 >> 8) & 255)) );
HXDLIN(1080)								this1->b[(position2 + 3)] = ( (unsigned char)((color1 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1079)			int _g4 = 0;
HXDLIN(1079)			int _g5 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1079)			while((_g4 < _g5)){
HXLINE(1079)				_g4 = (_g4 + 1);
HXDLIN(1079)				int x1 = (_g4 - 1);
HXDLIN(1079)				{
HXLINE(1079)					int _g6 = 0;
HXDLIN(1079)					int _g7 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1079)					while((_g6 < _g7)){
HXLINE(1079)						_g6 = (_g6 + 1);
HXDLIN(1079)						int y1 = (_g6 - 1);
HXDLIN(1079)						 ::vision::ds::ImageView v = null();
HXDLIN(1079)						bool _hx_tmp4;
HXDLIN(1079)						bool _hx_tmp5;
HXDLIN(1079)						bool _hx_tmp6;
HXDLIN(1079)						bool _hx_tmp7;
HXDLIN(1079)						bool _hx_tmp8;
HXDLIN(1079)						bool _hx_tmp9;
HXDLIN(1079)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1079)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1079)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)							_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1079)							_hx_tmp9 = true;
            						}
HXDLIN(1079)						if (!(_hx_tmp9)) {
HXLINE(1079)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1079)							_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1079)							_hx_tmp8 = true;
            						}
HXDLIN(1079)						if (!(_hx_tmp8)) {
HXLINE(1079)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)							_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1079)							_hx_tmp7 = true;
            						}
HXDLIN(1079)						if (!(_hx_tmp7)) {
HXLINE(1079)							_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1079)							_hx_tmp6 = true;
            						}
HXDLIN(1079)						if (!(_hx_tmp6)) {
HXLINE(1079)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1079)							_hx_tmp5 = false;
            						}
HXDLIN(1079)						if (_hx_tmp5) {
HXLINE(1079)							bool _hx_tmp10;
HXDLIN(1079)							bool _hx_tmp11;
HXDLIN(1079)							if ((x1 >= 0)) {
HXLINE(1079)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1079)								_hx_tmp11 = false;
            							}
HXDLIN(1079)							if (_hx_tmp11) {
HXLINE(1079)								_hx_tmp10 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1079)								_hx_tmp10 = false;
            							}
HXDLIN(1079)							if (_hx_tmp10) {
HXLINE(1079)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1079)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1079)							bool has = false;
HXDLIN(1079)							 ::vision::ds::ImageView view;
HXDLIN(1079)							if (::hx::IsNotNull( v )) {
HXLINE(1079)								view = v;
            							}
            							else {
HXLINE(1079)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1079)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1079)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1079)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1079)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1079)									bool has1;
HXDLIN(1079)									bool has2;
HXDLIN(1079)									if ((x1 < (view->x + view->width))) {
HXLINE(1079)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1079)										has2 = false;
            									}
HXDLIN(1079)									if (has2) {
HXLINE(1079)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1079)										has1 = false;
            									}
HXDLIN(1079)									if (has1) {
HXLINE(1079)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1079)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1079)									bool has3;
HXDLIN(1079)									bool has4;
HXDLIN(1079)									bool has5;
HXDLIN(1079)									if ((x1 < (view->x + view->width))) {
HXLINE(1079)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1079)										has5 = false;
            									}
HXDLIN(1079)									if (has5) {
HXLINE(1079)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1079)										has4 = false;
            									}
HXDLIN(1079)									if (has4) {
HXLINE(1079)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1079)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1079)									if ((view->width > view->height)) {
HXLINE(1079)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1079)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1079)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1079)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1079)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1079)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1079)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1079)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1079)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1079)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1079)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1079)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1079)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1079)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1079)										if ((view->height > view->width)) {
HXLINE(1079)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1079)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1079)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1079)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1079)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1079)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1079)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1079)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1079)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1079)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1079)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1079)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1079)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1079)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1079)											Float point1_x = ( (Float)(x1) );
HXDLIN(1079)											Float point1_y = ( (Float)(y1) );
HXDLIN(1079)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1079)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1079)											Float x6 = (point2_x - point1_x);
HXDLIN(1079)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1079)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1079)							_hx_tmp4 = has;
            						}
HXDLIN(1079)						if (_hx_tmp4) {
HXLINE(1079)							int position3 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1079)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1080)							int color2 = ((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) ));
HXDLIN(1080)							int position4 = (((y1 * (( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8))) + (((( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8)) - x1) - 1)) * 4);
HXDLIN(1080)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1080)							int color3 = ((((( (int)(inter->b->__get(position4)) ) << 24) | (( (int)(inter->b->__get((position4 + 1))) ) << 16)) | (( (int)(inter->b->__get((position4 + 2))) ) << 8)) | ( (int)(inter->b->__get((position4 + 3))) ));
HXDLIN(1080)							{
HXLINE(1080)								int position5 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1080)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1080)								this1->b[position5] = ( (unsigned char)(((color3 >> 24) & 255)) );
HXDLIN(1080)								this1->b[(position5 + 1)] = ( (unsigned char)(((color3 >> 16) & 255)) );
HXDLIN(1080)								this1->b[(position5 + 2)] = ( (unsigned char)(((color3 >> 8) & 255)) );
HXDLIN(1080)								this1->b[(position5 + 3)] = ( (unsigned char)((color3 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1082)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,mirror,return )

 ::haxe::io::Bytes Image_Impl__obj::flip( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1085_flip)
HXLINE(1086)		 ::haxe::io::Bytes inter = ::vision::ds::_Image::Image_Impl__obj::clone(this1);
HXLINE(1087)		bool _hx_tmp;
HXDLIN(1087)		bool _hx_tmp1;
HXDLIN(1087)		bool _hx_tmp2;
HXDLIN(1087)		bool _hx_tmp3;
HXDLIN(1087)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1087)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1087)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)			_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1087)			_hx_tmp3 = true;
            		}
HXDLIN(1087)		if (!(_hx_tmp3)) {
HXLINE(1087)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1087)			_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1087)			_hx_tmp2 = true;
            		}
HXDLIN(1087)		if (!(_hx_tmp2)) {
HXLINE(1087)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)			_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1087)			_hx_tmp1 = true;
            		}
HXDLIN(1087)		if (!(_hx_tmp1)) {
HXLINE(1087)			_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1087)			_hx_tmp = true;
            		}
HXDLIN(1087)		if (!(_hx_tmp)) {
HXLINE(1087)			int _g = 0;
HXDLIN(1087)			int _g1 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1087)			while((_g < _g1)){
HXLINE(1087)				_g = (_g + 1);
HXDLIN(1087)				int x = (_g - 1);
HXDLIN(1087)				{
HXLINE(1087)					int _g2 = 0;
HXDLIN(1087)					int _g3 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1087)					while((_g2 < _g3)){
HXLINE(1087)						_g2 = (_g2 + 1);
HXDLIN(1087)						int y = (_g2 - 1);
HXLINE(1088)						{
HXLINE(1087)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1087)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1088)							int color = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
HXDLIN(1088)							int position1 = (((((::Math_obj::ceil((( (Float)((inter->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8)) * 4)) ))) - y) - 1) * (( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1088)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1088)							int color1 = ((((( (int)(inter->b->__get(position1)) ) << 24) | (( (int)(inter->b->__get((position1 + 1))) ) << 16)) | (( (int)(inter->b->__get((position1 + 2))) ) << 8)) | ( (int)(inter->b->__get((position1 + 3))) ));
HXDLIN(1088)							{
HXLINE(1088)								int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1088)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1088)								this1->b[position2] = ( (unsigned char)(((color1 >> 24) & 255)) );
HXDLIN(1088)								this1->b[(position2 + 1)] = ( (unsigned char)(((color1 >> 16) & 255)) );
HXDLIN(1088)								this1->b[(position2 + 2)] = ( (unsigned char)(((color1 >> 8) & 255)) );
HXDLIN(1088)								this1->b[(position2 + 3)] = ( (unsigned char)((color1 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1087)			int _g4 = 0;
HXDLIN(1087)			int _g5 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1087)			while((_g4 < _g5)){
HXLINE(1087)				_g4 = (_g4 + 1);
HXDLIN(1087)				int x1 = (_g4 - 1);
HXDLIN(1087)				{
HXLINE(1087)					int _g6 = 0;
HXDLIN(1087)					int _g7 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1087)					while((_g6 < _g7)){
HXLINE(1087)						_g6 = (_g6 + 1);
HXDLIN(1087)						int y1 = (_g6 - 1);
HXDLIN(1087)						 ::vision::ds::ImageView v = null();
HXDLIN(1087)						bool _hx_tmp4;
HXDLIN(1087)						bool _hx_tmp5;
HXDLIN(1087)						bool _hx_tmp6;
HXDLIN(1087)						bool _hx_tmp7;
HXDLIN(1087)						bool _hx_tmp8;
HXDLIN(1087)						bool _hx_tmp9;
HXDLIN(1087)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1087)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1087)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)							_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1087)							_hx_tmp9 = true;
            						}
HXDLIN(1087)						if (!(_hx_tmp9)) {
HXLINE(1087)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1087)							_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1087)							_hx_tmp8 = true;
            						}
HXDLIN(1087)						if (!(_hx_tmp8)) {
HXLINE(1087)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)							_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1087)							_hx_tmp7 = true;
            						}
HXDLIN(1087)						if (!(_hx_tmp7)) {
HXLINE(1087)							_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1087)							_hx_tmp6 = true;
            						}
HXDLIN(1087)						if (!(_hx_tmp6)) {
HXLINE(1087)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1087)							_hx_tmp5 = false;
            						}
HXDLIN(1087)						if (_hx_tmp5) {
HXLINE(1087)							bool _hx_tmp10;
HXDLIN(1087)							bool _hx_tmp11;
HXDLIN(1087)							if ((x1 >= 0)) {
HXLINE(1087)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1087)								_hx_tmp11 = false;
            							}
HXDLIN(1087)							if (_hx_tmp11) {
HXLINE(1087)								_hx_tmp10 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1087)								_hx_tmp10 = false;
            							}
HXDLIN(1087)							if (_hx_tmp10) {
HXLINE(1087)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1087)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1087)							bool has = false;
HXDLIN(1087)							 ::vision::ds::ImageView view;
HXDLIN(1087)							if (::hx::IsNotNull( v )) {
HXLINE(1087)								view = v;
            							}
            							else {
HXLINE(1087)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1087)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1087)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1087)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1087)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1087)									bool has1;
HXDLIN(1087)									bool has2;
HXDLIN(1087)									if ((x1 < (view->x + view->width))) {
HXLINE(1087)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1087)										has2 = false;
            									}
HXDLIN(1087)									if (has2) {
HXLINE(1087)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1087)										has1 = false;
            									}
HXDLIN(1087)									if (has1) {
HXLINE(1087)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1087)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1087)									bool has3;
HXDLIN(1087)									bool has4;
HXDLIN(1087)									bool has5;
HXDLIN(1087)									if ((x1 < (view->x + view->width))) {
HXLINE(1087)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1087)										has5 = false;
            									}
HXDLIN(1087)									if (has5) {
HXLINE(1087)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1087)										has4 = false;
            									}
HXDLIN(1087)									if (has4) {
HXLINE(1087)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1087)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1087)									if ((view->width > view->height)) {
HXLINE(1087)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1087)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1087)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1087)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1087)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1087)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1087)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1087)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1087)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1087)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1087)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1087)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1087)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1087)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1087)										if ((view->height > view->width)) {
HXLINE(1087)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1087)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1087)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1087)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1087)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1087)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1087)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1087)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1087)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1087)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1087)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1087)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1087)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1087)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1087)											Float point1_x = ( (Float)(x1) );
HXDLIN(1087)											Float point1_y = ( (Float)(y1) );
HXDLIN(1087)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1087)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1087)											Float x6 = (point2_x - point1_x);
HXDLIN(1087)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1087)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1087)							_hx_tmp4 = has;
            						}
HXDLIN(1087)						if (_hx_tmp4) {
HXLINE(1087)							int position3 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1087)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1088)							int color2 = ((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) ));
HXDLIN(1088)							int position4 = (((((::Math_obj::ceil((( (Float)((inter->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8)) * 4)) ))) - y1) - 1) * (( (int)(inter->b->__get(0)) ) | (( (int)(inter->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1088)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1088)							int color3 = ((((( (int)(inter->b->__get(position4)) ) << 24) | (( (int)(inter->b->__get((position4 + 1))) ) << 16)) | (( (int)(inter->b->__get((position4 + 2))) ) << 8)) | ( (int)(inter->b->__get((position4 + 3))) ));
HXDLIN(1088)							{
HXLINE(1088)								int position5 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1088)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1088)								this1->b[position5] = ( (unsigned char)(((color3 >> 24) & 255)) );
HXDLIN(1088)								this1->b[(position5 + 1)] = ( (unsigned char)(((color3 >> 16) & 255)) );
HXDLIN(1088)								this1->b[(position5 + 2)] = ( (unsigned char)(((color3 >> 8) & 255)) );
HXDLIN(1088)								this1->b[(position5 + 3)] = ( (unsigned char)((color3 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1090)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,flip,return )

 ::haxe::io::Bytes Image_Impl__obj::stamp( ::haxe::io::Bytes this1,int X,int Y, ::haxe::io::Bytes image){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1102_stamp)
HXLINE(1103)		{
HXLINE(1103)			int _g = X;
HXDLIN(1103)			int _g1 = (X + (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
HXDLIN(1103)			while((_g < _g1)){
HXLINE(1103)				_g = (_g + 1);
HXDLIN(1103)				int x = (_g - 1);
HXLINE(1104)				{
HXLINE(1104)					int _g2 = Y;
HXDLIN(1104)					int _g3 = (Y + ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
HXDLIN(1104)					while((_g2 < _g3)){
HXLINE(1104)						_g2 = (_g2 + 1);
HXDLIN(1104)						int y = (_g2 - 1);
HXLINE(1105)						{
HXLINE(1105)							int position = ((((y - Y) * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + (x - X)) * 4);
HXDLIN(1105)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)							int color = ((((( (int)(image->b->__get(position)) ) << 24) | (( (int)(image->b->__get((position + 1))) ) << 16)) | (( (int)(image->b->__get((position + 2))) ) << 8)) | ( (int)(image->b->__get((position + 3))) ));
HXDLIN(1105)							bool _hx_tmp;
HXDLIN(1105)							bool _hx_tmp1;
HXDLIN(1105)							bool _hx_tmp2;
HXDLIN(1105)							if ((x >= 0)) {
HXLINE(1105)								_hx_tmp2 = (x >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1105)								_hx_tmp2 = true;
            							}
HXDLIN(1105)							if (!(_hx_tmp2)) {
HXLINE(1105)								_hx_tmp1 = (y < 0);
            							}
            							else {
HXLINE(1105)								_hx_tmp1 = true;
            							}
HXDLIN(1105)							if (!(_hx_tmp1)) {
HXLINE(1105)								_hx_tmp = (y >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1105)								_hx_tmp = true;
            							}
HXDLIN(1105)							if (_hx_tmp) {
HXLINE(1105)								::cpp::Int64 this2 = _hx_int64_make(x,y);
HXDLIN(1105)								int _hx_tmp3 = _hx_int64_high(this2);
HXDLIN(1105)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_int64_low(this2))));
            							}
            							else {
HXLINE(1105)								if (((( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )) == 1)) {
HXLINE(1105)									bool _hx_tmp4;
HXDLIN(1105)									bool _hx_tmp5;
HXDLIN(1105)									bool _hx_tmp6;
HXDLIN(1105)									if ((x >= 0)) {
HXLINE(1105)										_hx_tmp6 = (y >= 0);
            									}
            									else {
HXLINE(1105)										_hx_tmp6 = false;
            									}
HXDLIN(1105)									if (_hx_tmp6) {
HXLINE(1105)										_hx_tmp5 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE(1105)										_hx_tmp5 = false;
            									}
HXDLIN(1105)									if (_hx_tmp5) {
HXLINE(1105)										_hx_tmp4 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE(1105)										_hx_tmp4 = false;
            									}
HXDLIN(1105)									if (!(_hx_tmp4)) {
HXLINE(1105)										::cpp::Int64 this3 = _hx_int64_make(x,y);
HXDLIN(1105)										int _hx_tmp7 = _hx_int64_high(this3);
HXDLIN(1105)										HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_int64_low(this3))));
            									}
            									else {
HXLINE(1105)										bool _hx_tmp8;
HXDLIN(1105)										bool _hx_tmp9;
HXDLIN(1105)										bool _hx_tmp10;
HXDLIN(1105)										bool _hx_tmp11;
HXDLIN(1105)										int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)										if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1105)											int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)											_hx_tmp11 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp11 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp11)) {
HXLINE(1105)											int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)											_hx_tmp10 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp10 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp10)) {
HXLINE(1105)											int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)											_hx_tmp9 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp9 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp9)) {
HXLINE(1105)											_hx_tmp8 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp8 = true;
            										}
HXDLIN(1105)										if (_hx_tmp8) {
HXLINE(1105)											 ::vision::ds::ImageView v = null();
HXDLIN(1105)											bool _hx_tmp12;
HXDLIN(1105)											bool _hx_tmp13;
HXDLIN(1105)											bool _hx_tmp14;
HXDLIN(1105)											bool _hx_tmp15;
HXDLIN(1105)											bool _hx_tmp16;
HXDLIN(1105)											bool _hx_tmp17;
HXDLIN(1105)											int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)											if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1105)												int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)												_hx_tmp17 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp17 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp17)) {
HXLINE(1105)												int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)												_hx_tmp16 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp16 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp16)) {
HXLINE(1105)												int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)												_hx_tmp15 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp15 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp15)) {
HXLINE(1105)												_hx_tmp14 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp14 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp14)) {
HXLINE(1105)												_hx_tmp13 = ::hx::IsNull( v );
            											}
            											else {
HXLINE(1105)												_hx_tmp13 = false;
            											}
HXDLIN(1105)											if (_hx_tmp13) {
HXLINE(1105)												bool _hx_tmp18;
HXDLIN(1105)												bool _hx_tmp19;
HXDLIN(1105)												if ((x >= 0)) {
HXLINE(1105)													_hx_tmp19 = (y >= 0);
            												}
            												else {
HXLINE(1105)													_hx_tmp19 = false;
            												}
HXDLIN(1105)												if (_hx_tmp19) {
HXLINE(1105)													_hx_tmp18 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            												}
            												else {
HXLINE(1105)													_hx_tmp18 = false;
            												}
HXDLIN(1105)												if (_hx_tmp18) {
HXLINE(1105)													_hx_tmp12 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            												}
            												else {
HXLINE(1105)													_hx_tmp12 = false;
            												}
            											}
            											else {
HXLINE(1105)												bool has = false;
HXDLIN(1105)												 ::vision::ds::ImageView view;
HXDLIN(1105)												if (::hx::IsNotNull( v )) {
HXLINE(1105)													view = v;
            												}
            												else {
HXLINE(1105)													int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)													int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)													int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)													int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)													view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            												}
HXDLIN(1105)												switch((int)(view->shape)){
            													case (int)0: {
HXLINE(1105)														bool has1;
HXDLIN(1105)														bool has2;
HXDLIN(1105)														if ((x < (view->x + view->width))) {
HXLINE(1105)															has2 = (y < (view->y + view->height));
            														}
            														else {
HXLINE(1105)															has2 = false;
            														}
HXDLIN(1105)														if (has2) {
HXLINE(1105)															has1 = (x >= view->x);
            														}
            														else {
HXLINE(1105)															has1 = false;
            														}
HXDLIN(1105)														if (has1) {
HXLINE(1105)															has = (y >= view->y);
            														}
            														else {
HXLINE(1105)															has = false;
            														}
            													}
            													break;
            													case (int)1: {
HXLINE(1105)														bool has3;
HXDLIN(1105)														bool has4;
HXDLIN(1105)														bool has5;
HXDLIN(1105)														if ((x < (view->x + view->width))) {
HXLINE(1105)															has5 = (y < (view->y + view->height));
            														}
            														else {
HXLINE(1105)															has5 = false;
            														}
HXDLIN(1105)														if (has5) {
HXLINE(1105)															has4 = (x >= view->x);
            														}
            														else {
HXLINE(1105)															has4 = false;
            														}
HXDLIN(1105)														if (has4) {
HXLINE(1105)															has3 = (y >= view->y);
            														}
            														else {
HXLINE(1105)															has3 = false;
            														}
HXLINE(1400)														has = !(has3);
            													}
            													break;
            													case (int)2: case (int)3: {
HXLINE(1105)														if ((view->width > view->height)) {
HXLINE(1105)															Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1105)															Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1105)															Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1105)															Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1105)															Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1105)															Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1105)															Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1105)															::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN(1105)															Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1105)															Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1105)															Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN(1105)															Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1105)															Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)															has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE(1105)															if ((view->shape == 3)) {
HXLINE(1416)																has = !(has);
            															}
            														}
            														else {
HXLINE(1105)															if ((view->height > view->width)) {
HXLINE(1105)																Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1105)																Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1105)																Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1105)																Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1105)																Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1105)																::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN(1105)																Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1105)																Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1105)																Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN(1105)																Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1105)																Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)																has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE(1105)																if ((view->shape == 3)) {
HXLINE(1425)																	has = !(has);
            																}
            															}
            															else {
HXLINE(1105)																Float point1_x = ( (Float)(x) );
HXDLIN(1105)																Float point1_y = ( (Float)(y) );
HXDLIN(1105)																Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1105)																Float x5 = (point2_x - point1_x);
HXDLIN(1105)																Float y5 = (point2_y - point1_y);
HXLINE(1428)																has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1105)																if ((view->shape == 3)) {
HXLINE(1429)																	has = !(has);
            																}
            															}
            														}
            													}
            													break;
            													case (int)4: {
HXLINE(1401)														has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            													}
            													break;
            													case (int)5: {
HXLINE(1402)														has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            													}
            													break;
            												}
HXLINE(1105)												_hx_tmp12 = has;
            											}
HXDLIN(1105)											if (_hx_tmp12) {
HXLINE(1105)												int position1 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1105)												position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)												this1->b[position1] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1105)												this1->b[(position1 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1105)												this1->b[(position1 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1105)												this1->b[(position1 + 3)] = ( (unsigned char)((color & 255)) );
            											}
            										}
            										else {
HXLINE(1105)											int position2 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1105)											position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)											this1->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1105)											this1->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1105)											this1->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1105)											this1->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            										}
            									}
            								}
            								else {
HXLINE(1105)									bool _hx_tmp20;
HXDLIN(1105)									bool _hx_tmp21;
HXDLIN(1105)									bool _hx_tmp22;
HXDLIN(1105)									if ((x >= 0)) {
HXLINE(1105)										_hx_tmp22 = (y >= 0);
            									}
            									else {
HXLINE(1105)										_hx_tmp22 = false;
            									}
HXDLIN(1105)									if (_hx_tmp22) {
HXLINE(1105)										_hx_tmp21 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE(1105)										_hx_tmp21 = false;
            									}
HXDLIN(1105)									if (_hx_tmp21) {
HXLINE(1105)										_hx_tmp20 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE(1105)										_hx_tmp20 = false;
            									}
HXDLIN(1105)									if (!(_hx_tmp20)) {
HXLINE(1105)										::cpp::Int64 this4 = _hx_int64_make(x,y);
HXDLIN(1105)										int _hx_tmp23 = _hx_int64_high(this4);
HXDLIN(1105)										HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp23,_hx_int64_low(this4))));
            									}
HXDLIN(1105)									int position3 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1105)									position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)									int oldColor = ((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) ));
HXDLIN(1105)									Float Red = (((( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN(1105)									Float Green = (((( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)(((oldColor >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN(1105)									Float Blue = (((( (Float)((color & 255)) ) / ( (Float)(255) )) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))) + ((( (Float)((oldColor & 255)) ) / ( (Float)(255) )) * (( (Float)(1) ) - (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )))));
HXDLIN(1105)									Float Alpha = ((( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) )) + ((( (Float)(1) ) - (( (Float)(((oldColor >> 24) & 255)) ) / ( (Float)(255) ))) * (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ))));
HXDLIN(1105)									int color1 = 0;
HXDLIN(1105)									{
HXLINE(1105)										int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN(1105)										color1 = (color1 & -16711681);
HXDLIN(1105)										int color2;
HXDLIN(1105)										if ((value > 255)) {
HXLINE(1105)											color2 = 255;
            										}
            										else {
HXLINE(1105)											if ((value < 0)) {
HXLINE(1105)												color2 = 0;
            											}
            											else {
HXLINE(1105)												color2 = value;
            											}
            										}
HXDLIN(1105)										color1 = (color1 | (color2 << 16));
            									}
HXDLIN(1105)									{
HXLINE(1105)										int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN(1105)										color1 = (color1 & -65281);
HXDLIN(1105)										int color3;
HXDLIN(1105)										if ((value1 > 255)) {
HXLINE(1105)											color3 = 255;
            										}
            										else {
HXLINE(1105)											if ((value1 < 0)) {
HXLINE(1105)												color3 = 0;
            											}
            											else {
HXLINE(1105)												color3 = value1;
            											}
            										}
HXDLIN(1105)										color1 = (color1 | (color3 << 8));
            									}
HXDLIN(1105)									{
HXLINE(1105)										int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN(1105)										color1 = (color1 & -256);
HXDLIN(1105)										int color4;
HXDLIN(1105)										if ((value2 > 255)) {
HXLINE(1105)											color4 = 255;
            										}
            										else {
HXLINE(1105)											if ((value2 < 0)) {
HXLINE(1105)												color4 = 0;
            											}
            											else {
HXLINE(1105)												color4 = value2;
            											}
            										}
HXDLIN(1105)										color1 = (color1 | color4);
            									}
HXDLIN(1105)									{
HXLINE(1105)										int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1105)										color1 = (color1 & 16777215);
HXDLIN(1105)										int color5;
HXDLIN(1105)										if ((value3 > 255)) {
HXLINE(1105)											color5 = 255;
            										}
            										else {
HXLINE(1105)											if ((value3 < 0)) {
HXLINE(1105)												color5 = 0;
            											}
            											else {
HXLINE(1105)												color5 = value3;
            											}
            										}
HXDLIN(1105)										color1 = (color1 | (color5 << 24));
            									}
HXDLIN(1105)									int newColor = color1;
HXDLIN(1105)									bool _hx_tmp24;
HXDLIN(1105)									bool _hx_tmp25;
HXDLIN(1105)									bool _hx_tmp26;
HXDLIN(1105)									if ((x >= 0)) {
HXLINE(1105)										_hx_tmp26 = (y >= 0);
            									}
            									else {
HXLINE(1105)										_hx_tmp26 = false;
            									}
HXDLIN(1105)									if (_hx_tmp26) {
HXLINE(1105)										_hx_tmp25 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            									}
            									else {
HXLINE(1105)										_hx_tmp25 = false;
            									}
HXDLIN(1105)									if (_hx_tmp25) {
HXLINE(1105)										_hx_tmp24 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            									}
            									else {
HXLINE(1105)										_hx_tmp24 = false;
            									}
HXDLIN(1105)									if (!(_hx_tmp24)) {
HXLINE(1105)										::cpp::Int64 this5 = _hx_int64_make(x,y);
HXDLIN(1105)										int _hx_tmp27 = _hx_int64_high(this5);
HXDLIN(1105)										HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp27,_hx_int64_low(this5))));
            									}
            									else {
HXLINE(1105)										bool _hx_tmp28;
HXDLIN(1105)										bool _hx_tmp29;
HXDLIN(1105)										bool _hx_tmp30;
HXDLIN(1105)										bool _hx_tmp31;
HXDLIN(1105)										int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)										if (((( (int)(this1->b->__get(pos12)) ) | (( (int)(this1->b->__get((pos12 + 1))) ) << 8)) == 0)) {
HXLINE(1105)											int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)											_hx_tmp31 = ((( (int)(this1->b->__get(pos13)) ) | (( (int)(this1->b->__get((pos13 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp31 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp31)) {
HXLINE(1105)											int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)											_hx_tmp30 = ((( (int)(this1->b->__get(pos14)) ) | (( (int)(this1->b->__get((pos14 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp30 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp30)) {
HXLINE(1105)											int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)											_hx_tmp29 = ((( (int)(this1->b->__get(pos15)) ) | (( (int)(this1->b->__get((pos15 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp29 = true;
            										}
HXDLIN(1105)										if (!(_hx_tmp29)) {
HXLINE(1105)											_hx_tmp28 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            										}
            										else {
HXLINE(1105)											_hx_tmp28 = true;
            										}
HXDLIN(1105)										if (_hx_tmp28) {
HXLINE(1105)											 ::vision::ds::ImageView v1 = null();
HXDLIN(1105)											bool _hx_tmp32;
HXDLIN(1105)											bool _hx_tmp33;
HXDLIN(1105)											bool _hx_tmp34;
HXDLIN(1105)											bool _hx_tmp35;
HXDLIN(1105)											bool _hx_tmp36;
HXDLIN(1105)											bool _hx_tmp37;
HXDLIN(1105)											int pos16 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)											if (((( (int)(this1->b->__get(pos16)) ) | (( (int)(this1->b->__get((pos16 + 1))) ) << 8)) == 0)) {
HXLINE(1105)												int pos17 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)												_hx_tmp37 = ((( (int)(this1->b->__get(pos17)) ) | (( (int)(this1->b->__get((pos17 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp37 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp37)) {
HXLINE(1105)												int pos18 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)												_hx_tmp36 = ((( (int)(this1->b->__get(pos18)) ) | (( (int)(this1->b->__get((pos18 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp36 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp36)) {
HXLINE(1105)												int pos19 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)												_hx_tmp35 = ((( (int)(this1->b->__get(pos19)) ) | (( (int)(this1->b->__get((pos19 + 1))) ) << 8)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp35 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp35)) {
HXLINE(1105)												_hx_tmp34 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            											}
            											else {
HXLINE(1105)												_hx_tmp34 = true;
            											}
HXDLIN(1105)											if (!(_hx_tmp34)) {
HXLINE(1105)												_hx_tmp33 = ::hx::IsNull( v1 );
            											}
            											else {
HXLINE(1105)												_hx_tmp33 = false;
            											}
HXDLIN(1105)											if (_hx_tmp33) {
HXLINE(1105)												bool _hx_tmp38;
HXDLIN(1105)												bool _hx_tmp39;
HXDLIN(1105)												if ((x >= 0)) {
HXLINE(1105)													_hx_tmp39 = (y >= 0);
            												}
            												else {
HXLINE(1105)													_hx_tmp39 = false;
            												}
HXDLIN(1105)												if (_hx_tmp39) {
HXLINE(1105)													_hx_tmp38 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            												}
            												else {
HXLINE(1105)													_hx_tmp38 = false;
            												}
HXDLIN(1105)												if (_hx_tmp38) {
HXLINE(1105)													_hx_tmp32 = (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            												}
            												else {
HXLINE(1105)													_hx_tmp32 = false;
            												}
            											}
            											else {
HXLINE(1105)												bool has8 = false;
HXDLIN(1105)												 ::vision::ds::ImageView view1;
HXDLIN(1105)												if (::hx::IsNotNull( v1 )) {
HXLINE(1105)													view1 = v1;
            												}
            												else {
HXLINE(1105)													int pos20 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1105)													int pos21 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)													int pos22 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1105)													int pos23 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1105)													view1 =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos20)) ) | (( (int)(this1->b->__get((pos20 + 1))) ) << 8)),(( (int)(this1->b->__get(pos21)) ) | (( (int)(this1->b->__get((pos21 + 1))) ) << 8)),(( (int)(this1->b->__get(pos22)) ) | (( (int)(this1->b->__get((pos22 + 1))) ) << 8)),(( (int)(this1->b->__get(pos23)) ) | (( (int)(this1->b->__get((pos23 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            												}
HXDLIN(1105)												switch((int)(view1->shape)){
            													case (int)0: {
HXLINE(1105)														bool has9;
HXDLIN(1105)														bool has10;
HXDLIN(1105)														if ((x < (view1->x + view1->width))) {
HXLINE(1105)															has10 = (y < (view1->y + view1->height));
            														}
            														else {
HXLINE(1105)															has10 = false;
            														}
HXDLIN(1105)														if (has10) {
HXLINE(1105)															has9 = (x >= view1->x);
            														}
            														else {
HXLINE(1105)															has9 = false;
            														}
HXDLIN(1105)														if (has9) {
HXLINE(1105)															has8 = (y >= view1->y);
            														}
            														else {
HXLINE(1105)															has8 = false;
            														}
            													}
            													break;
            													case (int)1: {
HXLINE(1105)														bool has11;
HXDLIN(1105)														bool has12;
HXDLIN(1105)														bool has13;
HXDLIN(1105)														if ((x < (view1->x + view1->width))) {
HXLINE(1105)															has13 = (y < (view1->y + view1->height));
            														}
            														else {
HXLINE(1105)															has13 = false;
            														}
HXDLIN(1105)														if (has13) {
HXLINE(1105)															has12 = (x >= view1->x);
            														}
            														else {
HXLINE(1105)															has12 = false;
            														}
HXDLIN(1105)														if (has12) {
HXLINE(1105)															has11 = (y >= view1->y);
            														}
            														else {
HXLINE(1105)															has11 = false;
            														}
HXLINE(1400)														has8 = !(has11);
            													}
            													break;
            													case (int)2: case (int)3: {
HXLINE(1105)														if ((view1->width > view1->height)) {
HXLINE(1105)															Float a2 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1105)															Float b2 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1105)															Float c2 = ::Math_obj::sqrt(((a2 * a2) - (b2 * b2)));
HXDLIN(1105)															Float f1_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) - c2);
HXDLIN(1105)															Float f1_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1105)															Float f2_x2 = ((view1->x + (( (Float)(view1->width) ) / ( (Float)(2) ))) + c2);
HXDLIN(1105)															Float f2_y2 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1105)															::cpp::Int64 p2 = _hx_int64_make(x,y);
HXDLIN(1105)															Float x6 = (( (Float)(_hx_int64_high(p2)) ) - f1_x2);
HXDLIN(1105)															Float y6 = (( (Float)(_hx_int64_low(p2)) ) - f1_y2);
HXDLIN(1105)															Float has14 = ::Math_obj::sqrt(((x6 * x6) + (y6 * y6)));
HXDLIN(1105)															Float x7 = (( (Float)(_hx_int64_high(p2)) ) - f2_x2);
HXDLIN(1105)															Float y7 = (( (Float)(_hx_int64_low(p2)) ) - f2_y2);
HXLINE(1415)															has8 = ((has14 + ::Math_obj::sqrt(((x7 * x7) + (y7 * y7)))) <= view1->width);
HXLINE(1105)															if ((view1->shape == 3)) {
HXLINE(1416)																has8 = !(has8);
            															}
            														}
            														else {
HXLINE(1105)															if ((view1->height > view1->width)) {
HXLINE(1105)																Float a3 = (( (Float)(view1->height) ) / ( (Float)(2) ));
HXDLIN(1105)																Float b3 = (( (Float)(view1->width) ) / ( (Float)(2) ));
HXDLIN(1105)																Float c3 = ::Math_obj::sqrt(((a3 * a3) - (b3 * b3)));
HXDLIN(1105)																Float f1_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float f1_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) - c3);
HXDLIN(1105)																Float f2_x3 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float f2_y3 = ((view1->y + (( (Float)(view1->height) ) / ( (Float)(2) ))) + c3);
HXDLIN(1105)																::cpp::Int64 p3 = _hx_int64_make(x,y);
HXDLIN(1105)																Float x8 = (( (Float)(_hx_int64_high(p3)) ) - f1_x3);
HXDLIN(1105)																Float y8 = (( (Float)(_hx_int64_low(p3)) ) - f1_y3);
HXDLIN(1105)																Float has15 = ::Math_obj::sqrt(((x8 * x8) + (y8 * y8)));
HXDLIN(1105)																Float x9 = (( (Float)(_hx_int64_high(p3)) ) - f2_x3);
HXDLIN(1105)																Float y9 = (( (Float)(_hx_int64_low(p3)) ) - f2_y3);
HXLINE(1424)																has8 = ((has15 + ::Math_obj::sqrt(((x9 * x9) + (y9 * y9)))) <= view1->height);
HXLINE(1105)																if ((view1->shape == 3)) {
HXLINE(1425)																	has8 = !(has8);
            																}
            															}
            															else {
HXLINE(1105)																Float point1_x1 = ( (Float)(x) );
HXDLIN(1105)																Float point1_y1 = ( (Float)(y) );
HXDLIN(1105)																Float point2_x1 = (view1->x + (( (Float)(view1->width) ) / ( (Float)(2) )));
HXDLIN(1105)																Float point2_y1 = (view1->y + (( (Float)(view1->height) ) / ( (Float)(2) )));
HXDLIN(1105)																Float x10 = (point2_x1 - point1_x1);
HXDLIN(1105)																Float y10 = (point2_y1 - point1_y1);
HXLINE(1428)																has8 = (::Math_obj::sqrt(((x10 * x10) + (y10 * y10))) <= (( (Float)(view1->width) ) / ( (Float)(2) )));
HXLINE(1105)																if ((view1->shape == 3)) {
HXLINE(1429)																	has8 = !(has8);
            																}
            															}
            														}
            													}
            													break;
            													case (int)4: {
HXLINE(1401)														has8 = (((::Math_obj::abs((( (Float)((x - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1);
            													}
            													break;
            													case (int)5: {
HXLINE(1402)														has8 = !((((::Math_obj::abs((( (Float)((x - view1->x)) ) - (( (Float)(view1->width) ) / ( (Float)(2) )))) / (( (Float)(view1->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view1->y)) ) - (( (Float)(view1->height) ) / ( (Float)(2) )))) / (( (Float)(view1->height) ) / ( (Float)(2) )))) <= 1));
            													}
            													break;
            												}
HXLINE(1105)												_hx_tmp32 = has8;
            											}
HXDLIN(1105)											if (_hx_tmp32) {
HXLINE(1105)												int position4 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1105)												position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)												this1->b[position4] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN(1105)												this1->b[(position4 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN(1105)												this1->b[(position4 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN(1105)												this1->b[(position4 + 3)] = ( (unsigned char)((newColor & 255)) );
            											}
            										}
            										else {
HXLINE(1105)											int position5 = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1105)											position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1105)											this1->b[position5] = ( (unsigned char)(((newColor >> 24) & 255)) );
HXDLIN(1105)											this1->b[(position5 + 1)] = ( (unsigned char)(((newColor >> 16) & 255)) );
HXDLIN(1105)											this1->b[(position5 + 2)] = ( (unsigned char)(((newColor >> 8) & 255)) );
HXDLIN(1105)											this1->b[(position5 + 3)] = ( (unsigned char)((newColor & 255)) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1108)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,stamp,return )

 ::haxe::io::Bytes Image_Impl__obj::resize( ::haxe::io::Bytes this1,::hx::Null< int >  __o_newWidth,::hx::Null< int >  __o_newHeight, ::Dynamic algorithm){
            		int newWidth = __o_newWidth.Default(-1);
            		int newHeight = __o_newHeight.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1121_resize)
HXLINE(1122)		bool _hx_tmp;
HXDLIN(1122)		if ((newWidth == -1)) {
HXLINE(1122)			_hx_tmp = (newHeight == -1);
            		}
            		else {
HXLINE(1122)			_hx_tmp = false;
            		}
HXDLIN(1122)		if (_hx_tmp) {
HXLINE(1122)			return this1;
            		}
HXLINE(1123)		if ((newWidth == -1)) {
HXLINE(1124)			newWidth = ::Std_obj::_hx_int(((( (Float)(newHeight) ) / ( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) )) * ( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) )));
            		}
            		else {
HXLINE(1125)			if ((newHeight == -1)) {
HXLINE(1126)				newHeight = ::Std_obj::_hx_int(((( (Float)(newWidth) ) / ( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) )) * ( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) )));
            			}
            		}
HXLINE(1128)		::haxe::Log_obj::trace(newWidth, ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,newHeight))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("resize",f4,59,7b,08))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("vision/ds/Image.hx",3c,20,62,0a))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),1128)));
HXLINE(1129)		if (::hx::IsNull( algorithm )) {
HXLINE(1130)			algorithm = ::vision::tools::ImageTools_obj::defaultResizeAlgorithm;
            		}
HXLINE(1131)		 ::Dynamic _hx_switch_0 = algorithm;
            		if (  (_hx_switch_0==0) ){
HXLINE(1138)			int color = 0;
HXDLIN(1138)			int length = (((newWidth * newHeight) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1138)			 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(1138)			this2->fill(0,length,0);
HXDLIN(1138)			 ::haxe::io::Bytes this3 = this2;
HXDLIN(1138)			{
HXLINE(1138)				this3->b[0] = ( (unsigned char)(newWidth) );
HXDLIN(1138)				this3->b[1] = ( (unsigned char)((newWidth >> 8)) );
            			}
HXDLIN(1138)			{
HXLINE(1138)				int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1138)				this3->b[pos] = ( (unsigned char)(0) );
HXDLIN(1138)				this3->b[(pos + 1)] = ( (unsigned char)(0) );
            			}
HXDLIN(1138)			{
HXLINE(1138)				int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1138)				this3->b[pos1] = ( (unsigned char)(0) );
HXDLIN(1138)				this3->b[(pos1 + 1)] = ( (unsigned char)(0) );
            			}
HXDLIN(1138)			{
HXLINE(1138)				int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1138)				this3->b[pos2] = ( (unsigned char)(0) );
HXDLIN(1138)				this3->b[(pos2 + 1)] = ( (unsigned char)(0) );
            			}
HXDLIN(1138)			{
HXLINE(1138)				int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1138)				this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(1138)				this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
            			}
HXDLIN(1138)			this3->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXDLIN(1138)			int i = ::vision::ds::_Image::Image_Impl__obj::OFFSET;
HXDLIN(1138)			while((i < this3->length)){
HXLINE(1138)				this3->b[i] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1138)				this3->b[(i + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1138)				this3->b[(i + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1138)				this3->b[(i + 3)] = ( (unsigned char)((color & 255)) );
HXDLIN(1138)				i = (i + 4);
            			}
HXDLIN(1138)			 ::haxe::io::Bytes image = this3;
HXLINE(1139)			Float xMultiplier = (( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) / ( (Float)((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) ));
HXLINE(1140)			Float yMultiplier = (( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) / ( (Float)(::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) )))) ));
HXLINE(1141)			{
HXLINE(1141)				int _g = 0;
HXDLIN(1141)				int _g1 = (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8));
HXDLIN(1141)				while((_g < _g1)){
HXLINE(1141)					_g = (_g + 1);
HXDLIN(1141)					int x = (_g - 1);
HXDLIN(1141)					{
HXLINE(1141)						int _g2 = 0;
HXDLIN(1141)						int _g3 = ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1141)						while((_g2 < _g3)){
HXLINE(1141)							_g2 = (_g2 + 1);
HXDLIN(1141)							int y = (_g2 - 1);
HXDLIN(1141)							{
HXLINE(1141)								int position = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1141)								position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1141)								int color1 = ((((( (int)(image->b->__get(position)) ) << 24) | (( (int)(image->b->__get((position + 1))) ) << 16)) | (( (int)(image->b->__get((position + 2))) ) << 8)) | ( (int)(image->b->__get((position + 3))) ));
HXLINE(1142)								int x1 = ::Math_obj::floor((( (Float)(x) ) * xMultiplier));
HXDLIN(1142)								int y1 = ::Math_obj::floor((( (Float)(y) ) * yMultiplier));
HXDLIN(1142)								bool _hx_tmp1;
HXDLIN(1142)								bool _hx_tmp2;
HXDLIN(1142)								bool _hx_tmp3;
HXDLIN(1142)								if ((x1 >= 0)) {
HXLINE(1142)									_hx_tmp3 = (y1 >= 0);
            								}
            								else {
HXLINE(1142)									_hx_tmp3 = false;
            								}
HXDLIN(1142)								if (_hx_tmp3) {
HXLINE(1142)									_hx_tmp2 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1142)									_hx_tmp2 = false;
            								}
HXDLIN(1142)								if (_hx_tmp2) {
HXLINE(1142)									_hx_tmp1 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1142)									_hx_tmp1 = false;
            								}
HXDLIN(1142)								if (!(_hx_tmp1)) {
HXLINE(1142)									::cpp::Int64 this4 = _hx_int64_make(x1,y1);
HXDLIN(1142)									int _hx_tmp4 = _hx_int64_high(this4);
HXDLIN(1142)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_int64_low(this4))));
            								}
HXDLIN(1142)								int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1142)								position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1142)								int color2 = ((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) ));
HXLINE(1143)								bool _hx_tmp5;
HXDLIN(1143)								bool _hx_tmp6;
HXDLIN(1143)								bool _hx_tmp7;
HXDLIN(1143)								if ((x >= 0)) {
HXLINE(1143)									_hx_tmp7 = (y >= 0);
            								}
            								else {
HXLINE(1143)									_hx_tmp7 = false;
            								}
HXDLIN(1143)								if (_hx_tmp7) {
HXLINE(1143)									_hx_tmp6 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1143)									_hx_tmp6 = false;
            								}
HXDLIN(1143)								if (_hx_tmp6) {
HXLINE(1143)									_hx_tmp5 = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1143)									_hx_tmp5 = false;
            								}
HXDLIN(1143)								if (!(_hx_tmp5)) {
HXLINE(1143)									::cpp::Int64 this5 = _hx_int64_make(x,y);
HXDLIN(1143)									int _hx_tmp8 = _hx_int64_high(this5);
HXDLIN(1143)									HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,image, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp8,_hx_int64_low(this5))));
            								}
            								else {
HXLINE(1143)									bool _hx_tmp9;
HXDLIN(1143)									bool _hx_tmp10;
HXDLIN(1143)									bool _hx_tmp11;
HXDLIN(1143)									bool _hx_tmp12;
HXDLIN(1143)									int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1143)									if (((( (int)(image->b->__get(pos4)) ) | (( (int)(image->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1143)										int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)										_hx_tmp12 = ((( (int)(image->b->__get(pos5)) ) | (( (int)(image->b->__get((pos5 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1143)										_hx_tmp12 = true;
            									}
HXDLIN(1143)									if (!(_hx_tmp12)) {
HXLINE(1143)										int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1143)										_hx_tmp11 = ((( (int)(image->b->__get(pos6)) ) | (( (int)(image->b->__get((pos6 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1143)										_hx_tmp11 = true;
            									}
HXDLIN(1143)									if (!(_hx_tmp11)) {
HXLINE(1143)										int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)										_hx_tmp10 = ((( (int)(image->b->__get(pos7)) ) | (( (int)(image->b->__get((pos7 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1143)										_hx_tmp10 = true;
            									}
HXDLIN(1143)									if (!(_hx_tmp10)) {
HXLINE(1143)										_hx_tmp9 = (image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1143)										_hx_tmp9 = true;
            									}
HXDLIN(1143)									if (_hx_tmp9) {
HXLINE(1143)										 ::vision::ds::ImageView v = null();
HXDLIN(1143)										bool _hx_tmp13;
HXDLIN(1143)										bool _hx_tmp14;
HXDLIN(1143)										bool _hx_tmp15;
HXDLIN(1143)										bool _hx_tmp16;
HXDLIN(1143)										bool _hx_tmp17;
HXDLIN(1143)										bool _hx_tmp18;
HXDLIN(1143)										int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1143)										if (((( (int)(image->b->__get(pos8)) ) | (( (int)(image->b->__get((pos8 + 1))) ) << 8)) == 0)) {
HXLINE(1143)											int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)											_hx_tmp18 = ((( (int)(image->b->__get(pos9)) ) | (( (int)(image->b->__get((pos9 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1143)											_hx_tmp18 = true;
            										}
HXDLIN(1143)										if (!(_hx_tmp18)) {
HXLINE(1143)											int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1143)											_hx_tmp17 = ((( (int)(image->b->__get(pos10)) ) | (( (int)(image->b->__get((pos10 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1143)											_hx_tmp17 = true;
            										}
HXDLIN(1143)										if (!(_hx_tmp17)) {
HXLINE(1143)											int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)											_hx_tmp16 = ((( (int)(image->b->__get(pos11)) ) | (( (int)(image->b->__get((pos11 + 1))) ) << 8)) != 0);
            										}
            										else {
HXLINE(1143)											_hx_tmp16 = true;
            										}
HXDLIN(1143)										if (!(_hx_tmp16)) {
HXLINE(1143)											_hx_tmp15 = (image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            										}
            										else {
HXLINE(1143)											_hx_tmp15 = true;
            										}
HXDLIN(1143)										if (!(_hx_tmp15)) {
HXLINE(1143)											_hx_tmp14 = ::hx::IsNull( v );
            										}
            										else {
HXLINE(1143)											_hx_tmp14 = false;
            										}
HXDLIN(1143)										if (_hx_tmp14) {
HXLINE(1143)											bool _hx_tmp19;
HXDLIN(1143)											bool _hx_tmp20;
HXDLIN(1143)											if ((x >= 0)) {
HXLINE(1143)												_hx_tmp20 = (y >= 0);
            											}
            											else {
HXLINE(1143)												_hx_tmp20 = false;
            											}
HXDLIN(1143)											if (_hx_tmp20) {
HXLINE(1143)												_hx_tmp19 = (x < (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)));
            											}
            											else {
HXLINE(1143)												_hx_tmp19 = false;
            											}
HXDLIN(1143)											if (_hx_tmp19) {
HXLINE(1143)												_hx_tmp13 = (y < ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8)) * 4)) ))));
            											}
            											else {
HXLINE(1143)												_hx_tmp13 = false;
            											}
            										}
            										else {
HXLINE(1143)											bool has = false;
HXDLIN(1143)											 ::vision::ds::ImageView view;
HXDLIN(1143)											if (::hx::IsNotNull( v )) {
HXLINE(1143)												view = v;
            											}
            											else {
HXLINE(1143)												int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1143)												int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)												int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1143)												int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1143)												view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(image->b->__get(pos12)) ) | (( (int)(image->b->__get((pos12 + 1))) ) << 8)),(( (int)(image->b->__get(pos13)) ) | (( (int)(image->b->__get((pos13 + 1))) ) << 8)),(( (int)(image->b->__get(pos14)) ) | (( (int)(image->b->__get((pos14 + 1))) ) << 8)),(( (int)(image->b->__get(pos15)) ) | (( (int)(image->b->__get((pos15 + 1))) ) << 8)),image->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            											}
HXDLIN(1143)											switch((int)(view->shape)){
            												case (int)0: {
HXLINE(1143)													bool has1;
HXDLIN(1143)													bool has2;
HXDLIN(1143)													if ((x < (view->x + view->width))) {
HXLINE(1143)														has2 = (y < (view->y + view->height));
            													}
            													else {
HXLINE(1143)														has2 = false;
            													}
HXDLIN(1143)													if (has2) {
HXLINE(1143)														has1 = (x >= view->x);
            													}
            													else {
HXLINE(1143)														has1 = false;
            													}
HXDLIN(1143)													if (has1) {
HXLINE(1143)														has = (y >= view->y);
            													}
            													else {
HXLINE(1143)														has = false;
            													}
            												}
            												break;
            												case (int)1: {
HXLINE(1143)													bool has3;
HXDLIN(1143)													bool has4;
HXDLIN(1143)													bool has5;
HXDLIN(1143)													if ((x < (view->x + view->width))) {
HXLINE(1143)														has5 = (y < (view->y + view->height));
            													}
            													else {
HXLINE(1143)														has5 = false;
            													}
HXDLIN(1143)													if (has5) {
HXLINE(1143)														has4 = (x >= view->x);
            													}
            													else {
HXLINE(1143)														has4 = false;
            													}
HXDLIN(1143)													if (has4) {
HXLINE(1143)														has3 = (y >= view->y);
            													}
            													else {
HXLINE(1143)														has3 = false;
            													}
HXLINE(1400)													has = !(has3);
            												}
            												break;
            												case (int)2: case (int)3: {
HXLINE(1143)													if ((view->width > view->height)) {
HXLINE(1143)														Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1143)														Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1143)														Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1143)														Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1143)														Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1143)														Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1143)														Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1143)														::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN(1143)														Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1143)														Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1143)														Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1143)														Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1143)														Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)														has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1143)														if ((view->shape == 3)) {
HXLINE(1416)															has = !(has);
            														}
            													}
            													else {
HXLINE(1143)														if ((view->height > view->width)) {
HXLINE(1143)															Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1143)															Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1143)															Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1143)															Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1143)															Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1143)															Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1143)															Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1143)															::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN(1143)															Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1143)															Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1143)															Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1143)															Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1143)															Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)															has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1143)															if ((view->shape == 3)) {
HXLINE(1425)																has = !(has);
            															}
            														}
            														else {
HXLINE(1143)															Float point1_x = ( (Float)(x) );
HXDLIN(1143)															Float point1_y = ( (Float)(y) );
HXDLIN(1143)															Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1143)															Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1143)															Float x6 = (point2_x - point1_x);
HXDLIN(1143)															Float y6 = (point2_y - point1_y);
HXLINE(1428)															has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1143)															if ((view->shape == 3)) {
HXLINE(1429)																has = !(has);
            															}
            														}
            													}
            												}
            												break;
            												case (int)4: {
HXLINE(1401)													has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            												}
            												break;
            												case (int)5: {
HXLINE(1402)													has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            												}
            												break;
            											}
HXLINE(1143)											_hx_tmp13 = has;
            										}
HXDLIN(1143)										if (_hx_tmp13) {
HXLINE(1143)											int position2 = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1143)											position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1143)											image->b[position2] = ( (unsigned char)(((color2 >> 24) & 255)) );
HXDLIN(1143)											image->b[(position2 + 1)] = ( (unsigned char)(((color2 >> 16) & 255)) );
HXDLIN(1143)											image->b[(position2 + 2)] = ( (unsigned char)(((color2 >> 8) & 255)) );
HXDLIN(1143)											image->b[(position2 + 3)] = ( (unsigned char)((color2 & 255)) );
            										}
            									}
            									else {
HXLINE(1143)										int position3 = (((y * (( (int)(image->b->__get(0)) ) | (( (int)(image->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1143)										position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1143)										image->b[position3] = ( (unsigned char)(((color2 >> 24) & 255)) );
HXDLIN(1143)										image->b[(position3 + 1)] = ( (unsigned char)(((color2 >> 16) & 255)) );
HXDLIN(1143)										image->b[(position3 + 2)] = ( (unsigned char)(((color2 >> 8) & 255)) );
HXDLIN(1143)										image->b[(position3 + 3)] = ( (unsigned char)((color2 & 255)) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1145)			this1 = image;
HXLINE(1137)			goto _hx_goto_230;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(1133)			this1 = ::vision::algorithms::BilinearInterpolation_obj::interpolate(this1,newWidth,newHeight);
HXDLIN(1133)			goto _hx_goto_230;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(1135)			HX_STACK_DO_THROW( ::vision::exceptions::Unimplemented_obj::__alloc( HX_CTX ,HX_("Bicubic Interpolation",27,6a,59,a9)));
HXDLIN(1135)			goto _hx_goto_230;
            		}
            		_hx_goto_230:;
HXLINE(1149)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,resize,return )

 ::haxe::io::Bytes Image_Impl__obj::rotate( ::haxe::io::Bytes this1,Float angle, ::Dynamic __o_degrees,::hx::Null< bool >  __o_expandImageBounds){
            		 ::Dynamic degrees = __o_degrees;
            		if (::hx::IsNull(__o_degrees)) degrees = true;
            		bool expandImageBounds = __o_expandImageBounds.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1160_rotate)
HXLINE(1161)		Float center_x = (( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) / ( (Float)(2) ));
HXDLIN(1161)		Float center_y = (( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) / ( (Float)(2) ));
HXLINE(1162)		Float radians;
HXDLIN(1162)		if (( (bool)(degrees) )) {
HXLINE(1162)			radians = ((angle * ::Math_obj::PI) / ( (Float)(180) ));
            		}
            		else {
HXLINE(1162)			radians = angle;
            		}
HXLINE(1165)		Float sinTheta = ::Math_obj::sin(angle);
HXLINE(1166)		Float cosTheta = ::Math_obj::cos(angle);
HXLINE(1167)		int newWidth;
HXDLIN(1167)		if (expandImageBounds) {
HXLINE(1167)			newWidth = ::Math_obj::ceil((::Math_obj::abs((( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) * cosTheta)) + ::Math_obj::abs((( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) * sinTheta))));
            		}
            		else {
HXLINE(1167)			newWidth = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
            		}
HXLINE(1168)		int newHeight;
HXDLIN(1168)		if (expandImageBounds) {
HXLINE(1168)			newHeight = ::Math_obj::ceil((::Math_obj::abs((( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) * sinTheta)) + ::Math_obj::abs((( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) * cosTheta))));
            		}
            		else {
HXLINE(1168)			newHeight = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
            		}
HXLINE(1171)		int color = 0;
HXDLIN(1171)		int length = (((newWidth * newHeight) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1171)		 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(1171)		this2->fill(0,length,0);
HXDLIN(1171)		 ::haxe::io::Bytes this3 = this2;
HXDLIN(1171)		{
HXLINE(1171)			this3->b[0] = ( (unsigned char)(newWidth) );
HXDLIN(1171)			this3->b[1] = ( (unsigned char)((newWidth >> 8)) );
            		}
HXDLIN(1171)		{
HXLINE(1171)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1171)			this3->b[pos] = ( (unsigned char)(0) );
HXDLIN(1171)			this3->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(1171)		{
HXLINE(1171)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1171)			this3->b[pos1] = ( (unsigned char)(0) );
HXDLIN(1171)			this3->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(1171)		{
HXLINE(1171)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1171)			this3->b[pos2] = ( (unsigned char)(0) );
HXDLIN(1171)			this3->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(1171)		{
HXLINE(1171)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1171)			this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(1171)			this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(1171)		this3->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXDLIN(1171)		int i = ::vision::ds::_Image::Image_Impl__obj::OFFSET;
HXDLIN(1171)		while((i < this3->length)){
HXLINE(1171)			this3->b[i] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1171)			this3->b[(i + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1171)			this3->b[(i + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1171)			this3->b[(i + 3)] = ( (unsigned char)((color & 255)) );
HXDLIN(1171)			i = (i + 4);
            		}
HXDLIN(1171)		 ::haxe::io::Bytes rotatedImage = this3;
HXLINE(1174)		Float centerX = (( (Float)(newWidth) ) / ( (Float)(2) ));
HXLINE(1175)		Float centerY = (( (Float)(newHeight) ) / ( (Float)(2) ));
HXLINE(1178)		Float originalCenterX = (( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) / ( (Float)(2) ));
HXLINE(1179)		Float originalCenterY = (( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) / ( (Float)(2) ));
HXLINE(1182)		{
HXLINE(1182)			int _g = 0;
HXDLIN(1182)			int _g1 = (( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8));
HXDLIN(1182)			while((_g < _g1)){
HXLINE(1182)				_g = (_g + 1);
HXDLIN(1182)				int x = (_g - 1);
HXLINE(1183)				{
HXLINE(1183)					int _g2 = 0;
HXDLIN(1183)					int _g3 = ::Math_obj::ceil((( (Float)((rotatedImage->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1183)					while((_g2 < _g3)){
HXLINE(1183)						_g2 = (_g2 + 1);
HXDLIN(1183)						int y = (_g2 - 1);
HXLINE(1185)						Float rotatedX = (((cosTheta * (( (Float)(x) ) - centerX)) + (sinTheta * (( (Float)(y) ) - centerY))) + originalCenterX);
HXLINE(1186)						Float rotatedY = (((-(sinTheta) * (( (Float)(x) ) - centerX)) + (cosTheta * (( (Float)(y) ) - centerY))) + originalCenterY);
HXLINE(1189)						bool _hx_tmp;
HXDLIN(1189)						bool _hx_tmp1;
HXDLIN(1189)						bool _hx_tmp2;
HXDLIN(1189)						if ((rotatedX >= 0)) {
HXLINE(1189)							_hx_tmp2 = (rotatedX < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            						}
            						else {
HXLINE(1189)							_hx_tmp2 = false;
            						}
HXDLIN(1189)						if (_hx_tmp2) {
HXLINE(1189)							_hx_tmp1 = (rotatedY >= 0);
            						}
            						else {
HXLINE(1189)							_hx_tmp1 = false;
            						}
HXDLIN(1189)						if (_hx_tmp1) {
HXLINE(1189)							_hx_tmp = (rotatedY < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            						}
            						else {
HXLINE(1189)							_hx_tmp = false;
            						}
HXDLIN(1189)						if (_hx_tmp) {
HXLINE(1191)							Float x1 = rotatedX;
HXDLIN(1191)							Float y1 = rotatedY;
HXDLIN(1191)							bool _hx_tmp3;
HXDLIN(1191)							Float x2 = ( (Float)(::Math_obj::ceil(x1)) );
HXDLIN(1191)							Float y2 = ( (Float)(::Math_obj::ceil(y1)) );
HXDLIN(1191)							bool _hx_tmp4;
HXDLIN(1191)							bool _hx_tmp5;
HXDLIN(1191)							bool _hx_tmp6;
HXDLIN(1191)							if ((x2 >= 0)) {
HXLINE(1191)								_hx_tmp6 = (y2 >= 0);
            							}
            							else {
HXLINE(1191)								_hx_tmp6 = false;
            							}
HXDLIN(1191)							if (_hx_tmp6) {
HXLINE(1191)								_hx_tmp5 = (x2 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								_hx_tmp5 = false;
            							}
HXDLIN(1191)							if (_hx_tmp5) {
HXLINE(1191)								_hx_tmp4 = (y2 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								_hx_tmp4 = false;
            							}
HXDLIN(1191)							if (_hx_tmp4) {
HXLINE(1191)								Float x3 = ( (Float)(::Math_obj::floor(x1)) );
HXDLIN(1191)								Float y3 = ( (Float)(::Math_obj::floor(y1)) );
HXDLIN(1191)								bool _hx_tmp7;
HXDLIN(1191)								bool _hx_tmp8;
HXDLIN(1191)								bool _hx_tmp9;
HXDLIN(1191)								if ((x3 >= 0)) {
HXLINE(1191)									_hx_tmp9 = (y3 >= 0);
            								}
            								else {
HXLINE(1191)									_hx_tmp9 = false;
            								}
HXDLIN(1191)								if (_hx_tmp9) {
HXLINE(1191)									_hx_tmp8 = (x3 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            								}
            								else {
HXLINE(1191)									_hx_tmp8 = false;
            								}
HXDLIN(1191)								if (_hx_tmp8) {
HXLINE(1191)									_hx_tmp7 = (y3 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            								}
            								else {
HXLINE(1191)									_hx_tmp7 = false;
            								}
HXDLIN(1191)								_hx_tmp3 = !(_hx_tmp7);
            							}
            							else {
HXLINE(1191)								_hx_tmp3 = true;
            							}
HXDLIN(1191)							if (_hx_tmp3) {
HXLINE( 247)								x1 = ::vision::tools::MathTools_obj::boundFloat(x1,( (Float)(0) ),( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1)) ));
HXLINE( 248)								y1 = ::vision::tools::MathTools_obj::boundFloat(y1,( (Float)(0) ),( (Float)((::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1)) ));
            							}
HXLINE(1191)							Float yFraction = (y1 - ( (Float)(::Std_obj::_hx_int(y1)) ));
HXDLIN(1191)							Float xFraction = (x1 - ( (Float)(::Std_obj::_hx_int(x1)) ));
HXDLIN(1191)							Float red = (( (Float)(1) ) - yFraction);
HXDLIN(1191)							int x4 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y4 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							bool red1;
HXDLIN(1191)							bool red2;
HXDLIN(1191)							bool red3;
HXDLIN(1191)							if ((x4 >= 0)) {
HXLINE(1191)								red3 = (y4 >= 0);
            							}
            							else {
HXLINE(1191)								red3 = false;
            							}
HXDLIN(1191)							if (red3) {
HXLINE(1191)								red2 = (x4 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								red2 = false;
            							}
HXDLIN(1191)							if (red2) {
HXLINE(1191)								red1 = (y4 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								red1 = false;
            							}
HXDLIN(1191)							if (!(red1)) {
HXLINE(1191)								::cpp::Int64 this4 = _hx_int64_make(x4,y4);
HXDLIN(1191)								int red4 = _hx_int64_high(this4);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red4,_hx_int64_low(this4))));
            							}
HXDLIN(1191)							int position = (((y4 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x4) * 4);
HXDLIN(1191)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float red5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )) >> 16) & 255)) ));
HXDLIN(1191)							int x5 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y5 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							int ma = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values = ::Array_obj< int >::__new(2)->init(0,x5)->init(1,0);
HXDLIN(1191)							int max = values->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g4 = 0;
HXDLIN(1191)								int _g5 = values->length;
HXDLIN(1191)								while((_g4 < _g5)){
HXLINE(1191)									_g4 = (_g4 + 1);
HXDLIN(1191)									int i1 = (_g4 - 1);
HXDLIN(1191)									if ((values->__get(i1) > max)) {
HXLINE( 688)										max = values->__get(i1);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN(1191)							int min = values1->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g6 = 0;
HXDLIN(1191)								int _g7 = values1->length;
HXDLIN(1191)								while((_g6 < _g7)){
HXLINE(1191)									_g6 = (_g6 + 1);
HXDLIN(1191)									int i2 = (_g6 - 1);
HXDLIN(1191)									if ((values1->__get(i2) < min)) {
HXLINE( 652)										min = values1->__get(i2);
            									}
            								}
            							}
HXLINE(1191)							int x6 = min;
HXDLIN(1191)							int ma1 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values2 = ::Array_obj< int >::__new(2)->init(0,y5)->init(1,0);
HXDLIN(1191)							int max1 = values2->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g8 = 0;
HXDLIN(1191)								int _g9 = values2->length;
HXDLIN(1191)								while((_g8 < _g9)){
HXLINE(1191)									_g8 = (_g8 + 1);
HXDLIN(1191)									int i3 = (_g8 - 1);
HXDLIN(1191)									if ((values2->__get(i3) > max1)) {
HXLINE( 688)										max1 = values2->__get(i3);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values3 = ::Array_obj< int >::__new(2)->init(0,max1)->init(1,ma1);
HXDLIN(1191)							int min1 = values3->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g10 = 0;
HXDLIN(1191)								int _g11 = values3->length;
HXDLIN(1191)								while((_g10 < _g11)){
HXLINE(1191)									_g10 = (_g10 + 1);
HXDLIN(1191)									int i4 = (_g10 - 1);
HXDLIN(1191)									if ((values3->__get(i4) < min1)) {
HXLINE( 652)										min1 = values3->__get(i4);
            									}
            								}
            							}
HXLINE(1191)							int y6 = min1;
HXDLIN(1191)							bool red6;
HXDLIN(1191)							bool red7;
HXDLIN(1191)							bool red8;
HXDLIN(1191)							if ((x6 >= 0)) {
HXLINE(1191)								red8 = (y6 >= 0);
            							}
            							else {
HXLINE(1191)								red8 = false;
            							}
HXDLIN(1191)							if (red8) {
HXLINE(1191)								red7 = (x6 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								red7 = false;
            							}
HXDLIN(1191)							if (red7) {
HXLINE(1191)								red6 = (y6 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								red6 = false;
            							}
HXDLIN(1191)							if (!(red6)) {
HXLINE(1191)								::cpp::Int64 this5 = _hx_int64_make(x6,y6);
HXDLIN(1191)								int red9 = _hx_int64_high(this5);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red9,_hx_int64_low(this5))));
            							}
HXDLIN(1191)							int position1 = (((y6 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x6) * 4);
HXDLIN(1191)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float red10 = (red * (red5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )) >> 16) & 255)) ))));
HXDLIN(1191)							Float red11 = (( (Float)(1) ) - xFraction);
HXDLIN(1191)							int x7 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y7 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma2 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values4 = ::Array_obj< int >::__new(2)->init(0,x7)->init(1,0);
HXDLIN(1191)							int max2 = values4->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g12 = 0;
HXDLIN(1191)								int _g13 = values4->length;
HXDLIN(1191)								while((_g12 < _g13)){
HXLINE(1191)									_g12 = (_g12 + 1);
HXDLIN(1191)									int i5 = (_g12 - 1);
HXDLIN(1191)									if ((values4->__get(i5) > max2)) {
HXLINE( 688)										max2 = values4->__get(i5);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values5 = ::Array_obj< int >::__new(2)->init(0,max2)->init(1,ma2);
HXDLIN(1191)							int min2 = values5->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g14 = 0;
HXDLIN(1191)								int _g15 = values5->length;
HXDLIN(1191)								while((_g14 < _g15)){
HXLINE(1191)									_g14 = (_g14 + 1);
HXDLIN(1191)									int i6 = (_g14 - 1);
HXDLIN(1191)									if ((values5->__get(i6) < min2)) {
HXLINE( 652)										min2 = values5->__get(i6);
            									}
            								}
            							}
HXLINE(1191)							int x8 = min2;
HXDLIN(1191)							int ma3 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values6 = ::Array_obj< int >::__new(2)->init(0,y7)->init(1,0);
HXDLIN(1191)							int max3 = values6->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g16 = 0;
HXDLIN(1191)								int _g17 = values6->length;
HXDLIN(1191)								while((_g16 < _g17)){
HXLINE(1191)									_g16 = (_g16 + 1);
HXDLIN(1191)									int i7 = (_g16 - 1);
HXDLIN(1191)									if ((values6->__get(i7) > max3)) {
HXLINE( 688)										max3 = values6->__get(i7);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values7 = ::Array_obj< int >::__new(2)->init(0,max3)->init(1,ma3);
HXDLIN(1191)							int min3 = values7->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g18 = 0;
HXDLIN(1191)								int _g19 = values7->length;
HXDLIN(1191)								while((_g18 < _g19)){
HXLINE(1191)									_g18 = (_g18 + 1);
HXDLIN(1191)									int i8 = (_g18 - 1);
HXDLIN(1191)									if ((values7->__get(i8) < min3)) {
HXLINE( 652)										min3 = values7->__get(i8);
            									}
            								}
            							}
HXLINE(1191)							int y8 = min3;
HXDLIN(1191)							bool red12;
HXDLIN(1191)							bool red13;
HXDLIN(1191)							bool red14;
HXDLIN(1191)							if ((x8 >= 0)) {
HXLINE(1191)								red14 = (y8 >= 0);
            							}
            							else {
HXLINE(1191)								red14 = false;
            							}
HXDLIN(1191)							if (red14) {
HXLINE(1191)								red13 = (x8 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								red13 = false;
            							}
HXDLIN(1191)							if (red13) {
HXLINE(1191)								red12 = (y8 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								red12 = false;
            							}
HXDLIN(1191)							if (!(red12)) {
HXLINE(1191)								::cpp::Int64 this6 = _hx_int64_make(x8,y8);
HXDLIN(1191)								int red15 = _hx_int64_high(this6);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red15,_hx_int64_low(this6))));
            							}
HXDLIN(1191)							int position2 = (((y8 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x8) * 4);
HXDLIN(1191)							position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float red16 = (red11 * ( (Float)(((((((( (int)(this1->b->__get(position2)) ) << 24) | (( (int)(this1->b->__get((position2 + 1))) ) << 16)) | (( (int)(this1->b->__get((position2 + 2))) ) << 8)) | ( (int)(this1->b->__get((position2 + 3))) )) >> 16) & 255)) ));
HXDLIN(1191)							int x9 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y9 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma4 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values8 = ::Array_obj< int >::__new(2)->init(0,x9)->init(1,0);
HXDLIN(1191)							int max4 = values8->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g20 = 0;
HXDLIN(1191)								int _g21 = values8->length;
HXDLIN(1191)								while((_g20 < _g21)){
HXLINE(1191)									_g20 = (_g20 + 1);
HXDLIN(1191)									int i9 = (_g20 - 1);
HXDLIN(1191)									if ((values8->__get(i9) > max4)) {
HXLINE( 688)										max4 = values8->__get(i9);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values9 = ::Array_obj< int >::__new(2)->init(0,max4)->init(1,ma4);
HXDLIN(1191)							int min4 = values9->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g22 = 0;
HXDLIN(1191)								int _g23 = values9->length;
HXDLIN(1191)								while((_g22 < _g23)){
HXLINE(1191)									_g22 = (_g22 + 1);
HXDLIN(1191)									int i10 = (_g22 - 1);
HXDLIN(1191)									if ((values9->__get(i10) < min4)) {
HXLINE( 652)										min4 = values9->__get(i10);
            									}
            								}
            							}
HXLINE(1191)							int x10 = min4;
HXDLIN(1191)							int ma5 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values10 = ::Array_obj< int >::__new(2)->init(0,y9)->init(1,0);
HXDLIN(1191)							int max5 = values10->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g24 = 0;
HXDLIN(1191)								int _g25 = values10->length;
HXDLIN(1191)								while((_g24 < _g25)){
HXLINE(1191)									_g24 = (_g24 + 1);
HXDLIN(1191)									int i11 = (_g24 - 1);
HXDLIN(1191)									if ((values10->__get(i11) > max5)) {
HXLINE( 688)										max5 = values10->__get(i11);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values11 = ::Array_obj< int >::__new(2)->init(0,max5)->init(1,ma5);
HXDLIN(1191)							int min5 = values11->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g26 = 0;
HXDLIN(1191)								int _g27 = values11->length;
HXDLIN(1191)								while((_g26 < _g27)){
HXLINE(1191)									_g26 = (_g26 + 1);
HXDLIN(1191)									int i12 = (_g26 - 1);
HXDLIN(1191)									if ((values11->__get(i12) < min5)) {
HXLINE( 652)										min5 = values11->__get(i12);
            									}
            								}
            							}
HXLINE(1191)							int y10 = min5;
HXDLIN(1191)							bool red17;
HXDLIN(1191)							bool red18;
HXDLIN(1191)							bool red19;
HXDLIN(1191)							if ((x10 >= 0)) {
HXLINE(1191)								red19 = (y10 >= 0);
            							}
            							else {
HXLINE(1191)								red19 = false;
            							}
HXDLIN(1191)							if (red19) {
HXLINE(1191)								red18 = (x10 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								red18 = false;
            							}
HXDLIN(1191)							if (red18) {
HXLINE(1191)								red17 = (y10 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								red17 = false;
            							}
HXDLIN(1191)							if (!(red17)) {
HXLINE(1191)								::cpp::Int64 this7 = _hx_int64_make(x10,y10);
HXDLIN(1191)								int red20 = _hx_int64_high(this7);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,red20,_hx_int64_low(this7))));
            							}
HXDLIN(1191)							int position3 = (((y10 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x10) * 4);
HXDLIN(1191)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							int red21 = ::Std_obj::_hx_int((red10 + (yFraction * (red16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position3)) ) << 24) | (( (int)(this1->b->__get((position3 + 1))) ) << 16)) | (( (int)(this1->b->__get((position3 + 2))) ) << 8)) | ( (int)(this1->b->__get((position3 + 3))) )) >> 16) & 255)) ))))));
HXDLIN(1191)							Float green = (( (Float)(1) ) - yFraction);
HXDLIN(1191)							int x11 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y11 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							bool green1;
HXDLIN(1191)							bool green2;
HXDLIN(1191)							bool green3;
HXDLIN(1191)							if ((x11 >= 0)) {
HXLINE(1191)								green3 = (y11 >= 0);
            							}
            							else {
HXLINE(1191)								green3 = false;
            							}
HXDLIN(1191)							if (green3) {
HXLINE(1191)								green2 = (x11 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								green2 = false;
            							}
HXDLIN(1191)							if (green2) {
HXLINE(1191)								green1 = (y11 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								green1 = false;
            							}
HXDLIN(1191)							if (!(green1)) {
HXLINE(1191)								::cpp::Int64 this8 = _hx_int64_make(x11,y11);
HXDLIN(1191)								int green4 = _hx_int64_high(this8);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green4,_hx_int64_low(this8))));
            							}
HXDLIN(1191)							int position4 = (((y11 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x11) * 4);
HXDLIN(1191)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float green5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position4)) ) << 24) | (( (int)(this1->b->__get((position4 + 1))) ) << 16)) | (( (int)(this1->b->__get((position4 + 2))) ) << 8)) | ( (int)(this1->b->__get((position4 + 3))) )) >> 8) & 255)) ));
HXDLIN(1191)							int x12 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y12 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							int ma6 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values12 = ::Array_obj< int >::__new(2)->init(0,x12)->init(1,0);
HXDLIN(1191)							int max6 = values12->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g28 = 0;
HXDLIN(1191)								int _g29 = values12->length;
HXDLIN(1191)								while((_g28 < _g29)){
HXLINE(1191)									_g28 = (_g28 + 1);
HXDLIN(1191)									int i13 = (_g28 - 1);
HXDLIN(1191)									if ((values12->__get(i13) > max6)) {
HXLINE( 688)										max6 = values12->__get(i13);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values13 = ::Array_obj< int >::__new(2)->init(0,max6)->init(1,ma6);
HXDLIN(1191)							int min6 = values13->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g30 = 0;
HXDLIN(1191)								int _g31 = values13->length;
HXDLIN(1191)								while((_g30 < _g31)){
HXLINE(1191)									_g30 = (_g30 + 1);
HXDLIN(1191)									int i14 = (_g30 - 1);
HXDLIN(1191)									if ((values13->__get(i14) < min6)) {
HXLINE( 652)										min6 = values13->__get(i14);
            									}
            								}
            							}
HXLINE(1191)							int x13 = min6;
HXDLIN(1191)							int ma7 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values14 = ::Array_obj< int >::__new(2)->init(0,y12)->init(1,0);
HXDLIN(1191)							int max7 = values14->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g32 = 0;
HXDLIN(1191)								int _g33 = values14->length;
HXDLIN(1191)								while((_g32 < _g33)){
HXLINE(1191)									_g32 = (_g32 + 1);
HXDLIN(1191)									int i15 = (_g32 - 1);
HXDLIN(1191)									if ((values14->__get(i15) > max7)) {
HXLINE( 688)										max7 = values14->__get(i15);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values15 = ::Array_obj< int >::__new(2)->init(0,max7)->init(1,ma7);
HXDLIN(1191)							int min7 = values15->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g34 = 0;
HXDLIN(1191)								int _g35 = values15->length;
HXDLIN(1191)								while((_g34 < _g35)){
HXLINE(1191)									_g34 = (_g34 + 1);
HXDLIN(1191)									int i16 = (_g34 - 1);
HXDLIN(1191)									if ((values15->__get(i16) < min7)) {
HXLINE( 652)										min7 = values15->__get(i16);
            									}
            								}
            							}
HXLINE(1191)							int y13 = min7;
HXDLIN(1191)							bool green6;
HXDLIN(1191)							bool green7;
HXDLIN(1191)							bool green8;
HXDLIN(1191)							if ((x13 >= 0)) {
HXLINE(1191)								green8 = (y13 >= 0);
            							}
            							else {
HXLINE(1191)								green8 = false;
            							}
HXDLIN(1191)							if (green8) {
HXLINE(1191)								green7 = (x13 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								green7 = false;
            							}
HXDLIN(1191)							if (green7) {
HXLINE(1191)								green6 = (y13 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								green6 = false;
            							}
HXDLIN(1191)							if (!(green6)) {
HXLINE(1191)								::cpp::Int64 this9 = _hx_int64_make(x13,y13);
HXDLIN(1191)								int green9 = _hx_int64_high(this9);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green9,_hx_int64_low(this9))));
            							}
HXDLIN(1191)							int position5 = (((y13 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x13) * 4);
HXDLIN(1191)							position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float green10 = (green * (green5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position5)) ) << 24) | (( (int)(this1->b->__get((position5 + 1))) ) << 16)) | (( (int)(this1->b->__get((position5 + 2))) ) << 8)) | ( (int)(this1->b->__get((position5 + 3))) )) >> 8) & 255)) ))));
HXDLIN(1191)							Float green11 = (( (Float)(1) ) - xFraction);
HXDLIN(1191)							int x14 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y14 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma8 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values16 = ::Array_obj< int >::__new(2)->init(0,x14)->init(1,0);
HXDLIN(1191)							int max8 = values16->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g36 = 0;
HXDLIN(1191)								int _g37 = values16->length;
HXDLIN(1191)								while((_g36 < _g37)){
HXLINE(1191)									_g36 = (_g36 + 1);
HXDLIN(1191)									int i17 = (_g36 - 1);
HXDLIN(1191)									if ((values16->__get(i17) > max8)) {
HXLINE( 688)										max8 = values16->__get(i17);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values17 = ::Array_obj< int >::__new(2)->init(0,max8)->init(1,ma8);
HXDLIN(1191)							int min8 = values17->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g38 = 0;
HXDLIN(1191)								int _g39 = values17->length;
HXDLIN(1191)								while((_g38 < _g39)){
HXLINE(1191)									_g38 = (_g38 + 1);
HXDLIN(1191)									int i18 = (_g38 - 1);
HXDLIN(1191)									if ((values17->__get(i18) < min8)) {
HXLINE( 652)										min8 = values17->__get(i18);
            									}
            								}
            							}
HXLINE(1191)							int x15 = min8;
HXDLIN(1191)							int ma9 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values18 = ::Array_obj< int >::__new(2)->init(0,y14)->init(1,0);
HXDLIN(1191)							int max9 = values18->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g40 = 0;
HXDLIN(1191)								int _g41 = values18->length;
HXDLIN(1191)								while((_g40 < _g41)){
HXLINE(1191)									_g40 = (_g40 + 1);
HXDLIN(1191)									int i19 = (_g40 - 1);
HXDLIN(1191)									if ((values18->__get(i19) > max9)) {
HXLINE( 688)										max9 = values18->__get(i19);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values19 = ::Array_obj< int >::__new(2)->init(0,max9)->init(1,ma9);
HXDLIN(1191)							int min9 = values19->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g42 = 0;
HXDLIN(1191)								int _g43 = values19->length;
HXDLIN(1191)								while((_g42 < _g43)){
HXLINE(1191)									_g42 = (_g42 + 1);
HXDLIN(1191)									int i20 = (_g42 - 1);
HXDLIN(1191)									if ((values19->__get(i20) < min9)) {
HXLINE( 652)										min9 = values19->__get(i20);
            									}
            								}
            							}
HXLINE(1191)							int y15 = min9;
HXDLIN(1191)							bool green12;
HXDLIN(1191)							bool green13;
HXDLIN(1191)							bool green14;
HXDLIN(1191)							if ((x15 >= 0)) {
HXLINE(1191)								green14 = (y15 >= 0);
            							}
            							else {
HXLINE(1191)								green14 = false;
            							}
HXDLIN(1191)							if (green14) {
HXLINE(1191)								green13 = (x15 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								green13 = false;
            							}
HXDLIN(1191)							if (green13) {
HXLINE(1191)								green12 = (y15 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								green12 = false;
            							}
HXDLIN(1191)							if (!(green12)) {
HXLINE(1191)								::cpp::Int64 this10 = _hx_int64_make(x15,y15);
HXDLIN(1191)								int green15 = _hx_int64_high(this10);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green15,_hx_int64_low(this10))));
            							}
HXDLIN(1191)							int position6 = (((y15 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x15) * 4);
HXDLIN(1191)							position6 = (position6 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float green16 = (green11 * ( (Float)(((((((( (int)(this1->b->__get(position6)) ) << 24) | (( (int)(this1->b->__get((position6 + 1))) ) << 16)) | (( (int)(this1->b->__get((position6 + 2))) ) << 8)) | ( (int)(this1->b->__get((position6 + 3))) )) >> 8) & 255)) ));
HXDLIN(1191)							int x16 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y16 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma10 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values20 = ::Array_obj< int >::__new(2)->init(0,x16)->init(1,0);
HXDLIN(1191)							int max10 = values20->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g44 = 0;
HXDLIN(1191)								int _g45 = values20->length;
HXDLIN(1191)								while((_g44 < _g45)){
HXLINE(1191)									_g44 = (_g44 + 1);
HXDLIN(1191)									int i21 = (_g44 - 1);
HXDLIN(1191)									if ((values20->__get(i21) > max10)) {
HXLINE( 688)										max10 = values20->__get(i21);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values21 = ::Array_obj< int >::__new(2)->init(0,max10)->init(1,ma10);
HXDLIN(1191)							int min10 = values21->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g46 = 0;
HXDLIN(1191)								int _g47 = values21->length;
HXDLIN(1191)								while((_g46 < _g47)){
HXLINE(1191)									_g46 = (_g46 + 1);
HXDLIN(1191)									int i22 = (_g46 - 1);
HXDLIN(1191)									if ((values21->__get(i22) < min10)) {
HXLINE( 652)										min10 = values21->__get(i22);
            									}
            								}
            							}
HXLINE(1191)							int x17 = min10;
HXDLIN(1191)							int ma11 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values22 = ::Array_obj< int >::__new(2)->init(0,y16)->init(1,0);
HXDLIN(1191)							int max11 = values22->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g48 = 0;
HXDLIN(1191)								int _g49 = values22->length;
HXDLIN(1191)								while((_g48 < _g49)){
HXLINE(1191)									_g48 = (_g48 + 1);
HXDLIN(1191)									int i23 = (_g48 - 1);
HXDLIN(1191)									if ((values22->__get(i23) > max11)) {
HXLINE( 688)										max11 = values22->__get(i23);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values23 = ::Array_obj< int >::__new(2)->init(0,max11)->init(1,ma11);
HXDLIN(1191)							int min11 = values23->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g50 = 0;
HXDLIN(1191)								int _g51 = values23->length;
HXDLIN(1191)								while((_g50 < _g51)){
HXLINE(1191)									_g50 = (_g50 + 1);
HXDLIN(1191)									int i24 = (_g50 - 1);
HXDLIN(1191)									if ((values23->__get(i24) < min11)) {
HXLINE( 652)										min11 = values23->__get(i24);
            									}
            								}
            							}
HXLINE(1191)							int y17 = min11;
HXDLIN(1191)							bool green17;
HXDLIN(1191)							bool green18;
HXDLIN(1191)							bool green19;
HXDLIN(1191)							if ((x17 >= 0)) {
HXLINE(1191)								green19 = (y17 >= 0);
            							}
            							else {
HXLINE(1191)								green19 = false;
            							}
HXDLIN(1191)							if (green19) {
HXLINE(1191)								green18 = (x17 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								green18 = false;
            							}
HXDLIN(1191)							if (green18) {
HXLINE(1191)								green17 = (y17 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								green17 = false;
            							}
HXDLIN(1191)							if (!(green17)) {
HXLINE(1191)								::cpp::Int64 this11 = _hx_int64_make(x17,y17);
HXDLIN(1191)								int green20 = _hx_int64_high(this11);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,green20,_hx_int64_low(this11))));
            							}
HXDLIN(1191)							int position7 = (((y17 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x17) * 4);
HXDLIN(1191)							position7 = (position7 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							int green21 = ::Std_obj::_hx_int((green10 + (yFraction * (green16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position7)) ) << 24) | (( (int)(this1->b->__get((position7 + 1))) ) << 16)) | (( (int)(this1->b->__get((position7 + 2))) ) << 8)) | ( (int)(this1->b->__get((position7 + 3))) )) >> 8) & 255)) ))))));
HXDLIN(1191)							Float blue = (( (Float)(1) ) - yFraction);
HXDLIN(1191)							int x18 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y18 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							bool blue1;
HXDLIN(1191)							bool blue2;
HXDLIN(1191)							bool blue3;
HXDLIN(1191)							if ((x18 >= 0)) {
HXLINE(1191)								blue3 = (y18 >= 0);
            							}
            							else {
HXLINE(1191)								blue3 = false;
            							}
HXDLIN(1191)							if (blue3) {
HXLINE(1191)								blue2 = (x18 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								blue2 = false;
            							}
HXDLIN(1191)							if (blue2) {
HXLINE(1191)								blue1 = (y18 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								blue1 = false;
            							}
HXDLIN(1191)							if (!(blue1)) {
HXLINE(1191)								::cpp::Int64 this12 = _hx_int64_make(x18,y18);
HXDLIN(1191)								int blue4 = _hx_int64_high(this12);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue4,_hx_int64_low(this12))));
            							}
HXDLIN(1191)							int position8 = (((y18 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x18) * 4);
HXDLIN(1191)							position8 = (position8 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float blue5 = ((( (Float)(1) ) - xFraction) * ( (Float)((((((( (int)(this1->b->__get(position8)) ) << 24) | (( (int)(this1->b->__get((position8 + 1))) ) << 16)) | (( (int)(this1->b->__get((position8 + 2))) ) << 8)) | ( (int)(this1->b->__get((position8 + 3))) )) & 255)) ));
HXDLIN(1191)							int x19 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y19 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							int ma12 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values24 = ::Array_obj< int >::__new(2)->init(0,x19)->init(1,0);
HXDLIN(1191)							int max12 = values24->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g52 = 0;
HXDLIN(1191)								int _g53 = values24->length;
HXDLIN(1191)								while((_g52 < _g53)){
HXLINE(1191)									_g52 = (_g52 + 1);
HXDLIN(1191)									int i25 = (_g52 - 1);
HXDLIN(1191)									if ((values24->__get(i25) > max12)) {
HXLINE( 688)										max12 = values24->__get(i25);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values25 = ::Array_obj< int >::__new(2)->init(0,max12)->init(1,ma12);
HXDLIN(1191)							int min12 = values25->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g54 = 0;
HXDLIN(1191)								int _g55 = values25->length;
HXDLIN(1191)								while((_g54 < _g55)){
HXLINE(1191)									_g54 = (_g54 + 1);
HXDLIN(1191)									int i26 = (_g54 - 1);
HXDLIN(1191)									if ((values25->__get(i26) < min12)) {
HXLINE( 652)										min12 = values25->__get(i26);
            									}
            								}
            							}
HXLINE(1191)							int x20 = min12;
HXDLIN(1191)							int ma13 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values26 = ::Array_obj< int >::__new(2)->init(0,y19)->init(1,0);
HXDLIN(1191)							int max13 = values26->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g56 = 0;
HXDLIN(1191)								int _g57 = values26->length;
HXDLIN(1191)								while((_g56 < _g57)){
HXLINE(1191)									_g56 = (_g56 + 1);
HXDLIN(1191)									int i27 = (_g56 - 1);
HXDLIN(1191)									if ((values26->__get(i27) > max13)) {
HXLINE( 688)										max13 = values26->__get(i27);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values27 = ::Array_obj< int >::__new(2)->init(0,max13)->init(1,ma13);
HXDLIN(1191)							int min13 = values27->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g58 = 0;
HXDLIN(1191)								int _g59 = values27->length;
HXDLIN(1191)								while((_g58 < _g59)){
HXLINE(1191)									_g58 = (_g58 + 1);
HXDLIN(1191)									int i28 = (_g58 - 1);
HXDLIN(1191)									if ((values27->__get(i28) < min13)) {
HXLINE( 652)										min13 = values27->__get(i28);
            									}
            								}
            							}
HXLINE(1191)							int y20 = min13;
HXDLIN(1191)							bool blue6;
HXDLIN(1191)							bool blue7;
HXDLIN(1191)							bool blue8;
HXDLIN(1191)							if ((x20 >= 0)) {
HXLINE(1191)								blue8 = (y20 >= 0);
            							}
            							else {
HXLINE(1191)								blue8 = false;
            							}
HXDLIN(1191)							if (blue8) {
HXLINE(1191)								blue7 = (x20 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								blue7 = false;
            							}
HXDLIN(1191)							if (blue7) {
HXLINE(1191)								blue6 = (y20 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								blue6 = false;
            							}
HXDLIN(1191)							if (!(blue6)) {
HXLINE(1191)								::cpp::Int64 this13 = _hx_int64_make(x20,y20);
HXDLIN(1191)								int blue9 = _hx_int64_high(this13);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue9,_hx_int64_low(this13))));
            							}
HXDLIN(1191)							int position9 = (((y20 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x20) * 4);
HXDLIN(1191)							position9 = (position9 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float blue10 = (blue * (blue5 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position9)) ) << 24) | (( (int)(this1->b->__get((position9 + 1))) ) << 16)) | (( (int)(this1->b->__get((position9 + 2))) ) << 8)) | ( (int)(this1->b->__get((position9 + 3))) )) & 255)) ))));
HXDLIN(1191)							Float blue11 = (( (Float)(1) ) - xFraction);
HXDLIN(1191)							int x21 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y21 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma14 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values28 = ::Array_obj< int >::__new(2)->init(0,x21)->init(1,0);
HXDLIN(1191)							int max14 = values28->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g60 = 0;
HXDLIN(1191)								int _g61 = values28->length;
HXDLIN(1191)								while((_g60 < _g61)){
HXLINE(1191)									_g60 = (_g60 + 1);
HXDLIN(1191)									int i29 = (_g60 - 1);
HXDLIN(1191)									if ((values28->__get(i29) > max14)) {
HXLINE( 688)										max14 = values28->__get(i29);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values29 = ::Array_obj< int >::__new(2)->init(0,max14)->init(1,ma14);
HXDLIN(1191)							int min14 = values29->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g62 = 0;
HXDLIN(1191)								int _g63 = values29->length;
HXDLIN(1191)								while((_g62 < _g63)){
HXLINE(1191)									_g62 = (_g62 + 1);
HXDLIN(1191)									int i30 = (_g62 - 1);
HXDLIN(1191)									if ((values29->__get(i30) < min14)) {
HXLINE( 652)										min14 = values29->__get(i30);
            									}
            								}
            							}
HXLINE(1191)							int x22 = min14;
HXDLIN(1191)							int ma15 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values30 = ::Array_obj< int >::__new(2)->init(0,y21)->init(1,0);
HXDLIN(1191)							int max15 = values30->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g64 = 0;
HXDLIN(1191)								int _g65 = values30->length;
HXDLIN(1191)								while((_g64 < _g65)){
HXLINE(1191)									_g64 = (_g64 + 1);
HXDLIN(1191)									int i31 = (_g64 - 1);
HXDLIN(1191)									if ((values30->__get(i31) > max15)) {
HXLINE( 688)										max15 = values30->__get(i31);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values31 = ::Array_obj< int >::__new(2)->init(0,max15)->init(1,ma15);
HXDLIN(1191)							int min15 = values31->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g66 = 0;
HXDLIN(1191)								int _g67 = values31->length;
HXDLIN(1191)								while((_g66 < _g67)){
HXLINE(1191)									_g66 = (_g66 + 1);
HXDLIN(1191)									int i32 = (_g66 - 1);
HXDLIN(1191)									if ((values31->__get(i32) < min15)) {
HXLINE( 652)										min15 = values31->__get(i32);
            									}
            								}
            							}
HXLINE(1191)							int y22 = min15;
HXDLIN(1191)							bool blue12;
HXDLIN(1191)							bool blue13;
HXDLIN(1191)							bool blue14;
HXDLIN(1191)							if ((x22 >= 0)) {
HXLINE(1191)								blue14 = (y22 >= 0);
            							}
            							else {
HXLINE(1191)								blue14 = false;
            							}
HXDLIN(1191)							if (blue14) {
HXLINE(1191)								blue13 = (x22 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								blue13 = false;
            							}
HXDLIN(1191)							if (blue13) {
HXLINE(1191)								blue12 = (y22 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								blue12 = false;
            							}
HXDLIN(1191)							if (!(blue12)) {
HXLINE(1191)								::cpp::Int64 this14 = _hx_int64_make(x22,y22);
HXDLIN(1191)								int blue15 = _hx_int64_high(this14);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue15,_hx_int64_low(this14))));
            							}
HXDLIN(1191)							int position10 = (((y22 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x22) * 4);
HXDLIN(1191)							position10 = (position10 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float blue16 = (blue11 * ( (Float)((((((( (int)(this1->b->__get(position10)) ) << 24) | (( (int)(this1->b->__get((position10 + 1))) ) << 16)) | (( (int)(this1->b->__get((position10 + 2))) ) << 8)) | ( (int)(this1->b->__get((position10 + 3))) )) & 255)) ));
HXDLIN(1191)							int x23 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y23 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma16 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values32 = ::Array_obj< int >::__new(2)->init(0,x23)->init(1,0);
HXDLIN(1191)							int max16 = values32->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g68 = 0;
HXDLIN(1191)								int _g69 = values32->length;
HXDLIN(1191)								while((_g68 < _g69)){
HXLINE(1191)									_g68 = (_g68 + 1);
HXDLIN(1191)									int i33 = (_g68 - 1);
HXDLIN(1191)									if ((values32->__get(i33) > max16)) {
HXLINE( 688)										max16 = values32->__get(i33);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values33 = ::Array_obj< int >::__new(2)->init(0,max16)->init(1,ma16);
HXDLIN(1191)							int min16 = values33->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g70 = 0;
HXDLIN(1191)								int _g71 = values33->length;
HXDLIN(1191)								while((_g70 < _g71)){
HXLINE(1191)									_g70 = (_g70 + 1);
HXDLIN(1191)									int i34 = (_g70 - 1);
HXDLIN(1191)									if ((values33->__get(i34) < min16)) {
HXLINE( 652)										min16 = values33->__get(i34);
            									}
            								}
            							}
HXLINE(1191)							int x24 = min16;
HXDLIN(1191)							int ma17 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values34 = ::Array_obj< int >::__new(2)->init(0,y23)->init(1,0);
HXDLIN(1191)							int max17 = values34->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g72 = 0;
HXDLIN(1191)								int _g73 = values34->length;
HXDLIN(1191)								while((_g72 < _g73)){
HXLINE(1191)									_g72 = (_g72 + 1);
HXDLIN(1191)									int i35 = (_g72 - 1);
HXDLIN(1191)									if ((values34->__get(i35) > max17)) {
HXLINE( 688)										max17 = values34->__get(i35);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values35 = ::Array_obj< int >::__new(2)->init(0,max17)->init(1,ma17);
HXDLIN(1191)							int min17 = values35->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g74 = 0;
HXDLIN(1191)								int _g75 = values35->length;
HXDLIN(1191)								while((_g74 < _g75)){
HXLINE(1191)									_g74 = (_g74 + 1);
HXDLIN(1191)									int i36 = (_g74 - 1);
HXDLIN(1191)									if ((values35->__get(i36) < min17)) {
HXLINE( 652)										min17 = values35->__get(i36);
            									}
            								}
            							}
HXLINE(1191)							int y24 = min17;
HXDLIN(1191)							bool blue17;
HXDLIN(1191)							bool blue18;
HXDLIN(1191)							bool blue19;
HXDLIN(1191)							if ((x24 >= 0)) {
HXLINE(1191)								blue19 = (y24 >= 0);
            							}
            							else {
HXLINE(1191)								blue19 = false;
            							}
HXDLIN(1191)							if (blue19) {
HXLINE(1191)								blue18 = (x24 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								blue18 = false;
            							}
HXDLIN(1191)							if (blue18) {
HXLINE(1191)								blue17 = (y24 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								blue17 = false;
            							}
HXDLIN(1191)							if (!(blue17)) {
HXLINE(1191)								::cpp::Int64 this15 = _hx_int64_make(x24,y24);
HXDLIN(1191)								int blue20 = _hx_int64_high(this15);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,blue20,_hx_int64_low(this15))));
            							}
HXDLIN(1191)							int position11 = (((y24 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x24) * 4);
HXDLIN(1191)							position11 = (position11 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							int blue21 = ::Std_obj::_hx_int((blue10 + (yFraction * (blue16 + (xFraction * ( (Float)((((((( (int)(this1->b->__get(position11)) ) << 24) | (( (int)(this1->b->__get((position11 + 1))) ) << 16)) | (( (int)(this1->b->__get((position11 + 2))) ) << 8)) | ( (int)(this1->b->__get((position11 + 3))) )) & 255)) ))))));
HXDLIN(1191)							Float alpha = (( (Float)(1) ) - yFraction);
HXDLIN(1191)							int x25 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y25 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							bool alpha1;
HXDLIN(1191)							bool alpha2;
HXDLIN(1191)							bool alpha3;
HXDLIN(1191)							if ((x25 >= 0)) {
HXLINE(1191)								alpha3 = (y25 >= 0);
            							}
            							else {
HXLINE(1191)								alpha3 = false;
            							}
HXDLIN(1191)							if (alpha3) {
HXLINE(1191)								alpha2 = (x25 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								alpha2 = false;
            							}
HXDLIN(1191)							if (alpha2) {
HXLINE(1191)								alpha1 = (y25 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								alpha1 = false;
            							}
HXDLIN(1191)							if (!(alpha1)) {
HXLINE(1191)								::cpp::Int64 this16 = _hx_int64_make(x25,y25);
HXDLIN(1191)								int alpha4 = _hx_int64_high(this16);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha4,_hx_int64_low(this16))));
            							}
HXDLIN(1191)							int position12 = (((y25 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x25) * 4);
HXDLIN(1191)							position12 = (position12 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float alpha5 = ((( (Float)(1) ) - xFraction) * ( (Float)(((((((( (int)(this1->b->__get(position12)) ) << 24) | (( (int)(this1->b->__get((position12 + 1))) ) << 16)) | (( (int)(this1->b->__get((position12 + 2))) ) << 8)) | ( (int)(this1->b->__get((position12 + 3))) )) >> 24) & 255)) ));
HXDLIN(1191)							int x26 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y26 = ::Std_obj::_hx_int(y1);
HXDLIN(1191)							int ma18 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values36 = ::Array_obj< int >::__new(2)->init(0,x26)->init(1,0);
HXDLIN(1191)							int max18 = values36->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g76 = 0;
HXDLIN(1191)								int _g77 = values36->length;
HXDLIN(1191)								while((_g76 < _g77)){
HXLINE(1191)									_g76 = (_g76 + 1);
HXDLIN(1191)									int i37 = (_g76 - 1);
HXDLIN(1191)									if ((values36->__get(i37) > max18)) {
HXLINE( 688)										max18 = values36->__get(i37);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values37 = ::Array_obj< int >::__new(2)->init(0,max18)->init(1,ma18);
HXDLIN(1191)							int min18 = values37->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g78 = 0;
HXDLIN(1191)								int _g79 = values37->length;
HXDLIN(1191)								while((_g78 < _g79)){
HXLINE(1191)									_g78 = (_g78 + 1);
HXDLIN(1191)									int i38 = (_g78 - 1);
HXDLIN(1191)									if ((values37->__get(i38) < min18)) {
HXLINE( 652)										min18 = values37->__get(i38);
            									}
            								}
            							}
HXLINE(1191)							int x27 = min18;
HXDLIN(1191)							int ma19 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values38 = ::Array_obj< int >::__new(2)->init(0,y26)->init(1,0);
HXDLIN(1191)							int max19 = values38->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g80 = 0;
HXDLIN(1191)								int _g81 = values38->length;
HXDLIN(1191)								while((_g80 < _g81)){
HXLINE(1191)									_g80 = (_g80 + 1);
HXDLIN(1191)									int i39 = (_g80 - 1);
HXDLIN(1191)									if ((values38->__get(i39) > max19)) {
HXLINE( 688)										max19 = values38->__get(i39);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values39 = ::Array_obj< int >::__new(2)->init(0,max19)->init(1,ma19);
HXDLIN(1191)							int min19 = values39->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g82 = 0;
HXDLIN(1191)								int _g83 = values39->length;
HXDLIN(1191)								while((_g82 < _g83)){
HXLINE(1191)									_g82 = (_g82 + 1);
HXDLIN(1191)									int i40 = (_g82 - 1);
HXDLIN(1191)									if ((values39->__get(i40) < min19)) {
HXLINE( 652)										min19 = values39->__get(i40);
            									}
            								}
            							}
HXLINE(1191)							int y27 = min19;
HXDLIN(1191)							bool alpha6;
HXDLIN(1191)							bool alpha7;
HXDLIN(1191)							bool alpha8;
HXDLIN(1191)							if ((x27 >= 0)) {
HXLINE(1191)								alpha8 = (y27 >= 0);
            							}
            							else {
HXLINE(1191)								alpha8 = false;
            							}
HXDLIN(1191)							if (alpha8) {
HXLINE(1191)								alpha7 = (x27 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								alpha7 = false;
            							}
HXDLIN(1191)							if (alpha7) {
HXLINE(1191)								alpha6 = (y27 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								alpha6 = false;
            							}
HXDLIN(1191)							if (!(alpha6)) {
HXLINE(1191)								::cpp::Int64 this17 = _hx_int64_make(x27,y27);
HXDLIN(1191)								int alpha9 = _hx_int64_high(this17);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha9,_hx_int64_low(this17))));
            							}
HXDLIN(1191)							int position13 = (((y27 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x27) * 4);
HXDLIN(1191)							position13 = (position13 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float alpha10 = (alpha * (alpha5 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position13)) ) << 24) | (( (int)(this1->b->__get((position13 + 1))) ) << 16)) | (( (int)(this1->b->__get((position13 + 2))) ) << 8)) | ( (int)(this1->b->__get((position13 + 3))) )) >> 24) & 255)) ))));
HXDLIN(1191)							Float alpha11 = (( (Float)(1) ) - xFraction);
HXDLIN(1191)							int x28 = ::Std_obj::_hx_int(x1);
HXDLIN(1191)							int y28 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma20 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values40 = ::Array_obj< int >::__new(2)->init(0,x28)->init(1,0);
HXDLIN(1191)							int max20 = values40->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g84 = 0;
HXDLIN(1191)								int _g85 = values40->length;
HXDLIN(1191)								while((_g84 < _g85)){
HXLINE(1191)									_g84 = (_g84 + 1);
HXDLIN(1191)									int i41 = (_g84 - 1);
HXDLIN(1191)									if ((values40->__get(i41) > max20)) {
HXLINE( 688)										max20 = values40->__get(i41);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values41 = ::Array_obj< int >::__new(2)->init(0,max20)->init(1,ma20);
HXDLIN(1191)							int min20 = values41->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g86 = 0;
HXDLIN(1191)								int _g87 = values41->length;
HXDLIN(1191)								while((_g86 < _g87)){
HXLINE(1191)									_g86 = (_g86 + 1);
HXDLIN(1191)									int i42 = (_g86 - 1);
HXDLIN(1191)									if ((values41->__get(i42) < min20)) {
HXLINE( 652)										min20 = values41->__get(i42);
            									}
            								}
            							}
HXLINE(1191)							int x29 = min20;
HXDLIN(1191)							int ma21 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values42 = ::Array_obj< int >::__new(2)->init(0,y28)->init(1,0);
HXDLIN(1191)							int max21 = values42->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g88 = 0;
HXDLIN(1191)								int _g89 = values42->length;
HXDLIN(1191)								while((_g88 < _g89)){
HXLINE(1191)									_g88 = (_g88 + 1);
HXDLIN(1191)									int i43 = (_g88 - 1);
HXDLIN(1191)									if ((values42->__get(i43) > max21)) {
HXLINE( 688)										max21 = values42->__get(i43);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values43 = ::Array_obj< int >::__new(2)->init(0,max21)->init(1,ma21);
HXDLIN(1191)							int min21 = values43->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g90 = 0;
HXDLIN(1191)								int _g91 = values43->length;
HXDLIN(1191)								while((_g90 < _g91)){
HXLINE(1191)									_g90 = (_g90 + 1);
HXDLIN(1191)									int i44 = (_g90 - 1);
HXDLIN(1191)									if ((values43->__get(i44) < min21)) {
HXLINE( 652)										min21 = values43->__get(i44);
            									}
            								}
            							}
HXLINE(1191)							int y29 = min21;
HXDLIN(1191)							bool alpha12;
HXDLIN(1191)							bool alpha13;
HXDLIN(1191)							bool alpha14;
HXDLIN(1191)							if ((x29 >= 0)) {
HXLINE(1191)								alpha14 = (y29 >= 0);
            							}
            							else {
HXLINE(1191)								alpha14 = false;
            							}
HXDLIN(1191)							if (alpha14) {
HXLINE(1191)								alpha13 = (x29 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								alpha13 = false;
            							}
HXDLIN(1191)							if (alpha13) {
HXLINE(1191)								alpha12 = (y29 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								alpha12 = false;
            							}
HXDLIN(1191)							if (!(alpha12)) {
HXLINE(1191)								::cpp::Int64 this18 = _hx_int64_make(x29,y29);
HXDLIN(1191)								int alpha15 = _hx_int64_high(this18);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha15,_hx_int64_low(this18))));
            							}
HXDLIN(1191)							int position14 = (((y29 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x29) * 4);
HXDLIN(1191)							position14 = (position14 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							Float alpha16 = (alpha11 * ( (Float)(((((((( (int)(this1->b->__get(position14)) ) << 24) | (( (int)(this1->b->__get((position14 + 1))) ) << 16)) | (( (int)(this1->b->__get((position14 + 2))) ) << 8)) | ( (int)(this1->b->__get((position14 + 3))) )) >> 24) & 255)) ));
HXDLIN(1191)							int x30 = (::Std_obj::_hx_int(x1) + 1);
HXDLIN(1191)							int y30 = (::Std_obj::_hx_int(y1) + 1);
HXDLIN(1191)							int ma22 = ((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) - 1);
HXDLIN(1191)							::Array< int > values44 = ::Array_obj< int >::__new(2)->init(0,x30)->init(1,0);
HXDLIN(1191)							int max22 = values44->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g92 = 0;
HXDLIN(1191)								int _g93 = values44->length;
HXDLIN(1191)								while((_g92 < _g93)){
HXLINE(1191)									_g92 = (_g92 + 1);
HXDLIN(1191)									int i45 = (_g92 - 1);
HXDLIN(1191)									if ((values44->__get(i45) > max22)) {
HXLINE( 688)										max22 = values44->__get(i45);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values45 = ::Array_obj< int >::__new(2)->init(0,max22)->init(1,ma22);
HXDLIN(1191)							int min22 = values45->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g94 = 0;
HXDLIN(1191)								int _g95 = values45->length;
HXDLIN(1191)								while((_g94 < _g95)){
HXLINE(1191)									_g94 = (_g94 + 1);
HXDLIN(1191)									int i46 = (_g94 - 1);
HXDLIN(1191)									if ((values45->__get(i46) < min22)) {
HXLINE( 652)										min22 = values45->__get(i46);
            									}
            								}
            							}
HXLINE(1191)							int x31 = min22;
HXDLIN(1191)							int ma23 = (::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))) - 1);
HXDLIN(1191)							::Array< int > values46 = ::Array_obj< int >::__new(2)->init(0,y30)->init(1,0);
HXDLIN(1191)							int max23 = values46->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g96 = 0;
HXDLIN(1191)								int _g97 = values46->length;
HXDLIN(1191)								while((_g96 < _g97)){
HXLINE(1191)									_g96 = (_g96 + 1);
HXDLIN(1191)									int i47 = (_g96 - 1);
HXDLIN(1191)									if ((values46->__get(i47) > max23)) {
HXLINE( 688)										max23 = values46->__get(i47);
            									}
            								}
            							}
HXLINE(1191)							::Array< int > values47 = ::Array_obj< int >::__new(2)->init(0,max23)->init(1,ma23);
HXDLIN(1191)							int min23 = values47->__get(0);
HXDLIN(1191)							{
HXLINE(1191)								int _g98 = 0;
HXDLIN(1191)								int _g99 = values47->length;
HXDLIN(1191)								while((_g98 < _g99)){
HXLINE(1191)									_g98 = (_g98 + 1);
HXDLIN(1191)									int i48 = (_g98 - 1);
HXDLIN(1191)									if ((values47->__get(i48) < min23)) {
HXLINE( 652)										min23 = values47->__get(i48);
            									}
            								}
            							}
HXLINE(1191)							int y31 = min23;
HXDLIN(1191)							bool alpha17;
HXDLIN(1191)							bool alpha18;
HXDLIN(1191)							bool alpha19;
HXDLIN(1191)							if ((x31 >= 0)) {
HXLINE(1191)								alpha19 = (y31 >= 0);
            							}
            							else {
HXLINE(1191)								alpha19 = false;
            							}
HXDLIN(1191)							if (alpha19) {
HXLINE(1191)								alpha18 = (x31 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1191)								alpha18 = false;
            							}
HXDLIN(1191)							if (alpha18) {
HXLINE(1191)								alpha17 = (y31 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1191)								alpha17 = false;
            							}
HXDLIN(1191)							if (!(alpha17)) {
HXLINE(1191)								::cpp::Int64 this19 = _hx_int64_make(x31,y31);
HXDLIN(1191)								int alpha20 = _hx_int64_high(this19);
HXDLIN(1191)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,this1, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,alpha20,_hx_int64_low(this19))));
            							}
HXDLIN(1191)							int position15 = (((y31 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x31) * 4);
HXDLIN(1191)							position15 = (position15 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1191)							int alpha21 = ::Std_obj::_hx_int((alpha10 + (yFraction * (alpha16 + (xFraction * ( (Float)(((((((( (int)(this1->b->__get(position15)) ) << 24) | (( (int)(this1->b->__get((position15 + 1))) ) << 16)) | (( (int)(this1->b->__get((position15 + 2))) ) << 8)) | ( (int)(this1->b->__get((position15 + 3))) )) >> 24) & 255)) ))))));
HXDLIN(1191)							int color1 = 0;
HXDLIN(1191)							{
HXLINE(1191)								color1 = (color1 & -16711681);
HXDLIN(1191)								int color2;
HXDLIN(1191)								if ((red21 > 255)) {
HXLINE(1191)									color2 = 255;
            								}
            								else {
HXLINE(1191)									if ((red21 < 0)) {
HXLINE(1191)										color2 = 0;
            									}
            									else {
HXLINE(1191)										color2 = red21;
            									}
            								}
HXDLIN(1191)								color1 = (color1 | (color2 << 16));
            							}
HXDLIN(1191)							{
HXLINE(1191)								color1 = (color1 & -65281);
HXDLIN(1191)								int color3;
HXDLIN(1191)								if ((green21 > 255)) {
HXLINE(1191)									color3 = 255;
            								}
            								else {
HXLINE(1191)									if ((green21 < 0)) {
HXLINE(1191)										color3 = 0;
            									}
            									else {
HXLINE(1191)										color3 = green21;
            									}
            								}
HXDLIN(1191)								color1 = (color1 | (color3 << 8));
            							}
HXDLIN(1191)							{
HXLINE(1191)								color1 = (color1 & -256);
HXDLIN(1191)								int color4;
HXDLIN(1191)								if ((blue21 > 255)) {
HXLINE(1191)									color4 = 255;
            								}
            								else {
HXLINE(1191)									if ((blue21 < 0)) {
HXLINE(1191)										color4 = 0;
            									}
            									else {
HXLINE(1191)										color4 = blue21;
            									}
            								}
HXDLIN(1191)								color1 = (color1 | color4);
            							}
HXDLIN(1191)							{
HXLINE(1191)								color1 = (color1 & 16777215);
HXDLIN(1191)								int color5;
HXDLIN(1191)								if ((alpha21 > 255)) {
HXLINE(1191)									color5 = 255;
            								}
            								else {
HXLINE(1191)									if ((alpha21 < 0)) {
HXLINE(1191)										color5 = 0;
            									}
            									else {
HXLINE(1191)										color5 = alpha21;
            									}
            								}
HXDLIN(1191)								color1 = (color1 | (color5 << 24));
            							}
HXDLIN(1191)							int pixelValue = color1;
HXLINE(1192)							bool _hx_tmp10;
HXDLIN(1192)							bool _hx_tmp11;
HXDLIN(1192)							bool _hx_tmp12;
HXDLIN(1192)							if ((x >= 0)) {
HXLINE(1192)								_hx_tmp12 = (y >= 0);
            							}
            							else {
HXLINE(1192)								_hx_tmp12 = false;
            							}
HXDLIN(1192)							if (_hx_tmp12) {
HXLINE(1192)								_hx_tmp11 = (x < (( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1192)								_hx_tmp11 = false;
            							}
HXDLIN(1192)							if (_hx_tmp11) {
HXLINE(1192)								_hx_tmp10 = (y < ::Math_obj::ceil((( (Float)((rotatedImage->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1192)								_hx_tmp10 = false;
            							}
HXDLIN(1192)							if (!(_hx_tmp10)) {
HXLINE(1192)								::cpp::Int64 this20 = _hx_int64_make(x,y);
HXDLIN(1192)								int _hx_tmp13 = _hx_int64_high(this20);
HXDLIN(1192)								HX_STACK_DO_THROW( ::vision::exceptions::OutOfBounds_obj::__alloc( HX_CTX ,rotatedImage, ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_hx_tmp13,_hx_int64_low(this20))));
            							}
            							else {
HXLINE(1192)								bool _hx_tmp14;
HXDLIN(1192)								bool _hx_tmp15;
HXDLIN(1192)								bool _hx_tmp16;
HXDLIN(1192)								bool _hx_tmp17;
HXDLIN(1192)								int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1192)								if (((( (int)(rotatedImage->b->__get(pos4)) ) | (( (int)(rotatedImage->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1192)									int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)									_hx_tmp17 = ((( (int)(rotatedImage->b->__get(pos5)) ) | (( (int)(rotatedImage->b->__get((pos5 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1192)									_hx_tmp17 = true;
            								}
HXDLIN(1192)								if (!(_hx_tmp17)) {
HXLINE(1192)									int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1192)									_hx_tmp16 = ((( (int)(rotatedImage->b->__get(pos6)) ) | (( (int)(rotatedImage->b->__get((pos6 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1192)									_hx_tmp16 = true;
            								}
HXDLIN(1192)								if (!(_hx_tmp16)) {
HXLINE(1192)									int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)									_hx_tmp15 = ((( (int)(rotatedImage->b->__get(pos7)) ) | (( (int)(rotatedImage->b->__get((pos7 + 1))) ) << 8)) != 0);
            								}
            								else {
HXLINE(1192)									_hx_tmp15 = true;
            								}
HXDLIN(1192)								if (!(_hx_tmp15)) {
HXLINE(1192)									_hx_tmp14 = (rotatedImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            								}
            								else {
HXLINE(1192)									_hx_tmp14 = true;
            								}
HXDLIN(1192)								if (_hx_tmp14) {
HXLINE(1192)									 ::vision::ds::ImageView v = null();
HXDLIN(1192)									bool _hx_tmp18;
HXDLIN(1192)									bool _hx_tmp19;
HXDLIN(1192)									bool _hx_tmp20;
HXDLIN(1192)									bool _hx_tmp21;
HXDLIN(1192)									bool _hx_tmp22;
HXDLIN(1192)									bool _hx_tmp23;
HXDLIN(1192)									int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1192)									if (((( (int)(rotatedImage->b->__get(pos8)) ) | (( (int)(rotatedImage->b->__get((pos8 + 1))) ) << 8)) == 0)) {
HXLINE(1192)										int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)										_hx_tmp23 = ((( (int)(rotatedImage->b->__get(pos9)) ) | (( (int)(rotatedImage->b->__get((pos9 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1192)										_hx_tmp23 = true;
            									}
HXDLIN(1192)									if (!(_hx_tmp23)) {
HXLINE(1192)										int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1192)										_hx_tmp22 = ((( (int)(rotatedImage->b->__get(pos10)) ) | (( (int)(rotatedImage->b->__get((pos10 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1192)										_hx_tmp22 = true;
            									}
HXDLIN(1192)									if (!(_hx_tmp22)) {
HXLINE(1192)										int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)										_hx_tmp21 = ((( (int)(rotatedImage->b->__get(pos11)) ) | (( (int)(rotatedImage->b->__get((pos11 + 1))) ) << 8)) != 0);
            									}
            									else {
HXLINE(1192)										_hx_tmp21 = true;
            									}
HXDLIN(1192)									if (!(_hx_tmp21)) {
HXLINE(1192)										_hx_tmp20 = (rotatedImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            									}
            									else {
HXLINE(1192)										_hx_tmp20 = true;
            									}
HXDLIN(1192)									if (!(_hx_tmp20)) {
HXLINE(1192)										_hx_tmp19 = ::hx::IsNull( v );
            									}
            									else {
HXLINE(1192)										_hx_tmp19 = false;
            									}
HXDLIN(1192)									if (_hx_tmp19) {
HXLINE(1192)										bool _hx_tmp24;
HXDLIN(1192)										bool _hx_tmp25;
HXDLIN(1192)										if ((x >= 0)) {
HXLINE(1192)											_hx_tmp25 = (y >= 0);
            										}
            										else {
HXLINE(1192)											_hx_tmp25 = false;
            										}
HXDLIN(1192)										if (_hx_tmp25) {
HXLINE(1192)											_hx_tmp24 = (x < (( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8)));
            										}
            										else {
HXLINE(1192)											_hx_tmp24 = false;
            										}
HXDLIN(1192)										if (_hx_tmp24) {
HXLINE(1192)											_hx_tmp18 = (y < ::Math_obj::ceil((( (Float)((rotatedImage->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8)) * 4)) ))));
            										}
            										else {
HXLINE(1192)											_hx_tmp18 = false;
            										}
            									}
            									else {
HXLINE(1192)										bool has = false;
HXDLIN(1192)										 ::vision::ds::ImageView view;
HXDLIN(1192)										if (::hx::IsNotNull( v )) {
HXLINE(1192)											view = v;
            										}
            										else {
HXLINE(1192)											int pos12 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1192)											int pos13 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)											int pos14 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1192)											int pos15 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1192)											view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(rotatedImage->b->__get(pos12)) ) | (( (int)(rotatedImage->b->__get((pos12 + 1))) ) << 8)),(( (int)(rotatedImage->b->__get(pos13)) ) | (( (int)(rotatedImage->b->__get((pos13 + 1))) ) << 8)),(( (int)(rotatedImage->b->__get(pos14)) ) | (( (int)(rotatedImage->b->__get((pos14 + 1))) ) << 8)),(( (int)(rotatedImage->b->__get(pos15)) ) | (( (int)(rotatedImage->b->__get((pos15 + 1))) ) << 8)),rotatedImage->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            										}
HXDLIN(1192)										switch((int)(view->shape)){
            											case (int)0: {
HXLINE(1192)												bool has1;
HXDLIN(1192)												bool has2;
HXDLIN(1192)												if ((x < (view->x + view->width))) {
HXLINE(1192)													has2 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(1192)													has2 = false;
            												}
HXDLIN(1192)												if (has2) {
HXLINE(1192)													has1 = (x >= view->x);
            												}
            												else {
HXLINE(1192)													has1 = false;
            												}
HXDLIN(1192)												if (has1) {
HXLINE(1192)													has = (y >= view->y);
            												}
            												else {
HXLINE(1192)													has = false;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1192)												bool has3;
HXDLIN(1192)												bool has4;
HXDLIN(1192)												bool has5;
HXDLIN(1192)												if ((x < (view->x + view->width))) {
HXLINE(1192)													has5 = (y < (view->y + view->height));
            												}
            												else {
HXLINE(1192)													has5 = false;
            												}
HXDLIN(1192)												if (has5) {
HXLINE(1192)													has4 = (x >= view->x);
            												}
            												else {
HXLINE(1192)													has4 = false;
            												}
HXDLIN(1192)												if (has4) {
HXLINE(1192)													has3 = (y >= view->y);
            												}
            												else {
HXLINE(1192)													has3 = false;
            												}
HXLINE(1400)												has = !(has3);
            											}
            											break;
            											case (int)2: case (int)3: {
HXLINE(1192)												if ((view->width > view->height)) {
HXLINE(1192)													Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1192)													Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1192)													Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1192)													Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1192)													Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1192)													Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1192)													Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1192)													::cpp::Int64 p = _hx_int64_make(x,y);
HXDLIN(1192)													Float x32 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1192)													Float y32 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1192)													Float has6 = ::Math_obj::sqrt(((x32 * x32) + (y32 * y32)));
HXDLIN(1192)													Float x33 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1192)													Float y33 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)													has = ((has6 + ::Math_obj::sqrt(((x33 * x33) + (y33 * y33)))) <= view->width);
HXLINE(1192)													if ((view->shape == 3)) {
HXLINE(1416)														has = !(has);
            													}
            												}
            												else {
HXLINE(1192)													if ((view->height > view->width)) {
HXLINE(1192)														Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1192)														Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1192)														Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1192)														Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1192)														Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1192)														Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1192)														Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1192)														::cpp::Int64 p1 = _hx_int64_make(x,y);
HXDLIN(1192)														Float x34 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1192)														Float y34 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1192)														Float has7 = ::Math_obj::sqrt(((x34 * x34) + (y34 * y34)));
HXDLIN(1192)														Float x35 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1192)														Float y35 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)														has = ((has7 + ::Math_obj::sqrt(((x35 * x35) + (y35 * y35)))) <= view->height);
HXLINE(1192)														if ((view->shape == 3)) {
HXLINE(1425)															has = !(has);
            														}
            													}
            													else {
HXLINE(1192)														Float point1_x = ( (Float)(x) );
HXDLIN(1192)														Float point1_y = ( (Float)(y) );
HXDLIN(1192)														Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1192)														Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1192)														Float x36 = (point2_x - point1_x);
HXDLIN(1192)														Float y36 = (point2_y - point1_y);
HXLINE(1428)														has = (::Math_obj::sqrt(((x36 * x36) + (y36 * y36))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1192)														if ((view->shape == 3)) {
HXLINE(1429)															has = !(has);
            														}
            													}
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1401)												has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            											}
            											break;
            											case (int)5: {
HXLINE(1402)												has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            											}
            											break;
            										}
HXLINE(1192)										_hx_tmp18 = has;
            									}
HXDLIN(1192)									if (_hx_tmp18) {
HXLINE(1192)										int position16 = (((y * (( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1192)										position16 = (position16 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1192)										rotatedImage->b[position16] = ( (unsigned char)(((pixelValue >> 24) & 255)) );
HXDLIN(1192)										rotatedImage->b[(position16 + 1)] = ( (unsigned char)(((pixelValue >> 16) & 255)) );
HXDLIN(1192)										rotatedImage->b[(position16 + 2)] = ( (unsigned char)(((pixelValue >> 8) & 255)) );
HXDLIN(1192)										rotatedImage->b[(position16 + 3)] = ( (unsigned char)((pixelValue & 255)) );
            									}
            								}
            								else {
HXLINE(1192)									int position17 = (((y * (( (int)(rotatedImage->b->__get(0)) ) | (( (int)(rotatedImage->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1192)									position17 = (position17 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1192)									rotatedImage->b[position17] = ( (unsigned char)(((pixelValue >> 24) & 255)) );
HXDLIN(1192)									rotatedImage->b[(position17 + 1)] = ( (unsigned char)(((pixelValue >> 16) & 255)) );
HXDLIN(1192)									rotatedImage->b[(position17 + 2)] = ( (unsigned char)(((pixelValue >> 8) & 255)) );
HXDLIN(1192)									rotatedImage->b[(position17 + 3)] = ( (unsigned char)((pixelValue & 255)) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1197)		this1 = rotatedImage;
HXLINE(1198)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,rotate,return )

::String Image_Impl__obj::toString( ::haxe::io::Bytes this1,::hx::Null< bool >  __o_special){
            		bool special = __o_special.Default(true);
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1212_toString)
HXLINE(1213)		if (!(special)) {
HXLINE(1214)			return ::Std_obj::string(this1);
            		}
HXLINE(1216)		::String s = HX_("\n",0a,00,00,00);
HXLINE(1217)		int prevY = 0;
HXLINE(1218)		{
HXLINE(1218)			int _g = 0;
HXDLIN(1218)			int _g1 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1218)			while((_g < _g1)){
HXLINE(1218)				_g = (_g + 1);
HXDLIN(1218)				int x = (_g - 1);
HXDLIN(1218)				{
HXLINE(1218)					int _g2 = 0;
HXDLIN(1218)					int _g3 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1218)					while((_g2 < _g3)){
HXLINE(1218)						_g2 = (_g2 + 1);
HXDLIN(1218)						int y = (_g2 - 1);
HXDLIN(1218)						{
HXLINE(1218)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1218)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1219)							if ((prevY != y)) {
HXLINE(1220)								prevY = y;
HXLINE(1221)								s = (s + HX_("\n",0a,00,00,00));
            							}
HXLINE(1223)							s = (s + ::vision::ds::_Color::Color_Impl__obj::toString(((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ))));
            						}
            					}
            				}
            			}
            		}
HXLINE(1225)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,toString,return )

void Image_Impl__obj::forEachPixel( ::haxe::io::Bytes this1, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1233_forEachPixel)
HXDLIN(1233)		int _g = 0;
HXDLIN(1233)		int _g1 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1233)		while((_g < _g1)){
HXDLIN(1233)			_g = (_g + 1);
HXDLIN(1233)			int x = (_g - 1);
HXLINE(1234)			{
HXLINE(1234)				int _g2 = 0;
HXDLIN(1234)				int _g3 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1234)				while((_g2 < _g3)){
HXLINE(1234)					_g2 = (_g2 + 1);
HXDLIN(1234)					int y = (_g2 - 1);
HXLINE(1235)					int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1235)					position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1235)					callback(x,y,((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,forEachPixel,(void))

void Image_Impl__obj::forEachPixelInView( ::haxe::io::Bytes this1, ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1250_forEachPixelInView)
HXLINE(1251)		bool _hx_tmp;
HXDLIN(1251)		bool _hx_tmp1;
HXDLIN(1251)		bool _hx_tmp2;
HXDLIN(1251)		bool _hx_tmp3;
HXDLIN(1251)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1251)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1251)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1251)			_hx_tmp3 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp3 = true;
            		}
HXDLIN(1251)		if (!(_hx_tmp3)) {
HXLINE(1251)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1251)			_hx_tmp2 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp2 = true;
            		}
HXDLIN(1251)		if (!(_hx_tmp2)) {
HXLINE(1251)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1251)			_hx_tmp1 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp1 = true;
            		}
HXDLIN(1251)		if (!(_hx_tmp1)) {
HXLINE(1251)			_hx_tmp = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp = true;
            		}
HXDLIN(1251)		if (!(_hx_tmp)) {
HXLINE(1252)			{
HXLINE(1252)				int _g = 0;
HXDLIN(1252)				int _g1 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1252)				while((_g < _g1)){
HXLINE(1252)					_g = (_g + 1);
HXDLIN(1252)					int x = (_g - 1);
HXDLIN(1252)					{
HXLINE(1252)						int _g2 = 0;
HXDLIN(1252)						int _g3 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1252)						while((_g2 < _g3)){
HXLINE(1252)							_g2 = (_g2 + 1);
HXDLIN(1252)							int y = (_g2 - 1);
HXDLIN(1252)							int position = (((y * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1252)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1252)							callback(x,y,((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) )));
            						}
            					}
            				}
            			}
HXLINE(1253)			return;
            		}
HXLINE(1255)		{
HXLINE(1255)			int _g4 = 0;
HXDLIN(1255)			int _g5 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1255)			while((_g4 < _g5)){
HXLINE(1255)				_g4 = (_g4 + 1);
HXDLIN(1255)				int x1 = (_g4 - 1);
HXLINE(1256)				{
HXLINE(1256)					int _g6 = 0;
HXDLIN(1256)					int _g7 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1256)					while((_g6 < _g7)){
HXLINE(1256)						_g6 = (_g6 + 1);
HXDLIN(1256)						int y1 = (_g6 - 1);
HXLINE(1257)						 ::vision::ds::ImageView v = null();
HXDLIN(1257)						bool _hx_tmp4;
HXDLIN(1257)						bool _hx_tmp5;
HXDLIN(1257)						bool _hx_tmp6;
HXDLIN(1257)						bool _hx_tmp7;
HXDLIN(1257)						bool _hx_tmp8;
HXDLIN(1257)						bool _hx_tmp9;
HXDLIN(1257)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1257)						if (((( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1257)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1257)							_hx_tmp9 = ((( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1257)							_hx_tmp9 = true;
            						}
HXDLIN(1257)						if (!(_hx_tmp9)) {
HXLINE(1257)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1257)							_hx_tmp8 = ((( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1257)							_hx_tmp8 = true;
            						}
HXDLIN(1257)						if (!(_hx_tmp8)) {
HXLINE(1257)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1257)							_hx_tmp7 = ((( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1257)							_hx_tmp7 = true;
            						}
HXDLIN(1257)						if (!(_hx_tmp7)) {
HXLINE(1257)							_hx_tmp6 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1257)							_hx_tmp6 = true;
            						}
HXDLIN(1257)						if (!(_hx_tmp6)) {
HXLINE(1257)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1257)							_hx_tmp5 = false;
            						}
HXDLIN(1257)						if (_hx_tmp5) {
HXLINE(1257)							bool _hx_tmp10;
HXDLIN(1257)							bool _hx_tmp11;
HXDLIN(1257)							if ((x1 >= 0)) {
HXLINE(1257)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1257)								_hx_tmp11 = false;
            							}
HXDLIN(1257)							if (_hx_tmp11) {
HXLINE(1257)								_hx_tmp10 = (x1 < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1257)								_hx_tmp10 = false;
            							}
HXDLIN(1257)							if (_hx_tmp10) {
HXLINE(1257)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1257)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1257)							bool has = false;
HXDLIN(1257)							 ::vision::ds::ImageView view;
HXDLIN(1257)							if (::hx::IsNotNull( v )) {
HXLINE(1257)								view = v;
            							}
            							else {
HXLINE(1257)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1257)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1257)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1257)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1257)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos8)) ) | (( (int)(this1->b->__get((pos8 + 1))) ) << 8)),(( (int)(this1->b->__get(pos9)) ) | (( (int)(this1->b->__get((pos9 + 1))) ) << 8)),(( (int)(this1->b->__get(pos10)) ) | (( (int)(this1->b->__get((pos10 + 1))) ) << 8)),(( (int)(this1->b->__get(pos11)) ) | (( (int)(this1->b->__get((pos11 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1257)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1257)									bool has1;
HXDLIN(1257)									bool has2;
HXDLIN(1257)									if ((x1 < (view->x + view->width))) {
HXLINE(1257)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1257)										has2 = false;
            									}
HXDLIN(1257)									if (has2) {
HXLINE(1257)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1257)										has1 = false;
            									}
HXDLIN(1257)									if (has1) {
HXLINE(1257)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1257)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1257)									bool has3;
HXDLIN(1257)									bool has4;
HXDLIN(1257)									bool has5;
HXDLIN(1257)									if ((x1 < (view->x + view->width))) {
HXLINE(1257)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1257)										has5 = false;
            									}
HXDLIN(1257)									if (has5) {
HXLINE(1257)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1257)										has4 = false;
            									}
HXDLIN(1257)									if (has4) {
HXLINE(1257)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1257)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1257)									if ((view->width > view->height)) {
HXLINE(1257)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1257)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1257)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1257)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1257)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1257)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1257)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1257)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1257)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1257)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1257)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1257)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1257)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1257)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1257)										if ((view->height > view->width)) {
HXLINE(1257)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1257)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1257)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1257)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1257)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1257)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1257)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1257)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1257)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1257)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1257)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1257)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1257)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1257)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1257)											Float point1_x = ( (Float)(x1) );
HXDLIN(1257)											Float point1_y = ( (Float)(y1) );
HXDLIN(1257)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1257)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1257)											Float x6 = (point2_x - point1_x);
HXDLIN(1257)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1257)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1257)							_hx_tmp4 = has;
            						}
HXDLIN(1257)						if (_hx_tmp4) {
HXLINE(1258)							int position1 = (((y1 * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1258)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1258)							callback(x1,y1,((((( (int)(this1->b->__get(position1)) ) << 24) | (( (int)(this1->b->__get((position1 + 1))) ) << 16)) | (( (int)(this1->b->__get((position1 + 2))) ) << 8)) | ( (int)(this1->b->__get((position1 + 3))) )));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,forEachPixelInView,(void))

 ::Dynamic Image_Impl__obj::iterator( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1268_iterator)
HXDLIN(1268)		return  ::vision::ds::_Image::PixelIterator_obj::__alloc( HX_CTX ,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,iterator,return )

 ::vision::ds::Point2D Image_Impl__obj::center( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1275_center)
HXDLIN(1275)		return  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,(( (Float)((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) ) / ( (Float)(2) )),(( (Float)(::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )))) ) / ( (Float)(2) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,center,return )

bool Image_Impl__obj::hasView( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1327_hasView)
HXLINE(1328)		bool _hx_tmp;
HXDLIN(1328)		bool _hx_tmp1;
HXDLIN(1328)		bool _hx_tmp2;
HXDLIN(1328)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1328)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1329)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXLINE(1328)			_hx_tmp2 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1328)			_hx_tmp2 = true;
            		}
HXDLIN(1328)		if (!(_hx_tmp2)) {
HXLINE(1330)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXLINE(1328)			_hx_tmp1 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1328)			_hx_tmp1 = true;
            		}
HXDLIN(1328)		if (!(_hx_tmp1)) {
HXLINE(1331)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXLINE(1328)			_hx_tmp = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1328)			_hx_tmp = true;
            		}
HXLINE(1327)		if (!(_hx_tmp)) {
HXLINE(1332)			return (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXDLIN(1327)			return true;
            		}
HXDLIN(1327)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,hasView,return )

 ::haxe::io::Bytes Image_Impl__obj::setView( ::haxe::io::Bytes this1, ::vision::ds::ImageView view){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1346_setView)
HXLINE(1347)		{
HXLINE(1347)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1347)			int v = view->x;
HXDLIN(1347)			this1->b[pos] = ( (unsigned char)(v) );
HXDLIN(1347)			this1->b[(pos + 1)] = ( (unsigned char)((v >> 8)) );
            		}
HXLINE(1348)		{
HXLINE(1348)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1348)			int v1 = view->y;
HXDLIN(1348)			this1->b[pos1] = ( (unsigned char)(v1) );
HXDLIN(1348)			this1->b[(pos1 + 1)] = ( (unsigned char)((v1 >> 8)) );
            		}
HXLINE(1349)		{
HXLINE(1349)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1349)			int v2;
HXDLIN(1349)			if ((view->width >= (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)))) {
HXLINE(1349)				v2 = 0;
            			}
            			else {
HXLINE(1349)				v2 = view->width;
            			}
HXDLIN(1349)			this1->b[pos2] = ( (unsigned char)(v2) );
HXDLIN(1349)			this1->b[(pos2 + 1)] = ( (unsigned char)((v2 >> 8)) );
            		}
HXLINE(1350)		{
HXLINE(1350)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1350)			int v3;
HXDLIN(1350)			if ((view->height >= ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))))) {
HXLINE(1350)				v3 = 0;
            			}
            			else {
HXLINE(1350)				v3 = view->width;
            			}
HXDLIN(1350)			this1->b[pos3] = ( (unsigned char)(v3) );
HXDLIN(1350)			this1->b[(pos3 + 1)] = ( (unsigned char)((v3 >> 8)) );
            		}
HXLINE(1351)		this1->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(view->shape) );
HXLINE(1352)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,setView,return )

 ::vision::ds::ImageView Image_Impl__obj::getView( ::haxe::io::Bytes this1){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1359_getView)
HXLINE(1360)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXLINE(1361)		int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXLINE(1362)		int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXLINE(1363)		int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXLINE(1359)		return  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)),(( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)),(( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)),(( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,getView,return )

 ::haxe::io::Bytes Image_Impl__obj::removeView( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1371_removeView)
HXLINE(1372)		{
HXLINE(1372)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1372)			this1->b[pos] = ( (unsigned char)(0) );
HXDLIN(1372)			this1->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1373)		{
HXLINE(1373)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1373)			this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(1373)			this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1374)		{
HXLINE(1374)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1374)			this1->b[pos2] = ( (unsigned char)(0) );
HXDLIN(1374)			this1->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1375)		{
HXLINE(1375)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1375)			this1->b[pos3] = ( (unsigned char)(0) );
HXDLIN(1375)			this1->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1376)		this1->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXLINE(1377)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,removeView,return )

bool Image_Impl__obj::hasPixelInView( ::haxe::io::Bytes this1,int x,int y, ::vision::ds::ImageView v){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1392_hasPixelInView)
HXLINE(1393)		bool _hx_tmp;
HXDLIN(1393)		bool _hx_tmp1;
HXDLIN(1393)		bool _hx_tmp2;
HXDLIN(1393)		bool _hx_tmp3;
HXDLIN(1393)		bool _hx_tmp4;
HXDLIN(1393)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1393)		if (((( (int)(this1->b->__get(pos)) ) | (( (int)(this1->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1393)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1393)			_hx_tmp4 = ((( (int)(this1->b->__get(pos1)) ) | (( (int)(this1->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1393)			_hx_tmp4 = true;
            		}
HXDLIN(1393)		if (!(_hx_tmp4)) {
HXLINE(1393)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1393)			_hx_tmp3 = ((( (int)(this1->b->__get(pos2)) ) | (( (int)(this1->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1393)			_hx_tmp3 = true;
            		}
HXDLIN(1393)		if (!(_hx_tmp3)) {
HXLINE(1393)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1393)			_hx_tmp2 = ((( (int)(this1->b->__get(pos3)) ) | (( (int)(this1->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1393)			_hx_tmp2 = true;
            		}
HXDLIN(1393)		if (!(_hx_tmp2)) {
HXLINE(1393)			_hx_tmp1 = (this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1393)			_hx_tmp1 = true;
            		}
HXDLIN(1393)		if (!(_hx_tmp1)) {
HXLINE(1393)			_hx_tmp = ::hx::IsNull( v );
            		}
            		else {
HXLINE(1393)			_hx_tmp = false;
            		}
HXDLIN(1393)		if (_hx_tmp) {
HXLINE(1394)			bool _hx_tmp5;
HXDLIN(1394)			bool _hx_tmp6;
HXDLIN(1394)			if ((x >= 0)) {
HXLINE(1394)				_hx_tmp6 = (y >= 0);
            			}
            			else {
HXLINE(1394)				_hx_tmp6 = false;
            			}
HXDLIN(1394)			if (_hx_tmp6) {
HXLINE(1394)				_hx_tmp5 = (x < (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)));
            			}
            			else {
HXLINE(1394)				_hx_tmp5 = false;
            			}
HXDLIN(1394)			if (_hx_tmp5) {
HXLINE(1394)				return (y < ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) ))));
            			}
            			else {
HXLINE(1394)				return false;
            			}
            		}
HXLINE(1396)		bool has = false;
HXLINE(1397)		 ::vision::ds::ImageView view;
HXDLIN(1397)		if (::hx::IsNotNull( v )) {
HXLINE(1397)			view = v;
            		}
            		else {
HXLINE(1397)			int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1397)			int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1397)			int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1397)			int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1397)			view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(this1->b->__get(pos4)) ) | (( (int)(this1->b->__get((pos4 + 1))) ) << 8)),(( (int)(this1->b->__get(pos5)) ) | (( (int)(this1->b->__get((pos5 + 1))) ) << 8)),(( (int)(this1->b->__get(pos6)) ) | (( (int)(this1->b->__get((pos6 + 1))) ) << 8)),(( (int)(this1->b->__get(pos7)) ) | (( (int)(this1->b->__get((pos7 + 1))) ) << 8)),this1->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            		}
HXLINE(1398)		switch((int)(view->shape)){
            			case (int)0: {
HXLINE(1399)				bool has1;
HXDLIN(1399)				bool has2;
HXDLIN(1399)				if ((x < (view->x + view->width))) {
HXLINE(1399)					has2 = (y < (view->y + view->height));
            				}
            				else {
HXLINE(1399)					has2 = false;
            				}
HXDLIN(1399)				if (has2) {
HXLINE(1399)					has1 = (x >= view->x);
            				}
            				else {
HXLINE(1399)					has1 = false;
            				}
HXDLIN(1399)				if (has1) {
HXLINE(1399)					has = (y >= view->y);
            				}
            				else {
HXLINE(1399)					has = false;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(1400)				bool has3;
HXDLIN(1400)				bool has4;
HXDLIN(1400)				bool has5;
HXDLIN(1400)				if ((x < (view->x + view->width))) {
HXLINE(1400)					has5 = (y < (view->y + view->height));
            				}
            				else {
HXLINE(1400)					has5 = false;
            				}
HXDLIN(1400)				if (has5) {
HXLINE(1400)					has4 = (x >= view->x);
            				}
            				else {
HXLINE(1400)					has4 = false;
            				}
HXDLIN(1400)				if (has4) {
HXLINE(1400)					has3 = (y >= view->y);
            				}
            				else {
HXLINE(1400)					has3 = false;
            				}
HXDLIN(1400)				has = !(has3);
            			}
            			break;
            			case (int)2: case (int)3: {
HXLINE(1408)				if ((view->width > view->height)) {
HXLINE(1409)					Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXLINE(1410)					Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXLINE(1411)					Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXLINE(1412)					Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1412)					Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXLINE(1413)					Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1413)					Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXLINE(1414)					::cpp::Int64 p = _hx_int64_make(x,y);
HXLINE(1415)					Float x1 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1415)					Float y1 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1415)					Float has6 = ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)));
HXDLIN(1415)					Float x2 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1415)					Float y2 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXDLIN(1415)					has = ((has6 + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) <= view->width);
HXLINE(1416)					if ((view->shape == 3)) {
HXLINE(1416)						has = !(has);
            					}
            				}
            				else {
HXLINE(1417)					if ((view->height > view->width)) {
HXLINE(1418)						Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXLINE(1419)						Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXLINE(1420)						Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXLINE(1421)						Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1421)						Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXLINE(1422)						Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1422)						Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXLINE(1423)						::cpp::Int64 p1 = _hx_int64_make(x,y);
HXLINE(1424)						Float x3 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1424)						Float y3 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1424)						Float has7 = ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)));
HXDLIN(1424)						Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1424)						Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXDLIN(1424)						has = ((has7 + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) <= view->height);
HXLINE(1425)						if ((view->shape == 3)) {
HXLINE(1425)							has = !(has);
            						}
            					}
            					else {
HXLINE(1428)						Float point1_x = ( (Float)(x) );
HXDLIN(1428)						Float point1_y = ( (Float)(y) );
HXDLIN(1428)						Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1428)						Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1428)						Float x5 = (point2_x - point1_x);
HXDLIN(1428)						Float y5 = (point2_y - point1_y);
HXDLIN(1428)						has = (::Math_obj::sqrt(((x5 * x5) + (y5 * y5))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1429)						if ((view->shape == 3)) {
HXLINE(1429)							has = !(has);
            						}
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(1401)				has = (((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            			}
            			break;
            			case (int)5: {
HXLINE(1402)				has = !((((::Math_obj::abs((( (Float)((x - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            			}
            			break;
            		}
HXLINE(1433)		return has;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_Impl__obj,hasPixelInView,return )

 ::haxe::io::Bytes Image_Impl__obj::from2DArray(::Array< ::Dynamic> array){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1545_from2DArray)
HXLINE(1547)		int h = array->length;
HXLINE(1548)		int w = array->__get(0).StaticCast< ::Array< int > >()->length;
HXLINE(1550)		int length = (((w * h) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1550)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(1550)		this1->fill(0,length,0);
HXDLIN(1550)		 ::haxe::io::Bytes byteArray = this1;
HXLINE(1551)		::Array< int > flat = ::Array_obj< int >::__new(0);
HXDLIN(1551)		{
HXLINE(1551)			int _g = 0;
HXDLIN(1551)			while((_g < array->length)){
HXLINE(1551)				::Array< int > item = array->__get(_g).StaticCast< ::Array< int > >();
HXDLIN(1551)				_g = (_g + 1);
HXDLIN(1551)				flat = flat->concat(item);
            			}
            		}
HXDLIN(1551)		::Array< int > flat1 = flat;
HXLINE(1552)		{
HXLINE(1552)			int _g1 = 0;
HXDLIN(1552)			int _g2 = flat1->length;
HXDLIN(1552)			while((_g1 < _g2)){
HXLINE(1552)				_g1 = (_g1 + 1);
HXDLIN(1552)				int i = (_g1 - 1);
HXLINE(1553)				int color = flat1->__get(i);
HXLINE(1554)				byteArray->b[(::vision::ds::_Image::Image_Impl__obj::OFFSET + (i * 4))] = ( (unsigned char)(((color >> 24) & 255)) );
HXLINE(1555)				byteArray->b[((::vision::ds::_Image::Image_Impl__obj::OFFSET + (i * 4)) + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXLINE(1556)				byteArray->b[((::vision::ds::_Image::Image_Impl__obj::OFFSET + (i * 4)) + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXLINE(1557)				byteArray->b[((::vision::ds::_Image::Image_Impl__obj::OFFSET + (i * 4)) + 3)] = ( (unsigned char)((color & 255)) );
            			}
            		}
HXLINE(1560)		{
HXLINE(1560)			byteArray->b[0] = ( (unsigned char)(w) );
HXDLIN(1560)			byteArray->b[1] = ( (unsigned char)((w >> 8)) );
            		}
HXLINE(1561)		{
HXLINE(1561)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1561)			byteArray->b[pos] = ( (unsigned char)(0) );
HXDLIN(1561)			byteArray->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1562)		{
HXLINE(1562)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1562)			byteArray->b[pos1] = ( (unsigned char)(0) );
HXDLIN(1562)			byteArray->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1563)		{
HXLINE(1563)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1563)			byteArray->b[pos2] = ( (unsigned char)(0) );
HXDLIN(1563)			byteArray->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1564)		{
HXLINE(1564)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1564)			byteArray->b[pos3] = ( (unsigned char)(0) );
HXDLIN(1564)			byteArray->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1565)		byteArray->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXLINE(1567)		return byteArray;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,from2DArray,return )

::Array< ::Dynamic> Image_Impl__obj::to2DArray( ::haxe::io::Bytes this1){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1574_to2DArray)
HXLINE(1575)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1576)		{
HXLINE(1576)			int _g = 0;
HXDLIN(1576)			int _g1 = ::Math_obj::ceil((( (Float)((this1->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1576)			while((_g < _g1)){
HXLINE(1576)				_g = (_g + 1);
HXDLIN(1576)				int i = (_g - 1);
HXLINE(1577)				arr[i] = ::Array_obj< int >::__new(0);
HXLINE(1578)				{
HXLINE(1578)					int _g2 = 0;
HXDLIN(1578)					int _g3 = (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8));
HXDLIN(1578)					while((_g2 < _g3)){
HXLINE(1578)						_g2 = (_g2 + 1);
HXDLIN(1578)						int j = (_g2 - 1);
HXLINE(1579)						int position = (((i * (( (int)(this1->b->__get(0)) ) | (( (int)(this1->b->__get(1)) ) << 8))) + j) * 4);
HXDLIN(1579)						position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1579)						arr->__get(i).StaticCast< ::Array< int > >()[j] = ((((( (int)(this1->b->__get(position)) ) << 24) | (( (int)(this1->b->__get((position + 1))) ) << 16)) | (( (int)(this1->b->__get((position + 2))) ) << 8)) | ( (int)(this1->b->__get((position + 3))) ));
            					}
            				}
            			}
            		}
HXLINE(1583)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_Impl__obj,to2DArray,return )

 ::Dynamic Image_Impl__obj::fromBytes( ::haxe::io::Bytes bytes,int width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_1593_fromBytes)
HXLINE(1594)		 ::Dynamic h;
HXDLIN(1594)		if (::hx::IsNotNull( height )) {
HXLINE(1594)			h = height;
            		}
            		else {
HXLINE(1594)			h = ::Math_obj::ceil(((( (Float)(bytes->length) ) / ( (Float)(4) )) / ( (Float)(width) )));
            		}
HXLINE(1595)		int length = (((width * ( (int)(h) )) * 4) + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1595)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(1595)		this1->fill(0,length,0);
HXDLIN(1595)		 ::haxe::io::Bytes array = this1;
HXLINE(1596)		array->fill(0,array->length,0);
HXLINE(1597)		{
HXLINE(1597)			array->b[0] = ( (unsigned char)(width) );
HXDLIN(1597)			array->b[1] = ( (unsigned char)((width >> 8)) );
            		}
HXLINE(1598)		{
HXLINE(1598)			int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1598)			array->b[pos] = ( (unsigned char)(0) );
HXDLIN(1598)			array->b[(pos + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1599)		{
HXLINE(1599)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1599)			array->b[pos1] = ( (unsigned char)(0) );
HXDLIN(1599)			array->b[(pos1 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1600)		{
HXLINE(1600)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1600)			array->b[pos2] = ( (unsigned char)(0) );
HXDLIN(1600)			array->b[(pos2 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1601)		{
HXLINE(1601)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1601)			array->b[pos3] = ( (unsigned char)(0) );
HXDLIN(1601)			array->b[(pos3 + 1)] = ( (unsigned char)(0) );
            		}
HXLINE(1602)		array->b[((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)] = ( (unsigned char)(0) );
HXLINE(1604)		array->blit(::vision::ds::_Image::Image_Impl__obj::OFFSET,bytes,0,bytes->length);
HXLINE(1606)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_Impl__obj,fromBytes,return )

 ::haxe::io::Bytes Image_Impl__obj::image_or_image( ::haxe::io::Bytes lhs, ::haxe::io::Bytes rhs){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1629_image_or_image)
HXLINE(1630)		bool _hx_tmp;
HXDLIN(1630)		bool _hx_tmp1;
HXDLIN(1630)		bool _hx_tmp2;
HXDLIN(1630)		bool _hx_tmp3;
HXDLIN(1630)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1630)		if (((( (int)(lhs->b->__get(pos)) ) | (( (int)(lhs->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1630)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)			_hx_tmp3 = ((( (int)(lhs->b->__get(pos1)) ) | (( (int)(lhs->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1630)			_hx_tmp3 = true;
            		}
HXDLIN(1630)		if (!(_hx_tmp3)) {
HXLINE(1630)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1630)			_hx_tmp2 = ((( (int)(lhs->b->__get(pos2)) ) | (( (int)(lhs->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1630)			_hx_tmp2 = true;
            		}
HXDLIN(1630)		if (!(_hx_tmp2)) {
HXLINE(1630)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)			_hx_tmp1 = ((( (int)(lhs->b->__get(pos3)) ) | (( (int)(lhs->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1630)			_hx_tmp1 = true;
            		}
HXDLIN(1630)		if (!(_hx_tmp1)) {
HXLINE(1630)			_hx_tmp = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1630)			_hx_tmp = true;
            		}
HXDLIN(1630)		if (!(_hx_tmp)) {
HXLINE(1630)			int _g = 0;
HXDLIN(1630)			int _g1 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1630)			while((_g < _g1)){
HXLINE(1630)				_g = (_g + 1);
HXDLIN(1630)				int x = (_g - 1);
HXDLIN(1630)				{
HXLINE(1630)					int _g2 = 0;
HXDLIN(1630)					int _g3 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1630)					while((_g2 < _g3)){
HXLINE(1630)						_g2 = (_g2 + 1);
HXDLIN(1630)						int y = (_g2 - 1);
HXLINE(1631)						{
HXLINE(1630)							int position = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1630)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1631)							int position1 = (((y * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1631)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1631)							int color = (((((( (int)(lhs->b->__get(position)) ) << 24) | (( (int)(lhs->b->__get((position + 1))) ) << 16)) | (( (int)(lhs->b->__get((position + 2))) ) << 8)) | ( (int)(lhs->b->__get((position + 3))) )) | ((((( (int)(rhs->b->__get(position1)) ) << 24) | (( (int)(rhs->b->__get((position1 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position1 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position1 + 3))) )));
HXDLIN(1631)							{
HXLINE(1631)								int position2 = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1631)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1631)								lhs->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1631)								lhs->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1631)								lhs->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1631)								lhs->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1630)			int _g4 = 0;
HXDLIN(1630)			int _g5 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1630)			while((_g4 < _g5)){
HXLINE(1630)				_g4 = (_g4 + 1);
HXDLIN(1630)				int x1 = (_g4 - 1);
HXDLIN(1630)				{
HXLINE(1630)					int _g6 = 0;
HXDLIN(1630)					int _g7 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1630)					while((_g6 < _g7)){
HXLINE(1630)						_g6 = (_g6 + 1);
HXDLIN(1630)						int y1 = (_g6 - 1);
HXDLIN(1630)						 ::vision::ds::ImageView v = null();
HXDLIN(1630)						bool _hx_tmp4;
HXDLIN(1630)						bool _hx_tmp5;
HXDLIN(1630)						bool _hx_tmp6;
HXDLIN(1630)						bool _hx_tmp7;
HXDLIN(1630)						bool _hx_tmp8;
HXDLIN(1630)						bool _hx_tmp9;
HXDLIN(1630)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1630)						if (((( (int)(lhs->b->__get(pos4)) ) | (( (int)(lhs->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1630)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)							_hx_tmp9 = ((( (int)(lhs->b->__get(pos5)) ) | (( (int)(lhs->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1630)							_hx_tmp9 = true;
            						}
HXDLIN(1630)						if (!(_hx_tmp9)) {
HXLINE(1630)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1630)							_hx_tmp8 = ((( (int)(lhs->b->__get(pos6)) ) | (( (int)(lhs->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1630)							_hx_tmp8 = true;
            						}
HXDLIN(1630)						if (!(_hx_tmp8)) {
HXLINE(1630)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)							_hx_tmp7 = ((( (int)(lhs->b->__get(pos7)) ) | (( (int)(lhs->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1630)							_hx_tmp7 = true;
            						}
HXDLIN(1630)						if (!(_hx_tmp7)) {
HXLINE(1630)							_hx_tmp6 = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1630)							_hx_tmp6 = true;
            						}
HXDLIN(1630)						if (!(_hx_tmp6)) {
HXLINE(1630)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1630)							_hx_tmp5 = false;
            						}
HXDLIN(1630)						if (_hx_tmp5) {
HXLINE(1630)							bool _hx_tmp10;
HXDLIN(1630)							bool _hx_tmp11;
HXDLIN(1630)							if ((x1 >= 0)) {
HXLINE(1630)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1630)								_hx_tmp11 = false;
            							}
HXDLIN(1630)							if (_hx_tmp11) {
HXLINE(1630)								_hx_tmp10 = (x1 < (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1630)								_hx_tmp10 = false;
            							}
HXDLIN(1630)							if (_hx_tmp10) {
HXLINE(1630)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1630)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1630)							bool has = false;
HXDLIN(1630)							 ::vision::ds::ImageView view;
HXDLIN(1630)							if (::hx::IsNotNull( v )) {
HXLINE(1630)								view = v;
            							}
            							else {
HXLINE(1630)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1630)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1630)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1630)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(lhs->b->__get(pos8)) ) | (( (int)(lhs->b->__get((pos8 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos9)) ) | (( (int)(lhs->b->__get((pos9 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos10)) ) | (( (int)(lhs->b->__get((pos10 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos11)) ) | (( (int)(lhs->b->__get((pos11 + 1))) ) << 8)),lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1630)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1630)									bool has1;
HXDLIN(1630)									bool has2;
HXDLIN(1630)									if ((x1 < (view->x + view->width))) {
HXLINE(1630)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1630)										has2 = false;
            									}
HXDLIN(1630)									if (has2) {
HXLINE(1630)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1630)										has1 = false;
            									}
HXDLIN(1630)									if (has1) {
HXLINE(1630)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1630)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1630)									bool has3;
HXDLIN(1630)									bool has4;
HXDLIN(1630)									bool has5;
HXDLIN(1630)									if ((x1 < (view->x + view->width))) {
HXLINE(1630)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1630)										has5 = false;
            									}
HXDLIN(1630)									if (has5) {
HXLINE(1630)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1630)										has4 = false;
            									}
HXDLIN(1630)									if (has4) {
HXLINE(1630)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1630)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1630)									if ((view->width > view->height)) {
HXLINE(1630)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1630)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1630)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1630)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1630)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1630)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1630)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1630)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1630)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1630)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1630)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1630)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1630)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1630)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1630)										if ((view->height > view->width)) {
HXLINE(1630)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1630)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1630)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1630)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1630)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1630)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1630)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1630)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1630)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1630)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1630)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1630)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1630)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1630)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1630)											Float point1_x = ( (Float)(x1) );
HXDLIN(1630)											Float point1_y = ( (Float)(y1) );
HXDLIN(1630)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1630)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1630)											Float x6 = (point2_x - point1_x);
HXDLIN(1630)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1630)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1630)							_hx_tmp4 = has;
            						}
HXDLIN(1630)						if (_hx_tmp4) {
HXLINE(1630)							int position3 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1630)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1631)							int position4 = (((y1 * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1631)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1631)							int color1 = (((((( (int)(lhs->b->__get(position3)) ) << 24) | (( (int)(lhs->b->__get((position3 + 1))) ) << 16)) | (( (int)(lhs->b->__get((position3 + 2))) ) << 8)) | ( (int)(lhs->b->__get((position3 + 3))) )) | ((((( (int)(rhs->b->__get(position4)) ) << 24) | (( (int)(rhs->b->__get((position4 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position4 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position4 + 3))) )));
HXDLIN(1631)							{
HXLINE(1631)								int position5 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1631)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1631)								lhs->b[position5] = ( (unsigned char)(((color1 >> 24) & 255)) );
HXDLIN(1631)								lhs->b[(position5 + 1)] = ( (unsigned char)(((color1 >> 16) & 255)) );
HXDLIN(1631)								lhs->b[(position5 + 2)] = ( (unsigned char)(((color1 >> 8) & 255)) );
HXDLIN(1631)								lhs->b[(position5 + 3)] = ( (unsigned char)((color1 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1633)		return lhs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,image_or_image,return )

 ::haxe::io::Bytes Image_Impl__obj::image_xor_image( ::haxe::io::Bytes lhs, ::haxe::io::Bytes rhs){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1636_image_xor_image)
HXLINE(1637)		bool _hx_tmp;
HXDLIN(1637)		bool _hx_tmp1;
HXDLIN(1637)		bool _hx_tmp2;
HXDLIN(1637)		bool _hx_tmp3;
HXDLIN(1637)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1637)		if (((( (int)(lhs->b->__get(pos)) ) | (( (int)(lhs->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1637)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)			_hx_tmp3 = ((( (int)(lhs->b->__get(pos1)) ) | (( (int)(lhs->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1637)			_hx_tmp3 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp3)) {
HXLINE(1637)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1637)			_hx_tmp2 = ((( (int)(lhs->b->__get(pos2)) ) | (( (int)(lhs->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1637)			_hx_tmp2 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp2)) {
HXLINE(1637)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)			_hx_tmp1 = ((( (int)(lhs->b->__get(pos3)) ) | (( (int)(lhs->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1637)			_hx_tmp1 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp1)) {
HXLINE(1637)			_hx_tmp = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1637)			_hx_tmp = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp)) {
HXLINE(1637)			int _g = 0;
HXDLIN(1637)			int _g1 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1637)			while((_g < _g1)){
HXLINE(1637)				_g = (_g + 1);
HXDLIN(1637)				int x = (_g - 1);
HXDLIN(1637)				{
HXLINE(1637)					int _g2 = 0;
HXDLIN(1637)					int _g3 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1637)					while((_g2 < _g3)){
HXLINE(1637)						_g2 = (_g2 + 1);
HXDLIN(1637)						int y = (_g2 - 1);
HXLINE(1638)						{
HXLINE(1637)							int position = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1637)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1638)							int position1 = (((y * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1638)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1638)							int color = (((((( (int)(lhs->b->__get(position)) ) << 24) | (( (int)(lhs->b->__get((position + 1))) ) << 16)) | (( (int)(lhs->b->__get((position + 2))) ) << 8)) | ( (int)(lhs->b->__get((position + 3))) )) ^ ((((( (int)(rhs->b->__get(position1)) ) << 24) | (( (int)(rhs->b->__get((position1 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position1 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position1 + 3))) )));
HXDLIN(1638)							{
HXLINE(1638)								int position2 = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1638)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1638)								lhs->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1638)								lhs->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1638)								lhs->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1638)								lhs->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1637)			int _g4 = 0;
HXDLIN(1637)			int _g5 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1637)			while((_g4 < _g5)){
HXLINE(1637)				_g4 = (_g4 + 1);
HXDLIN(1637)				int x1 = (_g4 - 1);
HXDLIN(1637)				{
HXLINE(1637)					int _g6 = 0;
HXDLIN(1637)					int _g7 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1637)					while((_g6 < _g7)){
HXLINE(1637)						_g6 = (_g6 + 1);
HXDLIN(1637)						int y1 = (_g6 - 1);
HXDLIN(1637)						 ::vision::ds::ImageView v = null();
HXDLIN(1637)						bool _hx_tmp4;
HXDLIN(1637)						bool _hx_tmp5;
HXDLIN(1637)						bool _hx_tmp6;
HXDLIN(1637)						bool _hx_tmp7;
HXDLIN(1637)						bool _hx_tmp8;
HXDLIN(1637)						bool _hx_tmp9;
HXDLIN(1637)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1637)						if (((( (int)(lhs->b->__get(pos4)) ) | (( (int)(lhs->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1637)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)							_hx_tmp9 = ((( (int)(lhs->b->__get(pos5)) ) | (( (int)(lhs->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1637)							_hx_tmp9 = true;
            						}
HXDLIN(1637)						if (!(_hx_tmp9)) {
HXLINE(1637)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1637)							_hx_tmp8 = ((( (int)(lhs->b->__get(pos6)) ) | (( (int)(lhs->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1637)							_hx_tmp8 = true;
            						}
HXDLIN(1637)						if (!(_hx_tmp8)) {
HXLINE(1637)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)							_hx_tmp7 = ((( (int)(lhs->b->__get(pos7)) ) | (( (int)(lhs->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1637)							_hx_tmp7 = true;
            						}
HXDLIN(1637)						if (!(_hx_tmp7)) {
HXLINE(1637)							_hx_tmp6 = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1637)							_hx_tmp6 = true;
            						}
HXDLIN(1637)						if (!(_hx_tmp6)) {
HXLINE(1637)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1637)							_hx_tmp5 = false;
            						}
HXDLIN(1637)						if (_hx_tmp5) {
HXLINE(1637)							bool _hx_tmp10;
HXDLIN(1637)							bool _hx_tmp11;
HXDLIN(1637)							if ((x1 >= 0)) {
HXLINE(1637)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1637)								_hx_tmp11 = false;
            							}
HXDLIN(1637)							if (_hx_tmp11) {
HXLINE(1637)								_hx_tmp10 = (x1 < (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1637)								_hx_tmp10 = false;
            							}
HXDLIN(1637)							if (_hx_tmp10) {
HXLINE(1637)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1637)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1637)							bool has = false;
HXDLIN(1637)							 ::vision::ds::ImageView view;
HXDLIN(1637)							if (::hx::IsNotNull( v )) {
HXLINE(1637)								view = v;
            							}
            							else {
HXLINE(1637)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1637)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1637)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1637)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(lhs->b->__get(pos8)) ) | (( (int)(lhs->b->__get((pos8 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos9)) ) | (( (int)(lhs->b->__get((pos9 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos10)) ) | (( (int)(lhs->b->__get((pos10 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos11)) ) | (( (int)(lhs->b->__get((pos11 + 1))) ) << 8)),lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1637)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1637)									bool has1;
HXDLIN(1637)									bool has2;
HXDLIN(1637)									if ((x1 < (view->x + view->width))) {
HXLINE(1637)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1637)										has2 = false;
            									}
HXDLIN(1637)									if (has2) {
HXLINE(1637)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1637)										has1 = false;
            									}
HXDLIN(1637)									if (has1) {
HXLINE(1637)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1637)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1637)									bool has3;
HXDLIN(1637)									bool has4;
HXDLIN(1637)									bool has5;
HXDLIN(1637)									if ((x1 < (view->x + view->width))) {
HXLINE(1637)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1637)										has5 = false;
            									}
HXDLIN(1637)									if (has5) {
HXLINE(1637)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1637)										has4 = false;
            									}
HXDLIN(1637)									if (has4) {
HXLINE(1637)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1637)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1637)									if ((view->width > view->height)) {
HXLINE(1637)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1637)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1637)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1637)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1637)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1637)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1637)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1637)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1637)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1637)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1637)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1637)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1637)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1637)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1637)										if ((view->height > view->width)) {
HXLINE(1637)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1637)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1637)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1637)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1637)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1637)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1637)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1637)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1637)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1637)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1637)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1637)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1637)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1637)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1637)											Float point1_x = ( (Float)(x1) );
HXDLIN(1637)											Float point1_y = ( (Float)(y1) );
HXDLIN(1637)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1637)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1637)											Float x6 = (point2_x - point1_x);
HXDLIN(1637)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1637)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1637)							_hx_tmp4 = has;
            						}
HXDLIN(1637)						if (_hx_tmp4) {
HXLINE(1637)							int position3 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1637)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1638)							int position4 = (((y1 * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1638)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1638)							int color1 = (((((( (int)(lhs->b->__get(position3)) ) << 24) | (( (int)(lhs->b->__get((position3 + 1))) ) << 16)) | (( (int)(lhs->b->__get((position3 + 2))) ) << 8)) | ( (int)(lhs->b->__get((position3 + 3))) )) ^ ((((( (int)(rhs->b->__get(position4)) ) << 24) | (( (int)(rhs->b->__get((position4 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position4 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position4 + 3))) )));
HXDLIN(1638)							{
HXLINE(1638)								int position5 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1638)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1638)								lhs->b[position5] = ( (unsigned char)(((color1 >> 24) & 255)) );
HXDLIN(1638)								lhs->b[(position5 + 1)] = ( (unsigned char)(((color1 >> 16) & 255)) );
HXDLIN(1638)								lhs->b[(position5 + 2)] = ( (unsigned char)(((color1 >> 8) & 255)) );
HXDLIN(1638)								lhs->b[(position5 + 3)] = ( (unsigned char)((color1 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1640)		return lhs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,image_xor_image,return )

 ::haxe::io::Bytes Image_Impl__obj::image_and_image( ::haxe::io::Bytes lhs, ::haxe::io::Bytes rhs){
            	HX_GC_STACKFRAME(&_hx_pos_5ba47b0100a54121_1643_image_and_image)
HXLINE(1644)		bool _hx_tmp;
HXDLIN(1644)		bool _hx_tmp1;
HXDLIN(1644)		bool _hx_tmp2;
HXDLIN(1644)		bool _hx_tmp3;
HXDLIN(1644)		int pos = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1644)		if (((( (int)(lhs->b->__get(pos)) ) | (( (int)(lhs->b->__get((pos + 1))) ) << 8)) == 0)) {
HXLINE(1644)			int pos1 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)			_hx_tmp3 = ((( (int)(lhs->b->__get(pos1)) ) | (( (int)(lhs->b->__get((pos1 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1644)			_hx_tmp3 = true;
            		}
HXDLIN(1644)		if (!(_hx_tmp3)) {
HXLINE(1644)			int pos2 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1644)			_hx_tmp2 = ((( (int)(lhs->b->__get(pos2)) ) | (( (int)(lhs->b->__get((pos2 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1644)			_hx_tmp2 = true;
            		}
HXDLIN(1644)		if (!(_hx_tmp2)) {
HXLINE(1644)			int pos3 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)			_hx_tmp1 = ((( (int)(lhs->b->__get(pos3)) ) | (( (int)(lhs->b->__get((pos3 + 1))) ) << 8)) != 0);
            		}
            		else {
HXLINE(1644)			_hx_tmp1 = true;
            		}
HXDLIN(1644)		if (!(_hx_tmp1)) {
HXLINE(1644)			_hx_tmp = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            		}
            		else {
HXLINE(1644)			_hx_tmp = true;
            		}
HXDLIN(1644)		if (!(_hx_tmp)) {
HXLINE(1644)			int _g = 0;
HXDLIN(1644)			int _g1 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1644)			while((_g < _g1)){
HXLINE(1644)				_g = (_g + 1);
HXDLIN(1644)				int x = (_g - 1);
HXDLIN(1644)				{
HXLINE(1644)					int _g2 = 0;
HXDLIN(1644)					int _g3 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1644)					while((_g2 < _g3)){
HXLINE(1644)						_g2 = (_g2 + 1);
HXDLIN(1644)						int y = (_g2 - 1);
HXLINE(1645)						{
HXLINE(1644)							int position = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1644)							position = (position + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1645)							int position1 = (((y * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1645)							position1 = (position1 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1645)							int color = (((((( (int)(lhs->b->__get(position)) ) << 24) | (( (int)(lhs->b->__get((position + 1))) ) << 16)) | (( (int)(lhs->b->__get((position + 2))) ) << 8)) | ( (int)(lhs->b->__get((position + 3))) )) & ((((( (int)(rhs->b->__get(position1)) ) << 24) | (( (int)(rhs->b->__get((position1 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position1 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position1 + 3))) )));
HXDLIN(1645)							{
HXLINE(1645)								int position2 = (((y * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x) * 4);
HXDLIN(1645)								position2 = (position2 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1645)								lhs->b[position2] = ( (unsigned char)(((color >> 24) & 255)) );
HXDLIN(1645)								lhs->b[(position2 + 1)] = ( (unsigned char)(((color >> 16) & 255)) );
HXDLIN(1645)								lhs->b[(position2 + 2)] = ( (unsigned char)(((color >> 8) & 255)) );
HXDLIN(1645)								lhs->b[(position2 + 3)] = ( (unsigned char)((color & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1644)			int _g4 = 0;
HXDLIN(1644)			int _g5 = (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8));
HXDLIN(1644)			while((_g4 < _g5)){
HXLINE(1644)				_g4 = (_g4 + 1);
HXDLIN(1644)				int x1 = (_g4 - 1);
HXDLIN(1644)				{
HXLINE(1644)					int _g6 = 0;
HXDLIN(1644)					int _g7 = ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) )));
HXDLIN(1644)					while((_g6 < _g7)){
HXLINE(1644)						_g6 = (_g6 + 1);
HXDLIN(1644)						int y1 = (_g6 - 1);
HXDLIN(1644)						 ::vision::ds::ImageView v = null();
HXDLIN(1644)						bool _hx_tmp4;
HXDLIN(1644)						bool _hx_tmp5;
HXDLIN(1644)						bool _hx_tmp6;
HXDLIN(1644)						bool _hx_tmp7;
HXDLIN(1644)						bool _hx_tmp8;
HXDLIN(1644)						bool _hx_tmp9;
HXDLIN(1644)						int pos4 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1644)						if (((( (int)(lhs->b->__get(pos4)) ) | (( (int)(lhs->b->__get((pos4 + 1))) ) << 8)) == 0)) {
HXLINE(1644)							int pos5 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)							_hx_tmp9 = ((( (int)(lhs->b->__get(pos5)) ) | (( (int)(lhs->b->__get((pos5 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1644)							_hx_tmp9 = true;
            						}
HXDLIN(1644)						if (!(_hx_tmp9)) {
HXLINE(1644)							int pos6 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1644)							_hx_tmp8 = ((( (int)(lhs->b->__get(pos6)) ) | (( (int)(lhs->b->__get((pos6 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1644)							_hx_tmp8 = true;
            						}
HXDLIN(1644)						if (!(_hx_tmp8)) {
HXLINE(1644)							int pos7 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)							_hx_tmp7 = ((( (int)(lhs->b->__get(pos7)) ) | (( (int)(lhs->b->__get((pos7 + 1))) ) << 8)) != 0);
            						}
            						else {
HXLINE(1644)							_hx_tmp7 = true;
            						}
HXDLIN(1644)						if (!(_hx_tmp7)) {
HXLINE(1644)							_hx_tmp6 = (lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)) != 0);
            						}
            						else {
HXLINE(1644)							_hx_tmp6 = true;
            						}
HXDLIN(1644)						if (!(_hx_tmp6)) {
HXLINE(1644)							_hx_tmp5 = ::hx::IsNull( v );
            						}
            						else {
HXLINE(1644)							_hx_tmp5 = false;
            						}
HXDLIN(1644)						if (_hx_tmp5) {
HXLINE(1644)							bool _hx_tmp10;
HXDLIN(1644)							bool _hx_tmp11;
HXDLIN(1644)							if ((x1 >= 0)) {
HXLINE(1644)								_hx_tmp11 = (y1 >= 0);
            							}
            							else {
HXLINE(1644)								_hx_tmp11 = false;
            							}
HXDLIN(1644)							if (_hx_tmp11) {
HXLINE(1644)								_hx_tmp10 = (x1 < (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)));
            							}
            							else {
HXLINE(1644)								_hx_tmp10 = false;
            							}
HXDLIN(1644)							if (_hx_tmp10) {
HXLINE(1644)								_hx_tmp4 = (y1 < ::Math_obj::ceil((( (Float)((lhs->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8)) * 4)) ))));
            							}
            							else {
HXLINE(1644)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1644)							bool has = false;
HXDLIN(1644)							 ::vision::ds::ImageView view;
HXDLIN(1644)							if (::hx::IsNotNull( v )) {
HXLINE(1644)								view = v;
            							}
            							else {
HXLINE(1644)								int pos8 = ::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES;
HXDLIN(1644)								int pos9 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)								int pos10 = (::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES);
HXDLIN(1644)								int pos11 = ((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::DATA_GAP);
HXDLIN(1644)								view =  ::vision::ds::ImageView_obj::__alloc( HX_CTX ,(( (int)(lhs->b->__get(pos8)) ) | (( (int)(lhs->b->__get((pos8 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos9)) ) | (( (int)(lhs->b->__get((pos9 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos10)) ) | (( (int)(lhs->b->__get((pos10 + 1))) ) << 8)),(( (int)(lhs->b->__get(pos11)) ) | (( (int)(lhs->b->__get((pos11 + 1))) ) << 8)),lhs->b->__get(((::vision::ds::_Image::Image_Impl__obj::WIDTH_BYTES + ::vision::ds::_Image::Image_Impl__obj::VIEW_XY_BYTES) + ::vision::ds::_Image::Image_Impl__obj::VIEW_WH_BYTES)));
            							}
HXDLIN(1644)							switch((int)(view->shape)){
            								case (int)0: {
HXLINE(1644)									bool has1;
HXDLIN(1644)									bool has2;
HXDLIN(1644)									if ((x1 < (view->x + view->width))) {
HXLINE(1644)										has2 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1644)										has2 = false;
            									}
HXDLIN(1644)									if (has2) {
HXLINE(1644)										has1 = (x1 >= view->x);
            									}
            									else {
HXLINE(1644)										has1 = false;
            									}
HXDLIN(1644)									if (has1) {
HXLINE(1644)										has = (y1 >= view->y);
            									}
            									else {
HXLINE(1644)										has = false;
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1644)									bool has3;
HXDLIN(1644)									bool has4;
HXDLIN(1644)									bool has5;
HXDLIN(1644)									if ((x1 < (view->x + view->width))) {
HXLINE(1644)										has5 = (y1 < (view->y + view->height));
            									}
            									else {
HXLINE(1644)										has5 = false;
            									}
HXDLIN(1644)									if (has5) {
HXLINE(1644)										has4 = (x1 >= view->x);
            									}
            									else {
HXLINE(1644)										has4 = false;
            									}
HXDLIN(1644)									if (has4) {
HXLINE(1644)										has3 = (y1 >= view->y);
            									}
            									else {
HXLINE(1644)										has3 = false;
            									}
HXLINE(1400)									has = !(has3);
            								}
            								break;
            								case (int)2: case (int)3: {
HXLINE(1644)									if ((view->width > view->height)) {
HXLINE(1644)										Float a = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1644)										Float b = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1644)										Float c = ::Math_obj::sqrt(((a * a) - (b * b)));
HXDLIN(1644)										Float f1_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) - c);
HXDLIN(1644)										Float f1_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1644)										Float f2_x = ((view->x + (( (Float)(view->width) ) / ( (Float)(2) ))) + c);
HXDLIN(1644)										Float f2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1644)										::cpp::Int64 p = _hx_int64_make(x1,y1);
HXDLIN(1644)										Float x2 = (( (Float)(_hx_int64_high(p)) ) - f1_x);
HXDLIN(1644)										Float y2 = (( (Float)(_hx_int64_low(p)) ) - f1_y);
HXDLIN(1644)										Float has6 = ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)));
HXDLIN(1644)										Float x3 = (( (Float)(_hx_int64_high(p)) ) - f2_x);
HXDLIN(1644)										Float y3 = (( (Float)(_hx_int64_low(p)) ) - f2_y);
HXLINE(1415)										has = ((has6 + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3)))) <= view->width);
HXLINE(1644)										if ((view->shape == 3)) {
HXLINE(1416)											has = !(has);
            										}
            									}
            									else {
HXLINE(1644)										if ((view->height > view->width)) {
HXLINE(1644)											Float a1 = (( (Float)(view->height) ) / ( (Float)(2) ));
HXDLIN(1644)											Float b1 = (( (Float)(view->width) ) / ( (Float)(2) ));
HXDLIN(1644)											Float c1 = ::Math_obj::sqrt(((a1 * a1) - (b1 * b1)));
HXDLIN(1644)											Float f1_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1644)											Float f1_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) - c1);
HXDLIN(1644)											Float f2_x1 = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1644)											Float f2_y1 = ((view->y + (( (Float)(view->height) ) / ( (Float)(2) ))) + c1);
HXDLIN(1644)											::cpp::Int64 p1 = _hx_int64_make(x1,y1);
HXDLIN(1644)											Float x4 = (( (Float)(_hx_int64_high(p1)) ) - f1_x1);
HXDLIN(1644)											Float y4 = (( (Float)(_hx_int64_low(p1)) ) - f1_y1);
HXDLIN(1644)											Float has7 = ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)));
HXDLIN(1644)											Float x5 = (( (Float)(_hx_int64_high(p1)) ) - f2_x1);
HXDLIN(1644)											Float y5 = (( (Float)(_hx_int64_low(p1)) ) - f2_y1);
HXLINE(1424)											has = ((has7 + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5)))) <= view->height);
HXLINE(1644)											if ((view->shape == 3)) {
HXLINE(1425)												has = !(has);
            											}
            										}
            										else {
HXLINE(1644)											Float point1_x = ( (Float)(x1) );
HXDLIN(1644)											Float point1_y = ( (Float)(y1) );
HXDLIN(1644)											Float point2_x = (view->x + (( (Float)(view->width) ) / ( (Float)(2) )));
HXDLIN(1644)											Float point2_y = (view->y + (( (Float)(view->height) ) / ( (Float)(2) )));
HXDLIN(1644)											Float x6 = (point2_x - point1_x);
HXDLIN(1644)											Float y6 = (point2_y - point1_y);
HXLINE(1428)											has = (::Math_obj::sqrt(((x6 * x6) + (y6 * y6))) <= (( (Float)(view->width) ) / ( (Float)(2) )));
HXLINE(1644)											if ((view->shape == 3)) {
HXLINE(1429)												has = !(has);
            											}
            										}
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1401)									has = (((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1402)									has = !((((::Math_obj::abs((( (Float)((x1 - view->x)) ) - (( (Float)(view->width) ) / ( (Float)(2) )))) / (( (Float)(view->width) ) / ( (Float)(2) ))) + (::Math_obj::abs((( (Float)((y1 - view->y)) ) - (( (Float)(view->height) ) / ( (Float)(2) )))) / (( (Float)(view->height) ) / ( (Float)(2) )))) <= 1));
            								}
            								break;
            							}
HXLINE(1644)							_hx_tmp4 = has;
            						}
HXDLIN(1644)						if (_hx_tmp4) {
HXLINE(1644)							int position3 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1644)							position3 = (position3 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXLINE(1645)							int position4 = (((y1 * (( (int)(rhs->b->__get(0)) ) | (( (int)(rhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1645)							position4 = (position4 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1645)							int color1 = (((((( (int)(lhs->b->__get(position3)) ) << 24) | (( (int)(lhs->b->__get((position3 + 1))) ) << 16)) | (( (int)(lhs->b->__get((position3 + 2))) ) << 8)) | ( (int)(lhs->b->__get((position3 + 3))) )) & ((((( (int)(rhs->b->__get(position4)) ) << 24) | (( (int)(rhs->b->__get((position4 + 1))) ) << 16)) | (( (int)(rhs->b->__get((position4 + 2))) ) << 8)) | ( (int)(rhs->b->__get((position4 + 3))) )));
HXDLIN(1645)							{
HXLINE(1645)								int position5 = (((y1 * (( (int)(lhs->b->__get(0)) ) | (( (int)(lhs->b->__get(1)) ) << 8))) + x1) * 4);
HXDLIN(1645)								position5 = (position5 + ::vision::ds::_Image::Image_Impl__obj::OFFSET);
HXDLIN(1645)								lhs->b[position5] = ( (unsigned char)(((color1 >> 24) & 255)) );
HXDLIN(1645)								lhs->b[(position5 + 1)] = ( (unsigned char)(((color1 >> 16) & 255)) );
HXDLIN(1645)								lhs->b[(position5 + 2)] = ( (unsigned char)(((color1 >> 8) & 255)) );
HXDLIN(1645)								lhs->b[(position5 + 3)] = ( (unsigned char)((color1 & 255)) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1647)		return lhs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_Impl__obj,image_and_image,return )


Image_Impl__obj::Image_Impl__obj()
{
}

bool Image_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flip") ) { outValue = flip_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stamp") ) { outValue = stamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mirror") ) { outValue = mirror_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"center") ) { outValue = center_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasView") ) { outValue = hasView_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setView") ) { outValue = setView_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getView") ) { outValue = getView_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_view") ) { outValue = get_view_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_view") ) { outValue = set_view_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasPixel") ) { outValue = hasPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawLine") ) { outValue = drawLine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawRect") ) { outValue = drawRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { outValue = get_width_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"movePixel") ) { outValue = movePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawRay2D") ) { outValue = drawRay2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillColor") ) { outValue = fillColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"to2DArray") ) { outValue = to2DArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { outValue = get_height_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paintPixel") ) { outValue = paintPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawLine2D") ) { outValue = drawLine2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillCircle") ) { outValue = fillCircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { outValue = drawCircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeView") ) { outValue = removeView_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyPixelTo") ) { outValue = copyPixelTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { outValue = drawEllipse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"from2DArray") ) { outValue = from2DArray_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getSafePixel") ) { outValue = getSafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setSafePixel") ) { outValue = setSafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forEachPixel") ) { outValue = forEachPixel_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"moveSafePixel") ) { outValue = moveSafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyPixelFrom") ) { outValue = copyPixelFrom_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_underlying") ) { outValue = get_underlying_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getUnsafePixel") ) { outValue = getUnsafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setUnsafePixel") ) { outValue = setUnsafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paintSafePixel") ) { outValue = paintSafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillUntilColor") ) { outValue = fillUntilColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasPixelInView") ) { outValue = hasPixelInView_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image_or_image") ) { outValue = image_or_image_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"moveUnsafePixel") ) { outValue = moveUnsafePixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImagePortion") ) { outValue = getImagePortion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setImagePortion") ) { outValue = setImagePortion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawCubicBezier") ) { outValue = drawCubicBezier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image_xor_image") ) { outValue = image_xor_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image_and_image") ) { outValue = image_and_image_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFloatingPixel") ) { outValue = getFloatingPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFloatingPixel") ) { outValue = setFloatingPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paintUnsafePixel") ) { outValue = paintUnsafePixel_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"moveFloatingPixel") ) { outValue = moveFloatingPixel_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"paintFloatingPixel") ) { outValue = paintFloatingPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillColorRecursive") ) { outValue = fillColorRecursive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forEachPixelInView") ) { outValue = forEachPixelInView_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"drawQuadraticBezier") ) { outValue = drawQuadraticBezier_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getColorFromStartingBytePos") ) { outValue = getColorFromStartingBytePos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setColorFromStartingBytePos") ) { outValue = setColorFromStartingBytePos_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Image_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Image_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Image_Impl__obj::OFFSET,HX_("OFFSET",93,43,c2,12)},
	{::hx::fsInt,(void *) &Image_Impl__obj::WIDTH_BYTES,HX_("WIDTH_BYTES",f2,e5,f6,56)},
	{::hx::fsInt,(void *) &Image_Impl__obj::VIEW_XY_BYTES,HX_("VIEW_XY_BYTES",a7,13,d3,e0)},
	{::hx::fsInt,(void *) &Image_Impl__obj::VIEW_WH_BYTES,HX_("VIEW_WH_BYTES",b7,be,b3,e4)},
	{::hx::fsInt,(void *) &Image_Impl__obj::VIEW_SHAPE_BYTES,HX_("VIEW_SHAPE_BYTES",33,85,ee,b1)},
	{::hx::fsInt,(void *) &Image_Impl__obj::DATA_GAP,HX_("DATA_GAP",21,d9,60,02)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Image_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_Impl__obj::OFFSET,"OFFSET");
	HX_MARK_MEMBER_NAME(Image_Impl__obj::WIDTH_BYTES,"WIDTH_BYTES");
	HX_MARK_MEMBER_NAME(Image_Impl__obj::VIEW_XY_BYTES,"VIEW_XY_BYTES");
	HX_MARK_MEMBER_NAME(Image_Impl__obj::VIEW_WH_BYTES,"VIEW_WH_BYTES");
	HX_MARK_MEMBER_NAME(Image_Impl__obj::VIEW_SHAPE_BYTES,"VIEW_SHAPE_BYTES");
	HX_MARK_MEMBER_NAME(Image_Impl__obj::DATA_GAP,"DATA_GAP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::OFFSET,"OFFSET");
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::WIDTH_BYTES,"WIDTH_BYTES");
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::VIEW_XY_BYTES,"VIEW_XY_BYTES");
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::VIEW_WH_BYTES,"VIEW_WH_BYTES");
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::VIEW_SHAPE_BYTES,"VIEW_SHAPE_BYTES");
	HX_VISIT_MEMBER_NAME(Image_Impl__obj::DATA_GAP,"DATA_GAP");
};

#endif

::hx::Class Image_Impl__obj::__mClass;

static ::String Image_Impl__obj_sStaticFields[] = {
	HX_("OFFSET",93,43,c2,12),
	HX_("WIDTH_BYTES",f2,e5,f6,56),
	HX_("VIEW_XY_BYTES",a7,13,d3,e0),
	HX_("VIEW_WH_BYTES",b7,be,b3,e4),
	HX_("VIEW_SHAPE_BYTES",33,85,ee,b1),
	HX_("DATA_GAP",21,d9,60,02),
	HX_("get_underlying",a6,84,a6,cf),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_view",ee,ed,09,ce),
	HX_("set_view",62,47,67,7c),
	HX_("_new",61,15,1f,3f),
	HX_("getColorFromStartingBytePos",55,52,50,f3),
	HX_("setColorFromStartingBytePos",61,31,e9,35),
	HX_("getPixel",10,d6,7a,22),
	HX_("getSafePixel",83,fe,4f,c7),
	HX_("getUnsafePixel",8a,3b,3e,c5),
	HX_("getFloatingPixel",6a,a1,1d,1c),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setSafePixel",f7,21,49,dc),
	HX_("setFloatingPixel",de,8e,5f,72),
	HX_("setUnsafePixel",fe,23,5e,e5),
	HX_("paintPixel",08,22,2e,19),
	HX_("paintFloatingPixel",62,a5,71,91),
	HX_("paintSafePixel",7b,a6,64,6c),
	HX_("paintUnsafePixel",82,d1,c6,56),
	HX_("hasPixel",cc,10,fc,4e),
	HX_("movePixel",b5,95,6a,80),
	HX_("moveSafePixel",a8,f4,a8,d2),
	HX_("moveFloatingPixel",0f,0e,fd,93),
	HX_("moveUnsafePixel",ef,c4,5c,11),
	HX_("copyPixelFrom",9b,d8,11,5f),
	HX_("copyPixelTo",6c,ba,1b,de),
	HX_("getImagePortion",82,c0,5e,96),
	HX_("setImagePortion",8e,3d,2a,92),
	HX_("drawLine",18,c2,1c,5c),
	HX_("drawRay2D",98,05,33,ac),
	HX_("drawLine2D",ea,a3,63,2e),
	HX_("fillRect",47,45,b9,6c),
	HX_("drawRect",48,f7,10,60),
	HX_("drawQuadraticBezier",73,f1,0b,d4),
	HX_("drawCubicBezier",65,47,86,a4),
	HX_("fillCircle",f3,f8,a7,59),
	HX_("drawCircle",34,ed,d0,97),
	HX_("drawEllipse",3a,85,ce,54),
	HX_("fillColorRecursive",72,f7,44,4b),
	HX_("fillColor",e0,97,03,19),
	HX_("fillUntilColor",48,60,4d,c9),
	HX_("clone",5d,13,63,48),
	HX_("mirror",3f,72,aa,55),
	HX_("flip",ad,12,be,43),
	HX_("stamp",03,70,0b,84),
	HX_("resize",f4,59,7b,08),
	HX_("rotate",5b,46,20,cb),
	HX_("toString",ac,d0,6e,38),
	HX_("forEachPixel",7c,c4,c9,3a),
	HX_("forEachPixelInView",86,ce,23,4a),
	HX_("iterator",ee,49,9a,93),
	HX_("center",d5,25,db,05),
	HX_("hasView",df,52,93,1d),
	HX_("setView",27,73,d3,13),
	HX_("getView",1b,e2,d1,20),
	HX_("removeView",c9,6c,6e,cb),
	HX_("hasPixelInView",d6,36,cc,ed),
	HX_("from2DArray",3d,d4,21,d3),
	HX_("to2DArray",4c,a8,75,6a),
	HX_("fromBytes",a1,f2,20,72),
	HX_("image_or_image",a3,58,c8,7e),
	HX_("image_xor_image",53,77,40,00),
	HX_("image_and_image",8f,17,31,8d),
	::String(null())
};

void Image_Impl__obj::__register()
{
	Image_Impl__obj _hx_dummy;
	Image_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds._Image.Image_Impl_",a2,fd,34,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Image_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Image_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Image_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_39_boot)
HXDLIN(  39)		OFFSET = 11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_41_boot)
HXDLIN(  41)		WIDTH_BYTES = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_42_boot)
HXDLIN(  42)		VIEW_XY_BYTES = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_43_boot)
HXDLIN(  43)		VIEW_WH_BYTES = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_44_boot)
HXDLIN(  44)		VIEW_SHAPE_BYTES = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5ba47b0100a54121_45_boot)
HXDLIN(  45)		DATA_GAP = 2;
            	}
}

} // end namespace vision
} // end namespace ds
} // end namespace _Image
