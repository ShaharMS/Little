// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_exceptions_ArgumentException
#include <haxe/exceptions/ArgumentException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ConstantPool
#include <little/interpreter/memory/ConstantPool.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_12_new,"little.interpreter.memory.ConstantPool","new",0x410edb53,"little.interpreter.memory.ConstantPool.new","little/interpreter/memory/ConstantPool.hx",12,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_49_get,"little.interpreter.memory.ConstantPool","get",0x41098b89,"little.interpreter.memory.ConstantPool.get","little/interpreter/memory/ConstantPool.hx",49,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_62_get,"little.interpreter.memory.ConstantPool","get",0x41098b89,"little.interpreter.memory.ConstantPool.get","little/interpreter/memory/ConstantPool.hx",62,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_74_getFromPointer,"little.interpreter.memory.ConstantPool","getFromPointer",0x2722bb6a,"little.interpreter.memory.ConstantPool.getFromPointer","little/interpreter/memory/ConstantPool.hx",74,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_86_getFromPointer,"little.interpreter.memory.ConstantPool","getFromPointer",0x2722bb6a,"little.interpreter.memory.ConstantPool.getFromPointer","little/interpreter/memory/ConstantPool.hx",86,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_98_hasPointer,"little.interpreter.memory.ConstantPool","hasPointer",0x3bd231f0,"little.interpreter.memory.ConstantPool.hasPointer","little/interpreter/memory/ConstantPool.hx",98,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_106_hasType,"little.interpreter.memory.ConstantPool","hasType",0xc2b413a7,"little.interpreter.memory.ConstantPool.hasType","little/interpreter/memory/ConstantPool.hx",106,0x78ff879e)
HX_LOCAL_STACK_FRAME(_hx_pos_26fdaee3ec5068bd_118_getType,"little.interpreter.memory.ConstantPool","getType",0xc5f2a2e3,"little.interpreter.memory.ConstantPool.getType","little/interpreter/memory/ConstantPool.hx",118,0x78ff879e)
namespace little{
namespace interpreter{
namespace memory{

void ConstantPool_obj::__construct( ::little::interpreter::memory::Memory memory){
            	HX_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_12_new)
HXLINE(  32)		this->EMPTY_STRING = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(19);
HXLINE(  31)		this->EXTERN = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(18);
HXLINE(  30)		this->ERROR_TOKEN = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(17);
HXLINE(  29)		this->UNKNOWN = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(16);
HXLINE(  28)		this->TYPE = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(15);
HXLINE(  27)		this->DYNAMIC = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(14);
HXLINE(  26)		this->BOOL = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(13);
HXLINE(  25)		this->FLOAT = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(12);
HXLINE(  24)		this->INT = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(11);
HXLINE(  22)		this->ZERO = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(3);
HXLINE(  21)		this->TRUE = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(2);
HXLINE(  20)		this->FALSE = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(1);
HXLINE(  19)		this->_hx_NULL = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0);
HXLINE(  17)		this->capacity = 24;
HXLINE(  38)		{
HXLINE(  38)			int _g = 0;
HXDLIN(  38)			int _g1 = this->capacity;
HXDLIN(  38)			while((_g < _g1)){
HXLINE(  38)				_g = (_g + 1);
HXDLIN(  38)				int i = (_g - 1);
HXDLIN(  38)				memory->storage->reserved->b[i] = ( (unsigned char)(1) );
            			}
            		}
HXLINE(  39)		memory->storage->setByte(this->TRUE,1);
            	}

Dynamic ConstantPool_obj::__CreateEmpty() { return new ConstantPool_obj; }

void *ConstantPool_obj::_hx_vtable = 0;

Dynamic ConstantPool_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ConstantPool_obj > _hx_result = new ConstantPool_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ConstantPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x601f2761;
}

int ConstantPool_obj::get( ::little::interpreter::InterpTokens token){
            	HX_GC_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_49_get)
HXLINE(  60)		bool _hx_tmp;
HXLINE(  59)		bool _hx_tmp1;
HXLINE(  58)		bool _hx_tmp2;
HXLINE(  57)		bool _hx_tmp3;
HXLINE(  56)		bool _hx_tmp4;
HXLINE(  55)		bool _hx_tmp5;
HXLINE(  49)		switch((int)(token->_hx_getIndex())){
            			case (int)7: {
HXLINE(  55)				 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)				_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)				if ((_hx_tmp5 == true)) {
HXLINE(  55)					return this->INT;
            				}
            				else {
HXLINE(  56)					 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)					_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)					if ((_hx_tmp4 == true)) {
HXLINE(  56)						return this->FLOAT;
            					}
            					else {
HXLINE(  57)						 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)						_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)						if ((_hx_tmp3 == true)) {
HXLINE(  57)							return this->BOOL;
            						}
            						else {
HXLINE(  58)							 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)							_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)							if ((_hx_tmp2 == true)) {
HXLINE(  58)								return this->DYNAMIC;
            							}
            							else {
HXLINE(  59)								 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)								_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)								if ((_hx_tmp1 == true)) {
HXLINE(  59)									return this->TYPE;
            								}
            								else {
HXLINE(  60)									 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)									_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)									if ((_hx_tmp == true)) {
HXLINE(  60)										return this->UNKNOWN;
            									}
            									else {
            										HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            										 ::Dynamic _hx_run( ::Dynamic x){
            											HX_GC_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_62_get)
HXLINE(  62)											return x->__Field(HX_("is",ea,5b,00,00),::hx::paccDynamic)(::little::tools::InterpTokensSimple_obj::HAXE_EXTERN_dyn());
            										}
            										HX_END_LOCAL_FUNC1(return)

HXLINE(  62)										if (::hx::IsEq( ::Type_obj::enumParameters(token->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >())->__get(0)->__Field(HX_("filter",b8,1f,35,85),::hx::paccDynamic)( ::Dynamic(new _hx_Closure_0())),true )) {
HXLINE(  62)											 ::little::tools::BaseOrderedMap p = token->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN(  62)											return this->EXTERN;
            										}
            										else {
HXLINE(  63)											::String _hx_tmp6 = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" does not exist in the constant pool",8b,37,10,56));
HXDLIN(  63)											HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp6,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),63,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("get",96,80,4e,00))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			break;
            			case (int)16: {
HXLINE(  53)				if ((token->_hx_getInt(0) == 0)) {
HXLINE(  53)					return this->ZERO;
            				}
            				else {
HXLINE(  55)					 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)					_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)					if ((_hx_tmp5 == true)) {
HXLINE(  55)						return this->INT;
            					}
            					else {
HXLINE(  56)						 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)						_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)						if ((_hx_tmp4 == true)) {
HXLINE(  56)							return this->FLOAT;
            						}
            						else {
HXLINE(  57)							 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)							_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)							if ((_hx_tmp3 == true)) {
HXLINE(  57)								return this->BOOL;
            							}
            							else {
HXLINE(  58)								 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)								_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)								if ((_hx_tmp2 == true)) {
HXLINE(  58)									return this->DYNAMIC;
            								}
            								else {
HXLINE(  59)									 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)									_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)									if ((_hx_tmp1 == true)) {
HXLINE(  59)										return this->TYPE;
            									}
            									else {
HXLINE(  60)										 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)										_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)										if ((_hx_tmp == true)) {
HXLINE(  60)											return this->UNKNOWN;
            										}
            										else {
HXLINE(  63)											::String _hx_tmp7 = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" does not exist in the constant pool",8b,37,10,56));
HXDLIN(  63)											HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp7,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),63,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("get",96,80,4e,00))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			break;
            			case (int)17: {
HXLINE(  53)				if ((token->_hx_getFloat(0) == ((Float)0.))) {
HXLINE(  53)					return this->ZERO;
            				}
            				else {
HXLINE(  55)					 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)					_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)					if ((_hx_tmp5 == true)) {
HXLINE(  55)						return this->INT;
            					}
            					else {
HXLINE(  56)						 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)						_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)						if ((_hx_tmp4 == true)) {
HXLINE(  56)							return this->FLOAT;
            						}
            						else {
HXLINE(  57)							 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)							_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)							if ((_hx_tmp3 == true)) {
HXLINE(  57)								return this->BOOL;
            							}
            							else {
HXLINE(  58)								 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)								_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)								if ((_hx_tmp2 == true)) {
HXLINE(  58)									return this->DYNAMIC;
            								}
            								else {
HXLINE(  59)									 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)									_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)									if ((_hx_tmp1 == true)) {
HXLINE(  59)										return this->TYPE;
            									}
            									else {
HXLINE(  60)										 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)										_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)										if ((_hx_tmp == true)) {
HXLINE(  60)											return this->UNKNOWN;
            										}
            										else {
HXLINE(  63)											::String _hx_tmp8 = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" does not exist in the constant pool",8b,37,10,56));
HXDLIN(  63)											HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp8,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),63,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("get",96,80,4e,00))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			break;
            			case (int)18: {
HXLINE(  54)				if ((token->_hx_getString(0) == HX_("",00,00,00,00))) {
HXLINE(  54)					return this->EMPTY_STRING;
            				}
            				else {
HXLINE(  55)					 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)					_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)					if ((_hx_tmp5 == true)) {
HXLINE(  55)						return this->INT;
            					}
            					else {
HXLINE(  56)						 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)						_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)						if ((_hx_tmp4 == true)) {
HXLINE(  56)							return this->FLOAT;
            						}
            						else {
HXLINE(  57)							 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)							_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)							if ((_hx_tmp3 == true)) {
HXLINE(  57)								return this->BOOL;
            							}
            							else {
HXLINE(  58)								 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)								_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)								if ((_hx_tmp2 == true)) {
HXLINE(  58)									return this->DYNAMIC;
            								}
            								else {
HXLINE(  59)									 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)									_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)									if ((_hx_tmp1 == true)) {
HXLINE(  59)										return this->TYPE;
            									}
            									else {
HXLINE(  60)										 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)										_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)										if ((_hx_tmp == true)) {
HXLINE(  60)											return this->UNKNOWN;
            										}
            										else {
HXLINE(  63)											::String _hx_tmp9 = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" does not exist in the constant pool",8b,37,10,56));
HXDLIN(  63)											HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp9,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),63,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("get",96,80,4e,00))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			break;
            			case (int)22: {
HXLINE(  50)				return this->_hx_NULL;
            			}
            			break;
            			case (int)23: {
HXLINE(  52)				return this->TRUE;
            			}
            			break;
            			case (int)24: {
HXLINE(  51)				return this->FALSE;
            			}
            			break;
            			case (int)27: {
HXLINE(  61)				::String _g = token->_hx_getString(0);
HXLINE(  55)				 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)				_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)				if ((_hx_tmp5 == true)) {
HXLINE(  55)					return this->INT;
            				}
            				else {
HXLINE(  56)					 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)					_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)					if ((_hx_tmp4 == true)) {
HXLINE(  56)						return this->FLOAT;
            					}
            					else {
HXLINE(  57)						 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)						_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)						if ((_hx_tmp3 == true)) {
HXLINE(  57)							return this->BOOL;
            						}
            						else {
HXLINE(  58)							 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)							_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)							if ((_hx_tmp2 == true)) {
HXLINE(  58)								return this->DYNAMIC;
            							}
            							else {
HXLINE(  59)								 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)								_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)								if ((_hx_tmp1 == true)) {
HXLINE(  59)									return this->TYPE;
            								}
            								else {
HXLINE(  60)									 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)									_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)									if ((_hx_tmp == true)) {
HXLINE(  60)										return this->UNKNOWN;
            									}
            									else {
HXLINE(  61)										return this->ERROR_TOKEN;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			break;
            			default:{
HXLINE(  55)				 ::little::interpreter::InterpTokens b61111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
HXDLIN(  55)				_hx_tmp5 = __hxcpp_enum_eq(token,b61111);
HXDLIN(  55)				if ((_hx_tmp5 == true)) {
HXLINE(  55)					return this->INT;
            				}
            				else {
HXLINE(  56)					 ::little::interpreter::InterpTokens b111111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN(  56)					_hx_tmp4 = __hxcpp_enum_eq(token,b111111);
HXDLIN(  56)					if ((_hx_tmp4 == true)) {
HXLINE(  56)						return this->FLOAT;
            					}
            					else {
HXLINE(  57)						 ::little::interpreter::InterpTokens b211111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN(  57)						_hx_tmp3 = __hxcpp_enum_eq(token,b211111);
HXDLIN(  57)						if ((_hx_tmp3 == true)) {
HXLINE(  57)							return this->BOOL;
            						}
            						else {
HXLINE(  58)							 ::little::interpreter::InterpTokens b311111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN(  58)							_hx_tmp2 = __hxcpp_enum_eq(token,b311111);
HXDLIN(  58)							if ((_hx_tmp2 == true)) {
HXLINE(  58)								return this->DYNAMIC;
            							}
            							else {
HXLINE(  59)								 ::little::interpreter::InterpTokens b411111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN(  59)								_hx_tmp1 = __hxcpp_enum_eq(token,b411111);
HXDLIN(  59)								if ((_hx_tmp1 == true)) {
HXLINE(  59)									return this->TYPE;
            								}
            								else {
HXLINE(  60)									 ::little::interpreter::InterpTokens b511111 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN(  60)									_hx_tmp = __hxcpp_enum_eq(token,b511111);
HXDLIN(  60)									if ((_hx_tmp == true)) {
HXLINE(  60)										return this->UNKNOWN;
            									}
            									else {
HXLINE(  63)										::String _hx_tmp10 = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" does not exist in the constant pool",8b,37,10,56));
HXDLIN(  63)										HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp10,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),63,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("get",96,80,4e,00))));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  49)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConstantPool_obj,get,return )

 ::little::interpreter::InterpTokens ConstantPool_obj::getFromPointer(int pointer){
            	HX_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_74_getFromPointer)
HXDLIN(  74)		switch((int)(pointer)){
            			case (int)0: {
HXLINE(  75)				return ::little::interpreter::InterpTokens_obj::NullValue_dyn();
            			}
            			break;
            			case (int)1: {
HXLINE(  76)				return ::little::interpreter::InterpTokens_obj::FalseValue_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE(  77)				return ::little::interpreter::InterpTokens_obj::TrueValue_dyn();
            			}
            			break;
            			case (int)3: {
HXLINE(  78)				return ::little::interpreter::InterpTokens_obj::Number(0);
            			}
            			break;
            			case (int)11: {
HXLINE(  79)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_INT);
            			}
            			break;
            			case (int)12: {
HXLINE(  80)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_FLOAT);
            			}
            			break;
            			case (int)13: {
HXLINE(  81)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_BOOLEAN);
            			}
            			break;
            			case (int)14: {
HXLINE(  82)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_DYNAMIC);
            			}
            			break;
            			case (int)15: {
HXLINE(  83)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_MODULE);
            			}
            			break;
            			case (int)16: {
HXLINE(  84)				return ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->TYPE_UNKNOWN);
            			}
            			break;
            			case (int)17: {
HXLINE(  85)				return ::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Default value for error message",2a,89,6a,f1));
            			}
            			break;
            			case (int)18: {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::little::interpreter::InterpTokens _hx_run(){
            					HX_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_86_getFromPointer)
HXLINE(  86)					return ::little::interpreter::InterpTokens_obj::Characters(HX_("Default value for external haxe code",b7,cb,c6,e6));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE(  86)				return ::little::interpreter::InterpTokens_obj::HaxeExtern( ::Dynamic(new _hx_Closure_0()));
            			}
            			break;
            			case (int)19: {
HXLINE(  87)				return ::little::interpreter::InterpTokens_obj::Characters(HX_("",00,00,00,00));
            			}
            			break;
            			default:{
HXLINE(  88)				HX_STACK_DO_THROW(((HX_("pointer ",c3,e4,66,ac) + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)) + HX_(" not in constant pool",6a,85,69,9a)));
            			}
            		}
HXLINE(  74)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConstantPool_obj,getFromPointer,return )

bool ConstantPool_obj::hasPointer(int pointer){
            	HX_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_98_hasPointer)
HXDLIN(  98)		if ((pointer < this->capacity)) {
HXDLIN(  98)			return (pointer >= 0);
            		}
            		else {
HXDLIN(  98)			return false;
            		}
HXDLIN(  98)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConstantPool_obj,hasPointer,return )

bool ConstantPool_obj::hasType(::String typeName){
            	HX_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_106_hasType)
HXLINE( 112)		bool _hx_tmp;
HXLINE( 111)		bool _hx_tmp1;
HXLINE( 110)		bool _hx_tmp2;
HXLINE( 109)		bool _hx_tmp3;
HXLINE( 108)		bool _hx_tmp4;
HXLINE( 107)		if (((typeName == ::little::Little_obj::keywords->TYPE_INT) == true)) {
HXLINE( 107)			return true;
            		}
            		else {
HXLINE( 108)			_hx_tmp4 = (typeName == ::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN( 108)			if ((_hx_tmp4 == true)) {
HXLINE( 108)				return true;
            			}
            			else {
HXLINE( 109)				_hx_tmp3 = (typeName == ::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN( 109)				if ((_hx_tmp3 == true)) {
HXLINE( 109)					return true;
            				}
            				else {
HXLINE( 110)					_hx_tmp2 = (typeName == ::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN( 110)					if ((_hx_tmp2 == true)) {
HXLINE( 110)						return true;
            					}
            					else {
HXLINE( 111)						_hx_tmp1 = (typeName == ::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN( 111)						if ((_hx_tmp1 == true)) {
HXLINE( 111)							return true;
            						}
            						else {
HXLINE( 112)							_hx_tmp = (typeName == ::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN( 112)							if ((_hx_tmp == true)) {
HXLINE( 112)								return true;
            							}
            							else {
HXLINE( 113)								return false;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 107)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConstantPool_obj,hasType,return )

int ConstantPool_obj::getType(::String typeName){
            	HX_GC_STACKFRAME(&_hx_pos_26fdaee3ec5068bd_118_getType)
HXLINE( 124)		bool _hx_tmp;
HXLINE( 123)		bool _hx_tmp1;
HXLINE( 122)		bool _hx_tmp2;
HXLINE( 121)		bool _hx_tmp3;
HXLINE( 120)		bool _hx_tmp4;
HXLINE( 119)		if (((typeName == ::little::Little_obj::keywords->TYPE_INT) == true)) {
HXLINE( 119)			return this->INT;
            		}
            		else {
HXLINE( 120)			_hx_tmp4 = (typeName == ::little::Little_obj::keywords->TYPE_FLOAT);
HXDLIN( 120)			if ((_hx_tmp4 == true)) {
HXLINE( 120)				return this->FLOAT;
            			}
            			else {
HXLINE( 121)				_hx_tmp3 = (typeName == ::little::Little_obj::keywords->TYPE_BOOLEAN);
HXDLIN( 121)				if ((_hx_tmp3 == true)) {
HXLINE( 121)					return this->BOOL;
            				}
            				else {
HXLINE( 122)					_hx_tmp2 = (typeName == ::little::Little_obj::keywords->TYPE_DYNAMIC);
HXDLIN( 122)					if ((_hx_tmp2 == true)) {
HXLINE( 122)						return this->DYNAMIC;
            					}
            					else {
HXLINE( 123)						_hx_tmp1 = (typeName == ::little::Little_obj::keywords->TYPE_MODULE);
HXDLIN( 123)						if ((_hx_tmp1 == true)) {
HXLINE( 123)							return this->TYPE;
            						}
            						else {
HXLINE( 124)							_hx_tmp = (typeName == ::little::Little_obj::keywords->TYPE_UNKNOWN);
HXDLIN( 124)							if ((_hx_tmp == true)) {
HXLINE( 124)								return this->UNKNOWN;
            							}
            							else {
HXLINE( 125)								HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("typeName",25,76,ca,b5),((HX_("",00,00,00,00) + typeName) + HX_(" does not exist in the constant pool",8b,37,10,56)),null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/ConstantPool.hx",73,a9,89,69),125,HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2),HX_("getType",70,a2,8b,1f))));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 119)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConstantPool_obj,getType,return )


::hx::ObjectPtr< ConstantPool_obj > ConstantPool_obj::__new( ::little::interpreter::memory::Memory memory) {
	::hx::ObjectPtr< ConstantPool_obj > __this = new ConstantPool_obj();
	__this->__construct(memory);
	return __this;
}

::hx::ObjectPtr< ConstantPool_obj > ConstantPool_obj::__alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory) {
	ConstantPool_obj *__this = (ConstantPool_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ConstantPool_obj), false, "little.interpreter.memory.ConstantPool"));
	*(void **)__this = ConstantPool_obj::_hx_vtable;
	__this->__construct(memory);
	return __this;
}

ConstantPool_obj::ConstantPool_obj()
{
}

::hx::Val ConstantPool_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"INT") ) { return ::hx::Val( INT ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"NULL") ) { return ::hx::Val( _hx_NULL ); }
		if (HX_FIELD_EQ(inName,"TRUE") ) { return ::hx::Val( TRUE ); }
		if (HX_FIELD_EQ(inName,"ZERO") ) { return ::hx::Val( ZERO ); }
		if (HX_FIELD_EQ(inName,"BOOL") ) { return ::hx::Val( BOOL ); }
		if (HX_FIELD_EQ(inName,"TYPE") ) { return ::hx::Val( TYPE ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FALSE") ) { return ::hx::Val( FALSE ); }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { return ::hx::Val( FLOAT ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"EXTERN") ) { return ::hx::Val( EXTERN ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"DYNAMIC") ) { return ::hx::Val( DYNAMIC ); }
		if (HX_FIELD_EQ(inName,"UNKNOWN") ) { return ::hx::Val( UNKNOWN ); }
		if (HX_FIELD_EQ(inName,"hasType") ) { return ::hx::Val( hasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getType") ) { return ::hx::Val( getType_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { return ::hx::Val( capacity ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasPointer") ) { return ::hx::Val( hasPointer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ERROR_TOKEN") ) { return ::hx::Val( ERROR_TOKEN ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"EMPTY_STRING") ) { return ::hx::Val( EMPTY_STRING ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getFromPointer") ) { return ::hx::Val( getFromPointer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ConstantPool_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"INT") ) { INT=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"NULL") ) { _hx_NULL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TRUE") ) { TRUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ZERO") ) { ZERO=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL") ) { BOOL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TYPE") ) { TYPE=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FALSE") ) { FALSE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { FLOAT=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"EXTERN") ) { EXTERN=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"DYNAMIC") ) { DYNAMIC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNKNOWN") ) { UNKNOWN=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ERROR_TOKEN") ) { ERROR_TOKEN=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"EMPTY_STRING") ) { EMPTY_STRING=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConstantPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("capacity",3a,01,bb,c3));
	outFields->push(HX_("NULL",87,66,cf,33));
	outFields->push(HX_("FALSE",83,6d,3d,79));
	outFields->push(HX_("TRUE",4e,6f,c4,37));
	outFields->push(HX_("ZERO",28,d7,b1,3b));
	outFields->push(HX_("INT",cf,a8,37,00));
	outFields->push(HX_("FLOAT",7c,fd,84,80));
	outFields->push(HX_("BOOL",2a,4c,dc,2b));
	outFields->push(HX_("DYNAMIC",5f,73,e9,b5));
	outFields->push(HX_("TYPE",ba,ba,c9,37));
	outFields->push(HX_("UNKNOWN",6a,f7,4e,61));
	outFields->push(HX_("ERROR_TOKEN",c2,33,93,6b));
	outFields->push(HX_("EXTERN",60,81,9d,79));
	outFields->push(HX_("EMPTY_STRING",a3,4b,ae,de));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ConstantPool_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,capacity),HX_("capacity",3a,01,bb,c3)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,_hx_NULL),HX_("NULL",87,66,cf,33)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,FALSE),HX_("FALSE",83,6d,3d,79)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,TRUE),HX_("TRUE",4e,6f,c4,37)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,ZERO),HX_("ZERO",28,d7,b1,3b)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,INT),HX_("INT",cf,a8,37,00)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,FLOAT),HX_("FLOAT",7c,fd,84,80)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,BOOL),HX_("BOOL",2a,4c,dc,2b)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,DYNAMIC),HX_("DYNAMIC",5f,73,e9,b5)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,TYPE),HX_("TYPE",ba,ba,c9,37)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,UNKNOWN),HX_("UNKNOWN",6a,f7,4e,61)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,ERROR_TOKEN),HX_("ERROR_TOKEN",c2,33,93,6b)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,EXTERN),HX_("EXTERN",60,81,9d,79)},
	{::hx::fsInt,(int)offsetof(ConstantPool_obj,EMPTY_STRING),HX_("EMPTY_STRING",a3,4b,ae,de)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ConstantPool_obj_sStaticStorageInfo = 0;
#endif

static ::String ConstantPool_obj_sMemberFields[] = {
	HX_("capacity",3a,01,bb,c3),
	HX_("NULL",87,66,cf,33),
	HX_("FALSE",83,6d,3d,79),
	HX_("TRUE",4e,6f,c4,37),
	HX_("ZERO",28,d7,b1,3b),
	HX_("INT",cf,a8,37,00),
	HX_("FLOAT",7c,fd,84,80),
	HX_("BOOL",2a,4c,dc,2b),
	HX_("DYNAMIC",5f,73,e9,b5),
	HX_("TYPE",ba,ba,c9,37),
	HX_("UNKNOWN",6a,f7,4e,61),
	HX_("ERROR_TOKEN",c2,33,93,6b),
	HX_("EXTERN",60,81,9d,79),
	HX_("EMPTY_STRING",a3,4b,ae,de),
	HX_("get",96,80,4e,00),
	HX_("getFromPointer",7d,77,00,71),
	HX_("hasPointer",83,a8,d5,db),
	HX_("hasType",34,13,4d,1c),
	HX_("getType",70,a2,8b,1f),
	::String(null()) };

::hx::Class ConstantPool_obj::__mClass;

void ConstantPool_obj::__register()
{
	ConstantPool_obj _hx_dummy;
	ConstantPool_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.ConstantPool",e1,35,6c,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ConstantPool_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ConstantPool_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConstantPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConstantPool_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
