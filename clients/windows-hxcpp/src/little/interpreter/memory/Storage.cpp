// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_exceptions_ArgumentException
#include <haxe/exceptions/ArgumentException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_hash_Murmur1
#include <haxe/hash/Murmur1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_ByteCode
#include <little/interpreter/ByteCode.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ConstantPool
#include <little/interpreter/memory/ConstantPool.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_HashTables
#include <little/interpreter/memory/HashTables.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_Extensions
#include <little/tools/Extensions.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif
#ifndef INCLUDED_little_tools__OrderedMap_OrderedMap_Impl_
#include <little/tools/_OrderedMap/OrderedMap_Impl_.h>
#endif
#ifndef INCLUDED_vision_ds__ByteArray_ByteArray_Impl_
#include <vision/ds/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26d96d6b91584f71_32_new,"little.interpreter.memory.Storage","new",0x1722df4c,"little.interpreter.memory.Storage.new","little/interpreter/memory/Storage.hx",32,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_44_requestMemory,"little.interpreter.memory.Storage","requestMemory",0x06e1719c,"little.interpreter.memory.Storage.requestMemory","little/interpreter/memory/Storage.hx",44,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_58_storeByte,"little.interpreter.memory.Storage","storeByte",0xbb976b75,"little.interpreter.memory.Storage.storeByte","little/interpreter/memory/Storage.hx",58,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_77_setByte,"little.interpreter.memory.Storage","setByte",0xafa654b6,"little.interpreter.memory.Storage.setByte","little/interpreter/memory/Storage.hx",77,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_88_readByte,"little.interpreter.memory.Storage","readByte",0x9f325312,"little.interpreter.memory.Storage.readByte","little/interpreter/memory/Storage.hx",88,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_95_freeByte,"little.interpreter.memory.Storage","freeByte",0x3a400768,"little.interpreter.memory.Storage.freeByte","little/interpreter/memory/Storage.hx",95,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_106_storeBytes,"little.interpreter.memory.Storage","storeBytes",0x68e69b5e,"little.interpreter.memory.Storage.storeBytes","little/interpreter/memory/Storage.hx",106,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_130_setBytes,"little.interpreter.memory.Storage","setBytes",0x01e3cafd,"little.interpreter.memory.Storage.setBytes","little/interpreter/memory/Storage.hx",130,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_142_readBytes,"little.interpreter.memory.Storage","readBytes",0xacd65d21,"little.interpreter.memory.Storage.readBytes","little/interpreter/memory/Storage.hx",142,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_158_freeBytes,"little.interpreter.memory.Storage","freeBytes",0xbdc6740b,"little.interpreter.memory.Storage.freeBytes","little/interpreter/memory/Storage.hx",158,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_172_storeArray,"little.interpreter.memory.Storage","storeArray",0xd0de008c,"little.interpreter.memory.Storage.storeArray","little/interpreter/memory/Storage.hx",172,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_194_setArray,"little.interpreter.memory.Storage","setArray",0x69db302b,"little.interpreter.memory.Storage.setArray","little/interpreter/memory/Storage.hx",194,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_214_readArray,"little.interpreter.memory.Storage","readArray",0x14cdc24f,"little.interpreter.memory.Storage.readArray","little/interpreter/memory/Storage.hx",214,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_234_freeArray,"little.interpreter.memory.Storage","freeArray",0x25bdd939,"little.interpreter.memory.Storage.freeArray","little/interpreter/memory/Storage.hx",234,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_245_storeInt16,"little.interpreter.memory.Storage","storeInt16",0x696f2487,"little.interpreter.memory.Storage.storeInt16","little/interpreter/memory/Storage.hx",245,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_271_setInt16,"little.interpreter.memory.Storage","setInt16",0x026c5426,"little.interpreter.memory.Storage.setInt16","little/interpreter/memory/Storage.hx",271,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_283_readInt16,"little.interpreter.memory.Storage","readInt16",0xad5ee64a,"little.interpreter.memory.Storage.readInt16","little/interpreter/memory/Storage.hx",283,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_294_freeInt16,"little.interpreter.memory.Storage","freeInt16",0xbe4efd34,"little.interpreter.memory.Storage.freeInt16","little/interpreter/memory/Storage.hx",294,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_307_storeUInt16,"little.interpreter.memory.Storage","storeUInt16",0x52813a8c,"little.interpreter.memory.Storage.storeUInt16","little/interpreter/memory/Storage.hx",307,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_316_setUInt16,"little.interpreter.memory.Storage","setUInt16",0x970db60d,"little.interpreter.memory.Storage.setUInt16","little/interpreter/memory/Storage.hx",316,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_323_readUInt16,"little.interpreter.memory.Storage","readUInt16",0x805b0369,"little.interpreter.memory.Storage.readUInt16","little/interpreter/memory/Storage.hx",323,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_333_freeUInt16,"little.interpreter.memory.Storage","freeUInt16",0x417ef93f,"little.interpreter.memory.Storage.freeUInt16","little/interpreter/memory/Storage.hx",333,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_341_storeInt32,"little.interpreter.memory.Storage","storeInt32",0x696f2641,"little.interpreter.memory.Storage.storeInt32","little/interpreter/memory/Storage.hx",341,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_367_setInt32,"little.interpreter.memory.Storage","setInt32",0x026c55e0,"little.interpreter.memory.Storage.setInt32","little/interpreter/memory/Storage.hx",367,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_383_readInt32,"little.interpreter.memory.Storage","readInt32",0xad5ee804,"little.interpreter.memory.Storage.readInt32","little/interpreter/memory/Storage.hx",383,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_393_freeInt32,"little.interpreter.memory.Storage","freeInt32",0xbe4efeee,"little.interpreter.memory.Storage.freeInt32","little/interpreter/memory/Storage.hx",393,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_405_storeUInt32,"little.interpreter.memory.Storage","storeUInt32",0x52813c46,"little.interpreter.memory.Storage.storeUInt32","little/interpreter/memory/Storage.hx",405,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_414_setUInt32,"little.interpreter.memory.Storage","setUInt32",0x970db7c7,"little.interpreter.memory.Storage.setUInt32","little/interpreter/memory/Storage.hx",414,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_423_readUInt32,"little.interpreter.memory.Storage","readUInt32",0x805b0523,"little.interpreter.memory.Storage.readUInt32","little/interpreter/memory/Storage.hx",423,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_431_freeUInt32,"little.interpreter.memory.Storage","freeUInt32",0x417efaf9,"little.interpreter.memory.Storage.freeUInt32","little/interpreter/memory/Storage.hx",431,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_439_storeDouble,"little.interpreter.memory.Storage","storeDouble",0x6c3d2cbe,"little.interpreter.memory.Storage.storeDouble","little/interpreter/memory/Storage.hx",439,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_467_setDouble,"little.interpreter.memory.Storage","setDouble",0xb0c9a83f,"little.interpreter.memory.Storage.setDouble","little/interpreter/memory/Storage.hx",467,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_479_readDouble,"little.interpreter.memory.Storage","readDouble",0x9a16f59b,"little.interpreter.memory.Storage.readDouble","little/interpreter/memory/Storage.hx",479,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_489_freeDouble,"little.interpreter.memory.Storage","freeDouble",0x5b3aeb71,"little.interpreter.memory.Storage.freeDouble","little/interpreter/memory/Storage.hx",489,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_501_storePointer,"little.interpreter.memory.Storage","storePointer",0x5b713670,"little.interpreter.memory.Storage.storePointer","little/interpreter/memory/Storage.hx",501,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_510_setPointer,"little.interpreter.memory.Storage","setPointer",0x11d0cbcf,"little.interpreter.memory.Storage.setPointer","little/interpreter/memory/Storage.hx",510,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_519_readPointer,"little.interpreter.memory.Storage","readPointer",0x4c272ef3,"little.interpreter.memory.Storage.readPointer","little/interpreter/memory/Storage.hx",519,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_527_freePointer,"little.interpreter.memory.Storage","freePointer",0x8a7a545d,"little.interpreter.memory.Storage.freePointer","little/interpreter/memory/Storage.hx",527,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_535_storeString,"little.interpreter.memory.Storage","storeString",0x4aa22a7e,"little.interpreter.memory.Storage.storeString","little/interpreter/memory/Storage.hx",535,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_566_setString,"little.interpreter.memory.Storage","setString",0x8f2ea5ff,"little.interpreter.memory.Storage.setString","little/interpreter/memory/Storage.hx",566,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_581_readString,"little.interpreter.memory.Storage","readString",0x787bf35b,"little.interpreter.memory.Storage.readString","little/interpreter/memory/Storage.hx",581,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_591_freeString,"little.interpreter.memory.Storage","freeString",0x399fe931,"little.interpreter.memory.Storage.freeString","little/interpreter/memory/Storage.hx",591,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_605_storeCodeBlock,"little.interpreter.memory.Storage","storeCodeBlock",0x1e315953,"little.interpreter.memory.Storage.storeCodeBlock","little/interpreter/memory/Storage.hx",605,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_618_setCodeBlock,"little.interpreter.memory.Storage","setCodeBlock",0xdba84472,"little.interpreter.memory.Storage.setCodeBlock","little/interpreter/memory/Storage.hx",618,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_633_readCodeBlock,"little.interpreter.memory.Storage","readCodeBlock",0x22b8b896,"little.interpreter.memory.Storage.readCodeBlock","little/interpreter/memory/Storage.hx",633,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_641_freeCodeBlock,"little.interpreter.memory.Storage","freeCodeBlock",0xf82f8c80,"little.interpreter.memory.Storage.freeCodeBlock","little/interpreter/memory/Storage.hx",641,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_650_storeCondition,"little.interpreter.memory.Storage","storeCondition",0xd192720e,"little.interpreter.memory.Storage.storeCondition","little/interpreter/memory/Storage.hx",650,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_662_setCondition,"little.interpreter.memory.Storage","setCondition",0x8f095d2d,"little.interpreter.memory.Storage.setCondition","little/interpreter/memory/Storage.hx",662,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_675_readCondition,"little.interpreter.memory.Storage","readCondition",0xd619d151,"little.interpreter.memory.Storage.readCondition","little/interpreter/memory/Storage.hx",675,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_683_freeCondition,"little.interpreter.memory.Storage","freeCondition",0xab90a53b,"little.interpreter.memory.Storage.freeCondition","little/interpreter/memory/Storage.hx",683,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_691_storeSign,"little.interpreter.memory.Storage","storeSign",0xc6c7dcaa,"little.interpreter.memory.Storage.storeSign","little/interpreter/memory/Storage.hx",691,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_700_setSign,"little.interpreter.memory.Storage","setSign",0xbad6c5eb,"little.interpreter.memory.Storage.setSign","little/interpreter/memory/Storage.hx",700,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_708_readSign,"little.interpreter.memory.Storage","readSign",0xaa62c447,"little.interpreter.memory.Storage.readSign","little/interpreter/memory/Storage.hx",708,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_718_freeSign,"little.interpreter.memory.Storage","freeSign",0x4570789d,"little.interpreter.memory.Storage.freeSign","little/interpreter/memory/Storage.hx",718,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_727_storeStatic,"little.interpreter.memory.Storage","storeStatic",0x3f6dde5b,"little.interpreter.memory.Storage.storeStatic","little/interpreter/memory/Storage.hx",727,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_749_storeObject,"little.interpreter.memory.Storage","storeObject",0x4eb1806c,"little.interpreter.memory.Storage.storeObject","little/interpreter/memory/Storage.hx",749,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_817_setObject,"little.interpreter.memory.Storage","setObject",0x933dfbed,"little.interpreter.memory.Storage.setObject","little/interpreter/memory/Storage.hx",817,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_873_readObject,"little.interpreter.memory.Storage","readObject",0x7c8b4949,"little.interpreter.memory.Storage.readObject","little/interpreter/memory/Storage.hx",873,0xb43e2923)
static const ::String _hx_array_data_f9de895a_84[] = {
	HX_("<object>",e3,27,22,ea),
};
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_896_freeObject,"little.interpreter.memory.Storage","freeObject",0x3daf3f1f,"little.interpreter.memory.Storage.freeObject","little/interpreter/memory/Storage.hx",896,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_911_storeType,"little.interpreter.memory.Storage","storeType",0xc77d3f27,"little.interpreter.memory.Storage.storeType","little/interpreter/memory/Storage.hx",911,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_988_setType,"little.interpreter.memory.Storage","setType",0xbb8c2868,"little.interpreter.memory.Storage.setType","little/interpreter/memory/Storage.hx",988,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_1062_readType,"little.interpreter.memory.Storage","readType",0xab1826c4,"little.interpreter.memory.Storage.readType","little/interpreter/memory/Storage.hx",1062,0xb43e2923)
HX_LOCAL_STACK_FRAME(_hx_pos_26d96d6b91584f71_1131_freeType,"little.interpreter.memory.Storage","freeType",0x4625db1a,"little.interpreter.memory.Storage.freeType","little/interpreter/memory/Storage.hx",1131,0xb43e2923)
namespace little{
namespace interpreter{
namespace memory{

void Storage_obj::__construct( ::little::interpreter::memory::Memory memory){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_32_new)
HXLINE(  33)		this->parent = memory;
HXLINE(  35)		int length = this->parent->memoryChunkSize;
HXDLIN(  35)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN(  35)		this1->fill(0,length,0);
HXDLIN(  35)		this->storage = this1;
HXLINE(  36)		int length1 = this->parent->memoryChunkSize;
HXDLIN(  36)		 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN(  36)		this2->fill(0,length1,0);
HXDLIN(  36)		this->reserved = this2;
HXLINE(  37)		this->reserved->fill(0,this->parent->memoryChunkSize,0);
            	}

Dynamic Storage_obj::__CreateEmpty() { return new Storage_obj; }

void *Storage_obj::_hx_vtable = 0;

Dynamic Storage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Storage_obj > _hx_result = new Storage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Storage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c1107da;
}

void Storage_obj::requestMemory(){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_44_requestMemory)
HXLINE(  45)		if ((this->storage->length > this->parent->maxMemorySize)) {
HXLINE(  46)			::haxe::Log_obj::trace(this->storage->length, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("little.interpreter.memory.Storage",5a,89,de,f9))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,this->parent->maxMemorySize))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("requestMemory",b0,03,6a,c0))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),46)));
HXLINE(  47)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Out of memory",b8,0c,30,79)),HX_("Memory, Storage",e6,ab,0b,93));
            		}
HXLINE(  49)		{
HXLINE(  49)			 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this->storage->length + this->parent->memoryChunkSize));
HXDLIN(  49)			 ::haxe::io::Bytes _hx_tmp = this->storage;
HXDLIN(  49)			::Array< int > values = ::Array_obj< int >::__new(2)->init(0,newBytes->length)->init(1,this->storage->length);
HXDLIN(  49)			int min = values->__get(0);
HXDLIN(  49)			{
HXLINE(  49)				int _g = 0;
HXDLIN(  49)				int _g1 = values->length;
HXDLIN(  49)				while((_g < _g1)){
HXLINE(  49)					_g = (_g + 1);
HXDLIN(  49)					int i = (_g - 1);
HXDLIN(  49)					if ((values->__get(i) < min)) {
HXLINE(  49)						min = values->__get(i);
            					}
            				}
            			}
HXDLIN(  49)			newBytes->blit(0,_hx_tmp,0,min);
HXDLIN(  49)			this->storage = newBytes;
            		}
HXLINE(  50)		{
HXLINE(  50)			 ::haxe::io::Bytes newBytes1 = ::haxe::io::Bytes_obj::alloc((this->reserved->length + this->parent->memoryChunkSize));
HXDLIN(  50)			 ::haxe::io::Bytes _hx_tmp1 = this->reserved;
HXDLIN(  50)			::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,newBytes1->length)->init(1,this->reserved->length);
HXDLIN(  50)			int min1 = values1->__get(0);
HXDLIN(  50)			{
HXLINE(  50)				int _g2 = 0;
HXDLIN(  50)				int _g3 = values1->length;
HXDLIN(  50)				while((_g2 < _g3)){
HXLINE(  50)					_g2 = (_g2 + 1);
HXDLIN(  50)					int i1 = (_g2 - 1);
HXDLIN(  50)					if ((values1->__get(i1) < min1)) {
HXLINE(  50)						min1 = values1->__get(i1);
            					}
            				}
            			}
HXDLIN(  50)			newBytes1->blit(0,_hx_tmp1,0,min1);
HXDLIN(  50)			this->reserved = newBytes1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Storage_obj,requestMemory,(void))

int Storage_obj::storeByte(int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_58_storeByte)
HXLINE(  59)		if ((b == 0)) {
HXLINE(  59)			return this->parent->constants->ZERO;
            		}
HXLINE(  63)		int i = this->parent->constants->capacity;
HXLINE(  64)		while(true){
HXLINE(  64)			bool _hx_tmp;
HXDLIN(  64)			if ((i < this->reserved->length)) {
HXLINE(  64)				_hx_tmp = (this->reserved->b->__get(i) != 0);
            			}
            			else {
HXLINE(  64)				_hx_tmp = false;
            			}
HXDLIN(  64)			if (!(_hx_tmp)) {
HXLINE(  64)				goto _hx_goto_4;
            			}
HXDLIN(  64)			i = (i + 1);
            		}
            		_hx_goto_4:;
HXLINE(  65)		if ((i >= this->reserved->length)) {
HXLINE(  65)			this->requestMemory();
            		}
HXLINE(  66)		this->storage->b[i] = ( (unsigned char)(b) );
HXLINE(  67)		this->reserved->b[i] = ( (unsigned char)(1) );
HXLINE(  69)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeByte,return )

void Storage_obj::setByte(int address,int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_77_setByte)
HXLINE(  78)		this->storage->b[address] = ( (unsigned char)(b) );
HXLINE(  79)		this->reserved->b[address] = ( (unsigned char)(1) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setByte,(void))

int Storage_obj::readByte(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_88_readByte)
HXDLIN(  88)		return ( (int)(this->storage->b->__get(address)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readByte,return )

void Storage_obj::freeByte(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_95_freeByte)
HXLINE(  96)		this->storage->b[address] = ( (unsigned char)(0) );
HXLINE(  97)		this->reserved->b[address] = ( (unsigned char)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeByte,(void))

int Storage_obj::storeBytes(int size, ::haxe::io::Bytes b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_106_storeBytes)
HXLINE( 107)		int i = this->parent->constants->capacity;
HXLINE( 109)		while(true){
HXLINE( 109)			bool _hx_tmp;
HXDLIN( 109)			if ((i < (this->reserved->length - size))) {
HXLINE( 109)				 ::haxe::io::Bytes this1 = this->reserved;
HXDLIN( 109)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(size);
HXDLIN( 109)				this2->fill(0,size,0);
HXDLIN( 109)				 ::haxe::io::Bytes array = this2;
HXDLIN( 109)				array->blit(0,this1,i,size);
HXDLIN( 109)				_hx_tmp = !(::vision::ds::_ByteArray::ByteArray_Impl__obj::isEmpty(array));
            			}
            			else {
HXLINE( 109)				_hx_tmp = false;
            			}
HXDLIN( 109)			if (!(_hx_tmp)) {
HXLINE( 109)				goto _hx_goto_9;
            			}
HXDLIN( 109)			i = (i + 1);
            		}
            		_hx_goto_9:;
HXLINE( 110)		if ((i >= (this->reserved->length - size))) {
HXLINE( 111)			this->requestMemory();
HXLINE( 112)			i = (i + size);
HXLINE( 113)			while(((i + size) > this->reserved->length)){
HXLINE( 113)				this->requestMemory();
            			}
            		}
HXLINE( 116)		{
HXLINE( 116)			int _g = 0;
HXDLIN( 116)			int _g1 = size;
HXDLIN( 116)			while((_g < _g1)){
HXLINE( 116)				_g = (_g + 1);
HXDLIN( 116)				int j = (_g - 1);
HXLINE( 117)				{
HXLINE( 117)					int value;
HXDLIN( 117)					if ((j > b->length)) {
HXLINE( 117)						value = 0;
            					}
            					else {
HXLINE( 117)						value = ( (int)(b->b->__get(j)) );
            					}
HXDLIN( 117)					this->storage->b[(i + j)] = ( (unsigned char)(value) );
            				}
HXLINE( 118)				this->reserved->b[(i + j)] = ( (unsigned char)(1) );
            			}
            		}
HXLINE( 121)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,storeBytes,return )

void Storage_obj::setBytes(int address, ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_130_setBytes)
HXDLIN( 130)		int _g = 0;
HXDLIN( 130)		int _g1 = bytes->length;
HXDLIN( 130)		while((_g < _g1)){
HXDLIN( 130)			_g = (_g + 1);
HXDLIN( 130)			int j = (_g - 1);
HXLINE( 131)			this->storage->b[(address + j)] = bytes->b->__get(j);
HXLINE( 132)			this->reserved->b[(address + j)] = ( (unsigned char)(1) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setBytes,(void))

 ::haxe::io::Bytes Storage_obj::readBytes(int address,int size){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_142_readBytes)
HXLINE( 143)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 143)			return null();
            		}
HXLINE( 144)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(size);
HXDLIN( 144)		this1->fill(0,size,0);
HXDLIN( 144)		 ::haxe::io::Bytes bytes = this1;
HXLINE( 145)		{
HXLINE( 145)			int _g = 0;
HXDLIN( 145)			int _g1 = size;
HXDLIN( 145)			while((_g < _g1)){
HXLINE( 145)				_g = (_g + 1);
HXDLIN( 145)				int j = (_g - 1);
HXLINE( 146)				bytes->b[j] = this->storage->b->__get((address + j));
            			}
            		}
HXLINE( 149)		return bytes;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,readBytes,return )

void Storage_obj::freeBytes(int address,int size){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_158_freeBytes)
HXDLIN( 158)		int _g = 0;
HXDLIN( 158)		int _g1 = size;
HXDLIN( 158)		while((_g < _g1)){
HXDLIN( 158)			_g = (_g + 1);
HXDLIN( 158)			int j = (_g - 1);
HXLINE( 159)			this->storage->b[(address + j)] = ( (unsigned char)(0) );
HXLINE( 160)			this->reserved->b[(address + j)] = ( (unsigned char)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,freeBytes,(void))

int Storage_obj::storeArray(int length,int elementSize, ::haxe::io::Bytes defaultElement){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_172_storeArray)
HXLINE( 173)		int size = (elementSize * length);
HXLINE( 174)		int length1 = ((size + 4) + 4);
HXDLIN( 174)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN( 174)		this1->fill(0,length1,0);
HXDLIN( 174)		 ::haxe::io::Bytes bytes = this1;
HXLINE( 175)		if (::hx::IsNotNull( defaultElement )) {
HXLINE( 176)			int _g = 0;
HXDLIN( 176)			int _g1 = length;
HXDLIN( 176)			while((_g < _g1)){
HXLINE( 176)				_g = (_g + 1);
HXDLIN( 176)				int i = (_g - 1);
HXLINE( 177)				bytes->blit((i + 4),defaultElement,0,defaultElement->length);
            			}
            		}
HXLINE( 181)		{
HXLINE( 181)			bytes->b[0] = ( (unsigned char)(length) );
HXDLIN( 181)			bytes->b[1] = ( (unsigned char)((length >> 8)) );
HXDLIN( 181)			bytes->b[2] = ( (unsigned char)((length >> 16)) );
HXDLIN( 181)			bytes->b[3] = ( (unsigned char)(::hx::UShr(length,24)) );
            		}
HXLINE( 182)		{
HXLINE( 182)			bytes->b[4] = ( (unsigned char)(elementSize) );
HXDLIN( 182)			bytes->b[5] = ( (unsigned char)((elementSize >> 8)) );
HXDLIN( 182)			bytes->b[6] = ( (unsigned char)((elementSize >> 16)) );
HXDLIN( 182)			bytes->b[7] = ( (unsigned char)(::hx::UShr(elementSize,24)) );
            		}
HXLINE( 184)		return this->storeBytes(bytes->length,bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Storage_obj,storeArray,return )

void Storage_obj::setArray(int address,int length,int elementSize, ::haxe::io::Bytes defaultElement){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_194_setArray)
HXLINE( 195)		int size = (elementSize * length);
HXLINE( 196)		int length1 = ((size + 4) + 4);
HXDLIN( 196)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN( 196)		this1->fill(0,length1,0);
HXDLIN( 196)		 ::haxe::io::Bytes bytes = this1;
HXLINE( 197)		if (::hx::IsNotNull( defaultElement )) {
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			int _g1 = length;
HXDLIN( 198)			while((_g < _g1)){
HXLINE( 198)				_g = (_g + 1);
HXDLIN( 198)				int i = (_g - 1);
HXLINE( 199)				bytes->blit((i + 8),defaultElement,0,defaultElement->length);
            			}
            		}
HXLINE( 203)		{
HXLINE( 203)			bytes->b[0] = ( (unsigned char)(length) );
HXDLIN( 203)			bytes->b[1] = ( (unsigned char)((length >> 8)) );
HXDLIN( 203)			bytes->b[2] = ( (unsigned char)((length >> 16)) );
HXDLIN( 203)			bytes->b[3] = ( (unsigned char)(::hx::UShr(length,24)) );
            		}
HXLINE( 204)		{
HXLINE( 204)			bytes->b[4] = ( (unsigned char)(elementSize) );
HXDLIN( 204)			bytes->b[5] = ( (unsigned char)((elementSize >> 8)) );
HXDLIN( 204)			bytes->b[6] = ( (unsigned char)((elementSize >> 16)) );
HXDLIN( 204)			bytes->b[7] = ( (unsigned char)(::hx::UShr(elementSize,24)) );
            		}
HXLINE( 206)		this->setBytes(address,bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Storage_obj,setArray,(void))

::Array< ::Dynamic> Storage_obj::readArray(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_214_readArray)
HXLINE( 215)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 215)			return null();
            		}
HXLINE( 216)		int length = this->readInt32(address);
HXLINE( 217)		int elementSize = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((address + 4)));
HXLINE( 218)		address = (address + 8);
HXLINE( 220)		::Array< ::Dynamic> array = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 222)		{
HXLINE( 222)			int _g = 0;
HXDLIN( 222)			int _g1 = length;
HXDLIN( 222)			while((_g < _g1)){
HXLINE( 222)				_g = (_g + 1);
HXDLIN( 222)				int i = (_g - 1);
HXLINE( 223)				array->push(this->readBytes(address,elementSize));
HXLINE( 224)				address = (address + elementSize);
            			}
            		}
HXLINE( 227)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readArray,return )

void Storage_obj::freeArray(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_234_freeArray)
HXLINE( 235)		int length = this->readInt32(address);
HXLINE( 236)		int elementSize = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((address + 4)));
HXLINE( 237)		this->freeBytes(address,((length * elementSize) + 8));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeArray,(void))

int Storage_obj::storeInt16(int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_245_storeInt16)
HXLINE( 246)		if ((b == 0)) {
HXLINE( 246)			return this->parent->constants->ZERO;
            		}
HXLINE( 250)		int i = this->parent->constants->capacity;
HXLINE( 251)		while(true){
HXLINE( 251)			bool _hx_tmp;
HXDLIN( 251)			bool _hx_tmp1;
HXDLIN( 251)			if ((i < (this->reserved->length - 1))) {
HXLINE( 251)				_hx_tmp1 = (this->reserved->b->__get(i) != 0);
            			}
            			else {
HXLINE( 251)				_hx_tmp1 = false;
            			}
HXDLIN( 251)			if (_hx_tmp1) {
HXLINE( 251)				_hx_tmp = (this->reserved->b->__get((i + 1)) != 0);
            			}
            			else {
HXLINE( 251)				_hx_tmp = false;
            			}
HXDLIN( 251)			if (!(_hx_tmp)) {
HXLINE( 251)				goto _hx_goto_26;
            			}
HXDLIN( 251)			i = (i + 1);
            		}
            		_hx_goto_26:;
HXLINE( 252)		if ((i >= (this->reserved->length - 1))) {
HXLINE( 253)			this->requestMemory();
HXLINE( 254)			i = (i + 2);
            		}
HXLINE( 257)		{
HXLINE( 258)			this->storage->b[i] = ( (unsigned char)((b & 255)) );
HXLINE( 259)			b = (b >> 8);
HXLINE( 260)			this->reserved->b[i] = ( (unsigned char)(1) );
            		}
HXLINE( 263)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeInt16,return )

void Storage_obj::setInt16(int address,int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_271_setInt16)
HXLINE( 272)		this->storage->b[address] = ( (unsigned char)((b & 255)) );
HXLINE( 273)		this->storage->b[(address + 1)] = ( (unsigned char)(((b >> 8) & 255)) );
HXLINE( 274)		this->reserved->b[address] = ( (unsigned char)(1) );
HXLINE( 275)		this->reserved->b[(address + 1)] = ( (unsigned char)(1) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setInt16,(void))

int Storage_obj::readInt16(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_283_readInt16)
HXLINE( 284)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 284)			return 0;
            		}
HXLINE( 286)		return ((this->storage->b->__get(address) + (( (int)(this->storage->b->__get((address + 1))) ) << 8)) - 32767);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readInt16,return )

void Storage_obj::freeInt16(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_294_freeInt16)
HXLINE( 295)		this->storage->b[address] = ( (unsigned char)(0) );
HXLINE( 296)		this->storage->b[(address + 1)] = ( (unsigned char)(0) );
HXLINE( 297)		this->reserved->b[address] = ( (unsigned char)(0) );
HXLINE( 298)		this->reserved->b[(address + 1)] = ( (unsigned char)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeInt16,(void))

int Storage_obj::storeUInt16(int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_307_storeUInt16)
HXDLIN( 307)		int _hx_tmp;
HXDLIN( 307)		if ((b < 0)) {
HXDLIN( 307)			_hx_tmp = (b + 32767);
            		}
            		else {
HXDLIN( 307)			_hx_tmp = b;
            		}
HXDLIN( 307)		return this->storeInt16(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeUInt16,return )

void Storage_obj::setUInt16(int address,int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_316_setUInt16)
HXDLIN( 316)		int _hx_tmp;
HXDLIN( 316)		if ((b < 0)) {
HXDLIN( 316)			_hx_tmp = (b + 32767);
            		}
            		else {
HXDLIN( 316)			_hx_tmp = b;
            		}
HXDLIN( 316)		this->setInt16(address,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setUInt16,(void))

 ::Dynamic Storage_obj::readUInt16(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_323_readUInt16)
HXLINE( 324)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 324)			return null();
            		}
HXLINE( 325)		return (this->storage->b->__get(address) + (( (int)(this->storage->b->__get((address + 1))) ) << 8));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readUInt16,return )

void Storage_obj::freeUInt16(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_333_freeUInt16)
HXDLIN( 333)		this->freeInt16(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeUInt16,(void))

int Storage_obj::storeInt32(int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_341_storeInt32)
HXLINE( 342)		if ((b == 0)) {
HXLINE( 342)			return this->parent->constants->ZERO;
            		}
HXLINE( 346)		int i = this->parent->constants->capacity;
HXLINE( 347)		while(true){
HXLINE( 347)			bool _hx_tmp;
HXDLIN( 347)			if ((i < (this->reserved->length - 3))) {
HXLINE( 347)				_hx_tmp = ((((this->reserved->b->__get(i) + this->reserved->b->__get((i + 1))) + this->reserved->b->__get((i + 2))) + this->reserved->b->__get((i + 3))) != 0);
            			}
            			else {
HXLINE( 347)				_hx_tmp = false;
            			}
HXDLIN( 347)			if (!(_hx_tmp)) {
HXLINE( 347)				goto _hx_goto_35;
            			}
HXDLIN( 347)			i = (i + 1);
            		}
            		_hx_goto_35:;
HXLINE( 348)		if ((i >= (this->reserved->length - 3))) {
HXLINE( 349)			this->requestMemory();
HXLINE( 350)			i = (i + 4);
            		}
HXLINE( 353)		{
HXLINE( 353)			{
HXLINE( 354)				this->storage->b[i] = ( (unsigned char)((b & 255)) );
HXLINE( 355)				b = (b >> 8);
HXLINE( 356)				this->reserved->b[i] = ( (unsigned char)(1) );
            			}
HXLINE( 353)			{
HXLINE( 354)				this->storage->b[(i + 1)] = ( (unsigned char)((b & 255)) );
HXLINE( 355)				b = (b >> 8);
HXLINE( 356)				this->reserved->b[(i + 1)] = ( (unsigned char)(1) );
            			}
HXLINE( 353)			{
HXLINE( 354)				this->storage->b[(i + 2)] = ( (unsigned char)((b & 255)) );
HXLINE( 355)				b = (b >> 8);
HXLINE( 356)				this->reserved->b[(i + 2)] = ( (unsigned char)(1) );
            			}
HXLINE( 353)			{
HXLINE( 354)				this->storage->b[(i + 3)] = ( (unsigned char)((b & 255)) );
HXLINE( 355)				b = (b >> 8);
HXLINE( 356)				this->reserved->b[(i + 3)] = ( (unsigned char)(1) );
            			}
            		}
HXLINE( 359)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeInt32,return )

void Storage_obj::setInt32(int address,int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_367_setInt32)
HXLINE( 368)		this->storage->b[address] = ( (unsigned char)((b & 255)) );
HXLINE( 369)		this->storage->b[(address + 1)] = ( (unsigned char)(((b >> 8) & 255)) );
HXLINE( 370)		this->storage->b[(address + 2)] = ( (unsigned char)(((b >> 16) & 255)) );
HXLINE( 371)		this->storage->b[(address + 3)] = ( (unsigned char)(((b >> 24) & 255)) );
HXLINE( 372)		this->reserved->b[address] = ( (unsigned char)(1) );
HXLINE( 373)		this->reserved->b[(address + 1)] = ( (unsigned char)(1) );
HXLINE( 374)		this->reserved->b[(address + 2)] = ( (unsigned char)(1) );
HXLINE( 375)		this->reserved->b[(address + 3)] = ( (unsigned char)(1) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setInt32,(void))

int Storage_obj::readInt32(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_383_readInt32)
HXLINE( 384)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 384)			return 0;
            		}
HXLINE( 385)		return (((this->storage->b->__get(address) + (( (int)(this->storage->b->__get((address + 1))) ) << 8)) + (( (int)(this->storage->b->__get((address + 2))) ) << 16)) + (( (int)(this->storage->b->__get((address + 3))) ) << 24));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readInt32,return )

void Storage_obj::freeInt32(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_393_freeInt32)
HXDLIN( 393)		{
HXLINE( 394)			this->storage->b[address] = ( (unsigned char)(0) );
HXLINE( 395)			this->reserved->b[address] = ( (unsigned char)(0) );
            		}
HXLINE( 393)		{
HXLINE( 394)			this->storage->b[(address + 1)] = ( (unsigned char)(0) );
HXLINE( 395)			this->reserved->b[(address + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 393)		{
HXLINE( 394)			this->storage->b[(address + 2)] = ( (unsigned char)(0) );
HXLINE( 395)			this->reserved->b[(address + 2)] = ( (unsigned char)(0) );
            		}
HXLINE( 393)		{
HXLINE( 394)			this->storage->b[(address + 3)] = ( (unsigned char)(0) );
HXLINE( 395)			this->reserved->b[(address + 3)] = ( (unsigned char)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeInt32,(void))

int Storage_obj::storeUInt32(int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_405_storeUInt32)
HXDLIN( 405)		return this->storeInt32(b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeUInt32,return )

void Storage_obj::setUInt32(int address,int b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_414_setUInt32)
HXDLIN( 414)		this->setInt32(address,b);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setUInt32,(void))

int Storage_obj::readUInt32(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_423_readUInt32)
HXDLIN( 423)		return this->readInt32(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readUInt32,return )

void Storage_obj::freeUInt32(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_431_freeUInt32)
HXDLIN( 431)		this->freeInt32(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeUInt32,(void))

int Storage_obj::storeDouble(Float b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_439_storeDouble)
HXLINE( 440)		if ((b == 0)) {
HXLINE( 440)			return this->parent->constants->ZERO;
            		}
HXLINE( 443)		int i = this->parent->constants->capacity;
HXLINE( 444)		while(true){
HXLINE( 444)			bool _hx_tmp;
HXDLIN( 444)			if ((i < (this->reserved->length - 7))) {
HXLINE( 444)				_hx_tmp = ((((((((this->reserved->b->__get(i) + this->reserved->b->__get((i + 1))) + this->reserved->b->__get((i + 2))) + this->reserved->b->__get((i + 3))) + this->reserved->b->__get((i + 4))) + this->reserved->b->__get((i + 5))) + this->reserved->b->__get((i + 6))) + this->reserved->b->__get((i + 7))) != 0);
            			}
            			else {
HXLINE( 444)				_hx_tmp = false;
            			}
HXDLIN( 444)			if (!(_hx_tmp)) {
HXLINE( 444)				goto _hx_goto_44;
            			}
HXLINE( 446)			i = (i + 1);
            		}
            		_hx_goto_44:;
HXLINE( 447)		if ((i >= (this->reserved->length - 7))) {
HXLINE( 448)			this->requestMemory();
HXLINE( 449)			i = (i + 8);
            		}
HXLINE( 452)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(8);
HXLINE( 453)		bytes->setDouble(0,b);
HXLINE( 454)		{
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[i] = bytes->b->__get(0);
HXLINE( 456)				this->reserved->b[i] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 1)] = bytes->b->__get(1);
HXLINE( 456)				this->reserved->b[(i + 1)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 2)] = bytes->b->__get(2);
HXLINE( 456)				this->reserved->b[(i + 2)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 3)] = bytes->b->__get(3);
HXLINE( 456)				this->reserved->b[(i + 3)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 4)] = bytes->b->__get(4);
HXLINE( 456)				this->reserved->b[(i + 4)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 5)] = bytes->b->__get(5);
HXLINE( 456)				this->reserved->b[(i + 5)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 6)] = bytes->b->__get(6);
HXLINE( 456)				this->reserved->b[(i + 6)] = ( (unsigned char)(1) );
            			}
HXLINE( 454)			{
HXLINE( 455)				this->storage->b[(i + 7)] = bytes->b->__get(7);
HXLINE( 456)				this->reserved->b[(i + 7)] = ( (unsigned char)(1) );
            			}
            		}
HXLINE( 459)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeDouble,return )

void Storage_obj::setDouble(int address,Float b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_467_setDouble)
HXLINE( 468)		this->storage->setDouble(address,b);
HXLINE( 469)		{
HXLINE( 470)			this->reserved->b[address] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 1)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 2)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 3)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 4)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 5)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 6)] = ( (unsigned char)(1) );
HXDLIN( 470)			this->reserved->b[(address + 7)] = ( (unsigned char)(1) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setDouble,(void))

Float Storage_obj::readDouble(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_479_readDouble)
HXLINE( 480)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 480)			return ((Float)0.0);
            		}
HXLINE( 481)		 ::haxe::io::Bytes _this = this->storage;
HXDLIN( 481)		int pos = address;
HXDLIN( 481)		bool _hx_tmp;
HXDLIN( 481)		if ((pos >= 0)) {
HXLINE( 481)			_hx_tmp = ((pos + 8) > _this->length);
            		}
            		else {
HXLINE( 481)			_hx_tmp = true;
            		}
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 481)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXDLIN( 481)		return  ::__hxcpp_memory_get_double(_this->b,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readDouble,return )

void Storage_obj::freeDouble(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_489_freeDouble)
HXDLIN( 489)		{
HXLINE( 490)			this->storage->b[address] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[address] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 1)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 1)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 2)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 2)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 3)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 3)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 4)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 4)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 5)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 5)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 6)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 6)] = ( (unsigned char)(0) );
            		}
HXLINE( 489)		{
HXLINE( 490)			this->storage->b[(address + 7)] = ( (unsigned char)(0) );
HXLINE( 491)			this->reserved->b[(address + 7)] = ( (unsigned char)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeDouble,(void))

int Storage_obj::storePointer(int p){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_501_storePointer)
HXDLIN( 501)		return this->storeInt32(p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storePointer,return )

void Storage_obj::setPointer(int address,int p){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_510_setPointer)
HXDLIN( 510)		this->setInt32(address,p);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setPointer,(void))

int Storage_obj::readPointer(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_519_readPointer)
HXDLIN( 519)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(this->readInt32(address));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readPointer,return )

void Storage_obj::freePointer(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_527_freePointer)
HXDLIN( 527)		this->freeInt32(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freePointer,(void))

int Storage_obj::storeString(::String b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_535_storeString)
HXLINE( 536)		if ((b == HX_("",00,00,00,00))) {
HXLINE( 536)			return this->parent->constants->EMPTY_STRING;
            		}
HXLINE( 537)		if (::hx::IsNull( b )) {
HXLINE( 537)			return this->parent->constants->_hx_NULL;
            		}
HXLINE( 540)		 ::haxe::io::Bytes stringBytes = ::haxe::io::Bytes_obj::ofString(b,::haxe::io::Encoding_obj::UTF8_dyn());
HXLINE( 542)		int value = stringBytes->length;
HXDLIN( 542)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 542)		this1->fill(0,4,0);
HXDLIN( 542)		 ::haxe::io::Bytes bytes = this1;
HXDLIN( 542)		{
HXLINE( 542)			bytes->b[0] = ( (unsigned char)(value) );
HXDLIN( 542)			bytes->b[1] = ( (unsigned char)((value >> 8)) );
HXDLIN( 542)			bytes->b[2] = ( (unsigned char)((value >> 16)) );
HXDLIN( 542)			bytes->b[3] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXDLIN( 542)		 ::haxe::io::Bytes this2 = bytes;
HXDLIN( 542)		 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this2->length + stringBytes->length));
HXDLIN( 542)		newBytes->blit(0,this2,0,this2->length);
HXDLIN( 542)		newBytes->blit(this2->length,stringBytes,0,stringBytes->length);
HXDLIN( 542)		 ::haxe::io::Bytes bytes1 = newBytes;
HXLINE( 545)		int i = this->parent->constants->capacity;
HXLINE( 547)		while(true){
HXLINE( 547)			bool _hx_tmp;
HXDLIN( 547)			if ((i < (this->reserved->length - bytes1->length))) {
HXLINE( 547)				 ::haxe::io::Bytes this3 = this->reserved;
HXDLIN( 547)				int length = bytes1->length;
HXDLIN( 547)				 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN( 547)				this4->fill(0,length,0);
HXDLIN( 547)				 ::haxe::io::Bytes array = this4;
HXDLIN( 547)				array->blit(0,this3,i,length);
HXDLIN( 547)				_hx_tmp = !(::vision::ds::_ByteArray::ByteArray_Impl__obj::isEmpty(array));
            			}
            			else {
HXLINE( 547)				_hx_tmp = false;
            			}
HXDLIN( 547)			if (!(_hx_tmp)) {
HXLINE( 547)				goto _hx_goto_53;
            			}
HXDLIN( 547)			i = (i + 1);
            		}
            		_hx_goto_53:;
HXLINE( 548)		if ((i >= (this->reserved->length - bytes1->length))) {
HXLINE( 549)			this->requestMemory();
HXLINE( 550)			i = (i + bytes1->length);
HXLINE( 551)			while(((i + bytes1->length) > this->reserved->length)){
HXLINE( 551)				this->requestMemory();
            			}
            		}
HXLINE( 555)		this->storage->blit(i,bytes1,0,bytes1->length);
HXLINE( 556)		{
HXLINE( 556)			 ::haxe::io::Bytes this5 = this->reserved;
HXDLIN( 556)			int length1 = bytes1->length;
HXDLIN( 556)			 ::haxe::io::Bytes this6 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN( 556)			this6->fill(0,length1,1);
HXDLIN( 556)			 ::haxe::io::Bytes array1 = this6;
HXDLIN( 556)			this5->blit(i,array1,0,array1->length);
            		}
HXLINE( 558)		return ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeString,return )

void Storage_obj::setString(int address,::String b){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_566_setString)
HXLINE( 568)		 ::haxe::io::Bytes stringBytes = ::haxe::io::Bytes_obj::ofString(b,::haxe::io::Encoding_obj::UTF8_dyn());
HXLINE( 569)		int value = stringBytes->length;
HXDLIN( 569)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 569)		this1->fill(0,4,0);
HXDLIN( 569)		 ::haxe::io::Bytes bytes = this1;
HXDLIN( 569)		{
HXLINE( 569)			bytes->b[0] = ( (unsigned char)(value) );
HXDLIN( 569)			bytes->b[1] = ( (unsigned char)((value >> 8)) );
HXDLIN( 569)			bytes->b[2] = ( (unsigned char)((value >> 16)) );
HXDLIN( 569)			bytes->b[3] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXDLIN( 569)		 ::haxe::io::Bytes this2 = bytes;
HXDLIN( 569)		 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this2->length + stringBytes->length));
HXDLIN( 569)		newBytes->blit(0,this2,0,this2->length);
HXDLIN( 569)		newBytes->blit(this2->length,stringBytes,0,stringBytes->length);
HXDLIN( 569)		 ::haxe::io::Bytes bytes1 = newBytes;
HXLINE( 570)		{
HXLINE( 570)			int _g = 0;
HXDLIN( 570)			int _g1 = bytes1->length;
HXDLIN( 570)			while((_g < _g1)){
HXLINE( 570)				_g = (_g + 1);
HXDLIN( 570)				int j = (_g - 1);
HXLINE( 571)				this->storage->b[(address + j)] = bytes1->b->__get(j);
HXLINE( 572)				this->reserved->b[(address + j)] = ( (unsigned char)(1) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setString,(void))

::String Storage_obj::readString(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_581_readString)
HXLINE( 582)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 582)			return null();
            		}
HXLINE( 583)		int length = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(address));
HXLINE( 584)		return this->storage->getString((address + 4),length,::haxe::io::Encoding_obj::UTF8_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readString,return )

void Storage_obj::freeString(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_591_freeString)
HXLINE( 592)		 ::haxe::io::Bytes _this = this->storage;
HXDLIN( 592)		int pos = address;
HXDLIN( 592)		int len = ((((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24)) + 4);
HXLINE( 593)		{
HXLINE( 593)			int _g = 0;
HXDLIN( 593)			int _g1 = len;
HXDLIN( 593)			while((_g < _g1)){
HXLINE( 593)				_g = (_g + 1);
HXDLIN( 593)				int j = (_g - 1);
HXLINE( 594)				this->storage->b[(address + j)] = ( (unsigned char)(0) );
HXLINE( 595)				this->reserved->b[(address + j)] = ( (unsigned char)(0) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeString,(void))

int Storage_obj::storeCodeBlock( ::little::interpreter::InterpTokens caller){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_605_storeCodeBlock)
HXDLIN( 605)		switch((int)(caller->_hx_getIndex())){
            			case (int)7: {
HXLINE( 607)				 ::little::tools::BaseOrderedMap requiredParams = caller->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 607)				 ::little::interpreter::InterpTokens body = caller->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 607)				return this->storeString(::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,caller)));
            			}
            			break;
            			case (int)13: {
HXLINE( 606)				 ::little::interpreter::InterpTokens _g = caller->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 606)				::Array< ::Dynamic> body1 = caller->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 606)				return this->storeString(::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionCode(::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new(),caller))));
            			}
            			break;
            			default:{
HXLINE( 608)				::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(caller)) + HX_(" must be a code block",ff,c3,4d,44));
HXDLIN( 608)				HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("caller",8b,54,e8,b6),_hx_tmp,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),608,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("storeCodeBlock",bf,98,28,bc))));
            			}
            		}
HXLINE( 605)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeCodeBlock,return )

void Storage_obj::setCodeBlock(int address, ::little::interpreter::InterpTokens caller){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_618_setCodeBlock)
HXDLIN( 618)		switch((int)(caller->_hx_getIndex())){
            			case (int)7: {
HXLINE( 621)				 ::little::tools::BaseOrderedMap requiredParams = caller->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 621)				 ::little::interpreter::InterpTokens body = caller->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 622)				this->setString(address,::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,caller)));
            			}
            			break;
            			case (int)13: {
HXLINE( 619)				 ::little::interpreter::InterpTokens _g = caller->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 619)				{
HXLINE( 619)					::Array< ::Dynamic> body1 = caller->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 620)					this->setString(address,::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::interpreter::InterpTokens_obj::FunctionCode(::little::tools::_OrderedMap::OrderedMap_Impl__obj::_new(),caller))));
            				}
            			}
            			break;
            			default:{
HXLINE( 623)				::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(caller)) + HX_(" must be a code block",ff,c3,4d,44));
HXDLIN( 623)				HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("caller",8b,54,e8,b6),_hx_tmp,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),623,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("setCodeBlock",de,90,22,6d))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setCodeBlock,(void))

 ::little::interpreter::InterpTokens Storage_obj::readCodeBlock(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_633_readCodeBlock)
HXDLIN( 633)		return ::little::interpreter::ByteCode_obj::decompile(this->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(address)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readCodeBlock,return )

void Storage_obj::freeCodeBlock(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_641_freeCodeBlock)
HXDLIN( 641)		this->freeString(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeCodeBlock,(void))

int Storage_obj::storeCondition( ::little::interpreter::InterpTokens caller){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_650_storeCondition)
HXDLIN( 650)		if ((caller->_hx_getIndex() == 5)) {
HXLINE( 651)			 ::haxe::ds::ObjectMap _g = caller->_hx_getObject(0).StaticCast<  ::haxe::ds::ObjectMap >();
HXDLIN( 651)			return this->storeString(::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,caller)));
            		}
            		else {
HXLINE( 652)			::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(caller)) + HX_(" must be a token of type ",c9,86,a3,bd));
HXDLIN( 652)			::String _hx_tmp1 = (_hx_tmp + ::Type_obj::enumConstructor(::little::interpreter::InterpTokens_obj::ConditionCode(null())));
HXDLIN( 652)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("caller",8b,54,e8,b6),_hx_tmp1,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),652,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("storeCondition",7a,b1,89,6f))));
            		}
HXLINE( 650)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeCondition,return )

void Storage_obj::setCondition(int address, ::little::interpreter::InterpTokens caller){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_662_setCondition)
HXDLIN( 662)		if ((caller->_hx_getIndex() == 5)) {
HXLINE( 663)			 ::haxe::ds::ObjectMap _g = caller->_hx_getObject(0).StaticCast<  ::haxe::ds::ObjectMap >();
HXLINE( 664)			this->setString(address,::little::interpreter::ByteCode_obj::compile(::Array_obj< ::Dynamic>::__new(1)->init(0,caller)));
            		}
            		else {
HXLINE( 665)			::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(caller)) + HX_(" must be a token of type ",c9,86,a3,bd));
HXDLIN( 665)			::String _hx_tmp1 = (_hx_tmp + ::Type_obj::enumConstructor(::little::interpreter::InterpTokens_obj::ConditionCode(null())));
HXDLIN( 665)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("caller",8b,54,e8,b6),_hx_tmp1,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),665,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("setCondition",99,a9,83,20))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setCondition,(void))

 ::little::interpreter::InterpTokens Storage_obj::readCondition(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_675_readCondition)
HXDLIN( 675)		return ::little::interpreter::ByteCode_obj::decompile(this->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(address)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readCondition,return )

void Storage_obj::freeCondition(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_683_freeCondition)
HXDLIN( 683)		this->freeString(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeCondition,(void))

int Storage_obj::storeSign(::String sign){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_691_storeSign)
HXDLIN( 691)		return this->storeString(sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeSign,return )

void Storage_obj::setSign(int address,::String sign){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_700_setSign)
HXDLIN( 700)		this->setString(address,sign);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setSign,(void))

 ::little::interpreter::InterpTokens Storage_obj::readSign(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_708_readSign)
HXLINE( 709)		if ((address == this->parent->constants->_hx_NULL)) {
HXLINE( 709)			return null();
            		}
HXLINE( 710)		return ::little::interpreter::InterpTokens_obj::Sign(this->readString(address));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readSign,return )

void Storage_obj::freeSign(int address){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_718_freeSign)
HXDLIN( 718)		this->freeString(address);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeSign,(void))

int Storage_obj::storeStatic( ::little::interpreter::InterpTokens token){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_727_storeStatic)
HXDLIN( 727)		switch((int)(token->_hx_getIndex())){
            			case (int)16: {
HXLINE( 729)				int num = token->_hx_getInt(0);
HXDLIN( 729)				return this->storeInt32(num);
            			}
            			break;
            			case (int)17: {
HXLINE( 730)				Float num1 = token->_hx_getFloat(0);
HXDLIN( 730)				return this->storeDouble(num1);
            			}
            			break;
            			case (int)18: {
HXLINE( 731)				::String string = token->_hx_getString(0);
HXDLIN( 731)				return this->storeString(string);
            			}
            			break;
            			case (int)20: {
HXLINE( 733)				int pointer = token->_hx_getInt(0);
HXDLIN( 733)				return pointer;
            			}
            			break;
            			case (int)21: {
HXLINE( 732)				::String sign = token->_hx_getString(0);
HXDLIN( 732)				return this->storeSign(sign);
            			}
            			break;
            			case (int)22: case (int)23: case (int)24: {
HXLINE( 728)				return this->parent->constants->get(token);
            			}
            			break;
            			default:{
HXLINE( 734)				::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(token)) + HX_(" cannot be statically stored to the storage",4a,a6,50,4a));
HXDLIN( 734)				HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("token",f9,82,2b,14),_hx_tmp,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),734,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("storeStatic",6f,03,54,97))));
            			}
            		}
HXLINE( 727)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeStatic,return )

int Storage_obj::storeObject( ::little::interpreter::InterpTokens object){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_749_storeObject)
HXLINE( 750)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->copy();
HXDLIN( 750)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 750)		{
HXLINE( 750)			int _g = 0;
HXDLIN( 750)			int _g1 = _this->length;
HXDLIN( 750)			while((_g < _g1)){
HXLINE( 750)				_g = (_g + 1);
HXDLIN( 750)				int i = (_g - 1);
HXDLIN( 750)				{
HXLINE( 750)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 750)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 750)		if (result->contains(::Type_obj::enumConstructor(object).toLowerCase())) {
HXLINE( 750)			return this->parent->constants->_hx_NULL;
            		}
HXLINE( 751)		::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->copy();
HXDLIN( 751)		::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 751)		{
HXLINE( 751)			int _g2 = 0;
HXDLIN( 751)			int _g3 = _this1->length;
HXDLIN( 751)			while((_g2 < _g3)){
HXLINE( 751)				_g2 = (_g2 + 1);
HXDLIN( 751)				int i1 = (_g2 - 1);
HXDLIN( 751)				{
HXLINE( 751)					::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 751)					result1->__unsafe_set(i1,inValue1);
            				}
            			}
            		}
HXDLIN( 751)		if (!(result1->contains(::Type_obj::enumConstructor(object).toLowerCase()))) {
HXLINE( 751)			::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(object)) + HX_(" is not a dynamic object",a2,57,ca,e0));
HXDLIN( 751)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("object",bf,7e,3f,15),_hx_tmp,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),751,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("storeObject",80,a5,97,a6))));
            		}
HXLINE( 760)		if ((object->_hx_getIndex() == 26)) {
HXLINE( 761)			 ::haxe::ds::StringMap props = object->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 761)			::String typeName = object->_hx_getString(1);
HXLINE( 762)			::Array< ::Dynamic> quintuples = ::Array_obj< ::Dynamic>::__new();
HXLINE( 764)			 ::haxe::ds::StringMap propsC = props->copy();
HXLINE( 766)			{
HXLINE( 766)				 ::Dynamic v =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("value",71,7f,b8,31),::little::interpreter::InterpTokens_obj::Characters(typeName))
            					->setFixed(1,HX_("documentation",ba,81,68,41),((HX_("The type of this object, as a ",ea,9a,26,74) + ::little::Little_obj::keywords->TYPE_STRING) + HX_(".",2e,00,00,00))));
HXDLIN( 766)				propsC->set(::little::Little_obj::keywords->OBJECT_TYPE_PROPERTY_NAME,v);
            			}
HXLINE( 771)			{
HXLINE( 771)				::Dynamic map = propsC;
HXDLIN( 771)				::Dynamic _g_map = map;
HXDLIN( 771)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 771)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 771)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 771)					 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 771)					::String _g_key = key;
HXDLIN( 771)					::String k = _g_key;
HXDLIN( 771)					 ::Dynamic v1 = _g_value;
HXDLIN( 771)					{
HXLINE( 772)						::String key1 = k;
HXLINE( 773)						int keyPointer = this->storeString(key1);
HXLINE( 774)						int value;
HXDLIN( 774)						 ::little::interpreter::InterpTokens _g4 = v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXDLIN( 774)						switch((int)(_g4->_hx_getIndex())){
            							case (int)7: {
HXLINE( 776)								 ::little::tools::BaseOrderedMap _g5 = _g4->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 776)								 ::little::interpreter::InterpTokens _g6 = _g4->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 774)								value = this->storeCodeBlock(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            							}
            							break;
            							case (int)26: {
HXLINE( 775)								 ::haxe::ds::StringMap _g7 = _g4->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 775)								::String _g8 = _g4->_hx_getString(1);
HXLINE( 774)								value = this->storeObject(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            							}
            							break;
            							default:{
HXLINE( 774)								value = this->storeStatic(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            							}
            						}
HXLINE( 779)						int type;
HXDLIN( 779)						 ::little::interpreter::InterpTokens _g9 = v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXDLIN( 779)						switch((int)(_g9->_hx_getIndex())){
            							case (int)7: {
HXLINE( 785)								 ::little::tools::BaseOrderedMap _g10 = _g9->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 785)								 ::little::interpreter::InterpTokens _g11 = _g9->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)16: {
HXLINE( 780)								int _g12 = _g9->_hx_getInt(0);
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_INT)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)17: {
HXLINE( 781)								Float _g13 = _g9->_hx_getFloat(0);
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_FLOAT)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)18: {
HXLINE( 782)								::String _g14 = _g9->_hx_getString(0);
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_STRING)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)20: {
HXLINE( 786)								int _g15 = _g9->_hx_getInt(0);
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_MODULE)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)22: {
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_DYNAMIC)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)23: case (int)24: {
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_BOOLEAN)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							case (int)26: {
HXLINE( 787)								 ::haxe::ds::StringMap _g16 = _g9->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 787)								::String t = _g9->_hx_getString(1);
HXLINE( 779)								type = ( (int)(this->parent->getTypeInformation(t)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            							}
            							break;
            							default:{
HXLINE( 788)								HX_STACK_DO_THROW(((HX_("Property value must be a static value, a code block or an object (given: `",6f,74,95,72) + ::Std_obj::string(v1)) + HX_("`)",c9,53,00,00)));
            							}
            						}
HXLINE( 791)						quintuples->push( ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("keyPointer",de,60,a9,bf),keyPointer)
            							->setFixed(1,HX_("doc",78,42,4c,00),this->storeString(( (::String)(v1->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) )))
            							->setFixed(2,HX_("key",9f,89,51,00),key1)
            							->setFixed(3,HX_("value",71,7f,b8,31),value)
            							->setFixed(4,HX_("type",ba,f2,08,4d),type)));
            					}
            				}
            			}
HXLINE( 794)			 ::haxe::io::Bytes bytes = ::little::interpreter::memory::HashTables_obj::generateObjectHashTable(quintuples);
HXLINE( 795)			int value1 = bytes->length;
HXDLIN( 795)			 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 795)			this1->fill(0,4,0);
HXDLIN( 795)			 ::haxe::io::Bytes bytes1 = this1;
HXDLIN( 795)			{
HXLINE( 795)				bytes1->b[0] = ( (unsigned char)(value1) );
HXDLIN( 795)				bytes1->b[1] = ( (unsigned char)((value1 >> 8)) );
HXDLIN( 795)				bytes1->b[2] = ( (unsigned char)((value1 >> 16)) );
HXDLIN( 795)				bytes1->b[3] = ( (unsigned char)(::hx::UShr(value1,24)) );
            			}
HXDLIN( 795)			 ::haxe::io::Bytes bytesLength = bytes1;
HXLINE( 796)			int bytesPointer = this->storeBytes(bytes->length,bytes);
HXLINE( 798)			int value2 = bytes->length;
HXDLIN( 798)			 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 798)			this2->fill(0,4,0);
HXDLIN( 798)			 ::haxe::io::Bytes bytes2 = this2;
HXDLIN( 798)			{
HXLINE( 798)				bytes2->b[0] = ( (unsigned char)(value2) );
HXDLIN( 798)				bytes2->b[1] = ( (unsigned char)((value2 >> 8)) );
HXDLIN( 798)				bytes2->b[2] = ( (unsigned char)((value2 >> 16)) );
HXDLIN( 798)				bytes2->b[3] = ( (unsigned char)(::hx::UShr(value2,24)) );
            			}
HXDLIN( 798)			 ::haxe::io::Bytes this3 = bytes2;
HXDLIN( 798)			int value3 = bytesPointer;
HXDLIN( 798)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 798)			this4->fill(0,4,0);
HXDLIN( 798)			 ::haxe::io::Bytes bytes3 = this4;
HXDLIN( 798)			{
HXLINE( 798)				bytes3->b[0] = ( (unsigned char)(value3) );
HXDLIN( 798)				bytes3->b[1] = ( (unsigned char)((value3 >> 8)) );
HXDLIN( 798)				bytes3->b[2] = ( (unsigned char)((value3 >> 16)) );
HXDLIN( 798)				bytes3->b[3] = ( (unsigned char)(::hx::UShr(value3,24)) );
            			}
HXDLIN( 798)			 ::haxe::io::Bytes array = bytes3;
HXDLIN( 798)			 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this3->length + array->length));
HXDLIN( 798)			newBytes->blit(0,this3,0,this3->length);
HXDLIN( 798)			newBytes->blit(this3->length,array,0,array->length);
HXDLIN( 798)			return this->storeBytes(8,newBytes);
            		}
            		else {
HXLINE( 801)			::String _hx_tmp1 = ((HX_("",00,00,00,00) + ::Std_obj::string(object)) + HX_(" must be an `Interpreter.Object`",ba,b8,87,52));
HXDLIN( 801)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("object",bf,7e,3f,15),_hx_tmp1,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),801,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("storeObject",80,a5,97,a6))));
            		}
HXLINE( 760)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,storeObject,return )

int Storage_obj::setObject(int address, ::little::interpreter::InterpTokens object){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_817_setObject)
HXLINE( 818)		::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::NULL_VALUE_dyn())->copy();
HXDLIN( 818)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 818)		{
HXLINE( 818)			int _g = 0;
HXDLIN( 818)			int _g1 = _this->length;
HXDLIN( 818)			while((_g < _g1)){
HXLINE( 818)				_g = (_g + 1);
HXDLIN( 818)				int i = (_g - 1);
HXDLIN( 818)				{
HXLINE( 818)					::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 818)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 818)		if (result->contains(::Type_obj::enumConstructor(object).toLowerCase())) {
HXLINE( 818)			return this->parent->constants->_hx_NULL;
            		}
HXLINE( 819)		::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::OBJECT_dyn())->copy();
HXDLIN( 819)		::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 819)		{
HXLINE( 819)			int _g2 = 0;
HXDLIN( 819)			int _g3 = _this1->length;
HXDLIN( 819)			while((_g2 < _g3)){
HXLINE( 819)				_g2 = (_g2 + 1);
HXDLIN( 819)				int i1 = (_g2 - 1);
HXDLIN( 819)				{
HXLINE( 819)					::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 819)					result1->__unsafe_set(i1,inValue1);
            				}
            			}
            		}
HXDLIN( 819)		if (!(result1->contains(::Type_obj::enumConstructor(object).toLowerCase()))) {
HXLINE( 819)			::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(object)) + HX_(" is not a dynamic object",a2,57,ca,e0));
HXDLIN( 819)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("object",bf,7e,3f,15),_hx_tmp,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),819,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("setObject",01,f4,e6,74))));
            		}
HXLINE( 821)		if ((object->_hx_getIndex() == 26)) {
HXLINE( 822)			 ::haxe::ds::StringMap props = object->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 822)			::String typeName = object->_hx_getString(1);
HXDLIN( 822)			{
HXLINE( 823)				::Array< ::Dynamic> quintuples = ::Array_obj< ::Dynamic>::__new();
HXLINE( 825)				 ::haxe::ds::StringMap propsC = props->copy();
HXLINE( 827)				{
HXLINE( 827)					 ::Dynamic v =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("value",71,7f,b8,31),::little::interpreter::InterpTokens_obj::Characters(typeName))
            						->setFixed(1,HX_("documentation",ba,81,68,41),((HX_("The type of this object, as a ",ea,9a,26,74) + ::little::Little_obj::keywords->TYPE_STRING) + HX_(".",2e,00,00,00))));
HXDLIN( 827)					propsC->set(::little::Little_obj::keywords->OBJECT_TYPE_PROPERTY_NAME,v);
            				}
HXLINE( 832)				{
HXLINE( 832)					::Dynamic map = propsC;
HXDLIN( 832)					::Dynamic _g_map = map;
HXDLIN( 832)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 832)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 832)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 832)						 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 832)						::String _g_key = key;
HXDLIN( 832)						::String k = _g_key;
HXDLIN( 832)						 ::Dynamic v1 = _g_value;
HXDLIN( 832)						{
HXLINE( 833)							::String key1 = k;
HXLINE( 834)							int keyPointer = this->storeString(key1);
HXLINE( 835)							int value;
HXDLIN( 835)							 ::little::interpreter::InterpTokens _g4 = v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXDLIN( 835)							switch((int)(_g4->_hx_getIndex())){
            								case (int)7: {
HXLINE( 837)									 ::little::tools::BaseOrderedMap _g5 = _g4->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 837)									 ::little::interpreter::InterpTokens _g6 = _g4->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 835)									value = this->storeCodeBlock(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            								}
            								break;
            								case (int)26: {
HXLINE( 836)									 ::haxe::ds::StringMap _g7 = _g4->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 836)									::String _g8 = _g4->_hx_getString(1);
HXLINE( 835)									value = this->storeObject(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            								}
            								break;
            								default:{
HXLINE( 835)									value = this->storeStatic(v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            								}
            							}
HXLINE( 840)							int type;
HXDLIN( 840)							 ::little::interpreter::InterpTokens _g9 = v1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXDLIN( 840)							switch((int)(_g9->_hx_getIndex())){
            								case (int)7: {
HXLINE( 846)									 ::little::tools::BaseOrderedMap _g10 = _g9->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 846)									 ::little::interpreter::InterpTokens _g11 = _g9->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_FUNCTION)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)16: {
HXLINE( 841)									int _g12 = _g9->_hx_getInt(0);
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_INT)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)17: {
HXLINE( 842)									Float _g13 = _g9->_hx_getFloat(0);
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_FLOAT)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)18: {
HXLINE( 843)									::String _g14 = _g9->_hx_getString(0);
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_STRING)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)20: {
HXLINE( 847)									int _g15 = _g9->_hx_getInt(0);
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_MODULE)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)22: {
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_DYNAMIC)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)23: case (int)24: {
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(::little::Little_obj::keywords->TYPE_BOOLEAN)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								case (int)26: {
HXLINE( 848)									 ::haxe::ds::StringMap _g16 = _g9->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 848)									::String t = _g9->_hx_getString(1);
HXLINE( 840)									type = ( (int)(this->parent->getTypeInformation(t)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
            								}
            								break;
            								default:{
HXLINE( 849)									HX_STACK_DO_THROW(((HX_("Property value must be a static value, a code block or an object (given: `",6f,74,95,72) + ::Std_obj::string(v1)) + HX_("`)",c9,53,00,00)));
            								}
            							}
HXLINE( 852)							quintuples->push( ::Dynamic(::hx::Anon_obj::Create(5)
            								->setFixed(0,HX_("keyPointer",de,60,a9,bf),keyPointer)
            								->setFixed(1,HX_("doc",78,42,4c,00),this->storeString(( (::String)(v1->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) )))
            								->setFixed(2,HX_("key",9f,89,51,00),key1)
            								->setFixed(3,HX_("value",71,7f,b8,31),value)
            								->setFixed(4,HX_("type",ba,f2,08,4d),type)));
            						}
            					}
            				}
HXLINE( 855)				 ::haxe::io::Bytes bytes = ::little::interpreter::memory::HashTables_obj::generateObjectHashTable(quintuples);
HXLINE( 856)				int value1 = bytes->length;
HXDLIN( 856)				 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 856)				this1->fill(0,4,0);
HXDLIN( 856)				 ::haxe::io::Bytes bytes1 = this1;
HXDLIN( 856)				{
HXLINE( 856)					bytes1->b[0] = ( (unsigned char)(value1) );
HXDLIN( 856)					bytes1->b[1] = ( (unsigned char)((value1 >> 8)) );
HXDLIN( 856)					bytes1->b[2] = ( (unsigned char)((value1 >> 16)) );
HXDLIN( 856)					bytes1->b[3] = ( (unsigned char)(::hx::UShr(value1,24)) );
            				}
HXDLIN( 856)				 ::haxe::io::Bytes bytesLength = bytes1;
HXLINE( 857)				int bytesPointer = this->storeBytes(bytes->length,bytes);
HXLINE( 859)				int value2 = bytes->length;
HXDLIN( 859)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 859)				this2->fill(0,4,0);
HXDLIN( 859)				 ::haxe::io::Bytes bytes2 = this2;
HXDLIN( 859)				{
HXLINE( 859)					bytes2->b[0] = ( (unsigned char)(value2) );
HXDLIN( 859)					bytes2->b[1] = ( (unsigned char)((value2 >> 8)) );
HXDLIN( 859)					bytes2->b[2] = ( (unsigned char)((value2 >> 16)) );
HXDLIN( 859)					bytes2->b[3] = ( (unsigned char)(::hx::UShr(value2,24)) );
            				}
HXDLIN( 859)				 ::haxe::io::Bytes this3 = bytes2;
HXDLIN( 859)				int value3 = bytesPointer;
HXDLIN( 859)				 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 859)				this4->fill(0,4,0);
HXDLIN( 859)				 ::haxe::io::Bytes bytes3 = this4;
HXDLIN( 859)				{
HXLINE( 859)					bytes3->b[0] = ( (unsigned char)(value3) );
HXDLIN( 859)					bytes3->b[1] = ( (unsigned char)((value3 >> 8)) );
HXDLIN( 859)					bytes3->b[2] = ( (unsigned char)((value3 >> 16)) );
HXDLIN( 859)					bytes3->b[3] = ( (unsigned char)(::hx::UShr(value3,24)) );
            				}
HXDLIN( 859)				 ::haxe::io::Bytes array = bytes3;
HXDLIN( 859)				 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this3->length + array->length));
HXDLIN( 859)				newBytes->blit(0,this3,0,this3->length);
HXDLIN( 859)				newBytes->blit(this3->length,array,0,array->length);
HXDLIN( 859)				this->setBytes(address,newBytes);
            			}
            		}
            		else {
HXLINE( 862)			::String _hx_tmp1 = ((HX_("",00,00,00,00) + ::Std_obj::string(object)) + HX_(" must be an `Interpreter.Object`",ba,b8,87,52));
HXDLIN( 862)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,HX_("object",bf,7e,3f,15),_hx_tmp1,null(),::hx::SourceInfo(HX_("src/little/interpreter/memory/Storage.hx",6e,57,31,ba),862,HX_("little.interpreter.memory.Storage",5a,89,de,f9),HX_("setObject",01,f4,e6,74))));
            		}
HXLINE( 865)		HX_STACK_DO_THROW(HX_("How did you get here?",73,6a,43,06));
HXDLIN( 865)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Storage_obj,setObject,return )

 ::little::interpreter::InterpTokens Storage_obj::readObject(int pointer){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_873_readObject)
HXLINE( 874)		if ((pointer == this->parent->constants->_hx_NULL)) {
HXLINE( 874)			return null();
            		}
HXLINE( 875)		 ::little::interpreter::memory::ConstantPool _hx_tmp = this->parent->constants;
HXDLIN( 875)		if (_hx_tmp->hasPointer(this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4))))) {
HXLINE( 875)			HX_STACK_DO_THROW(HX_("HashTable pointer is not valid",9c,82,1a,94));
            		}
HXLINE( 876)		int hashTableBytes = this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4)));
HXDLIN( 876)		 ::haxe::io::Bytes hashTableBytes1 = this->readBytes(hashTableBytes,this->readInt32(pointer));
HXLINE( 877)		::Array< ::Dynamic> table = ::little::interpreter::memory::HashTables_obj::readObjectHashTable(hashTableBytes1,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 878)		 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 879)		{
HXLINE( 879)			int _g = 0;
HXDLIN( 879)			while((_g < table->length)){
HXLINE( 879)				 ::Dynamic entry = table->__get(_g);
HXDLIN( 879)				_g = (_g + 1);
HXLINE( 880)				{
HXLINE( 880)					::String k = ( (::String)(entry->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXLINE( 881)					::String k1 = ( (::String)(entry->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXLINE( 882)					 ::little::interpreter::memory::Memory v = this->parent;
HXDLIN( 882)					int entry1 = ( (int)(entry->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 882)					 ::little::interpreter::InterpTokens v1 = v->valueFromType(entry1,this->parent->getTypeName(( (int)(entry->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) )),::Array_obj< ::String >::fromData( _hx_array_data_f9de895a_84,1),::Array_obj< ::String >::__new(0));
HXLINE( 881)					 ::Dynamic v2 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("value",71,7f,b8,31),v1)
            						->setFixed(1,HX_("documentation",ba,81,68,41),this->readString(( (int)(entry->__Field(HX_("doc",78,42,4c,00),::hx::paccDynamic)) ))));
HXDLIN( 881)					map->set(k1,v2);
HXLINE( 880)					 ::Dynamic v3 = v2;
HXDLIN( 880)					map->set(k,v3);
            				}
            			}
            		}
HXLINE( 886)		return ::little::interpreter::InterpTokens_obj::Object(map,::Type_obj::enumParameters(map->get(::little::Little_obj::keywords->OBJECT_TYPE_PROPERTY_NAME)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))->__get(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readObject,return )

void Storage_obj::freeObject(int pointer){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_896_freeObject)
HXLINE( 899)		int hashTableSize = this->readInt32(pointer);
HXLINE( 900)		int hashTablePointer = this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4)));
HXLINE( 901)		this->freeBytes(hashTablePointer,hashTableSize);
HXLINE( 902)		this->freeBytes(pointer,8);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeObject,(void))

int Storage_obj::storeType(::String name, ::haxe::ds::StringMap statics, ::haxe::ds::StringMap instances){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_911_storeType)
HXLINE( 912)		int value = this->storeString(name);
HXDLIN( 912)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 912)		this1->fill(0,4,0);
HXDLIN( 912)		 ::haxe::io::Bytes bytes = this1;
HXDLIN( 912)		{
HXLINE( 912)			bytes->b[0] = ( (unsigned char)(value) );
HXDLIN( 912)			bytes->b[1] = ( (unsigned char)((value >> 8)) );
HXDLIN( 912)			bytes->b[2] = ( (unsigned char)((value >> 16)) );
HXDLIN( 912)			bytes->b[3] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXDLIN( 912)		 ::haxe::io::Bytes bytes1 = bytes;
HXLINE( 913)		int cellSize = 16;
HXLINE( 916)		cellSize = 16;
HXLINE( 917)		int staticsLength = ::little::tools::Extensions_obj::toArray(statics->keys())->get_length();
HXLINE( 918)		int length = ::Math_obj::floor((( (Float)(((staticsLength * cellSize) * 3)) ) / ( (Float)(2) )));
HXDLIN( 918)		 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN( 918)		this2->fill(0,length,0);
HXDLIN( 918)		 ::haxe::io::Bytes staticHashMap = this2;
HXLINE( 920)		int instancesLength = ::little::tools::Extensions_obj::toArray(instances->keys())->get_length();
HXLINE( 921)		int length1 = ::Math_obj::floor((( (Float)(((instancesLength * (cellSize - 4)) * 3)) ) / ( (Float)(2) )));
HXDLIN( 921)		 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN( 921)		this3->fill(0,length1,0);
HXDLIN( 921)		 ::haxe::io::Bytes instancesHashMap = this3;
HXLINE( 923)		{
HXLINE( 923)			int _g = 0;
HXDLIN( 923)			::Array< ::Dynamic> _g1 = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("a",61,00,00,00),staticsLength)
            				->setFixed(1,HX_("b",62,00,00,00),staticHashMap)
            				->setFixed(2,HX_("c",63,00,00,00),statics)))->init(1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("a",61,00,00,00),instancesLength)
            				->setFixed(1,HX_("b",62,00,00,00),instancesHashMap)
            				->setFixed(2,HX_("c",63,00,00,00),instances)));
HXDLIN( 923)			while((_g < _g1->length)){
HXLINE( 923)				 ::Dynamic _hx___item = _g1->__get(_g);
HXDLIN( 923)				_g = (_g + 1);
HXLINE( 924)				int elements = ( (int)(_hx___item->__Field(HX_("a",61,00,00,00),::hx::paccDynamic)) );
HXLINE( 925)				 ::haxe::io::Bytes hashTable = ( ( ::haxe::io::Bytes)(_hx___item->__Field(HX_("b",62,00,00,00),::hx::paccDynamic)) );
HXLINE( 926)				 ::haxe::ds::StringMap fields = ( ( ::haxe::ds::StringMap)(_hx___item->__Field(HX_("c",63,00,00,00),::hx::paccDynamic)) );
HXLINE( 928)				{
HXLINE( 928)					::Dynamic map = fields;
HXDLIN( 928)					::Dynamic _g_map = map;
HXDLIN( 928)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 928)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 928)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 928)						 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 928)						::String _g_key = key;
HXDLIN( 928)						::String k = _g_key;
HXDLIN( 928)						 ::Dynamic v = _g_value;
HXDLIN( 928)						{
HXLINE( 929)							int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(k,null()),null());
HXLINE( 931)							::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE( 932)							::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(cellSize) ));
HXDLIN( 932)							if (_hx_int64_is_zero(( (::cpp::Int64)(elements) ))) {
HXLINE( 932)								HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            							}
HXDLIN( 932)							int keyIndex = _hx_int64_low(_hx_int64_mod(a,( (::cpp::Int64)(elements) )));
HXLINE( 934)							if (((((( (int)(hashTable->b->__get(keyIndex)) ) | (( (int)(hashTable->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTable->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTable->b->__get((keyIndex + 3))) ) << 24)) == 0)) {
HXLINE( 935)								int address = keyIndex;
HXLINE( 936)								{
HXLINE( 936)									int v1 = this->storeString(k);
HXDLIN( 936)									hashTable->b[address] = ( (unsigned char)(v1) );
HXDLIN( 936)									hashTable->b[(address + 1)] = ( (unsigned char)((v1 >> 8)) );
HXDLIN( 936)									hashTable->b[(address + 2)] = ( (unsigned char)((v1 >> 16)) );
HXDLIN( 936)									hashTable->b[(address + 3)] = ( (unsigned char)(::hx::UShr(v1,24)) );
            								}
HXLINE( 937)								address = (address + 4);
HXLINE( 938)								if (::hx::IsInstanceEq( fields,statics )) {
HXLINE( 939)									{
HXLINE( 939)										int v2 = this->parent->store(v->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXDLIN( 939)										hashTable->b[address] = ( (unsigned char)(v2) );
HXDLIN( 939)										hashTable->b[(address + 1)] = ( (unsigned char)((v2 >> 8)) );
HXDLIN( 939)										hashTable->b[(address + 2)] = ( (unsigned char)((v2 >> 16)) );
HXDLIN( 939)										hashTable->b[(address + 3)] = ( (unsigned char)(::hx::UShr(v2,24)) );
            									}
HXLINE( 940)									address = (address + 4);
            								}
HXLINE( 942)								{
HXLINE( 942)									int v3 = ( (int)(this->parent->getTypeInformation(( (::String)(v->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN( 942)									hashTable->b[address] = ( (unsigned char)(v3) );
HXDLIN( 942)									hashTable->b[(address + 1)] = ( (unsigned char)((v3 >> 8)) );
HXDLIN( 942)									hashTable->b[(address + 2)] = ( (unsigned char)((v3 >> 16)) );
HXDLIN( 942)									hashTable->b[(address + 3)] = ( (unsigned char)(::hx::UShr(v3,24)) );
            								}
HXLINE( 943)								address = (address + 4);
HXLINE( 944)								{
HXLINE( 944)									int v4 = this->storeString(( (::String)(v->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) ));
HXDLIN( 944)									hashTable->b[keyIndex] = ( (unsigned char)(v4) );
HXDLIN( 944)									hashTable->b[(keyIndex + 1)] = ( (unsigned char)((v4 >> 8)) );
HXDLIN( 944)									hashTable->b[(keyIndex + 2)] = ( (unsigned char)((v4 >> 16)) );
HXDLIN( 944)									hashTable->b[(keyIndex + 3)] = ( (unsigned char)(::hx::UShr(v4,24)) );
            								}
            							}
            							else {
HXLINE( 947)								int incrementation = 0;
HXLINE( 948)								int i = keyIndex;
HXLINE( 949)								while(((((( (int)(hashTable->b->__get(i)) ) | (( (int)(hashTable->b->__get((i + 1))) ) << 8)) | (( (int)(hashTable->b->__get((i + 2))) ) << 16)) | (( (int)(hashTable->b->__get((i + 3))) ) << 24)) != 0)){
HXLINE( 950)									i = (i + cellSize);
HXLINE( 951)									incrementation = (incrementation + cellSize);
HXLINE( 952)									if ((i >= hashTable->length)) {
HXLINE( 953)										i = 0;
            									}
HXLINE( 955)									if ((incrementation >= hashTable->length)) {
HXLINE( 956)										HX_STACK_DO_THROW(HX_("Object hash table did not generate. This should never happen. Initial length may be incorrect.",f8,88,9a,e9));
            									}
            								}
HXLINE( 959)								int address1 = keyIndex;
HXLINE( 960)								{
HXLINE( 960)									int v5 = this->storeString(k);
HXDLIN( 960)									hashTable->b[address1] = ( (unsigned char)(v5) );
HXDLIN( 960)									hashTable->b[(address1 + 1)] = ( (unsigned char)((v5 >> 8)) );
HXDLIN( 960)									hashTable->b[(address1 + 2)] = ( (unsigned char)((v5 >> 16)) );
HXDLIN( 960)									hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v5,24)) );
            								}
HXLINE( 961)								address1 = (address1 + 4);
HXLINE( 962)								if (::hx::IsInstanceEq( fields,statics )) {
HXLINE( 963)									{
HXLINE( 963)										int v6 = this->parent->store(v->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXDLIN( 963)										hashTable->b[address1] = ( (unsigned char)(v6) );
HXDLIN( 963)										hashTable->b[(address1 + 1)] = ( (unsigned char)((v6 >> 8)) );
HXDLIN( 963)										hashTable->b[(address1 + 2)] = ( (unsigned char)((v6 >> 16)) );
HXDLIN( 963)										hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v6,24)) );
            									}
HXLINE( 964)									address1 = (address1 + 4);
            								}
HXLINE( 966)								{
HXLINE( 966)									int v7 = ( (int)(this->parent->getTypeInformation(( (::String)(v->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN( 966)									hashTable->b[address1] = ( (unsigned char)(v7) );
HXDLIN( 966)									hashTable->b[(address1 + 1)] = ( (unsigned char)((v7 >> 8)) );
HXDLIN( 966)									hashTable->b[(address1 + 2)] = ( (unsigned char)((v7 >> 16)) );
HXDLIN( 966)									hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v7,24)) );
            								}
HXLINE( 967)								address1 = (address1 + 4);
HXLINE( 968)								{
HXLINE( 968)									int v8 = this->storeString(( (::String)(v->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) ));
HXDLIN( 968)									hashTable->b[keyIndex] = ( (unsigned char)(v8) );
HXDLIN( 968)									hashTable->b[(keyIndex + 1)] = ( (unsigned char)((v8 >> 8)) );
HXDLIN( 968)									hashTable->b[(keyIndex + 2)] = ( (unsigned char)((v8 >> 16)) );
HXDLIN( 968)									hashTable->b[(keyIndex + 3)] = ( (unsigned char)(::hx::UShr(v8,24)) );
            								}
            							}
            						}
            					}
            				}
HXLINE( 972)				cellSize = (cellSize - 4);
            			}
            		}
HXLINE( 974)		int value1 = staticHashMap->length;
HXDLIN( 974)		 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 974)		this4->fill(0,4,0);
HXDLIN( 974)		 ::haxe::io::Bytes bytes2 = this4;
HXDLIN( 974)		{
HXLINE( 974)			bytes2->b[0] = ( (unsigned char)(value1) );
HXDLIN( 974)			bytes2->b[1] = ( (unsigned char)((value1 >> 8)) );
HXDLIN( 974)			bytes2->b[2] = ( (unsigned char)((value1 >> 16)) );
HXDLIN( 974)			bytes2->b[3] = ( (unsigned char)(::hx::UShr(value1,24)) );
            		}
HXDLIN( 974)		 ::haxe::io::Bytes this5 = bytes2;
HXDLIN( 974)		 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this5->length + staticHashMap->length));
HXDLIN( 974)		newBytes->blit(0,this5,0,this5->length);
HXDLIN( 974)		newBytes->blit(this5->length,staticHashMap,0,staticHashMap->length);
HXDLIN( 974)		staticHashMap = newBytes;
HXLINE( 975)		int value2 = instancesHashMap->length;
HXDLIN( 975)		 ::haxe::io::Bytes this6 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 975)		this6->fill(0,4,0);
HXDLIN( 975)		 ::haxe::io::Bytes bytes3 = this6;
HXDLIN( 975)		{
HXLINE( 975)			bytes3->b[0] = ( (unsigned char)(value2) );
HXDLIN( 975)			bytes3->b[1] = ( (unsigned char)((value2 >> 8)) );
HXDLIN( 975)			bytes3->b[2] = ( (unsigned char)((value2 >> 16)) );
HXDLIN( 975)			bytes3->b[3] = ( (unsigned char)(::hx::UShr(value2,24)) );
            		}
HXDLIN( 975)		 ::haxe::io::Bytes this7 = bytes3;
HXDLIN( 975)		 ::haxe::io::Bytes newBytes1 = ::haxe::io::Bytes_obj::alloc((this7->length + instancesHashMap->length));
HXDLIN( 975)		newBytes1->blit(0,this7,0,this7->length);
HXDLIN( 975)		newBytes1->blit(this7->length,instancesHashMap,0,instancesHashMap->length);
HXDLIN( 975)		instancesHashMap = newBytes1;
HXLINE( 976)		 ::haxe::io::Bytes newBytes2 = ::haxe::io::Bytes_obj::alloc((bytes1->length + staticHashMap->length));
HXDLIN( 976)		newBytes2->blit(0,bytes1,0,bytes1->length);
HXDLIN( 976)		newBytes2->blit(bytes1->length,staticHashMap,0,staticHashMap->length);
HXDLIN( 976)		 ::haxe::io::Bytes this8 = newBytes2;
HXDLIN( 976)		 ::haxe::io::Bytes newBytes3 = ::haxe::io::Bytes_obj::alloc((this8->length + instancesHashMap->length));
HXDLIN( 976)		newBytes3->blit(0,this8,0,this8->length);
HXDLIN( 976)		newBytes3->blit(this8->length,instancesHashMap,0,instancesHashMap->length);
HXDLIN( 976)		bytes1 = newBytes3;
HXLINE( 977)		return this->storeBytes(bytes1->length,bytes1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Storage_obj,storeType,return )

void Storage_obj::setType(int address,::String name, ::haxe::ds::StringMap statics, ::haxe::ds::StringMap instances){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_988_setType)
HXLINE( 989)		int value = this->storeString(name);
HXDLIN( 989)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN( 989)		this1->fill(0,4,0);
HXDLIN( 989)		 ::haxe::io::Bytes bytes = this1;
HXDLIN( 989)		{
HXLINE( 989)			bytes->b[0] = ( (unsigned char)(value) );
HXDLIN( 989)			bytes->b[1] = ( (unsigned char)((value >> 8)) );
HXDLIN( 989)			bytes->b[2] = ( (unsigned char)((value >> 16)) );
HXDLIN( 989)			bytes->b[3] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXDLIN( 989)		 ::haxe::io::Bytes bytes1 = bytes;
HXLINE( 990)		int cellSize = 16;
HXLINE( 993)		cellSize = 16;
HXLINE( 994)		int staticsLength = ::little::tools::Extensions_obj::toArray(statics->keys())->get_length();
HXLINE( 995)		int length = ::Math_obj::floor((( (Float)(((staticsLength * cellSize) * 3)) ) / ( (Float)(2) )));
HXDLIN( 995)		 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(length);
HXDLIN( 995)		this2->fill(0,length,0);
HXDLIN( 995)		 ::haxe::io::Bytes staticHashMap = this2;
HXLINE( 997)		int instancesLength = ::little::tools::Extensions_obj::toArray(instances->keys())->get_length();
HXLINE( 998)		int length1 = ::Math_obj::floor((( (Float)(((instancesLength * (cellSize - 4)) * 3)) ) / ( (Float)(2) )));
HXDLIN( 998)		 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(length1);
HXDLIN( 998)		this3->fill(0,length1,0);
HXDLIN( 998)		 ::haxe::io::Bytes instancesHashMap = this3;
HXLINE(1000)		{
HXLINE(1000)			int _g = 0;
HXDLIN(1000)			::Array< ::Dynamic> _g1 = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("a",61,00,00,00),staticsLength)
            				->setFixed(1,HX_("b",62,00,00,00),staticHashMap)
            				->setFixed(2,HX_("c",63,00,00,00),statics)))->init(1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("a",61,00,00,00),instancesLength)
            				->setFixed(1,HX_("b",62,00,00,00),instancesHashMap)
            				->setFixed(2,HX_("c",63,00,00,00),instances)));
HXDLIN(1000)			while((_g < _g1->length)){
HXLINE(1000)				 ::Dynamic _hx___item = _g1->__get(_g);
HXDLIN(1000)				_g = (_g + 1);
HXLINE(1001)				int elements = ( (int)(_hx___item->__Field(HX_("a",61,00,00,00),::hx::paccDynamic)) );
HXLINE(1002)				 ::haxe::io::Bytes hashTable = ( ( ::haxe::io::Bytes)(_hx___item->__Field(HX_("b",62,00,00,00),::hx::paccDynamic)) );
HXLINE(1003)				 ::haxe::ds::StringMap fields = ( ( ::haxe::ds::StringMap)(_hx___item->__Field(HX_("c",63,00,00,00),::hx::paccDynamic)) );
HXLINE(1005)				{
HXLINE(1005)					::Dynamic map = fields;
HXDLIN(1005)					::Dynamic _g_map = map;
HXDLIN(1005)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1005)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1005)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1005)						 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN(1005)						::String _g_key = key;
HXDLIN(1005)						::String k = _g_key;
HXDLIN(1005)						 ::Dynamic v = _g_value;
HXDLIN(1005)						{
HXLINE(1006)							int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(k,null()),null());
HXLINE(1008)							::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE(1009)							::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(cellSize) ));
HXDLIN(1009)							if (_hx_int64_is_zero(( (::cpp::Int64)(elements) ))) {
HXLINE(1009)								HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            							}
HXDLIN(1009)							int keyIndex = _hx_int64_low(_hx_int64_mod(a,( (::cpp::Int64)(elements) )));
HXLINE(1011)							if (((((( (int)(hashTable->b->__get(keyIndex)) ) | (( (int)(hashTable->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTable->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTable->b->__get((keyIndex + 3))) ) << 24)) == 0)) {
HXLINE(1012)								int address1 = keyIndex;
HXLINE(1013)								{
HXLINE(1013)									int v1 = this->storeString(k);
HXDLIN(1013)									hashTable->b[address1] = ( (unsigned char)(v1) );
HXDLIN(1013)									hashTable->b[(address1 + 1)] = ( (unsigned char)((v1 >> 8)) );
HXDLIN(1013)									hashTable->b[(address1 + 2)] = ( (unsigned char)((v1 >> 16)) );
HXDLIN(1013)									hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v1,24)) );
            								}
HXLINE(1014)								address1 = (address1 + 4);
HXLINE(1015)								if (::hx::IsInstanceEq( fields,statics )) {
HXLINE(1016)									{
HXLINE(1016)										int v2 = this->parent->store(v->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXDLIN(1016)										hashTable->b[address1] = ( (unsigned char)(v2) );
HXDLIN(1016)										hashTable->b[(address1 + 1)] = ( (unsigned char)((v2 >> 8)) );
HXDLIN(1016)										hashTable->b[(address1 + 2)] = ( (unsigned char)((v2 >> 16)) );
HXDLIN(1016)										hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v2,24)) );
            									}
HXLINE(1017)									address1 = (address1 + 4);
            								}
HXLINE(1019)								{
HXLINE(1019)									int v3 = ( (int)(this->parent->getTypeInformation(( (::String)(v->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN(1019)									hashTable->b[address1] = ( (unsigned char)(v3) );
HXDLIN(1019)									hashTable->b[(address1 + 1)] = ( (unsigned char)((v3 >> 8)) );
HXDLIN(1019)									hashTable->b[(address1 + 2)] = ( (unsigned char)((v3 >> 16)) );
HXDLIN(1019)									hashTable->b[(address1 + 3)] = ( (unsigned char)(::hx::UShr(v3,24)) );
            								}
HXLINE(1020)								address1 = (address1 + 4);
HXLINE(1021)								{
HXLINE(1021)									int v4 = this->storeString(( (::String)(v->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) ));
HXDLIN(1021)									hashTable->b[keyIndex] = ( (unsigned char)(v4) );
HXDLIN(1021)									hashTable->b[(keyIndex + 1)] = ( (unsigned char)((v4 >> 8)) );
HXDLIN(1021)									hashTable->b[(keyIndex + 2)] = ( (unsigned char)((v4 >> 16)) );
HXDLIN(1021)									hashTable->b[(keyIndex + 3)] = ( (unsigned char)(::hx::UShr(v4,24)) );
            								}
            							}
            							else {
HXLINE(1024)								int incrementation = 0;
HXLINE(1025)								int i = keyIndex;
HXLINE(1026)								while(((((( (int)(hashTable->b->__get(i)) ) | (( (int)(hashTable->b->__get((i + 1))) ) << 8)) | (( (int)(hashTable->b->__get((i + 2))) ) << 16)) | (( (int)(hashTable->b->__get((i + 3))) ) << 24)) != 0)){
HXLINE(1027)									i = (i + cellSize);
HXLINE(1028)									incrementation = (incrementation + cellSize);
HXLINE(1029)									if ((i >= hashTable->length)) {
HXLINE(1030)										i = 0;
            									}
HXLINE(1032)									if ((incrementation >= hashTable->length)) {
HXLINE(1033)										HX_STACK_DO_THROW(HX_("Object hash table did not generate. This should never happen. Initial length may be incorrect.",f8,88,9a,e9));
            									}
            								}
HXLINE(1036)								int address2 = keyIndex;
HXLINE(1037)								{
HXLINE(1037)									int v5 = this->storeString(k);
HXDLIN(1037)									hashTable->b[address2] = ( (unsigned char)(v5) );
HXDLIN(1037)									hashTable->b[(address2 + 1)] = ( (unsigned char)((v5 >> 8)) );
HXDLIN(1037)									hashTable->b[(address2 + 2)] = ( (unsigned char)((v5 >> 16)) );
HXDLIN(1037)									hashTable->b[(address2 + 3)] = ( (unsigned char)(::hx::UShr(v5,24)) );
            								}
HXLINE(1038)								address2 = (address2 + 4);
HXLINE(1039)								if (::hx::IsInstanceEq( fields,statics )) {
HXLINE(1040)									{
HXLINE(1040)										int v6 = this->parent->store(v->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXDLIN(1040)										hashTable->b[address2] = ( (unsigned char)(v6) );
HXDLIN(1040)										hashTable->b[(address2 + 1)] = ( (unsigned char)((v6 >> 8)) );
HXDLIN(1040)										hashTable->b[(address2 + 2)] = ( (unsigned char)((v6 >> 16)) );
HXDLIN(1040)										hashTable->b[(address2 + 3)] = ( (unsigned char)(::hx::UShr(v6,24)) );
            									}
HXLINE(1041)									address2 = (address2 + 4);
            								}
HXLINE(1043)								{
HXLINE(1043)									int v7 = ( (int)(this->parent->getTypeInformation(( (::String)(v->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN(1043)									hashTable->b[address2] = ( (unsigned char)(v7) );
HXDLIN(1043)									hashTable->b[(address2 + 1)] = ( (unsigned char)((v7 >> 8)) );
HXDLIN(1043)									hashTable->b[(address2 + 2)] = ( (unsigned char)((v7 >> 16)) );
HXDLIN(1043)									hashTable->b[(address2 + 3)] = ( (unsigned char)(::hx::UShr(v7,24)) );
            								}
HXLINE(1044)								address2 = (address2 + 4);
HXLINE(1045)								{
HXLINE(1045)									int v8 = this->storeString(( (::String)(v->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)) ));
HXDLIN(1045)									hashTable->b[keyIndex] = ( (unsigned char)(v8) );
HXDLIN(1045)									hashTable->b[(keyIndex + 1)] = ( (unsigned char)((v8 >> 8)) );
HXDLIN(1045)									hashTable->b[(keyIndex + 2)] = ( (unsigned char)((v8 >> 16)) );
HXDLIN(1045)									hashTable->b[(keyIndex + 3)] = ( (unsigned char)(::hx::UShr(v8,24)) );
            								}
            							}
            						}
            					}
            				}
HXLINE(1049)				cellSize = (cellSize - 4);
            			}
            		}
HXLINE(1051)		int value1 = staticHashMap->length;
HXDLIN(1051)		 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN(1051)		this4->fill(0,4,0);
HXDLIN(1051)		 ::haxe::io::Bytes bytes2 = this4;
HXDLIN(1051)		{
HXLINE(1051)			bytes2->b[0] = ( (unsigned char)(value1) );
HXDLIN(1051)			bytes2->b[1] = ( (unsigned char)((value1 >> 8)) );
HXDLIN(1051)			bytes2->b[2] = ( (unsigned char)((value1 >> 16)) );
HXDLIN(1051)			bytes2->b[3] = ( (unsigned char)(::hx::UShr(value1,24)) );
            		}
HXDLIN(1051)		 ::haxe::io::Bytes this5 = bytes2;
HXDLIN(1051)		 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this5->length + staticHashMap->length));
HXDLIN(1051)		newBytes->blit(0,this5,0,this5->length);
HXDLIN(1051)		newBytes->blit(this5->length,staticHashMap,0,staticHashMap->length);
HXDLIN(1051)		staticHashMap = newBytes;
HXLINE(1052)		int value2 = instancesHashMap->length;
HXDLIN(1052)		 ::haxe::io::Bytes this6 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN(1052)		this6->fill(0,4,0);
HXDLIN(1052)		 ::haxe::io::Bytes bytes3 = this6;
HXDLIN(1052)		{
HXLINE(1052)			bytes3->b[0] = ( (unsigned char)(value2) );
HXDLIN(1052)			bytes3->b[1] = ( (unsigned char)((value2 >> 8)) );
HXDLIN(1052)			bytes3->b[2] = ( (unsigned char)((value2 >> 16)) );
HXDLIN(1052)			bytes3->b[3] = ( (unsigned char)(::hx::UShr(value2,24)) );
            		}
HXDLIN(1052)		 ::haxe::io::Bytes this7 = bytes3;
HXDLIN(1052)		 ::haxe::io::Bytes newBytes1 = ::haxe::io::Bytes_obj::alloc((this7->length + instancesHashMap->length));
HXDLIN(1052)		newBytes1->blit(0,this7,0,this7->length);
HXDLIN(1052)		newBytes1->blit(this7->length,instancesHashMap,0,instancesHashMap->length);
HXDLIN(1052)		instancesHashMap = newBytes1;
HXLINE(1053)		 ::haxe::io::Bytes newBytes2 = ::haxe::io::Bytes_obj::alloc((bytes1->length + staticHashMap->length));
HXDLIN(1053)		newBytes2->blit(0,bytes1,0,bytes1->length);
HXDLIN(1053)		newBytes2->blit(bytes1->length,staticHashMap,0,staticHashMap->length);
HXDLIN(1053)		 ::haxe::io::Bytes this8 = newBytes2;
HXDLIN(1053)		 ::haxe::io::Bytes newBytes3 = ::haxe::io::Bytes_obj::alloc((this8->length + instancesHashMap->length));
HXDLIN(1053)		newBytes3->blit(0,this8,0,this8->length);
HXDLIN(1053)		newBytes3->blit(this8->length,instancesHashMap,0,instancesHashMap->length);
HXDLIN(1053)		bytes1 = newBytes3;
HXLINE(1054)		this->setBytes(address,bytes1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Storage_obj,setType,(void))

 ::Dynamic Storage_obj::readType(int pointer){
            	HX_GC_STACKFRAME(&_hx_pos_26d96d6b91584f71_1062_readType)
HXLINE(1063)		if ((pointer == this->parent->constants->_hx_NULL)) {
HXLINE(1063)			return null();
            		}
HXLINE(1064)		::String className = this->readString(this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(pointer)));
HXLINE(1066)		int cellSize = 16;
HXLINE(1068)		 ::haxe::ds::StringMap statics =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1069)		int staticsLength = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4)));
HXLINE(1071)		int i = (pointer + 4);
HXLINE(1072)		while((i < ((pointer + 4) + staticsLength))){
HXLINE(1073)			int keyPointer = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i)));
HXLINE(1074)			int value = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 4))));
HXLINE(1075)			int type = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 8))));
HXLINE(1076)			int doc = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 12))));
HXLINE(1078)			if ((keyPointer == 0)) {
HXLINE(1079)				i = (i + cellSize);
HXLINE(1080)				continue;
            			}
HXLINE(1083)			{
HXLINE(1083)				::String k = this->readString(keyPointer);
HXDLIN(1083)				 ::Dynamic v =  ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("doc",78,42,4c,00),doc)
            					->setFixed(1,HX_("value",71,7f,b8,31),value)
            					->setFixed(2,HX_("type",ba,f2,08,4d),type));
HXDLIN(1083)				statics->set(k,v);
            			}
HXLINE(1089)			i = (i + cellSize);
            		}
HXLINE(1092)		cellSize = (cellSize - 4);
HXLINE(1095)		 ::haxe::ds::StringMap instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1096)		int instancesLength = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 4)));
HXLINE(1098)		while((i < ((i + 4) + instancesLength))){
HXLINE(1099)			int keyPointer1 = this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(i));
HXLINE(1100)			int type1 = this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 4)));
HXLINE(1101)			int doc1 = this->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((i + 8)));
HXLINE(1103)			if ((keyPointer1 == 0)) {
HXLINE(1104)				i = (i + cellSize);
HXLINE(1105)				continue;
            			}
HXLINE(1108)			{
HXLINE(1108)				::String k1 = this->readString(keyPointer1);
HXDLIN(1108)				 ::Dynamic v1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("doc",78,42,4c,00),doc1)
            					->setFixed(1,HX_("type",ba,f2,08,4d),type1));
HXDLIN(1108)				instances->set(k1,v1);
            			}
HXLINE(1113)			i = (i + cellSize);
            		}
HXLINE(1116)		return  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("staticFields",c7,95,02,9f),statics)
            			->setFixed(1,HX_("typeName",25,76,ca,b5),className)
            			->setFixed(2,HX_("defaultInstanceSize",57,9d,96,48),8)
            			->setFixed(3,HX_("pointer",bd,c0,21,51),pointer)
            			->setFixed(4,HX_("isExternal",55,54,32,5e),false)
            			->setFixed(5,HX_("passedByReference",64,39,ab,71),true)
            			->setFixed(6,HX_("instanceFields",ee,7f,23,7b),instances));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,readType,return )

void Storage_obj::freeType(int pointer){
            	HX_STACKFRAME(&_hx_pos_26d96d6b91584f71_1131_freeType)
HXLINE(1132)		this->freeString(pointer);
HXLINE(1133)		int byteCount = this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((pointer + 4)));
HXLINE(1134)		byteCount = (byteCount + this->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((pointer + 4) + byteCount))));
HXLINE(1135)		byteCount = (byteCount + 8);
HXLINE(1136)		this->freeBytes(pointer,byteCount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Storage_obj,freeType,(void))


::hx::ObjectPtr< Storage_obj > Storage_obj::__new( ::little::interpreter::memory::Memory memory) {
	::hx::ObjectPtr< Storage_obj > __this = new Storage_obj();
	__this->__construct(memory);
	return __this;
}

::hx::ObjectPtr< Storage_obj > Storage_obj::__alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory) {
	Storage_obj *__this = (Storage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Storage_obj), true, "little.interpreter.memory.Storage"));
	*(void **)__this = Storage_obj::_hx_vtable;
	__this->__construct(memory);
	return __this;
}

Storage_obj::Storage_obj()
{
}

void Storage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Storage);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(reserved,"reserved");
	HX_MARK_MEMBER_NAME(storage,"storage");
	HX_MARK_END_CLASS();
}

void Storage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(reserved,"reserved");
	HX_VISIT_MEMBER_NAME(storage,"storage");
}

::hx::Val Storage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"storage") ) { return ::hx::Val( storage ); }
		if (HX_FIELD_EQ(inName,"setByte") ) { return ::hx::Val( setByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSign") ) { return ::hx::Val( setSign_dyn() ); }
		if (HX_FIELD_EQ(inName,"setType") ) { return ::hx::Val( setType_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"reserved") ) { return ::hx::Val( reserved ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return ::hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeByte") ) { return ::hx::Val( freeByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBytes") ) { return ::hx::Val( setBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"setArray") ) { return ::hx::Val( setArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInt16") ) { return ::hx::Val( setInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInt32") ) { return ::hx::Val( setInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"readSign") ) { return ::hx::Val( readSign_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeSign") ) { return ::hx::Val( freeSign_dyn() ); }
		if (HX_FIELD_EQ(inName,"readType") ) { return ::hx::Val( readType_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeType") ) { return ::hx::Val( freeType_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storeByte") ) { return ::hx::Val( storeByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return ::hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeBytes") ) { return ::hx::Val( freeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"readArray") ) { return ::hx::Val( readArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeArray") ) { return ::hx::Val( freeArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt16") ) { return ::hx::Val( readInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeInt16") ) { return ::hx::Val( freeInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUInt16") ) { return ::hx::Val( setUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return ::hx::Val( readInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeInt32") ) { return ::hx::Val( freeInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUInt32") ) { return ::hx::Val( setUInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDouble") ) { return ::hx::Val( setDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"setString") ) { return ::hx::Val( setString_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeSign") ) { return ::hx::Val( storeSign_dyn() ); }
		if (HX_FIELD_EQ(inName,"setObject") ) { return ::hx::Val( setObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeType") ) { return ::hx::Val( storeType_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"storeBytes") ) { return ::hx::Val( storeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeArray") ) { return ::hx::Val( storeArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeInt16") ) { return ::hx::Val( storeInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUInt16") ) { return ::hx::Val( readUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeUInt16") ) { return ::hx::Val( freeUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeInt32") ) { return ::hx::Val( storeInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUInt32") ) { return ::hx::Val( readUInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeUInt32") ) { return ::hx::Val( freeUInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"readDouble") ) { return ::hx::Val( readDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeDouble") ) { return ::hx::Val( freeDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPointer") ) { return ::hx::Val( setPointer_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeString") ) { return ::hx::Val( freeString_dyn() ); }
		if (HX_FIELD_EQ(inName,"readObject") ) { return ::hx::Val( readObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeObject") ) { return ::hx::Val( freeObject_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"storeUInt16") ) { return ::hx::Val( storeUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeUInt32") ) { return ::hx::Val( storeUInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeDouble") ) { return ::hx::Val( storeDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"readPointer") ) { return ::hx::Val( readPointer_dyn() ); }
		if (HX_FIELD_EQ(inName,"freePointer") ) { return ::hx::Val( freePointer_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeString") ) { return ::hx::Val( storeString_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeStatic") ) { return ::hx::Val( storeStatic_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeObject") ) { return ::hx::Val( storeObject_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"storePointer") ) { return ::hx::Val( storePointer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCodeBlock") ) { return ::hx::Val( setCodeBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCondition") ) { return ::hx::Val( setCondition_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"requestMemory") ) { return ::hx::Val( requestMemory_dyn() ); }
		if (HX_FIELD_EQ(inName,"readCodeBlock") ) { return ::hx::Val( readCodeBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeCodeBlock") ) { return ::hx::Val( freeCodeBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"readCondition") ) { return ::hx::Val( readCondition_dyn() ); }
		if (HX_FIELD_EQ(inName,"freeCondition") ) { return ::hx::Val( freeCondition_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"storeCodeBlock") ) { return ::hx::Val( storeCodeBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"storeCondition") ) { return ::hx::Val( storeCondition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Storage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::little::interpreter::memory::Memory >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"storage") ) { storage=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"reserved") ) { reserved=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Storage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("reserved",a8,f6,a5,4e));
	outFields->push(HX_("storage",3b,df,a8,44));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Storage_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::little::interpreter::memory::Memory */ ,(int)offsetof(Storage_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Storage_obj,reserved),HX_("reserved",a8,f6,a5,4e)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Storage_obj,storage),HX_("storage",3b,df,a8,44)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Storage_obj_sStaticStorageInfo = 0;
#endif

static ::String Storage_obj_sMemberFields[] = {
	HX_("parent",2a,05,7e,ed),
	HX_("reserved",a8,f6,a5,4e),
	HX_("storage",3b,df,a8,44),
	HX_("requestMemory",b0,03,6a,c0),
	HX_("storeByte",89,63,40,9d),
	HX_("setByte",ca,5f,a7,06),
	HX_("readByte",7e,f9,1a,69),
	HX_("freeByte",d4,ad,28,04),
	HX_("storeBytes",ca,b4,16,fb),
	HX_("setBytes",69,71,cc,cb),
	HX_("readBytes",35,55,7f,8e),
	HX_("freeBytes",1f,6c,6f,9f),
	HX_("storeArray",f8,19,0e,63),
	HX_("setArray",97,d6,c3,33),
	HX_("readArray",63,ba,76,f6),
	HX_("freeArray",4d,d1,66,07),
	HX_("storeInt16",f3,3d,9f,fb),
	HX_("setInt16",92,fa,54,cc),
	HX_("readInt16",5e,de,07,8f),
	HX_("freeInt16",48,f5,f7,9f),
	HX_("storeUInt16",a0,5f,67,aa),
	HX_("setUInt16",21,ae,b6,78),
	HX_("readUInt16",d5,1c,8b,12),
	HX_("freeUInt16",ab,12,af,d3),
	HX_("storeInt32",ad,3f,9f,fb),
	HX_("setInt32",4c,fc,54,cc),
	HX_("readInt32",18,e0,07,8f),
	HX_("freeInt32",02,f7,f7,9f),
	HX_("storeUInt32",5a,61,67,aa),
	HX_("setUInt32",db,af,b6,78),
	HX_("readUInt32",8f,1e,8b,12),
	HX_("freeUInt32",65,14,af,d3),
	HX_("storeDouble",d2,51,23,c4),
	HX_("setDouble",53,a0,72,92),
	HX_("readDouble",07,0f,47,2c),
	HX_("freeDouble",dd,04,6b,ed),
	HX_("storePointer",dc,82,eb,ec),
	HX_("setPointer",3b,e5,00,a4),
	HX_("readPointer",07,54,0d,a4),
	HX_("freePointer",71,79,60,e2),
	HX_("storeString",92,4f,88,a2),
	HX_("setString",13,9e,d7,70),
	HX_("readString",c7,0c,ac,0a),
	HX_("freeString",9d,02,d0,cb),
	HX_("storeCodeBlock",bf,98,28,bc),
	HX_("setCodeBlock",de,90,22,6d),
	HX_("readCodeBlock",aa,4a,41,dc),
	HX_("freeCodeBlock",94,1e,b8,b1),
	HX_("storeCondition",7a,b1,89,6f),
	HX_("setCondition",99,a9,83,20),
	HX_("readCondition",65,63,a2,8f),
	HX_("freeCondition",4f,37,19,65),
	HX_("storeSign",be,d4,70,a8),
	HX_("setSign",ff,d0,d7,11),
	HX_("readSign",b3,6a,4b,74),
	HX_("freeSign",09,1f,59,0f),
	HX_("storeStatic",6f,03,54,97),
	HX_("storeObject",80,a5,97,a6),
	HX_("setObject",01,f4,e6,74),
	HX_("readObject",b5,62,bb,0e),
	HX_("freeObject",8b,58,df,cf),
	HX_("storeType",3b,37,26,a9),
	HX_("setType",7c,33,8d,12),
	HX_("readType",30,cd,00,75),
	HX_("freeType",86,81,0e,10),
	::String(null()) };

::hx::Class Storage_obj::__mClass;

void Storage_obj::__register()
{
	Storage_obj _hx_dummy;
	Storage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.Storage",5a,89,de,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Storage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Storage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Storage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Storage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
