// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_haxe_hash_Murmur1
#include <haxe/hash/Murmur1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_HashTables
#include <little/interpreter/memory/HashTables.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_24_generateObjectHashTable,"little.interpreter.memory.HashTables","generateObjectHashTable",0xead3a6d2,"little.interpreter.memory.HashTables.generateObjectHashTable","little/interpreter/memory/HashTables.hx",24,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_76_readObjectHashTable,"little.interpreter.memory.HashTables","readObjectHashTable",0xa6ec1cd1,"little.interpreter.memory.HashTables.readObjectHashTable","little/interpreter/memory/HashTables.hx",76,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_115_hashTableHasKey,"little.interpreter.memory.HashTables","hashTableHasKey",0xa54385cb,"little.interpreter.memory.HashTables.hashTableHasKey","little/interpreter/memory/HashTables.hx",115,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_145_hashTableGetKey,"little.interpreter.memory.HashTables","hashTableGetKey",0x8d2bb20f,"little.interpreter.memory.HashTables.hashTableGetKey","little/interpreter/memory/HashTables.hx",145,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_191_objectAddKey,"little.interpreter.memory.HashTables","objectAddKey",0xd9f35477,"little.interpreter.memory.HashTables.objectAddKey","little/interpreter/memory/HashTables.hx",191,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_261_objectSetKey,"little.interpreter.memory.HashTables","objectSetKey",0xaa59d196,"little.interpreter.memory.HashTables.objectSetKey","little/interpreter/memory/HashTables.hx",261,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_303_objectGetKey,"little.interpreter.memory.HashTables","objectGetKey",0xde117d22,"little.interpreter.memory.HashTables.objectGetKey","little/interpreter/memory/HashTables.hx",303,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_313_getHashTableOf,"little.interpreter.memory.HashTables","getHashTableOf",0x4a72167b,"little.interpreter.memory.HashTables.getHashTableOf","little/interpreter/memory/HashTables.hx",313,0x5a0ad2cb)
HX_LOCAL_STACK_FRAME(_hx_pos_baf1d89be89135a0_11_boot,"little.interpreter.memory.HashTables","boot",0xc9bf488c,"little.interpreter.memory.HashTables.boot","little/interpreter/memory/HashTables.hx",11,0x5a0ad2cb)
namespace little{
namespace interpreter{
namespace memory{

void HashTables_obj::__construct() { }

Dynamic HashTables_obj::__CreateEmpty() { return new HashTables_obj; }

void *HashTables_obj::_hx_vtable = 0;

Dynamic HashTables_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HashTables_obj > _hx_result = new HashTables_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HashTables_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4c3dc8b8;
}

int HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE;

 ::haxe::io::Bytes HashTables_obj::generateObjectHashTable(::Array< ::Dynamic> pairs){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_24_generateObjectHashTable)
HXLINE(  25)		int initialLength;
HXDLIN(  25)		if ((pairs->length > 1)) {
HXLINE(  25)			initialLength = pairs->length;
            		}
            		else {
HXLINE(  25)			initialLength = 5;
            		}
HXDLIN(  25)		int initialLength1 = ((initialLength * ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) * 3);
HXLINE(  29)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(initialLength1);
HXDLIN(  29)		this1->fill(0,initialLength1,0);
HXDLIN(  29)		 ::haxe::io::Bytes array = this1;
HXLINE(  31)		{
HXLINE(  31)			int _g = 0;
HXDLIN(  31)			while((_g < pairs->length)){
HXLINE(  31)				 ::Dynamic pair = pairs->__get(_g);
HXDLIN(  31)				_g = (_g + 1);
HXLINE(  32)				int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(( (::String)(pair->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) ),null()),null());
HXLINE(  36)				::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE(  37)				::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) ));
HXDLIN(  37)				::cpp::Int64 b = ( (::cpp::Int64)(array->length) );
HXDLIN(  37)				if (_hx_int64_is_zero(b)) {
HXLINE(  37)					HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            				}
HXDLIN(  37)				int keyIndex = _hx_int64_low(_hx_int64_mod(a,b));
HXLINE(  39)				if (((((( (int)(array->b->__get(keyIndex)) ) | (( (int)(array->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(array->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(array->b->__get((keyIndex + 3))) ) << 24)) == 0)) {
HXLINE(  40)					{
HXLINE(  40)						int v = ( (int)(pair->__Field(HX_("keyPointer",de,60,a9,bf),::hx::paccDynamic)) );
HXDLIN(  40)						array->b[keyIndex] = ( (unsigned char)(v) );
HXDLIN(  40)						array->b[(keyIndex + 1)] = ( (unsigned char)((v >> 8)) );
HXDLIN(  40)						array->b[(keyIndex + 2)] = ( (unsigned char)((v >> 16)) );
HXDLIN(  40)						array->b[(keyIndex + 3)] = ( (unsigned char)(::hx::UShr(v,24)) );
            					}
HXLINE(  41)					{
HXLINE(  41)						int pos = (keyIndex + 4);
HXDLIN(  41)						int v1 = ( (int)(pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN(  41)						array->b[pos] = ( (unsigned char)(v1) );
HXDLIN(  41)						array->b[(pos + 1)] = ( (unsigned char)((v1 >> 8)) );
HXDLIN(  41)						array->b[(pos + 2)] = ( (unsigned char)((v1 >> 16)) );
HXDLIN(  41)						array->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(v1,24)) );
            					}
HXLINE(  42)					{
HXLINE(  42)						int pos1 = (keyIndex + 8);
HXDLIN(  42)						int v2 = ( (int)(pair->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXDLIN(  42)						array->b[pos1] = ( (unsigned char)(v2) );
HXDLIN(  42)						array->b[(pos1 + 1)] = ( (unsigned char)((v2 >> 8)) );
HXDLIN(  42)						array->b[(pos1 + 2)] = ( (unsigned char)((v2 >> 16)) );
HXDLIN(  42)						array->b[(pos1 + 3)] = ( (unsigned char)(::hx::UShr(v2,24)) );
            					}
HXLINE(  43)					{
HXLINE(  43)						int pos2 = (keyIndex + 12);
HXDLIN(  43)						int v3 = ( (int)(pair->__Field(HX_("doc",78,42,4c,00),::hx::paccDynamic)) );
HXDLIN(  43)						array->b[pos2] = ( (unsigned char)(v3) );
HXDLIN(  43)						array->b[(pos2 + 1)] = ( (unsigned char)((v3 >> 8)) );
HXDLIN(  43)						array->b[(pos2 + 2)] = ( (unsigned char)((v3 >> 16)) );
HXDLIN(  43)						array->b[(pos2 + 3)] = ( (unsigned char)(::hx::UShr(v3,24)) );
            					}
            				}
            				else {
HXLINE(  47)					int incrementation = 0;
HXLINE(  48)					int i = keyIndex;
HXLINE(  49)					while(((((( (int)(array->b->__get(i)) ) | (( (int)(array->b->__get((i + 1))) ) << 8)) | (( (int)(array->b->__get((i + 2))) ) << 16)) | (( (int)(array->b->__get((i + 3))) ) << 24)) != 0)){
HXLINE(  50)						i = (i + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE(  51)						incrementation = (incrementation + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE(  52)						if ((i >= array->length)) {
HXLINE(  53)							i = 0;
            						}
HXLINE(  55)						if ((incrementation >= array->length)) {
HXLINE(  56)							HX_STACK_DO_THROW(HX_("Object hash table did not generate. This should never happen. Initial length may be incorrect.",f8,88,9a,e9));
            						}
            					}
HXLINE(  59)					{
HXLINE(  59)						int v4 = ( (int)(pair->__Field(HX_("keyPointer",de,60,a9,bf),::hx::paccDynamic)) );
HXDLIN(  59)						array->b[i] = ( (unsigned char)(v4) );
HXDLIN(  59)						array->b[(i + 1)] = ( (unsigned char)((v4 >> 8)) );
HXDLIN(  59)						array->b[(i + 2)] = ( (unsigned char)((v4 >> 16)) );
HXDLIN(  59)						array->b[(i + 3)] = ( (unsigned char)(::hx::UShr(v4,24)) );
            					}
HXLINE(  60)					{
HXLINE(  60)						int pos3 = (i + 4);
HXDLIN(  60)						int v5 = ( (int)(pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN(  60)						array->b[pos3] = ( (unsigned char)(v5) );
HXDLIN(  60)						array->b[(pos3 + 1)] = ( (unsigned char)((v5 >> 8)) );
HXDLIN(  60)						array->b[(pos3 + 2)] = ( (unsigned char)((v5 >> 16)) );
HXDLIN(  60)						array->b[(pos3 + 3)] = ( (unsigned char)(::hx::UShr(v5,24)) );
            					}
HXLINE(  61)					{
HXLINE(  61)						int pos4 = (i + 8);
HXDLIN(  61)						int v6 = ( (int)(pair->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXDLIN(  61)						array->b[pos4] = ( (unsigned char)(v6) );
HXDLIN(  61)						array->b[(pos4 + 1)] = ( (unsigned char)((v6 >> 8)) );
HXDLIN(  61)						array->b[(pos4 + 2)] = ( (unsigned char)((v6 >> 16)) );
HXDLIN(  61)						array->b[(pos4 + 3)] = ( (unsigned char)(::hx::UShr(v6,24)) );
            					}
HXLINE(  62)					{
HXLINE(  62)						int pos5 = (i + 12);
HXDLIN(  62)						int v7 = ( (int)(pair->__Field(HX_("doc",78,42,4c,00),::hx::paccDynamic)) );
HXDLIN(  62)						array->b[pos5] = ( (unsigned char)(v7) );
HXDLIN(  62)						array->b[(pos5 + 1)] = ( (unsigned char)((v7 >> 8)) );
HXDLIN(  62)						array->b[(pos5 + 2)] = ( (unsigned char)((v7 >> 16)) );
HXDLIN(  62)						array->b[(pos5 + 3)] = ( (unsigned char)(::hx::UShr(v7,24)) );
            					}
            				}
            			}
            		}
HXLINE(  66)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HashTables_obj,generateObjectHashTable,return )

::Array< ::Dynamic> HashTables_obj::readObjectHashTable( ::haxe::io::Bytes bytes, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_76_readObjectHashTable)
HXLINE(  77)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  79)		int i = 0;
HXLINE(  80)		while((i < bytes->length)){
HXLINE(  81)			int keyPointer = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(bytes->b->__get(i)) ) | (( (int)(bytes->b->__get((i + 1))) ) << 8)) | (( (int)(bytes->b->__get((i + 2))) ) << 16)) | (( (int)(bytes->b->__get((i + 3))) ) << 24)));
HXLINE(  82)			int pos = (i + 4);
HXDLIN(  82)			int value = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(bytes->b->__get(pos)) ) | (( (int)(bytes->b->__get((pos + 1))) ) << 8)) | (( (int)(bytes->b->__get((pos + 2))) ) << 16)) | (( (int)(bytes->b->__get((pos + 3))) ) << 24)));
HXLINE(  83)			int pos1 = (i + 8);
HXDLIN(  83)			int type = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(bytes->b->__get(pos1)) ) | (( (int)(bytes->b->__get((pos1 + 1))) ) << 8)) | (( (int)(bytes->b->__get((pos1 + 2))) ) << 16)) | (( (int)(bytes->b->__get((pos1 + 3))) ) << 24)));
HXLINE(  84)			int pos2 = (i + 12);
HXDLIN(  84)			int doc = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(bytes->b->__get(pos2)) ) | (( (int)(bytes->b->__get((pos2 + 1))) ) << 8)) | (( (int)(bytes->b->__get((pos2 + 2))) ) << 16)) | (( (int)(bytes->b->__get((pos2 + 3))) ) << 24)));
HXLINE(  85)			::String key = null();
HXLINE(  87)			if ((keyPointer == 0)) {
HXLINE(  88)				i = (i + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE(  89)				continue;
            			}
HXLINE(  91)			if (::hx::IsNotNull( storage )) {
HXLINE(  92)				key = storage->readString(keyPointer);
            			}
HXLINE(  95)			arr->push( ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("keyPointer",de,60,a9,bf),keyPointer)
            				->setFixed(1,HX_("doc",78,42,4c,00),doc)
            				->setFixed(2,HX_("key",9f,89,51,00),key)
            				->setFixed(3,HX_("value",71,7f,b8,31),value)
            				->setFixed(4,HX_("type",ba,f2,08,4d),type)));
HXLINE( 102)			i = (i + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
            		}
HXLINE( 105)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HashTables_obj,readObjectHashTable,return )

bool HashTables_obj::hashTableHasKey( ::haxe::io::Bytes hashTable,::String key, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_115_hashTableHasKey)
HXLINE( 116)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(key,null()),null());
HXLINE( 118)		::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE( 120)		::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) ));
HXDLIN( 120)		::cpp::Int64 b = ( (::cpp::Int64)(hashTable->length) );
HXDLIN( 120)		if (_hx_int64_is_zero(b)) {
HXLINE( 120)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 120)		int keyIndex = _hx_int64_low(_hx_int64_mod(a,b));
HXLINE( 121)		int incrementation = 0;
HXLINE( 122)		while(true){
HXLINE( 123)			::String currentKey = storage->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(keyIndex)) ) | (( (int)(hashTable->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTable->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTable->b->__get((keyIndex + 3))) ) << 24))));
HXLINE( 124)			if ((currentKey == key)) {
HXLINE( 125)				return true;
            			}
HXLINE( 127)			keyIndex = (keyIndex + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 128)			incrementation = (incrementation + 1);
HXLINE( 129)			if ((keyIndex >= hashTable->length)) {
HXLINE( 130)				keyIndex = 0;
            			}
HXLINE( 132)			if ((incrementation >= hashTable->length)) {
HXLINE( 133)				return false;
            			}
            		}
HXLINE( 122)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HashTables_obj,hashTableHasKey,return )

 ::Dynamic HashTables_obj::hashTableGetKey( ::haxe::io::Bytes hashTable,::String key, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_145_hashTableGetKey)
HXLINE( 146)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(key,null()),null());
HXLINE( 148)		::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE( 150)		::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) ));
HXDLIN( 150)		::cpp::Int64 b = ( (::cpp::Int64)(hashTable->length) );
HXDLIN( 150)		if (_hx_int64_is_zero(b)) {
HXLINE( 150)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 150)		int keyIndex = _hx_int64_low(_hx_int64_mod(a,b));
HXLINE( 152)		int incrementation = 0;
HXLINE( 153)		while(true){
HXLINE( 154)			::String currentKey = storage->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(keyIndex)) ) | (( (int)(hashTable->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTable->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTable->b->__get((keyIndex + 3))) ) << 24))));
HXLINE( 155)			if ((currentKey == key)) {
HXLINE( 158)				int _hx_tmp = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(keyIndex)) ) | (( (int)(hashTable->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTable->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTable->b->__get((keyIndex + 3))) ) << 24)));
HXLINE( 159)				int pos = (keyIndex + 4);
HXDLIN( 159)				int _hx_tmp1 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(pos)) ) | (( (int)(hashTable->b->__get((pos + 1))) ) << 8)) | (( (int)(hashTable->b->__get((pos + 2))) ) << 16)) | (( (int)(hashTable->b->__get((pos + 3))) ) << 24)));
HXLINE( 160)				int pos1 = (keyIndex + 8);
HXDLIN( 160)				int _hx_tmp2 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(pos1)) ) | (( (int)(hashTable->b->__get((pos1 + 1))) ) << 8)) | (( (int)(hashTable->b->__get((pos1 + 2))) ) << 16)) | (( (int)(hashTable->b->__get((pos1 + 3))) ) << 24)));
HXLINE( 161)				int pos2 = (keyIndex + 12);
HXLINE( 156)				return  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("keyPointer",de,60,a9,bf),_hx_tmp)
            					->setFixed(1,HX_("doc",78,42,4c,00),::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(hashTable->b->__get(pos2)) ) | (( (int)(hashTable->b->__get((pos2 + 1))) ) << 8)) | (( (int)(hashTable->b->__get((pos2 + 2))) ) << 16)) | (( (int)(hashTable->b->__get((pos2 + 3))) ) << 24))))
            					->setFixed(2,HX_("key",9f,89,51,00),key)
            					->setFixed(3,HX_("value",71,7f,b8,31),_hx_tmp1)
            					->setFixed(4,HX_("type",ba,f2,08,4d),_hx_tmp2));
            			}
HXLINE( 165)			keyIndex = (keyIndex + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 166)			incrementation = (incrementation + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 167)			if ((keyIndex >= hashTable->length)) {
HXLINE( 168)				keyIndex = 0;
            			}
HXLINE( 170)			if ((incrementation >= hashTable->length)) {
HXLINE( 171)				HX_STACK_DO_THROW(((HX_("Key ",c1,0d,e0,31) + key) + HX_(" not found in hash table",8c,e8,ab,ee)));
            			}
            		}
HXLINE( 153)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HashTables_obj,hashTableGetKey,return )

void HashTables_obj::objectAddKey(int object,::String key,int value,int type,int doc, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_191_objectAddKey)
HXLINE( 192)		int hashTableBytes = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)));
HXDLIN( 192)		 ::haxe::io::Bytes hashTableBytes1 = storage->readBytes(hashTableBytes,storage->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(object)));
HXLINE( 193)		::Array< ::Dynamic> table = ::little::interpreter::memory::HashTables_obj::readObjectHashTable(hashTableBytes1,storage);
HXLINE( 198)		int tableSize = hashTableBytes1->length;
HXLINE( 199)		int occupied = (table->length * ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 201)		if (((( (Float)(occupied) ) / ( (Float)(tableSize) )) >= ((Float)0.7))) {
HXLINE( 203)			table->push( ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("keyPointer",de,60,a9,bf),storage->storeString(key))
            				->setFixed(1,HX_("doc",78,42,4c,00),doc)
            				->setFixed(2,HX_("key",9f,89,51,00),key)
            				->setFixed(3,HX_("value",71,7f,b8,31),value)
            				->setFixed(4,HX_("type",ba,f2,08,4d),type)));
HXLINE( 212)			 ::haxe::io::Bytes newHashTable = ::little::interpreter::memory::HashTables_obj::generateObjectHashTable(table);
HXLINE( 214)			int _hx_tmp = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)));
HXDLIN( 214)			storage->freeBytes(_hx_tmp,hashTableBytes1->length);
HXLINE( 216)			int tablePointer = storage->storeBytes(newHashTable->length,newHashTable);
HXLINE( 218)			storage->setPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)),tablePointer);
HXLINE( 220)			storage->setInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(object),newHashTable->length);
HXLINE( 221)			return;
            		}
HXLINE( 224)		int hashTablePosition = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)));
HXLINE( 226)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(key,null()),null());
HXLINE( 227)		::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE( 229)		::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) ));
HXDLIN( 229)		::cpp::Int64 b = ( (::cpp::Int64)(hashTableBytes1->length) );
HXDLIN( 229)		if (_hx_int64_is_zero(b)) {
HXLINE( 229)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 229)		int keyIndex = _hx_int64_low(_hx_int64_mod(a,b));
HXLINE( 231)		int incrementation = 0;
HXLINE( 233)		while(true){
HXLINE( 234)			if (((((( (int)(hashTableBytes1->b->__get(keyIndex)) ) | (( (int)(hashTableBytes1->b->__get((keyIndex + 1))) ) << 8)) | (( (int)(hashTableBytes1->b->__get((keyIndex + 2))) ) << 16)) | (( (int)(hashTableBytes1->b->__get((keyIndex + 3))) ) << 24)) == 0)) {
HXLINE( 235)				int _hx_tmp1 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((hashTablePosition + keyIndex));
HXDLIN( 235)				storage->setPointer(_hx_tmp1,::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(storage->storeString(key)));
HXLINE( 236)				int _hx_tmp2 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 4));
HXDLIN( 236)				storage->setPointer(_hx_tmp2,::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(value));
HXLINE( 237)				int _hx_tmp3 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 8));
HXDLIN( 237)				storage->setPointer(_hx_tmp3,::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(type));
HXLINE( 238)				int _hx_tmp4 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 12));
HXDLIN( 238)				storage->setPointer(_hx_tmp4,::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(doc));
HXLINE( 239)				return;
            			}
HXLINE( 241)			keyIndex = (keyIndex + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 242)			incrementation = (incrementation + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 243)			if ((keyIndex >= tableSize)) {
HXLINE( 244)				keyIndex = 0;
            			}
HXLINE( 246)			if ((incrementation >= tableSize)) {
HXLINE( 247)				HX_STACK_DO_THROW(HX_("How did you get here? 6",49,49,c9,ad));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(HashTables_obj,objectAddKey,(void))

void HashTables_obj::objectSetKey(int object,::String key, ::Dynamic pair, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_261_objectSetKey)
HXLINE( 262)		int hashTableBytesLength = storage->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(object));
HXLINE( 263)		int hashTablePosition = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)));
HXLINE( 265)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(key,null()),null());
HXLINE( 266)		::cpp::Int64 khI64 = _hx_int64_make(0,keyHash);
HXLINE( 268)		::cpp::Int64 a = _hx_int64_mul(khI64,( (::cpp::Int64)(::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE) ));
HXDLIN( 268)		if (_hx_int64_is_zero(( (::cpp::Int64)(hashTableBytesLength) ))) {
HXLINE( 268)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 268)		int keyIndex = _hx_int64_low(_hx_int64_mod(a,( (::cpp::Int64)(hashTableBytesLength) )));
HXLINE( 270)		int incrementation = 0;
HXLINE( 271)		while(true){
HXLINE( 272)			::String currentKey = storage->readString(storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((hashTablePosition + keyIndex))));
HXLINE( 273)			if ((currentKey == key)) {
HXLINE( 274)				if (::hx::IsNotNull( pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic) )) {
HXLINE( 275)					int _hx_tmp = ( (int)(pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 275)					storage->setInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 4)),_hx_tmp);
            				}
HXLINE( 276)				if (::hx::IsNotNull( pair->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic) )) {
HXLINE( 277)					int _hx_tmp1 = ( (int)(pair->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) );
HXDLIN( 277)					storage->setInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 8)),_hx_tmp1);
            				}
HXLINE( 278)				if (::hx::IsNotNull( pair->__Field(HX_("doc",78,42,4c,00),::hx::paccDynamic) )) {
HXLINE( 279)					int _hx_tmp2 = ( (int)(pair->__Field(HX_("doc",78,42,4c,00),::hx::paccDynamic)) );
HXDLIN( 279)					storage->setInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(((hashTablePosition + keyIndex) + 12)),_hx_tmp2);
            				}
HXLINE( 281)				return;
            			}
HXLINE( 284)			keyIndex = (keyIndex + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 285)			incrementation = (incrementation + ::little::interpreter::memory::HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE);
HXLINE( 286)			if ((keyIndex >= hashTableBytesLength)) {
HXLINE( 287)				keyIndex = 0;
            			}
HXLINE( 289)			if ((incrementation >= hashTableBytesLength)) {
HXLINE( 290)				HX_STACK_DO_THROW(HX_("Cannot set a non-existing key in the object's hash table.",0b,83,79,f2));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(HashTables_obj,objectSetKey,(void))

 ::Dynamic HashTables_obj::objectGetKey(int object,::String key, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_303_objectGetKey)
HXLINE( 304)		int hashTableBytes = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((object + 4)));
HXDLIN( 304)		 ::haxe::io::Bytes hashTableBytes1 = storage->readBytes(hashTableBytes,storage->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(object)));
HXLINE( 305)		return ::little::interpreter::memory::HashTables_obj::hashTableGetKey(hashTableBytes1,key,storage);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HashTables_obj,objectGetKey,return )

 ::haxe::io::Bytes HashTables_obj::getHashTableOf(int objectPointer, ::little::interpreter::memory::Storage storage){
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_313_getHashTableOf)
HXLINE( 314)		int bytesLength = storage->readInt32(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(objectPointer));
HXLINE( 315)		int bytesPointer = storage->readPointer(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((objectPointer + 4)));
HXLINE( 316)		return storage->readBytes(bytesPointer,bytesLength);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HashTables_obj,getHashTableOf,return )


HashTables_obj::HashTables_obj()
{
}

bool HashTables_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"objectAddKey") ) { outValue = objectAddKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"objectSetKey") ) { outValue = objectSetKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"objectGetKey") ) { outValue = objectGetKey_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getHashTableOf") ) { outValue = getHashTableOf_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"hashTableHasKey") ) { outValue = hashTableHasKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hashTableGetKey") ) { outValue = hashTableGetKey_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"readObjectHashTable") ) { outValue = readObjectHashTable_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"generateObjectHashTable") ) { outValue = generateObjectHashTable_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"OBJECT_HASH_TABLE_CELL_SIZE") ) { outValue = ( OBJECT_HASH_TABLE_CELL_SIZE ); return true; }
	}
	return false;
}

bool HashTables_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 27:
		if (HX_FIELD_EQ(inName,"OBJECT_HASH_TABLE_CELL_SIZE") ) { OBJECT_HASH_TABLE_CELL_SIZE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HashTables_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo HashTables_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE,HX_("OBJECT_HASH_TABLE_CELL_SIZE",fc,a3,b7,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void HashTables_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE,"OBJECT_HASH_TABLE_CELL_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HashTables_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HashTables_obj::OBJECT_HASH_TABLE_CELL_SIZE,"OBJECT_HASH_TABLE_CELL_SIZE");
};

#endif

::hx::Class HashTables_obj::__mClass;

static ::String HashTables_obj_sStaticFields[] = {
	HX_("OBJECT_HASH_TABLE_CELL_SIZE",fc,a3,b7,6a),
	HX_("generateObjectHashTable",ec,0a,2b,94),
	HX_("readObjectHashTable",eb,eb,c4,19),
	HX_("hashTableHasKey",e5,3f,cc,b3),
	HX_("hashTableGetKey",29,6c,b4,9b),
	HX_("objectAddKey",1d,a6,0c,79),
	HX_("objectSetKey",3c,23,73,49),
	HX_("objectGetKey",c8,ce,2a,7d),
	HX_("getHashTableOf",a1,9d,bf,df),
	::String(null())
};

void HashTables_obj::__register()
{
	HashTables_obj _hx_dummy;
	HashTables_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.HashTables",54,fa,ba,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HashTables_obj::__GetStatic;
	__mClass->mSetStaticField = &HashTables_obj::__SetStatic;
	__mClass->mMarkFunc = HashTables_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HashTables_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< HashTables_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HashTables_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HashTables_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HashTables_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void HashTables_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_baf1d89be89135a0_11_boot)
HXDLIN(  11)		OBJECT_HASH_TABLE_CELL_SIZE = 16;
            	}
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
