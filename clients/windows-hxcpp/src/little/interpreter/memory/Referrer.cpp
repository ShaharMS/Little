// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_hash_Murmur1
#include <haxe/hash/Murmur1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Referrer
#include <little/interpreter/memory/Referrer.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Storage
#include <little/interpreter/memory/Storage.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf10ac891c5595f2_36_new,"little.interpreter.memory.Referrer","new",0x72767ed2,"little.interpreter.memory.Referrer.new","little/interpreter/memory/Referrer.hx",36,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_27_get_currentScopeStart,"little.interpreter.memory.Referrer","get_currentScopeStart",0x8873f190,"little.interpreter.memory.Referrer.get_currentScopeStart","little/interpreter/memory/Referrer.hx",27,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_30_get_currentScopeLength,"little.interpreter.memory.Referrer","get_currentScopeLength",0x760c9ff8,"little.interpreter.memory.Referrer.get_currentScopeLength","little/interpreter/memory/Referrer.hx",30,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_49_requestMemory,"little.interpreter.memory.Referrer","requestMemory",0x80fdf4a2,"little.interpreter.memory.Referrer.requestMemory","little/interpreter/memory/Referrer.hx",49,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_59_pushScope,"little.interpreter.memory.Referrer","pushScope",0x8fdce94c,"little.interpreter.memory.Referrer.pushScope","little/interpreter/memory/Referrer.hx",59,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_80_popScope,"little.interpreter.memory.Referrer","popScope",0x21f56a91,"little.interpreter.memory.Referrer.popScope","little/interpreter/memory/Referrer.hx",80,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_96_reference,"little.interpreter.memory.Referrer","reference",0x2dad17bd,"little.interpreter.memory.Referrer.reference","little/interpreter/memory/Referrer.hx",96,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_120_dereference,"little.interpreter.memory.Referrer","dereference",0xf809a89c,"little.interpreter.memory.Referrer.dereference","little/interpreter/memory/Referrer.hx",120,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_148_get,"little.interpreter.memory.Referrer","get",0x72712f08,"little.interpreter.memory.Referrer.get","little/interpreter/memory/Referrer.hx",148,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_189_set,"little.interpreter.memory.Referrer","set",0x727a4a14,"little.interpreter.memory.Referrer.set","little/interpreter/memory/Referrer.hx",189,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_224_exists,"little.interpreter.memory.Referrer","exists",0x1d7882aa,"little.interpreter.memory.Referrer.exists","little/interpreter/memory/Referrer.hx",224,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_255_keyValueIterator,"little.interpreter.memory.Referrer","keyValueIterator",0x2b667fae,"little.interpreter.memory.Referrer.keyValueIterator","little/interpreter/memory/Referrer.hx",255,0x407e347f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf10ac891c5595f2_20_boot,"little.interpreter.memory.Referrer","boot",0xad517980,"little.interpreter.memory.Referrer.boot","little/interpreter/memory/Referrer.hx",20,0x407e347f)
namespace little{
namespace interpreter{
namespace memory{

void Referrer_obj::__construct( ::little::interpreter::memory::Memory memory){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_36_new)
HXLINE(  38)		this->parent = memory;
HXLINE(  40)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(1024);
HXDLIN(  40)		this1->fill(0,1024,0);
HXDLIN(  40)		this->bytes = this1;
HXLINE(  41)		{
HXLINE(  41)			 ::haxe::io::Bytes _this = this->bytes;
HXDLIN(  41)			_this->b[0] = ( (unsigned char)(4) );
HXDLIN(  41)			_this->b[1] = ( (unsigned char)(0) );
HXDLIN(  41)			_this->b[2] = ( (unsigned char)(0) );
HXDLIN(  41)			_this->b[3] = ( (unsigned char)(0) );
            		}
HXLINE(  42)		{
HXLINE(  42)			 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN(  42)			_this1->b[4] = ( (unsigned char)(0) );
HXDLIN(  42)			_this1->b[5] = ( (unsigned char)(0) );
            		}
HXLINE(  43)		{
HXLINE(  43)			 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN(  43)			_this2->b[6] = ( (unsigned char)(0) );
HXDLIN(  43)			_this2->b[7] = ( (unsigned char)(0) );
            		}
            	}

Dynamic Referrer_obj::__CreateEmpty() { return new Referrer_obj; }

void *Referrer_obj::_hx_vtable = 0;

Dynamic Referrer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Referrer_obj > _hx_result = new Referrer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Referrer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70701b44;
}

int Referrer_obj::get_currentScopeStart(){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_27_get_currentScopeStart)
HXDLIN(  27)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN(  27)		return (((( (int)(_this->b->__get(0)) ) | (( (int)(_this->b->__get(1)) ) << 8)) | (( (int)(_this->b->__get(2)) ) << 16)) | (( (int)(_this->b->__get(3)) ) << 24));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,get_currentScopeStart,return )

int Referrer_obj::get_currentScopeLength(){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_30_get_currentScopeLength)
HXDLIN(  30)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN(  30)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN(  30)		int pos = ((((( (int)(_this1->b->__get(0)) ) | (( (int)(_this1->b->__get(1)) ) << 8)) | (( (int)(_this1->b->__get(2)) ) << 16)) | (( (int)(_this1->b->__get(3)) ) << 24)) + 2);
HXDLIN(  30)		return (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,get_currentScopeLength,return )

void Referrer_obj::requestMemory(){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_49_requestMemory)
HXLINE(  50)		if ((this->bytes->length > this->parent->maxMemorySize)) {
HXLINE(  51)			::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Too many scopes have been created, referrer's stack has overflown (check for infinite recursion)",ef,6f,51,f9)),HX_("Memory, Referrer",d4,85,0f,64));
            		}
HXLINE(  53)		{
HXLINE(  53)			 ::haxe::io::Bytes newBytes = ::haxe::io::Bytes_obj::alloc((this->bytes->length + 1024));
HXDLIN(  53)			 ::haxe::io::Bytes _hx_tmp = this->bytes;
HXDLIN(  53)			::Array< int > values = ::Array_obj< int >::__new(2)->init(0,newBytes->length)->init(1,this->bytes->length);
HXDLIN(  53)			int min = values->__get(0);
HXDLIN(  53)			{
HXLINE(  53)				int _g = 0;
HXDLIN(  53)				int _g1 = values->length;
HXDLIN(  53)				while((_g < _g1)){
HXLINE(  53)					_g = (_g + 1);
HXDLIN(  53)					int i = (_g - 1);
HXDLIN(  53)					if ((values->__get(i) < min)) {
HXLINE(  53)						min = values->__get(i);
            					}
            				}
            			}
HXDLIN(  53)			newBytes->blit(0,_hx_tmp,0,min);
HXDLIN(  53)			this->bytes = newBytes;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,requestMemory,(void))

void Referrer_obj::pushScope(){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_59_pushScope)
HXLINE(  60)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN(  60)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN(  60)		int pos = ((((( (int)(_this1->b->__get(0)) ) | (( (int)(_this1->b->__get(1)) ) << 8)) | (( (int)(_this1->b->__get(2)) ) << 16)) | (( (int)(_this1->b->__get(3)) ) << 24)) + 2);
HXDLIN(  60)		int currentScopeLength = (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
HXLINE(  61)		 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN(  61)		int currentScopeStart = ((((( (int)(_this2->b->__get(0)) ) | (( (int)(_this2->b->__get(1)) ) << 8)) | (( (int)(_this2->b->__get(2)) ) << 16)) | (( (int)(_this2->b->__get(3)) ) << 24)) + 4);
HXLINE(  63)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(4);
HXDLIN(  63)		this1->fill(0,4,0);
HXDLIN(  63)		 ::haxe::io::Bytes header = this1;
HXLINE(  64)		{
HXLINE(  64)			header->b[0] = ( (unsigned char)(currentScopeLength) );
HXDLIN(  64)			header->b[1] = ( (unsigned char)((currentScopeLength >> 8)) );
            		}
HXLINE(  65)		{
HXLINE(  65)			header->b[2] = ( (unsigned char)(0) );
HXDLIN(  65)			header->b[3] = ( (unsigned char)(0) );
            		}
HXLINE(  67)		int writePosition = (currentScopeStart + (currentScopeLength * ::little::interpreter::memory::Referrer_obj::KEY_SIZE));
HXLINE(  69)		if ((((writePosition + 2) + 2) > this->bytes->length)) {
HXLINE(  70)			this->requestMemory();
            		}
HXLINE(  73)		this->bytes->blit(writePosition,header,0,header->length);
HXLINE(  74)		{
HXLINE(  74)			 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN(  74)			_this3->b[0] = ( (unsigned char)(writePosition) );
HXDLIN(  74)			_this3->b[1] = ( (unsigned char)((writePosition >> 8)) );
HXDLIN(  74)			_this3->b[2] = ( (unsigned char)((writePosition >> 16)) );
HXDLIN(  74)			_this3->b[3] = ( (unsigned char)(::hx::UShr(writePosition,24)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,pushScope,(void))

void Referrer_obj::popScope(){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_80_popScope)
HXLINE(  81)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN(  81)		int currentScopePosition = (((( (int)(_this->b->__get(0)) ) | (( (int)(_this->b->__get(1)) ) << 8)) | (( (int)(_this->b->__get(2)) ) << 16)) | (( (int)(_this->b->__get(3)) ) << 24));
HXLINE(  82)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN(  82)		int previousScopeLength = (( (int)(_this1->b->__get(currentScopePosition)) ) | (( (int)(_this1->b->__get((currentScopePosition + 1))) ) << 8));
HXLINE(  83)		 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN(  83)		int pos = (currentScopePosition + 2);
HXDLIN(  83)		int currentScopeLength = (( (int)(_this2->b->__get(pos)) ) | (( (int)(_this2->b->__get((pos + 1))) ) << 8));
HXLINE(  86)		{
HXLINE(  86)			 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN(  86)			int v = ((currentScopePosition - (previousScopeLength * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
HXDLIN(  86)			_this3->b[0] = ( (unsigned char)(v) );
HXDLIN(  86)			_this3->b[1] = ( (unsigned char)((v >> 8)) );
HXDLIN(  86)			_this3->b[2] = ( (unsigned char)((v >> 16)) );
HXDLIN(  86)			_this3->b[3] = ( (unsigned char)(::hx::UShr(v,24)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,popScope,(void))

void Referrer_obj::reference(::String key,int address,::String type){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_96_reference)
HXLINE(  97)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(::haxe::Serializer_obj::run(key),null()),null());
HXLINE(  98)		int stringName = this->parent->storage->storeString(key);
HXLINE( 100)		int writePosition = (this->get_currentScopeStart() + 4);
HXDLIN( 100)		int writePosition1 = this->get_currentScopeLength();
HXDLIN( 100)		int writePosition2 = (writePosition + (writePosition1 * ::little::interpreter::memory::Referrer_obj::KEY_SIZE));
HXLINE( 102)		if (((writePosition2 + ::little::interpreter::memory::Referrer_obj::KEY_SIZE) > this->bytes->length)) {
HXLINE( 103)			this->requestMemory();
            		}
HXLINE( 106)		{
HXLINE( 106)			 ::haxe::io::Bytes this1 = this->bytes;
HXDLIN( 106)			{
HXLINE( 106)				this1->b[writePosition2] = ( (unsigned char)(keyHash) );
HXDLIN( 106)				this1->b[(writePosition2 + 1)] = ( (unsigned char)((keyHash >> 8)) );
HXDLIN( 106)				this1->b[(writePosition2 + 2)] = ( (unsigned char)((keyHash >> 16)) );
HXDLIN( 106)				this1->b[(writePosition2 + 3)] = ( (unsigned char)(::hx::UShr(keyHash,24)) );
            			}
            		}
HXLINE( 107)		{
HXLINE( 107)			 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 107)			int pos = (writePosition2 + 4);
HXDLIN( 107)			int v = stringName;
HXDLIN( 107)			_this->b[pos] = ( (unsigned char)(v) );
HXDLIN( 107)			_this->b[(pos + 1)] = ( (unsigned char)((v >> 8)) );
HXDLIN( 107)			_this->b[(pos + 2)] = ( (unsigned char)((v >> 16)) );
HXDLIN( 107)			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(v,24)) );
            		}
HXLINE( 108)		{
HXLINE( 108)			 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 108)			int pos1 = ((writePosition2 + 4) + 4);
HXDLIN( 108)			int v1 = address;
HXDLIN( 108)			_this1->b[pos1] = ( (unsigned char)(v1) );
HXDLIN( 108)			_this1->b[(pos1 + 1)] = ( (unsigned char)((v1 >> 8)) );
HXDLIN( 108)			_this1->b[(pos1 + 2)] = ( (unsigned char)((v1 >> 16)) );
HXDLIN( 108)			_this1->b[(pos1 + 3)] = ( (unsigned char)(::hx::UShr(v1,24)) );
            		}
HXLINE( 109)		{
HXLINE( 109)			 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 109)			int pos2 = ((writePosition2 + 4) + 8);
HXDLIN( 109)			int v2 = ( (int)(this->parent->getTypeInformation(type)->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN( 109)			_this2->b[pos2] = ( (unsigned char)(v2) );
HXDLIN( 109)			_this2->b[(pos2 + 1)] = ( (unsigned char)((v2 >> 8)) );
HXDLIN( 109)			_this2->b[(pos2 + 2)] = ( (unsigned char)((v2 >> 16)) );
HXDLIN( 109)			_this2->b[(pos2 + 3)] = ( (unsigned char)(::hx::UShr(v2,24)) );
            		}
HXLINE( 111)		{
HXLINE( 111)			 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 111)			int pos3 = (this->get_currentScopeStart() + 2);
HXDLIN( 111)			 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 111)			int pos4 = (this->get_currentScopeStart() + 2);
HXDLIN( 111)			int v3 = ((( (int)(_this4->b->__get(pos4)) ) | (( (int)(_this4->b->__get((pos4 + 1))) ) << 8)) + 1);
HXDLIN( 111)			_this3->b[pos3] = ( (unsigned char)(v3) );
HXDLIN( 111)			_this3->b[(pos3 + 1)] = ( (unsigned char)((v3 >> 8)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Referrer_obj,reference,(void))

void Referrer_obj::dereference(::String key){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_120_dereference)
HXLINE( 121)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(::haxe::Serializer_obj::run(key),null()),null());
HXLINE( 123)		int writePosition = (this->get_currentScopeStart() + 4);
HXLINE( 125)		while(true){
HXLINE( 126)			 ::haxe::io::Bytes this1 = this->bytes;
HXDLIN( 126)			int currentKeyHash = (((( (int)(this1->b->__get(writePosition)) ) | (( (int)(this1->b->__get((writePosition + 1))) ) << 8)) | (( (int)(this1->b->__get((writePosition + 2))) ) << 16)) | (( (int)(this1->b->__get((writePosition + 3))) ) << 24));
HXLINE( 127)			if ((currentKeyHash == keyHash)) {
HXLINE( 128)				 ::little::interpreter::memory::Storage stringName = this->parent->storage;
HXDLIN( 128)				 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 128)				int pos = (writePosition + 4);
HXDLIN( 128)				::String stringName1 = stringName->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24))));
HXLINE( 129)				if ((stringName1 == key)) {
HXLINE( 129)					goto _hx_goto_8;
            				}
            			}
HXLINE( 132)			writePosition = (writePosition + ::little::interpreter::memory::Referrer_obj::KEY_SIZE);
HXLINE( 133)			int _hx_tmp = this->get_currentScopeStart();
HXDLIN( 133)			int _hx_tmp1 = this->get_currentScopeLength();
HXDLIN( 133)			if ((writePosition >= (_hx_tmp + (_hx_tmp1 * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)))) {
HXLINE( 133)				HX_STACK_DO_THROW(((HX_("Cannot dereference key that doesn't exist. (key: ",63,1b,e3,d0) + key) + HX_(")",29,00,00,00)));
            			}
            		}
            		_hx_goto_8:;
HXLINE( 136)		{
HXLINE( 136)			 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 136)			 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 136)			int pos1 = ((((( (int)(_this2->b->__get(0)) ) | (( (int)(_this2->b->__get(1)) ) << 8)) | (( (int)(_this2->b->__get(2)) ) << 16)) | (( (int)(_this2->b->__get(3)) ) << 24)) + 2);
HXDLIN( 136)			 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 136)			 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 136)			int pos2 = ((((( (int)(_this4->b->__get(0)) ) | (( (int)(_this4->b->__get(1)) ) << 8)) | (( (int)(_this4->b->__get(2)) ) << 16)) | (( (int)(_this4->b->__get(3)) ) << 24)) + 2);
HXDLIN( 136)			int v = ((( (int)(_this3->b->__get(pos2)) ) | (( (int)(_this3->b->__get((pos2 + 1))) ) << 8)) - 1);
HXDLIN( 136)			_this1->b[pos1] = ( (unsigned char)(v) );
HXDLIN( 136)			_this1->b[(pos1 + 1)] = ( (unsigned char)((v >> 8)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Referrer_obj,dereference,(void))

 ::Dynamic Referrer_obj::get(::String key){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_148_get)
HXLINE( 150)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(::haxe::Serializer_obj::run(key),null()),null());
HXLINE( 152)		int checkingScope = this->get_currentScopeStart();
HXLINE( 153)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 153)		int pos = (this->get_currentScopeStart() + 2);
HXDLIN( 153)		int elementCount = (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
HXLINE( 154)		int nextScope = this->get_currentScopeStart();
HXDLIN( 154)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 154)		int pos1 = this->get_currentScopeStart();
HXDLIN( 154)		int nextScope1 = ((nextScope - ((( (int)(_this1->b->__get(pos1)) ) | (( (int)(_this1->b->__get((pos1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
HXLINE( 156)		do {
HXLINE( 157)			int i = (checkingScope + 4);
HXLINE( 158)			while((i < (checkingScope + (elementCount * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)))){
HXLINE( 159)				 ::haxe::io::Bytes this1 = this->bytes;
HXDLIN( 159)				int testingHash = (((( (int)(this1->b->__get(i)) ) | (( (int)(this1->b->__get((i + 1))) ) << 8)) | (( (int)(this1->b->__get((i + 2))) ) << 16)) | (( (int)(this1->b->__get((i + 3))) ) << 24));
HXLINE( 160)				if ((keyHash == testingHash)) {
HXLINE( 161)					 ::little::interpreter::memory::Storage stringName = this->parent->storage;
HXDLIN( 161)					 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 161)					int pos2 = (i + 4);
HXDLIN( 161)					::String stringName1 = stringName->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this2->b->__get(pos2)) ) | (( (int)(_this2->b->__get((pos2 + 1))) ) << 8)) | (( (int)(_this2->b->__get((pos2 + 2))) ) << 16)) | (( (int)(_this2->b->__get((pos2 + 3))) ) << 24))));
HXLINE( 162)					if ((stringName1 == key)) {
HXLINE( 164)						 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 164)						int pos3 = ((i + 4) + 4);
HXDLIN( 164)						int _hx_tmp = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this3->b->__get(pos3)) ) | (( (int)(_this3->b->__get((pos3 + 1))) ) << 8)) | (( (int)(_this3->b->__get((pos3 + 2))) ) << 16)) | (( (int)(_this3->b->__get((pos3 + 3))) ) << 24)));
HXLINE( 165)						 ::little::interpreter::memory::Memory _hx_tmp1 = this->parent;
HXDLIN( 165)						 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 165)						int pos4 = ((i + 4) + 8);
HXLINE( 163)						return  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("address",b4,71,0b,9d),_hx_tmp)
            							->setFixed(1,HX_("type",ba,f2,08,4d),_hx_tmp1->getTypeName(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this4->b->__get(pos4)) ) | (( (int)(_this4->b->__get((pos4 + 1))) ) << 8)) | (( (int)(_this4->b->__get((pos4 + 2))) ) << 16)) | (( (int)(_this4->b->__get((pos4 + 3))) ) << 24))))));
            					}
            				}
HXLINE( 170)				i = (i + ::little::interpreter::memory::Referrer_obj::KEY_SIZE);
            			}
HXLINE( 172)			checkingScope = nextScope1;
HXLINE( 173)			 ::haxe::io::Bytes _this5 = this->bytes;
HXDLIN( 173)			int pos5 = (nextScope1 + 2);
HXDLIN( 173)			elementCount = (( (int)(_this5->b->__get(pos5)) ) | (( (int)(_this5->b->__get((pos5 + 1))) ) << 8));
HXLINE( 174)			 ::haxe::io::Bytes _this6 = this->bytes;
HXDLIN( 174)			nextScope1 = ((nextScope1 - ((( (int)(_this6->b->__get(nextScope1)) ) | (( (int)(_this6->b->__get((nextScope1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
            		} while((checkingScope != 0));
;
HXLINE( 177)		HX_STACK_DO_THROW(((HX_("Key ",c1,0d,e0,31) + key) + HX_(" does not exist.",eb,90,4a,9f)));
HXDLIN( 177)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Referrer_obj,get,return )

void Referrer_obj::set(::String key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_189_set)
HXLINE( 190)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(::haxe::Serializer_obj::run(key),null()),null());
HXLINE( 192)		int checkingScope = this->get_currentScopeStart();
HXLINE( 193)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 193)		int pos = (this->get_currentScopeStart() + 2);
HXDLIN( 193)		int elementCount = (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
HXLINE( 194)		int nextScope = this->get_currentScopeStart();
HXDLIN( 194)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 194)		int pos1 = this->get_currentScopeStart();
HXDLIN( 194)		int nextScope1 = ((nextScope - ((( (int)(_this1->b->__get(pos1)) ) | (( (int)(_this1->b->__get((pos1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
HXLINE( 196)		do {
HXLINE( 197)			int i = (checkingScope + 4);
HXLINE( 198)			while((i < (checkingScope + (elementCount * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)))){
HXLINE( 199)				 ::haxe::io::Bytes this1 = this->bytes;
HXDLIN( 199)				int testingHash = (((( (int)(this1->b->__get(i)) ) | (( (int)(this1->b->__get((i + 1))) ) << 8)) | (( (int)(this1->b->__get((i + 2))) ) << 16)) | (( (int)(this1->b->__get((i + 3))) ) << 24));
HXLINE( 200)				if ((keyHash == testingHash)) {
HXLINE( 201)					 ::little::interpreter::memory::Storage stringName = this->parent->storage;
HXDLIN( 201)					 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 201)					int pos2 = (i + 4);
HXDLIN( 201)					::String stringName1 = stringName->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this2->b->__get(pos2)) ) | (( (int)(_this2->b->__get((pos2 + 1))) ) << 8)) | (( (int)(_this2->b->__get((pos2 + 2))) ) << 16)) | (( (int)(_this2->b->__get((pos2 + 3))) ) << 24))));
HXLINE( 202)					if ((stringName1 == key)) {
HXLINE( 203)						if (::hx::IsNotNull( value->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic) )) {
HXLINE( 203)							 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 203)							int pos3 = ((i + 4) + 4);
HXDLIN( 203)							int v = ( (int)(value->__Field(HX_("address",b4,71,0b,9d),::hx::paccDynamic)) );
HXDLIN( 203)							_this3->b[pos3] = ( (unsigned char)(v) );
HXDLIN( 203)							_this3->b[(pos3 + 1)] = ( (unsigned char)((v >> 8)) );
HXDLIN( 203)							_this3->b[(pos3 + 2)] = ( (unsigned char)((v >> 16)) );
HXDLIN( 203)							_this3->b[(pos3 + 3)] = ( (unsigned char)(::hx::UShr(v,24)) );
            						}
HXLINE( 204)						if (::hx::IsNotNull( value->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic) )) {
HXLINE( 204)							 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 204)							int pos4 = ((i + 4) + 8);
HXDLIN( 204)							int v1 = ( (int)(this->parent->getTypeInformation(( (::String)(value->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))->__Field(HX_("pointer",bd,c0,21,51),::hx::paccDynamic)) );
HXDLIN( 204)							_this4->b[pos4] = ( (unsigned char)(v1) );
HXDLIN( 204)							_this4->b[(pos4 + 1)] = ( (unsigned char)((v1 >> 8)) );
HXDLIN( 204)							_this4->b[(pos4 + 2)] = ( (unsigned char)((v1 >> 16)) );
HXDLIN( 204)							_this4->b[(pos4 + 3)] = ( (unsigned char)(::hx::UShr(v1,24)) );
            						}
HXLINE( 205)						return;
            					}
            				}
HXLINE( 209)				i = (i + ::little::interpreter::memory::Referrer_obj::KEY_SIZE);
            			}
HXLINE( 211)			checkingScope = nextScope1;
HXLINE( 212)			 ::haxe::io::Bytes _this5 = this->bytes;
HXDLIN( 212)			int pos5 = (nextScope1 + 2);
HXDLIN( 212)			elementCount = (( (int)(_this5->b->__get(pos5)) ) | (( (int)(_this5->b->__get((pos5 + 1))) ) << 8));
HXLINE( 213)			 ::haxe::io::Bytes _this6 = this->bytes;
HXDLIN( 213)			nextScope1 = ((nextScope1 - ((( (int)(_this6->b->__get(nextScope1)) ) | (( (int)(_this6->b->__get((nextScope1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
            		} while((checkingScope != 0));
;
HXLINE( 216)		HX_STACK_DO_THROW(((HX_("Cannot set ",5b,20,2d,f0) + key) + HX_(" -  does not exist.",5e,56,f8,da)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Referrer_obj,set,(void))

bool Referrer_obj::exists(::String key){
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_224_exists)
HXLINE( 225)		int keyHash = ::haxe::hash::Murmur1_obj::hash(::haxe::io::Bytes_obj::ofString(::haxe::Serializer_obj::run(key),null()),null());
HXLINE( 227)		int checkingScope = this->get_currentScopeStart();
HXLINE( 228)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 228)		int pos = (this->get_currentScopeStart() + 2);
HXDLIN( 228)		int elementCount = (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
HXLINE( 229)		int nextScope = this->get_currentScopeStart();
HXDLIN( 229)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 229)		int pos1 = this->get_currentScopeStart();
HXDLIN( 229)		int nextScope1 = ((nextScope - ((( (int)(_this1->b->__get(pos1)) ) | (( (int)(_this1->b->__get((pos1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
HXLINE( 231)		do {
HXLINE( 232)			int i = (checkingScope + 4);
HXLINE( 233)			while((i < (checkingScope + (elementCount * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)))){
HXLINE( 234)				 ::haxe::io::Bytes this1 = this->bytes;
HXDLIN( 234)				int testingHash = (((( (int)(this1->b->__get(i)) ) | (( (int)(this1->b->__get((i + 1))) ) << 8)) | (( (int)(this1->b->__get((i + 2))) ) << 16)) | (( (int)(this1->b->__get((i + 3))) ) << 24));
HXLINE( 235)				if ((keyHash == testingHash)) {
HXLINE( 236)					 ::little::interpreter::memory::Storage stringName = this->parent->storage;
HXDLIN( 236)					 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 236)					int pos2 = (i + 4);
HXDLIN( 236)					::String stringName1 = stringName->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this2->b->__get(pos2)) ) | (( (int)(_this2->b->__get((pos2 + 1))) ) << 8)) | (( (int)(_this2->b->__get((pos2 + 2))) ) << 16)) | (( (int)(_this2->b->__get((pos2 + 3))) ) << 24))));
HXLINE( 237)					if ((stringName1 == key)) {
HXLINE( 238)						return true;
            					}
            				}
HXLINE( 242)				i = (i + ::little::interpreter::memory::Referrer_obj::KEY_SIZE);
            			}
HXLINE( 244)			checkingScope = nextScope1;
HXLINE( 245)			 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 245)			int pos3 = (nextScope1 + 2);
HXDLIN( 245)			elementCount = (( (int)(_this3->b->__get(pos3)) ) | (( (int)(_this3->b->__get((pos3 + 1))) ) << 8));
HXLINE( 246)			 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 246)			nextScope1 = ((nextScope1 - ((( (int)(_this4->b->__get(nextScope1)) ) | (( (int)(_this4->b->__get((nextScope1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
            		} while((checkingScope != 0));
;
HXLINE( 249)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Referrer_obj,exists,return )

 ::Dynamic Referrer_obj::keyValueIterator(){
            	HX_GC_STACKFRAME(&_hx_pos_cf10ac891c5595f2_255_keyValueIterator)
HXLINE( 257)		 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 259)		int checkingScope = this->get_currentScopeStart();
HXLINE( 260)		 ::haxe::io::Bytes _this = this->bytes;
HXDLIN( 260)		int pos = (this->get_currentScopeStart() + 2);
HXDLIN( 260)		int elementCount = (( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8));
HXLINE( 261)		int nextScope = this->get_currentScopeStart();
HXDLIN( 261)		 ::haxe::io::Bytes _this1 = this->bytes;
HXDLIN( 261)		int pos1 = this->get_currentScopeStart();
HXDLIN( 261)		int nextScope1 = ((nextScope - ((( (int)(_this1->b->__get(pos1)) ) | (( (int)(_this1->b->__get((pos1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
HXLINE( 262)		do {
HXLINE( 263)			int i = checkingScope;
HXLINE( 264)			while((i < (checkingScope + (elementCount * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)))){
HXLINE( 265)				 ::little::interpreter::memory::Storage stringName = this->parent->storage;
HXDLIN( 265)				 ::haxe::io::Bytes _this2 = this->bytes;
HXDLIN( 265)				int pos2 = (i + 4);
HXDLIN( 265)				::String stringName1 = stringName->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this2->b->__get(pos2)) ) | (( (int)(_this2->b->__get((pos2 + 1))) ) << 8)) | (( (int)(_this2->b->__get((pos2 + 2))) ) << 16)) | (( (int)(_this2->b->__get((pos2 + 3))) ) << 24))));
HXLINE( 266)				{
HXLINE( 267)					 ::haxe::io::Bytes _this3 = this->bytes;
HXDLIN( 267)					int pos3 = ((i + 4) + 4);
HXDLIN( 267)					int value = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this3->b->__get(pos3)) ) | (( (int)(_this3->b->__get((pos3 + 1))) ) << 8)) | (( (int)(_this3->b->__get((pos3 + 2))) ) << 16)) | (( (int)(_this3->b->__get((pos3 + 3))) ) << 24)));
HXLINE( 268)					 ::little::interpreter::memory::Storage value1 = this->parent->storage;
HXDLIN( 268)					 ::haxe::io::Bytes _this4 = this->bytes;
HXDLIN( 268)					int pos4 = ((i + 4) + 8);
HXLINE( 266)					map->set(stringName1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("address",b4,71,0b,9d),value)
            						->setFixed(1,HX_("type",ba,f2,08,4d),value1->readString(::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt((((( (int)(_this4->b->__get(pos4)) ) | (( (int)(_this4->b->__get((pos4 + 1))) ) << 8)) | (( (int)(_this4->b->__get((pos4 + 2))) ) << 16)) | (( (int)(_this4->b->__get((pos4 + 3))) ) << 24)))))));
            				}
HXLINE( 271)				i = (i + ::little::interpreter::memory::Referrer_obj::KEY_SIZE);
            			}
HXLINE( 273)			checkingScope = nextScope1;
HXLINE( 274)			 ::haxe::io::Bytes _this5 = this->bytes;
HXDLIN( 274)			int pos5 = (nextScope1 + 2);
HXDLIN( 274)			elementCount = (( (int)(_this5->b->__get(pos5)) ) | (( (int)(_this5->b->__get((pos5 + 1))) ) << 8));
HXLINE( 275)			 ::haxe::io::Bytes _this6 = this->bytes;
HXDLIN( 275)			nextScope1 = ((nextScope1 - ((( (int)(_this6->b->__get(nextScope1)) ) | (( (int)(_this6->b->__get((nextScope1 + 1))) ) << 8)) * ::little::interpreter::memory::Referrer_obj::KEY_SIZE)) - 4);
            		} while((checkingScope != 0));
;
HXLINE( 278)		return  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,map);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Referrer_obj,keyValueIterator,return )

int Referrer_obj::KEY_SIZE;


::hx::ObjectPtr< Referrer_obj > Referrer_obj::__new( ::little::interpreter::memory::Memory memory) {
	::hx::ObjectPtr< Referrer_obj > __this = new Referrer_obj();
	__this->__construct(memory);
	return __this;
}

::hx::ObjectPtr< Referrer_obj > Referrer_obj::__alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory) {
	Referrer_obj *__this = (Referrer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Referrer_obj), true, "little.interpreter.memory.Referrer"));
	*(void **)__this = Referrer_obj::_hx_vtable;
	__this->__construct(memory);
	return __this;
}

Referrer_obj::Referrer_obj()
{
}

void Referrer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Referrer);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(currentScopeStart,"currentScopeStart");
	HX_MARK_MEMBER_NAME(currentScopeLength,"currentScopeLength");
	HX_MARK_END_CLASS();
}

void Referrer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(currentScopeStart,"currentScopeStart");
	HX_VISIT_MEMBER_NAME(currentScopeLength,"currentScopeLength");
}

::hx::Val Referrer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return ::hx::Val( bytes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"popScope") ) { return ::hx::Val( popScope_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pushScope") ) { return ::hx::Val( pushScope_dyn() ); }
		if (HX_FIELD_EQ(inName,"reference") ) { return ::hx::Val( reference_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dereference") ) { return ::hx::Val( dereference_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"requestMemory") ) { return ::hx::Val( requestMemory_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { return ::hx::Val( keyValueIterator_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentScopeStart") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_currentScopeStart() : currentScopeStart ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentScopeLength") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_currentScopeLength() : currentScopeLength ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_currentScopeStart") ) { return ::hx::Val( get_currentScopeStart_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_currentScopeLength") ) { return ::hx::Val( get_currentScopeLength_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Referrer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"KEY_SIZE") ) { outValue = ( KEY_SIZE ); return true; }
	}
	return false;
}

::hx::Val Referrer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::little::interpreter::memory::Memory >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentScopeStart") ) { currentScopeStart=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentScopeLength") ) { currentScopeLength=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Referrer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"KEY_SIZE") ) { KEY_SIZE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Referrer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("bytes",6b,08,98,bd));
	outFields->push(HX_("currentScopeStart",c7,bb,8c,43));
	outFields->push(HX_("currentScopeLength",e1,c5,a4,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Referrer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::little::interpreter::memory::Memory */ ,(int)offsetof(Referrer_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Referrer_obj,bytes),HX_("bytes",6b,08,98,bd)},
	{::hx::fsInt,(int)offsetof(Referrer_obj,currentScopeStart),HX_("currentScopeStart",c7,bb,8c,43)},
	{::hx::fsInt,(int)offsetof(Referrer_obj,currentScopeLength),HX_("currentScopeLength",e1,c5,a4,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Referrer_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Referrer_obj::KEY_SIZE,HX_("KEY_SIZE",c1,12,f9,76)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Referrer_obj_sMemberFields[] = {
	HX_("parent",2a,05,7e,ed),
	HX_("bytes",6b,08,98,bd),
	HX_("currentScopeStart",c7,bb,8c,43),
	HX_("get_currentScopeStart",9e,be,3a,c2),
	HX_("currentScopeLength",e1,c5,a4,70),
	HX_("get_currentScopeLength",2a,3f,39,ca),
	HX_("requestMemory",b0,03,6a,c0),
	HX_("pushScope",5a,d9,f4,bc),
	HX_("popScope",43,b6,df,e1),
	HX_("reference",cb,07,c5,5a),
	HX_("dereference",2a,38,08,8f),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("keyValueIterator",60,cd,ee,4a),
	::String(null()) };

static void Referrer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Referrer_obj::KEY_SIZE,"KEY_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Referrer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Referrer_obj::KEY_SIZE,"KEY_SIZE");
};

#endif

::hx::Class Referrer_obj::__mClass;

static ::String Referrer_obj_sStaticFields[] = {
	HX_("KEY_SIZE",c1,12,f9,76),
	::String(null())
};

void Referrer_obj::__register()
{
	Referrer_obj _hx_dummy;
	Referrer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.Referrer",e0,6d,be,f5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Referrer_obj::__GetStatic;
	__mClass->mSetStaticField = &Referrer_obj::__SetStatic;
	__mClass->mMarkFunc = Referrer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Referrer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Referrer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Referrer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Referrer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Referrer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Referrer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Referrer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cf10ac891c5595f2_20_boot)
HXDLIN(  20)		KEY_SIZE = 16;
            	}
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
