// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_little_interpreter_memory_OperatorType
#include <little/interpreter/memory/OperatorType.h>
#endif
namespace little{
namespace interpreter{
namespace memory{

::little::interpreter::memory::OperatorType OperatorType_obj::LHS_ONLY;

::little::interpreter::memory::OperatorType OperatorType_obj::LHS_RHS;

::little::interpreter::memory::OperatorType OperatorType_obj::RHS_ONLY;

bool OperatorType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("LHS_ONLY",94,a3,26,c4)) { outValue = OperatorType_obj::LHS_ONLY; return true; }
	if (inName==HX_("LHS_RHS",b5,1e,5d,2b)) { outValue = OperatorType_obj::LHS_RHS; return true; }
	if (inName==HX_("RHS_ONLY",4e,50,55,1b)) { outValue = OperatorType_obj::RHS_ONLY; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(OperatorType_obj)

int OperatorType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("LHS_ONLY",94,a3,26,c4)) return 1;
	if (inName==HX_("LHS_RHS",b5,1e,5d,2b)) return 0;
	if (inName==HX_("RHS_ONLY",4e,50,55,1b)) return 2;
	return super::__FindIndex(inName);
}

int OperatorType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("LHS_ONLY",94,a3,26,c4)) return 0;
	if (inName==HX_("LHS_RHS",b5,1e,5d,2b)) return 0;
	if (inName==HX_("RHS_ONLY",4e,50,55,1b)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val OperatorType_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("LHS_ONLY",94,a3,26,c4)) return LHS_ONLY;
	if (inName==HX_("LHS_RHS",b5,1e,5d,2b)) return LHS_RHS;
	if (inName==HX_("RHS_ONLY",4e,50,55,1b)) return RHS_ONLY;
	return super::__Field(inName,inCallProp);
}

static ::String OperatorType_obj_sStaticFields[] = {
	HX_("LHS_RHS",b5,1e,5d,2b),
	HX_("LHS_ONLY",94,a3,26,c4),
	HX_("RHS_ONLY",4e,50,55,1b),
	::String(null())
};

::hx::Class OperatorType_obj::__mClass;

Dynamic __Create_OperatorType_obj() { return new OperatorType_obj; }

void OperatorType_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("little.interpreter.memory.OperatorType",ff,21,48,cc), ::hx::TCanCast< OperatorType_obj >,OperatorType_obj_sStaticFields,0,
	&__Create_OperatorType_obj, &__Create,
	&super::__SGetClass(), &CreateOperatorType_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &OperatorType_obj::__GetStatic;
}

void OperatorType_obj::__boot()
{
LHS_ONLY = ::hx::CreateConstEnum< OperatorType_obj >(HX_("LHS_ONLY",94,a3,26,c4),1);
LHS_RHS = ::hx::CreateConstEnum< OperatorType_obj >(HX_("LHS_RHS",b5,1e,5d,2b),0);
RHS_ONLY = ::hx::CreateConstEnum< OperatorType_obj >(HX_("RHS_ONLY",4e,50,55,1b),2);
}


} // end namespace little
} // end namespace interpreter
} // end namespace memory
