// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExtTree
#include <little/interpreter/memory/ExtTree.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_ExternalInterfacing
#include <little/interpreter/memory/ExternalInterfacing.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_268b9c5fab8ee151_5_new,"little.interpreter.memory.ExternalInterfacing","new",0x72ffd93c,"little.interpreter.memory.ExternalInterfacing.new","little/interpreter/memory/ExternalInterfacing.hx",5,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_18_get_pointerToExtern,"little.interpreter.memory.ExternalInterfacing","get_pointerToExtern",0xaaf6cf0b,"little.interpreter.memory.ExternalInterfacing.get_pointerToExtern","little/interpreter/memory/ExternalInterfacing.hx",18,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_57_createPathFor,"little.interpreter.memory.ExternalInterfacing","createPathFor",0xa5ddfaa4,"little.interpreter.memory.ExternalInterfacing.createPathFor","little/interpreter/memory/ExternalInterfacing.hx",57,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_81_createAllPathsFor,"little.interpreter.memory.ExternalInterfacing","createAllPathsFor",0xa1c28efc,"little.interpreter.memory.ExternalInterfacing.createAllPathsFor","little/interpreter/memory/ExternalInterfacing.hx",81,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_91_hasGlobal,"little.interpreter.memory.ExternalInterfacing","hasGlobal",0x0c6efa39,"little.interpreter.memory.ExternalInterfacing.hasGlobal","little/interpreter/memory/ExternalInterfacing.hx",91,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_111_hasInstance,"little.interpreter.memory.ExternalInterfacing","hasInstance",0xfe0249eb,"little.interpreter.memory.ExternalInterfacing.hasInstance","little/interpreter/memory/ExternalInterfacing.hx",111,0x5edd7fb3)
HX_LOCAL_STACK_FRAME(_hx_pos_268b9c5fab8ee151_132_getGlobal,"little.interpreter.memory.ExternalInterfacing","getGlobal",0x47dcd075,"little.interpreter.memory.ExternalInterfacing.getGlobal","little/interpreter/memory/ExternalInterfacing.hx",132,0x5edd7fb3)
namespace little{
namespace interpreter{
namespace memory{

void ExternalInterfacing_obj::__construct( ::little::interpreter::memory::Memory memory){
            	HX_GC_STACKFRAME(&_hx_pos_268b9c5fab8ee151_5_new)
HXLINE(  38)		 ::Dynamic _hx_tmp = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0);
HXDLIN(  38)		this->globalProperties =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,_hx_tmp,null(),null(),::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0));
HXLINE(  33)		 ::Dynamic _hx_tmp1 = ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0);
HXDLIN(  33)		this->instanceProperties =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,_hx_tmp1,null(),null(),::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(0));
HXLINE(  44)		this->parent = memory;
HXLINE(  45)		this->externToPointer =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic ExternalInterfacing_obj::__CreateEmpty() { return new ExternalInterfacing_obj; }

void *ExternalInterfacing_obj::_hx_vtable = 0;

Dynamic ExternalInterfacing_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ExternalInterfacing_obj > _hx_result = new ExternalInterfacing_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ExternalInterfacing_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a9209ca;
}

 ::haxe::ds::IntMap ExternalInterfacing_obj::get_pointerToExtern(){
            	HX_GC_STACKFRAME(&_hx_pos_268b9c5fab8ee151_18_get_pointerToExtern)
HXLINE(  19)		 ::haxe::ds::IntMap pointerToExtern =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  20)		{
HXLINE(  20)			::Dynamic map = this->externToPointer;
HXDLIN(  20)			::Dynamic _g_map = map;
HXDLIN(  20)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  20)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  20)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  20)				int _g_value = ( (int)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(  20)				::String _g_key = key;
HXDLIN(  20)				::String type = _g_key;
HXDLIN(  20)				int pointer = _g_value;
HXLINE(  21)				pointerToExtern->set(pointer,type);
            			}
            		}
HXLINE(  24)		return pointerToExtern;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExternalInterfacing_obj,get_pointerToExtern,return )

 ::little::interpreter::memory::ExtTree ExternalInterfacing_obj::createPathFor( ::little::interpreter::memory::ExtTree extType,::Array< ::String > path){
            	HX_GC_STACKFRAME(&_hx_pos_268b9c5fab8ee151_57_createPathFor)
HXLINE(  58)		::Array< ::String > identifiers = path->copy();
HXLINE(  60)		 ::little::interpreter::memory::ExtTree handle = extType;
HXLINE(  61)		while((identifiers->length > 0)){
HXLINE(  62)			::String identifier = ( (::String)(identifiers->shift()) );
HXLINE(  63)			if (handle->properties->exists(identifier)) {
HXLINE(  64)				handle = ( ( ::little::interpreter::memory::ExtTree)(handle->properties->get(identifier)) );
            			}
            			else {
HXLINE(  66)				{
HXLINE(  66)					::Dynamic this1 = handle->properties;
HXDLIN(  66)					 ::little::interpreter::memory::ExtTree v =  ::little::interpreter::memory::ExtTree_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(  66)					( ( ::haxe::ds::StringMap)(this1) )->set(identifier,v);
            				}
HXLINE(  67)				handle = ( ( ::little::interpreter::memory::ExtTree)(handle->properties->get(identifier)) );
            			}
            		}
HXLINE(  71)		return handle;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ExternalInterfacing_obj,createPathFor,return )

void ExternalInterfacing_obj::createAllPathsFor(::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_268b9c5fab8ee151_81_createAllPathsFor)
HXDLIN(  81)		{
HXDLIN(  81)			 ::little::interpreter::memory::ExtTree tree = this->globalProperties;
HXLINE(  82)			this->createPathFor(tree,path);
            		}
HXLINE(  81)		{
HXDLIN(  81)			 ::little::interpreter::memory::ExtTree tree1 = this->instanceProperties;
HXLINE(  82)			this->createPathFor(tree1,path);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExternalInterfacing_obj,createAllPathsFor,(void))

bool ExternalInterfacing_obj::hasGlobal(::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_268b9c5fab8ee151_91_hasGlobal)
HXLINE(  92)		::Array< ::String > identifiers = path->copy();
HXLINE(  94)		 ::little::interpreter::memory::ExtTree handle = this->globalProperties;
HXLINE(  95)		while((identifiers->length > 0)){
HXLINE(  96)			::String identifier = ( (::String)(identifiers->shift()) );
HXLINE(  97)			if (handle->properties->exists(identifier)) {
HXLINE(  98)				handle = ( ( ::little::interpreter::memory::ExtTree)(handle->properties->get(identifier)) );
            			}
            			else {
HXLINE( 100)				return false;
            			}
            		}
HXLINE( 103)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExternalInterfacing_obj,hasGlobal,return )

bool ExternalInterfacing_obj::hasInstance(::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_268b9c5fab8ee151_111_hasInstance)
HXLINE( 112)		::Array< ::String > identifiers = path->copy();
HXLINE( 114)		 ::little::interpreter::memory::ExtTree handle = this->instanceProperties;
HXLINE( 115)		while((identifiers->length > 0)){
HXLINE( 116)			::String identifier = ( (::String)(identifiers->shift()) );
HXLINE( 117)			if (handle->properties->exists(identifier)) {
HXLINE( 118)				handle = ( ( ::little::interpreter::memory::ExtTree)(handle->properties->get(identifier)) );
            			}
            			else {
HXLINE( 120)				return false;
            			}
            		}
HXLINE( 123)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExternalInterfacing_obj,hasInstance,return )

 ::Dynamic ExternalInterfacing_obj::getGlobal(::Array< ::String > path){
            	HX_STACKFRAME(&_hx_pos_268b9c5fab8ee151_132_getGlobal)
HXLINE( 133)		::Array< ::String > identifiers = path->copy();
HXLINE( 135)		 ::little::interpreter::memory::ExtTree handle = this->globalProperties;
HXLINE( 136)		{
HXLINE( 136)			int _g = 0;
HXDLIN( 136)			while((_g < identifiers->length)){
HXLINE( 136)				::String ident = identifiers->__get(_g);
HXDLIN( 136)				_g = (_g + 1);
HXLINE( 137)				handle = ( ( ::little::interpreter::memory::ExtTree)(handle->properties->get(ident)) );
            			}
            		}
HXLINE( 140)		 ::Dynamic handle1 = handle->getter;
HXDLIN( 140)		return handle1(null(),::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::fromInt(-1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExternalInterfacing_obj,getGlobal,return )


::hx::ObjectPtr< ExternalInterfacing_obj > ExternalInterfacing_obj::__new( ::little::interpreter::memory::Memory memory) {
	::hx::ObjectPtr< ExternalInterfacing_obj > __this = new ExternalInterfacing_obj();
	__this->__construct(memory);
	return __this;
}

::hx::ObjectPtr< ExternalInterfacing_obj > ExternalInterfacing_obj::__alloc(::hx::Ctx *_hx_ctx, ::little::interpreter::memory::Memory memory) {
	ExternalInterfacing_obj *__this = (ExternalInterfacing_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ExternalInterfacing_obj), true, "little.interpreter.memory.ExternalInterfacing"));
	*(void **)__this = ExternalInterfacing_obj::_hx_vtable;
	__this->__construct(memory);
	return __this;
}

ExternalInterfacing_obj::ExternalInterfacing_obj()
{
}

void ExternalInterfacing_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ExternalInterfacing);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(externToPointer,"externToPointer");
	HX_MARK_MEMBER_NAME(pointerToExtern,"pointerToExtern");
	HX_MARK_MEMBER_NAME(instanceProperties,"instanceProperties");
	HX_MARK_MEMBER_NAME(globalProperties,"globalProperties");
	HX_MARK_END_CLASS();
}

void ExternalInterfacing_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(externToPointer,"externToPointer");
	HX_VISIT_MEMBER_NAME(pointerToExtern,"pointerToExtern");
	HX_VISIT_MEMBER_NAME(instanceProperties,"instanceProperties");
	HX_VISIT_MEMBER_NAME(globalProperties,"globalProperties");
}

::hx::Val ExternalInterfacing_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasGlobal") ) { return ::hx::Val( hasGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGlobal") ) { return ::hx::Val( getGlobal_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasInstance") ) { return ::hx::Val( hasInstance_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createPathFor") ) { return ::hx::Val( createPathFor_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"externToPointer") ) { return ::hx::Val( externToPointer ); }
		if (HX_FIELD_EQ(inName,"pointerToExtern") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_pointerToExtern() : pointerToExtern ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"globalProperties") ) { return ::hx::Val( globalProperties ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createAllPathsFor") ) { return ::hx::Val( createAllPathsFor_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"instanceProperties") ) { return ::hx::Val( instanceProperties ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_pointerToExtern") ) { return ::hx::Val( get_pointerToExtern_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ExternalInterfacing_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::little::interpreter::memory::Memory >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"externToPointer") ) { externToPointer=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerToExtern") ) { pointerToExtern=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"globalProperties") ) { globalProperties=inValue.Cast<  ::little::interpreter::memory::ExtTree >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"instanceProperties") ) { instanceProperties=inValue.Cast<  ::little::interpreter::memory::ExtTree >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ExternalInterfacing_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("externToPointer",02,57,d8,b9));
	outFields->push(HX_("pointerToExtern",18,7f,27,6d));
	outFields->push(HX_("instanceProperties",e8,4b,52,25));
	outFields->push(HX_("globalProperties",36,eb,7c,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ExternalInterfacing_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::little::interpreter::memory::Memory */ ,(int)offsetof(ExternalInterfacing_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ExternalInterfacing_obj,externToPointer),HX_("externToPointer",02,57,d8,b9)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ExternalInterfacing_obj,pointerToExtern),HX_("pointerToExtern",18,7f,27,6d)},
	{::hx::fsObject /*  ::little::interpreter::memory::ExtTree */ ,(int)offsetof(ExternalInterfacing_obj,instanceProperties),HX_("instanceProperties",e8,4b,52,25)},
	{::hx::fsObject /*  ::little::interpreter::memory::ExtTree */ ,(int)offsetof(ExternalInterfacing_obj,globalProperties),HX_("globalProperties",36,eb,7c,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ExternalInterfacing_obj_sStaticStorageInfo = 0;
#endif

static ::String ExternalInterfacing_obj_sMemberFields[] = {
	HX_("parent",2a,05,7e,ed),
	HX_("externToPointer",02,57,d8,b9),
	HX_("pointerToExtern",18,7f,27,6d),
	HX_("get_pointerToExtern",2f,4e,32,f8),
	HX_("instanceProperties",e8,4b,52,25),
	HX_("globalProperties",36,eb,7c,ba),
	HX_("createPathFor",c8,c6,b3,f1),
	HX_("createAllPathsFor",20,3d,db,74),
	HX_("hasGlobal",5d,e4,9a,e8),
	HX_("hasInstance",0f,05,98,2c),
	HX_("getGlobal",99,ba,08,24),
	::String(null()) };

::hx::Class ExternalInterfacing_obj::__mClass;

void ExternalInterfacing_obj::__register()
{
	ExternalInterfacing_obj _hx_dummy;
	ExternalInterfacing_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.interpreter.memory.ExternalInterfacing",4a,cb,5b,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ExternalInterfacing_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ExternalInterfacing_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExternalInterfacing_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExternalInterfacing_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace interpreter
} // end namespace memory
