// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
namespace little{
namespace lexer{

::little::lexer::LexerTokens LexerTokens_obj::Boolean(::String value)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Boolean",88,12,50,4b),3,1)->_hx_init(0,value);
}

::little::lexer::LexerTokens LexerTokens_obj::Characters(::String string)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Characters",ca,5c,7f,4c),4,1)->_hx_init(0,string);
}

::little::lexer::LexerTokens LexerTokens_obj::Documentation(::String content)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Documentation",9a,d1,58,89),8,1)->_hx_init(0,content);
}

::little::lexer::LexerTokens LexerTokens_obj::Identifier(::String name)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Identifier",89,cc,dd,c4),0,1)->_hx_init(0,name);
}

::little::lexer::LexerTokens LexerTokens_obj::Newline;

::little::lexer::LexerTokens LexerTokens_obj::NullValue;

::little::lexer::LexerTokens LexerTokens_obj::Number(::String num)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Number",e9,fa,0e,d6),2,1)->_hx_init(0,num);
}

::little::lexer::LexerTokens LexerTokens_obj::Sign(::String _hx_char)
{
	return ::hx::CreateEnum< LexerTokens_obj >(HX_("Sign",5d,bc,2c,37),1,1)->_hx_init(0,_hx_char);
}

::little::lexer::LexerTokens LexerTokens_obj::SplitLine;

bool LexerTokens_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Boolean",88,12,50,4b)) { outValue = LexerTokens_obj::Boolean_dyn(); return true; }
	if (inName==HX_("Characters",ca,5c,7f,4c)) { outValue = LexerTokens_obj::Characters_dyn(); return true; }
	if (inName==HX_("Documentation",9a,d1,58,89)) { outValue = LexerTokens_obj::Documentation_dyn(); return true; }
	if (inName==HX_("Identifier",89,cc,dd,c4)) { outValue = LexerTokens_obj::Identifier_dyn(); return true; }
	if (inName==HX_("Newline",34,c0,f7,d9)) { outValue = LexerTokens_obj::Newline; return true; }
	if (inName==HX_("NullValue",4a,27,1b,e8)) { outValue = LexerTokens_obj::NullValue; return true; }
	if (inName==HX_("Number",e9,fa,0e,d6)) { outValue = LexerTokens_obj::Number_dyn(); return true; }
	if (inName==HX_("Sign",5d,bc,2c,37)) { outValue = LexerTokens_obj::Sign_dyn(); return true; }
	if (inName==HX_("SplitLine",ce,83,e5,ed)) { outValue = LexerTokens_obj::SplitLine; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(LexerTokens_obj)

int LexerTokens_obj::__FindIndex(::String inName)
{
	if (inName==HX_("Boolean",88,12,50,4b)) return 3;
	if (inName==HX_("Characters",ca,5c,7f,4c)) return 4;
	if (inName==HX_("Documentation",9a,d1,58,89)) return 8;
	if (inName==HX_("Identifier",89,cc,dd,c4)) return 0;
	if (inName==HX_("Newline",34,c0,f7,d9)) return 6;
	if (inName==HX_("NullValue",4a,27,1b,e8)) return 5;
	if (inName==HX_("Number",e9,fa,0e,d6)) return 2;
	if (inName==HX_("Sign",5d,bc,2c,37)) return 1;
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return 7;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Boolean,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Characters,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Documentation,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Identifier,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Number,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LexerTokens_obj,Sign,return)

int LexerTokens_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("Boolean",88,12,50,4b)) return 1;
	if (inName==HX_("Characters",ca,5c,7f,4c)) return 1;
	if (inName==HX_("Documentation",9a,d1,58,89)) return 1;
	if (inName==HX_("Identifier",89,cc,dd,c4)) return 1;
	if (inName==HX_("Newline",34,c0,f7,d9)) return 0;
	if (inName==HX_("NullValue",4a,27,1b,e8)) return 0;
	if (inName==HX_("Number",e9,fa,0e,d6)) return 1;
	if (inName==HX_("Sign",5d,bc,2c,37)) return 1;
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val LexerTokens_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Boolean",88,12,50,4b)) return Boolean_dyn();
	if (inName==HX_("Characters",ca,5c,7f,4c)) return Characters_dyn();
	if (inName==HX_("Documentation",9a,d1,58,89)) return Documentation_dyn();
	if (inName==HX_("Identifier",89,cc,dd,c4)) return Identifier_dyn();
	if (inName==HX_("Newline",34,c0,f7,d9)) return Newline;
	if (inName==HX_("NullValue",4a,27,1b,e8)) return NullValue;
	if (inName==HX_("Number",e9,fa,0e,d6)) return Number_dyn();
	if (inName==HX_("Sign",5d,bc,2c,37)) return Sign_dyn();
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return SplitLine;
	return super::__Field(inName,inCallProp);
}

static ::String LexerTokens_obj_sStaticFields[] = {
	HX_("Identifier",89,cc,dd,c4),
	HX_("Sign",5d,bc,2c,37),
	HX_("Number",e9,fa,0e,d6),
	HX_("Boolean",88,12,50,4b),
	HX_("Characters",ca,5c,7f,4c),
	HX_("NullValue",4a,27,1b,e8),
	HX_("Newline",34,c0,f7,d9),
	HX_("SplitLine",ce,83,e5,ed),
	HX_("Documentation",9a,d1,58,89),
	::String(null())
};

::hx::Class LexerTokens_obj::__mClass;

Dynamic __Create_LexerTokens_obj() { return new LexerTokens_obj; }

void LexerTokens_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("little.lexer.LexerTokens",8c,63,0d,68), ::hx::TCanCast< LexerTokens_obj >,LexerTokens_obj_sStaticFields,0,
	&__Create_LexerTokens_obj, &__Create,
	&super::__SGetClass(), &CreateLexerTokens_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &LexerTokens_obj::__GetStatic;
}

void LexerTokens_obj::__boot()
{
Newline = ::hx::CreateConstEnum< LexerTokens_obj >(HX_("Newline",34,c0,f7,d9),6);
NullValue = ::hx::CreateConstEnum< LexerTokens_obj >(HX_("NullValue",4a,27,1b,e8),5);
SplitLine = ::hx::CreateConstEnum< LexerTokens_obj >(HX_("SplitLine",ce,83,e5,ed),7);
}


} // end namespace little
} // end namespace lexer
