// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_Memory
#include <little/interpreter/memory/Memory.h>
#endif
#ifndef INCLUDED_little_interpreter_memory_OperatorType
#include <little/interpreter/memory/OperatorType.h>
#endif
#ifndef INCLUDED_little_interpreter_memory__MemoryPointer_MemoryPointer_Impl_
#include <little/interpreter/memory/_MemoryPointer/MemoryPointer_Impl_.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_Extensions
#include <little/tools/Extensions.h>
#endif
#ifndef INCLUDED_little_tools_InterpTokensSimple
#include <little/tools/InterpTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_ParserTokensSimple
#include <little/tools/ParserTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_PrettyPrinter
#include <little/tools/PrettyPrinter.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_27_printParserAst,"little.tools.PrettyPrinter","printParserAst",0x1d9865eb,"little.tools.PrettyPrinter.printParserAst","little/tools/PrettyPrinter.hx",27,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_45_printInterpreterAst,"little.tools.PrettyPrinter","printInterpreterAst",0x897a9a60,"little.tools.PrettyPrinter.printInterpreterAst","little/tools/PrettyPrinter.hx",45,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_62_prefixFA,"little.tools.PrettyPrinter","prefixFA",0x9685f5c2,"little.tools.PrettyPrinter.prefixFA","little/tools/PrettyPrinter.hx",62,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_77_pushIndex,"little.tools.PrettyPrinter","pushIndex",0x69d3d2c3,"little.tools.PrettyPrinter.pushIndex","little/tools/PrettyPrinter.hx",77,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_94_getTree_PARSER,"little.tools.PrettyPrinter","getTree_PARSER",0x4543b81f,"little.tools.PrettyPrinter.getTree_PARSER","little/tools/PrettyPrinter.hx",94,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_216_getTree_INTERP,"little.tools.PrettyPrinter","getTree_INTERP",0xf6419514,"little.tools.PrettyPrinter.getTree_INTERP","little/tools/PrettyPrinter.hx",216,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_347_stringifyParser,"little.tools.PrettyPrinter","stringifyParser",0x4c538335,"little.tools.PrettyPrinter.stringifyParser","little/tools/PrettyPrinter.hx",347,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_403_stringifyInterpreter,"little.tools.PrettyPrinter","stringifyInterpreter",0x1178d3a4,"little.tools.PrettyPrinter.stringifyInterpreter","little/tools/PrettyPrinter.hx",403,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_462_prettyPrintOperatorPriority,"little.tools.PrettyPrinter","prettyPrintOperatorPriority",0x5d14298a,"little.tools.PrettyPrinter.prettyPrintOperatorPriority","little/tools/PrettyPrinter.hx",462,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_460_prettyPrintOperatorPriority,"little.tools.PrettyPrinter","prettyPrintOperatorPriority",0x5d14298a,"little.tools.PrettyPrinter.prettyPrintOperatorPriority","little/tools/PrettyPrinter.hx",460,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_83_boot,"little.tools.PrettyPrinter","boot",0xed3fbc27,"little.tools.PrettyPrinter.boot","little/tools/PrettyPrinter.hx",83,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_84_boot,"little.tools.PrettyPrinter","boot",0xed3fbc27,"little.tools.PrettyPrinter.boot","little/tools/PrettyPrinter.hx",84,0xf849d687)
HX_LOCAL_STACK_FRAME(_hx_pos_8097a7bac51ae56b_339_boot,"little.tools.PrettyPrinter","boot",0xed3fbc27,"little.tools.PrettyPrinter.boot","little/tools/PrettyPrinter.hx",339,0xf849d687)
namespace little{
namespace tools{

void PrettyPrinter_obj::__construct() { }

Dynamic PrettyPrinter_obj::__CreateEmpty() { return new PrettyPrinter_obj; }

void *PrettyPrinter_obj::_hx_vtable = 0;

Dynamic PrettyPrinter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PrettyPrinter_obj > _hx_result = new PrettyPrinter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PrettyPrinter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x666e1a1f;
}

::String PrettyPrinter_obj::printParserAst(::Array< ::Dynamic> ast, ::Dynamic __o_spacingBetweenNodes){
            		 ::Dynamic spacingBetweenNodes = __o_spacingBetweenNodes;
            		if (::hx::IsNull(__o_spacingBetweenNodes)) spacingBetweenNodes = 6;
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_27_printParserAst)
HXLINE(  28)		if (::hx::IsNull( ast )) {
HXLINE(  28)			return HX_("null (look for errors in input)",2e,23,37,b5);
            		}
HXLINE(  29)		::little::tools::PrettyPrinter_obj::s = ::little::tools::TextTools_obj::multiply(HX_(" ",20,00,00,00),( (int)(spacingBetweenNodes) ));
HXLINE(  30)		::String unfilteredResult = ::little::tools::PrettyPrinter_obj::getTree_PARSER(::little::parser::ParserTokens_obj::Expression(ast,null()),::Array_obj< int >::__new(0),0,true);
HXLINE(  31)		::String filtered = HX_("",00,00,00,00);
HXLINE(  32)		{
HXLINE(  32)			int _g = 0;
HXDLIN(  32)			::Array< ::String > _g1 = unfilteredResult.split(HX_("\n",0a,00,00,00));
HXDLIN(  32)			while((_g < _g1->length)){
HXLINE(  32)				::String line = _g1->__get(_g);
HXDLIN(  32)				_g = (_g + 1);
HXLINE(  33)				if ((line == HX_W(u"\u2514\u2500\u2500\u2500 Expression",766c,7597))) {
HXLINE(  34)					continue;
            				}
HXLINE(  35)				filtered = (filtered + (line.substring((( (int)(spacingBetweenNodes) ) - 1),null()) + HX_("\n",0a,00,00,00)));
            			}
            		}
HXLINE(  37)		return (HX_("\nAst\n",b2,53,50,ed) + filtered);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PrettyPrinter_obj,printParserAst,return )

::String PrettyPrinter_obj::printInterpreterAst(::Array< ::Dynamic> ast, ::Dynamic __o_spacingBetweenNodes){
            		 ::Dynamic spacingBetweenNodes = __o_spacingBetweenNodes;
            		if (::hx::IsNull(__o_spacingBetweenNodes)) spacingBetweenNodes = 6;
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_45_printInterpreterAst)
HXLINE(  46)		if (::hx::IsNull( ast )) {
HXLINE(  46)			return HX_("null (look for errors in input)",2e,23,37,b5);
            		}
HXLINE(  47)		::little::tools::PrettyPrinter_obj::s = ::little::tools::TextTools_obj::multiply(HX_(" ",20,00,00,00),( (int)(spacingBetweenNodes) ));
HXLINE(  48)		::String unfilteredResult = ::little::tools::PrettyPrinter_obj::getTree_INTERP(::little::interpreter::InterpTokens_obj::Expression(ast,null()),::Array_obj< int >::__new(0),0,true);
HXLINE(  49)		::String filtered = HX_("",00,00,00,00);
HXLINE(  50)		{
HXLINE(  50)			int _g = 0;
HXDLIN(  50)			::Array< ::String > _g1 = unfilteredResult.split(HX_("\n",0a,00,00,00));
HXDLIN(  50)			while((_g < _g1->length)){
HXLINE(  50)				::String line = _g1->__get(_g);
HXDLIN(  50)				_g = (_g + 1);
HXLINE(  51)				if ((line == HX_W(u"\u2514\u2500\u2500\u2500 Expression",766c,7597))) {
HXLINE(  52)					continue;
            				}
HXLINE(  53)				filtered = (filtered + (line.substring((( (int)(spacingBetweenNodes) ) - 1),null()) + HX_("\n",0a,00,00,00)));
            			}
            		}
HXLINE(  55)		return (HX_("\nAst\n",b2,53,50,ed) + filtered);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PrettyPrinter_obj,printInterpreterAst,return )

::String PrettyPrinter_obj::prefixFA(::Array< int > pArray){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_62_prefixFA)
HXLINE(  63)		::String prefix = HX_("",00,00,00,00);
HXLINE(  64)		{
HXLINE(  64)			int _g = 0;
HXDLIN(  64)			int _g1 = ::little::tools::PrettyPrinter_obj::l;
HXDLIN(  64)			while((_g < _g1)){
HXLINE(  64)				_g = (_g + 1);
HXDLIN(  64)				int i = (_g - 1);
HXLINE(  65)				if ((pArray->__get(i) == 1)) {
HXLINE(  66)					prefix = (prefix + (HX_W(u"\u2502",fed0,00ab) + ::little::tools::PrettyPrinter_obj::s.substring(1,null())));
            				}
            				else {
HXLINE(  68)					prefix = (prefix + ::little::tools::PrettyPrinter_obj::s);
            				}
            			}
            		}
HXLINE(  71)		return prefix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PrettyPrinter_obj,prefixFA,return )

::Array< int > PrettyPrinter_obj::pushIndex(::Array< int > pArray,int i){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_77_pushIndex)
HXLINE(  78)		::Array< int > arr = pArray->copy();
HXLINE(  79)		arr[(i + 1)] = 1;
HXLINE(  80)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PrettyPrinter_obj,pushIndex,return )

::String PrettyPrinter_obj::s;

int PrettyPrinter_obj::l;

::String PrettyPrinter_obj::getTree_PARSER( ::little::parser::ParserTokens root,::Array< int > prefix,int level,bool last){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_94_getTree_PARSER)
HXLINE(  95)		::little::tools::PrettyPrinter_obj::l = level;
HXLINE(  96)		::String t;
HXDLIN(  96)		if (last) {
HXLINE(  96)			t = HX_W(u"\u2514",fee2,00ab);
            		}
            		else {
HXLINE(  96)			t = HX_W(u"\u251c",feea,00ab);
            		}
HXLINE(  97)		::String c = HX_W(u"\u251c",feea,00ab);
HXLINE(  98)		::String d = HX_W(u"\u2500\u2500\u2500",c20e,fe40);
HXLINE(  99)		if (::hx::IsNull( root )) {
HXLINE( 100)			return HX_("",00,00,00,00);
            		}
HXLINE( 101)		switch((int)(root->_hx_getIndex())){
            			case (int)0: {
HXLINE( 102)				int line = root->_hx_getInt(0);
HXDLIN( 102)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SetLine(",f2,22,15,bb)) + line) + HX_(")\n",c1,23,00,00));
            			}
            			break;
            			case (int)1: {
HXLINE( 103)				::String module = root->_hx_getString(0);
HXDLIN( 103)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SetModule(",ba,72,58,5d)) + module) + HX_(")\n",c1,23,00,00));
            			}
            			break;
            			case (int)2: {
HXLINE( 104)				return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SplitLine\n",9c,38,bb,56));
            			}
            			break;
            			case (int)3: {
HXLINE( 113)				 ::little::parser::ParserTokens name = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 113)				 ::little::parser::ParserTokens type = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 113)				 ::little::parser::ParserTokens doc = root->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 115)				::String title = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Variable Creation\n",47,d0,de,3f));
HXLINE( 116)				if (::hx::IsNotNull( doc )) {
HXLINE( 116)					title = (title + ::little::tools::PrettyPrinter_obj::getTree_PARSER(doc,prefix->copy(),(level + 1),false));
            				}
HXLINE( 117)				title = (title + ::little::tools::PrettyPrinter_obj::getTree_PARSER(name,prefix->copy(),(level + 1),::hx::IsNull( type )));
HXLINE( 118)				if (::hx::IsNotNull( type )) {
HXLINE( 118)					title = (title + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type,prefix->copy(),(level + 1),true));
            				}
HXLINE( 119)				return title;
            			}
            			break;
            			case (int)4: {
HXLINE( 121)				 ::little::parser::ParserTokens name1 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 121)				 ::little::parser::ParserTokens params = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 121)				 ::little::parser::ParserTokens type1 = root->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 121)				 ::little::parser::ParserTokens doc1 = root->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 123)				::String title1 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Creation\n",23,94,36,62));
HXLINE( 124)				if (::hx::IsNotNull( doc1 )) {
HXLINE( 124)					title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(doc1,prefix->copy(),(level + 1),false));
            				}
HXLINE( 125)				title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(name1,prefix->copy(),(level + 1),false));
HXLINE( 126)				title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(params,prefix->copy(),(level + 1),::hx::IsNull( type1 )));
HXLINE( 127)				if (::hx::IsNotNull( type1 )) {
HXLINE( 127)					title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type1,prefix->copy(),(level + 1),true));
            				}
HXLINE( 128)				return title1;
            			}
            			break;
            			case (int)5: {
HXLINE( 130)				 ::little::parser::ParserTokens name2 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 130)				 ::little::parser::ParserTokens exp = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 130)				 ::little::parser::ParserTokens body = root->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 132)				::String title2 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Condition\n",4f,ea,b6,c3));
HXLINE( 133)				title2 = (title2 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(name2,prefix->copy(),(level + 1),false));
HXLINE( 134)				title2 = (title2 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(exp,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXLINE( 135)				title2 = (title2 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(body,prefix->copy(),(level + 1),true));
HXLINE( 136)				return title2;
            			}
            			break;
            			case (int)6: {
HXLINE( 138)				 ::little::parser::ParserTokens name3 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 139)				::String _hx_tmp = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Read: ",bc,cb,d4,63));
HXDLIN( 139)				return ((_hx_tmp + ::Std_obj::string(name3)) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)7: {
HXLINE( 140)				::Array< ::Dynamic> assignees = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 140)				 ::little::parser::ParserTokens value = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 142)				::String _hx_tmp1 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Variable Write\n",8f,3b,26,a2));
HXDLIN( 142)				::String _hx_tmp2 = (_hx_tmp1 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(::little::parser::ParserTokens_obj::PartArray(assignees),::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXDLIN( 142)				return (_hx_tmp2 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(value,prefix->copy(),(level + 1),true));
            			}
            			break;
            			case (int)8: {
HXLINE( 152)				::String value1 = root->_hx_getString(0);
HXLINE( 153)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + value1) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)9: {
HXLINE( 148)				 ::little::parser::ParserTokens value2 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 148)				 ::little::parser::ParserTokens type2 = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 150)				::String _hx_tmp3 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Type Declaration\n",d6,2e,89,d1));
HXDLIN( 150)				::Array< int > _hx_tmp4;
HXDLIN( 150)				if (::hx::IsNull( type2 )) {
HXLINE( 150)					_hx_tmp4 = prefix->copy();
            				}
            				else {
HXLINE( 150)					_hx_tmp4 = ::little::tools::PrettyPrinter_obj::pushIndex(prefix,level);
            				}
HXDLIN( 150)				::String _hx_tmp5 = (_hx_tmp3 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(value2,_hx_tmp4,(level + 1),::hx::IsNull( type2 )));
HXDLIN( 150)				return (_hx_tmp5 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type2,prefix->copy(),(level + 1),true));
            			}
            			break;
            			case (int)10: {
HXLINE( 191)				 ::little::parser::ParserTokens name4 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 191)				 ::little::parser::ParserTokens params1 = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 193)				::String title3 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Call\n",c4,06,a6,c3));
HXLINE( 194)				title3 = (title3 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(name4,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXLINE( 195)				title3 = (title3 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(params1,prefix->copy(),(level + 1),true));
HXLINE( 196)				return title3;
            			}
            			break;
            			case (int)11: {
HXLINE( 198)				 ::little::parser::ParserTokens value3 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 198)				 ::little::parser::ParserTokens type3 = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 199)				::String _hx_tmp6 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Return\n",1a,e1,61,f2));
HXDLIN( 199)				::String _hx_tmp7 = (_hx_tmp6 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(value3,prefix->copy(),(level + 1),::hx::IsNull( type3 )));
HXDLIN( 199)				return (_hx_tmp7 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type3,prefix->copy(),(level + 1),true));
            			}
            			break;
            			case (int)12: {
HXLINE( 155)				::Array< ::Dynamic> parts = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 155)				 ::little::parser::ParserTokens type4 = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 157)				if ((parts->length == 0)) {
HXLINE( 158)					return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <empty expression>\n",33,52,ae,c3));
            				}
HXLINE( 159)				::String strParts = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Expression\n",32,9f,b0,b8));
HXDLIN( 159)				::Array< ::String > strParts1 = ::Array_obj< ::String >::__new(1)->init(0,(strParts + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type4,prefix->copy(),(level + 1),false)));
HXDLIN( 159)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXLINE( 160)				{
HXLINE( 160)					int _g1 = 0;
HXDLIN( 160)					int _g2 = (parts->length - 1);
HXDLIN( 160)					while((_g1 < _g2)){
HXLINE( 160)						_g1 = (_g1 + 1);
HXDLIN( 160)						int i = (_g1 - 1);
HXDLIN( 160)						 ::little::parser::ParserTokens parts1 = parts->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 160)						_g->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(parts1,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 159)				::Array< ::String > strParts2 = strParts1->concat(_g);
HXLINE( 162)				 ::little::parser::ParserTokens parts2 = parts->__get((parts->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 162)				strParts2->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(parts2,prefix->copy(),(level + 1),true));
HXLINE( 163)				return strParts2->join(HX_("",00,00,00,00));
            			}
            			break;
            			case (int)13: {
HXLINE( 173)				::Array< ::Dynamic> body1 = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 173)				 ::little::parser::ParserTokens type5 = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 174)				if ((body1->length == 0)) {
HXLINE( 175)					return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <empty block>\n",6a,2e,fb,65));
            				}
HXLINE( 176)				::String strParts3 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Block\n",5d,7a,2d,0f));
HXDLIN( 176)				::Array< ::String > strParts4 = ::Array_obj< ::String >::__new(1)->init(0,(strParts3 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(type5,prefix->copy(),(level + 1),false)));
HXDLIN( 176)				::Array< ::String > _g3 = ::Array_obj< ::String >::__new(0);
HXLINE( 177)				{
HXLINE( 177)					int _g4 = 0;
HXDLIN( 177)					int _g5 = (body1->length - 1);
HXDLIN( 177)					while((_g4 < _g5)){
HXLINE( 177)						_g4 = (_g4 + 1);
HXDLIN( 177)						int i1 = (_g4 - 1);
HXDLIN( 177)						 ::little::parser::ParserTokens body2 = body1->__get(i1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 177)						_g3->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(body2,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 176)				::Array< ::String > strParts5 = strParts4->concat(_g3);
HXLINE( 179)				 ::little::parser::ParserTokens body3 = body1->__get((body1->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 179)				strParts5->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(body3,prefix->copy(),(level + 1),true));
HXLINE( 180)				return strParts5->join(HX_("",00,00,00,00));
            			}
            			break;
            			case (int)14: {
HXLINE( 182)				::Array< ::Dynamic> body4 = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 183)				if ((body4->length == 0)) {
HXLINE( 184)					return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <empty array>\n",b6,d1,75,5b));
            				}
HXLINE( 185)				::Array< ::String > strParts6 = ::Array_obj< ::String >::__new(1)->init(0,((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Part Array\n",be,e0,36,53)));
HXDLIN( 185)				::Array< ::String > _g6 = ::Array_obj< ::String >::__new(0);
HXLINE( 186)				{
HXLINE( 186)					int _g7 = 0;
HXDLIN( 186)					int _g8 = (body4->length - 1);
HXDLIN( 186)					while((_g7 < _g8)){
HXLINE( 186)						_g7 = (_g7 + 1);
HXDLIN( 186)						int i2 = (_g7 - 1);
HXDLIN( 186)						 ::little::parser::ParserTokens body5 = body4->__get(i2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 186)						_g6->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(body5,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 185)				::Array< ::String > strParts7 = strParts6->concat(_g6);
HXLINE( 188)				 ::little::parser::ParserTokens body6 = body4->__get((body4->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 188)				strParts7->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(body6,prefix->copy(),(level + 1),true));
HXLINE( 189)				return strParts7->join(HX_("",00,00,00,00));
            			}
            			break;
            			case (int)15: {
HXLINE( 201)				 ::little::parser::ParserTokens name5 = root->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 201)				 ::little::parser::ParserTokens property = root->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 202)				::String _hx_tmp8 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Property Access\n",3b,07,b9,9a));
HXDLIN( 202)				::String _hx_tmp9 = (_hx_tmp8 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(name5,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXDLIN( 202)				return (_hx_tmp9 + ::little::tools::PrettyPrinter_obj::getTree_PARSER(property,prefix->copy(),(level + 1),true));
            			}
            			break;
            			case (int)16: {
HXLINE( 144)				::String value4 = root->_hx_getString(0);
HXLINE( 146)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + value4) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)17: {
HXLINE( 109)				::String num = root->_hx_getString(0);
HXDLIN( 109)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + num) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)18: {
HXLINE( 108)				::String num1 = root->_hx_getString(0);
HXDLIN( 108)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + num1) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)19: {
HXLINE( 105)				::String string = root->_hx_getString(0);
HXDLIN( 105)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" \"",02,1c,00,00)) + string) + HX_("\"\n",a8,1d,00,00));
            			}
            			break;
            			case (int)20: {
HXLINE( 107)				::String doc2 = root->_hx_getString(0);
HXDLIN( 107)				::String _hx_tmp10 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Documentation: ",a0,42,69,14));
HXDLIN( 107)				return ((_hx_tmp10 + ::little::tools::TextTools_obj::replace(doc2,HX_("\n",0a,00,00,00),((HX_("\n",0a,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + HX_W(u"\u2502                  ",eed0,3c00)))) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)21: {
HXLINE( 106)				::String name6 = root->_hx_getString(0);
HXDLIN( 106)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Error: ",2e,ec,a9,dd)) + name6) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)22: {
HXLINE( 112)				::String _hx_tmp11 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 112)				return ((_hx_tmp11 + ::little::Little_obj::keywords->NULL_VALUE) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)23: {
HXLINE( 111)				::String _hx_tmp12 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 111)				return ((_hx_tmp12 + ::little::Little_obj::keywords->TRUE_VALUE) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)24: {
HXLINE( 110)				::String _hx_tmp13 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 110)				return ((_hx_tmp13 + ::little::Little_obj::keywords->FALSE_VALUE) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)25: {
HXLINE( 165)				::String name7 = root->_hx_getString(0);
HXDLIN( 165)				::Array< ::Dynamic> parts3 = root->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 166)				if ((parts3->length == 0)) {
HXLINE( 166)					return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + name7) + HX_("\n",0a,00,00,00));
            				}
HXLINE( 167)				::Array< ::String > strParts8 = ::Array_obj< ::String >::__new(1)->init(0,((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + name7) + HX_("\n",0a,00,00,00)));
HXDLIN( 167)				::Array< ::String > _g9 = ::Array_obj< ::String >::__new(0);
HXLINE( 168)				{
HXLINE( 168)					int _g10 = 0;
HXDLIN( 168)					int _g11 = (parts3->length - 1);
HXDLIN( 168)					while((_g10 < _g11)){
HXLINE( 168)						_g10 = (_g10 + 1);
HXDLIN( 168)						int i3 = (_g10 - 1);
HXDLIN( 168)						 ::little::parser::ParserTokens parts4 = parts3->__get(i3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 168)						_g9->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(parts4,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 167)				::Array< ::String > strParts9 = strParts8->concat(_g9);
HXLINE( 170)				 ::little::parser::ParserTokens parts5 = parts3->__get((parts3->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 170)				strParts9->push(::little::tools::PrettyPrinter_obj::getTree_PARSER(parts5,prefix->copy(),(level + 1),true));
HXLINE( 171)				return strParts9->join(HX_("",00,00,00,00));
            			}
            			break;
            		}
HXLINE( 101)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PrettyPrinter_obj,getTree_PARSER,return )

::String PrettyPrinter_obj::getTree_INTERP( ::little::interpreter::InterpTokens root,::Array< int > prefix,int level,bool last){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_216_getTree_INTERP)
HXLINE( 217)		::little::tools::PrettyPrinter_obj::l = level;
HXLINE( 218)		::String t;
HXDLIN( 218)		if (last) {
HXLINE( 218)			t = HX_W(u"\u2514",fee2,00ab);
            		}
            		else {
HXLINE( 218)			t = HX_W(u"\u251c",feea,00ab);
            		}
HXLINE( 219)		::String c = HX_W(u"\u251c",feea,00ab);
HXLINE( 220)		::String d = HX_W(u"\u2500\u2500\u2500",c20e,fe40);
HXLINE( 221)		if (::hx::IsNull( root )) {
HXLINE( 222)			return HX_("",00,00,00,00);
            		}
HXLINE( 224)		switch((int)(root->_hx_getIndex())){
            			case (int)0: {
HXLINE( 225)				int line = root->_hx_getInt(0);
HXDLIN( 225)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SetLine(",f2,22,15,bb)) + line) + HX_(")\n",c1,23,00,00));
            			}
            			break;
            			case (int)1: {
HXLINE( 226)				::String module = root->_hx_getString(0);
HXDLIN( 226)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SetModule(",ba,72,58,5d)) + module) + HX_(")\n",c1,23,00,00));
            			}
            			break;
            			case (int)2: {
HXLINE( 227)				return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" SplitLine\n",9c,38,bb,56));
            			}
            			break;
            			case (int)3: {
HXLINE( 239)				 ::little::interpreter::InterpTokens name = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 239)				 ::little::interpreter::InterpTokens type = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 239)				 ::little::interpreter::InterpTokens doc = root->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 240)				::String title = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Variable Declaration\n",14,e6,7a,c2));
HXLINE( 241)				if (::hx::IsNotNull( doc )) {
HXLINE( 241)					title = (title + ::little::tools::PrettyPrinter_obj::getTree_INTERP(doc,prefix->copy(),(level + 1),false));
            				}
HXLINE( 242)				title = (title + ::little::tools::PrettyPrinter_obj::getTree_INTERP(name,prefix->copy(),(level + 1),::hx::IsNull( type )));
HXLINE( 243)				if (::hx::IsNotNull( type )) {
HXLINE( 243)					title = (title + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type,prefix->copy(),(level + 1),true));
            				}
HXLINE( 244)				return title;
            			}
            			break;
            			case (int)4: {
HXLINE( 245)				 ::little::interpreter::InterpTokens name1 = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 245)				 ::little::interpreter::InterpTokens params = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 245)				 ::little::interpreter::InterpTokens type1 = root->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 245)				 ::little::interpreter::InterpTokens doc1 = root->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 246)				::String title1 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Declaration\n",b8,f3,89,e6));
HXLINE( 247)				if (::hx::IsNotNull( doc1 )) {
HXLINE( 247)					title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(doc1,prefix->copy(),(level + 1),false));
            				}
HXLINE( 248)				title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(name1,prefix->copy(),(level + 1),false));
HXLINE( 249)				title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(params,prefix->copy(),(level + 1),::hx::IsNull( type1 )));
HXLINE( 250)				if (::hx::IsNotNull( type1 )) {
HXLINE( 250)					title1 = (title1 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type1,prefix->copy(),(level + 1),true));
            				}
HXLINE( 251)				return title1;
            			}
            			break;
            			case (int)5: {
HXLINE( 263)				 ::haxe::ds::ObjectMap callers = root->_hx_getObject(0).StaticCast<  ::haxe::ds::ObjectMap >();
HXLINE( 264)				::String title2 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Condition Code\n",98,0d,88,ca));
HXLINE( 265)				 ::little::interpreter::InterpTokens title3 = ::little::interpreter::InterpTokens_obj::Characters(callers->toString());
HXDLIN( 265)				title2 = (title2 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(title3,prefix->copy(),(level + 1),true));
HXLINE( 266)				return title2;
            			}
            			break;
            			case (int)6: {
HXLINE( 252)				 ::little::interpreter::InterpTokens name2 = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)				 ::little::interpreter::InterpTokens exp = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 252)				 ::little::interpreter::InterpTokens body = root->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 253)				::String title4 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Condition Call\n",07,29,4d,c1));
HXLINE( 254)				title4 = (title4 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(name2,prefix->copy(),(level + 1),false));
HXLINE( 255)				title4 = (title4 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(exp,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXLINE( 256)				title4 = (title4 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(body,prefix->copy(),(level + 1),true));
HXLINE( 257)				return title4;
            			}
            			break;
            			case (int)7: {
HXLINE( 258)				 ::little::tools::BaseOrderedMap requiredParams = root->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 258)				 ::little::interpreter::InterpTokens body1 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 259)				::String title5 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Code\n",55,eb,e0,cc));
HXLINE( 260)				 ::little::interpreter::InterpTokens title6 = ::little::interpreter::InterpTokens_obj::Identifier(requiredParams->toString());
HXDLIN( 260)				title5 = (title5 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(title6,prefix->copy(),(level + 1),false));
HXLINE( 261)				title5 = (title5 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(body1,prefix->copy(),(level + 1),true));
HXLINE( 262)				return title5;
            			}
            			break;
            			case (int)8: {
HXLINE( 267)				 ::little::interpreter::InterpTokens name3 = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 267)				 ::little::interpreter::InterpTokens params1 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 268)				::String title7 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Call\n",c4,06,a6,c3));
HXLINE( 269)				title7 = (title7 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(name3,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXLINE( 270)				title7 = (title7 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(params1,prefix->copy(),(level + 1),true));
HXLINE( 271)				return title7;
            			}
            			break;
            			case (int)9: {
HXLINE( 272)				 ::little::interpreter::InterpTokens value = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 272)				 ::little::interpreter::InterpTokens type2 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 273)				::String title8 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Function Return\n",72,80,ee,28));
HXLINE( 274)				title8 = (title8 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(value,prefix->copy(),(level + 1),::hx::IsNull( type2 )));
HXLINE( 275)				if (::hx::IsNotNull( type2 )) {
HXLINE( 275)					title8 = (title8 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type2,prefix->copy(),(level + 1),true));
            				}
HXLINE( 276)				return title8;
            			}
            			break;
            			case (int)10: {
HXLINE( 277)				::Array< ::Dynamic> assignees = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 277)				 ::little::interpreter::InterpTokens value1 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 278)				::String title9 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Write\n",8b,22,29,e5));
HXLINE( 279)				title9 = (title9 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(::little::interpreter::InterpTokens_obj::PartArray(assignees),::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
HXLINE( 280)				title9 = (title9 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(value1,prefix->copy(),(level + 1),true));
HXLINE( 281)				return title9;
            			}
            			break;
            			case (int)11: {
HXLINE( 282)				 ::little::interpreter::InterpTokens value2 = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 282)				 ::little::interpreter::InterpTokens type3 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 283)				::String title10 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Type Cast\n",a5,ea,1a,f6));
HXLINE( 284)				title10 = (title10 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(value2,prefix->copy(),(level + 1),false));
HXLINE( 285)				title10 = (title10 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type3,prefix->copy(),(level + 1),true));
HXLINE( 286)				return title10;
            			}
            			break;
            			case (int)12: {
HXLINE( 287)				::Array< ::Dynamic> parts = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 287)				 ::little::interpreter::InterpTokens type4 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 288)				if ((parts->length == 0)) {
HXLINE( 289)					return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <empty expression>\n",33,52,ae,c3));
            				}
HXLINE( 290)				::String strParts = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Expression\n",32,9f,b0,b8));
HXDLIN( 290)				::Array< ::String > strParts1 = ::Array_obj< ::String >::__new(1)->init(0,(strParts + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type4,prefix->copy(),(level + 1),false)));
HXDLIN( 290)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXLINE( 291)				{
HXLINE( 291)					int _g1 = 0;
HXDLIN( 291)					int _g2 = (parts->length - 1);
HXDLIN( 291)					while((_g1 < _g2)){
HXLINE( 291)						_g1 = (_g1 + 1);
HXDLIN( 291)						int i = (_g1 - 1);
HXDLIN( 291)						 ::little::interpreter::InterpTokens parts1 = parts->__get(i).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 291)						_g->push(::little::tools::PrettyPrinter_obj::getTree_INTERP(parts1,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 290)				::Array< ::String > strParts2 = strParts1->concat(_g);
HXLINE( 293)				 ::little::interpreter::InterpTokens parts2 = parts->__get((parts->length - 1)).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 293)				strParts2->push(::little::tools::PrettyPrinter_obj::getTree_INTERP(parts2,prefix->copy(),(level + 1),true));
HXLINE( 294)				return strParts2->join(HX_("",00,00,00,00));
            			}
            			break;
            			case (int)13: {
HXLINE( 295)				::Array< ::Dynamic> body2 = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 295)				 ::little::interpreter::InterpTokens type5 = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 296)				if ((body2->length == 0)) {
HXLINE( 297)					return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <empty block>\n",6a,2e,fb,65));
            				}
HXLINE( 298)				::String strParts3 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Block\n",5d,7a,2d,0f));
HXDLIN( 298)				::Array< ::String > strParts4 = ::Array_obj< ::String >::__new(1)->init(0,(strParts3 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(type5,prefix->copy(),(level + 1),false)));
HXDLIN( 298)				::Array< ::String > _g3 = ::Array_obj< ::String >::__new(0);
HXLINE( 299)				{
HXLINE( 299)					int _g4 = 0;
HXDLIN( 299)					int _g5 = (body2->length - 1);
HXDLIN( 299)					while((_g4 < _g5)){
HXLINE( 299)						_g4 = (_g4 + 1);
HXDLIN( 299)						int i1 = (_g4 - 1);
HXDLIN( 299)						 ::little::interpreter::InterpTokens body3 = body2->__get(i1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 299)						_g3->push(::little::tools::PrettyPrinter_obj::getTree_INTERP(body3,::little::tools::PrettyPrinter_obj::pushIndex(prefix,level),(level + 1),false));
            					}
            				}
HXLINE( 298)				::Array< ::String > strParts5 = strParts4->concat(_g3);
HXLINE( 301)				 ::little::interpreter::InterpTokens body4 = body2->__get((body2->length - 1)).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 301)				strParts5->push(::little::tools::PrettyPrinter_obj::getTree_INTERP(body4,prefix->copy(),(level + 1),true));
HXLINE( 302)				return strParts5->join(HX_("",00,00,00,00));
            			}
            			break;
            			case (int)14: {
HXLINE( 304)				::Array< ::Dynamic> parts3 = root->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 305)				::String title11 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Part Array\n",be,e0,36,53));
HXLINE( 306)				{
HXLINE( 306)					int _g6 = 0;
HXDLIN( 306)					while((_g6 < parts3->length)){
HXLINE( 306)						 ::little::interpreter::InterpTokens part = parts3->__get(_g6).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 306)						_g6 = (_g6 + 1);
HXLINE( 307)						::Array< int > title12 = prefix->copy();
HXDLIN( 307)						title11 = (title11 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(part,title12,(level + 1),::hx::IsPointerEq( part,parts3->__get((parts3->length - 1)).StaticCast<  ::little::interpreter::InterpTokens >() )));
            					}
            				}
HXLINE( 309)				return title11;
            			}
            			break;
            			case (int)15: {
HXLINE( 310)				 ::little::interpreter::InterpTokens name4 = root->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 310)				 ::little::interpreter::InterpTokens property = root->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXLINE( 311)				::String title13 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Property Access\n",3b,07,b9,9a));
HXLINE( 312)				title13 = (title13 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(name4,prefix->copy(),(level + 1),false));
HXLINE( 313)				title13 = (title13 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(property,prefix->copy(),(level + 1),true));
HXLINE( 314)				return title13;
            			}
            			break;
            			case (int)16: {
HXLINE( 228)				int num = root->_hx_getInt(0);
HXDLIN( 228)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + num) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)17: {
HXLINE( 229)				Float num1 = root->_hx_getFloat(0);
HXDLIN( 229)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + num1) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)18: {
HXLINE( 230)				::String string = root->_hx_getString(0);
HXDLIN( 230)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" \"",02,1c,00,00)) + string) + HX_("\"\n",a8,1d,00,00));
            			}
            			break;
            			case (int)19: {
HXLINE( 236)				::String doc2 = root->_hx_getString(0);
HXDLIN( 236)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" \"\"\"",42,be,40,15)) + doc2) + HX_("\"\"\"\n",68,2b,93,16));
            			}
            			break;
            			case (int)20: {
HXLINE( 237)				int pointer = root->_hx_getInt(0);
HXDLIN( 237)				::String _hx_tmp = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ClassPointer: ",8b,89,60,fe));
HXDLIN( 237)				return ((_hx_tmp + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)21: {
HXLINE( 231)				::String sign = root->_hx_getString(0);
HXDLIN( 231)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + sign) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)22: {
HXLINE( 232)				::String _hx_tmp1 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 232)				return ((_hx_tmp1 + ::Std_obj::string(::little::parser::ParserTokens_obj::NullValue_dyn())) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)23: {
HXLINE( 233)				::String _hx_tmp2 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 233)				return ((_hx_tmp2 + ::Std_obj::string(::little::parser::ParserTokens_obj::TrueValue_dyn())) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)24: {
HXLINE( 234)				::String _hx_tmp3 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 234)				return ((_hx_tmp3 + ::Std_obj::string(::little::parser::ParserTokens_obj::FalseValue_dyn())) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)25: {
HXLINE( 235)				::String word = root->_hx_getString(0);
HXDLIN( 235)				return ((((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00)) + word) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)26: {
HXLINE( 316)				::String _g7 = root->_hx_getString(1);
HXDLIN( 316)				 ::haxe::ds::StringMap props = root->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXLINE( 317)				::String title14 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" Object\n",2b,d4,ee,75));
HXLINE( 319)				int i2 = 0;
HXLINE( 320)				{
HXLINE( 320)					::Dynamic map = props;
HXDLIN( 320)					::Dynamic _g_map = map;
HXDLIN( 320)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 320)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 320)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 320)						 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 320)						::String _g_key = key;
HXDLIN( 320)						::String key1 = _g_key;
HXDLIN( 320)						 ::Dynamic value3 = _g_value;
HXDLIN( 320)						{
HXLINE( 321)							i2 = (i2 + 1);
HXLINE( 322)							 ::little::interpreter::InterpTokens title15 = ::little::interpreter::InterpTokens_obj::Identifier(key1);
HXDLIN( 322)							::Array< int > title16 = prefix->copy();
HXDLIN( 322)							int title17 = (level + 1);
HXDLIN( 322)							::Array< ::String > _g8 = ::Array_obj< ::String >::__new(0);
HXDLIN( 322)							{
HXLINE( 322)								 ::Dynamic x = props->keys();
HXDLIN( 322)								while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 322)									::String x1 = ( (::String)(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 322)									_g8->push(x1);
            								}
            							}
HXDLIN( 322)							title14 = (title14 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(title15,title16,title17,(i2 == _g8->length)));
HXLINE( 323)							 ::little::interpreter::InterpTokens title18 = ::little::interpreter::InterpTokens_obj::Characters( ::Dynamic(value3->__Field(HX_("documentation",ba,81,68,41),::hx::paccDynamic)));
HXDLIN( 323)							::Array< int > title19;
HXDLIN( 323)							::Array< ::String > _g9 = ::Array_obj< ::String >::__new(0);
HXDLIN( 323)							{
HXLINE( 323)								 ::Dynamic x2 = props->keys();
HXDLIN( 323)								while(( (bool)(x2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 323)									::String x3 = ( (::String)(x2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 323)									_g9->push(x3);
            								}
            							}
HXDLIN( 323)							if ((i2 == _g9->length)) {
HXLINE( 323)								title19 = prefix->copy();
            							}
            							else {
HXLINE( 323)								title19 = ::little::tools::PrettyPrinter_obj::pushIndex(prefix,level);
            							}
HXDLIN( 323)							title14 = (title14 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(title18,title19,(level + 2),false));
HXLINE( 324)							 ::little::interpreter::InterpTokens value4 = value3->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXDLIN( 324)							::Array< int > title20;
HXDLIN( 324)							::Array< ::String > _g10 = ::Array_obj< ::String >::__new(0);
HXDLIN( 324)							{
HXLINE( 324)								 ::Dynamic x4 = props->keys();
HXDLIN( 324)								while(( (bool)(x4->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 324)									::String x5 = ( (::String)(x4->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 324)									_g10->push(x5);
            								}
            							}
HXDLIN( 324)							if ((i2 == _g10->length)) {
HXLINE( 324)								title20 = prefix->copy();
            							}
            							else {
HXLINE( 324)								title20 = ::little::tools::PrettyPrinter_obj::pushIndex(prefix,level);
            							}
HXDLIN( 324)							title14 = (title14 + ::little::tools::PrettyPrinter_obj::getTree_INTERP(value4,title20,(level + 2),true));
            						}
            					}
            				}
HXLINE( 326)				return title14;
            			}
            			break;
            			case (int)27: {
HXLINE( 327)				::String msg = root->_hx_getString(0);
HXDLIN( 327)				::String _hx_tmp4 = ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" ",20,00,00,00));
HXDLIN( 327)				return ((_hx_tmp4 + ::Std_obj::string(root)) + HX_("\n",0a,00,00,00));
            			}
            			break;
            			case (int)28: {
HXLINE( 238)				 ::Dynamic func = root->_hx_getObject(0);
HXDLIN( 238)				return ((((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::prefixFA(prefix)) + t) + d) + HX_(" <Haxe Extern>\n",0a,e9,c4,28));
            			}
            			break;
            		}
HXLINE( 224)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PrettyPrinter_obj,getTree_INTERP,return )

::String PrettyPrinter_obj::indent;

::String PrettyPrinter_obj::stringifyParser(::Array< ::Dynamic> code, ::little::parser::ParserTokens token){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_347_stringifyParser)
HXLINE( 348)		if (::hx::IsNotNull( token )) {
HXLINE( 348)			code = ::Array_obj< ::Dynamic>::__new(1)->init(0,token);
            		}
HXLINE( 349)		::String s = HX_("",00,00,00,00);
HXLINE( 351)		{
HXLINE( 351)			int _g = 0;
HXDLIN( 351)			while((_g < code->length)){
HXLINE( 351)				 ::little::parser::ParserTokens token1 = code->__get(_g).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 351)				_g = (_g + 1);
HXLINE( 352)				switch((int)(token1->_hx_getIndex())){
            					case (int)0: {
HXLINE( 353)						int line = token1->_hx_getInt(0);
HXDLIN( 353)						s = (s + (HX_("\n",0a,00,00,00) + ::little::tools::PrettyPrinter_obj::indent));
HXDLIN( 353)						continue;
            					}
            					break;
            					case (int)1: {
HXLINE( 354)						::String _g1 = token1->_hx_getString(0);
HXDLIN( 354)						continue;
            					}
            					break;
            					case (int)2: {
HXLINE( 356)						if (::StringTools_obj::isSpace(s.charAt((s.length - 1)),0)) {
HXLINE( 356)							s = s.substring(0,(s.length - 1));
            						}
HXLINE( 357)						s = (s + HX_(",",2c,00,00,00));
            					}
            					break;
            					case (int)3: {
HXLINE( 359)						 ::little::parser::ParserTokens _g2 = token1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 359)						{
HXLINE( 359)							 ::little::parser::ParserTokens name = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 359)							 ::little::parser::ParserTokens type = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 359)							::String s1 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->VARIABLE_DECLARATION) + HX_(" ",20,00,00,00));
HXDLIN( 359)							::String s2 = (s1 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name));
HXDLIN( 359)							::String s3;
HXDLIN( 359)							bool s4;
HXDLIN( 359)							if (::hx::IsNotNull( type )) {
HXLINE( 359)								::String s5 = ::little::tools::Extensions_obj::asJoinedStringPath(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 359)								s4 = (s5 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            							}
            							else {
HXLINE( 359)								s4 = false;
            							}
HXDLIN( 359)							if (s4) {
HXLINE( 359)								::String s6 = ((HX_(" ",20,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 359)								s3 = (s6 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),type));
            							}
            							else {
HXLINE( 359)								s3 = HX_("",00,00,00,00);
            							}
HXDLIN( 359)							s = (s + (s2 + s3));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 360)						 ::little::parser::ParserTokens _g3 = token1->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 360)						{
HXLINE( 360)							 ::little::parser::ParserTokens name1 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 360)							 ::little::parser::ParserTokens params = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 360)							 ::little::parser::ParserTokens type1 = token1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 360)							::String s7 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->FUNCTION_DECLARATION) + HX_(" ",20,00,00,00));
HXDLIN( 360)							::String s8 = ((s7 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name1)) + HX_("(",28,00,00,00));
HXDLIN( 360)							::String s9 = ((s8 + ::little::tools::TextTools_obj::replace(::little::tools::PrettyPrinter_obj::stringifyParser(null(),params),HX_(" ,",0c,1c,00,00),HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00));
HXDLIN( 360)							::String s10;
HXDLIN( 360)							bool s11;
HXDLIN( 360)							if (::hx::IsNotNull( type1 )) {
HXLINE( 360)								::String s12 = ::little::tools::Extensions_obj::asJoinedStringPath(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 360)								s11 = (s12 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            							}
            							else {
HXLINE( 360)								s11 = false;
            							}
HXDLIN( 360)							if (s11) {
HXLINE( 360)								::String s13 = ((HX_(" ",20,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 360)								s10 = (s13 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),type1));
            							}
            							else {
HXLINE( 360)								s10 = HX_("",00,00,00,00);
            							}
HXDLIN( 360)							s = (s + (s9 + s10));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE( 361)						 ::little::parser::ParserTokens name2 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 361)						 ::little::parser::ParserTokens exp = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 361)						 ::little::parser::ParserTokens body = token1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 361)						::String s14 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name2)) + HX_(" (",08,1c,00,00));
HXDLIN( 361)						::String s15 = ((s14 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),exp)) + HX_(") ",d7,23,00,00));
HXDLIN( 361)						s = (s + (s15 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),body)));
            					}
            					break;
            					case (int)6: {
HXLINE( 362)						 ::little::parser::ParserTokens name3 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 362)						s = (s + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name3));
            					}
            					break;
            					case (int)7: {
HXLINE( 363)						::Array< ::Dynamic> assignees = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 363)						 ::little::parser::ParserTokens value = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 363)						::Array< ::Dynamic> _this = assignees->concat(::Array_obj< ::Dynamic>::__new(1)->init(0,value));
HXDLIN( 363)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 363)						{
HXLINE( 363)							int _g4 = 0;
HXDLIN( 363)							int _g5 = _this->length;
HXDLIN( 363)							while((_g4 < _g5)){
HXLINE( 363)								_g4 = (_g4 + 1);
HXDLIN( 363)								int i = (_g4 - 1);
HXDLIN( 363)								{
HXLINE( 363)									::String inValue = ::little::tools::PrettyPrinter_obj::stringifyParser(null(),_hx_array_unsafe_get(_this,i));
HXDLIN( 363)									result->__unsafe_set(i,inValue);
            								}
            							}
            						}
HXDLIN( 363)						s = (s + ::little::tools::TextTools_obj::replace(result->join(HX_(" = ",63,7d,18,00)),HX_("  =",3d,64,18,00),HX_(" =",1d,1c,00,00)));
            					}
            					break;
            					case (int)8: {
HXLINE( 364)						::String word = token1->_hx_getString(0);
HXDLIN( 364)						s = (s + word);
            					}
            					break;
            					case (int)9: {
HXLINE( 365)						 ::little::parser::ParserTokens value1 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 365)						 ::little::parser::ParserTokens type2 = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 365)						::String s16 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),value1)) + HX_(" ",20,00,00,00));
HXDLIN( 365)						::String s17 = ((s16 + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 365)						s = (s + (s17 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),type2)));
            					}
            					break;
            					case (int)10: {
HXLINE( 366)						 ::little::parser::ParserTokens name4 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 366)						 ::little::parser::ParserTokens params1 = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 366)						::String s18 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name4)) + HX_("(",28,00,00,00));
HXDLIN( 366)						s = (s + ::little::tools::TextTools_obj::replaceIfLast(((s18 + ::little::tools::TextTools_obj::replace(::little::tools::PrettyPrinter_obj::stringifyParser(null(),params1),HX_(" ,",0c,1c,00,00),HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00)),HX_(" )",09,1c,00,00),HX_(")",29,00,00,00)));
            					}
            					break;
            					case (int)11: {
HXLINE( 367)						 ::little::parser::ParserTokens value2 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 367)						 ::little::parser::ParserTokens type3 = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 367)						::String s19 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->FUNCTION_RETURN) + HX_(" ",20,00,00,00));
HXDLIN( 367)						s = (s + (s19 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),value2)));
            					}
            					break;
            					case (int)12: {
HXLINE( 368)						::Array< ::Dynamic> parts = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 368)						 ::little::parser::ParserTokens type4 = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 368)						s = (s + ::little::tools::PrettyPrinter_obj::stringifyParser(parts,null()));
            					}
            					break;
            					case (int)13: {
HXLINE( 369)						::Array< ::Dynamic> body1 = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 369)						 ::little::parser::ParserTokens type5 = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 369)						{
HXLINE( 370)							 ::Dynamic _hx_tmp = ::hx::ClassOf< ::little::tools::PrettyPrinter >();
HXDLIN( 370)							::little::tools::PrettyPrinter_obj::indent = (::little::tools::PrettyPrinter_obj::indent + HX_("\t",09,00,00,00));
HXLINE( 371)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::SET_MODULE_dyn())->copy();
HXDLIN( 371)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 371)							{
HXLINE( 371)								int _g6 = 0;
HXDLIN( 371)								int _g7 = _this1->length;
HXDLIN( 371)								while((_g6 < _g7)){
HXLINE( 371)									_g6 = (_g6 + 1);
HXDLIN( 371)									int i1 = (_g6 - 1);
HXDLIN( 371)									{
HXLINE( 371)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 371)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 371)							if (result1->contains(::Type_obj::enumConstructor(body1->__get(0).StaticCast<  ::little::parser::ParserTokens >()).toLowerCase())) {
HXLINE( 371)								body1->shift().StaticCast<  ::little::parser::ParserTokens >();
            							}
HXLINE( 372)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 372)							::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 372)							{
HXLINE( 372)								int _g8 = 0;
HXDLIN( 372)								int _g9 = _this2->length;
HXDLIN( 372)								while((_g8 < _g9)){
HXLINE( 372)									_g8 = (_g8 + 1);
HXDLIN( 372)									int i2 = (_g8 - 1);
HXDLIN( 372)									{
HXLINE( 372)										::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 372)										result2->__unsafe_set(i2,inValue2);
            									}
            								}
            							}
HXDLIN( 372)							if (result2->contains(::Type_obj::enumConstructor(body1->__get(0).StaticCast<  ::little::parser::ParserTokens >()).toLowerCase())) {
HXLINE( 372)								body1->shift().StaticCast<  ::little::parser::ParserTokens >();
            							}
HXLINE( 373)							::String s20 = ((HX_("{",7b,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyParser(body1,null())) + HX_("} ",03,6d,00,00));
HXDLIN( 373)							::String s21;
HXDLIN( 373)							bool s22;
HXDLIN( 373)							if (::hx::IsNotNull( type5 )) {
HXLINE( 373)								::String s23 = ::little::tools::Extensions_obj::asJoinedStringPath(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >());
HXDLIN( 373)								s22 = (s23 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            							}
            							else {
HXLINE( 373)								s22 = false;
            							}
HXDLIN( 373)							if (s22) {
HXLINE( 373)								::String s24 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 373)								s21 = (s24 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),type5));
            							}
            							else {
HXLINE( 373)								s21 = HX_("",00,00,00,00);
            							}
HXDLIN( 373)							s = (s + (s20 + s21));
HXLINE( 374)							s = ::little::tools::TextTools_obj::replaceLast(s,HX_("\t} ",4c,41,07,00),HX_("}",7d,00,00,00));
HXLINE( 375)							::little::tools::PrettyPrinter_obj::indent = ::little::tools::TextTools_obj::replaceLast(::little::tools::PrettyPrinter_obj::indent,HX_("\t",09,00,00,00),HX_("",00,00,00,00));
            						}
            					}
            					break;
            					case (int)14: {
HXLINE( 377)						::Array< ::Dynamic> parts1 = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 377)						s = (s + ::little::tools::PrettyPrinter_obj::stringifyParser(parts1,null()));
            					}
            					break;
            					case (int)15: {
HXLINE( 378)						 ::little::parser::ParserTokens name5 = token1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 378)						 ::little::parser::ParserTokens property = token1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 378)						::String s25 = (HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),name5));
HXDLIN( 378)						::String s26 = (s25 + ::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXDLIN( 378)						s = (s + (s26 + ::little::tools::PrettyPrinter_obj::stringifyParser(null(),property)));
            					}
            					break;
            					case (int)16: {
HXLINE( 379)						::String sign = token1->_hx_getString(0);
HXDLIN( 379)						s = (s + sign);
            					}
            					break;
            					case (int)17: {
HXLINE( 380)						::String num = token1->_hx_getString(0);
HXDLIN( 380)						s = (s + num);
            					}
            					break;
            					case (int)18: {
HXLINE( 381)						::String num1 = token1->_hx_getString(0);
HXDLIN( 381)						s = (s + num1);
            					}
            					break;
            					case (int)19: {
HXLINE( 382)						::String string = token1->_hx_getString(0);
HXDLIN( 382)						s = (s + ((HX_("\"",22,00,00,00) + string) + HX_("\"",22,00,00,00)));
            					}
            					break;
            					case (int)20: {
HXLINE( 383)						::String doc = token1->_hx_getString(0);
HXDLIN( 383)						s = (s + ((HX_("\"\"\"",62,ea,19,00) + doc) + HX_("\"\"\"",62,ea,19,00)));
            					}
            					break;
            					case (int)21: {
HXLINE( 384)						::String msg = token1->_hx_getString(0);
HXDLIN( 384)						continue;
            					}
            					break;
            					case (int)22: {
HXLINE( 385)						s = (s + ::little::Little_obj::keywords->NULL_VALUE);
            					}
            					break;
            					case (int)23: {
HXLINE( 386)						s = (s + ::little::Little_obj::keywords->TRUE_VALUE);
            					}
            					break;
            					case (int)24: {
HXLINE( 387)						s = (s + ::little::Little_obj::keywords->FALSE_VALUE);
            					}
            					break;
            					case (int)25: {
HXLINE( 388)						::String _g10 = token1->_hx_getString(0);
HXDLIN( 388)						::Array< ::Dynamic> _g11 = token1->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 388)						HX_STACK_DO_THROW(((HX_("Custom tokens cannot be stringified, as they dont represent any output syntax (found ",2e,d7,47,db) + ::Std_obj::string(token1)) + HX_(")",29,00,00,00)));
            					}
            					break;
            				}
HXLINE( 390)				s = (s + HX_(" ",20,00,00,00));
            			}
            		}
HXLINE( 393)		return ::little::tools::TextTools_obj::replaceLast(::StringTools_obj::ltrim(s),HX_(" ",20,00,00,00),HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PrettyPrinter_obj,stringifyParser,return )

::String PrettyPrinter_obj::stringifyInterpreter(::Array< ::Dynamic> code, ::little::interpreter::InterpTokens token){
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_403_stringifyInterpreter)
HXLINE( 404)		bool _hx_tmp;
HXDLIN( 404)		bool _hx_tmp1;
HXDLIN( 404)		if (::hx::IsNull( token )) {
HXLINE( 404)			_hx_tmp1 = ::hx::IsNull( code );
            		}
            		else {
HXLINE( 404)			_hx_tmp1 = false;
            		}
HXDLIN( 404)		if (!(_hx_tmp1)) {
HXLINE( 404)			bool _hx_tmp2;
HXDLIN( 404)			if (::hx::IsNotNull( code )) {
HXLINE( 404)				_hx_tmp2 = (code->length == 1);
            			}
            			else {
HXLINE( 404)				_hx_tmp2 = false;
            			}
HXDLIN( 404)			if (_hx_tmp2) {
HXLINE( 404)				_hx_tmp = ::hx::IsNull( code->__get(0).StaticCast<  ::little::interpreter::InterpTokens >() );
            			}
            			else {
HXLINE( 404)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 404)			_hx_tmp = true;
            		}
HXDLIN( 404)		if (_hx_tmp) {
HXLINE( 404)			return HX_("",00,00,00,00);
            		}
HXLINE( 405)		if (::hx::IsNotNull( token )) {
HXLINE( 405)			code = ::Array_obj< ::Dynamic>::__new(1)->init(0,token);
            		}
HXLINE( 406)		::String s = HX_("",00,00,00,00);
HXLINE( 407)		int currentLine = -1;
HXLINE( 408)		{
HXLINE( 408)			int _g = 0;
HXDLIN( 408)			while((_g < code->length)){
HXLINE( 408)				 ::little::interpreter::InterpTokens token1 = code->__get(_g).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 408)				_g = (_g + 1);
HXLINE( 409)				switch((int)(token1->_hx_getIndex())){
            					case (int)0: {
HXLINE( 410)						int line = token1->_hx_getInt(0);
HXLINE( 411)						s = (s + (HX_("\n",0a,00,00,00) + ::little::tools::PrettyPrinter_obj::indent));
HXLINE( 412)						continue;
            					}
            					break;
            					case (int)1: {
HXLINE( 414)						::String module = token1->_hx_getString(0);
HXDLIN( 414)						continue;
            					}
            					break;
            					case (int)2: {
HXLINE( 416)						if (::StringTools_obj::isSpace(s.charAt((s.length - 1)),0)) {
HXLINE( 416)							s = s.substring(0,(s.length - 1));
            						}
HXLINE( 417)						s = (s + HX_(",",2c,00,00,00));
            					}
            					break;
            					case (int)3: {
HXLINE( 419)						 ::little::interpreter::InterpTokens name = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 419)						 ::little::interpreter::InterpTokens type = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 419)						 ::little::interpreter::InterpTokens doc = token1->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 419)						::String s1 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->VARIABLE_DECLARATION) + HX_(" ",20,00,00,00));
HXDLIN( 419)						::String s2 = (s1 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),name));
HXDLIN( 419)						::String s3;
HXDLIN( 419)						bool s4;
HXDLIN( 419)						if (::hx::IsNotNull( type )) {
HXLINE( 419)							::String s5 = ::little::tools::Extensions_obj::asJoinedStringPath(type);
HXDLIN( 419)							s4 = (s5 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE( 419)							s4 = false;
            						}
HXDLIN( 419)						if (s4) {
HXLINE( 419)							::String s6 = ((HX_(" ",20,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 419)							s3 = (s6 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),type));
            						}
            						else {
HXLINE( 419)							s3 = HX_("",00,00,00,00);
            						}
HXDLIN( 419)						s = (s + (s2 + s3));
            					}
            					break;
            					case (int)4: {
HXLINE( 420)						 ::little::interpreter::InterpTokens name1 = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 420)						 ::little::interpreter::InterpTokens params = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 420)						 ::little::interpreter::InterpTokens type1 = token1->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 420)						 ::little::interpreter::InterpTokens doc1 = token1->_hx_getObject(3).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 420)						::String s7 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->FUNCTION_DECLARATION) + HX_(" ",20,00,00,00));
HXDLIN( 420)						::String s8 = (s7 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),name1));
HXDLIN( 420)						::String s9;
HXDLIN( 420)						if (::hx::IsNotNull( params )) {
HXLINE( 420)							s9 = ((HX_("(",28,00,00,00) + ::little::tools::TextTools_obj::replace(::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),params),HX_(" ,",0c,1c,00,00),HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00));
            						}
            						else {
HXLINE( 420)							s9 = HX_("",00,00,00,00);
            						}
HXDLIN( 420)						::String s10;
HXDLIN( 420)						bool s11;
HXDLIN( 420)						if (::hx::IsNotNull( type1 )) {
HXLINE( 420)							::String s12 = ::little::tools::Extensions_obj::asJoinedStringPath(type1);
HXDLIN( 420)							s11 = (s12 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            						}
            						else {
HXLINE( 420)							s11 = false;
            						}
HXDLIN( 420)						if (s11) {
HXLINE( 420)							::String s13 = ((HX_(" ",20,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 420)							s10 = (s13 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),type1));
            						}
            						else {
HXLINE( 420)							s10 = HX_("",00,00,00,00);
            						}
HXDLIN( 420)						s = (s + ((s8 + s9) + s10));
            					}
            					break;
            					case (int)6: {
HXLINE( 425)						 ::little::interpreter::InterpTokens name2 = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 425)						 ::little::interpreter::InterpTokens exp = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 425)						 ::little::interpreter::InterpTokens body = token1->_hx_getObject(2).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 425)						::String s14 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),name2)) + HX_(" ",20,00,00,00));
HXDLIN( 425)						::String s15;
HXDLIN( 425)						if (::hx::IsNotNull( exp )) {
HXLINE( 425)							s15 = ((HX_("(",28,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),exp)) + HX_(")",29,00,00,00));
            						}
            						else {
HXLINE( 425)							s15 = HX_("",00,00,00,00);
            						}
HXDLIN( 425)						s = (s + (((s14 + s15) + HX_(" ",20,00,00,00)) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),body)));
            					}
            					break;
            					case (int)7: {
HXLINE( 447)						 ::little::tools::BaseOrderedMap _g1 = token1->_hx_getObject(0).StaticCast<  ::little::tools::BaseOrderedMap >();
HXDLIN( 447)						{
HXLINE( 447)							 ::little::interpreter::InterpTokens body1 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 447)							s = (s + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),body1));
            						}
            					}
            					break;
            					case (int)8: {
HXLINE( 424)						 ::little::interpreter::InterpTokens name3 = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 424)						 ::little::interpreter::InterpTokens params1 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 424)						::String s16 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),name3)) + HX_("(",28,00,00,00));
HXDLIN( 424)						s = (s + ::little::tools::TextTools_obj::replaceIfLast(((s16 + ::little::tools::TextTools_obj::replace(::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),params1),HX_(" ,",0c,1c,00,00),HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00)),HX_(" )",09,1c,00,00),HX_(")",29,00,00,00)));
            					}
            					break;
            					case (int)9: {
HXLINE( 426)						 ::little::interpreter::InterpTokens value = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 426)						 ::little::interpreter::InterpTokens type2 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 426)						::String s17 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->FUNCTION_RETURN) + HX_(" ",20,00,00,00));
HXDLIN( 426)						s = (s + (s17 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),value)));
            					}
            					break;
            					case (int)10: {
HXLINE( 421)						::Array< ::Dynamic> assignees = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 421)						 ::little::interpreter::InterpTokens value1 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 421)						::Array< ::Dynamic> _this = assignees->concat(::Array_obj< ::Dynamic>::__new(1)->init(0,value1));
HXDLIN( 421)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 421)						{
HXLINE( 421)							int _g2 = 0;
HXDLIN( 421)							int _g3 = _this->length;
HXDLIN( 421)							while((_g2 < _g3)){
HXLINE( 421)								_g2 = (_g2 + 1);
HXDLIN( 421)								int i = (_g2 - 1);
HXDLIN( 421)								{
HXLINE( 421)									::String inValue = ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),_hx_array_unsafe_get(_this,i));
HXDLIN( 421)									result->__unsafe_set(i,inValue);
            								}
            							}
            						}
HXDLIN( 421)						s = (s + ::little::tools::TextTools_obj::replace(result->join(HX_(" = ",63,7d,18,00)),HX_("  =",3d,64,18,00),HX_(" =",1d,1c,00,00)));
            					}
            					break;
            					case (int)11: {
HXLINE( 423)						 ::little::interpreter::InterpTokens value2 = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 423)						 ::little::interpreter::InterpTokens type3 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 423)						::String s18 = ((HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),value2)) + HX_(" ",20,00,00,00));
HXDLIN( 423)						::String s19 = ((s18 + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 423)						s = (s + (s19 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),type3)));
            					}
            					break;
            					case (int)12: {
HXLINE( 427)						::Array< ::Dynamic> parts = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 427)						 ::little::interpreter::InterpTokens type4 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 427)						s = (s + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(parts,null()));
            					}
            					break;
            					case (int)13: {
HXLINE( 428)						::Array< ::Dynamic> body2 = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 428)						 ::little::interpreter::InterpTokens type5 = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 428)						{
HXLINE( 429)							 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::little::tools::PrettyPrinter >();
HXDLIN( 429)							::little::tools::PrettyPrinter_obj::indent = (::little::tools::PrettyPrinter_obj::indent + HX_("\t",09,00,00,00));
HXLINE( 430)							::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SET_MODULE_dyn())->copy();
HXDLIN( 430)							::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 430)							{
HXLINE( 430)								int _g4 = 0;
HXDLIN( 430)								int _g5 = _this1->length;
HXDLIN( 430)								while((_g4 < _g5)){
HXLINE( 430)									_g4 = (_g4 + 1);
HXDLIN( 430)									int i1 = (_g4 - 1);
HXDLIN( 430)									{
HXLINE( 430)										::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 430)										result1->__unsafe_set(i1,inValue1);
            									}
            								}
            							}
HXDLIN( 430)							if (result1->contains(::Type_obj::enumConstructor(body2->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 430)								body2->shift().StaticCast<  ::little::interpreter::InterpTokens >();
            							}
HXLINE( 431)							::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::InterpTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 431)							::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 431)							{
HXLINE( 431)								int _g6 = 0;
HXDLIN( 431)								int _g7 = _this2->length;
HXDLIN( 431)								while((_g6 < _g7)){
HXLINE( 431)									_g6 = (_g6 + 1);
HXDLIN( 431)									int i2 = (_g6 - 1);
HXDLIN( 431)									{
HXLINE( 431)										::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 431)										result2->__unsafe_set(i2,inValue2);
            									}
            								}
            							}
HXDLIN( 431)							if (result2->contains(::Type_obj::enumConstructor(body2->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()).toLowerCase())) {
HXLINE( 431)								body2->shift().StaticCast<  ::little::interpreter::InterpTokens >();
            							}
HXLINE( 432)							::String s20 = ((HX_("{",7b,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(body2,null())) + HX_("} ",03,6d,00,00));
HXDLIN( 432)							::String s21;
HXDLIN( 432)							bool s22;
HXDLIN( 432)							if (::hx::IsNotNull( type5 )) {
HXLINE( 432)								::String s23 = ::little::tools::Extensions_obj::asJoinedStringPath(type5);
HXDLIN( 432)								s22 = (s23 != ::little::Little_obj::keywords->TYPE_UNKNOWN);
            							}
            							else {
HXLINE( 432)								s22 = false;
            							}
HXDLIN( 432)							if (s22) {
HXLINE( 432)								::String s24 = ((HX_("",00,00,00,00) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_(" ",20,00,00,00));
HXDLIN( 432)								s21 = (s24 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),type5));
            							}
            							else {
HXLINE( 432)								s21 = HX_("",00,00,00,00);
            							}
HXDLIN( 432)							s = (s + (s20 + s21));
HXLINE( 433)							s = ::little::tools::TextTools_obj::replaceLast(s,HX_("\t}",54,08,00,00),HX_("}",7d,00,00,00));
HXLINE( 434)							::little::tools::PrettyPrinter_obj::indent = ::little::tools::TextTools_obj::replaceLast(::little::tools::PrettyPrinter_obj::indent,HX_("\t",09,00,00,00),HX_("",00,00,00,00));
            						}
            					}
            					break;
            					case (int)14: {
HXLINE( 435)						::Array< ::Dynamic> parts1 = token1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 435)						s = (s + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(parts1,null()));
            					}
            					break;
            					case (int)15: {
HXLINE( 436)						 ::little::interpreter::InterpTokens name4 = token1->_hx_getObject(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 436)						 ::little::interpreter::InterpTokens property = token1->_hx_getObject(1).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 436)						::String s25 = (HX_("",00,00,00,00) + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),name4));
HXDLIN( 436)						::String s26 = (s25 + ::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN);
HXDLIN( 436)						s = (s + (s26 + ::little::tools::PrettyPrinter_obj::stringifyInterpreter(null(),property)));
            					}
            					break;
            					case (int)16: {
HXLINE( 438)						int num = token1->_hx_getInt(0);
HXDLIN( 438)						s = (s + num);
            					}
            					break;
            					case (int)17: {
HXLINE( 439)						Float num1 = token1->_hx_getFloat(0);
HXDLIN( 439)						s = (s + num1);
            					}
            					break;
            					case (int)18: {
HXLINE( 440)						::String string = token1->_hx_getString(0);
HXDLIN( 440)						s = (s + ((HX_("\"",22,00,00,00) + string) + HX_("\"",22,00,00,00)));
            					}
            					break;
            					case (int)19: {
HXLINE( 441)						::String doc2 = token1->_hx_getString(0);
HXDLIN( 441)						s = (s + ((HX_("\"\"\"",62,ea,19,00) + doc2) + HX_("\"\"\"",62,ea,19,00)));
            					}
            					break;
            					case (int)20: {
HXLINE( 446)						int pointer = token1->_hx_getInt(0);
HXDLIN( 446)						::String s27;
HXDLIN( 446)						if (::hx::IsNotNull( ::little::Little_obj::memory )) {
HXLINE( 446)							s27 = ::little::Little_obj::memory->getTypeName(pointer);
            						}
            						else {
HXLINE( 446)							HX_STACK_DO_THROW((HX_("No memory for ClassPointer token ",6b,1c,b9,f1) + ::little::interpreter::memory::_MemoryPointer::MemoryPointer_Impl__obj::toString(pointer)));
            						}
HXDLIN( 446)						s = (s + s27);
            					}
            					break;
            					case (int)21: {
HXLINE( 437)						::String sign = token1->_hx_getString(0);
HXDLIN( 437)						s = (s + sign);
            					}
            					break;
            					case (int)22: {
HXLINE( 443)						s = (s + ::little::Little_obj::keywords->NULL_VALUE);
            					}
            					break;
            					case (int)23: {
HXLINE( 444)						s = (s + ::little::Little_obj::keywords->TRUE_VALUE);
            					}
            					break;
            					case (int)24: {
HXLINE( 445)						s = (s + ::little::Little_obj::keywords->FALSE_VALUE);
            					}
            					break;
            					case (int)25: {
HXLINE( 422)						::String word = token1->_hx_getString(0);
HXDLIN( 422)						s = (s + word);
            					}
            					break;
            					case (int)27: {
HXLINE( 442)						::String msg = token1->_hx_getString(0);
            					}
            					break;
            					default:{
HXLINE( 448)						HX_STACK_DO_THROW(((HX_("Stringifying token ",f0,5b,37,55) + ::Std_obj::string(token1)) + HX_(" does not make sense, as it is represented by other tokens on parse time, and thus cannot appear in a non-manipulated InterpTokens AST",ab,18,64,50)));
            					}
            				}
HXLINE( 450)				s = (s + HX_(" ",20,00,00,00));
            			}
            		}
HXLINE( 453)		return ::little::tools::TextTools_obj::replaceLast(::StringTools_obj::ltrim(s),HX_(" ",20,00,00,00),HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PrettyPrinter_obj,stringifyInterpreter,return )

::String PrettyPrinter_obj::prettyPrintOperatorPriority( ::haxe::ds::IntMap priority){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(int x,int y){
            			HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_462_prettyPrintOperatorPriority)
HXLINE( 462)			return (x - y);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_460_prettyPrintOperatorPriority)
HXLINE( 461)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 461)		{
HXLINE( 461)			 ::Dynamic x = priority->keys();
HXDLIN( 461)			while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 461)				int x1 = ( (int)(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 461)				_g->push(x1);
            			}
            		}
HXDLIN( 461)		::Array< int > sortedKeys = _g;
HXLINE( 462)		::haxe::ds::ArraySort_obj::sort(sortedKeys, ::Dynamic(new _hx_Closure_0()));
HXLINE( 464)		::String string = HX_("",00,00,00,00);
HXLINE( 466)		{
HXLINE( 466)			int _g1 = 0;
HXDLIN( 466)			while((_g1 < sortedKeys->length)){
HXLINE( 466)				int key = sortedKeys->__get(_g1);
HXDLIN( 466)				_g1 = (_g1 + 1);
HXLINE( 467)				string = (string + ((HX_("",00,00,00,00) + key) + HX_(": (",c2,1e,2c,00)));
HXLINE( 468)				{
HXLINE( 468)					int _g2 = 0;
HXDLIN( 468)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(priority->get(key)) );
HXDLIN( 468)					while((_g2 < _g3->length)){
HXLINE( 468)						 ::Dynamic obj = _g3->__get(_g2);
HXDLIN( 468)						_g2 = (_g2 + 1);
HXLINE( 469)						if (::hx::IsPointerEq( obj->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_RHS_dyn() )) {
HXLINE( 469)							string = ( (::String)((string + ((HX_("_",5f,00,00,00) + obj->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) + HX_("_",5f,00,00,00)))) );
            						}
            						else {
HXLINE( 470)							if (::hx::IsPointerEq( obj->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::LHS_ONLY_dyn() )) {
HXLINE( 470)								string = ( (::String)((string + (HX_("_",5f,00,00,00) + obj->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)))) );
            							}
            							else {
HXLINE( 471)								if (::hx::IsPointerEq( obj->__Field(HX_("side",97,8d,53,4c),::hx::paccDynamic),::little::interpreter::memory::OperatorType_obj::RHS_ONLY_dyn() )) {
HXLINE( 471)									string = ( (::String)((string + ((HX_("",00,00,00,00) + obj->__Field(HX_("sign",3d,90,53,4c),::hx::paccDynamic)) + HX_("_",5f,00,00,00)))) );
            								}
            							}
            						}
HXLINE( 473)						string = (string + HX_(", ",74,26,00,00));
            					}
            				}
HXLINE( 475)				string = (::little::tools::TextTools_obj::replaceLast(string,HX_(", ",74,26,00,00),HX_(")",29,00,00,00)) + HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 478)		return string;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PrettyPrinter_obj,prettyPrintOperatorPriority,return )


PrettyPrinter_obj::PrettyPrinter_obj()
{
}

bool PrettyPrinter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { outValue = ( s ); return true; }
		if (HX_FIELD_EQ(inName,"l") ) { outValue = ( l ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { outValue = ( indent ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"prefixFA") ) { outValue = prefixFA_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pushIndex") ) { outValue = pushIndex_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"printParserAst") ) { outValue = printParserAst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTree_PARSER") ) { outValue = getTree_PARSER_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTree_INTERP") ) { outValue = getTree_INTERP_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stringifyParser") ) { outValue = stringifyParser_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"printInterpreterAst") ) { outValue = printInterpreterAst_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stringifyInterpreter") ) { outValue = stringifyInterpreter_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"prettyPrintOperatorPriority") ) { outValue = prettyPrintOperatorPriority_dyn(); return true; }
	}
	return false;
}

bool PrettyPrinter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"l") ) { l=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { indent=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PrettyPrinter_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PrettyPrinter_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PrettyPrinter_obj::s,HX_("s",73,00,00,00)},
	{::hx::fsInt,(void *) &PrettyPrinter_obj::l,HX_("l",6c,00,00,00)},
	{::hx::fsString,(void *) &PrettyPrinter_obj::indent,HX_("indent",6c,0c,f3,93)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PrettyPrinter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PrettyPrinter_obj::s,"s");
	HX_MARK_MEMBER_NAME(PrettyPrinter_obj::l,"l");
	HX_MARK_MEMBER_NAME(PrettyPrinter_obj::indent,"indent");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PrettyPrinter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PrettyPrinter_obj::s,"s");
	HX_VISIT_MEMBER_NAME(PrettyPrinter_obj::l,"l");
	HX_VISIT_MEMBER_NAME(PrettyPrinter_obj::indent,"indent");
};

#endif

::hx::Class PrettyPrinter_obj::__mClass;

static ::String PrettyPrinter_obj_sStaticFields[] = {
	HX_("printParserAst",b6,c9,8c,3e),
	HX_("printInterpreterAst",b5,96,31,f3),
	HX_("prefixFA",4d,1f,4e,ed),
	HX_("pushIndex",d8,02,30,02),
	HX_("s",73,00,00,00),
	HX_("l",6c,00,00,00),
	HX_("getTree_PARSER",ea,1b,38,66),
	HX_("getTree_INTERP",df,f8,35,17),
	HX_("indent",6c,0c,f3,93),
	HX_("stringifyParser",0a,71,36,01),
	HX_("stringifyInterpreter",af,a1,de,27),
	HX_("prettyPrintOperatorPriority",df,02,4f,1a),
	::String(null())
};

void PrettyPrinter_obj::__register()
{
	PrettyPrinter_obj _hx_dummy;
	PrettyPrinter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.tools.PrettyPrinter",99,2c,a5,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PrettyPrinter_obj::__GetStatic;
	__mClass->mSetStaticField = &PrettyPrinter_obj::__SetStatic;
	__mClass->mMarkFunc = PrettyPrinter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PrettyPrinter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PrettyPrinter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PrettyPrinter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PrettyPrinter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PrettyPrinter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PrettyPrinter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_83_boot)
HXDLIN(  83)		s = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_84_boot)
HXDLIN(  84)		l = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8097a7bac51ae56b_339_boot)
HXDLIN( 339)		indent = HX_("",00,00,00,00);
            	}
}

} // end namespace little
} // end namespace tools
