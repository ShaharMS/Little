// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_little_tools_BaseOrderedMap
#include <little/tools/BaseOrderedMap.h>
#endif
#ifndef INCLUDED_little_tools_OrderedMapKeyValueIterator
#include <little/tools/OrderedMapKeyValueIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2026dad2cf013754_43_new,"little.tools.BaseOrderedMap","new",0xe0ccc59d,"little.tools.BaseOrderedMap.new","little/tools/OrderedMap.hx",43,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_41_get_length,"little.tools.BaseOrderedMap","get_length",0x1653e112,"little.tools.BaseOrderedMap.get_length","little/tools/OrderedMap.hx",41,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_48_get,"little.tools.BaseOrderedMap","get",0xe0c775d3,"little.tools.BaseOrderedMap.get","little/tools/OrderedMap.hx",48,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_59_set,"little.tools.BaseOrderedMap","set",0xe0d090df,"little.tools.BaseOrderedMap.set","little/tools/OrderedMap.hx",59,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_71_remove,"little.tools.BaseOrderedMap","remove",0xd8a8cb27,"little.tools.BaseOrderedMap.remove","little/tools/OrderedMap.hx",71,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_82_iremove,"little.tools.BaseOrderedMap","iremove",0xdadf292a,"little.tools.BaseOrderedMap.iremove","little/tools/OrderedMap.hx",82,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_93_clear,"little.tools.BaseOrderedMap","clear",0xf0e9f00a,"little.tools.BaseOrderedMap.clear","little/tools/OrderedMap.hx",93,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_102_keys,"little.tools.BaseOrderedMap","keys",0xd0648217,"little.tools.BaseOrderedMap.keys","little/tools/OrderedMap.hx",102,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_106_iterator,"little.tools.BaseOrderedMap","iterator",0xd34e3791,"little.tools.BaseOrderedMap.iterator","little/tools/OrderedMap.hx",106,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_110_keyValueIterator,"little.tools.BaseOrderedMap","keyValueIterator",0xc38d9603,"little.tools.BaseOrderedMap.keyValueIterator","little/tools/OrderedMap.hx",110,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_113_has,"little.tools.BaseOrderedMap","has",0xe0c83497,"little.tools.BaseOrderedMap.has","little/tools/OrderedMap.hx",113,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_119_exists,"little.tools.BaseOrderedMap","exists",0x94004cbf,"little.tools.BaseOrderedMap.exists","little/tools/OrderedMap.hx",119,0xd54914c2)
HX_LOCAL_STACK_FRAME(_hx_pos_2026dad2cf013754_121_toString,"little.tools.BaseOrderedMap","toString",0x7822be4f,"little.tools.BaseOrderedMap.toString","little/tools/OrderedMap.hx",121,0xd54914c2)
namespace little{
namespace tools{

void BaseOrderedMap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_43_new)
HXLINE(  44)		this->_ks = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  45)		this->_vs = ::cpp::VirtualArray_obj::__new(0);
            	}

Dynamic BaseOrderedMap_obj::__CreateEmpty() { return new BaseOrderedMap_obj; }

void *BaseOrderedMap_obj::_hx_vtable = 0;

Dynamic BaseOrderedMap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseOrderedMap_obj > _hx_result = new BaseOrderedMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseOrderedMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a079ae5;
}

int BaseOrderedMap_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_41_get_length)
HXDLIN(  41)		return this->_ks->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,get_length,return )

 ::Dynamic BaseOrderedMap_obj::get( ::Dynamic k){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_48_get)
HXLINE(  49)		 ::Dynamic ret = null();
HXLINE(  50)		{
HXLINE(  50)			int _g = 0;
HXDLIN(  50)			int _g1 = this->_ks->get_length();
HXDLIN(  50)			while((_g < _g1)){
HXLINE(  50)				_g = (_g + 1);
HXDLIN(  50)				int i = (_g - 1);
HXLINE(  51)				if (::hx::IsEq( this->_ks->__get(i),k )) {
HXLINE(  52)					ret = this->_vs->__get(i);
HXLINE(  53)					goto _hx_goto_2;
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE(  56)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOrderedMap_obj,get,return )

void BaseOrderedMap_obj::set( ::Dynamic k, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_59_set)
HXLINE(  60)		{
HXLINE(  60)			int _g = 0;
HXDLIN(  60)			int _g1 = this->_ks->get_length();
HXDLIN(  60)			while((_g < _g1)){
HXLINE(  60)				_g = (_g + 1);
HXDLIN(  60)				int i = (_g - 1);
HXLINE(  61)				if (::hx::IsEq( this->_ks->__get(i),k )) {
HXLINE(  62)					this->_ks->set(i,k);
HXLINE(  63)					this->_vs->set(i,v);
HXLINE(  64)					return;
            				}
            			}
            		}
HXLINE(  67)		this->_ks->push(k);
HXLINE(  68)		this->_vs->push(v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseOrderedMap_obj,set,(void))

bool BaseOrderedMap_obj::remove( ::Dynamic k){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_71_remove)
HXLINE(  72)		{
HXLINE(  72)			int _g = 0;
HXDLIN(  72)			int _g1 = this->_ks->get_length();
HXDLIN(  72)			while((_g < _g1)){
HXLINE(  72)				_g = (_g + 1);
HXDLIN(  72)				int i = (_g - 1);
HXLINE(  73)				if (::hx::IsEq( this->_ks->__get(i),k )) {
HXLINE(  74)					this->_ks->splice(i,1);
HXLINE(  75)					this->_vs->splice(i,1);
HXLINE(  76)					return true;
            				}
            			}
            		}
HXLINE(  79)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOrderedMap_obj,remove,return )

bool BaseOrderedMap_obj::iremove(int id){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_82_iremove)
HXLINE(  83)		{
HXLINE(  83)			int _g = 0;
HXDLIN(  83)			int _g1 = this->_ks->get_length();
HXDLIN(  83)			while((_g < _g1)){
HXLINE(  83)				_g = (_g + 1);
HXDLIN(  83)				int i = (_g - 1);
HXLINE(  84)				if ((i == id)) {
HXLINE(  85)					this->_ks->splice(i,1);
HXLINE(  86)					this->_vs->splice(i,1);
HXLINE(  87)					return true;
            				}
            			}
            		}
HXLINE(  90)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOrderedMap_obj,iremove,return )

bool BaseOrderedMap_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_93_clear)
HXLINE(  94)		while((this->_ks->get_length() != 0)){
HXLINE(  95)			this->_ks->pop();
HXLINE(  96)			this->_vs->pop();
            		}
HXLINE(  98)		return (this->_ks->get_length() == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,clear,return )

 ::haxe::iterators::ArrayIterator BaseOrderedMap_obj::keys(){
            	HX_GC_STACKFRAME(&_hx_pos_2026dad2cf013754_102_keys)
HXDLIN( 102)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->_ks);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,keys,return )

 ::Dynamic BaseOrderedMap_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_2026dad2cf013754_106_iterator)
HXDLIN( 106)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->_vs);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,iterator,return )

 ::little::tools::OrderedMapKeyValueIterator BaseOrderedMap_obj::keyValueIterator(){
            	HX_GC_STACKFRAME(&_hx_pos_2026dad2cf013754_110_keyValueIterator)
HXDLIN( 110)		return  ::little::tools::OrderedMapKeyValueIterator_obj::__alloc( HX_CTX ,this->_ks,this->_vs);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,keyValueIterator,return )

bool BaseOrderedMap_obj::has( ::Dynamic k){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_113_has)
HXLINE( 114)		{
HXLINE( 114)			int _g = 0;
HXDLIN( 114)			::cpp::VirtualArray _g1 = this->_ks;
HXDLIN( 114)			while((_g < _g1->get_length())){
HXLINE( 114)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 114)				_g = (_g + 1);
HXDLIN( 114)				if (::hx::IsEq( k,i )) {
HXLINE( 114)					return true;
            				}
            			}
            		}
HXLINE( 115)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOrderedMap_obj,has,return )

bool BaseOrderedMap_obj::exists( ::Dynamic k){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_119_exists)
HXDLIN( 119)		return this->has(k);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOrderedMap_obj,exists,return )

::String BaseOrderedMap_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2026dad2cf013754_121_toString)
HXLINE( 122)		::String str = HX_("",00,00,00,00);
HXLINE( 123)		{
HXLINE( 123)			int _g = 0;
HXDLIN( 123)			int _g1 = this->_ks->get_length();
HXDLIN( 123)			while((_g < _g1)){
HXLINE( 123)				_g = (_g + 1);
HXDLIN( 123)				int i = (_g - 1);
HXLINE( 124)				::String value;
HXDLIN( 124)				if (::Std_obj::isOfType(this->_vs->__get(i),::hx::ClassOf< ::String >())) {
HXLINE( 124)					value = ((HX_("\"",22,00,00,00) + ::Std_obj::string(this->_vs->__get(i))) + HX_("\"",22,00,00,00));
            				}
            				else {
HXLINE( 124)					value = (HX_("",00,00,00,00) + ::Std_obj::string(this->_vs->__get(i)));
            				}
HXLINE( 125)				str = (str + (((HX_("",00,00,00,00) + ::Std_obj::string(this->_ks->__get(i))) + HX_(": ",a6,32,00,00)) + value));
HXLINE( 126)				if ((i != (this->_ks->get_length() - 1))) {
HXLINE( 127)					str = (str + HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 129)		return ((HX_("{",7b,00,00,00) + str) + HX_("}",7d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOrderedMap_obj,toString,return )


::hx::ObjectPtr< BaseOrderedMap_obj > BaseOrderedMap_obj::__new() {
	::hx::ObjectPtr< BaseOrderedMap_obj > __this = new BaseOrderedMap_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseOrderedMap_obj > BaseOrderedMap_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseOrderedMap_obj *__this = (BaseOrderedMap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseOrderedMap_obj), true, "little.tools.BaseOrderedMap"));
	*(void **)__this = BaseOrderedMap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseOrderedMap_obj::BaseOrderedMap_obj()
{
}

void BaseOrderedMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseOrderedMap);
	HX_MARK_MEMBER_NAME(_ks,"_ks");
	HX_MARK_MEMBER_NAME(_vs,"_vs");
	HX_MARK_END_CLASS();
}

void BaseOrderedMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_ks,"_ks");
	HX_VISIT_MEMBER_NAME(_vs,"_vs");
}

::hx::Val BaseOrderedMap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ks") ) { return ::hx::Val( _ks ); }
		if (HX_FIELD_EQ(inName,"_vs") ) { return ::hx::Val( _vs ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return ::hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iremove") ) { return ::hx::Val( iremove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { return ::hx::Val( keyValueIterator_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BaseOrderedMap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ks") ) { _ks=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_vs") ) { _vs=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BaseOrderedMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_ks",c7,73,48,00));
	outFields->push(HX_("_vs",5c,7d,48,00));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseOrderedMap_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(BaseOrderedMap_obj,_ks),HX_("_ks",c7,73,48,00)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(BaseOrderedMap_obj,_vs),HX_("_vs",5c,7d,48,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BaseOrderedMap_obj_sStaticStorageInfo = 0;
#endif

static ::String BaseOrderedMap_obj_sMemberFields[] = {
	HX_("_ks",c7,73,48,00),
	HX_("_vs",5c,7d,48,00),
	HX_("get_length",af,04,8f,8f),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("remove",44,9c,88,04),
	HX_("iremove",6d,51,d6,12),
	HX_("clear",8d,71,5b,48),
	HX_("keys",f4,e1,06,47),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("has",5a,3f,4f,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class BaseOrderedMap_obj::__mClass;

void BaseOrderedMap_obj::__register()
{
	BaseOrderedMap_obj _hx_dummy;
	BaseOrderedMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.tools.BaseOrderedMap",2b,b3,00,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseOrderedMap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseOrderedMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseOrderedMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseOrderedMap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace tools
