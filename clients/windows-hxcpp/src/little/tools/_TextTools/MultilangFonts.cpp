// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_little_tools__TextTools_MultilangFonts
#include <little/tools/_TextTools/MultilangFonts.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_46e1c4301d43db10_509_new,"little.tools._TextTools.MultilangFonts","new",0xff615523,"little.tools._TextTools.MultilangFonts.new","little/tools/TextTools.hx",509,0x296be5dd)
namespace little{
namespace tools{
namespace _TextTools{

void MultilangFonts_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_46e1c4301d43db10_509_new)
HXLINE( 532)		this->serif = HX_("assets/texter/TextTools/serif.ttf",cb,44,c2,51);
HXLINE( 523)		this->sans = HX_("assets/texter/TextTools/sans.ttf",b5,ba,5a,79);
            	}

Dynamic MultilangFonts_obj::__CreateEmpty() { return new MultilangFonts_obj; }

void *MultilangFonts_obj::_hx_vtable = 0;

Dynamic MultilangFonts_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MultilangFonts_obj > _hx_result = new MultilangFonts_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MultilangFonts_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x387e88cd;
}


MultilangFonts_obj::MultilangFonts_obj()
{
}

void MultilangFonts_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MultilangFonts);
	HX_MARK_MEMBER_NAME(sans,"sans");
	HX_MARK_MEMBER_NAME(serif,"serif");
	HX_MARK_END_CLASS();
}

void MultilangFonts_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sans,"sans");
	HX_VISIT_MEMBER_NAME(serif,"serif");
}

::hx::Val MultilangFonts_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sans") ) { return ::hx::Val( sans ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"serif") ) { return ::hx::Val( serif ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MultilangFonts_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sans") ) { sans=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"serif") ) { serif=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MultilangFonts_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sans",53,84,4d,4c));
	outFields->push(HX_("serif",7d,1f,2e,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MultilangFonts_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(MultilangFonts_obj,sans),HX_("sans",53,84,4d,4c)},
	{::hx::fsString,(int)offsetof(MultilangFonts_obj,serif),HX_("serif",7d,1f,2e,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MultilangFonts_obj_sStaticStorageInfo = 0;
#endif

static ::String MultilangFonts_obj_sMemberFields[] = {
	HX_("sans",53,84,4d,4c),
	HX_("serif",7d,1f,2e,7a),
	::String(null()) };

::hx::Class MultilangFonts_obj::__mClass;

void MultilangFonts_obj::__register()
{
	MultilangFonts_obj _hx_dummy;
	MultilangFonts_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.tools._TextTools.MultilangFonts",b1,87,e9,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MultilangFonts_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MultilangFonts_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MultilangFonts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MultilangFonts_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace little
} // end namespace tools
} // end namespace _TextTools
