// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
namespace little{
namespace parser{

::little::parser::ParserTokens ParserTokens_obj::Block(::Array< ::Dynamic> body, ::little::parser::ParserTokens type)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Block",2d,e5,29,48),13,2)->_hx_init(0,body)->_hx_init(1,type);
}

::little::parser::ParserTokens ParserTokens_obj::Characters(::String string)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Characters",ca,5c,7f,4c),19,1)->_hx_init(0,string);
}

::little::parser::ParserTokens ParserTokens_obj::ConditionCall( ::little::parser::ParserTokens name, ::little::parser::ParserTokens exp, ::little::parser::ParserTokens body)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("ConditionCall",b9,e7,7b,a2),5,3)->_hx_init(0,name)->_hx_init(1,exp)->_hx_init(2,body);
}

::little::parser::ParserTokens ParserTokens_obj::Custom(::String name,::Array< ::Dynamic> params)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Custom",d1,fb,26,74),25,2)->_hx_init(0,name)->_hx_init(1,params);
}

::little::parser::ParserTokens ParserTokens_obj::Decimal(::String num)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Decimal",71,dc,24,b4),18,1)->_hx_init(0,num);
}

::little::parser::ParserTokens ParserTokens_obj::Documentation(::String doc)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Documentation",9a,d1,58,89),20,1)->_hx_init(0,doc);
}

::little::parser::ParserTokens ParserTokens_obj::ErrorMessage(::String msg)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("ErrorMessage",ff,66,53,13),21,1)->_hx_init(0,msg);
}

::little::parser::ParserTokens ParserTokens_obj::Expression(::Array< ::Dynamic> parts, ::little::parser::ParserTokens type)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Expression",b8,15,50,25),12,2)->_hx_init(0,parts)->_hx_init(1,type);
}

::little::parser::ParserTokens ParserTokens_obj::FalseValue;

::little::parser::ParserTokens ParserTokens_obj::Function( ::little::parser::ParserTokens name, ::little::parser::ParserTokens params, ::little::parser::ParserTokens type, ::little::parser::ParserTokens doc)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Function",38,67,04,ee),4,4)->_hx_init(0,name)->_hx_init(1,params)->_hx_init(2,type)->_hx_init(3,doc);
}

::little::parser::ParserTokens ParserTokens_obj::FunctionCall( ::little::parser::ParserTokens name, ::little::parser::ParserTokens params)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("FunctionCall",f6,a7,c7,f0),10,2)->_hx_init(0,name)->_hx_init(1,params);
}

::little::parser::ParserTokens ParserTokens_obj::Identifier(::String word)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Identifier",89,cc,dd,c4),8,1)->_hx_init(0,word);
}

::little::parser::ParserTokens ParserTokens_obj::NullValue;

::little::parser::ParserTokens ParserTokens_obj::Number(::String num)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Number",e9,fa,0e,d6),17,1)->_hx_init(0,num);
}

::little::parser::ParserTokens ParserTokens_obj::PartArray(::Array< ::Dynamic> parts)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("PartArray",86,a8,3f,36),14,1)->_hx_init(0,parts);
}

::little::parser::ParserTokens ParserTokens_obj::PropertyAccess( ::little::parser::ParserTokens name, ::little::parser::ParserTokens property)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("PropertyAccess",f9,53,2f,68),15,2)->_hx_init(0,name)->_hx_init(1,property);
}

::little::parser::ParserTokens ParserTokens_obj::Read( ::little::parser::ParserTokens name)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Read",76,77,80,36),6,1)->_hx_init(0,name);
}

::little::parser::ParserTokens ParserTokens_obj::Return( ::little::parser::ParserTokens value, ::little::parser::ParserTokens type)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Return",d0,18,c2,3d),11,2)->_hx_init(0,value)->_hx_init(1,type);
}

::little::parser::ParserTokens ParserTokens_obj::SetLine(int line)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("SetLine",96,80,88,da),0,1)->_hx_init(0,line);
}

::little::parser::ParserTokens ParserTokens_obj::SetModule(::String module)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("SetModule",ce,89,4d,c2),1,1)->_hx_init(0,module);
}

::little::parser::ParserTokens ParserTokens_obj::Sign(::String sign)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Sign",5d,bc,2c,37),16,1)->_hx_init(0,sign);
}

::little::parser::ParserTokens ParserTokens_obj::SplitLine;

::little::parser::ParserTokens ParserTokens_obj::TrueValue;

::little::parser::ParserTokens ParserTokens_obj::TypeDeclaration( ::little::parser::ParserTokens value, ::little::parser::ParserTokens type)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("TypeDeclaration",40,b8,7f,a5),9,2)->_hx_init(0,value)->_hx_init(1,type);
}

::little::parser::ParserTokens ParserTokens_obj::Variable( ::little::parser::ParserTokens name, ::little::parser::ParserTokens type, ::little::parser::ParserTokens doc)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Variable",5c,ce,be,42),3,3)->_hx_init(0,name)->_hx_init(1,type)->_hx_init(2,doc);
}

::little::parser::ParserTokens ParserTokens_obj::Write(::Array< ::Dynamic> assignees, ::little::parser::ParserTokens value)
{
	return ::hx::CreateEnum< ParserTokens_obj >(HX_("Write",bf,dc,86,63),7,2)->_hx_init(0,assignees)->_hx_init(1,value);
}

bool ParserTokens_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Block",2d,e5,29,48)) { outValue = ParserTokens_obj::Block_dyn(); return true; }
	if (inName==HX_("Characters",ca,5c,7f,4c)) { outValue = ParserTokens_obj::Characters_dyn(); return true; }
	if (inName==HX_("ConditionCall",b9,e7,7b,a2)) { outValue = ParserTokens_obj::ConditionCall_dyn(); return true; }
	if (inName==HX_("Custom",d1,fb,26,74)) { outValue = ParserTokens_obj::Custom_dyn(); return true; }
	if (inName==HX_("Decimal",71,dc,24,b4)) { outValue = ParserTokens_obj::Decimal_dyn(); return true; }
	if (inName==HX_("Documentation",9a,d1,58,89)) { outValue = ParserTokens_obj::Documentation_dyn(); return true; }
	if (inName==HX_("ErrorMessage",ff,66,53,13)) { outValue = ParserTokens_obj::ErrorMessage_dyn(); return true; }
	if (inName==HX_("Expression",b8,15,50,25)) { outValue = ParserTokens_obj::Expression_dyn(); return true; }
	if (inName==HX_("FalseValue",ee,6e,33,78)) { outValue = ParserTokens_obj::FalseValue; return true; }
	if (inName==HX_("Function",38,67,04,ee)) { outValue = ParserTokens_obj::Function_dyn(); return true; }
	if (inName==HX_("FunctionCall",f6,a7,c7,f0)) { outValue = ParserTokens_obj::FunctionCall_dyn(); return true; }
	if (inName==HX_("Identifier",89,cc,dd,c4)) { outValue = ParserTokens_obj::Identifier_dyn(); return true; }
	if (inName==HX_("NullValue",4a,27,1b,e8)) { outValue = ParserTokens_obj::NullValue; return true; }
	if (inName==HX_("Number",e9,fa,0e,d6)) { outValue = ParserTokens_obj::Number_dyn(); return true; }
	if (inName==HX_("PartArray",86,a8,3f,36)) { outValue = ParserTokens_obj::PartArray_dyn(); return true; }
	if (inName==HX_("PropertyAccess",f9,53,2f,68)) { outValue = ParserTokens_obj::PropertyAccess_dyn(); return true; }
	if (inName==HX_("Read",76,77,80,36)) { outValue = ParserTokens_obj::Read_dyn(); return true; }
	if (inName==HX_("Return",d0,18,c2,3d)) { outValue = ParserTokens_obj::Return_dyn(); return true; }
	if (inName==HX_("SetLine",96,80,88,da)) { outValue = ParserTokens_obj::SetLine_dyn(); return true; }
	if (inName==HX_("SetModule",ce,89,4d,c2)) { outValue = ParserTokens_obj::SetModule_dyn(); return true; }
	if (inName==HX_("Sign",5d,bc,2c,37)) { outValue = ParserTokens_obj::Sign_dyn(); return true; }
	if (inName==HX_("SplitLine",ce,83,e5,ed)) { outValue = ParserTokens_obj::SplitLine; return true; }
	if (inName==HX_("TrueValue",23,ed,ed,d7)) { outValue = ParserTokens_obj::TrueValue; return true; }
	if (inName==HX_("TypeDeclaration",40,b8,7f,a5)) { outValue = ParserTokens_obj::TypeDeclaration_dyn(); return true; }
	if (inName==HX_("Variable",5c,ce,be,42)) { outValue = ParserTokens_obj::Variable_dyn(); return true; }
	if (inName==HX_("Write",bf,dc,86,63)) { outValue = ParserTokens_obj::Write_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(ParserTokens_obj)

int ParserTokens_obj::__FindIndex(::String inName)
{
	if (inName==HX_("Block",2d,e5,29,48)) return 13;
	if (inName==HX_("Characters",ca,5c,7f,4c)) return 19;
	if (inName==HX_("ConditionCall",b9,e7,7b,a2)) return 5;
	if (inName==HX_("Custom",d1,fb,26,74)) return 25;
	if (inName==HX_("Decimal",71,dc,24,b4)) return 18;
	if (inName==HX_("Documentation",9a,d1,58,89)) return 20;
	if (inName==HX_("ErrorMessage",ff,66,53,13)) return 21;
	if (inName==HX_("Expression",b8,15,50,25)) return 12;
	if (inName==HX_("FalseValue",ee,6e,33,78)) return 24;
	if (inName==HX_("Function",38,67,04,ee)) return 4;
	if (inName==HX_("FunctionCall",f6,a7,c7,f0)) return 10;
	if (inName==HX_("Identifier",89,cc,dd,c4)) return 8;
	if (inName==HX_("NullValue",4a,27,1b,e8)) return 22;
	if (inName==HX_("Number",e9,fa,0e,d6)) return 17;
	if (inName==HX_("PartArray",86,a8,3f,36)) return 14;
	if (inName==HX_("PropertyAccess",f9,53,2f,68)) return 15;
	if (inName==HX_("Read",76,77,80,36)) return 6;
	if (inName==HX_("Return",d0,18,c2,3d)) return 11;
	if (inName==HX_("SetLine",96,80,88,da)) return 0;
	if (inName==HX_("SetModule",ce,89,4d,c2)) return 1;
	if (inName==HX_("Sign",5d,bc,2c,37)) return 16;
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return 2;
	if (inName==HX_("TrueValue",23,ed,ed,d7)) return 23;
	if (inName==HX_("TypeDeclaration",40,b8,7f,a5)) return 9;
	if (inName==HX_("Variable",5c,ce,be,42)) return 3;
	if (inName==HX_("Write",bf,dc,86,63)) return 7;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,Block,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Characters,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC3(ParserTokens_obj,ConditionCall,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,Custom,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Decimal,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Documentation,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,ErrorMessage,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,Expression,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC4(ParserTokens_obj,Function,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,FunctionCall,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Identifier,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Number,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,PartArray,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,PropertyAccess,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Read,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,Return,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,SetLine,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,SetModule,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(ParserTokens_obj,Sign,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,TypeDeclaration,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC3(ParserTokens_obj,Variable,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(ParserTokens_obj,Write,return)

int ParserTokens_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("Block",2d,e5,29,48)) return 2;
	if (inName==HX_("Characters",ca,5c,7f,4c)) return 1;
	if (inName==HX_("ConditionCall",b9,e7,7b,a2)) return 3;
	if (inName==HX_("Custom",d1,fb,26,74)) return 2;
	if (inName==HX_("Decimal",71,dc,24,b4)) return 1;
	if (inName==HX_("Documentation",9a,d1,58,89)) return 1;
	if (inName==HX_("ErrorMessage",ff,66,53,13)) return 1;
	if (inName==HX_("Expression",b8,15,50,25)) return 2;
	if (inName==HX_("FalseValue",ee,6e,33,78)) return 0;
	if (inName==HX_("Function",38,67,04,ee)) return 4;
	if (inName==HX_("FunctionCall",f6,a7,c7,f0)) return 2;
	if (inName==HX_("Identifier",89,cc,dd,c4)) return 1;
	if (inName==HX_("NullValue",4a,27,1b,e8)) return 0;
	if (inName==HX_("Number",e9,fa,0e,d6)) return 1;
	if (inName==HX_("PartArray",86,a8,3f,36)) return 1;
	if (inName==HX_("PropertyAccess",f9,53,2f,68)) return 2;
	if (inName==HX_("Read",76,77,80,36)) return 1;
	if (inName==HX_("Return",d0,18,c2,3d)) return 2;
	if (inName==HX_("SetLine",96,80,88,da)) return 1;
	if (inName==HX_("SetModule",ce,89,4d,c2)) return 1;
	if (inName==HX_("Sign",5d,bc,2c,37)) return 1;
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return 0;
	if (inName==HX_("TrueValue",23,ed,ed,d7)) return 0;
	if (inName==HX_("TypeDeclaration",40,b8,7f,a5)) return 2;
	if (inName==HX_("Variable",5c,ce,be,42)) return 3;
	if (inName==HX_("Write",bf,dc,86,63)) return 2;
	return super::__FindArgCount(inName);
}

::hx::Val ParserTokens_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Block",2d,e5,29,48)) return Block_dyn();
	if (inName==HX_("Characters",ca,5c,7f,4c)) return Characters_dyn();
	if (inName==HX_("ConditionCall",b9,e7,7b,a2)) return ConditionCall_dyn();
	if (inName==HX_("Custom",d1,fb,26,74)) return Custom_dyn();
	if (inName==HX_("Decimal",71,dc,24,b4)) return Decimal_dyn();
	if (inName==HX_("Documentation",9a,d1,58,89)) return Documentation_dyn();
	if (inName==HX_("ErrorMessage",ff,66,53,13)) return ErrorMessage_dyn();
	if (inName==HX_("Expression",b8,15,50,25)) return Expression_dyn();
	if (inName==HX_("FalseValue",ee,6e,33,78)) return FalseValue;
	if (inName==HX_("Function",38,67,04,ee)) return Function_dyn();
	if (inName==HX_("FunctionCall",f6,a7,c7,f0)) return FunctionCall_dyn();
	if (inName==HX_("Identifier",89,cc,dd,c4)) return Identifier_dyn();
	if (inName==HX_("NullValue",4a,27,1b,e8)) return NullValue;
	if (inName==HX_("Number",e9,fa,0e,d6)) return Number_dyn();
	if (inName==HX_("PartArray",86,a8,3f,36)) return PartArray_dyn();
	if (inName==HX_("PropertyAccess",f9,53,2f,68)) return PropertyAccess_dyn();
	if (inName==HX_("Read",76,77,80,36)) return Read_dyn();
	if (inName==HX_("Return",d0,18,c2,3d)) return Return_dyn();
	if (inName==HX_("SetLine",96,80,88,da)) return SetLine_dyn();
	if (inName==HX_("SetModule",ce,89,4d,c2)) return SetModule_dyn();
	if (inName==HX_("Sign",5d,bc,2c,37)) return Sign_dyn();
	if (inName==HX_("SplitLine",ce,83,e5,ed)) return SplitLine;
	if (inName==HX_("TrueValue",23,ed,ed,d7)) return TrueValue;
	if (inName==HX_("TypeDeclaration",40,b8,7f,a5)) return TypeDeclaration_dyn();
	if (inName==HX_("Variable",5c,ce,be,42)) return Variable_dyn();
	if (inName==HX_("Write",bf,dc,86,63)) return Write_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String ParserTokens_obj_sStaticFields[] = {
	HX_("SetLine",96,80,88,da),
	HX_("SetModule",ce,89,4d,c2),
	HX_("SplitLine",ce,83,e5,ed),
	HX_("Variable",5c,ce,be,42),
	HX_("Function",38,67,04,ee),
	HX_("ConditionCall",b9,e7,7b,a2),
	HX_("Read",76,77,80,36),
	HX_("Write",bf,dc,86,63),
	HX_("Identifier",89,cc,dd,c4),
	HX_("TypeDeclaration",40,b8,7f,a5),
	HX_("FunctionCall",f6,a7,c7,f0),
	HX_("Return",d0,18,c2,3d),
	HX_("Expression",b8,15,50,25),
	HX_("Block",2d,e5,29,48),
	HX_("PartArray",86,a8,3f,36),
	HX_("PropertyAccess",f9,53,2f,68),
	HX_("Sign",5d,bc,2c,37),
	HX_("Number",e9,fa,0e,d6),
	HX_("Decimal",71,dc,24,b4),
	HX_("Characters",ca,5c,7f,4c),
	HX_("Documentation",9a,d1,58,89),
	HX_("ErrorMessage",ff,66,53,13),
	HX_("NullValue",4a,27,1b,e8),
	HX_("TrueValue",23,ed,ed,d7),
	HX_("FalseValue",ee,6e,33,78),
	HX_("Custom",d1,fb,26,74),
	::String(null())
};

::hx::Class ParserTokens_obj::__mClass;

Dynamic __Create_ParserTokens_obj() { return new ParserTokens_obj; }

void ParserTokens_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("little.parser.ParserTokens",30,0f,05,9c), ::hx::TCanCast< ParserTokens_obj >,ParserTokens_obj_sStaticFields,0,
	&__Create_ParserTokens_obj, &__Create,
	&super::__SGetClass(), &CreateParserTokens_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &ParserTokens_obj::__GetStatic;
}

void ParserTokens_obj::__boot()
{
FalseValue = ::hx::CreateConstEnum< ParserTokens_obj >(HX_("FalseValue",ee,6e,33,78),24);
NullValue = ::hx::CreateConstEnum< ParserTokens_obj >(HX_("NullValue",4a,27,1b,e8),22);
SplitLine = ::hx::CreateConstEnum< ParserTokens_obj >(HX_("SplitLine",ce,83,e5,ed),2);
TrueValue = ::hx::CreateConstEnum< ParserTokens_obj >(HX_("TrueValue",23,ed,ed,d7),23);
}


} // end namespace little
} // end namespace parser
