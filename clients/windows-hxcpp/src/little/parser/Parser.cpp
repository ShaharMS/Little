// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
#ifndef INCLUDED_little_parser_Parser
#include <little/parser/Parser.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_ParserTokensSimple
#include <little/tools/ParserTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_37___default_parse,"little.parser.Parser","__default_parse",0xbb46569d,"little.parser.Parser.__default_parse","little/parser/Parser.hx",37,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_73_convert,"little.parser.Parser","convert",0xcf94dcbb,"little.parser.Parser.convert","little/parser/Parser.hx",73,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_117_mergeBlocks,"little.parser.Parser","mergeBlocks",0xf20e0226,"little.parser.Parser.mergeBlocks","little/parser/Parser.hx",117,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_175_mergeExpressions,"little.parser.Parser","mergeExpressions",0xf9c95c3b,"little.parser.Parser.mergeExpressions","little/parser/Parser.hx",175,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_235_mergePropertyOperations,"little.parser.Parser","mergePropertyOperations",0xbb82cac1,"little.parser.Parser.mergePropertyOperations","little/parser/Parser.hx",235,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_325_mergeTypeDecls,"little.parser.Parser","mergeTypeDecls",0xeb7c980f,"little.parser.Parser.mergeTypeDecls","little/parser/Parser.hx",325,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_375_mergeComplexStructures,"little.parser.Parser","mergeComplexStructures",0x49a7ef90,"little.parser.Parser.mergeComplexStructures","little/parser/Parser.hx",375,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_619_mergeCalls,"little.parser.Parser","mergeCalls",0xa9e7f275,"little.parser.Parser.mergeCalls","little/parser/Parser.hx",619,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_670_mergeWrites,"little.parser.Parser","mergeWrites",0xc809aa54,"little.parser.Parser.mergeWrites","little/parser/Parser.hx",670,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_741_mergeValuesWithTypeDecls,"little.parser.Parser","mergeValuesWithTypeDecls",0x9fb24fe7,"little.parser.Parser.mergeValuesWithTypeDecls","little/parser/Parser.hx",741,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_800_mergeNonBlockBodies,"little.parser.Parser","mergeNonBlockBodies",0x799ce040,"little.parser.Parser.mergeNonBlockBodies","little/parser/Parser.hx",800,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_853_mergeElses,"little.parser.Parser","mergeElses",0xd7ffbdfa,"little.parser.Parser.mergeElses","little/parser/Parser.hx",853,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_926_get_line,"little.parser.Parser","get_line",0x4425e3b5,"little.parser.Parser.get_line","little/parser/Parser.hx",926,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_927_set_line,"little.parser.Parser","set_line",0xf2833d29,"little.parser.Parser.set_line","little/parser/Parser.hx",927,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_929_get_module,"little.parser.Parser","get_module",0xd86132ad,"little.parser.Parser.get_module","little/parser/Parser.hx",929,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_930_set_module,"little.parser.Parser","set_module",0xdbded121,"little.parser.Parser.set_module","little/parser/Parser.hx",930,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_936_setLine,"little.parser.Parser","setLine",0xc202377e,"little.parser.Parser.setLine","little/parser/Parser.hx",936,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_943_nextPart,"little.parser.Parser","nextPart",0x72d69abe,"little.parser.Parser.nextPart","little/parser/Parser.hx",943,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_948_resetLines,"little.parser.Parser","resetLines",0x84a4a3e8,"little.parser.Parser.resetLines","little/parser/Parser.hx",948,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_25_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",25,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_931_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",931,0x38f03b28)
namespace little{
namespace parser{

void Parser_obj::__construct() { }

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54a57e14;
}

::Array< ::Dynamic> Parser_obj::additionalParsingLevels;

HX_BEGIN_DEFAULT_FUNC(__default_parse,Parser_obj)
::Array< ::Dynamic> _hx_run(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_37___default_parse)
HXLINE(  38)		::Array< ::Dynamic> tokens = ::little::parser::Parser_obj::convert(lexerTokens);
HXLINE(  40)		tokens->unshift(::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()));
HXLINE(  43)		tokens = ::little::parser::Parser_obj::mergeBlocks(tokens);
HXLINE(  45)		tokens = ::little::parser::Parser_obj::mergeExpressions(tokens);
HXLINE(  47)		tokens = ::little::parser::Parser_obj::mergePropertyOperations(tokens);
HXLINE(  49)		tokens = ::little::parser::Parser_obj::mergeTypeDecls(tokens);
HXLINE(  51)		tokens = ::little::parser::Parser_obj::mergeComplexStructures(tokens);
HXLINE(  53)		tokens = ::little::parser::Parser_obj::mergeCalls(tokens);
HXLINE(  55)		tokens = ::little::parser::Parser_obj::mergeWrites(tokens);
HXLINE(  57)		tokens = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(tokens);
HXLINE(  59)		tokens = ::little::parser::Parser_obj::mergeNonBlockBodies(tokens);
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			::Array< ::Dynamic> _g1 = ::little::parser::Parser_obj::additionalParsingLevels;
HXDLIN(  61)			while((_g < _g1->length)){
HXLINE(  61)				 ::Dynamic level = _g1->__get(_g);
HXDLIN(  61)				_g = (_g + 1);
HXLINE(  62)				tokens = ( (::Array< ::Dynamic>)(level(tokens)) );
            			}
            		}
HXLINE(  67)		return tokens;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Parser_obj::parse;

::Array< ::Dynamic> Parser_obj::convert(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_73_convert)
HXLINE(  74)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		int line = 1;
HXLINE(  78)		int i = 0;
HXLINE(  79)		while((i < lexerTokens->length)){
HXLINE(  80)			 ::little::lexer::LexerTokens token = lexerTokens->__get(i).StaticCast<  ::little::lexer::LexerTokens >();
HXLINE(  82)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE(  83)					::String name = token->_hx_getString(0);
HXDLIN(  83)					tokens->push(::little::parser::ParserTokens_obj::Identifier(name));
            				}
            				break;
            				case (int)1: {
HXLINE(  84)					::String _hx_char = token->_hx_getString(0);
HXDLIN(  84)					tokens->push(::little::parser::ParserTokens_obj::Sign(_hx_char));
            				}
            				break;
            				case (int)2: {
HXLINE(  85)					::String num = token->_hx_getString(0);
HXLINE(  86)					if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 0)) {
HXLINE(  86)						tokens->push(::little::parser::ParserTokens_obj::Number(num));
            					}
            					else {
HXLINE(  87)						if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 1)) {
HXLINE(  87)							tokens->push(::little::parser::ParserTokens_obj::Decimal(num));
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(  89)					::String value = token->_hx_getString(0);
HXLINE(  90)					if ((value == ::little::Little_obj::keywords->FALSE_VALUE)) {
HXLINE(  90)						tokens->push(::little::parser::ParserTokens_obj::FalseValue_dyn());
            					}
            					else {
HXLINE(  91)						if ((value == ::little::Little_obj::keywords->TRUE_VALUE)) {
HXLINE(  91)							tokens->push(::little::parser::ParserTokens_obj::TrueValue_dyn());
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(  93)					::String string = token->_hx_getString(0);
HXDLIN(  93)					tokens->push(::little::parser::ParserTokens_obj::Characters(string));
            				}
            				break;
            				case (int)5: {
HXLINE(  94)					tokens->push(::little::parser::ParserTokens_obj::NullValue_dyn());
            				}
            				break;
            				case (int)6: {
HXLINE(  96)					tokens->push(::little::parser::ParserTokens_obj::SetLine(line));
HXLINE(  97)					line = (line + 1);
            				}
            				break;
            				case (int)7: {
HXLINE(  99)					tokens->push(::little::parser::ParserTokens_obj::SplitLine_dyn());
            				}
            				break;
            				case (int)8: {
HXLINE( 100)					::String content = token->_hx_getString(0);
HXDLIN( 100)					tokens->push(::little::parser::ParserTokens_obj::Documentation(content));
            				}
            				break;
            			}
HXLINE( 103)			i = (i + 1);
            		}
HXLINE( 106)		return tokens;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,convert,return )

::Array< ::Dynamic> Parser_obj::mergeBlocks(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_117_mergeBlocks)
HXLINE( 119)		if (::hx::IsNull( pre )) {
HXLINE( 119)			return null();
            		}
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if ((pre->length == 1)) {
HXLINE( 120)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 120)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 122)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 124)		int i = 0;
HXLINE( 125)		while((i < pre->length)){
HXLINE( 126)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 127)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 128)					int line = token->_hx_getInt(0);
HXDLIN( 128)					{
HXLINE( 128)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 128)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 129)					::String module = token->_hx_getString(0);
HXDLIN( 129)					{
HXLINE( 129)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 129)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 130)					::little::parser::Parser_obj::nextPart();
HXDLIN( 130)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 156)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 156)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 156)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeBlocks(parts);
HXDLIN( 156)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 157)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 157)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 157)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeBlocks(body);
HXDLIN( 157)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 131)					if ((token->_hx_getString(0) == HX_("{",7b,00,00,00))) {
HXLINE( 132)						int blockStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 133)						::Array< ::Dynamic> blockBody = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()))->init(1,::little::parser::ParserTokens_obj::SetLine(blockStartLine));
HXLINE( 134)						int blockStack = 1;
HXLINE( 135)						while(((i + 1) < pre->length)){
HXLINE( 136)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 137)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("{",7b,00,00,00)))) {
HXLINE( 138)								blockStack = (blockStack + 1);
HXLINE( 139)								blockBody->push(lookahead);
            							}
            							else {
HXLINE( 140)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("}",7d,00,00,00)))) {
HXLINE( 141)									blockStack = (blockStack - 1);
HXLINE( 142)									if ((blockStack == 0)) {
HXLINE( 142)										goto _hx_goto_5;
            									}
HXLINE( 143)									blockBody->push(lookahead);
            								}
            								else {
HXLINE( 144)									blockBody->push(lookahead);
            								}
            							}
HXLINE( 145)							i = (i + 1);
            						}
            						_hx_goto_5:;
HXLINE( 148)						if (((i + 1) == pre->length)) {
HXLINE( 149)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed code block, starting at line ",d6,5b,eb,82) + blockStartLine)),null());
HXLINE( 150)							return null();
            						}
HXLINE( 153)						post->push(::little::parser::ParserTokens_obj::Block(::little::parser::Parser_obj::mergeBlocks(blockBody),null()));
HXLINE( 154)						i = (i + 1);
            					}
            					else {
HXLINE( 159)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 158)					::String name = token->_hx_getString(0);
HXDLIN( 158)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 158)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 158)					{
HXLINE( 158)						int _g = 0;
HXDLIN( 158)						int _g1 = params->length;
HXDLIN( 158)						while((_g < _g1)){
HXLINE( 158)							_g = (_g + 1);
HXDLIN( 158)							int i1 = (_g - 1);
HXDLIN( 158)							{
HXLINE( 158)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 158)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 158)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 159)					post->push(token);
            				}
            			}
HXLINE( 161)			i = (i + 1);
            		}
HXLINE( 164)		::little::parser::Parser_obj::resetLines();
HXLINE( 165)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeBlocks,return )

::Array< ::Dynamic> Parser_obj::mergeExpressions(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_175_mergeExpressions)
HXLINE( 177)		if (::hx::IsNull( pre )) {
HXLINE( 177)			return null();
            		}
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		if ((pre->length == 1)) {
HXLINE( 178)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 178)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 180)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 182)		int i = 0;
HXLINE( 183)		while((i < pre->length)){
HXLINE( 184)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 185)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 186)					int line = token->_hx_getInt(0);
HXDLIN( 186)					{
HXLINE( 186)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 186)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 187)					::String module = token->_hx_getString(0);
HXDLIN( 187)					{
HXLINE( 187)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 187)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 188)					::little::parser::Parser_obj::nextPart();
HXDLIN( 188)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 214)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 214)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 214)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeExpressions(parts);
HXDLIN( 214)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 215)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 215)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 215)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeExpressions(body);
HXDLIN( 215)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 189)					if ((token->_hx_getString(0) == HX_("(",28,00,00,00))) {
HXLINE( 190)						int expressionStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 191)						::Array< ::Dynamic> expressionBody = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 192)						int expressionStack = 1;
HXLINE( 193)						while(((i + 1) < pre->length)){
HXLINE( 194)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 195)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("(",28,00,00,00)))) {
HXLINE( 196)								expressionStack = (expressionStack + 1);
HXLINE( 197)								expressionBody->push(lookahead);
            							}
            							else {
HXLINE( 198)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_(")",29,00,00,00)))) {
HXLINE( 199)									expressionStack = (expressionStack - 1);
HXLINE( 200)									if ((expressionStack == 0)) {
HXLINE( 200)										goto _hx_goto_9;
            									}
HXLINE( 201)									expressionBody->push(lookahead);
            								}
            								else {
HXLINE( 202)									expressionBody->push(lookahead);
            								}
            							}
HXLINE( 203)							i = (i + 1);
            						}
            						_hx_goto_9:;
HXLINE( 206)						if (((i + 1) == pre->length)) {
HXLINE( 207)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed expression, starting at line ",18,03,d6,b2) + expressionStartLine)),null());
HXLINE( 208)							return null();
            						}
HXLINE( 210)						post->push(::little::parser::ParserTokens_obj::Expression(::little::parser::Parser_obj::mergeExpressions(expressionBody),null()));
HXLINE( 211)						i = (i + 1);
            					}
            					else {
HXLINE( 217)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 216)					::String name = token->_hx_getString(0);
HXDLIN( 216)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 216)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 216)					{
HXLINE( 216)						int _g = 0;
HXDLIN( 216)						int _g1 = params->length;
HXDLIN( 216)						while((_g < _g1)){
HXLINE( 216)							_g = (_g + 1);
HXDLIN( 216)							int i1 = (_g - 1);
HXDLIN( 216)							{
HXLINE( 216)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 216)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 216)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 217)					post->push(token);
            				}
            			}
HXLINE( 219)			i = (i + 1);
            		}
HXLINE( 222)		::little::parser::Parser_obj::resetLines();
HXLINE( 223)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeExpressions,return )

::Array< ::Dynamic> Parser_obj::mergePropertyOperations(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_235_mergePropertyOperations)
HXLINE( 237)		if (::hx::IsNull( pre )) {
HXLINE( 237)			return null();
            		}
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if ((pre->length == 1)) {
HXLINE( 238)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 238)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 240)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 241)		int i = 0;
HXLINE( 242)		while((i < pre->length)){
HXLINE( 244)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 245)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 246)					int line = token->_hx_getInt(0);
HXDLIN( 246)					{
HXLINE( 246)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 246)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 247)					::String module = token->_hx_getString(0);
HXDLIN( 247)					{
HXLINE( 247)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 247)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 248)					::little::parser::Parser_obj::nextPart();
HXDLIN( 248)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 311)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 311)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 311)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergePropertyOperations(parts);
HXDLIN( 311)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 310)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 310)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 310)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergePropertyOperations(body);
HXDLIN( 310)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 249)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN) == true)) {
HXLINE( 250)						if ((post->length == 0)) {
HXLINE( 251)							::Array< ::Dynamic> _hx_tmp3 = ::little::Little_obj::runtime->callStack;
HXDLIN( 251)							::String _hx_tmp4 = ::little::parser::Parser_obj::get_module();
HXDLIN( 251)							int _hx_tmp5 = ::little::parser::Parser_obj::get_line();
HXDLIN( 251)							_hx_tmp3->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp4)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp5)));
HXLINE( 252)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of file, block or expression.",af,27,2e,fc)),HX_("Parser",ff,10,1d,22));
HXLINE( 253)							return null();
            						}
HXLINE( 255)						if (((i + 1) >= pre->length)) {
HXLINE( 256)							::Array< ::Dynamic> _hx_tmp6 = ::little::Little_obj::runtime->callStack;
HXDLIN( 256)							::String _hx_tmp7 = ::little::parser::Parser_obj::get_module();
HXDLIN( 256)							int _hx_tmp8 = ::little::parser::Parser_obj::get_line();
HXDLIN( 256)							int _hx_tmp9 = ::little::parser::Parser_obj::linePart;
HXDLIN( 256)							_hx_tmp6->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp9)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp7)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,post->pop().StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp8)));
HXLINE( 257)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the end of file, block or expression.",e8,e8,19,3f)),HX_("Parser",ff,10,1d,22));
HXLINE( 258)							return null();
            						}
HXLINE( 260)						 ::little::parser::ParserTokens lookbehind = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 261)						if (::hx::IsNull( lookbehind )) {
HXLINE( 305)							i = (i + 1);
HXDLIN( 305)							 ::little::parser::ParserTokens field = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 306)							post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field));
            						}
            						else {
HXLINE( 261)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 262)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp10 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp11 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp12 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp13 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp10->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp13)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp11)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp12)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 262)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp14 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp15 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp16 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp17 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp14->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp17)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp15)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp16)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)12: {
HXLINE( 267)									::Array< ::Dynamic> _g2 = lookbehind->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 267)									 ::little::parser::ParserTokens _g3 = lookbehind->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 267)									{
HXLINE( 268)										i = (i + 1);
HXDLIN( 268)										 ::little::parser::ParserTokens field1 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 274)										::Array< ::Dynamic> beforePropertyCalls = ::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind);
HXLINE( 275)										while((post->length > 0)){
HXLINE( 276)											 ::little::parser::ParserTokens last = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 277)											if (::hx::IsNull( last )) {
HXLINE( 288)												post->push(last);
HXLINE( 289)												goto _hx_goto_13;
            											}
            											else {
HXLINE( 277)												switch((int)(last->_hx_getIndex())){
            													case (int)8: {
HXLINE( 278)														::String _g4 = last->_hx_getString(0);
HXLINE( 279)														beforePropertyCalls->push(last);
HXLINE( 280)														goto _hx_goto_13;
            													}
            													break;
            													case (int)12: {
HXLINE( 286)														::Array< ::Dynamic> parts1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 286)														 ::little::parser::ParserTokens type2 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 286)														::Array< ::Dynamic> _hx_tmp22 = ::little::parser::Parser_obj::mergePropertyOperations(parts1);
HXDLIN( 286)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp22,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            													}
            													break;
            													case (int)13: {
HXLINE( 282)														::Array< ::Dynamic> body1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 282)														 ::little::parser::ParserTokens type3 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 283)														::Array< ::Dynamic> _hx_tmp23 = ::little::parser::Parser_obj::mergePropertyOperations(body1);
HXDLIN( 283)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Block(_hx_tmp23,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 284)														goto _hx_goto_13;
            													}
            													break;
            													case (int)15: {
HXLINE( 278)														 ::little::parser::ParserTokens _g5 = last->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 278)														 ::little::parser::ParserTokens _g6 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 279)														beforePropertyCalls->push(last);
HXLINE( 280)														goto _hx_goto_13;
            													}
            													break;
            													default:{
HXLINE( 288)														post->push(last);
HXLINE( 289)														goto _hx_goto_13;
            													}
            												}
            											}
            										}
            										_hx_goto_13:;
HXLINE( 294)										 ::little::parser::ParserTokens parent = lookbehind;
HXLINE( 296)										if ((beforePropertyCalls->length > 0)) {
HXLINE( 297)											parent = beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 298)											while((beforePropertyCalls->length > 0)){
HXLINE( 299)												parent = ::little::parser::ParserTokens_obj::FunctionCall(parent,beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >());
            											}
            										}
HXLINE( 302)										post->push(::little::parser::ParserTokens_obj::PropertyAccess(parent,field1));
            									}
            								}
            								break;
            								default:{
HXLINE( 305)									i = (i + 1);
HXDLIN( 305)									 ::little::parser::ParserTokens field2 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 306)									post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 313)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 312)					::String name = token->_hx_getString(0);
HXDLIN( 312)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 312)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 312)					{
HXLINE( 312)						int _g7 = 0;
HXDLIN( 312)						int _g8 = params->length;
HXDLIN( 312)						while((_g7 < _g8)){
HXLINE( 312)							_g7 = (_g7 + 1);
HXDLIN( 312)							int i1 = (_g7 - 1);
HXDLIN( 312)							{
HXLINE( 312)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 312)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 312)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 313)					post->push(token);
            				}
            			}
HXLINE( 315)			i = (i + 1);
            		}
HXLINE( 318)		::little::parser::Parser_obj::resetLines();
HXLINE( 319)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergePropertyOperations,return )

::Array< ::Dynamic> Parser_obj::mergeTypeDecls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_325_mergeTypeDecls)
HXLINE( 327)		if (::hx::IsNull( pre )) {
HXLINE( 327)			return null();
            		}
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if ((pre->length == 1)) {
HXLINE( 328)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 328)			_hx_tmp = false;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 328)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 330)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 332)		int i = 0;
HXLINE( 333)		while((i < pre->length)){
HXLINE( 334)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 335)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 336)					int line = token->_hx_getInt(0);
HXDLIN( 336)					{
HXLINE( 336)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 336)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 337)					::String module = token->_hx_getString(0);
HXDLIN( 337)					{
HXLINE( 337)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 337)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 338)					::little::parser::Parser_obj::nextPart();
HXDLIN( 338)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 339)					::String word = token->_hx_getString(0);
HXLINE( 340)					bool _hx_tmp1;
HXDLIN( 340)					if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 340)						_hx_tmp1 = ((i + 1) < pre->length);
            					}
            					else {
HXLINE( 340)						_hx_tmp1 = false;
            					}
HXDLIN( 340)					if (_hx_tmp1) {
HXLINE( 341)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 342)						post->push(::little::parser::ParserTokens_obj::TypeDeclaration(null(),::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 343)						i = (i + 1);
            					}
            					else {
HXLINE( 344)						if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 346)							if (((i + 1) == pre->length)) {
HXLINE( 347)								::Array< ::Dynamic> _hx_tmp2 = ::little::Little_obj::runtime->callStack;
HXDLIN( 347)								::String _hx_tmp3 = ::little::parser::Parser_obj::get_module();
HXDLIN( 347)								int _hx_tmp4 = ::little::parser::Parser_obj::get_line();
HXDLIN( 347)								_hx_tmp2->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp3)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp4)));
HXLINE( 348)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Incomplete type declaration, make sure to input a type after the `",fe,76,87,0d) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_("`.",ce,53,00,00))),null());
HXLINE( 349)								return null();
            							}
            						}
            						else {
HXLINE( 352)							post->push(token);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 355)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 355)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 355)					::Array< ::Dynamic> _hx_tmp5 = ::little::parser::Parser_obj::mergeTypeDecls(parts);
HXDLIN( 355)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp5,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 356)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 356)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 356)					::Array< ::Dynamic> _hx_tmp6 = ::little::parser::Parser_obj::mergeTypeDecls(body);
HXDLIN( 356)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp6,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 357)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp7,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 358)					::String name1 = token->_hx_getString(0);
HXDLIN( 358)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 358)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 358)					{
HXLINE( 358)						int _g = 0;
HXDLIN( 358)						int _g1 = params->length;
HXDLIN( 358)						while((_g < _g1)){
HXLINE( 358)							_g = (_g + 1);
HXDLIN( 358)							int i1 = (_g - 1);
HXDLIN( 358)							{
HXLINE( 358)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 358)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 358)					post->push(::little::parser::ParserTokens_obj::Custom(name1,result));
            				}
            				break;
            				default:{
HXLINE( 359)					post->push(token);
            				}
            			}
HXLINE( 361)			i = (i + 1);
            		}
HXLINE( 364)		::little::parser::Parser_obj::resetLines();
HXLINE( 365)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeTypeDecls,return )

::Array< ::Dynamic> Parser_obj::mergeComplexStructures(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_375_mergeComplexStructures)
HXLINE( 377)		if (::hx::IsNull( pre )) {
HXLINE( 377)			return null();
            		}
HXLINE( 378)		bool _hx_tmp;
HXDLIN( 378)		if ((pre->length == 1)) {
HXLINE( 378)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 378)			_hx_tmp = false;
            		}
HXDLIN( 378)		if (_hx_tmp) {
HXLINE( 378)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 380)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 382)		 ::little::parser::ParserTokens currentDoc = null();
HXLINE( 383)		int i = 0;
HXLINE( 384)		while((i < pre->length)){
HXLINE( 385)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 387)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 388)					int line = token->_hx_getInt(0);
HXDLIN( 388)					{
HXLINE( 388)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 388)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 389)					::String module = token->_hx_getString(0);
HXDLIN( 389)					{
HXLINE( 389)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 389)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 390)					::little::parser::Parser_obj::nextPart();
HXDLIN( 390)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 550)					::String _g = token->_hx_getString(0);
HXLINE( 392)					{
HXLINE( 525)						bool _hx_tmp1;
HXLINE( 452)						bool _hx_tmp2;
HXLINE( 392)						if (((_g == ::little::Little_obj::keywords->VARIABLE_DECLARATION) == true)) {
HXLINE( 393)							i = (i + 1);
HXLINE( 394)							if ((i >= pre->length)) {
HXLINE( 395)								::Array< ::Dynamic> _hx_tmp3 = ::little::Little_obj::runtime->callStack;
HXDLIN( 395)								::String _hx_tmp4 = ::little::parser::Parser_obj::get_module();
HXDLIN( 395)								int _hx_tmp5 = ::little::parser::Parser_obj::get_line();
HXDLIN( 395)								_hx_tmp3->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp4)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp5)));
HXLINE( 396)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
HXLINE( 397)								return null();
            							}
HXLINE( 400)							 ::little::parser::ParserTokens name = null();
HXLINE( 401)							 ::little::parser::ParserTokens type = null();
HXLINE( 403)							while((i < pre->length)){
HXLINE( 404)								 ::little::parser::ParserTokens lookahead = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 405)								switch((int)(lookahead->_hx_getIndex())){
            									case (int)0: {
HXLINE( 415)										int _g1 = lookahead->_hx_getInt(0);
HXDLIN( 415)										i = (i - 1);
HXDLIN( 415)										goto _hx_goto_21;
            									}
            									break;
            									case (int)1: {
HXLINE( 415)										::String _g2 = lookahead->_hx_getString(0);
HXDLIN( 415)										i = (i - 1);
HXDLIN( 415)										goto _hx_goto_21;
            									}
            									break;
            									case (int)2: {
HXLINE( 415)										i = (i - 1);
HXDLIN( 415)										goto _hx_goto_21;
            									}
            									break;
            									case (int)9: {
HXLINE( 406)										 ::little::parser::ParserTokens _g3 = lookahead->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 406)										 ::little::parser::ParserTokens typeToken = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 407)										if (::hx::IsNull( name )) {
HXLINE( 408)											::Array< ::Dynamic> _hx_tmp6 = ::little::Little_obj::runtime->callStack;
HXDLIN( 408)											::String _hx_tmp7 = ::little::parser::Parser_obj::get_module();
HXDLIN( 408)											int _hx_tmp8 = ::little::parser::Parser_obj::get_line();
HXDLIN( 408)											int _hx_tmp9 = ::little::parser::Parser_obj::linePart;
HXDLIN( 408)											_hx_tmp6->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp9)
            												->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp7)
            												->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            												->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp8)));
HXLINE( 409)											::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name before type declaration.",64,1e,a6,f5)),HX_("Parser",ff,10,1d,22));
HXLINE( 410)											return null();
            										}
HXLINE( 412)										type = typeToken;
HXLINE( 413)										goto _hx_goto_21;
            									}
            									break;
            									case (int)12: {
HXLINE( 424)										::Array< ::Dynamic> body = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 424)										 ::little::parser::ParserTokens type1 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 425)										if (::hx::IsNull( name )) {
HXLINE( 425)											::Array< ::Dynamic> name1 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 425)											name = ::little::parser::ParserTokens_obj::Expression(name1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 426)											if (::hx::IsNull( type1 )) {
HXLINE( 426)												::Array< ::Dynamic> type2 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 426)												type1 = ::little::parser::ParserTokens_obj::Expression(type2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 428)												i = (i - 1);
HXLINE( 429)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)13: {
HXLINE( 416)										::Array< ::Dynamic> body1 = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 416)										 ::little::parser::ParserTokens type3 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 417)										if (::hx::IsNull( name )) {
HXLINE( 417)											::Array< ::Dynamic> name2 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 417)											name = ::little::parser::ParserTokens_obj::Block(name2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 418)											if (::hx::IsNull( type3 )) {
HXLINE( 418)												::Array< ::Dynamic> type4 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 418)												type3 = ::little::parser::ParserTokens_obj::Block(type4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 420)												i = (i - 1);
HXLINE( 421)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)16: {
HXLINE( 415)										if ((lookahead->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 415)											i = (i - 1);
HXDLIN( 415)											goto _hx_goto_21;
            										}
            										else {
HXLINE( 433)											if (::hx::IsNull( name )) {
HXLINE( 433)												name = lookahead;
            											}
            											else {
HXLINE( 434)												bool _hx_tmp10;
HXDLIN( 434)												if (::hx::IsNull( type )) {
HXLINE( 434)													::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 434)													::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 434)													{
HXLINE( 434)														int _g4 = 0;
HXDLIN( 434)														int _g5 = _this->length;
HXDLIN( 434)														while((_g4 < _g5)){
HXLINE( 434)															_g4 = (_g4 + 1);
HXDLIN( 434)															int i1 = (_g4 - 1);
HXDLIN( 434)															{
HXLINE( 434)																::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 434)																result->__unsafe_set(i1,inValue);
            															}
            														}
            													}
HXDLIN( 434)													_hx_tmp10 = result->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            												}
            												else {
HXLINE( 434)													_hx_tmp10 = false;
            												}
HXDLIN( 434)												if (_hx_tmp10) {
HXLINE( 434)													type = lookahead;
            												}
            												else {
HXLINE( 436)													i = (i - 1);
HXLINE( 437)													goto _hx_goto_21;
            												}
            											}
            										}
            									}
            									break;
            									default:{
HXLINE( 433)										if (::hx::IsNull( name )) {
HXLINE( 433)											name = lookahead;
            										}
            										else {
HXLINE( 434)											bool _hx_tmp11;
HXDLIN( 434)											if (::hx::IsNull( type )) {
HXLINE( 434)												::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 434)												::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 434)												{
HXLINE( 434)													int _g6 = 0;
HXDLIN( 434)													int _g7 = _this1->length;
HXDLIN( 434)													while((_g6 < _g7)){
HXLINE( 434)														_g6 = (_g6 + 1);
HXDLIN( 434)														int i2 = (_g6 - 1);
HXDLIN( 434)														{
HXLINE( 434)															::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 434)															result1->__unsafe_set(i2,inValue1);
            														}
            													}
            												}
HXDLIN( 434)												_hx_tmp11 = result1->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            											}
            											else {
HXLINE( 434)												_hx_tmp11 = false;
            											}
HXDLIN( 434)											if (_hx_tmp11) {
HXLINE( 434)												type = lookahead;
            											}
            											else {
HXLINE( 436)												i = (i - 1);
HXLINE( 437)												goto _hx_goto_21;
            											}
            										}
            									}
            								}
HXLINE( 441)								i = (i + 1);
            							}
            							_hx_goto_21:;
HXLINE( 443)							if (::hx::IsNull( name )) {
HXLINE( 444)								::Array< ::Dynamic> _hx_tmp12 = ::little::Little_obj::runtime->callStack;
HXDLIN( 444)								::String _hx_tmp13 = ::little::parser::Parser_obj::get_module();
HXDLIN( 444)								int _hx_tmp14 = ::little::parser::Parser_obj::get_line();
HXDLIN( 444)								_hx_tmp12->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp13)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp14)));
HXLINE( 445)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
HXLINE( 446)								return null();
            							}
HXLINE( 449)							post->push(::little::parser::ParserTokens_obj::Variable(name,type,currentDoc));
HXLINE( 450)							currentDoc = null();
            						}
            						else {
HXLINE( 452)							_hx_tmp2 = (_g == ::little::Little_obj::keywords->FUNCTION_DECLARATION);
HXDLIN( 452)							if ((_hx_tmp2 == true)) {
HXLINE( 453)								i = (i + 1);
HXLINE( 454)								if ((i >= pre->length)) {
HXLINE( 455)									::Array< ::Dynamic> _hx_tmp15 = ::little::Little_obj::runtime->callStack;
HXDLIN( 455)									::String _hx_tmp16 = ::little::parser::Parser_obj::get_module();
HXDLIN( 455)									int _hx_tmp17 = ::little::parser::Parser_obj::get_line();
HXDLIN( 455)									_hx_tmp15->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp16)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp17)));
HXLINE( 456)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name, function is cut off by the end of the file, block or expression.",01,f6,a5,95)),HX_("Parser",ff,10,1d,22));
HXLINE( 457)									return null();
            								}
HXLINE( 459)								if (((i + 1) >= pre->length)) {
HXLINE( 460)									::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 460)									::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 460)									int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 460)									int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 460)									_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 461)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameter body, function is cut off by the end of the file, block or expression.",2f,91,cb,1a)),HX_("Parser",ff,10,1d,22));
HXLINE( 462)									return null();
            								}
HXLINE( 465)								 ::little::parser::ParserTokens name3 = null();
HXLINE( 466)								 ::little::parser::ParserTokens params = null();
HXLINE( 467)								 ::little::parser::ParserTokens type5 = null();
HXLINE( 468)								while((i < pre->length)){
HXLINE( 469)									 ::little::parser::ParserTokens lookahead1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 470)									switch((int)(lookahead1->_hx_getIndex())){
            										case (int)9: {
HXLINE( 471)											 ::little::parser::ParserTokens _g8 = lookahead1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 471)											 ::little::parser::ParserTokens typeToken1 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 472)											if (::hx::IsNull( name3 )) {
HXLINE( 473)												::Array< ::Dynamic> _hx_tmp22 = ::little::Little_obj::runtime->callStack;
HXDLIN( 473)												::String _hx_tmp23 = ::little::parser::Parser_obj::get_module();
HXDLIN( 473)												int _hx_tmp24 = ::little::parser::Parser_obj::get_line();
HXDLIN( 473)												int _hx_tmp25 = ::little::parser::Parser_obj::linePart;
HXDLIN( 473)												_hx_tmp22->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp25)
            													->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp23)
            													->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            													->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp24)));
HXLINE( 474)												::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters before type declaration.",7f,98,8f,9a)),HX_("Parser",ff,10,1d,22));
HXLINE( 475)												return null();
            											}
            											else {
HXLINE( 477)												if (::hx::IsNull( params )) {
HXLINE( 478)													::Array< ::Dynamic> _hx_tmp26 = ::little::Little_obj::runtime->callStack;
HXDLIN( 478)													::String _hx_tmp27 = ::little::parser::Parser_obj::get_module();
HXDLIN( 478)													int _hx_tmp28 = ::little::parser::Parser_obj::get_line();
HXDLIN( 478)													int _hx_tmp29 = ::little::parser::Parser_obj::linePart;
HXDLIN( 478)													 ::little::interpreter::InterpTokens _hx_tmp30 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 478)													_hx_tmp26->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            														->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp29)
            														->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp27)
            														->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(_hx_tmp30,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            														->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp28)));
HXLINE( 479)													::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters before type declaration.",81,b3,5a,87)),HX_("Parser",ff,10,1d,22));
HXLINE( 480)													return null();
            												}
            											}
HXLINE( 482)											type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 483)											goto _hx_goto_24;
            										}
            										break;
            										case (int)12: {
HXLINE( 494)											::Array< ::Dynamic> body2 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 494)											 ::little::parser::ParserTokens type6 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 495)											if (::hx::IsNull( name3 )) {
HXLINE( 495)												::Array< ::Dynamic> name4 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 495)												name3 = ::little::parser::ParserTokens_obj::Expression(name4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 496)												if (::hx::IsNull( params )) {
HXLINE( 496)													::Array< ::Dynamic> params1 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 496)													params = ::little::parser::ParserTokens_obj::Expression(params1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 497)													if (::hx::IsNull( type6 )) {
HXLINE( 497)														::Array< ::Dynamic> type7 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 497)														type6 = ::little::parser::ParserTokens_obj::Expression(type7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 499)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            										break;
            										case (int)13: {
HXLINE( 486)											::Array< ::Dynamic> body3 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 486)											 ::little::parser::ParserTokens type8 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 487)											if (::hx::IsNull( name3 )) {
HXLINE( 487)												::Array< ::Dynamic> name5 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 487)												name3 = ::little::parser::ParserTokens_obj::Block(name5,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 488)												if (::hx::IsNull( params )) {
HXLINE( 488)													::Array< ::Dynamic> params2 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 488)													params = ::little::parser::ParserTokens_obj::Block(params2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 489)													if (::hx::IsNull( type8 )) {
HXLINE( 489)														::Array< ::Dynamic> type9 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 489)														type8 = ::little::parser::ParserTokens_obj::Block(type9,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 491)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            										break;
            										case (int)16: {
HXLINE( 485)											if ((lookahead1->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 485)												i = (i - 1);
HXDLIN( 485)												goto _hx_goto_24;
            											}
            											else {
HXLINE( 503)												if (::hx::IsNull( name3 )) {
HXLINE( 503)													name3 = lookahead1;
            												}
            												else {
HXLINE( 504)													if (::hx::IsNull( params )) {
HXLINE( 504)														params = lookahead1;
            													}
            													else {
HXLINE( 505)														bool _hx_tmp31;
HXDLIN( 505)														if (::hx::IsNull( type5 )) {
HXLINE( 505)															_hx_tmp31 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            														}
            														else {
HXLINE( 505)															_hx_tmp31 = false;
            														}
HXDLIN( 505)														if (_hx_tmp31) {
HXLINE( 505)															type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            														}
            														else {
HXLINE( 507)															goto _hx_goto_24;
            														}
            													}
            												}
            											}
            										}
            										break;
            										default:{
HXLINE( 503)											if (::hx::IsNull( name3 )) {
HXLINE( 503)												name3 = lookahead1;
            											}
            											else {
HXLINE( 504)												if (::hx::IsNull( params )) {
HXLINE( 504)													params = lookahead1;
            												}
            												else {
HXLINE( 505)													bool _hx_tmp32;
HXDLIN( 505)													if (::hx::IsNull( type5 )) {
HXLINE( 505)														_hx_tmp32 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            													}
            													else {
HXLINE( 505)														_hx_tmp32 = false;
            													}
HXDLIN( 505)													if (_hx_tmp32) {
HXLINE( 505)														type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            													}
            													else {
HXLINE( 507)														goto _hx_goto_24;
            													}
            												}
            											}
            										}
            									}
HXLINE( 511)									i = (i + 1);
            								}
            								_hx_goto_24:;
HXLINE( 513)								if (::hx::IsNull( name3 )) {
HXLINE( 514)									::Array< ::Dynamic> _hx_tmp33 = ::little::Little_obj::runtime->callStack;
HXDLIN( 514)									::String _hx_tmp34 = ::little::parser::Parser_obj::get_module();
HXDLIN( 514)									int _hx_tmp35 = ::little::parser::Parser_obj::get_line();
HXDLIN( 514)									_hx_tmp33->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp34)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp35)));
HXLINE( 515)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters, function is cut off by the end of the file, block or expression.",e2,79,3a,ec)),HX_("Parser",ff,10,1d,22));
HXLINE( 516)									return null();
            								}
            								else {
HXLINE( 517)									if (::hx::IsNull( params )) {
HXLINE( 518)										::Array< ::Dynamic> _hx_tmp36 = ::little::Little_obj::runtime->callStack;
HXDLIN( 518)										::String _hx_tmp37 = ::little::parser::Parser_obj::get_module();
HXDLIN( 518)										int _hx_tmp38 = ::little::parser::Parser_obj::get_line();
HXDLIN( 518)										int _hx_tmp39 = ::little::parser::Parser_obj::linePart;
HXDLIN( 518)										_hx_tmp36->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp39)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp37)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null(),null(),null()))
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp38)));
HXLINE( 519)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters, function is cut off by the end of the file, block or expression.",a0,a6,fc,8b)),HX_("Parser",ff,10,1d,22));
HXLINE( 520)										return null();
            									}
            								}
HXLINE( 522)								post->push(::little::parser::ParserTokens_obj::Function(name3,params,type5,currentDoc));
HXLINE( 523)								currentDoc = null();
            							}
            							else {
HXLINE( 525)								_hx_tmp1 = (_g == ::little::Little_obj::keywords->FUNCTION_RETURN);
HXDLIN( 525)								if ((_hx_tmp1 == true)) {
HXLINE( 526)									i = (i + 1);
HXLINE( 527)									if ((i >= pre->length)) {
HXLINE( 528)										::Array< ::Dynamic> _hx_tmp40 = ::little::Little_obj::runtime->callStack;
HXDLIN( 528)										::String _hx_tmp41 = ::little::parser::Parser_obj::get_module();
HXDLIN( 528)										int _hx_tmp42 = ::little::parser::Parser_obj::get_line();
HXDLIN( 528)										_hx_tmp40->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp41)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null()))
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp42)));
HXLINE( 529)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing return value, value is cut off by the end of the file, block or expression.",fe,14,08,44)),HX_("Parser",ff,10,1d,22));
HXLINE( 530)										return null();
            									}
HXLINE( 533)									::Array< ::Dynamic> valueToReturn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 534)									while((i < pre->length)){
HXLINE( 535)										 ::little::parser::ParserTokens lookahead2 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 536)										switch((int)(lookahead2->_hx_getIndex())){
            											case (int)0: {
HXLINE( 537)												int _g9 = lookahead2->_hx_getInt(0);
HXDLIN( 537)												i = (i - 1);
HXDLIN( 537)												goto _hx_goto_25;
            											}
            											break;
            											case (int)1: {
HXLINE( 537)												::String _g10 = lookahead2->_hx_getString(0);
HXDLIN( 537)												i = (i - 1);
HXDLIN( 537)												goto _hx_goto_25;
            											}
            											break;
            											case (int)2: {
HXLINE( 537)												i = (i - 1);
HXDLIN( 537)												goto _hx_goto_25;
            											}
            											break;
            											case (int)12: {
HXLINE( 541)												::Array< ::Dynamic> body4 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 541)												 ::little::parser::ParserTokens type10 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 542)												::Array< ::Dynamic> _hx_tmp43 = ::little::parser::Parser_obj::mergeComplexStructures(body4);
HXDLIN( 542)												valueToReturn->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp43,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type10))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											case (int)13: {
HXLINE( 538)												::Array< ::Dynamic> body5 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 538)												 ::little::parser::ParserTokens type11 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 539)												::Array< ::Dynamic> _hx_tmp44 = ::little::parser::Parser_obj::mergeComplexStructures(body5);
HXDLIN( 539)												valueToReturn->push(::little::parser::ParserTokens_obj::Block(_hx_tmp44,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type11))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											default:{
HXLINE( 544)												valueToReturn->push(lookahead2);
            											}
            										}
HXLINE( 546)										i = (i + 1);
            									}
            									_hx_goto_25:;
HXLINE( 548)									 ::little::parser::ParserTokens _hx_tmp45;
HXDLIN( 548)									if ((valueToReturn->length == 1)) {
HXLINE( 548)										_hx_tmp45 = valueToReturn->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            									}
            									else {
HXLINE( 548)										_hx_tmp45 = ::little::parser::ParserTokens_obj::Expression(valueToReturn->copy(),null());
            									}
HXDLIN( 548)									post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp45,null()));
            								}
            								else {
HXLINE( 551)									i = (i + 1);
HXLINE( 553)									 ::little::parser::ParserTokens name6 = ::little::parser::ParserTokens_obj::Identifier(::Type_obj::enumParameters(token)->__get(0));
HXLINE( 554)									 ::little::parser::ParserTokens exp = null();
HXLINE( 555)									 ::little::parser::ParserTokens body6 = null();
HXLINE( 557)									int fallback = (i - 1);
HXLINE( 559)									while(::hx::IsNull( body6 )){
HXLINE( 561)										if ((i >= pre->length)) {
HXLINE( 562)											i = fallback;
HXLINE( 563)											goto _hx_goto_26;
            										}
HXLINE( 565)										 ::little::parser::ParserTokens lookahead3 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 566)										switch((int)(lookahead3->_hx_getIndex())){
            											case (int)0: {
HXLINE( 567)												int _g11 = lookahead3->_hx_getInt(0);
HXLINE( 568)												bool _hx_tmp46;
HXDLIN( 568)												if (::hx::IsNotNull( exp )) {
HXLINE( 568)													_hx_tmp46 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 568)													_hx_tmp46 = false;
            												}
HXDLIN( 568)												if (_hx_tmp46) {
HXLINE( 568)													goto _hx_goto_26;
            												}
HXLINE( 569)												i = fallback;
HXLINE( 570)												goto _hx_goto_26;
            											}
            											break;
            											case (int)1: {
HXLINE( 567)												::String _g12 = lookahead3->_hx_getString(0);
HXLINE( 568)												bool _hx_tmp47;
HXDLIN( 568)												if (::hx::IsNotNull( exp )) {
HXLINE( 568)													_hx_tmp47 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 568)													_hx_tmp47 = false;
            												}
HXDLIN( 568)												if (_hx_tmp47) {
HXLINE( 568)													goto _hx_goto_26;
            												}
HXLINE( 569)												i = fallback;
HXLINE( 570)												goto _hx_goto_26;
            											}
            											break;
            											case (int)2: {
HXLINE( 568)												bool _hx_tmp48;
HXDLIN( 568)												if (::hx::IsNotNull( exp )) {
HXLINE( 568)													_hx_tmp48 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 568)													_hx_tmp48 = false;
            												}
HXDLIN( 568)												if (_hx_tmp48) {
HXLINE( 568)													goto _hx_goto_26;
            												}
HXLINE( 569)												i = fallback;
HXLINE( 570)												goto _hx_goto_26;
            											}
            											break;
            											case (int)12: {
HXLINE( 579)												::Array< ::Dynamic> parts = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 579)												 ::little::parser::ParserTokens type12 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 580)												if (::hx::IsNull( exp )) {
HXLINE( 580)													exp = ::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeComplexStructures(parts));
            												}
            												else {
HXLINE( 581)													if (::hx::IsNull( body6 )) {
HXLINE( 582)														i = fallback;
HXLINE( 583)														goto _hx_goto_26;
            													}
            												}
            											}
            											break;
            											case (int)13: {
HXLINE( 572)												::Array< ::Dynamic> b = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 572)												 ::little::parser::ParserTokens type13 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 573)												if (::hx::IsNull( exp )) {
HXLINE( 574)													i = fallback;
HXLINE( 575)													goto _hx_goto_26;
            												}
            												else {
HXLINE( 577)													if (::hx::IsNull( body6 )) {
HXLINE( 577)														::Array< ::Dynamic> body7 = ::little::parser::Parser_obj::mergeComplexStructures(b);
HXDLIN( 577)														body6 = ::little::parser::ParserTokens_obj::Block(body7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type13))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            												}
            											}
            											break;
            											default:{
HXLINE( 587)												bool _hx_tmp49;
HXDLIN( 587)												if (::hx::IsNotNull( exp )) {
HXLINE( 587)													_hx_tmp49 = ::hx::IsNull( body6 );
            												}
            												else {
HXLINE( 587)													_hx_tmp49 = true;
            												}
HXDLIN( 587)												if (_hx_tmp49) {
HXLINE( 588)													i = fallback;
HXLINE( 589)													goto _hx_goto_26;
            												}
            											}
            										}
HXLINE( 593)										i = (i + 1);
            									}
            									_hx_goto_26:;
HXLINE( 595)									if ((i == fallback)) {
HXLINE( 596)										post->push(token);
            									}
            									else {
HXLINE( 598)										i = (i - 1);
HXLINE( 599)										post->push(::little::parser::ParserTokens_obj::ConditionCall(name6,exp,body6));
HXLINE( 600)										currentDoc = null();
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 603)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 603)					 ::little::parser::ParserTokens type14 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 603)					::Array< ::Dynamic> _hx_tmp50 = ::little::parser::Parser_obj::mergeComplexStructures(parts1);
HXDLIN( 603)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp50,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type14))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 604)					::Array< ::Dynamic> body8 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 604)					 ::little::parser::ParserTokens type15 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 604)					::Array< ::Dynamic> _hx_tmp51 = ::little::parser::Parser_obj::mergeComplexStructures(body8);
HXDLIN( 604)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp51,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type15))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 605)					 ::little::parser::ParserTokens name7 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 605)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 605)					 ::little::parser::ParserTokens _hx_tmp52 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,name7))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 605)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp52,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)20: {
HXLINE( 391)					::String doc = token->_hx_getString(0);
HXDLIN( 391)					currentDoc = token;
            				}
            				break;
            				case (int)25: {
HXLINE( 606)					::String name8 = token->_hx_getString(0);
HXDLIN( 606)					::Array< ::Dynamic> params3 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 606)					::Array< ::Dynamic> result2 = ::Array_obj< ::Dynamic>::__new(params3->length);
HXDLIN( 606)					{
HXLINE( 606)						int _g13 = 0;
HXDLIN( 606)						int _g14 = params3->length;
HXDLIN( 606)						while((_g13 < _g14)){
HXLINE( 606)							_g13 = (_g13 + 1);
HXDLIN( 606)							int i3 = (_g13 - 1);
HXDLIN( 606)							{
HXLINE( 606)								 ::little::parser::ParserTokens inValue2 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params3,i3)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 606)								result2->__unsafe_set(i3,inValue2);
            							}
            						}
            					}
HXDLIN( 606)					post->push(::little::parser::ParserTokens_obj::Custom(name8,result2));
            				}
            				break;
            				default:{
HXLINE( 607)					post->push(token);
            				}
            			}
HXLINE( 609)			i = (i + 1);
            		}
HXLINE( 612)		::little::parser::Parser_obj::resetLines();
HXLINE( 613)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeComplexStructures,return )

::Array< ::Dynamic> Parser_obj::mergeCalls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_619_mergeCalls)
HXLINE( 621)		if (::hx::IsNull( pre )) {
HXLINE( 621)			return null();
            		}
HXLINE( 622)		bool _hx_tmp;
HXDLIN( 622)		if ((pre->length == 1)) {
HXLINE( 622)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 622)			_hx_tmp = false;
            		}
HXDLIN( 622)		if (_hx_tmp) {
HXLINE( 622)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 624)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 626)		int i = 0;
HXLINE( 627)		while((i < pre->length)){
HXLINE( 629)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 630)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 631)					int line = token->_hx_getInt(0);
HXDLIN( 631)					{
HXLINE( 631)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 631)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 632)					::String module = token->_hx_getString(0);
HXDLIN( 632)					{
HXLINE( 632)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 632)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 633)					::little::parser::Parser_obj::nextPart();
HXDLIN( 633)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 651)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 652)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 652)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 653)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 654)					 ::little::parser::ParserTokens value = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 654)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 654)					 ::little::parser::ParserTokens _hx_tmp8 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 654)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp8,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 634)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 634)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 634)					{
HXLINE( 635)						parts = ::little::parser::Parser_obj::mergeCalls(parts);
HXLINE( 636)						if ((i == 0)) {
HXLINE( 637)							post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            						}
            						else {
HXLINE( 639)							 ::little::parser::ParserTokens lookbehind = pre->__get((i - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 640)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 641)									int _g = lookbehind->_hx_getInt(0);
HXDLIN( 641)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)1: {
HXLINE( 641)									::String _g1 = lookbehind->_hx_getString(0);
HXDLIN( 641)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)2: {
HXLINE( 641)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)16: {
HXLINE( 641)									::String _g2 = lookbehind->_hx_getString(0);
HXDLIN( 641)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								default:{
HXLINE( 643)									 ::little::parser::ParserTokens previous = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 644)									token = ::little::parser::ParserTokens_obj::PartArray(parts);
HXLINE( 645)									post->push(::little::parser::ParserTokens_obj::FunctionCall(previous,token));
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 650)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 650)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 650)					::Array< ::Dynamic> _hx_tmp9 = ::little::parser::Parser_obj::mergeCalls(body1);
HXDLIN( 650)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp9,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 656)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 656)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeCalls(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 655)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 655)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 655)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 655)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp10,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 657)					::String name4 = token->_hx_getString(0);
HXDLIN( 657)					::Array< ::Dynamic> params1 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 657)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params1->length);
HXDLIN( 657)					{
HXLINE( 657)						int _g3 = 0;
HXDLIN( 657)						int _g4 = params1->length;
HXDLIN( 657)						while((_g3 < _g4)){
HXLINE( 657)							_g3 = (_g3 + 1);
HXDLIN( 657)							int i1 = (_g3 - 1);
HXDLIN( 657)							{
HXLINE( 657)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params1,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 657)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 657)					post->push(::little::parser::ParserTokens_obj::Custom(name4,result));
            				}
            				break;
            				default:{
HXLINE( 658)					post->push(token);
            				}
            			}
HXLINE( 660)			i = (i + 1);
            		}
HXLINE( 663)		::little::parser::Parser_obj::resetLines();
HXLINE( 664)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeCalls,return )

::Array< ::Dynamic> Parser_obj::mergeWrites(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_670_mergeWrites)
HXLINE( 671)		if (::hx::IsNull( pre )) {
HXLINE( 671)			return null();
            		}
HXLINE( 672)		bool _hx_tmp;
HXDLIN( 672)		if ((pre->length == 1)) {
HXLINE( 672)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 672)			_hx_tmp = false;
            		}
HXDLIN( 672)		if (_hx_tmp) {
HXLINE( 672)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 674)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 676)		int i = 0;
HXLINE( 677)		while((i < pre->length)){
HXLINE( 678)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 679)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 680)					int line = token->_hx_getInt(0);
HXDLIN( 680)					{
HXLINE( 681)						::little::parser::Parser_obj::setLine(line);
HXLINE( 682)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 684)					::String module = token->_hx_getString(0);
HXDLIN( 684)					{
HXLINE( 685)						::little::parser::Parser_obj::set_module(module);
HXLINE( 686)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 689)					::little::parser::Parser_obj::nextPart();
HXLINE( 690)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 716)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 716)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 716)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 716)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 716)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 716)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 717)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 717)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 718)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 718)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 718)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 718)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 718)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 718)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)6: {
HXLINE( 719)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 719)					post->push(::little::parser::ParserTokens_obj::Read(::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 727)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 727)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeWrites(assignees);
HXDLIN( 727)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)9: {
HXLINE( 720)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 720)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 720)					 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 720)					post->push(::little::parser::ParserTokens_obj::TypeDeclaration(_hx_tmp9,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)10: {
HXLINE( 721)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 721)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 721)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 721)					post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp10,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 722)					 ::little::parser::ParserTokens value2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 722)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 722)					 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 722)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp11,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 723)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 723)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 723)					::Array< ::Dynamic> _hx_tmp12 = ::little::parser::Parser_obj::mergeWrites(parts);
HXDLIN( 723)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp12,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 724)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 724)					 ::little::parser::ParserTokens type5 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 724)					::Array< ::Dynamic> _hx_tmp13 = ::little::parser::Parser_obj::mergeWrites(body1);
HXDLIN( 724)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp13,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 725)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 725)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeWrites(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 726)					 ::little::parser::ParserTokens name5 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens _hx_tmp14 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name5))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp14,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 692)					if ((token->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 693)						if ((post->length == 0)) {
HXLINE( 694)							::Array< ::Dynamic> _hx_tmp15 = ::little::Little_obj::runtime->callStack;
HXDLIN( 694)							::String _hx_tmp16 = ::little::parser::Parser_obj::get_module();
HXDLIN( 694)							int _hx_tmp17 = ::little::parser::Parser_obj::get_line();
HXDLIN( 694)							_hx_tmp15->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp16)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(null(),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp17)));
HXLINE( 695)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing assignee before `=`",19,58,a3,a9)),HX_("Parser",ff,10,1d,22));
HXLINE( 696)							return null();
            						}
HXLINE( 698)						 ::little::parser::ParserTokens assignee = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 699)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(3)->init(0,::little::tools::ParserTokensSimple_obj::SET_MODULE_dyn())->init(1,::little::tools::ParserTokensSimple_obj::SPLIT_LINE_dyn())->init(2,::little::tools::ParserTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 699)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 699)						{
HXLINE( 699)							int _g = 0;
HXDLIN( 699)							int _g1 = _this->length;
HXDLIN( 699)							while((_g < _g1)){
HXLINE( 699)								_g = (_g + 1);
HXDLIN( 699)								int i1 = (_g - 1);
HXDLIN( 699)								{
HXLINE( 699)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 699)									result->__unsafe_set(i1,inValue);
            								}
            							}
            						}
HXDLIN( 699)						if (result->contains(::Type_obj::enumConstructor(assignee).toLowerCase())) {
HXLINE( 700)							::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 700)							::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 700)							int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 700)							int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 700)							_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee)),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 701)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing assignee before `=`, assigning operation is cut off by a line split, a new file or a line.",eb,6d,ce,d6)),HX_("Parser",ff,10,1d,22));
            						}
HXLINE( 703)						if (((i + 1) >= pre->length)) {
HXLINE( 704)							::Array< ::Dynamic> _hx_tmp22 = ::little::Little_obj::runtime->callStack;
HXDLIN( 704)							::String _hx_tmp23 = ::little::parser::Parser_obj::get_module();
HXDLIN( 704)							int _hx_tmp24 = ::little::parser::Parser_obj::get_line();
HXDLIN( 704)							int _hx_tmp25 = ::little::parser::Parser_obj::linePart;
HXDLIN( 704)							_hx_tmp22->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp25)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp23)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee)),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp24)));
HXLINE( 705)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
HXLINE( 706)							return null();
            						}
HXLINE( 708)						 ::little::parser::ParserTokens lookahead = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 709)						::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::WRITE_dyn())->copy();
HXDLIN( 709)						::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 709)						{
HXLINE( 709)							int _g2 = 0;
HXDLIN( 709)							int _g3 = _this1->length;
HXDLIN( 709)							while((_g2 < _g3)){
HXLINE( 709)								_g2 = (_g2 + 1);
HXDLIN( 709)								int i2 = (_g2 - 1);
HXDLIN( 709)								{
HXLINE( 709)									::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 709)									result1->__unsafe_set(i2,inValue1);
            								}
            							}
            						}
HXDLIN( 709)						if (result1->contains(::Type_obj::enumConstructor(assignee).toLowerCase())) {
HXLINE( 710)							::Array< ::Dynamic> previousAssignees = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(assignee)->__get(0)) );
HXLINE( 711)							 ::Dynamic previousAssignees1 = previousAssignees->push_dyn();
HXDLIN( 711)							previousAssignees1(::Type_obj::enumParameters(assignee)->__get(1));
HXLINE( 712)							post->push(::little::parser::ParserTokens_obj::Write(previousAssignees,lookahead));
            						}
            						else {
HXLINE( 714)							post->push(::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),lookahead));
            						}
            					}
            					else {
HXLINE( 729)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 728)					::String name6 = token->_hx_getString(0);
HXDLIN( 728)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 728)					::Array< ::Dynamic> result2 = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 728)					{
HXLINE( 728)						int _g4 = 0;
HXDLIN( 728)						int _g5 = params2->length;
HXDLIN( 728)						while((_g4 < _g5)){
HXLINE( 728)							_g4 = (_g4 + 1);
HXDLIN( 728)							int i3 = (_g4 - 1);
HXDLIN( 728)							{
HXLINE( 728)								 ::little::parser::ParserTokens inValue2 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i3)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 728)								result2->__unsafe_set(i3,inValue2);
            							}
            						}
            					}
HXDLIN( 728)					post->push(::little::parser::ParserTokens_obj::Custom(name6,result2));
            				}
            				break;
            				default:{
HXLINE( 729)					post->push(token);
            				}
            			}
HXLINE( 732)			i = (i + 1);
            		}
HXLINE( 735)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeWrites,return )

::Array< ::Dynamic> Parser_obj::mergeValuesWithTypeDecls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_741_mergeValuesWithTypeDecls)
HXLINE( 743)		if (::hx::IsNull( pre )) {
HXLINE( 743)			return null();
            		}
HXLINE( 744)		bool _hx_tmp;
HXDLIN( 744)		if ((pre->length == 1)) {
HXLINE( 744)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 744)			_hx_tmp = false;
            		}
HXDLIN( 744)		if (_hx_tmp) {
HXLINE( 744)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 746)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 748)		int i = (pre->length - 1);
HXLINE( 749)		while((i >= 0)){
HXLINE( 750)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 751)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 752)					int line = token->_hx_getInt(0);
HXDLIN( 752)					{
HXLINE( 752)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 752)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 753)					::String module = token->_hx_getString(0);
HXDLIN( 753)					{
HXLINE( 753)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 753)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 754)					::little::parser::Parser_obj::nextPart();
HXDLIN( 754)					post->unshift(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 775)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 775)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 775)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 775)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 775)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 775)					post->unshift(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 776)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 776)					post->unshift(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 777)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 777)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 777)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 777)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 777)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 777)					post->unshift(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 781)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 781)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 781)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(assignees);
HXDLIN( 781)					post->unshift(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)9: {
HXLINE( 755)					if (::hx::IsNull( token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >() )) {
HXLINE( 755)						 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 755)						{
HXLINE( 756)							i = (i - 1);
HXDLIN( 756)							if (((i + 1) <= 0)) {
HXLINE( 757)								::Array< ::Dynamic> _hx_tmp9 = ::little::Little_obj::runtime->callStack;
HXDLIN( 757)								::String _hx_tmp10 = ::little::parser::Parser_obj::get_module();
HXDLIN( 757)								int _hx_tmp11 = ::little::parser::Parser_obj::get_line();
HXDLIN( 757)								int _hx_tmp12 = ::little::parser::Parser_obj::linePart;
HXDLIN( 757)								_hx_tmp9->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp12)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp10)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp11)));
HXLINE( 758)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration cut off by the start of file, block or expression.",87,ac,a0,5f)),HX_("Parser",ff,10,1d,22));
HXLINE( 759)								return null();
            							}
HXLINE( 761)							 ::little::parser::ParserTokens lookbehind = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 762)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 763)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 764)									::Array< ::Dynamic> _hx_tmp13 = ::little::Little_obj::runtime->callStack;
HXDLIN( 764)									::String _hx_tmp14 = ::little::parser::Parser_obj::get_module();
HXDLIN( 764)									int _hx_tmp15 = ::little::parser::Parser_obj::get_line();
HXDLIN( 764)									int _hx_tmp16 = ::little::parser::Parser_obj::linePart;
HXDLIN( 764)									 ::little::interpreter::InterpTokens _hx_tmp17 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 764)									_hx_tmp13->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp16)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp14)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp17,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp15)));
HXLINE( 765)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 766)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 763)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 764)									::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 764)									::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 764)									int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 764)									int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 764)									 ::little::interpreter::InterpTokens _hx_tmp22 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 764)									_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp22,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 765)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 766)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 764)									::Array< ::Dynamic> _hx_tmp23 = ::little::Little_obj::runtime->callStack;
HXDLIN( 764)									::String _hx_tmp24 = ::little::parser::Parser_obj::get_module();
HXDLIN( 764)									int _hx_tmp25 = ::little::parser::Parser_obj::get_line();
HXDLIN( 764)									int _hx_tmp26 = ::little::parser::Parser_obj::linePart;
HXDLIN( 764)									 ::little::interpreter::InterpTokens _hx_tmp27 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 764)									_hx_tmp23->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp26)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp24)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp27,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp25)));
HXLINE( 765)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 766)									return null();
            								}
            								break;
            								default:{
HXLINE( 769)									post->unshift(::little::parser::ParserTokens_obj::TypeDeclaration(lookbehind,type2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 784)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 780)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 780)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 780)					 ::little::parser::ParserTokens _hx_tmp28 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 780)					post->unshift(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp28,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 778)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 778)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 778)					 ::little::parser::ParserTokens _hx_tmp29 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 778)					post->unshift(::little::parser::ParserTokens_obj::Return(_hx_tmp29,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 774)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 774)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 774)					::Array< ::Dynamic> _hx_tmp30 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(parts);
HXDLIN( 774)					post->unshift(::little::parser::ParserTokens_obj::Expression(_hx_tmp30,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 773)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 773)					 ::little::parser::ParserTokens type5 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 773)					::Array< ::Dynamic> _hx_tmp31 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(body1);
HXDLIN( 773)					post->unshift(::little::parser::ParserTokens_obj::Block(_hx_tmp31,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 779)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 779)					post->unshift(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeValuesWithTypeDecls(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 782)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 782)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 782)					 ::little::parser::ParserTokens _hx_tmp32 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 782)					post->unshift(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp32,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 783)					::String name5 = token->_hx_getString(0);
HXDLIN( 783)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 783)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 783)					{
HXLINE( 783)						int _g2 = 0;
HXDLIN( 783)						int _g3 = params2->length;
HXDLIN( 783)						while((_g2 < _g3)){
HXLINE( 783)							_g2 = (_g2 + 1);
HXDLIN( 783)							int i1 = (_g2 - 1);
HXDLIN( 783)							{
HXLINE( 783)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 783)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 783)					post->unshift(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 784)					post->unshift(token);
            				}
            			}
HXLINE( 786)			i = (i - 1);
            		}
HXLINE( 789)		::little::parser::Parser_obj::resetLines();
HXLINE( 790)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeValuesWithTypeDecls,return )

::Array< ::Dynamic> Parser_obj::mergeNonBlockBodies(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_800_mergeNonBlockBodies)
HXLINE( 802)		if (::hx::IsNull( pre )) {
HXLINE( 802)			return null();
            		}
HXLINE( 803)		bool _hx_tmp;
HXDLIN( 803)		if ((pre->length == 1)) {
HXLINE( 803)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 803)			_hx_tmp = false;
            		}
HXDLIN( 803)		if (_hx_tmp) {
HXLINE( 803)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 805)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 807)		int i = 0;
HXLINE( 808)		while((i < pre->length)){
HXLINE( 809)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 810)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 811)					int line = token->_hx_getInt(0);
HXDLIN( 811)					{
HXLINE( 811)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 811)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 812)					::String module = token->_hx_getString(0);
HXDLIN( 812)					{
HXLINE( 812)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 812)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 813)					::little::parser::Parser_obj::nextPart();
HXDLIN( 813)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 833)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 833)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 833)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 833)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 833)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 833)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 834)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 834)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 835)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 838)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 838)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 838)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeNonBlockBodies(assignees);
HXDLIN( 838)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)10: {
HXLINE( 814)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 814)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 814)					{
HXLINE( 815)						if (((i + 1) >= pre->length)) {
HXLINE( 816)							 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 816)							post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp9,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 817)							i = (i + 1);
HXLINE( 818)							continue;
            						}
HXLINE( 820)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 821)						switch((int)(lookahead->_hx_getIndex())){
            							case (int)0: {
HXLINE( 822)								int _g = lookahead->_hx_getInt(0);
HXLINE( 823)								 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp10,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)1: {
HXLINE( 822)								::String _g1 = lookahead->_hx_getString(0);
HXLINE( 823)								 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp11,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)2: {
HXLINE( 823)								 ::little::parser::ParserTokens _hx_tmp12 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp12,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)16: {
HXLINE( 822)								::String _g2 = lookahead->_hx_getString(0);
HXLINE( 823)								 ::little::parser::ParserTokens _hx_tmp13 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp13,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							default:{
HXLINE( 826)								 ::little::parser::ParserTokens _hx_tmp14 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 826)								 ::little::parser::ParserTokens _hx_tmp15 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 826)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp14,_hx_tmp15,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 827)								i = (i + 1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 836)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 836)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 836)					 ::little::parser::ParserTokens _hx_tmp16 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 836)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp16,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 832)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 832)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 832)					::Array< ::Dynamic> _hx_tmp17 = ::little::parser::Parser_obj::mergeNonBlockBodies(parts);
HXDLIN( 832)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp17,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 831)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 831)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 831)					::Array< ::Dynamic> _hx_tmp18 = ::little::parser::Parser_obj::mergeNonBlockBodies(body1);
HXDLIN( 831)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp18,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 837)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 837)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeNonBlockBodies(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 839)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 839)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 839)					 ::little::parser::ParserTokens _hx_tmp19 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 839)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp19,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 840)					::String name5 = token->_hx_getString(0);
HXDLIN( 840)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 840)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 840)					{
HXLINE( 840)						int _g3 = 0;
HXDLIN( 840)						int _g4 = params2->length;
HXDLIN( 840)						while((_g3 < _g4)){
HXLINE( 840)							_g3 = (_g3 + 1);
HXDLIN( 840)							int i1 = (_g3 - 1);
HXDLIN( 840)							{
HXLINE( 840)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 840)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 840)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 841)					post->push(token);
            				}
            			}
HXLINE( 843)			i = (i + 1);
            		}
HXLINE( 846)		::little::parser::Parser_obj::resetLines();
HXLINE( 847)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeNonBlockBodies,return )

::Array< ::Dynamic> Parser_obj::mergeElses(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_853_mergeElses)
HXLINE( 855)		if (::hx::IsNull( pre )) {
HXLINE( 855)			return null();
            		}
HXLINE( 856)		bool _hx_tmp;
HXDLIN( 856)		if ((pre->length == 1)) {
HXLINE( 856)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 856)			_hx_tmp = false;
            		}
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 856)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 858)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 860)		int i = 0;
HXLINE( 861)		while((i < pre->length)){
HXLINE( 862)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 863)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 864)					int line = token->_hx_getInt(0);
HXDLIN( 864)					{
HXLINE( 864)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 864)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 865)					::String module = token->_hx_getString(0);
HXDLIN( 865)					{
HXLINE( 865)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 865)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 866)					::little::parser::Parser_obj::nextPart();
HXDLIN( 866)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 899)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 899)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 899)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 899)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 899)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 899)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 900)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 900)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 901)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 901)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 901)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 901)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 901)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 901)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 905)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 905)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 905)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeElses(assignees);
HXDLIN( 905)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)8: {
HXLINE( 867)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->CONDITION__ELSE) == true)) {
HXLINE( 868)						bool _hx_tmp9;
HXDLIN( 868)						if ((post->length != 0)) {
HXLINE( 868)							 ::little::parser::ParserTokens token1 = post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 868)							::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::CONDITION_CALL_dyn())->copy();
HXDLIN( 868)							::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 868)							{
HXLINE( 868)								int _g = 0;
HXDLIN( 868)								int _g1 = _this->length;
HXDLIN( 868)								while((_g < _g1)){
HXLINE( 868)									_g = (_g + 1);
HXDLIN( 868)									int i1 = (_g - 1);
HXDLIN( 868)									{
HXLINE( 868)										::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 868)										result->__unsafe_set(i1,inValue);
            									}
            								}
            							}
HXDLIN( 868)							_hx_tmp9 = !(result->contains(::Type_obj::enumConstructor(token1).toLowerCase()));
            						}
            						else {
HXLINE( 868)							_hx_tmp9 = true;
            						}
HXDLIN( 868)						if (_hx_tmp9) {
HXLINE( 869)							post->push(token);
HXLINE( 870)							i = (i + 1);
HXLINE( 871)							continue;
            						}
HXLINE( 873)						if (((i + 1) >= pre->length)) {
HXLINE( 874)							::Array< ::Dynamic> _hx_tmp10 = ::little::Little_obj::runtime->callStack;
HXDLIN( 874)							::String _hx_tmp11 = ::little::parser::Parser_obj::get_module();
HXDLIN( 874)							int _hx_tmp12 = ::little::parser::Parser_obj::get_line();
HXDLIN( 874)							_hx_tmp10->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp11)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE),null(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp12)));
HXLINE( 875)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body may be cut off by the end of file, block or expression.",65,cb,d6,67))),HX_("Parser",ff,10,1d,22));
HXLINE( 876)							return null();
            						}
HXLINE( 878)						 ::little::parser::ParserTokens exp1 = ::Type_obj::enumParameters(post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >())->__get(1);
HXLINE( 879)						exp1 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("!=",fc,1c,00,00)))->init(2,::little::parser::ParserTokens_obj::TrueValue_dyn()),null());
HXLINE( 880)						i = (i + 1);
HXLINE( 881)						 ::little::parser::ParserTokens body1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 882)						switch((int)(body1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 888)								int _g2 = body1->_hx_getInt(0);
HXLINE( 889)								::Array< ::Dynamic> _hx_tmp13 = ::little::Little_obj::runtime->callStack;
HXDLIN( 889)								::String _hx_tmp14 = ::little::parser::Parser_obj::get_module();
HXDLIN( 889)								int _hx_tmp15 = ::little::parser::Parser_obj::get_line();
HXDLIN( 889)								int _hx_tmp16 = ::little::parser::Parser_obj::linePart;
HXDLIN( 889)								 ::little::interpreter::InterpTokens _hx_tmp17 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 889)								_hx_tmp13->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp16)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp14)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp17,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp15)));
HXLINE( 890)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 891)								return null();
            							}
            							break;
            							case (int)1: {
HXLINE( 888)								::String _g3 = body1->_hx_getString(0);
HXLINE( 889)								::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 889)								::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 889)								int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 889)								int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 889)								 ::little::interpreter::InterpTokens _hx_tmp22 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 889)								_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp22,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 890)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 891)								return null();
            							}
            							break;
            							case (int)2: {
HXLINE( 884)								::Array< ::Dynamic> _hx_tmp23 = ::little::Little_obj::runtime->callStack;
HXDLIN( 884)								::String _hx_tmp24 = ::little::parser::Parser_obj::get_module();
HXDLIN( 884)								int _hx_tmp25 = ::little::parser::Parser_obj::get_line();
HXDLIN( 884)								int _hx_tmp26 = ::little::parser::Parser_obj::linePart;
HXDLIN( 884)								 ::little::interpreter::InterpTokens _hx_tmp27 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 884)								_hx_tmp23->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp26)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp24)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp27,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp25)));
HXLINE( 885)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a line split, or does not exist",99,32,ec,c1))),HX_("Parser",ff,10,1d,22));
HXLINE( 886)								return null();
            							}
            							break;
            							case (int)5: {
HXLINE( 893)								 ::little::parser::ParserTokens _g4 = body1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 893)								if ((_g4->_hx_getIndex() == 8)) {
HXLINE( 893)									if ((_g4->_hx_getString(0) == HX_("if",dd,5b,00,00))) {
HXLINE( 893)										 ::little::parser::ParserTokens exp2 = body1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 893)										 ::little::parser::ParserTokens body2 = body1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 893)										 ::little::parser::ParserTokens _hx_tmp28 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 893)										 ::little::parser::ParserTokens _hx_tmp29 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("&&",40,21,00,00)))->init(2,exp2),null());
HXDLIN( 893)										 ::little::parser::ParserTokens _hx_tmp30;
HXDLIN( 893)										::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 893)										::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 893)										{
HXLINE( 893)											int _g5 = 0;
HXDLIN( 893)											int _g6 = _this1->length;
HXDLIN( 893)											while((_g5 < _g6)){
HXLINE( 893)												_g5 = (_g5 + 1);
HXDLIN( 893)												int i2 = (_g5 - 1);
HXDLIN( 893)												{
HXLINE( 893)													::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 893)													result1->__unsafe_set(i2,inValue1);
            												}
            											}
            										}
HXDLIN( 893)										if (!(result1->contains(::Type_obj::enumConstructor(body2).toLowerCase()))) {
HXLINE( 893)											_hx_tmp30 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body2),null());
            										}
            										else {
HXLINE( 893)											_hx_tmp30 = body2;
            										}
HXDLIN( 893)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp28,_hx_tmp29,_hx_tmp30));
            									}
            									else {
HXLINE( 894)										 ::little::parser::ParserTokens _hx_tmp31 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 894)										 ::little::parser::ParserTokens _hx_tmp32;
HXDLIN( 894)										::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 894)										::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 894)										{
HXLINE( 894)											int _g7 = 0;
HXDLIN( 894)											int _g8 = _this2->length;
HXDLIN( 894)											while((_g7 < _g8)){
HXLINE( 894)												_g7 = (_g7 + 1);
HXDLIN( 894)												int i3 = (_g7 - 1);
HXDLIN( 894)												{
HXLINE( 894)													::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 894)													result2->__unsafe_set(i3,inValue2);
            												}
            											}
            										}
HXDLIN( 894)										if (!(result2->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 894)											_hx_tmp32 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            										}
            										else {
HXLINE( 894)											_hx_tmp32 = body1;
            										}
HXDLIN( 894)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp31,exp1,_hx_tmp32));
            									}
            								}
            								else {
HXLINE( 894)									 ::little::parser::ParserTokens _hx_tmp33 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 894)									 ::little::parser::ParserTokens _hx_tmp34;
HXDLIN( 894)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 894)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 894)									{
HXLINE( 894)										int _g9 = 0;
HXDLIN( 894)										int _g10 = _this3->length;
HXDLIN( 894)										while((_g9 < _g10)){
HXLINE( 894)											_g9 = (_g9 + 1);
HXDLIN( 894)											int i4 = (_g9 - 1);
HXDLIN( 894)											{
HXLINE( 894)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 894)												result3->__unsafe_set(i4,inValue3);
            											}
            										}
            									}
HXDLIN( 894)									if (!(result3->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 894)										_hx_tmp34 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            									}
            									else {
HXLINE( 894)										_hx_tmp34 = body1;
            									}
HXDLIN( 894)									post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp33,exp1,_hx_tmp34));
            								}
            							}
            							break;
            							default:{
HXLINE( 894)								 ::little::parser::ParserTokens _hx_tmp35 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 894)								 ::little::parser::ParserTokens _hx_tmp36;
HXDLIN( 894)								::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 894)								::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 894)								{
HXLINE( 894)									int _g11 = 0;
HXDLIN( 894)									int _g12 = _this4->length;
HXDLIN( 894)									while((_g11 < _g12)){
HXLINE( 894)										_g11 = (_g11 + 1);
HXDLIN( 894)										int i5 = (_g11 - 1);
HXDLIN( 894)										{
HXLINE( 894)											::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 894)											result4->__unsafe_set(i5,inValue4);
            										}
            									}
            								}
HXDLIN( 894)								if (!(result4->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 894)									_hx_tmp36 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            								}
            								else {
HXLINE( 894)									_hx_tmp36 = body1;
            								}
HXDLIN( 894)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp35,exp1,_hx_tmp36));
            							}
            						}
            					}
            					else {
HXLINE( 908)						post->push(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 904)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 904)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 904)					 ::little::parser::ParserTokens _hx_tmp37 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 904)					post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp37,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 902)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)					 ::little::parser::ParserTokens _hx_tmp38 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp38,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 898)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 898)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 898)					::Array< ::Dynamic> _hx_tmp39 = ::little::parser::Parser_obj::mergeElses(parts);
HXDLIN( 898)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp39,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 897)					::Array< ::Dynamic> body3 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 897)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 897)					::Array< ::Dynamic> _hx_tmp40 = ::little::parser::Parser_obj::mergeElses(body3);
HXDLIN( 897)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp40,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 903)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 903)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeElses(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 906)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 906)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 906)					 ::little::parser::ParserTokens _hx_tmp41 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 906)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp41,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 907)					::String name5 = token->_hx_getString(0);
HXDLIN( 907)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 907)					::Array< ::Dynamic> result5 = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 907)					{
HXLINE( 907)						int _g13 = 0;
HXDLIN( 907)						int _g14 = params2->length;
HXDLIN( 907)						while((_g13 < _g14)){
HXLINE( 907)							_g13 = (_g13 + 1);
HXDLIN( 907)							int i6 = (_g13 - 1);
HXDLIN( 907)							{
HXLINE( 907)								 ::little::parser::ParserTokens inValue5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i6)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 907)								result5->__unsafe_set(i6,inValue5);
            							}
            						}
            					}
HXDLIN( 907)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result5));
            				}
            				break;
            				default:{
HXLINE( 908)					post->push(token);
            				}
            			}
HXLINE( 910)			i = (i + 1);
            		}
HXLINE( 913)		::little::parser::Parser_obj::resetLines();
HXLINE( 914)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeElses,return )

int Parser_obj::get_line(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_926_get_line)
HXDLIN( 926)		return ::little::Little_obj::runtime->line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_line,return )

int Parser_obj::set_line(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_927_set_line)
HXDLIN( 927)		return (::little::Little_obj::runtime->line = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_line,return )

::String Parser_obj::get_module(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_929_get_module)
HXDLIN( 929)		return ::little::Little_obj::runtime->module;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_module,return )

::String Parser_obj::set_module(::String l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_930_set_module)
HXDLIN( 930)		return (::little::Little_obj::runtime->module = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_module,return )

int Parser_obj::linePart;

void Parser_obj::setLine(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_936_setLine)
HXLINE( 937)		::little::parser::Parser_obj::set_line(l);
HXLINE( 938)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,setLine,(void))

void Parser_obj::nextPart(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_943_nextPart)
HXDLIN( 943)		::little::parser::Parser_obj::linePart++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,nextPart,(void))

void Parser_obj::resetLines(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_948_resetLines)
HXLINE( 949)		::little::parser::Parser_obj::set_line(0);
HXLINE( 950)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,resetLines,(void))


Parser_obj::Parser_obj()
{
}

bool Parser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_line() ); return true; } }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = ( parse ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_module() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setLine") ) { outValue = setLine_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_line") ) { outValue = get_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_line") ) { outValue = set_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linePart") ) { outValue = ( linePart ); return true; }
		if (HX_FIELD_EQ(inName,"nextPart") ) { outValue = nextPart_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mergeCalls") ) { outValue = mergeCalls_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeElses") ) { outValue = mergeElses_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_module") ) { outValue = get_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_module") ) { outValue = set_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetLines") ) { outValue = resetLines_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mergeBlocks") ) { outValue = mergeBlocks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeWrites") ) { outValue = mergeWrites_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mergeTypeDecls") ) { outValue = mergeTypeDecls_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mergeExpressions") ) { outValue = mergeExpressions_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeNonBlockBodies") ) { outValue = mergeNonBlockBodies_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mergeComplexStructures") ) { outValue = mergeComplexStructures_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { outValue = ( additionalParsingLevels ); return true; }
		if (HX_FIELD_EQ(inName,"mergePropertyOperations") ) { outValue = mergePropertyOperations_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"mergeValuesWithTypeDecls") ) { outValue = mergeValuesWithTypeDecls_dyn(); return true; }
	}
	return false;
}

bool Parser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_line(ioValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { parse=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_module(ioValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"linePart") ) { linePart=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { additionalParsingLevels=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Parser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Parser_obj::additionalParsingLevels,HX_("additionalParsingLevels",58,b5,c0,96)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Parser_obj::parse,HX_("parse",33,90,55,bd)},
	{::hx::fsInt,(void *) &Parser_obj::linePart,HX_("linePart",07,32,7b,87)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_MARK_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_MARK_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_VISIT_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_VISIT_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#endif

::hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_("additionalParsingLevels",58,b5,c0,96),
	HX_("parse",33,90,55,bd),
	HX_("convert",f3,fd,c9,1a),
	HX_("mergeBlocks",5e,1f,58,f3),
	HX_("mergeExpressions",03,54,b2,c9),
	HX_("mergePropertyOperations",f9,db,1f,94),
	HX_("mergeTypeDecls",d7,8d,a6,a4),
	HX_("mergeComplexStructures",58,ed,e8,a9),
	HX_("mergeCalls",3d,64,e1,82),
	HX_("mergeWrites",8c,c7,53,c9),
	HX_("mergeValuesWithTypeDecls",af,4f,84,50),
	HX_("mergeNonBlockBodies",78,f5,9a,52),
	HX_("mergeElses",c2,2f,f9,b0),
	HX_("get_line",7d,d3,6d,c7),
	HX_("set_line",f1,2c,cb,75),
	HX_("get_module",75,a4,5a,b1),
	HX_("set_module",e9,42,d8,b4),
	HX_("linePart",07,32,7b,87),
	HX_("setLine",b6,58,37,0d),
	HX_("nextPart",86,8a,1e,f6),
	HX_("resetLines",b0,15,9e,5d),
	::String(null())
};

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.parser.Parser",36,37,3f,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Parser_obj::__GetStatic;
	__mClass->mSetStaticField = &Parser_obj::__SetStatic;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_25_boot)
HXDLIN(  25)		additionalParsingLevels = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::Parser_obj::mergeElses_dyn());
            	}
	parse = new __default_parse;

{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_931_boot)
HXDLIN( 931)		linePart = 0;
            	}
}

} // end namespace little
} // end namespace parser
