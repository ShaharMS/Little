// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_exceptions_Unimplemented
#include <vision/exceptions/Unimplemented.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0903d5909577b6bb_5_new,"vision.exceptions.Unimplemented","new",0x4a5a9ef7,"vision.exceptions.Unimplemented.new","vision/exceptions/Unimplemented.hx",5,0xc6cd59f9)
namespace vision{
namespace exceptions{

void Unimplemented_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_0903d5909577b6bb_5_new)
HXDLIN(   5)		{
HXDLIN(   5)			super::__construct(((HX_("",00,00,00,00) + name) + HX_(" is not yet implemented",a7,7d,2d,28)),HX_("Unimplemented Method",58,63,cf,6b));
            		}
HXDLIN(   5)		{
HXDLIN(   5)			this->_hx___skipStack++;
            		}
            	}

Dynamic Unimplemented_obj::__CreateEmpty() { return new Unimplemented_obj; }

void *Unimplemented_obj::_hx_vtable = 0;

Dynamic Unimplemented_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Unimplemented_obj > _hx_result = new Unimplemented_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Unimplemented_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		if (inClassId<=(int)0x3aa93119) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x3aa93119;
		} else {
			return inClassId==(int)0x677ddc49;
		}
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}


::hx::ObjectPtr< Unimplemented_obj > Unimplemented_obj::__new(::String name) {
	::hx::ObjectPtr< Unimplemented_obj > __this = new Unimplemented_obj();
	__this->__construct(name);
	return __this;
}

::hx::ObjectPtr< Unimplemented_obj > Unimplemented_obj::__alloc(::hx::Ctx *_hx_ctx,::String name) {
	Unimplemented_obj *__this = (Unimplemented_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Unimplemented_obj), true, "vision.exceptions.Unimplemented"));
	*(void **)__this = Unimplemented_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Unimplemented_obj::Unimplemented_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Unimplemented_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Unimplemented_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Unimplemented_obj::__mClass;

void Unimplemented_obj::__register()
{
	Unimplemented_obj _hx_dummy;
	Unimplemented_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.Unimplemented",85,57,dc,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Unimplemented_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Unimplemented_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Unimplemented_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
