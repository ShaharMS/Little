// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_vision_exceptions_MultithreadFailure
#include <vision/exceptions/MultithreadFailure.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9226092f5a4e047f_5_new,"vision.exceptions.MultithreadFailure","new",0x0228e0fd,"vision.exceptions.MultithreadFailure.new","vision/exceptions/MultithreadFailure.hx",5,0x2680fb73)
namespace vision{
namespace exceptions{

void MultithreadFailure_obj::__construct(int count, ::Dynamic reason){
            	HX_STACKFRAME(&_hx_pos_9226092f5a4e047f_5_new)
HXDLIN(   5)		{
HXDLIN(   5)			super::__construct((((HX_("Thread number #",02,ab,03,23) + count) + HX_(" failed: ",c3,c1,b6,57)) + ::Std_obj::string(reason)),HX_("Multithreading Failure",e9,b1,67,30));
            		}
HXDLIN(   5)		{
HXDLIN(   5)			this->_hx___skipStack++;
            		}
            	}

Dynamic MultithreadFailure_obj::__CreateEmpty() { return new MultithreadFailure_obj; }

void *MultithreadFailure_obj::_hx_vtable = 0;

Dynamic MultithreadFailure_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MultithreadFailure_obj > _hx_result = new MultithreadFailure_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MultithreadFailure_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		if (inClassId<=(int)0x2637b53f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2637b53f;
		} else {
			return inClassId==(int)0x677ddc49;
		}
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}


::hx::ObjectPtr< MultithreadFailure_obj > MultithreadFailure_obj::__new(int count, ::Dynamic reason) {
	::hx::ObjectPtr< MultithreadFailure_obj > __this = new MultithreadFailure_obj();
	__this->__construct(count,reason);
	return __this;
}

::hx::ObjectPtr< MultithreadFailure_obj > MultithreadFailure_obj::__alloc(::hx::Ctx *_hx_ctx,int count, ::Dynamic reason) {
	MultithreadFailure_obj *__this = (MultithreadFailure_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MultithreadFailure_obj), true, "vision.exceptions.MultithreadFailure"));
	*(void **)__this = MultithreadFailure_obj::_hx_vtable;
	__this->__construct(count,reason);
	return __this;
}

MultithreadFailure_obj::MultithreadFailure_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MultithreadFailure_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *MultithreadFailure_obj_sStaticStorageInfo = 0;
#endif

::hx::Class MultithreadFailure_obj::__mClass;

void MultithreadFailure_obj::__register()
{
	MultithreadFailure_obj _hx_dummy;
	MultithreadFailure_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.MultithreadFailure",8b,9e,93,c5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MultithreadFailure_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MultithreadFailure_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MultithreadFailure_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
