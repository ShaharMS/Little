// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds__Image_Image_Impl_
#include <vision/ds/_Image/Image_Impl_.h>
#endif
#ifndef INCLUDED_vision_exceptions_OutOfBounds
#include <vision/exceptions/OutOfBounds.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3191047285de97ab_9_new,"vision.exceptions.OutOfBounds","new",0x9f031708,"vision.exceptions.OutOfBounds.new","vision/exceptions/OutOfBounds.hx",9,0xe816a708)
namespace vision{
namespace exceptions{

void OutOfBounds_obj::__construct( ::haxe::io::Bytes image, ::vision::ds::Point2D position){
            	HX_STACKFRAME(&_hx_pos_3191047285de97ab_9_new)
HXDLIN(   9)		{
HXDLIN(   9)			::String _hx_tmp = ((HX_("pixel ",da,ee,a9,8c) + ::Std_obj::string(position)) + HX_(" is outside the bounds of the image (size: ",1d,ab,33,ac));
HXDLIN(   9)			 ::haxe::io::Bytes _this = image;
HXDLIN(   9)			 ::haxe::io::Bytes _this1 = image;
HXDLIN(   9)			super::__construct(((((_hx_tmp + (( (int)(_this->b->__get(0)) ) | (( (int)(_this->b->__get(1)) ) << 8))) + HX_("x",78,00,00,00)) + ::Math_obj::ceil((( (Float)((image->length - ::vision::ds::_Image::Image_Impl__obj::OFFSET)) ) / ( (Float)(((( (int)(_this1->b->__get(0)) ) | (( (int)(_this1->b->__get(1)) ) << 8)) * 4)) )))) + HX_(")",29,00,00,00)),HX_("Pixel Coordinates Out Of Bounds",ed,15,a4,9c));
            		}
HXDLIN(   9)		{
HXDLIN(   9)			this->_hx___skipStack++;
            		}
            	}

Dynamic OutOfBounds_obj::__CreateEmpty() { return new OutOfBounds_obj; }

void *OutOfBounds_obj::_hx_vtable = 0;

Dynamic OutOfBounds_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OutOfBounds_obj > _hx_result = new OutOfBounds_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OutOfBounds_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x78c0788e) {
		if (inClassId<=(int)0x677ddc49) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x677ddc49;
		} else {
			return inClassId==(int)0x78c0788e;
		}
	} else {
		return inClassId==(int)0x7cf1c557;
	}
}


::hx::ObjectPtr< OutOfBounds_obj > OutOfBounds_obj::__new( ::haxe::io::Bytes image, ::vision::ds::Point2D position) {
	::hx::ObjectPtr< OutOfBounds_obj > __this = new OutOfBounds_obj();
	__this->__construct(image,position);
	return __this;
}

::hx::ObjectPtr< OutOfBounds_obj > OutOfBounds_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes image, ::vision::ds::Point2D position) {
	OutOfBounds_obj *__this = (OutOfBounds_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OutOfBounds_obj), true, "vision.exceptions.OutOfBounds"));
	*(void **)__this = OutOfBounds_obj::_hx_vtable;
	__this->__construct(image,position);
	return __this;
}

OutOfBounds_obj::OutOfBounds_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OutOfBounds_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OutOfBounds_obj_sStaticStorageInfo = 0;
#endif

::hx::Class OutOfBounds_obj::__mClass;

void OutOfBounds_obj::__register()
{
	OutOfBounds_obj _hx_dummy;
	OutOfBounds_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.exceptions.OutOfBounds",16,33,61,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< OutOfBounds_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OutOfBounds_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OutOfBounds_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace exceptions
