// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_vision_ds_QueueCell
#include <vision/ds/QueueCell.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b4dcd5c6f0f87e5e_11_new,"vision.ds.QueueCell","new",0xaf5ae04c,"vision.ds.QueueCell.new","vision/ds/Queue.hx",11,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_b4dcd5c6f0f87e5e_18_getValue,"vision.ds.QueueCell","getValue",0xbfcb478f,"vision.ds.QueueCell.getValue","vision/ds/Queue.hx",18,0xc9aaf7c6)
namespace vision{
namespace ds{

void QueueCell_obj::__construct( ::Dynamic value, ::vision::ds::QueueCell next, ::vision::ds::QueueCell previous){
            	HX_STACKFRAME(&_hx_pos_b4dcd5c6f0f87e5e_11_new)
HXLINE(  12)		this->previous = previous;
HXLINE(  13)		this->value = value;
HXLINE(  14)		this->next = next;
            	}

Dynamic QueueCell_obj::__CreateEmpty() { return new QueueCell_obj; }

void *QueueCell_obj::_hx_vtable = 0;

Dynamic QueueCell_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QueueCell_obj > _hx_result = new QueueCell_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool QueueCell_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65c00d5c;
}

 ::Dynamic QueueCell_obj::getValue(){
            	HX_STACKFRAME(&_hx_pos_b4dcd5c6f0f87e5e_18_getValue)
HXDLIN(  18)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(QueueCell_obj,getValue,return )


QueueCell_obj::QueueCell_obj()
{
}

void QueueCell_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(QueueCell);
	HX_MARK_MEMBER_NAME(previous,"previous");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void QueueCell_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(previous,"previous");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(next,"next");
}

::hx::Val QueueCell_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previous") ) { return ::hx::Val( previous ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QueueCell_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::vision::ds::QueueCell >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previous") ) { previous=inValue.Cast<  ::vision::ds::QueueCell >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QueueCell_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("previous",37,bc,b0,23));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QueueCell_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::vision::ds::QueueCell */ ,(int)offsetof(QueueCell_obj,previous),HX_("previous",37,bc,b0,23)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(QueueCell_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsObject /*  ::vision::ds::QueueCell */ ,(int)offsetof(QueueCell_obj,next),HX_("next",f3,84,02,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QueueCell_obj_sStaticStorageInfo = 0;
#endif

static ::String QueueCell_obj_sMemberFields[] = {
	HX_("previous",37,bc,b0,23),
	HX_("value",71,7f,b8,31),
	HX_("next",f3,84,02,49),
	HX_("getValue",fb,8e,8f,91),
	::String(null()) };

::hx::Class QueueCell_obj::__mClass;

void QueueCell_obj::__register()
{
	QueueCell_obj _hx_dummy;
	QueueCell_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.QueueCell",5a,0a,c2,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QueueCell_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QueueCell_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QueueCell_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QueueCell_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
