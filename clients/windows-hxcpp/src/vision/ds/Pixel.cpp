// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_vision_ds_Pixel
#include <vision/ds/Pixel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d44068f5b94b9f6_29_new,"vision.ds.Pixel","new",0xdcc8b4ff,"vision.ds.Pixel.new","vision/ds/Pixel.hx",29,0x047605f1)
namespace vision{
namespace ds{

void Pixel_obj::__construct(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_8d44068f5b94b9f6_29_new)
HXLINE(  30)		this->x = x;
HXLINE(  31)		this->y = y;
HXLINE(  32)		this->color = color;
            	}

Dynamic Pixel_obj::__CreateEmpty() { return new Pixel_obj; }

void *Pixel_obj::_hx_vtable = 0;

Dynamic Pixel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Pixel_obj > _hx_result = new Pixel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Pixel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7130a38f;
}


Pixel_obj::Pixel_obj()
{
}

::hx::Val Pixel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Pixel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pixel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("color",63,71,5c,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Pixel_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Pixel_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Pixel_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(Pixel_obj,color),HX_("color",63,71,5c,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Pixel_obj_sStaticStorageInfo = 0;
#endif

static ::String Pixel_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("color",63,71,5c,4a),
	::String(null()) };

::hx::Class Pixel_obj::__mClass;

void Pixel_obj::__register()
{
	Pixel_obj _hx_dummy;
	Pixel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.Pixel",8d,c9,f4,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Pixel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Pixel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pixel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pixel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
