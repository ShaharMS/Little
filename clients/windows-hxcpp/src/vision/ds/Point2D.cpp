// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_25_new,"vision.ds.Point2D","new",0xe362705b,"vision.ds.Point2D.new","vision/ds/Point2D.hx",25,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_34_toString,"vision.ds.Point2D","toString",0x9c9362d1,"vision.ds.Point2D.toString","vision/ds/Point2D.hx",34,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_41_copy,"vision.ds.Point2D","copy",0x0b82175a,"vision.ds.Point2D.copy","vision/ds/Point2D.hx",41,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_53_distanceTo,"vision.ds.Point2D","distanceTo",0xaff5f975,"vision.ds.Point2D.distanceTo","vision/ds/Point2D.hx",53,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_65_degreesTo,"vision.ds.Point2D","degreesTo",0xed73f33d,"vision.ds.Point2D.degreesTo","vision/ds/Point2D.hx",65,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_77_radiansTo,"vision.ds.Point2D","radiansTo",0x343fdec8,"vision.ds.Point2D.radiansTo","vision/ds/Point2D.hx",77,0x08ded215)
namespace vision{
namespace ds{

void Point2D_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_25_new)
HXLINE(  26)		this->x = x;
HXLINE(  27)		this->y = y;
            	}

Dynamic Point2D_obj::__CreateEmpty() { return new Point2D_obj; }

void *Point2D_obj::_hx_vtable = 0;

Dynamic Point2D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Point2D_obj > _hx_result = new Point2D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Point2D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6266856b;
}

::String Point2D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_34_toString)
HXDLIN(  34)		return ((((HX_("(",28,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point2D_obj,toString,return )

 ::vision::ds::Point2D Point2D_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_41_copy)
HXDLIN(  41)		return  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point2D_obj,copy,return )

Float Point2D_obj::distanceTo( ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_53_distanceTo)
HXDLIN(  53)		Float x = (point->x - this->x);
HXDLIN(  53)		Float y = (point->y - this->y);
HXDLIN(  53)		return ::Math_obj::sqrt(((x * x) + (y * y)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point2D_obj,distanceTo,return )

Float Point2D_obj::degreesTo( ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_65_degreesTo)
HXDLIN(  65)		Float x = (point->x - this->x);
HXDLIN(  65)		Float y = (point->y - this->y);
HXDLIN(  65)		return ((::Math_obj::atan2(x,y) * ( (Float)(180) )) / ::Math_obj::PI);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point2D_obj,degreesTo,return )

Float Point2D_obj::radiansTo( ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_77_radiansTo)
HXDLIN(  77)		Float x = (point->x - this->x);
HXDLIN(  77)		Float y = (point->y - this->y);
HXDLIN(  77)		return ((::Math_obj::atan2(x,y) * ( (Float)(180) )) / ::Math_obj::PI);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point2D_obj,radiansTo,return )


::hx::ObjectPtr< Point2D_obj > Point2D_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< Point2D_obj > __this = new Point2D_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< Point2D_obj > Point2D_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	Point2D_obj *__this = (Point2D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Point2D_obj), false, "vision.ds.Point2D"));
	*(void **)__this = Point2D_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Point2D_obj::Point2D_obj()
{
}

::hx::Val Point2D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"degreesTo") ) { return ::hx::Val( degreesTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"radiansTo") ) { return ::hx::Val( radiansTo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return ::hx::Val( distanceTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Point2D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Point2D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Point2D_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Point2D_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point2D_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Point2D_obj_sStaticStorageInfo = 0;
#endif

static ::String Point2D_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("toString",ac,d0,6e,38),
	HX_("copy",b5,bb,c4,41),
	HX_("distanceTo",10,d4,ec,8b),
	HX_("degreesTo",02,a5,98,b1),
	HX_("radiansTo",8d,90,64,f8),
	::String(null()) };

::hx::Class Point2D_obj::__mClass;

void Point2D_obj::__register()
{
	Point2D_obj _hx_dummy;
	Point2D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.Point2D",e9,a6,fe,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Point2D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Point2D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point2D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point2D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
