// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds_specifics_PointTransformationPair
#include <vision/ds/specifics/PointTransformationPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7fb482633917df20_9_new,"vision.ds.specifics.PointTransformationPair","new",0x939ae9ff,"vision.ds.specifics.PointTransformationPair.new","vision/ds/specifics/PointTransformationPair.hx",9,0xf634de32)
namespace vision{
namespace ds{
namespace specifics{

void PointTransformationPair_obj::__construct( ::vision::ds::Point2D from, ::vision::ds::Point2D to){
            	HX_STACKFRAME(&_hx_pos_7fb482633917df20_9_new)
HXLINE(  10)		this->from = from;
HXLINE(  11)		this->to = to;
            	}

Dynamic PointTransformationPair_obj::__CreateEmpty() { return new PointTransformationPair_obj; }

void *PointTransformationPair_obj::_hx_vtable = 0;

Dynamic PointTransformationPair_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PointTransformationPair_obj > _hx_result = new PointTransformationPair_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PointTransformationPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03eadabd;
}


::hx::ObjectPtr< PointTransformationPair_obj > PointTransformationPair_obj::__new( ::vision::ds::Point2D from, ::vision::ds::Point2D to) {
	::hx::ObjectPtr< PointTransformationPair_obj > __this = new PointTransformationPair_obj();
	__this->__construct(from,to);
	return __this;
}

::hx::ObjectPtr< PointTransformationPair_obj > PointTransformationPair_obj::__alloc(::hx::Ctx *_hx_ctx, ::vision::ds::Point2D from, ::vision::ds::Point2D to) {
	PointTransformationPair_obj *__this = (PointTransformationPair_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PointTransformationPair_obj), true, "vision.ds.specifics.PointTransformationPair"));
	*(void **)__this = PointTransformationPair_obj::_hx_vtable;
	__this->__construct(from,to);
	return __this;
}

PointTransformationPair_obj::PointTransformationPair_obj()
{
}

void PointTransformationPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PointTransformationPair);
	HX_MARK_MEMBER_NAME(from,"from");
	HX_MARK_MEMBER_NAME(to,"to");
	HX_MARK_END_CLASS();
}

void PointTransformationPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(from,"from");
	HX_VISIT_MEMBER_NAME(to,"to");
}

::hx::Val PointTransformationPair_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { return ::hx::Val( to ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { return ::hx::Val( from ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PointTransformationPair_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { to=inValue.Cast<  ::vision::ds::Point2D >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { from=inValue.Cast<  ::vision::ds::Point2D >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PointTransformationPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("from",6a,a5,c2,43));
	outFields->push(HX_("to",7b,65,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PointTransformationPair_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::vision::ds::Point2D */ ,(int)offsetof(PointTransformationPair_obj,from),HX_("from",6a,a5,c2,43)},
	{::hx::fsObject /*  ::vision::ds::Point2D */ ,(int)offsetof(PointTransformationPair_obj,to),HX_("to",7b,65,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PointTransformationPair_obj_sStaticStorageInfo = 0;
#endif

static ::String PointTransformationPair_obj_sMemberFields[] = {
	HX_("from",6a,a5,c2,43),
	HX_("to",7b,65,00,00),
	::String(null()) };

::hx::Class PointTransformationPair_obj::__mClass;

void PointTransformationPair_obj::__register()
{
	PointTransformationPair_obj _hx_dummy;
	PointTransformationPair_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.specifics.PointTransformationPair",8d,7e,48,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PointTransformationPair_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PointTransformationPair_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PointTransformationPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PointTransformationPair_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
} // end namespace specifics
