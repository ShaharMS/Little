// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_vision_ds_QueueCell_String
#include <vision/ds/QueueCell_String.h>
#endif
#ifndef INCLUDED_vision_ds_Queue_String
#include <vision/ds/Queue_String.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fad06e37b7327c1a_27_new,"vision.ds.Queue_String","new",0x35115dea,"vision.ds.Queue_String.new","vision/ds/Queue.hx",27,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_45_iterator,"vision.ds.Queue_String","iterator",0x90dd6824,"vision.ds.Queue_String.iterator","vision/ds/Queue.hx",45,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_47_iterator,"vision.ds.Queue_String","iterator",0x90dd6824,"vision.ds.Queue_String.iterator","vision/ds/Queue.hx",47,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_41_iterator,"vision.ds.Queue_String","iterator",0x90dd6824,"vision.ds.Queue_String.iterator","vision/ds/Queue.hx",41,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_60_dequeue,"vision.ds.Queue_String","dequeue",0xcaac7cfa,"vision.ds.Queue_String.dequeue","vision/ds/Queue.hx",60,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_73_enqueue,"vision.ds.Queue_String","enqueue",0x8d783312,"vision.ds.Queue_String.enqueue","vision/ds/Queue.hx",73,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_94_has,"vision.ds.Queue_String","has",0x350ccce4,"vision.ds.Queue_String.has","vision/ds/Queue.hx",94,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_122_toString,"vision.ds.Queue_String","toString",0x35b1eee2,"vision.ds.Queue_String.toString","vision/ds/Queue.hx",122,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_134_get_last,"vision.ds.Queue_String","get_last",0xc4aae415,"vision.ds.Queue_String.get_last","vision/ds/Queue.hx",134,0xc9aaf7c6)
HX_LOCAL_STACK_FRAME(_hx_pos_fad06e37b7327c1a_143_set_last,"vision.ds.Queue_String","set_last",0x73083d89,"vision.ds.Queue_String.set_last","vision/ds/Queue.hx",143,0xc9aaf7c6)
namespace vision{
namespace ds{

void Queue_String_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_27_new)
HXDLIN(  27)		this->length = 0;
            	}

Dynamic Queue_String_obj::__CreateEmpty() { return new Queue_String_obj; }

void *Queue_String_obj::_hx_vtable = 0;

Dynamic Queue_String_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Queue_String_obj > _hx_result = new Queue_String_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Queue_String_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x012bf362;
}

 ::Dynamic Queue_String_obj::iterator(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,l) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_45_iterator)
HXLINE(  45)			return ::hx::IsNotNull( l->__get(0).StaticCast<  ::vision::ds::QueueCell_String >() );
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,l) HXARGC(0)
            		::String _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_47_iterator)
HXLINE(  48)			 ::vision::ds::QueueCell_String k = l->__get(0).StaticCast<  ::vision::ds::QueueCell_String >();
HXLINE(  49)			l[0] = k->next;
HXLINE(  50)			return k->value;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_41_iterator)
HXLINE(  42)		::Array< ::Dynamic> l = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->first);
HXLINE(  43)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("hasNext",6d,a5,46,18), ::Dynamic(new _hx_Closure_0(l)))
            			->setFixed(1,HX_("next",f3,84,02,49), ::Dynamic(new _hx_Closure_1(l))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Queue_String_obj,iterator,return )

::String Queue_String_obj::dequeue(){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_60_dequeue)
HXLINE(  61)		::String v = this->get_last()->value;
HXLINE(  63)		this->get_last()->previous->next = null();
HXLINE(  64)		this->length--;
HXLINE(  65)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Queue_String_obj,dequeue,return )

::String Queue_String_obj::enqueue(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_fad06e37b7327c1a_73_enqueue)
HXLINE(  74)		if (::hx::IsNull( this->first )) {
HXLINE(  75)			this->first =  ::vision::ds::QueueCell_String_obj::__alloc( HX_CTX ,value,null(),null());
HXLINE(  76)			this->length++;
HXLINE(  77)			return value;
            		}
HXLINE(  79)		this->first->previous =  ::vision::ds::QueueCell_String_obj::__alloc( HX_CTX ,value,this->first,null());
HXLINE(  80)		this->first = this->first->previous;
HXLINE(  81)		this->length++;
HXLINE(  82)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Queue_String_obj,enqueue,return )

bool Queue_String_obj::has(::String value){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_94_has)
HXLINE(  95)		 ::vision::ds::QueueCell_String processed = this->first;
HXLINE(  97)		while(::hx::IsNotNull( processed->next )){
HXLINE(  98)			if ((processed->value == value)) {
HXLINE(  99)				return true;
            			}
HXLINE( 100)			processed = processed->next;
            		}
HXLINE( 102)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Queue_String_obj,has,return )

::String Queue_String_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_122_toString)
HXLINE( 123)		::String s = HX_("[",5b,00,00,00);
HXLINE( 124)		 ::vision::ds::QueueCell_String processed = this->first;
HXLINE( 126)		while(::hx::IsNotNull( processed->next )){
HXLINE( 127)			s = (s + ((HX_("",00,00,00,00) + ::Std_obj::string(processed->value)) + HX_(" -> ",6f,2f,49,15)));
HXLINE( 128)			processed = processed->next;
            		}
HXLINE( 130)		s = (s + ((HX_("",00,00,00,00) + ::Std_obj::string(processed->value)) + HX_("]",5d,00,00,00)));
HXLINE( 131)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Queue_String_obj,toString,return )

 ::vision::ds::QueueCell_String Queue_String_obj::get_last(){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_134_get_last)
HXLINE( 135)		 ::vision::ds::QueueCell_String processed = this->first;
HXLINE( 137)		while(::hx::IsNotNull( processed->next )){
HXLINE( 138)			processed = processed->next;
            		}
HXLINE( 140)		return processed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Queue_String_obj,get_last,return )

 ::vision::ds::QueueCell_String Queue_String_obj::set_last( ::vision::ds::QueueCell_String value){
            	HX_STACKFRAME(&_hx_pos_fad06e37b7327c1a_143_set_last)
HXLINE( 144)		 ::vision::ds::QueueCell_String processed = this->first;
HXLINE( 146)		while(::hx::IsNotNull( processed->next )){
HXLINE( 147)			processed = processed->next;
            		}
HXLINE( 149)		processed = value;
HXLINE( 150)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Queue_String_obj,set_last,return )


::hx::ObjectPtr< Queue_String_obj > Queue_String_obj::__new() {
	::hx::ObjectPtr< Queue_String_obj > __this = new Queue_String_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Queue_String_obj > Queue_String_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Queue_String_obj *__this = (Queue_String_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Queue_String_obj), true, "vision.ds.Queue_String"));
	*(void **)__this = Queue_String_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Queue_String_obj::Queue_String_obj()
{
}

void Queue_String_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Queue_String);
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(first,"first");
	HX_MARK_END_CLASS();
}

void Queue_String_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(first,"first");
}

::hx::Val Queue_String_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return ::hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_last() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { return ::hx::Val( first ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dequeue") ) { return ::hx::Val( dequeue_dyn() ); }
		if (HX_FIELD_EQ(inName,"enqueue") ) { return ::hx::Val( enqueue_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_last") ) { return ::hx::Val( get_last_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_last") ) { return ::hx::Val( set_last_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Queue_String_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_last(inValue.Cast<  ::vision::ds::QueueCell_String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { first=inValue.Cast<  ::vision::ds::QueueCell_String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Queue_String_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("first",30,78,9d,00));
	outFields->push(HX_("last",56,0a,ad,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Queue_String_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Queue_String_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsObject /*  ::vision::ds::QueueCell_String */ ,(int)offsetof(Queue_String_obj,first),HX_("first",30,78,9d,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Queue_String_obj_sStaticStorageInfo = 0;
#endif

static ::String Queue_String_obj_sMemberFields[] = {
	HX_("length",e6,94,07,9f),
	HX_("first",30,78,9d,00),
	HX_("iterator",ee,49,9a,93),
	HX_("dequeue",70,62,58,fe),
	HX_("enqueue",88,18,24,c1),
	HX_("has",5a,3f,4f,00),
	HX_("toString",ac,d0,6e,38),
	HX_("get_last",df,c5,67,c7),
	HX_("set_last",53,1f,c5,75),
	::String(null()) };

::hx::Class Queue_String_obj::__mClass;

void Queue_String_obj::__register()
{
	Queue_String_obj _hx_dummy;
	Queue_String_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.Queue_String",f8,e0,85,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Queue_String_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Queue_String_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Queue_String_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Queue_String_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
