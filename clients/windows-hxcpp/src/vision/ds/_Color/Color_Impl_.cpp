// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_vision_ds__Color_Color_Impl_
#include <vision/ds/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_vision_tools_MathTools
#include <vision/tools/MathTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_581_fromInt,"vision.ds._Color.Color_Impl_","fromInt",0x8ea924e9,"vision.ds._Color.Color_Impl_.fromInt","vision/ds/Color.hx",581,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_593_fromRGBA,"vision.ds._Color.Color_Impl_","fromRGBA",0x4b2c4f5a,"vision.ds._Color.Color_Impl_.fromRGBA","vision/ds/Color.hx",593,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_604_from8Bit,"vision.ds._Color.Color_Impl_","from8Bit",0x39f91a1b,"vision.ds._Color.Color_Impl_.from8Bit","vision/ds/Color.hx",604,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_618_fromRGBAFloat,"vision.ds._Color.Color_Impl_","fromRGBAFloat",0x78b7ffe2,"vision.ds._Color.Color_Impl_.fromRGBAFloat","vision/ds/Color.hx",618,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_633_fromCMYK,"vision.ds._Color.Color_Impl_","fromCMYK",0x4146bda2,"vision.ds._Color.Color_Impl_.fromCMYK","vision/ds/Color.hx",633,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_647_fromHSB,"vision.ds._Color.Color_Impl_","fromHSB",0x8ea84af1,"vision.ds._Color.Color_Impl_.fromHSB","vision/ds/Color.hx",647,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_661_fromHSL,"vision.ds._Color.Color_Impl_","fromHSL",0x8ea84afb,"vision.ds._Color.Color_Impl_.fromHSL","vision/ds/Color.hx",661,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_681_fromString,"vision.ds._Color.Color_Impl_","fromString",0x199ec917,"vision.ds._Color.Color_Impl_.fromString","vision/ds/Color.hx",681,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_703_getHSBColorWheel,"vision.ds._Color.Color_Impl_","getHSBColorWheel",0x6e2bd7d5,"vision.ds._Color.Color_Impl_.getHSBColorWheel","vision/ds/Color.hx",703,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_714_interpolate,"vision.ds._Color.Color_Impl_","interpolate",0xdf500e05,"vision.ds._Color.Color_Impl_.interpolate","vision/ds/Color.hx",714,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_732_gradient,"vision.ds._Color.Color_Impl_","gradient",0xcc0f4e2c,"vision.ds._Color.Color_Impl_.gradient","vision/ds/Color.hx",732,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_737_gradient,"vision.ds._Color.Color_Impl_","gradient",0xcc0f4e2c,"vision.ds._Color.Color_Impl_.gradient","vision/ds/Color.hx",737,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_755_makeRandom,"vision.ds._Color.Color_Impl_","makeRandom",0xce8991cd,"vision.ds._Color.Color_Impl_.makeRandom","vision/ds/Color.hx",755,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_763_multiply,"vision.ds._Color.Color_Impl_","multiply",0x3c5cf660,"vision.ds._Color.Color_Impl_.multiply","vision/ds/Color.hx",763,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_772_add,"vision.ds._Color.Color_Impl_","add",0x706a4765,"vision.ds._Color.Color_Impl_.add","vision/ds/Color.hx",772,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_780_subtract,"vision.ds._Color.Color_Impl_","subtract",0x99e18950,"vision.ds._Color.Color_Impl_.subtract","vision/ds/Color.hx",780,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_790_divide,"vision.ds._Color.Color_Impl_","divide",0x7f077cb5,"vision.ds._Color.Color_Impl_.divide","vision/ds/Color.hx",790,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_801_getComplementHarmony,"vision.ds._Color.Color_Impl_","getComplementHarmony",0x50719e86,"vision.ds._Color.Color_Impl_.getComplementHarmony","vision/ds/Color.hx",801,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_811_getAnalogousHarmony,"vision.ds._Color.Color_Impl_","getAnalogousHarmony",0x12809723,"vision.ds._Color.Color_Impl_.getAnalogousHarmony","vision/ds/Color.hx",811,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_825_getSplitComplementHarmony,"vision.ds._Color.Color_Impl_","getSplitComplementHarmony",0xe7762700,"vision.ds._Color.Color_Impl_.getSplitComplementHarmony","vision/ds/Color.hx",825,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_839_getTriadicHarmony,"vision.ds._Color.Color_Impl_","getTriadicHarmony",0x32d4e238,"vision.ds._Color.Color_Impl_.getTriadicHarmony","vision/ds/Color.hx",839,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_852_to24Bit,"vision.ds._Color.Color_Impl_","to24Bit",0x5c9fae14,"vision.ds._Color.Color_Impl_.to24Bit","vision/ds/Color.hx",852,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_863_toHexString,"vision.ds._Color.Color_Impl_","toHexString",0x2dd0a255,"vision.ds._Color.Color_Impl_.toHexString","vision/ds/Color.hx",863,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_872_toWebString,"vision.ds._Color.Color_Impl_","toWebString",0xf71d94ce,"vision.ds._Color.Color_Impl_.toWebString","vision/ds/Color.hx",872,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_881_darken,"vision.ds._Color.Color_Impl_","darken",0xe12f839b,"vision.ds._Color.Color_Impl_.darken","vision/ds/Color.hx",881,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_894_lighten,"vision.ds._Color.Color_Impl_","lighten",0x50919203,"vision.ds._Color.Color_Impl_.lighten","vision/ds/Color.hx",894,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_906_invert,"vision.ds._Color.Color_Impl_","invert",0x5fce3452,"vision.ds._Color.Color_Impl_.invert","vision/ds/Color.hx",906,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_922_setRGBA,"vision.ds._Color.Color_Impl_","setRGBA",0x47c2f49a,"vision.ds._Color.Color_Impl_.setRGBA","vision/ds/Color.hx",922,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_939_setRGBAFloat,"vision.ds._Color.Color_Impl_","setRGBAFloat",0x95c252a2,"vision.ds._Color.Color_Impl_.setRGBAFloat","vision/ds/Color.hx",939,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_957_setCMYK,"vision.ds._Color.Color_Impl_","setCMYK",0x3ddd62e2,"vision.ds._Color.Color_Impl_.setCMYK","vision/ds/Color.hx",957,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_974_setHSB,"vision.ds._Color.Color_Impl_","setHSB",0x2f5c0db1,"vision.ds._Color.Color_Impl_.setHSB","vision/ds/Color.hx",974,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_989_setHSL,"vision.ds._Color.Color_Impl_","setHSL",0x2f5c0dbb,"vision.ds._Color.Color_Impl_.setHSL","vision/ds/Color.hx",989,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_998_setHSChromaMatch,"vision.ds._Color.Color_Impl_","setHSChromaMatch",0x4ea819fe,"vision.ds._Color.Color_Impl_.setHSChromaMatch","vision/ds/Color.hx",998,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1019_grayscale,"vision.ds._Color.Color_Impl_","grayscale",0xe779280b,"vision.ds._Color.Color_Impl_.grayscale","vision/ds/Color.hx",1019,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1029_blackOrWhite,"vision.ds._Color.Color_Impl_","blackOrWhite",0x00f454c3,"vision.ds._Color.Color_Impl_.blackOrWhite","vision/ds/Color.hx",1029,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1041__new,"vision.ds._Color.Color_Impl_","_new",0xeb495b9d,"vision.ds._Color.Color_Impl_._new","vision/ds/Color.hx",1041,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1049_getThis,"vision.ds._Color.Color_Impl_","getThis",0x562cfd58,"vision.ds._Color.Color_Impl_.getThis","vision/ds/Color.hx",1049,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1053_validate,"vision.ds._Color.Color_Impl_","validate",0xa6b3e4d2,"vision.ds._Color.Color_Impl_.validate","vision/ds/Color.hx",1053,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1060_get_red,"vision.ds._Color.Color_Impl_","get_red",0x5d79e92c,"vision.ds._Color.Color_Impl_.get_red","vision/ds/Color.hx",1060,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1064_get_green,"vision.ds._Color.Color_Impl_","get_green",0xd1d80b5e,"vision.ds._Color.Color_Impl_.get_green","vision/ds/Color.hx",1064,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1068_get_blue,"vision.ds._Color.Color_Impl_","get_blue",0x62a4125f,"vision.ds._Color.Color_Impl_.get_blue","vision/ds/Color.hx",1068,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1072_get_alpha,"vision.ds._Color.Color_Impl_","get_alpha",0x5981a3f9,"vision.ds._Color.Color_Impl_.get_alpha","vision/ds/Color.hx",1072,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1076_get_redFloat,"vision.ds._Color.Color_Impl_","get_redFloat",0x80718cd0,"vision.ds._Color.Color_Impl_.get_redFloat","vision/ds/Color.hx",1076,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1080_get_greenFloat,"vision.ds._Color.Color_Impl_","get_greenFloat",0x9770355e,"vision.ds._Color.Color_Impl_.get_greenFloat","vision/ds/Color.hx",1080,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1084_get_blueFloat,"vision.ds._Color.Color_Impl_","get_blueFloat",0x89062abd,"vision.ds._Color.Color_Impl_.get_blueFloat","vision/ds/Color.hx",1084,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1088_get_alphaFloat,"vision.ds._Color.Color_Impl_","get_alphaFloat",0xe3508ae3,"vision.ds._Color.Color_Impl_.get_alphaFloat","vision/ds/Color.hx",1088,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1091_set_red,"vision.ds._Color.Color_Impl_","set_red",0x507b7a38,"vision.ds._Color.Color_Impl_.set_red","vision/ds/Color.hx",1091,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1098_set_green,"vision.ds._Color.Color_Impl_","set_green",0xb528f76a,"vision.ds._Color.Color_Impl_.set_green","vision/ds/Color.hx",1098,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1105_set_blue,"vision.ds._Color.Color_Impl_","set_blue",0x11016bd3,"vision.ds._Color.Color_Impl_.set_blue","vision/ds/Color.hx",1105,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1112_set_alpha,"vision.ds._Color.Color_Impl_","set_alpha",0x3cd29005,"vision.ds._Color.Color_Impl_.set_alpha","vision/ds/Color.hx",1112,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1119_set_redFloat,"vision.ds._Color.Color_Impl_","set_redFloat",0x956ab044,"vision.ds._Color.Color_Impl_.set_redFloat","vision/ds/Color.hx",1119,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1124_set_greenFloat,"vision.ds._Color.Color_Impl_","set_greenFloat",0xb7901dd2,"vision.ds._Color.Color_Impl_.set_greenFloat","vision/ds/Color.hx",1124,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1129_set_blueFloat,"vision.ds._Color.Color_Impl_","set_blueFloat",0xce0c0cc9,"vision.ds._Color.Color_Impl_.set_blueFloat","vision/ds/Color.hx",1129,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1134_set_alphaFloat,"vision.ds._Color.Color_Impl_","set_alphaFloat",0x03707357,"vision.ds._Color.Color_Impl_.set_alphaFloat","vision/ds/Color.hx",1134,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1140_get_cyan,"vision.ds._Color.Color_Impl_","get_cyan",0x635714e8,"vision.ds._Color.Color_Impl_.get_cyan","vision/ds/Color.hx",1140,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1144_get_magenta,"vision.ds._Color.Color_Impl_","get_magenta",0x54b55384,"vision.ds._Color.Color_Impl_.get_magenta","vision/ds/Color.hx",1144,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1148_get_yellow,"vision.ds._Color.Color_Impl_","get_yellow",0x860eaa79,"vision.ds._Color.Color_Impl_.get_yellow","vision/ds/Color.hx",1148,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1152_get_black,"vision.ds._Color.Color_Impl_","get_black",0xecdcd25a,"vision.ds._Color.Color_Impl_.get_black","vision/ds/Color.hx",1152,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1155_set_cyan,"vision.ds._Color.Color_Impl_","set_cyan",0x11b46e5c,"vision.ds._Color.Color_Impl_.set_cyan","vision/ds/Color.hx",1155,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1160_set_magenta,"vision.ds._Color.Color_Impl_","set_magenta",0x5f225a90,"vision.ds._Color.Color_Impl_.set_magenta","vision/ds/Color.hx",1160,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1165_set_yellow,"vision.ds._Color.Color_Impl_","set_yellow",0x898c48ed,"vision.ds._Color.Color_Impl_.set_yellow","vision/ds/Color.hx",1165,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1170_set_black,"vision.ds._Color.Color_Impl_","set_black",0xd02dbe66,"vision.ds._Color.Color_Impl_.set_black","vision/ds/Color.hx",1170,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1175_get_hue,"vision.ds._Color.Color_Impl_","get_hue",0x5d726093,"vision.ds._Color.Color_Impl_.get_hue","vision/ds/Color.hx",1175,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1186_get_brightness,"vision.ds._Color.Color_Impl_","get_brightness",0x2585ff56,"vision.ds._Color.Color_Impl_.get_brightness","vision/ds/Color.hx",1186,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1190_get_saturation,"vision.ds._Color.Color_Impl_","get_saturation",0xb6b64557,"vision.ds._Color.Color_Impl_.get_saturation","vision/ds/Color.hx",1190,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1194_get_lightness,"vision.ds._Color.Color_Impl_","get_lightness",0x857c1a88,"vision.ds._Color.Color_Impl_.get_lightness","vision/ds/Color.hx",1194,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1197_set_hue,"vision.ds._Color.Color_Impl_","set_hue",0x5073f19f,"vision.ds._Color.Color_Impl_.set_hue","vision/ds/Color.hx",1197,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1202_set_saturation,"vision.ds._Color.Color_Impl_","set_saturation",0xd6d62dcb,"vision.ds._Color.Color_Impl_.set_saturation","vision/ds/Color.hx",1202,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1207_set_brightness,"vision.ds._Color.Color_Impl_","set_brightness",0x45a5e7ca,"vision.ds._Color.Color_Impl_.set_brightness","vision/ds/Color.hx",1207,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1212_set_lightness,"vision.ds._Color.Color_Impl_","set_lightness",0xca81fc94,"vision.ds._Color.Color_Impl_.set_lightness","vision/ds/Color.hx",1212,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1217_set_rgb,"vision.ds._Color.Color_Impl_","set_rgb",0x507b7bf4,"vision.ds._Color.Color_Impl_.set_rgb","vision/ds/Color.hx",1217,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1224_get_rgb,"vision.ds._Color.Color_Impl_","get_rgb",0x5d79eae8,"vision.ds._Color.Color_Impl_.get_rgb","vision/ds/Color.hx",1224,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1228_maxColor,"vision.ds._Color.Color_Impl_","maxColor",0x9649d85b,"vision.ds._Color.Color_Impl_.maxColor","vision/ds/Color.hx",1228,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1232_minColor,"vision.ds._Color.Color_Impl_","minColor",0xe363f2ad,"vision.ds._Color.Color_Impl_.minColor","vision/ds/Color.hx",1232,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1236_boundChannel,"vision.ds._Color.Color_Impl_","boundChannel",0xdcc8fe61,"vision.ds._Color.Color_Impl_.boundChannel","vision/ds/Color.hx",1236,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1243_toString,"vision.ds._Color.Color_Impl_","toString",0xda3ee4e8,"vision.ds._Color.Color_Impl_.toString","vision/ds/Color.hx",1243,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1248_toInt,"vision.ds._Color.Color_Impl_","toInt",0x0ce4ec78,"vision.ds._Color.Color_Impl_.toInt","vision/ds/Color.hx",1248,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1257_color_greater_than_color,"vision.ds._Color.Color_Impl_","color_greater_than_color",0x3dc0ea02,"vision.ds._Color.Color_Impl_.color_greater_than_color","vision/ds/Color.hx",1257,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1262_color_greater_than_int,"vision.ds._Color.Color_Impl_","color_greater_than_int",0x5256cfce,"vision.ds._Color.Color_Impl_.color_greater_than_int","vision/ds/Color.hx",1262,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1267_int_greater_than_color,"vision.ds._Color.Color_Impl_","int_greater_than_color",0x9c4b6ef6,"vision.ds._Color.Color_Impl_.int_greater_than_color","vision/ds/Color.hx",1267,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1272_color_greater_than_float,"vision.ds._Color.Color_Impl_","color_greater_than_float",0xf5fb3e3b,"vision.ds._Color.Color_Impl_.color_greater_than_float","vision/ds/Color.hx",1272,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1277_float_greater_than_color,"vision.ds._Color.Color_Impl_","float_greater_than_color",0xa433bd69,"vision.ds._Color.Color_Impl_.float_greater_than_color","vision/ds/Color.hx",1277,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1282_color_greater_than_equal_color,"vision.ds._Color.Color_Impl_","color_greater_than_equal_color",0x18468137,"vision.ds._Color.Color_Impl_.color_greater_than_equal_color","vision/ds/Color.hx",1282,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1287_color_greater_than_equal_int,"vision.ds._Color.Color_Impl_","color_greater_than_equal_int",0xc888bfc3,"vision.ds._Color.Color_Impl_.color_greater_than_equal_int","vision/ds/Color.hx",1287,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1292_int_greater_than_equal_color,"vision.ds._Color.Color_Impl_","int_greater_than_equal_color",0xae01352b,"vision.ds._Color.Color_Impl_.int_greater_than_equal_color","vision/ds/Color.hx",1292,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1297_color_greater_than_equal_float,"vision.ds._Color.Color_Impl_","color_greater_than_equal_float",0xd080d570,"vision.ds._Color.Color_Impl_.color_greater_than_equal_float","vision/ds/Color.hx",1297,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1302_float_greater_than_equal_color,"vision.ds._Color.Color_Impl_","float_greater_than_equal_color",0xcc3c5bde,"vision.ds._Color.Color_Impl_.float_greater_than_equal_color","vision/ds/Color.hx",1302,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1307_color_less_than_color,"vision.ds._Color.Color_Impl_","color_less_than_color",0x967f8d53,"vision.ds._Color.Color_Impl_.color_less_than_color","vision/ds/Color.hx",1307,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1312_color_less_than_int,"vision.ds._Color.Color_Impl_","color_less_than_int",0xa62f4cdf,"vision.ds._Color.Color_Impl_.color_less_than_int","vision/ds/Color.hx",1312,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1317_int_less_than_color,"vision.ds._Color.Color_Impl_","int_less_than_color",0xa63b27df,"vision.ds._Color.Color_Impl_.int_less_than_color","vision/ds/Color.hx",1317,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1322_color_less_than_float,"vision.ds._Color.Color_Impl_","color_less_than_float",0x4eb9e18c,"vision.ds._Color.Color_Impl_.color_less_than_float","vision/ds/Color.hx",1322,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1327_float_less_than_color,"vision.ds._Color.Color_Impl_","float_less_than_color",0x0beba38c,"vision.ds._Color.Color_Impl_.float_less_than_color","vision/ds/Color.hx",1327,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1332_color_less_than_equal_color,"vision.ds._Color.Color_Impl_","color_less_than_equal_color",0xe66bf748,"vision.ds._Color.Color_Impl_.color_less_than_equal_color","vision/ds/Color.hx",1332,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1337_color_less_than_equal_int,"vision.ds._Color.Color_Impl_","color_less_than_equal_int",0x4c49df94,"vision.ds._Color.Color_Impl_.color_less_than_equal_int","vision/ds/Color.hx",1337,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1342_int_less_than_equal_color,"vision.ds._Color.Color_Impl_","int_less_than_equal_color",0x9b9402d4,"vision.ds._Color.Color_Impl_.int_less_than_equal_color","vision/ds/Color.hx",1342,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1347_color_less_than_equal_float,"vision.ds._Color.Color_Impl_","color_less_than_equal_float",0x9ea64b81,"vision.ds._Color.Color_Impl_.color_less_than_equal_float","vision/ds/Color.hx",1347,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1352_float_less_than_equal_color,"vision.ds._Color.Color_Impl_","float_less_than_equal_color",0x4f53fe41,"vision.ds._Color.Color_Impl_.float_less_than_equal_color","vision/ds/Color.hx",1352,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1357_color_equal_color,"vision.ds._Color.Color_Impl_","color_equal_color",0xe0a0f380,"vision.ds._Color.Color_Impl_.color_equal_color","vision/ds/Color.hx",1357,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1362_color_equal_int,"vision.ds._Color.Color_Impl_","color_equal_int",0xf618ddcc,"vision.ds._Color.Color_Impl_.color_equal_int","vision/ds/Color.hx",1362,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1367_int_equal_color,"vision.ds._Color.Color_Impl_","int_equal_color",0xf241580c,"vision.ds._Color.Color_Impl_.int_equal_color","vision/ds/Color.hx",1367,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1372_color_equal_float,"vision.ds._Color.Color_Impl_","color_equal_float",0x98db47b9,"vision.ds._Color.Color_Impl_.color_equal_float","vision/ds/Color.hx",1372,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1377_float_equal_color,"vision.ds._Color.Color_Impl_","float_equal_color",0xb8e53939,"vision.ds._Color.Color_Impl_.float_equal_color","vision/ds/Color.hx",1377,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1382_color_not_equal_color,"vision.ds._Color.Color_Impl_","color_not_equal_color",0xa5767f14,"vision.ds._Color.Color_Impl_.color_not_equal_color","vision/ds/Color.hx",1382,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1387_color_not_equal_int,"vision.ds._Color.Color_Impl_","color_not_equal_int",0x7a129c60,"vision.ds._Color.Color_Impl_.color_not_equal_int","vision/ds/Color.hx",1387,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1392_int_not_equal_color,"vision.ds._Color.Color_Impl_","int_not_equal_color",0xb53219a0,"vision.ds._Color.Color_Impl_.int_not_equal_color","vision/ds/Color.hx",1392,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1397_color_not_equal_float,"vision.ds._Color.Color_Impl_","color_not_equal_float",0x5db0d34d,"vision.ds._Color.Color_Impl_.color_not_equal_float","vision/ds/Color.hx",1397,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1402_float_not_equal_color,"vision.ds._Color.Color_Impl_","float_not_equal_color",0x1ae2954d,"vision.ds._Color.Color_Impl_.float_not_equal_color","vision/ds/Color.hx",1402,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1407_color_bitwise_and_color,"vision.ds._Color.Color_Impl_","color_bitwise_and_color",0x2bef1455,"vision.ds._Color.Color_Impl_.color_bitwise_and_color","vision/ds/Color.hx",1407,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1412_color_bitwise_and_int,"vision.ds._Color.Color_Impl_","color_bitwise_and_int",0xe4dfaf61,"vision.ds._Color.Color_Impl_.color_bitwise_and_int","vision/ds/Color.hx",1412,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1417_int_bitwise_and_color,"vision.ds._Color.Color_Impl_","int_bitwise_and_color",0x55af69e1,"vision.ds._Color.Color_Impl_.int_bitwise_and_color","vision/ds/Color.hx",1417,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1422_color_bitwise_or_color,"vision.ds._Color.Color_Impl_","color_bitwise_or_color",0x77b921ad,"vision.ds._Color.Color_Impl_.color_bitwise_or_color","vision/ds/Color.hx",1422,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1427_color_bitwise_or_int,"vision.ds._Color.Color_Impl_","color_bitwise_or_int",0x863736b9,"vision.ds._Color.Color_Impl_.color_bitwise_or_int","vision/ds/Color.hx",1427,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1432_int_bitwise_or_color,"vision.ds._Color.Color_Impl_","int_bitwise_or_color",0x2c24c1a1,"vision.ds._Color.Color_Impl_.int_bitwise_or_color","vision/ds/Color.hx",1432,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1437_color_bitwise_xor_color,"vision.ds._Color.Color_Impl_","color_bitwise_xor_color",0x9efe7419,"vision.ds._Color.Color_Impl_.color_bitwise_xor_color","vision/ds/Color.hx",1437,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1442_color_bitwise_xor_int,"vision.ds._Color.Color_Impl_","color_bitwise_xor_int",0x1744d625,"vision.ds._Color.Color_Impl_.color_bitwise_xor_int","vision/ds/Color.hx",1442,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1447_int_bitwise_xor_color,"vision.ds._Color.Color_Impl_","int_bitwise_xor_color",0xc8bec9a5,"vision.ds._Color.Color_Impl_.int_bitwise_xor_color","vision/ds/Color.hx",1447,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1452_color_bitwise_left_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_left_shift_color",0xb84338d4,"vision.ds._Color.Color_Impl_.color_bitwise_left_shift_color","vision/ds/Color.hx",1452,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1457_color_bitwise_left_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_left_shift_int",0xfa496620,"vision.ds._Color.Color_Impl_.color_bitwise_left_shift_int","vision/ds/Color.hx",1457,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1462_int_bitwise_left_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_left_shift_color",0x4dfdecc8,"vision.ds._Color.Color_Impl_.int_bitwise_left_shift_color","vision/ds/Color.hx",1462,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1467_color_bitwise_right_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_right_shift_color",0xc60d561d,"vision.ds._Color.Color_Impl_.color_bitwise_right_shift_color","vision/ds/Color.hx",1467,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1472_color_bitwise_right_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_right_shift_int",0x17786f29,"vision.ds._Color.Color_Impl_.color_bitwise_right_shift_int","vision/ds/Color.hx",1472,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1477_int_bitwise_right_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_right_shift_color",0x33b017a9,"vision.ds._Color.Color_Impl_.int_bitwise_right_shift_color","vision/ds/Color.hx",1477,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1482_color_bitwise_unsigned_right_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_unsigned_right_shift_color",0xbde45a9f,"vision.ds._Color.Color_Impl_.color_bitwise_unsigned_right_shift_color","vision/ds/Color.hx",1482,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1487_color_bitwise_unsigned_right_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_unsigned_right_shift_int",0x26edef2b,"vision.ds._Color.Color_Impl_.color_bitwise_unsigned_right_shift_int","vision/ds/Color.hx",1487,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1492_int_bitwise_unsigned_right_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_unsigned_right_shift_color",0xd91b0793,"vision.ds._Color.Color_Impl_.int_bitwise_unsigned_right_shift_color","vision/ds/Color.hx",1492,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_29_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",29,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_45_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",45,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_50_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",50,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_55_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",55,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_60_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",60,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_65_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",65,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_70_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",70,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_75_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",75,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_80_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",80,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_85_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",85,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_90_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",90,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_95_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",95,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_100_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",100,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_105_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",105,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_110_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",110,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_115_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",115,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_120_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",120,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_125_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",125,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_130_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",130,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_135_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",135,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_140_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",140,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_145_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",145,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_150_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",150,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_155_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",155,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_160_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",160,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_165_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",165,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_170_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",170,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_175_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",175,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_180_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",180,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_185_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",185,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_190_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",190,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_195_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",195,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_200_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",200,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_205_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",205,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_210_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",210,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_215_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",215,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_220_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",220,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_225_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",225,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_230_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",230,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_235_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",235,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_240_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",240,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_245_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",245,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_250_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",250,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_255_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",255,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_260_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",260,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_265_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",265,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_270_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",270,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_275_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",275,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_280_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",280,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_285_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",285,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_290_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",290,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_295_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",295,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_300_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",300,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_305_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",305,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_310_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",310,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_315_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",315,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_320_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",320,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_325_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",325,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_330_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",330,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_335_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",335,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_340_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",340,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_345_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",345,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_350_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",350,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_355_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",355,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_360_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",360,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_365_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",365,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_370_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",370,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_375_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",375,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_380_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",380,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_385_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",385,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_390_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",390,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_395_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",395,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_400_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",400,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_405_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",405,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_410_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",410,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_415_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",415,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_420_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",420,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_425_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",425,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_430_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",430,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_435_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",435,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_440_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",440,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_445_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",445,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_450_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",450,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_455_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",455,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_460_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",460,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_465_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",465,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_470_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",470,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_475_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",475,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_480_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",480,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_485_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",485,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_490_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",490,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_495_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",495,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_500_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",500,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_505_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",505,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_510_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",510,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_515_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",515,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_520_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",520,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_525_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",525,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_530_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",530,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_572_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",572,0x1017c334)
namespace vision{
namespace ds{
namespace _Color{

void Color_Impl__obj::__construct() { }

Dynamic Color_Impl__obj::__CreateEmpty() { return new Color_Impl__obj; }

void *Color_Impl__obj::_hx_vtable = 0;

Dynamic Color_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Color_Impl__obj > _hx_result = new Color_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Color_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19955d80;
}

int Color_Impl__obj::TRANSPARENT;

int Color_Impl__obj::TRANSPARENT_COLOR;

int Color_Impl__obj::WHITE;

int Color_Impl__obj::OFFWHITE;

int Color_Impl__obj::GRAY;

int Color_Impl__obj::BLACK;

int Color_Impl__obj::GREEN;

int Color_Impl__obj::YELLOW;

int Color_Impl__obj::ORANGE;

int Color_Impl__obj::RED;

int Color_Impl__obj::PURPLE;

int Color_Impl__obj::BLUE;

int Color_Impl__obj::BROWN;

int Color_Impl__obj::SEPIA;

int Color_Impl__obj::PINK;

int Color_Impl__obj::MAGENTA;

int Color_Impl__obj::CYAN;

int Color_Impl__obj::SILVER;

int Color_Impl__obj::GOLD;

int Color_Impl__obj::OLIVE;

int Color_Impl__obj::MAROON;

int Color_Impl__obj::BORDEAUX;

int Color_Impl__obj::NAVY;

int Color_Impl__obj::TEAL;

int Color_Impl__obj::FUCHSIA;

int Color_Impl__obj::AQUA;

int Color_Impl__obj::LIME;

int Color_Impl__obj::CHARCOAL;

int Color_Impl__obj::ONYX;

int Color_Impl__obj::JET;

int Color_Impl__obj::JET_BLACK;

int Color_Impl__obj::ROYAL_BLUE;

int Color_Impl__obj::CHARTREUSE;

int Color_Impl__obj::CERULEAN;

int Color_Impl__obj::PERIWINKLE;

int Color_Impl__obj::VERMILION;

int Color_Impl__obj::MAUVE;

int Color_Impl__obj::AZURE;

int Color_Impl__obj::TANGERINE;

int Color_Impl__obj::INDIGO;

int Color_Impl__obj::MARIGOLD;

int Color_Impl__obj::COBALT;

int Color_Impl__obj::LAVENDER;

int Color_Impl__obj::TURQUOISE;

int Color_Impl__obj::OCHRE;

int Color_Impl__obj::AQUAMARINE;

int Color_Impl__obj::RUSSET;

int Color_Impl__obj::TOPAZ;

int Color_Impl__obj::APRICOT;

int Color_Impl__obj::AMETHYST;

int Color_Impl__obj::SAFFRON;

int Color_Impl__obj::LILAC;

int Color_Impl__obj::CRIMSON;

int Color_Impl__obj::SLATE;

int Color_Impl__obj::JADE;

int Color_Impl__obj::CORAL;

int Color_Impl__obj::BURGUNDY;

int Color_Impl__obj::SIENNA;

int Color_Impl__obj::IVORY;

int Color_Impl__obj::MULBERRY;

int Color_Impl__obj::SANDALWOOD;

int Color_Impl__obj::GARNET;

int Color_Impl__obj::PEWTER;

int Color_Impl__obj::CARNATION;

int Color_Impl__obj::CITRINE;

int Color_Impl__obj::CELADON;

int Color_Impl__obj::HELIOTROPE;

int Color_Impl__obj::PUCE;

int Color_Impl__obj::CINNABAR;

int Color_Impl__obj::VIRIDIAN;

int Color_Impl__obj::ECRU;

int Color_Impl__obj::ALABASTER;

int Color_Impl__obj::SAPPHIRE;

int Color_Impl__obj::PEARL;

int Color_Impl__obj::SALMON;

int Color_Impl__obj::UMBER;

int Color_Impl__obj::TURMERIC;

int Color_Impl__obj::MAHOGANY;

int Color_Impl__obj::PERSIMMON;

int Color_Impl__obj::ROSEWOOD;

int Color_Impl__obj::CARAMEL;

int Color_Impl__obj::DANDELION;

int Color_Impl__obj::FERN;

int Color_Impl__obj::LAPIS;

int Color_Impl__obj::DENIM;

int Color_Impl__obj::SABLE;

int Color_Impl__obj::ORCHID;

int Color_Impl__obj::TAWNY;

int Color_Impl__obj::PINE;

int Color_Impl__obj::LEMON;

int Color_Impl__obj::SCARLET;

int Color_Impl__obj::TAUPE;

int Color_Impl__obj::CERISE;

int Color_Impl__obj::AMBER;

int Color_Impl__obj::CINNAMON;

int Color_Impl__obj::SADDLE_BROWN;

int Color_Impl__obj::TOMATO;

int Color_Impl__obj::CORNSILK;

int Color_Impl__obj::VIOLET;

 ::EReg Color_Impl__obj::COLOR_REGEX;

int Color_Impl__obj::fromInt(int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_581_fromInt)
HXDLIN( 581)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,fromInt,return )

int Color_Impl__obj::fromRGBA(int Red,int Green,int Blue,::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_593_fromRGBA)
HXLINE( 594)		int color = 0;
HXLINE( 595)		{
HXLINE( 595)			color = (color & -16711681);
HXDLIN( 595)			int color1;
HXDLIN( 595)			if ((Red > 255)) {
HXLINE( 595)				color1 = 255;
            			}
            			else {
HXLINE( 595)				if ((Red < 0)) {
HXLINE( 595)					color1 = 0;
            				}
            				else {
HXLINE( 595)					color1 = Red;
            				}
            			}
HXDLIN( 595)			color = (color | (color1 << 16));
            		}
HXDLIN( 595)		{
HXLINE( 595)			color = (color & -65281);
HXDLIN( 595)			int color2;
HXDLIN( 595)			if ((Green > 255)) {
HXLINE( 595)				color2 = 255;
            			}
            			else {
HXLINE( 595)				if ((Green < 0)) {
HXLINE( 595)					color2 = 0;
            				}
            				else {
HXLINE( 595)					color2 = Green;
            				}
            			}
HXDLIN( 595)			color = (color | (color2 << 8));
            		}
HXDLIN( 595)		{
HXLINE( 595)			color = (color & -256);
HXDLIN( 595)			int color3;
HXDLIN( 595)			if ((Blue > 255)) {
HXLINE( 595)				color3 = 255;
            			}
            			else {
HXLINE( 595)				if ((Blue < 0)) {
HXLINE( 595)					color3 = 0;
            				}
            				else {
HXLINE( 595)					color3 = Blue;
            				}
            			}
HXDLIN( 595)			color = (color | color3);
            		}
HXDLIN( 595)		{
HXLINE( 595)			color = (color & 16777215);
HXDLIN( 595)			int color4;
HXDLIN( 595)			if ((Alpha > 255)) {
HXLINE( 595)				color4 = 255;
            			}
            			else {
HXLINE( 595)				if ((Alpha < 0)) {
HXLINE( 595)					color4 = 0;
            				}
            				else {
HXLINE( 595)					color4 = Alpha;
            				}
            			}
HXDLIN( 595)			color = (color | (color4 << 24));
            		}
HXDLIN( 595)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromRGBA,return )

int Color_Impl__obj::from8Bit(int Value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_604_from8Bit)
HXLINE( 605)		int color = 0;
HXLINE( 606)		{
HXLINE( 606)			color = (color & -16711681);
HXDLIN( 606)			int color1;
HXDLIN( 606)			if ((Value > 255)) {
HXLINE( 606)				color1 = 255;
            			}
            			else {
HXLINE( 606)				if ((Value < 0)) {
HXLINE( 606)					color1 = 0;
            				}
            				else {
HXLINE( 606)					color1 = Value;
            				}
            			}
HXDLIN( 606)			color = (color | (color1 << 16));
            		}
HXDLIN( 606)		{
HXLINE( 606)			color = (color & -65281);
HXDLIN( 606)			int color2;
HXDLIN( 606)			if ((Value > 255)) {
HXLINE( 606)				color2 = 255;
            			}
            			else {
HXLINE( 606)				if ((Value < 0)) {
HXLINE( 606)					color2 = 0;
            				}
            				else {
HXLINE( 606)					color2 = Value;
            				}
            			}
HXDLIN( 606)			color = (color | (color2 << 8));
            		}
HXDLIN( 606)		{
HXLINE( 606)			color = (color & -256);
HXDLIN( 606)			int color3;
HXDLIN( 606)			if ((Value > 255)) {
HXLINE( 606)				color3 = 255;
            			}
            			else {
HXLINE( 606)				if ((Value < 0)) {
HXLINE( 606)					color3 = 0;
            				}
            				else {
HXLINE( 606)					color3 = Value;
            				}
            			}
HXDLIN( 606)			color = (color | color3);
            		}
HXDLIN( 606)		{
HXLINE( 606)			color = (color & 16777215);
HXDLIN( 606)			color = (color | 16777216);
            		}
HXDLIN( 606)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,from8Bit,return )

int Color_Impl__obj::fromRGBAFloat(Float Red,Float Green,Float Blue,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_618_fromRGBAFloat)
HXLINE( 619)		int color = 0;
HXLINE( 620)		{
HXLINE( 620)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 620)			color = (color & -16711681);
HXDLIN( 620)			int color1;
HXDLIN( 620)			if ((value > 255)) {
HXLINE( 620)				color1 = 255;
            			}
            			else {
HXLINE( 620)				if ((value < 0)) {
HXLINE( 620)					color1 = 0;
            				}
            				else {
HXLINE( 620)					color1 = value;
            				}
            			}
HXDLIN( 620)			color = (color | (color1 << 16));
            		}
HXDLIN( 620)		{
HXLINE( 620)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 620)			color = (color & -65281);
HXDLIN( 620)			int color2;
HXDLIN( 620)			if ((value1 > 255)) {
HXLINE( 620)				color2 = 255;
            			}
            			else {
HXLINE( 620)				if ((value1 < 0)) {
HXLINE( 620)					color2 = 0;
            				}
            				else {
HXLINE( 620)					color2 = value1;
            				}
            			}
HXDLIN( 620)			color = (color | (color2 << 8));
            		}
HXDLIN( 620)		{
HXLINE( 620)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 620)			color = (color & -256);
HXDLIN( 620)			int color3;
HXDLIN( 620)			if ((value2 > 255)) {
HXLINE( 620)				color3 = 255;
            			}
            			else {
HXLINE( 620)				if ((value2 < 0)) {
HXLINE( 620)					color3 = 0;
            				}
            				else {
HXLINE( 620)					color3 = value2;
            				}
            			}
HXDLIN( 620)			color = (color | color3);
            		}
HXDLIN( 620)		{
HXLINE( 620)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 620)			color = (color & 16777215);
HXDLIN( 620)			int color4;
HXDLIN( 620)			if ((value3 > 255)) {
HXLINE( 620)				color4 = 255;
            			}
            			else {
HXLINE( 620)				if ((value3 < 0)) {
HXLINE( 620)					color4 = 0;
            				}
            				else {
HXLINE( 620)					color4 = value3;
            				}
            			}
HXDLIN( 620)			color = (color | (color4 << 24));
            		}
HXDLIN( 620)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromRGBAFloat,return )

int Color_Impl__obj::fromCMYK(Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_633_fromCMYK)
HXLINE( 634)		int color = 0;
HXLINE( 635)		{
HXLINE( 635)			Float value = ((( (Float)(1) ) - Cyan) * (( (Float)(1) ) - Black));
HXDLIN( 635)			{
HXLINE( 635)				int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 635)				color = (color & -16711681);
HXDLIN( 635)				int color1;
HXDLIN( 635)				if ((value1 > 255)) {
HXLINE( 635)					color1 = 255;
            				}
            				else {
HXLINE( 635)					if ((value1 < 0)) {
HXLINE( 635)						color1 = 0;
            					}
            					else {
HXLINE( 635)						color1 = value1;
            					}
            				}
HXDLIN( 635)				color = (color | (color1 << 16));
            			}
            		}
HXDLIN( 635)		{
HXLINE( 635)			Float value2 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 635)			{
HXLINE( 635)				int value3 = ::Math_obj::round((value2 * ( (Float)(255) )));
HXDLIN( 635)				color = (color & -65281);
HXDLIN( 635)				int color2;
HXDLIN( 635)				if ((value3 > 255)) {
HXLINE( 635)					color2 = 255;
            				}
            				else {
HXLINE( 635)					if ((value3 < 0)) {
HXLINE( 635)						color2 = 0;
            					}
            					else {
HXLINE( 635)						color2 = value3;
            					}
            				}
HXDLIN( 635)				color = (color | (color2 << 8));
            			}
            		}
HXDLIN( 635)		{
HXLINE( 635)			Float value4 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 635)			{
HXLINE( 635)				int value5 = ::Math_obj::round((value4 * ( (Float)(255) )));
HXDLIN( 635)				color = (color & -256);
HXDLIN( 635)				int color3;
HXDLIN( 635)				if ((value5 > 255)) {
HXLINE( 635)					color3 = 255;
            				}
            				else {
HXLINE( 635)					if ((value5 < 0)) {
HXLINE( 635)						color3 = 0;
            					}
            					else {
HXLINE( 635)						color3 = value5;
            					}
            				}
HXDLIN( 635)				color = (color | color3);
            			}
            		}
HXDLIN( 635)		{
HXLINE( 635)			int value6 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 635)			color = (color & 16777215);
HXDLIN( 635)			int color4;
HXDLIN( 635)			if ((value6 > 255)) {
HXLINE( 635)				color4 = 255;
            			}
            			else {
HXLINE( 635)				if ((value6 < 0)) {
HXLINE( 635)					color4 = 0;
            				}
            				else {
HXLINE( 635)					color4 = value6;
            				}
            			}
HXDLIN( 635)			color = (color | (color4 << 24));
            		}
HXDLIN( 635)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,fromCMYK,return )

int Color_Impl__obj::fromHSB(Float Hue,Float Saturation,Float Brightness,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_647_fromHSB)
HXLINE( 648)		int color = 0;
HXLINE( 649)		Float chroma = (Brightness * Saturation);
HXDLIN( 649)		Float match = (Brightness - chroma);
HXDLIN( 649)		Float Hue1 = Hue;
HXDLIN( 649)		Float Chroma = chroma;
HXDLIN( 649)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 649)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 649)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 649)		Chroma = (Chroma + match);
HXDLIN( 649)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 649)				{
HXLINE( 649)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color1;
HXDLIN( 649)					if ((value > 255)) {
HXLINE( 649)						color1 = 255;
            					}
            					else {
HXLINE( 649)						if ((value < 0)) {
HXLINE( 649)							color1 = 0;
            						}
            						else {
HXLINE( 649)							color1 = value;
            						}
            					}
HXDLIN( 649)					color = (color | (color1 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color2;
HXDLIN( 649)					if ((value1 > 255)) {
HXLINE( 649)						color2 = 255;
            					}
            					else {
HXLINE( 649)						if ((value1 < 0)) {
HXLINE( 649)							color2 = 0;
            						}
            						else {
HXLINE( 649)							color2 = value1;
            						}
            					}
HXDLIN( 649)					color = (color | (color2 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color3;
HXDLIN( 649)					if ((value2 > 255)) {
HXLINE( 649)						color3 = 255;
            					}
            					else {
HXLINE( 649)						if ((value2 < 0)) {
HXLINE( 649)							color3 = 0;
            						}
            						else {
HXLINE( 649)							color3 = value2;
            						}
            					}
HXDLIN( 649)					color = (color | color3);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color4;
HXDLIN( 649)					if ((value3 > 255)) {
HXLINE( 649)						color4 = 255;
            					}
            					else {
HXLINE( 649)						if ((value3 < 0)) {
HXLINE( 649)							color4 = 0;
            						}
            						else {
HXLINE( 649)							color4 = value3;
            						}
            					}
HXDLIN( 649)					color = (color | (color4 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 649)				{
HXLINE( 649)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color5;
HXDLIN( 649)					if ((value4 > 255)) {
HXLINE( 649)						color5 = 255;
            					}
            					else {
HXLINE( 649)						if ((value4 < 0)) {
HXLINE( 649)							color5 = 0;
            						}
            						else {
HXLINE( 649)							color5 = value4;
            						}
            					}
HXDLIN( 649)					color = (color | (color5 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color6;
HXDLIN( 649)					if ((value5 > 255)) {
HXLINE( 649)						color6 = 255;
            					}
            					else {
HXLINE( 649)						if ((value5 < 0)) {
HXLINE( 649)							color6 = 0;
            						}
            						else {
HXLINE( 649)							color6 = value5;
            						}
            					}
HXDLIN( 649)					color = (color | (color6 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color7;
HXDLIN( 649)					if ((value6 > 255)) {
HXLINE( 649)						color7 = 255;
            					}
            					else {
HXLINE( 649)						if ((value6 < 0)) {
HXLINE( 649)							color7 = 0;
            						}
            						else {
HXLINE( 649)							color7 = value6;
            						}
            					}
HXDLIN( 649)					color = (color | color7);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color8;
HXDLIN( 649)					if ((value7 > 255)) {
HXLINE( 649)						color8 = 255;
            					}
            					else {
HXLINE( 649)						if ((value7 < 0)) {
HXLINE( 649)							color8 = 0;
            						}
            						else {
HXLINE( 649)							color8 = value7;
            						}
            					}
HXDLIN( 649)					color = (color | (color8 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 649)				{
HXLINE( 649)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color9;
HXDLIN( 649)					if ((value8 > 255)) {
HXLINE( 649)						color9 = 255;
            					}
            					else {
HXLINE( 649)						if ((value8 < 0)) {
HXLINE( 649)							color9 = 0;
            						}
            						else {
HXLINE( 649)							color9 = value8;
            						}
            					}
HXDLIN( 649)					color = (color | (color9 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color10;
HXDLIN( 649)					if ((value9 > 255)) {
HXLINE( 649)						color10 = 255;
            					}
            					else {
HXLINE( 649)						if ((value9 < 0)) {
HXLINE( 649)							color10 = 0;
            						}
            						else {
HXLINE( 649)							color10 = value9;
            						}
            					}
HXDLIN( 649)					color = (color | (color10 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color11;
HXDLIN( 649)					if ((value10 > 255)) {
HXLINE( 649)						color11 = 255;
            					}
            					else {
HXLINE( 649)						if ((value10 < 0)) {
HXLINE( 649)							color11 = 0;
            						}
            						else {
HXLINE( 649)							color11 = value10;
            						}
            					}
HXDLIN( 649)					color = (color | color11);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color12;
HXDLIN( 649)					if ((value11 > 255)) {
HXLINE( 649)						color12 = 255;
            					}
            					else {
HXLINE( 649)						if ((value11 < 0)) {
HXLINE( 649)							color12 = 0;
            						}
            						else {
HXLINE( 649)							color12 = value11;
            						}
            					}
HXDLIN( 649)					color = (color | (color12 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 649)				{
HXLINE( 649)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color13;
HXDLIN( 649)					if ((value12 > 255)) {
HXLINE( 649)						color13 = 255;
            					}
            					else {
HXLINE( 649)						if ((value12 < 0)) {
HXLINE( 649)							color13 = 0;
            						}
            						else {
HXLINE( 649)							color13 = value12;
            						}
            					}
HXDLIN( 649)					color = (color | (color13 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color14;
HXDLIN( 649)					if ((value13 > 255)) {
HXLINE( 649)						color14 = 255;
            					}
            					else {
HXLINE( 649)						if ((value13 < 0)) {
HXLINE( 649)							color14 = 0;
            						}
            						else {
HXLINE( 649)							color14 = value13;
            						}
            					}
HXDLIN( 649)					color = (color | (color14 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color15;
HXDLIN( 649)					if ((value14 > 255)) {
HXLINE( 649)						color15 = 255;
            					}
            					else {
HXLINE( 649)						if ((value14 < 0)) {
HXLINE( 649)							color15 = 0;
            						}
            						else {
HXLINE( 649)							color15 = value14;
            						}
            					}
HXDLIN( 649)					color = (color | color15);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color16;
HXDLIN( 649)					if ((value15 > 255)) {
HXLINE( 649)						color16 = 255;
            					}
            					else {
HXLINE( 649)						if ((value15 < 0)) {
HXLINE( 649)							color16 = 0;
            						}
            						else {
HXLINE( 649)							color16 = value15;
            						}
            					}
HXDLIN( 649)					color = (color | (color16 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 649)				{
HXLINE( 649)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color17;
HXDLIN( 649)					if ((value16 > 255)) {
HXLINE( 649)						color17 = 255;
            					}
            					else {
HXLINE( 649)						if ((value16 < 0)) {
HXLINE( 649)							color17 = 0;
            						}
            						else {
HXLINE( 649)							color17 = value16;
            						}
            					}
HXDLIN( 649)					color = (color | (color17 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color18;
HXDLIN( 649)					if ((value17 > 255)) {
HXLINE( 649)						color18 = 255;
            					}
            					else {
HXLINE( 649)						if ((value17 < 0)) {
HXLINE( 649)							color18 = 0;
            						}
            						else {
HXLINE( 649)							color18 = value17;
            						}
            					}
HXDLIN( 649)					color = (color | (color18 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color19;
HXDLIN( 649)					if ((value18 > 255)) {
HXLINE( 649)						color19 = 255;
            					}
            					else {
HXLINE( 649)						if ((value18 < 0)) {
HXLINE( 649)							color19 = 0;
            						}
            						else {
HXLINE( 649)							color19 = value18;
            						}
            					}
HXDLIN( 649)					color = (color | color19);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color20;
HXDLIN( 649)					if ((value19 > 255)) {
HXLINE( 649)						color20 = 255;
            					}
            					else {
HXLINE( 649)						if ((value19 < 0)) {
HXLINE( 649)							color20 = 0;
            						}
            						else {
HXLINE( 649)							color20 = value19;
            						}
            					}
HXDLIN( 649)					color = (color | (color20 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 649)				{
HXLINE( 649)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -16711681);
HXDLIN( 649)					int color21;
HXDLIN( 649)					if ((value20 > 255)) {
HXLINE( 649)						color21 = 255;
            					}
            					else {
HXLINE( 649)						if ((value20 < 0)) {
HXLINE( 649)							color21 = 0;
            						}
            						else {
HXLINE( 649)							color21 = value20;
            						}
            					}
HXDLIN( 649)					color = (color | (color21 << 16));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -65281);
HXDLIN( 649)					int color22;
HXDLIN( 649)					if ((value21 > 255)) {
HXLINE( 649)						color22 = 255;
            					}
            					else {
HXLINE( 649)						if ((value21 < 0)) {
HXLINE( 649)							color22 = 0;
            						}
            						else {
HXLINE( 649)							color22 = value21;
            						}
            					}
HXDLIN( 649)					color = (color | (color22 << 8));
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 649)					color = (color & -256);
HXDLIN( 649)					int color23;
HXDLIN( 649)					if ((value22 > 255)) {
HXLINE( 649)						color23 = 255;
            					}
            					else {
HXLINE( 649)						if ((value22 < 0)) {
HXLINE( 649)							color23 = 0;
            						}
            						else {
HXLINE( 649)							color23 = value22;
            						}
            					}
HXDLIN( 649)					color = (color | color23);
            				}
HXDLIN( 649)				{
HXLINE( 649)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 649)					color = (color & 16777215);
HXDLIN( 649)					int color24;
HXDLIN( 649)					if ((value23 > 255)) {
HXLINE( 649)						color24 = 255;
            					}
            					else {
HXLINE( 649)						if ((value23 < 0)) {
HXLINE( 649)							color24 = 0;
            						}
            						else {
HXLINE( 649)							color24 = value23;
            						}
            					}
HXDLIN( 649)					color = (color | (color24 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 649)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromHSB,return )

int Color_Impl__obj::fromHSL(Float Hue,Float Saturation,Float Lightness,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_661_fromHSL)
HXLINE( 662)		int color = 0;
HXLINE( 663)		Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * Lightness) - ( (Float)(1) )))) * Saturation);
HXDLIN( 663)		Float match = (Lightness - (chroma / ( (Float)(2) )));
HXDLIN( 663)		Float Hue1 = Hue;
HXDLIN( 663)		Float Chroma = chroma;
HXDLIN( 663)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 663)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 663)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 663)		Chroma = (Chroma + match);
HXDLIN( 663)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 663)				{
HXLINE( 663)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color1;
HXDLIN( 663)					if ((value > 255)) {
HXLINE( 663)						color1 = 255;
            					}
            					else {
HXLINE( 663)						if ((value < 0)) {
HXLINE( 663)							color1 = 0;
            						}
            						else {
HXLINE( 663)							color1 = value;
            						}
            					}
HXDLIN( 663)					color = (color | (color1 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color2;
HXDLIN( 663)					if ((value1 > 255)) {
HXLINE( 663)						color2 = 255;
            					}
            					else {
HXLINE( 663)						if ((value1 < 0)) {
HXLINE( 663)							color2 = 0;
            						}
            						else {
HXLINE( 663)							color2 = value1;
            						}
            					}
HXDLIN( 663)					color = (color | (color2 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color3;
HXDLIN( 663)					if ((value2 > 255)) {
HXLINE( 663)						color3 = 255;
            					}
            					else {
HXLINE( 663)						if ((value2 < 0)) {
HXLINE( 663)							color3 = 0;
            						}
            						else {
HXLINE( 663)							color3 = value2;
            						}
            					}
HXDLIN( 663)					color = (color | color3);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color4;
HXDLIN( 663)					if ((value3 > 255)) {
HXLINE( 663)						color4 = 255;
            					}
            					else {
HXLINE( 663)						if ((value3 < 0)) {
HXLINE( 663)							color4 = 0;
            						}
            						else {
HXLINE( 663)							color4 = value3;
            						}
            					}
HXDLIN( 663)					color = (color | (color4 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 663)				{
HXLINE( 663)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color5;
HXDLIN( 663)					if ((value4 > 255)) {
HXLINE( 663)						color5 = 255;
            					}
            					else {
HXLINE( 663)						if ((value4 < 0)) {
HXLINE( 663)							color5 = 0;
            						}
            						else {
HXLINE( 663)							color5 = value4;
            						}
            					}
HXDLIN( 663)					color = (color | (color5 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color6;
HXDLIN( 663)					if ((value5 > 255)) {
HXLINE( 663)						color6 = 255;
            					}
            					else {
HXLINE( 663)						if ((value5 < 0)) {
HXLINE( 663)							color6 = 0;
            						}
            						else {
HXLINE( 663)							color6 = value5;
            						}
            					}
HXDLIN( 663)					color = (color | (color6 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color7;
HXDLIN( 663)					if ((value6 > 255)) {
HXLINE( 663)						color7 = 255;
            					}
            					else {
HXLINE( 663)						if ((value6 < 0)) {
HXLINE( 663)							color7 = 0;
            						}
            						else {
HXLINE( 663)							color7 = value6;
            						}
            					}
HXDLIN( 663)					color = (color | color7);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color8;
HXDLIN( 663)					if ((value7 > 255)) {
HXLINE( 663)						color8 = 255;
            					}
            					else {
HXLINE( 663)						if ((value7 < 0)) {
HXLINE( 663)							color8 = 0;
            						}
            						else {
HXLINE( 663)							color8 = value7;
            						}
            					}
HXDLIN( 663)					color = (color | (color8 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 663)				{
HXLINE( 663)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color9;
HXDLIN( 663)					if ((value8 > 255)) {
HXLINE( 663)						color9 = 255;
            					}
            					else {
HXLINE( 663)						if ((value8 < 0)) {
HXLINE( 663)							color9 = 0;
            						}
            						else {
HXLINE( 663)							color9 = value8;
            						}
            					}
HXDLIN( 663)					color = (color | (color9 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color10;
HXDLIN( 663)					if ((value9 > 255)) {
HXLINE( 663)						color10 = 255;
            					}
            					else {
HXLINE( 663)						if ((value9 < 0)) {
HXLINE( 663)							color10 = 0;
            						}
            						else {
HXLINE( 663)							color10 = value9;
            						}
            					}
HXDLIN( 663)					color = (color | (color10 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color11;
HXDLIN( 663)					if ((value10 > 255)) {
HXLINE( 663)						color11 = 255;
            					}
            					else {
HXLINE( 663)						if ((value10 < 0)) {
HXLINE( 663)							color11 = 0;
            						}
            						else {
HXLINE( 663)							color11 = value10;
            						}
            					}
HXDLIN( 663)					color = (color | color11);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color12;
HXDLIN( 663)					if ((value11 > 255)) {
HXLINE( 663)						color12 = 255;
            					}
            					else {
HXLINE( 663)						if ((value11 < 0)) {
HXLINE( 663)							color12 = 0;
            						}
            						else {
HXLINE( 663)							color12 = value11;
            						}
            					}
HXDLIN( 663)					color = (color | (color12 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 663)				{
HXLINE( 663)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color13;
HXDLIN( 663)					if ((value12 > 255)) {
HXLINE( 663)						color13 = 255;
            					}
            					else {
HXLINE( 663)						if ((value12 < 0)) {
HXLINE( 663)							color13 = 0;
            						}
            						else {
HXLINE( 663)							color13 = value12;
            						}
            					}
HXDLIN( 663)					color = (color | (color13 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color14;
HXDLIN( 663)					if ((value13 > 255)) {
HXLINE( 663)						color14 = 255;
            					}
            					else {
HXLINE( 663)						if ((value13 < 0)) {
HXLINE( 663)							color14 = 0;
            						}
            						else {
HXLINE( 663)							color14 = value13;
            						}
            					}
HXDLIN( 663)					color = (color | (color14 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color15;
HXDLIN( 663)					if ((value14 > 255)) {
HXLINE( 663)						color15 = 255;
            					}
            					else {
HXLINE( 663)						if ((value14 < 0)) {
HXLINE( 663)							color15 = 0;
            						}
            						else {
HXLINE( 663)							color15 = value14;
            						}
            					}
HXDLIN( 663)					color = (color | color15);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color16;
HXDLIN( 663)					if ((value15 > 255)) {
HXLINE( 663)						color16 = 255;
            					}
            					else {
HXLINE( 663)						if ((value15 < 0)) {
HXLINE( 663)							color16 = 0;
            						}
            						else {
HXLINE( 663)							color16 = value15;
            						}
            					}
HXDLIN( 663)					color = (color | (color16 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 663)				{
HXLINE( 663)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color17;
HXDLIN( 663)					if ((value16 > 255)) {
HXLINE( 663)						color17 = 255;
            					}
            					else {
HXLINE( 663)						if ((value16 < 0)) {
HXLINE( 663)							color17 = 0;
            						}
            						else {
HXLINE( 663)							color17 = value16;
            						}
            					}
HXDLIN( 663)					color = (color | (color17 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color18;
HXDLIN( 663)					if ((value17 > 255)) {
HXLINE( 663)						color18 = 255;
            					}
            					else {
HXLINE( 663)						if ((value17 < 0)) {
HXLINE( 663)							color18 = 0;
            						}
            						else {
HXLINE( 663)							color18 = value17;
            						}
            					}
HXDLIN( 663)					color = (color | (color18 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color19;
HXDLIN( 663)					if ((value18 > 255)) {
HXLINE( 663)						color19 = 255;
            					}
            					else {
HXLINE( 663)						if ((value18 < 0)) {
HXLINE( 663)							color19 = 0;
            						}
            						else {
HXLINE( 663)							color19 = value18;
            						}
            					}
HXDLIN( 663)					color = (color | color19);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color20;
HXDLIN( 663)					if ((value19 > 255)) {
HXLINE( 663)						color20 = 255;
            					}
            					else {
HXLINE( 663)						if ((value19 < 0)) {
HXLINE( 663)							color20 = 0;
            						}
            						else {
HXLINE( 663)							color20 = value19;
            						}
            					}
HXDLIN( 663)					color = (color | (color20 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 663)				{
HXLINE( 663)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -16711681);
HXDLIN( 663)					int color21;
HXDLIN( 663)					if ((value20 > 255)) {
HXLINE( 663)						color21 = 255;
            					}
            					else {
HXLINE( 663)						if ((value20 < 0)) {
HXLINE( 663)							color21 = 0;
            						}
            						else {
HXLINE( 663)							color21 = value20;
            						}
            					}
HXDLIN( 663)					color = (color | (color21 << 16));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -65281);
HXDLIN( 663)					int color22;
HXDLIN( 663)					if ((value21 > 255)) {
HXLINE( 663)						color22 = 255;
            					}
            					else {
HXLINE( 663)						if ((value21 < 0)) {
HXLINE( 663)							color22 = 0;
            						}
            						else {
HXLINE( 663)							color22 = value21;
            						}
            					}
HXDLIN( 663)					color = (color | (color22 << 8));
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 663)					color = (color & -256);
HXDLIN( 663)					int color23;
HXDLIN( 663)					if ((value22 > 255)) {
HXLINE( 663)						color23 = 255;
            					}
            					else {
HXLINE( 663)						if ((value22 < 0)) {
HXLINE( 663)							color23 = 0;
            						}
            						else {
HXLINE( 663)							color23 = value22;
            						}
            					}
HXDLIN( 663)					color = (color | color23);
            				}
HXDLIN( 663)				{
HXLINE( 663)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 663)					color = (color & 16777215);
HXDLIN( 663)					int color24;
HXDLIN( 663)					if ((value23 > 255)) {
HXLINE( 663)						color24 = 255;
            					}
            					else {
HXLINE( 663)						if ((value23 < 0)) {
HXLINE( 663)							color24 = 0;
            						}
            						else {
HXLINE( 663)							color24 = value23;
            						}
            					}
HXDLIN( 663)					color = (color | (color24 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 663)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromHSL,return )

 ::Dynamic Color_Impl__obj::fromString(::String str){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_681_fromString)
HXLINE( 682)		 ::Dynamic result = null();
HXLINE( 683)		str = ::StringTools_obj::trim(str);
HXLINE( 685)		if (::vision::ds::_Color::Color_Impl__obj::COLOR_REGEX->match(str)) {
HXLINE( 686)			::String hexColor = (HX_("0x",48,2a,00,00) + ::vision::ds::_Color::Color_Impl__obj::COLOR_REGEX->matched(2));
HXLINE( 687)			result = ( (int)(::Std_obj::parseInt(hexColor)) );
HXLINE( 688)			if ((hexColor.length == 8)) {
HXLINE( 689)				int value = ::Math_obj::round(( (Float)(255) ));
HXDLIN( 689)				result = (( (int)(result) ) & 16777215);
HXDLIN( 689)				int result1;
HXDLIN( 689)				if ((value > 255)) {
HXLINE( 689)					result1 = 255;
            				}
            				else {
HXLINE( 689)					if ((value < 0)) {
HXLINE( 689)						result1 = 0;
            					}
            					else {
HXLINE( 689)						result1 = value;
            					}
            				}
HXDLIN( 689)				result = (( (int)(result) ) | (result1 << 24));
            			}
            		}
HXLINE( 693)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,fromString,return )

::Array< int > Color_Impl__obj::getHSBColorWheel(::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_703_getHSBColorWheel)
HXDLIN( 703)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 703)		{
HXDLIN( 703)			int _g1 = 0;
HXDLIN( 703)			while((_g1 < 360)){
HXDLIN( 703)				_g1 = (_g1 + 1);
HXDLIN( 703)				int c = (_g1 - 1);
HXDLIN( 703)				_g->push(::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(c) ),((Float)1.0),((Float)1.0),Alpha));
            			}
            		}
HXDLIN( 703)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getHSBColorWheel,return )

int Color_Impl__obj::interpolate(int Color1,int Color2,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_714_interpolate)
HXLINE( 715)		int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * Factor) + ((Color1 >> 16) & 255)));
HXLINE( 716)		int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * Factor) + ((Color1 >> 8) & 255)));
HXLINE( 717)		int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * Factor) + (Color1 & 255)));
HXLINE( 718)		int a = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * Factor) + ((Color1 >> 24) & 255)));
HXLINE( 720)		int color = 0;
HXDLIN( 720)		{
HXLINE( 720)			color = (color & -16711681);
HXDLIN( 720)			int color1;
HXDLIN( 720)			if ((r > 255)) {
HXLINE( 720)				color1 = 255;
            			}
            			else {
HXLINE( 720)				if ((r < 0)) {
HXLINE( 720)					color1 = 0;
            				}
            				else {
HXLINE( 720)					color1 = r;
            				}
            			}
HXDLIN( 720)			color = (color | (color1 << 16));
            		}
HXDLIN( 720)		{
HXLINE( 720)			color = (color & -65281);
HXDLIN( 720)			int color2;
HXDLIN( 720)			if ((g > 255)) {
HXLINE( 720)				color2 = 255;
            			}
            			else {
HXLINE( 720)				if ((g < 0)) {
HXLINE( 720)					color2 = 0;
            				}
            				else {
HXLINE( 720)					color2 = g;
            				}
            			}
HXDLIN( 720)			color = (color | (color2 << 8));
            		}
HXDLIN( 720)		{
HXLINE( 720)			color = (color & -256);
HXDLIN( 720)			int color3;
HXDLIN( 720)			if ((b > 255)) {
HXLINE( 720)				color3 = 255;
            			}
            			else {
HXLINE( 720)				if ((b < 0)) {
HXLINE( 720)					color3 = 0;
            				}
            				else {
HXLINE( 720)					color3 = b;
            				}
            			}
HXDLIN( 720)			color = (color | color3);
            		}
HXDLIN( 720)		{
HXLINE( 720)			color = (color & 16777215);
HXDLIN( 720)			int color4;
HXDLIN( 720)			if ((a > 255)) {
HXLINE( 720)				color4 = 255;
            			}
            			else {
HXLINE( 720)				if ((a < 0)) {
HXLINE( 720)					color4 = 0;
            				}
            				else {
HXLINE( 720)					color4 = a;
            				}
            			}
HXDLIN( 720)			color = (color | (color4 << 24));
            		}
HXDLIN( 720)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_Impl__obj,interpolate,return )

::Array< int > Color_Impl__obj::gradient(int Color1,int Color2,int Steps, ::Dynamic Ease){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_732_gradient)
HXLINE( 733)		::Array< int > output = ::Array_obj< int >::__new();
HXLINE( 735)		if (::hx::IsNull( Ease )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Float _hx_run(Float t){
            				HX_STACKFRAME(&_hx_pos_9279add21e623cc0_737_gradient)
HXLINE( 737)				return t;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 736)			Ease =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 741)		{
HXLINE( 741)			int _g = 0;
HXDLIN( 741)			int _g1 = Steps;
HXDLIN( 741)			while((_g < _g1)){
HXLINE( 741)				_g = (_g + 1);
HXDLIN( 741)				int step = (_g - 1);
HXLINE( 742)				Float Factor = ( (Float)(Ease((( (Float)(step) ) / ( (Float)((Steps - 1)) )))) );
HXDLIN( 742)				int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * Factor) + ((Color1 >> 16) & 255)));
HXDLIN( 742)				int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * Factor) + ((Color1 >> 8) & 255)));
HXDLIN( 742)				int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * Factor) + (Color1 & 255)));
HXDLIN( 742)				int a = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * Factor) + ((Color1 >> 24) & 255)));
HXDLIN( 742)				int color = 0;
HXDLIN( 742)				{
HXLINE( 742)					color = (color & -16711681);
HXDLIN( 742)					int color1;
HXDLIN( 742)					if ((r > 255)) {
HXLINE( 742)						color1 = 255;
            					}
            					else {
HXLINE( 742)						if ((r < 0)) {
HXLINE( 742)							color1 = 0;
            						}
            						else {
HXLINE( 742)							color1 = r;
            						}
            					}
HXDLIN( 742)					color = (color | (color1 << 16));
            				}
HXDLIN( 742)				{
HXLINE( 742)					color = (color & -65281);
HXDLIN( 742)					int color2;
HXDLIN( 742)					if ((g > 255)) {
HXLINE( 742)						color2 = 255;
            					}
            					else {
HXLINE( 742)						if ((g < 0)) {
HXLINE( 742)							color2 = 0;
            						}
            						else {
HXLINE( 742)							color2 = g;
            						}
            					}
HXDLIN( 742)					color = (color | (color2 << 8));
            				}
HXDLIN( 742)				{
HXLINE( 742)					color = (color & -256);
HXDLIN( 742)					int color3;
HXDLIN( 742)					if ((b > 255)) {
HXLINE( 742)						color3 = 255;
            					}
            					else {
HXLINE( 742)						if ((b < 0)) {
HXLINE( 742)							color3 = 0;
            						}
            						else {
HXLINE( 742)							color3 = b;
            						}
            					}
HXDLIN( 742)					color = (color | color3);
            				}
HXDLIN( 742)				{
HXLINE( 742)					color = (color & 16777215);
HXDLIN( 742)					int color4;
HXDLIN( 742)					if ((a > 255)) {
HXLINE( 742)						color4 = 255;
            					}
            					else {
HXLINE( 742)						if ((a < 0)) {
HXLINE( 742)							color4 = 0;
            						}
            						else {
HXLINE( 742)							color4 = a;
            						}
            					}
HXDLIN( 742)					color = (color | (color4 << 24));
            				}
HXDLIN( 742)				output[step] = color;
            			}
            		}
HXLINE( 745)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,gradient,return )

int Color_Impl__obj::makeRandom( ::Dynamic __o_alphaLock,::hx::Null< int >  __o_alphaValue){
            		 ::Dynamic alphaLock = __o_alphaLock;
            		if (::hx::IsNull(__o_alphaLock)) alphaLock = true;
            		int alphaValue = __o_alphaValue.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_755_makeRandom)
HXDLIN( 755)		Float Red = ::Math_obj::random();
HXDLIN( 755)		Float Green = ::Math_obj::random();
HXDLIN( 755)		Float Blue = ::Math_obj::random();
HXDLIN( 755)		Float Alpha;
HXDLIN( 755)		if (( (bool)(alphaLock) )) {
HXDLIN( 755)			Alpha = ( (Float)(alphaValue) );
            		}
            		else {
HXDLIN( 755)			Alpha = ::Math_obj::random();
            		}
HXDLIN( 755)		int color = 0;
HXDLIN( 755)		{
HXDLIN( 755)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 755)			color = (color & -16711681);
HXDLIN( 755)			int color1;
HXDLIN( 755)			if ((value > 255)) {
HXDLIN( 755)				color1 = 255;
            			}
            			else {
HXDLIN( 755)				if ((value < 0)) {
HXDLIN( 755)					color1 = 0;
            				}
            				else {
HXDLIN( 755)					color1 = value;
            				}
            			}
HXDLIN( 755)			color = (color | (color1 << 16));
            		}
HXDLIN( 755)		{
HXDLIN( 755)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 755)			color = (color & -65281);
HXDLIN( 755)			int color2;
HXDLIN( 755)			if ((value1 > 255)) {
HXDLIN( 755)				color2 = 255;
            			}
            			else {
HXDLIN( 755)				if ((value1 < 0)) {
HXDLIN( 755)					color2 = 0;
            				}
            				else {
HXDLIN( 755)					color2 = value1;
            				}
            			}
HXDLIN( 755)			color = (color | (color2 << 8));
            		}
HXDLIN( 755)		{
HXDLIN( 755)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 755)			color = (color & -256);
HXDLIN( 755)			int color3;
HXDLIN( 755)			if ((value2 > 255)) {
HXDLIN( 755)				color3 = 255;
            			}
            			else {
HXDLIN( 755)				if ((value2 < 0)) {
HXDLIN( 755)					color3 = 0;
            				}
            				else {
HXDLIN( 755)					color3 = value2;
            				}
            			}
HXDLIN( 755)			color = (color | color3);
            		}
HXDLIN( 755)		{
HXDLIN( 755)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 755)			color = (color & 16777215);
HXDLIN( 755)			int color4;
HXDLIN( 755)			if ((value3 > 255)) {
HXDLIN( 755)				color4 = 255;
            			}
            			else {
HXDLIN( 755)				if ((value3 < 0)) {
HXDLIN( 755)					color4 = 0;
            				}
            				else {
HXDLIN( 755)					color4 = value3;
            				}
            			}
HXDLIN( 755)			color = (color | (color4 << 24));
            		}
HXDLIN( 755)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,makeRandom,return )

int Color_Impl__obj::multiply(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_763_multiply)
HXDLIN( 763)		Float Red = ((( (Float)(((lhs >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 763)		Float Green = ((( (Float)(((lhs >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 763)		Float Blue = ((( (Float)((lhs & 255)) ) / ( (Float)(255) )) * (( (Float)((rhs & 255)) ) / ( (Float)(255) )));
HXDLIN( 763)		Float Alpha = ((( (Float)(((lhs >> 24) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 24) & 255)) ) / ( (Float)(255) )));
HXDLIN( 763)		int color = 0;
HXDLIN( 763)		{
HXDLIN( 763)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 763)			color = (color & -16711681);
HXDLIN( 763)			int color1;
HXDLIN( 763)			if ((value > 255)) {
HXDLIN( 763)				color1 = 255;
            			}
            			else {
HXDLIN( 763)				if ((value < 0)) {
HXDLIN( 763)					color1 = 0;
            				}
            				else {
HXDLIN( 763)					color1 = value;
            				}
            			}
HXDLIN( 763)			color = (color | (color1 << 16));
            		}
HXDLIN( 763)		{
HXDLIN( 763)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 763)			color = (color & -65281);
HXDLIN( 763)			int color2;
HXDLIN( 763)			if ((value1 > 255)) {
HXDLIN( 763)				color2 = 255;
            			}
            			else {
HXDLIN( 763)				if ((value1 < 0)) {
HXDLIN( 763)					color2 = 0;
            				}
            				else {
HXDLIN( 763)					color2 = value1;
            				}
            			}
HXDLIN( 763)			color = (color | (color2 << 8));
            		}
HXDLIN( 763)		{
HXDLIN( 763)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 763)			color = (color & -256);
HXDLIN( 763)			int color3;
HXDLIN( 763)			if ((value2 > 255)) {
HXDLIN( 763)				color3 = 255;
            			}
            			else {
HXDLIN( 763)				if ((value2 < 0)) {
HXDLIN( 763)					color3 = 0;
            				}
            				else {
HXDLIN( 763)					color3 = value2;
            				}
            			}
HXDLIN( 763)			color = (color | color3);
            		}
HXDLIN( 763)		{
HXDLIN( 763)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 763)			color = (color & 16777215);
HXDLIN( 763)			int color4;
HXDLIN( 763)			if ((value3 > 255)) {
HXDLIN( 763)				color4 = 255;
            			}
            			else {
HXDLIN( 763)				if ((value3 < 0)) {
HXDLIN( 763)					color4 = 0;
            				}
            				else {
HXDLIN( 763)					color4 = value3;
            				}
            			}
HXDLIN( 763)			color = (color | (color4 << 24));
            		}
HXDLIN( 763)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,multiply,return )

int Color_Impl__obj::add(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_772_add)
HXDLIN( 772)		int Red = (((lhs >> 16) & 255) + ((rhs >> 16) & 255));
HXDLIN( 772)		int Green = (((lhs >> 8) & 255) + ((rhs >> 8) & 255));
HXDLIN( 772)		int Blue = ((lhs & 255) + (rhs & 255));
HXDLIN( 772)		int Alpha = (((lhs >> 24) & 255) + ((rhs >> 24) & 255));
HXDLIN( 772)		int color = 0;
HXDLIN( 772)		{
HXDLIN( 772)			color = (color & -16711681);
HXDLIN( 772)			int color1;
HXDLIN( 772)			if ((Red > 255)) {
HXDLIN( 772)				color1 = 255;
            			}
            			else {
HXDLIN( 772)				if ((Red < 0)) {
HXDLIN( 772)					color1 = 0;
            				}
            				else {
HXDLIN( 772)					color1 = Red;
            				}
            			}
HXDLIN( 772)			color = (color | (color1 << 16));
            		}
HXDLIN( 772)		{
HXDLIN( 772)			color = (color & -65281);
HXDLIN( 772)			int color2;
HXDLIN( 772)			if ((Green > 255)) {
HXDLIN( 772)				color2 = 255;
            			}
            			else {
HXDLIN( 772)				if ((Green < 0)) {
HXDLIN( 772)					color2 = 0;
            				}
            				else {
HXDLIN( 772)					color2 = Green;
            				}
            			}
HXDLIN( 772)			color = (color | (color2 << 8));
            		}
HXDLIN( 772)		{
HXDLIN( 772)			color = (color & -256);
HXDLIN( 772)			int color3;
HXDLIN( 772)			if ((Blue > 255)) {
HXDLIN( 772)				color3 = 255;
            			}
            			else {
HXDLIN( 772)				if ((Blue < 0)) {
HXDLIN( 772)					color3 = 0;
            				}
            				else {
HXDLIN( 772)					color3 = Blue;
            				}
            			}
HXDLIN( 772)			color = (color | color3);
            		}
HXDLIN( 772)		{
HXDLIN( 772)			color = (color & 16777215);
HXDLIN( 772)			int color4;
HXDLIN( 772)			if ((Alpha > 255)) {
HXDLIN( 772)				color4 = 255;
            			}
            			else {
HXDLIN( 772)				if ((Alpha < 0)) {
HXDLIN( 772)					color4 = 0;
            				}
            				else {
HXDLIN( 772)					color4 = Alpha;
            				}
            			}
HXDLIN( 772)			color = (color | (color4 << 24));
            		}
HXDLIN( 772)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,add,return )

int Color_Impl__obj::subtract(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_780_subtract)
HXDLIN( 780)		int Red = (((lhs >> 16) & 255) - ((rhs >> 16) & 255));
HXDLIN( 780)		int Green = (((lhs >> 8) & 255) - ((rhs >> 8) & 255));
HXDLIN( 780)		int Blue = ((lhs & 255) - (rhs & 255));
HXDLIN( 780)		int Alpha = (((lhs >> 24) & 255) - ((rhs >> 24) & 255));
HXDLIN( 780)		int color = 0;
HXDLIN( 780)		{
HXDLIN( 780)			color = (color & -16711681);
HXDLIN( 780)			int color1;
HXDLIN( 780)			if ((Red > 255)) {
HXDLIN( 780)				color1 = 255;
            			}
            			else {
HXDLIN( 780)				if ((Red < 0)) {
HXDLIN( 780)					color1 = 0;
            				}
            				else {
HXDLIN( 780)					color1 = Red;
            				}
            			}
HXDLIN( 780)			color = (color | (color1 << 16));
            		}
HXDLIN( 780)		{
HXDLIN( 780)			color = (color & -65281);
HXDLIN( 780)			int color2;
HXDLIN( 780)			if ((Green > 255)) {
HXDLIN( 780)				color2 = 255;
            			}
            			else {
HXDLIN( 780)				if ((Green < 0)) {
HXDLIN( 780)					color2 = 0;
            				}
            				else {
HXDLIN( 780)					color2 = Green;
            				}
            			}
HXDLIN( 780)			color = (color | (color2 << 8));
            		}
HXDLIN( 780)		{
HXDLIN( 780)			color = (color & -256);
HXDLIN( 780)			int color3;
HXDLIN( 780)			if ((Blue > 255)) {
HXDLIN( 780)				color3 = 255;
            			}
            			else {
HXDLIN( 780)				if ((Blue < 0)) {
HXDLIN( 780)					color3 = 0;
            				}
            				else {
HXDLIN( 780)					color3 = Blue;
            				}
            			}
HXDLIN( 780)			color = (color | color3);
            		}
HXDLIN( 780)		{
HXDLIN( 780)			color = (color & 16777215);
HXDLIN( 780)			int color4;
HXDLIN( 780)			if ((Alpha > 255)) {
HXDLIN( 780)				color4 = 255;
            			}
            			else {
HXDLIN( 780)				if ((Alpha < 0)) {
HXDLIN( 780)					color4 = 0;
            				}
            				else {
HXDLIN( 780)					color4 = Alpha;
            				}
            			}
HXDLIN( 780)			color = (color | (color4 << 24));
            		}
HXDLIN( 780)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,subtract,return )

int Color_Impl__obj::divide(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_790_divide)
HXDLIN( 790)		Float Red;
HXDLIN( 790)		if (((( (Float)(((lhs >> 16) & 255)) ) / ( (Float)(((rhs >> 16) & 255)) )) == 0)) {
HXDLIN( 790)			Red = ( (Float)(1) );
            		}
            		else {
HXDLIN( 790)			Red = ( (Float)(((rhs >> 16) & 255)) );
            		}
HXDLIN( 790)		int Red1 = ::Std_obj::_hx_int(Red);
HXDLIN( 790)		Float Green;
HXDLIN( 790)		if (((( (Float)(((lhs >> 8) & 255)) ) / ( (Float)(((rhs >> 8) & 255)) )) == 0)) {
HXDLIN( 790)			Green = ( (Float)(1) );
            		}
            		else {
HXDLIN( 790)			Green = ( (Float)(((rhs >> 8) & 255)) );
            		}
HXDLIN( 790)		int Green1 = ::Std_obj::_hx_int(Green);
HXLINE( 791)		Float Blue;
HXDLIN( 791)		if (((( (Float)((lhs & 255)) ) / ( (Float)((rhs & 255)) )) == 0)) {
HXLINE( 791)			Blue = ( (Float)(1) );
            		}
            		else {
HXLINE( 791)			Blue = ( (Float)((rhs & 255)) );
            		}
HXLINE( 790)		int Blue1 = ::Std_obj::_hx_int(Blue);
HXLINE( 791)		Float Alpha;
HXDLIN( 791)		if (((( (Float)(((lhs >> 24) & 255)) ) / ( (Float)(((rhs >> 24) & 255)) )) == 0)) {
HXLINE( 791)			Alpha = ( (Float)(1) );
            		}
            		else {
HXLINE( 791)			Alpha = ( (Float)(((rhs >> 24) & 255)) );
            		}
HXLINE( 790)		int Alpha1 = ::Std_obj::_hx_int(Alpha);
HXDLIN( 790)		int color = 0;
HXDLIN( 790)		{
HXDLIN( 790)			color = (color & -16711681);
HXDLIN( 790)			int color1;
HXDLIN( 790)			if ((Red1 > 255)) {
HXDLIN( 790)				color1 = 255;
            			}
            			else {
HXDLIN( 790)				if ((Red1 < 0)) {
HXDLIN( 790)					color1 = 0;
            				}
            				else {
HXDLIN( 790)					color1 = Red1;
            				}
            			}
HXDLIN( 790)			color = (color | (color1 << 16));
            		}
HXDLIN( 790)		{
HXDLIN( 790)			color = (color & -65281);
HXDLIN( 790)			int color2;
HXDLIN( 790)			if ((Green1 > 255)) {
HXDLIN( 790)				color2 = 255;
            			}
            			else {
HXDLIN( 790)				if ((Green1 < 0)) {
HXDLIN( 790)					color2 = 0;
            				}
            				else {
HXDLIN( 790)					color2 = Green1;
            				}
            			}
HXDLIN( 790)			color = (color | (color2 << 8));
            		}
HXDLIN( 790)		{
HXDLIN( 790)			color = (color & -256);
HXDLIN( 790)			int color3;
HXDLIN( 790)			if ((Blue1 > 255)) {
HXDLIN( 790)				color3 = 255;
            			}
            			else {
HXDLIN( 790)				if ((Blue1 < 0)) {
HXDLIN( 790)					color3 = 0;
            				}
            				else {
HXDLIN( 790)					color3 = Blue1;
            				}
            			}
HXDLIN( 790)			color = (color | color3);
            		}
HXDLIN( 790)		{
HXDLIN( 790)			color = (color & 16777215);
HXDLIN( 790)			int color4;
HXDLIN( 790)			if ((Alpha1 > 255)) {
HXDLIN( 790)				color4 = 255;
            			}
            			else {
HXDLIN( 790)				if ((Alpha1 < 0)) {
HXDLIN( 790)					color4 = 0;
            				}
            				else {
HXDLIN( 790)					color4 = Alpha1;
            				}
            			}
HXDLIN( 790)			color = (color | (color4 << 24));
            		}
HXDLIN( 790)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,divide,return )

int Color_Impl__obj::getComplementHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_801_getComplementHarmony)
HXDLIN( 801)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 180);
HXDLIN( 801)		int range = 351;
HXDLIN( 801)		if ((value < 0)) {
HXDLIN( 801)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 801)		return ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getComplementHarmony,return )

 ::Dynamic Color_Impl__obj::getAnalogousHarmony(int this1,::hx::Null< int >  __o_Threshold){
            		int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_811_getAnalogousHarmony)
HXLINE( 812)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) - Threshold);
HXDLIN( 812)		int range = 351;
HXDLIN( 812)		if ((value < 0)) {
HXLINE( 812)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 812)		int warmer = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 813)		int value1 = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + Threshold);
HXDLIN( 813)		int range1 = 351;
HXDLIN( 813)		if ((value1 < 0)) {
HXLINE( 813)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 813)		int colder = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 815)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,getAnalogousHarmony,return )

 ::Dynamic Color_Impl__obj::getSplitComplementHarmony(int this1,::hx::Null< int >  __o_Threshold){
            		int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_825_getSplitComplementHarmony)
HXLINE( 826)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 180);
HXDLIN( 826)		int range = 351;
HXDLIN( 826)		if ((value < 0)) {
HXLINE( 826)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 826)		int oppositeHue = ::hx::Mod(value,range);
HXLINE( 827)		int value1 = (oppositeHue - Threshold);
HXDLIN( 827)		int range1 = 351;
HXDLIN( 827)		if ((value1 < 0)) {
HXLINE( 827)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 827)		int warmer = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 828)		int value2 = (oppositeHue + Threshold);
HXDLIN( 828)		int range2 = 351;
HXDLIN( 828)		if ((value2 < 0)) {
HXLINE( 828)			value2 = (value2 + (range2 * ::Std_obj::_hx_int(((( (Float)((0 - value2)) ) / ( (Float)(range2) )) + 1))));
            		}
HXDLIN( 828)		int colder = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value2,range2)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 830)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,getSplitComplementHarmony,return )

 ::Dynamic Color_Impl__obj::getTriadicHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_839_getTriadicHarmony)
HXLINE( 840)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 120);
HXDLIN( 840)		int range = 360;
HXDLIN( 840)		if ((value < 0)) {
HXLINE( 840)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 840)		int triadic1 = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 841)		int value1 = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(triadic1)) + 120);
HXDLIN( 841)		int range1 = 360;
HXDLIN( 841)		if ((value1 < 0)) {
HXLINE( 841)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 841)		int triadic2 = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 843)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("color1",6e,c5,86,c6),this1)
            			->setFixed(1,HX_("color2",6f,c5,86,c6),triadic1)
            			->setFixed(2,HX_("color3",70,c5,86,c6),triadic2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getTriadicHarmony,return )

int Color_Impl__obj::to24Bit(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_852_to24Bit)
HXDLIN( 852)		return (this1 & 16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,to24Bit,return )

::String Color_Impl__obj::toHexString(int this1,::hx::Null< bool >  __o_Alpha,::hx::Null< bool >  __o_Prefix){
            		bool Alpha = __o_Alpha.Default(true);
            		bool Prefix = __o_Prefix.Default(true);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_863_toHexString)
HXDLIN( 863)		::String _hx_tmp;
HXDLIN( 863)		if (Prefix) {
HXDLIN( 863)			_hx_tmp = HX_("0x",48,2a,00,00);
            		}
            		else {
HXDLIN( 863)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 863)		::String _hx_tmp1;
HXDLIN( 863)		if (Alpha) {
HXDLIN( 863)			_hx_tmp1 = ::StringTools_obj::hex(((this1 >> 24) & 255),2);
            		}
            		else {
HXDLIN( 863)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 863)		::String _hx_tmp2 = ((_hx_tmp + _hx_tmp1) + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 863)		::String _hx_tmp3 = (_hx_tmp2 + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 863)		return (_hx_tmp3 + ::StringTools_obj::hex((this1 & 255),2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_Impl__obj,toHexString,return )

::String Color_Impl__obj::toWebString(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_872_toWebString)
HXDLIN( 872)		::String _hx_tmp = (HX_("",00,00,00,00) + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 872)		::String _hx_tmp1 = (_hx_tmp + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 872)		return (HX_("#",23,00,00,00) + (_hx_tmp1 + ::StringTools_obj::hex((this1 & 255),2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toWebString,return )

int Color_Impl__obj::darken(int this1,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_881_darken)
HXLINE( 882)		Factor = ::vision::tools::MathTools_obj::boundFloat(Factor,( (Float)(0) ),( (Float)(1) ));
HXLINE( 883)		int output = this1;
HXLINE( 884)		{
HXLINE( 884)			Float value = (((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) )) * (( (Float)(1) ) - Factor));
HXDLIN( 884)			{
HXLINE( 884)				Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(output);
HXDLIN( 884)				Float Alpha = (( (Float)(((output >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 884)				Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 884)				Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN( 884)				{
HXLINE( 884)					Float Hue1 = Hue;
HXDLIN( 884)					Float Chroma = chroma;
HXDLIN( 884)					Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 884)					Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 884)					Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 884)					Chroma = (Chroma + match);
HXDLIN( 884)					switch((int)(::Std_obj::_hx_int(hueD))){
            						case (int)0: {
HXLINE( 884)							{
HXLINE( 884)								int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output1;
HXDLIN( 884)								if ((value1 > 255)) {
HXLINE( 884)									output1 = 255;
            								}
            								else {
HXLINE( 884)									if ((value1 < 0)) {
HXLINE( 884)										output1 = 0;
            									}
            									else {
HXLINE( 884)										output1 = value1;
            									}
            								}
HXDLIN( 884)								output = (output | (output1 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output2;
HXDLIN( 884)								if ((value2 > 255)) {
HXLINE( 884)									output2 = 255;
            								}
            								else {
HXLINE( 884)									if ((value2 < 0)) {
HXLINE( 884)										output2 = 0;
            									}
            									else {
HXLINE( 884)										output2 = value2;
            									}
            								}
HXDLIN( 884)								output = (output | (output2 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output3;
HXDLIN( 884)								if ((value3 > 255)) {
HXLINE( 884)									output3 = 255;
            								}
            								else {
HXLINE( 884)									if ((value3 < 0)) {
HXLINE( 884)										output3 = 0;
            									}
            									else {
HXLINE( 884)										output3 = value3;
            									}
            								}
HXDLIN( 884)								output = (output | output3);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output4;
HXDLIN( 884)								if ((value4 > 255)) {
HXLINE( 884)									output4 = 255;
            								}
            								else {
HXLINE( 884)									if ((value4 < 0)) {
HXLINE( 884)										output4 = 0;
            									}
            									else {
HXLINE( 884)										output4 = value4;
            									}
            								}
HXDLIN( 884)								output = (output | (output4 << 24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 884)							{
HXLINE( 884)								int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output5;
HXDLIN( 884)								if ((value5 > 255)) {
HXLINE( 884)									output5 = 255;
            								}
            								else {
HXLINE( 884)									if ((value5 < 0)) {
HXLINE( 884)										output5 = 0;
            									}
            									else {
HXLINE( 884)										output5 = value5;
            									}
            								}
HXDLIN( 884)								output = (output | (output5 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output6;
HXDLIN( 884)								if ((value6 > 255)) {
HXLINE( 884)									output6 = 255;
            								}
            								else {
HXLINE( 884)									if ((value6 < 0)) {
HXLINE( 884)										output6 = 0;
            									}
            									else {
HXLINE( 884)										output6 = value6;
            									}
            								}
HXDLIN( 884)								output = (output | (output6 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output7;
HXDLIN( 884)								if ((value7 > 255)) {
HXLINE( 884)									output7 = 255;
            								}
            								else {
HXLINE( 884)									if ((value7 < 0)) {
HXLINE( 884)										output7 = 0;
            									}
            									else {
HXLINE( 884)										output7 = value7;
            									}
            								}
HXDLIN( 884)								output = (output | output7);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output8;
HXDLIN( 884)								if ((value8 > 255)) {
HXLINE( 884)									output8 = 255;
            								}
            								else {
HXLINE( 884)									if ((value8 < 0)) {
HXLINE( 884)										output8 = 0;
            									}
            									else {
HXLINE( 884)										output8 = value8;
            									}
            								}
HXDLIN( 884)								output = (output | (output8 << 24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 884)							{
HXLINE( 884)								int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output9;
HXDLIN( 884)								if ((value9 > 255)) {
HXLINE( 884)									output9 = 255;
            								}
            								else {
HXLINE( 884)									if ((value9 < 0)) {
HXLINE( 884)										output9 = 0;
            									}
            									else {
HXLINE( 884)										output9 = value9;
            									}
            								}
HXDLIN( 884)								output = (output | (output9 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output10;
HXDLIN( 884)								if ((value10 > 255)) {
HXLINE( 884)									output10 = 255;
            								}
            								else {
HXLINE( 884)									if ((value10 < 0)) {
HXLINE( 884)										output10 = 0;
            									}
            									else {
HXLINE( 884)										output10 = value10;
            									}
            								}
HXDLIN( 884)								output = (output | (output10 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output11;
HXDLIN( 884)								if ((value11 > 255)) {
HXLINE( 884)									output11 = 255;
            								}
            								else {
HXLINE( 884)									if ((value11 < 0)) {
HXLINE( 884)										output11 = 0;
            									}
            									else {
HXLINE( 884)										output11 = value11;
            									}
            								}
HXDLIN( 884)								output = (output | output11);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output12;
HXDLIN( 884)								if ((value12 > 255)) {
HXLINE( 884)									output12 = 255;
            								}
            								else {
HXLINE( 884)									if ((value12 < 0)) {
HXLINE( 884)										output12 = 0;
            									}
            									else {
HXLINE( 884)										output12 = value12;
            									}
            								}
HXDLIN( 884)								output = (output | (output12 << 24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 884)							{
HXLINE( 884)								int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output13;
HXDLIN( 884)								if ((value13 > 255)) {
HXLINE( 884)									output13 = 255;
            								}
            								else {
HXLINE( 884)									if ((value13 < 0)) {
HXLINE( 884)										output13 = 0;
            									}
            									else {
HXLINE( 884)										output13 = value13;
            									}
            								}
HXDLIN( 884)								output = (output | (output13 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output14;
HXDLIN( 884)								if ((value14 > 255)) {
HXLINE( 884)									output14 = 255;
            								}
            								else {
HXLINE( 884)									if ((value14 < 0)) {
HXLINE( 884)										output14 = 0;
            									}
            									else {
HXLINE( 884)										output14 = value14;
            									}
            								}
HXDLIN( 884)								output = (output | (output14 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output15;
HXDLIN( 884)								if ((value15 > 255)) {
HXLINE( 884)									output15 = 255;
            								}
            								else {
HXLINE( 884)									if ((value15 < 0)) {
HXLINE( 884)										output15 = 0;
            									}
            									else {
HXLINE( 884)										output15 = value15;
            									}
            								}
HXDLIN( 884)								output = (output | output15);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output16;
HXDLIN( 884)								if ((value16 > 255)) {
HXLINE( 884)									output16 = 255;
            								}
            								else {
HXLINE( 884)									if ((value16 < 0)) {
HXLINE( 884)										output16 = 0;
            									}
            									else {
HXLINE( 884)										output16 = value16;
            									}
            								}
HXDLIN( 884)								output = (output | (output16 << 24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 884)							{
HXLINE( 884)								int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output17;
HXDLIN( 884)								if ((value17 > 255)) {
HXLINE( 884)									output17 = 255;
            								}
            								else {
HXLINE( 884)									if ((value17 < 0)) {
HXLINE( 884)										output17 = 0;
            									}
            									else {
HXLINE( 884)										output17 = value17;
            									}
            								}
HXDLIN( 884)								output = (output | (output17 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output18;
HXDLIN( 884)								if ((value18 > 255)) {
HXLINE( 884)									output18 = 255;
            								}
            								else {
HXLINE( 884)									if ((value18 < 0)) {
HXLINE( 884)										output18 = 0;
            									}
            									else {
HXLINE( 884)										output18 = value18;
            									}
            								}
HXDLIN( 884)								output = (output | (output18 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output19;
HXDLIN( 884)								if ((value19 > 255)) {
HXLINE( 884)									output19 = 255;
            								}
            								else {
HXLINE( 884)									if ((value19 < 0)) {
HXLINE( 884)										output19 = 0;
            									}
            									else {
HXLINE( 884)										output19 = value19;
            									}
            								}
HXDLIN( 884)								output = (output | output19);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output20;
HXDLIN( 884)								if ((value20 > 255)) {
HXLINE( 884)									output20 = 255;
            								}
            								else {
HXLINE( 884)									if ((value20 < 0)) {
HXLINE( 884)										output20 = 0;
            									}
            									else {
HXLINE( 884)										output20 = value20;
            									}
            								}
HXDLIN( 884)								output = (output | (output20 << 24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 884)							{
HXLINE( 884)								int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -16711681);
HXDLIN( 884)								int output21;
HXDLIN( 884)								if ((value21 > 255)) {
HXLINE( 884)									output21 = 255;
            								}
            								else {
HXLINE( 884)									if ((value21 < 0)) {
HXLINE( 884)										output21 = 0;
            									}
            									else {
HXLINE( 884)										output21 = value21;
            									}
            								}
HXDLIN( 884)								output = (output | (output21 << 16));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -65281);
HXDLIN( 884)								int output22;
HXDLIN( 884)								if ((value22 > 255)) {
HXLINE( 884)									output22 = 255;
            								}
            								else {
HXLINE( 884)									if ((value22 < 0)) {
HXLINE( 884)										output22 = 0;
            									}
            									else {
HXLINE( 884)										output22 = value22;
            									}
            								}
HXDLIN( 884)								output = (output | (output22 << 8));
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 884)								output = (output & -256);
HXDLIN( 884)								int output23;
HXDLIN( 884)								if ((value23 > 255)) {
HXLINE( 884)									output23 = 255;
            								}
            								else {
HXLINE( 884)									if ((value23 < 0)) {
HXLINE( 884)										output23 = 0;
            									}
            									else {
HXLINE( 884)										output23 = value23;
            									}
            								}
HXDLIN( 884)								output = (output | output23);
            							}
HXDLIN( 884)							{
HXLINE( 884)								int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 884)								output = (output & 16777215);
HXDLIN( 884)								int output24;
HXDLIN( 884)								if ((value24 > 255)) {
HXLINE( 884)									output24 = 255;
            								}
            								else {
HXLINE( 884)									if ((value24 < 0)) {
HXLINE( 884)										output24 = 0;
            									}
            									else {
HXLINE( 884)										output24 = value24;
            									}
            								}
HXDLIN( 884)								output = (output | (output24 << 24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 885)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,darken,return )

int Color_Impl__obj::lighten(int this1,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_894_lighten)
HXLINE( 895)		Factor = ::vision::tools::MathTools_obj::boundFloat(Factor,( (Float)(0) ),( (Float)(1) ));
HXLINE( 896)		int output = this1;
HXLINE( 897)		{
HXLINE( 897)			Float value = (((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) )) + ((( (Float)(1) ) - ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) ))) * Factor));
HXDLIN( 897)			{
HXLINE( 897)				Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(output);
HXDLIN( 897)				Float Alpha = (( (Float)(((output >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 897)				Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 897)				Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN( 897)				{
HXLINE( 897)					Float Hue1 = Hue;
HXDLIN( 897)					Float Chroma = chroma;
HXDLIN( 897)					Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 897)					Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 897)					Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 897)					Chroma = (Chroma + match);
HXDLIN( 897)					switch((int)(::Std_obj::_hx_int(hueD))){
            						case (int)0: {
HXLINE( 897)							{
HXLINE( 897)								int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output1;
HXDLIN( 897)								if ((value1 > 255)) {
HXLINE( 897)									output1 = 255;
            								}
            								else {
HXLINE( 897)									if ((value1 < 0)) {
HXLINE( 897)										output1 = 0;
            									}
            									else {
HXLINE( 897)										output1 = value1;
            									}
            								}
HXDLIN( 897)								output = (output | (output1 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output2;
HXDLIN( 897)								if ((value2 > 255)) {
HXLINE( 897)									output2 = 255;
            								}
            								else {
HXLINE( 897)									if ((value2 < 0)) {
HXLINE( 897)										output2 = 0;
            									}
            									else {
HXLINE( 897)										output2 = value2;
            									}
            								}
HXDLIN( 897)								output = (output | (output2 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output3;
HXDLIN( 897)								if ((value3 > 255)) {
HXLINE( 897)									output3 = 255;
            								}
            								else {
HXLINE( 897)									if ((value3 < 0)) {
HXLINE( 897)										output3 = 0;
            									}
            									else {
HXLINE( 897)										output3 = value3;
            									}
            								}
HXDLIN( 897)								output = (output | output3);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output4;
HXDLIN( 897)								if ((value4 > 255)) {
HXLINE( 897)									output4 = 255;
            								}
            								else {
HXLINE( 897)									if ((value4 < 0)) {
HXLINE( 897)										output4 = 0;
            									}
            									else {
HXLINE( 897)										output4 = value4;
            									}
            								}
HXDLIN( 897)								output = (output | (output4 << 24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 897)							{
HXLINE( 897)								int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output5;
HXDLIN( 897)								if ((value5 > 255)) {
HXLINE( 897)									output5 = 255;
            								}
            								else {
HXLINE( 897)									if ((value5 < 0)) {
HXLINE( 897)										output5 = 0;
            									}
            									else {
HXLINE( 897)										output5 = value5;
            									}
            								}
HXDLIN( 897)								output = (output | (output5 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output6;
HXDLIN( 897)								if ((value6 > 255)) {
HXLINE( 897)									output6 = 255;
            								}
            								else {
HXLINE( 897)									if ((value6 < 0)) {
HXLINE( 897)										output6 = 0;
            									}
            									else {
HXLINE( 897)										output6 = value6;
            									}
            								}
HXDLIN( 897)								output = (output | (output6 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output7;
HXDLIN( 897)								if ((value7 > 255)) {
HXLINE( 897)									output7 = 255;
            								}
            								else {
HXLINE( 897)									if ((value7 < 0)) {
HXLINE( 897)										output7 = 0;
            									}
            									else {
HXLINE( 897)										output7 = value7;
            									}
            								}
HXDLIN( 897)								output = (output | output7);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output8;
HXDLIN( 897)								if ((value8 > 255)) {
HXLINE( 897)									output8 = 255;
            								}
            								else {
HXLINE( 897)									if ((value8 < 0)) {
HXLINE( 897)										output8 = 0;
            									}
            									else {
HXLINE( 897)										output8 = value8;
            									}
            								}
HXDLIN( 897)								output = (output | (output8 << 24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 897)							{
HXLINE( 897)								int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output9;
HXDLIN( 897)								if ((value9 > 255)) {
HXLINE( 897)									output9 = 255;
            								}
            								else {
HXLINE( 897)									if ((value9 < 0)) {
HXLINE( 897)										output9 = 0;
            									}
            									else {
HXLINE( 897)										output9 = value9;
            									}
            								}
HXDLIN( 897)								output = (output | (output9 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output10;
HXDLIN( 897)								if ((value10 > 255)) {
HXLINE( 897)									output10 = 255;
            								}
            								else {
HXLINE( 897)									if ((value10 < 0)) {
HXLINE( 897)										output10 = 0;
            									}
            									else {
HXLINE( 897)										output10 = value10;
            									}
            								}
HXDLIN( 897)								output = (output | (output10 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output11;
HXDLIN( 897)								if ((value11 > 255)) {
HXLINE( 897)									output11 = 255;
            								}
            								else {
HXLINE( 897)									if ((value11 < 0)) {
HXLINE( 897)										output11 = 0;
            									}
            									else {
HXLINE( 897)										output11 = value11;
            									}
            								}
HXDLIN( 897)								output = (output | output11);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output12;
HXDLIN( 897)								if ((value12 > 255)) {
HXLINE( 897)									output12 = 255;
            								}
            								else {
HXLINE( 897)									if ((value12 < 0)) {
HXLINE( 897)										output12 = 0;
            									}
            									else {
HXLINE( 897)										output12 = value12;
            									}
            								}
HXDLIN( 897)								output = (output | (output12 << 24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 897)							{
HXLINE( 897)								int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output13;
HXDLIN( 897)								if ((value13 > 255)) {
HXLINE( 897)									output13 = 255;
            								}
            								else {
HXLINE( 897)									if ((value13 < 0)) {
HXLINE( 897)										output13 = 0;
            									}
            									else {
HXLINE( 897)										output13 = value13;
            									}
            								}
HXDLIN( 897)								output = (output | (output13 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output14;
HXDLIN( 897)								if ((value14 > 255)) {
HXLINE( 897)									output14 = 255;
            								}
            								else {
HXLINE( 897)									if ((value14 < 0)) {
HXLINE( 897)										output14 = 0;
            									}
            									else {
HXLINE( 897)										output14 = value14;
            									}
            								}
HXDLIN( 897)								output = (output | (output14 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output15;
HXDLIN( 897)								if ((value15 > 255)) {
HXLINE( 897)									output15 = 255;
            								}
            								else {
HXLINE( 897)									if ((value15 < 0)) {
HXLINE( 897)										output15 = 0;
            									}
            									else {
HXLINE( 897)										output15 = value15;
            									}
            								}
HXDLIN( 897)								output = (output | output15);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output16;
HXDLIN( 897)								if ((value16 > 255)) {
HXLINE( 897)									output16 = 255;
            								}
            								else {
HXLINE( 897)									if ((value16 < 0)) {
HXLINE( 897)										output16 = 0;
            									}
            									else {
HXLINE( 897)										output16 = value16;
            									}
            								}
HXDLIN( 897)								output = (output | (output16 << 24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 897)							{
HXLINE( 897)								int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output17;
HXDLIN( 897)								if ((value17 > 255)) {
HXLINE( 897)									output17 = 255;
            								}
            								else {
HXLINE( 897)									if ((value17 < 0)) {
HXLINE( 897)										output17 = 0;
            									}
            									else {
HXLINE( 897)										output17 = value17;
            									}
            								}
HXDLIN( 897)								output = (output | (output17 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output18;
HXDLIN( 897)								if ((value18 > 255)) {
HXLINE( 897)									output18 = 255;
            								}
            								else {
HXLINE( 897)									if ((value18 < 0)) {
HXLINE( 897)										output18 = 0;
            									}
            									else {
HXLINE( 897)										output18 = value18;
            									}
            								}
HXDLIN( 897)								output = (output | (output18 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output19;
HXDLIN( 897)								if ((value19 > 255)) {
HXLINE( 897)									output19 = 255;
            								}
            								else {
HXLINE( 897)									if ((value19 < 0)) {
HXLINE( 897)										output19 = 0;
            									}
            									else {
HXLINE( 897)										output19 = value19;
            									}
            								}
HXDLIN( 897)								output = (output | output19);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output20;
HXDLIN( 897)								if ((value20 > 255)) {
HXLINE( 897)									output20 = 255;
            								}
            								else {
HXLINE( 897)									if ((value20 < 0)) {
HXLINE( 897)										output20 = 0;
            									}
            									else {
HXLINE( 897)										output20 = value20;
            									}
            								}
HXDLIN( 897)								output = (output | (output20 << 24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 897)							{
HXLINE( 897)								int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -16711681);
HXDLIN( 897)								int output21;
HXDLIN( 897)								if ((value21 > 255)) {
HXLINE( 897)									output21 = 255;
            								}
            								else {
HXLINE( 897)									if ((value21 < 0)) {
HXLINE( 897)										output21 = 0;
            									}
            									else {
HXLINE( 897)										output21 = value21;
            									}
            								}
HXDLIN( 897)								output = (output | (output21 << 16));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -65281);
HXDLIN( 897)								int output22;
HXDLIN( 897)								if ((value22 > 255)) {
HXLINE( 897)									output22 = 255;
            								}
            								else {
HXLINE( 897)									if ((value22 < 0)) {
HXLINE( 897)										output22 = 0;
            									}
            									else {
HXLINE( 897)										output22 = value22;
            									}
            								}
HXDLIN( 897)								output = (output | (output22 << 8));
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 897)								output = (output & -256);
HXDLIN( 897)								int output23;
HXDLIN( 897)								if ((value23 > 255)) {
HXLINE( 897)									output23 = 255;
            								}
            								else {
HXLINE( 897)									if ((value23 < 0)) {
HXLINE( 897)										output23 = 0;
            									}
            									else {
HXLINE( 897)										output23 = value23;
            									}
            								}
HXDLIN( 897)								output = (output | output23);
            							}
HXDLIN( 897)							{
HXLINE( 897)								int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 897)								output = (output & 16777215);
HXDLIN( 897)								int output24;
HXDLIN( 897)								if ((value24 > 255)) {
HXLINE( 897)									output24 = 255;
            								}
            								else {
HXLINE( 897)									if ((value24 < 0)) {
HXLINE( 897)										output24 = 0;
            									}
            									else {
HXLINE( 897)										output24 = value24;
            									}
            								}
HXDLIN( 897)								output = (output | (output24 << 24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 898)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,lighten,return )

int Color_Impl__obj::invert(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_906_invert)
HXLINE( 907)		int oldAlpha = ((this1 >> 24) & 255);
HXLINE( 908)		int lhs = -1;
HXDLIN( 908)		int Red = (((lhs >> 16) & 255) - ((this1 >> 16) & 255));
HXDLIN( 908)		int Green = (((lhs >> 8) & 255) - ((this1 >> 8) & 255));
HXDLIN( 908)		int Blue = ((lhs & 255) - (this1 & 255));
HXDLIN( 908)		int Alpha = (((lhs >> 24) & 255) - ((this1 >> 24) & 255));
HXDLIN( 908)		int color = 0;
HXDLIN( 908)		{
HXLINE( 908)			color = (color & -16711681);
HXDLIN( 908)			int color1;
HXDLIN( 908)			if ((Red > 255)) {
HXLINE( 908)				color1 = 255;
            			}
            			else {
HXLINE( 908)				if ((Red < 0)) {
HXLINE( 908)					color1 = 0;
            				}
            				else {
HXLINE( 908)					color1 = Red;
            				}
            			}
HXDLIN( 908)			color = (color | (color1 << 16));
            		}
HXDLIN( 908)		{
HXLINE( 908)			color = (color & -65281);
HXDLIN( 908)			int color2;
HXDLIN( 908)			if ((Green > 255)) {
HXLINE( 908)				color2 = 255;
            			}
            			else {
HXLINE( 908)				if ((Green < 0)) {
HXLINE( 908)					color2 = 0;
            				}
            				else {
HXLINE( 908)					color2 = Green;
            				}
            			}
HXDLIN( 908)			color = (color | (color2 << 8));
            		}
HXDLIN( 908)		{
HXLINE( 908)			color = (color & -256);
HXDLIN( 908)			int color3;
HXDLIN( 908)			if ((Blue > 255)) {
HXLINE( 908)				color3 = 255;
            			}
            			else {
HXLINE( 908)				if ((Blue < 0)) {
HXLINE( 908)					color3 = 0;
            				}
            				else {
HXLINE( 908)					color3 = Blue;
            				}
            			}
HXDLIN( 908)			color = (color | color3);
            		}
HXDLIN( 908)		{
HXLINE( 908)			color = (color & 16777215);
HXDLIN( 908)			int color4;
HXDLIN( 908)			if ((Alpha > 255)) {
HXLINE( 908)				color4 = 255;
            			}
            			else {
HXLINE( 908)				if ((Alpha < 0)) {
HXLINE( 908)					color4 = 0;
            				}
            				else {
HXLINE( 908)					color4 = Alpha;
            				}
            			}
HXDLIN( 908)			color = (color | (color4 << 24));
            		}
HXDLIN( 908)		int output = color;
HXLINE( 909)		{
HXLINE( 909)			output = (output & 16777215);
HXDLIN( 909)			int output1;
HXDLIN( 909)			if ((oldAlpha > 255)) {
HXLINE( 909)				output1 = 255;
            			}
            			else {
HXLINE( 909)				if ((oldAlpha < 0)) {
HXLINE( 909)					output1 = 0;
            				}
            				else {
HXLINE( 909)					output1 = oldAlpha;
            				}
            			}
HXDLIN( 909)			output = (output | (output1 << 24));
            		}
HXLINE( 910)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,invert,return )

int Color_Impl__obj::setRGBA(int this1,int Red,int Green,int Blue,::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_922_setRGBA)
HXLINE( 923)		{
HXLINE( 923)			this1 = (this1 & -16711681);
HXDLIN( 923)			int this2;
HXDLIN( 923)			if ((Red > 255)) {
HXLINE( 923)				this2 = 255;
            			}
            			else {
HXLINE( 923)				if ((Red < 0)) {
HXLINE( 923)					this2 = 0;
            				}
            				else {
HXLINE( 923)					this2 = Red;
            				}
            			}
HXDLIN( 923)			this1 = (this1 | (this2 << 16));
            		}
HXLINE( 924)		{
HXLINE( 924)			this1 = (this1 & -65281);
HXDLIN( 924)			int this3;
HXDLIN( 924)			if ((Green > 255)) {
HXLINE( 924)				this3 = 255;
            			}
            			else {
HXLINE( 924)				if ((Green < 0)) {
HXLINE( 924)					this3 = 0;
            				}
            				else {
HXLINE( 924)					this3 = Green;
            				}
            			}
HXDLIN( 924)			this1 = (this1 | (this3 << 8));
            		}
HXLINE( 925)		{
HXLINE( 925)			this1 = (this1 & -256);
HXDLIN( 925)			int this4;
HXDLIN( 925)			if ((Blue > 255)) {
HXLINE( 925)				this4 = 255;
            			}
            			else {
HXLINE( 925)				if ((Blue < 0)) {
HXLINE( 925)					this4 = 0;
            				}
            				else {
HXLINE( 925)					this4 = Blue;
            				}
            			}
HXDLIN( 925)			this1 = (this1 | this4);
            		}
HXLINE( 926)		{
HXLINE( 926)			this1 = (this1 & 16777215);
HXDLIN( 926)			int this5;
HXDLIN( 926)			if ((Alpha > 255)) {
HXLINE( 926)				this5 = 255;
            			}
            			else {
HXLINE( 926)				if ((Alpha < 0)) {
HXLINE( 926)					this5 = 0;
            				}
            				else {
HXLINE( 926)					this5 = Alpha;
            				}
            			}
HXDLIN( 926)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 927)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setRGBA,return )

int Color_Impl__obj::setRGBAFloat(int this1,Float Red,Float Green,Float Blue,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_939_setRGBAFloat)
HXLINE( 940)		{
HXLINE( 940)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 940)			this1 = (this1 & -16711681);
HXDLIN( 940)			int this2;
HXDLIN( 940)			if ((value > 255)) {
HXLINE( 940)				this2 = 255;
            			}
            			else {
HXLINE( 940)				if ((value < 0)) {
HXLINE( 940)					this2 = 0;
            				}
            				else {
HXLINE( 940)					this2 = value;
            				}
            			}
HXDLIN( 940)			this1 = (this1 | (this2 << 16));
            		}
HXLINE( 941)		{
HXLINE( 941)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 941)			this1 = (this1 & -65281);
HXDLIN( 941)			int this3;
HXDLIN( 941)			if ((value1 > 255)) {
HXLINE( 941)				this3 = 255;
            			}
            			else {
HXLINE( 941)				if ((value1 < 0)) {
HXLINE( 941)					this3 = 0;
            				}
            				else {
HXLINE( 941)					this3 = value1;
            				}
            			}
HXDLIN( 941)			this1 = (this1 | (this3 << 8));
            		}
HXLINE( 942)		{
HXLINE( 942)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 942)			this1 = (this1 & -256);
HXDLIN( 942)			int this4;
HXDLIN( 942)			if ((value2 > 255)) {
HXLINE( 942)				this4 = 255;
            			}
            			else {
HXLINE( 942)				if ((value2 < 0)) {
HXLINE( 942)					this4 = 0;
            				}
            				else {
HXLINE( 942)					this4 = value2;
            				}
            			}
HXDLIN( 942)			this1 = (this1 | this4);
            		}
HXLINE( 943)		{
HXLINE( 943)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 943)			this1 = (this1 & 16777215);
HXDLIN( 943)			int this5;
HXDLIN( 943)			if ((value3 > 255)) {
HXLINE( 943)				this5 = 255;
            			}
            			else {
HXLINE( 943)				if ((value3 < 0)) {
HXLINE( 943)					this5 = 0;
            				}
            				else {
HXLINE( 943)					this5 = value3;
            				}
            			}
HXDLIN( 943)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 944)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setRGBAFloat,return )

int Color_Impl__obj::setCMYK(int this1,Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_957_setCMYK)
HXLINE( 958)		{
HXLINE( 958)			Float value = ((( (Float)(1) ) - Cyan) * (( (Float)(1) ) - Black));
HXDLIN( 958)			{
HXLINE( 958)				int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 958)				this1 = (this1 & -16711681);
HXDLIN( 958)				int this2;
HXDLIN( 958)				if ((value1 > 255)) {
HXLINE( 958)					this2 = 255;
            				}
            				else {
HXLINE( 958)					if ((value1 < 0)) {
HXLINE( 958)						this2 = 0;
            					}
            					else {
HXLINE( 958)						this2 = value1;
            					}
            				}
HXDLIN( 958)				this1 = (this1 | (this2 << 16));
            			}
            		}
HXLINE( 959)		{
HXLINE( 959)			Float value2 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 959)			{
HXLINE( 959)				int value3 = ::Math_obj::round((value2 * ( (Float)(255) )));
HXDLIN( 959)				this1 = (this1 & -65281);
HXDLIN( 959)				int this3;
HXDLIN( 959)				if ((value3 > 255)) {
HXLINE( 959)					this3 = 255;
            				}
            				else {
HXLINE( 959)					if ((value3 < 0)) {
HXLINE( 959)						this3 = 0;
            					}
            					else {
HXLINE( 959)						this3 = value3;
            					}
            				}
HXDLIN( 959)				this1 = (this1 | (this3 << 8));
            			}
            		}
HXLINE( 960)		{
HXLINE( 960)			Float value4 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 960)			{
HXLINE( 960)				int value5 = ::Math_obj::round((value4 * ( (Float)(255) )));
HXDLIN( 960)				this1 = (this1 & -256);
HXDLIN( 960)				int this4;
HXDLIN( 960)				if ((value5 > 255)) {
HXLINE( 960)					this4 = 255;
            				}
            				else {
HXLINE( 960)					if ((value5 < 0)) {
HXLINE( 960)						this4 = 0;
            					}
            					else {
HXLINE( 960)						this4 = value5;
            					}
            				}
HXDLIN( 960)				this1 = (this1 | this4);
            			}
            		}
HXLINE( 961)		{
HXLINE( 961)			int value6 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 961)			this1 = (this1 & 16777215);
HXDLIN( 961)			int this5;
HXDLIN( 961)			if ((value6 > 255)) {
HXLINE( 961)				this5 = 255;
            			}
            			else {
HXLINE( 961)				if ((value6 < 0)) {
HXLINE( 961)					this5 = 0;
            				}
            				else {
HXLINE( 961)					this5 = value6;
            				}
            			}
HXDLIN( 961)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 962)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Color_Impl__obj,setCMYK,return )

int Color_Impl__obj::setHSB(int this1,Float Hue,Float Saturation,Float Brightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_974_setHSB)
HXLINE( 975)		Float chroma = (Brightness * Saturation);
HXLINE( 976)		Float match = (Brightness - chroma);
HXLINE( 977)		Float Hue1 = Hue;
HXDLIN( 977)		Float Chroma = chroma;
HXDLIN( 977)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 977)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 977)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 977)		Chroma = (Chroma + match);
HXDLIN( 977)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 977)				{
HXLINE( 977)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this2;
HXDLIN( 977)					if ((value > 255)) {
HXLINE( 977)						this2 = 255;
            					}
            					else {
HXLINE( 977)						if ((value < 0)) {
HXLINE( 977)							this2 = 0;
            						}
            						else {
HXLINE( 977)							this2 = value;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this3;
HXDLIN( 977)					if ((value1 > 255)) {
HXLINE( 977)						this3 = 255;
            					}
            					else {
HXLINE( 977)						if ((value1 < 0)) {
HXLINE( 977)							this3 = 0;
            						}
            						else {
HXLINE( 977)							this3 = value1;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this4;
HXDLIN( 977)					if ((value2 > 255)) {
HXLINE( 977)						this4 = 255;
            					}
            					else {
HXLINE( 977)						if ((value2 < 0)) {
HXLINE( 977)							this4 = 0;
            						}
            						else {
HXLINE( 977)							this4 = value2;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this4);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this5;
HXDLIN( 977)					if ((value3 > 255)) {
HXLINE( 977)						this5 = 255;
            					}
            					else {
HXLINE( 977)						if ((value3 < 0)) {
HXLINE( 977)							this5 = 0;
            						}
            						else {
HXLINE( 977)							this5 = value3;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 977)				{
HXLINE( 977)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this6;
HXDLIN( 977)					if ((value4 > 255)) {
HXLINE( 977)						this6 = 255;
            					}
            					else {
HXLINE( 977)						if ((value4 < 0)) {
HXLINE( 977)							this6 = 0;
            						}
            						else {
HXLINE( 977)							this6 = value4;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this7;
HXDLIN( 977)					if ((value5 > 255)) {
HXLINE( 977)						this7 = 255;
            					}
            					else {
HXLINE( 977)						if ((value5 < 0)) {
HXLINE( 977)							this7 = 0;
            						}
            						else {
HXLINE( 977)							this7 = value5;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this8;
HXDLIN( 977)					if ((value6 > 255)) {
HXLINE( 977)						this8 = 255;
            					}
            					else {
HXLINE( 977)						if ((value6 < 0)) {
HXLINE( 977)							this8 = 0;
            						}
            						else {
HXLINE( 977)							this8 = value6;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this8);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this9;
HXDLIN( 977)					if ((value7 > 255)) {
HXLINE( 977)						this9 = 255;
            					}
            					else {
HXLINE( 977)						if ((value7 < 0)) {
HXLINE( 977)							this9 = 0;
            						}
            						else {
HXLINE( 977)							this9 = value7;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 977)				{
HXLINE( 977)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this10;
HXDLIN( 977)					if ((value8 > 255)) {
HXLINE( 977)						this10 = 255;
            					}
            					else {
HXLINE( 977)						if ((value8 < 0)) {
HXLINE( 977)							this10 = 0;
            						}
            						else {
HXLINE( 977)							this10 = value8;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this11;
HXDLIN( 977)					if ((value9 > 255)) {
HXLINE( 977)						this11 = 255;
            					}
            					else {
HXLINE( 977)						if ((value9 < 0)) {
HXLINE( 977)							this11 = 0;
            						}
            						else {
HXLINE( 977)							this11 = value9;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this12;
HXDLIN( 977)					if ((value10 > 255)) {
HXLINE( 977)						this12 = 255;
            					}
            					else {
HXLINE( 977)						if ((value10 < 0)) {
HXLINE( 977)							this12 = 0;
            						}
            						else {
HXLINE( 977)							this12 = value10;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this12);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this13;
HXDLIN( 977)					if ((value11 > 255)) {
HXLINE( 977)						this13 = 255;
            					}
            					else {
HXLINE( 977)						if ((value11 < 0)) {
HXLINE( 977)							this13 = 0;
            						}
            						else {
HXLINE( 977)							this13 = value11;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 977)				{
HXLINE( 977)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this14;
HXDLIN( 977)					if ((value12 > 255)) {
HXLINE( 977)						this14 = 255;
            					}
            					else {
HXLINE( 977)						if ((value12 < 0)) {
HXLINE( 977)							this14 = 0;
            						}
            						else {
HXLINE( 977)							this14 = value12;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this15;
HXDLIN( 977)					if ((value13 > 255)) {
HXLINE( 977)						this15 = 255;
            					}
            					else {
HXLINE( 977)						if ((value13 < 0)) {
HXLINE( 977)							this15 = 0;
            						}
            						else {
HXLINE( 977)							this15 = value13;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this16;
HXDLIN( 977)					if ((value14 > 255)) {
HXLINE( 977)						this16 = 255;
            					}
            					else {
HXLINE( 977)						if ((value14 < 0)) {
HXLINE( 977)							this16 = 0;
            						}
            						else {
HXLINE( 977)							this16 = value14;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this16);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this17;
HXDLIN( 977)					if ((value15 > 255)) {
HXLINE( 977)						this17 = 255;
            					}
            					else {
HXLINE( 977)						if ((value15 < 0)) {
HXLINE( 977)							this17 = 0;
            						}
            						else {
HXLINE( 977)							this17 = value15;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 977)				{
HXLINE( 977)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this18;
HXDLIN( 977)					if ((value16 > 255)) {
HXLINE( 977)						this18 = 255;
            					}
            					else {
HXLINE( 977)						if ((value16 < 0)) {
HXLINE( 977)							this18 = 0;
            						}
            						else {
HXLINE( 977)							this18 = value16;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this19;
HXDLIN( 977)					if ((value17 > 255)) {
HXLINE( 977)						this19 = 255;
            					}
            					else {
HXLINE( 977)						if ((value17 < 0)) {
HXLINE( 977)							this19 = 0;
            						}
            						else {
HXLINE( 977)							this19 = value17;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this20;
HXDLIN( 977)					if ((value18 > 255)) {
HXLINE( 977)						this20 = 255;
            					}
            					else {
HXLINE( 977)						if ((value18 < 0)) {
HXLINE( 977)							this20 = 0;
            						}
            						else {
HXLINE( 977)							this20 = value18;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this20);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this21;
HXDLIN( 977)					if ((value19 > 255)) {
HXLINE( 977)						this21 = 255;
            					}
            					else {
HXLINE( 977)						if ((value19 < 0)) {
HXLINE( 977)							this21 = 0;
            						}
            						else {
HXLINE( 977)							this21 = value19;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 977)				{
HXLINE( 977)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -16711681);
HXDLIN( 977)					int this22;
HXDLIN( 977)					if ((value20 > 255)) {
HXLINE( 977)						this22 = 255;
            					}
            					else {
HXLINE( 977)						if ((value20 < 0)) {
HXLINE( 977)							this22 = 0;
            						}
            						else {
HXLINE( 977)							this22 = value20;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -65281);
HXDLIN( 977)					int this23;
HXDLIN( 977)					if ((value21 > 255)) {
HXLINE( 977)						this23 = 255;
            					}
            					else {
HXLINE( 977)						if ((value21 < 0)) {
HXLINE( 977)							this23 = 0;
            						}
            						else {
HXLINE( 977)							this23 = value21;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & -256);
HXDLIN( 977)					int this24;
HXDLIN( 977)					if ((value22 > 255)) {
HXLINE( 977)						this24 = 255;
            					}
            					else {
HXLINE( 977)						if ((value22 < 0)) {
HXLINE( 977)							this24 = 0;
            						}
            						else {
HXLINE( 977)							this24 = value22;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | this24);
            				}
HXDLIN( 977)				{
HXLINE( 977)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 977)					this1 = (this1 & 16777215);
HXDLIN( 977)					int this25;
HXDLIN( 977)					if ((value23 > 255)) {
HXLINE( 977)						this25 = 255;
            					}
            					else {
HXLINE( 977)						if ((value23 < 0)) {
HXLINE( 977)							this25 = 0;
            						}
            						else {
HXLINE( 977)							this25 = value23;
            						}
            					}
HXDLIN( 977)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 977)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setHSB,return )

int Color_Impl__obj::setHSL(int this1,Float Hue,Float Saturation,Float Lightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_989_setHSL)
HXLINE( 990)		Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * Lightness) - ( (Float)(1) )))) * Saturation);
HXLINE( 991)		Float match = (Lightness - (chroma / ( (Float)(2) )));
HXLINE( 992)		Float Hue1 = Hue;
HXDLIN( 992)		Float Chroma = chroma;
HXDLIN( 992)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 992)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 992)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 992)		Chroma = (Chroma + match);
HXDLIN( 992)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 992)				{
HXLINE( 992)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this2;
HXDLIN( 992)					if ((value > 255)) {
HXLINE( 992)						this2 = 255;
            					}
            					else {
HXLINE( 992)						if ((value < 0)) {
HXLINE( 992)							this2 = 0;
            						}
            						else {
HXLINE( 992)							this2 = value;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this3;
HXDLIN( 992)					if ((value1 > 255)) {
HXLINE( 992)						this3 = 255;
            					}
            					else {
HXLINE( 992)						if ((value1 < 0)) {
HXLINE( 992)							this3 = 0;
            						}
            						else {
HXLINE( 992)							this3 = value1;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this4;
HXDLIN( 992)					if ((value2 > 255)) {
HXLINE( 992)						this4 = 255;
            					}
            					else {
HXLINE( 992)						if ((value2 < 0)) {
HXLINE( 992)							this4 = 0;
            						}
            						else {
HXLINE( 992)							this4 = value2;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this4);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this5;
HXDLIN( 992)					if ((value3 > 255)) {
HXLINE( 992)						this5 = 255;
            					}
            					else {
HXLINE( 992)						if ((value3 < 0)) {
HXLINE( 992)							this5 = 0;
            						}
            						else {
HXLINE( 992)							this5 = value3;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 992)				{
HXLINE( 992)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this6;
HXDLIN( 992)					if ((value4 > 255)) {
HXLINE( 992)						this6 = 255;
            					}
            					else {
HXLINE( 992)						if ((value4 < 0)) {
HXLINE( 992)							this6 = 0;
            						}
            						else {
HXLINE( 992)							this6 = value4;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this7;
HXDLIN( 992)					if ((value5 > 255)) {
HXLINE( 992)						this7 = 255;
            					}
            					else {
HXLINE( 992)						if ((value5 < 0)) {
HXLINE( 992)							this7 = 0;
            						}
            						else {
HXLINE( 992)							this7 = value5;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this8;
HXDLIN( 992)					if ((value6 > 255)) {
HXLINE( 992)						this8 = 255;
            					}
            					else {
HXLINE( 992)						if ((value6 < 0)) {
HXLINE( 992)							this8 = 0;
            						}
            						else {
HXLINE( 992)							this8 = value6;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this8);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this9;
HXDLIN( 992)					if ((value7 > 255)) {
HXLINE( 992)						this9 = 255;
            					}
            					else {
HXLINE( 992)						if ((value7 < 0)) {
HXLINE( 992)							this9 = 0;
            						}
            						else {
HXLINE( 992)							this9 = value7;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 992)				{
HXLINE( 992)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this10;
HXDLIN( 992)					if ((value8 > 255)) {
HXLINE( 992)						this10 = 255;
            					}
            					else {
HXLINE( 992)						if ((value8 < 0)) {
HXLINE( 992)							this10 = 0;
            						}
            						else {
HXLINE( 992)							this10 = value8;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this11;
HXDLIN( 992)					if ((value9 > 255)) {
HXLINE( 992)						this11 = 255;
            					}
            					else {
HXLINE( 992)						if ((value9 < 0)) {
HXLINE( 992)							this11 = 0;
            						}
            						else {
HXLINE( 992)							this11 = value9;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this12;
HXDLIN( 992)					if ((value10 > 255)) {
HXLINE( 992)						this12 = 255;
            					}
            					else {
HXLINE( 992)						if ((value10 < 0)) {
HXLINE( 992)							this12 = 0;
            						}
            						else {
HXLINE( 992)							this12 = value10;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this12);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this13;
HXDLIN( 992)					if ((value11 > 255)) {
HXLINE( 992)						this13 = 255;
            					}
            					else {
HXLINE( 992)						if ((value11 < 0)) {
HXLINE( 992)							this13 = 0;
            						}
            						else {
HXLINE( 992)							this13 = value11;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 992)				{
HXLINE( 992)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this14;
HXDLIN( 992)					if ((value12 > 255)) {
HXLINE( 992)						this14 = 255;
            					}
            					else {
HXLINE( 992)						if ((value12 < 0)) {
HXLINE( 992)							this14 = 0;
            						}
            						else {
HXLINE( 992)							this14 = value12;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this15;
HXDLIN( 992)					if ((value13 > 255)) {
HXLINE( 992)						this15 = 255;
            					}
            					else {
HXLINE( 992)						if ((value13 < 0)) {
HXLINE( 992)							this15 = 0;
            						}
            						else {
HXLINE( 992)							this15 = value13;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this16;
HXDLIN( 992)					if ((value14 > 255)) {
HXLINE( 992)						this16 = 255;
            					}
            					else {
HXLINE( 992)						if ((value14 < 0)) {
HXLINE( 992)							this16 = 0;
            						}
            						else {
HXLINE( 992)							this16 = value14;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this16);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this17;
HXDLIN( 992)					if ((value15 > 255)) {
HXLINE( 992)						this17 = 255;
            					}
            					else {
HXLINE( 992)						if ((value15 < 0)) {
HXLINE( 992)							this17 = 0;
            						}
            						else {
HXLINE( 992)							this17 = value15;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 992)				{
HXLINE( 992)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this18;
HXDLIN( 992)					if ((value16 > 255)) {
HXLINE( 992)						this18 = 255;
            					}
            					else {
HXLINE( 992)						if ((value16 < 0)) {
HXLINE( 992)							this18 = 0;
            						}
            						else {
HXLINE( 992)							this18 = value16;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this19;
HXDLIN( 992)					if ((value17 > 255)) {
HXLINE( 992)						this19 = 255;
            					}
            					else {
HXLINE( 992)						if ((value17 < 0)) {
HXLINE( 992)							this19 = 0;
            						}
            						else {
HXLINE( 992)							this19 = value17;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this20;
HXDLIN( 992)					if ((value18 > 255)) {
HXLINE( 992)						this20 = 255;
            					}
            					else {
HXLINE( 992)						if ((value18 < 0)) {
HXLINE( 992)							this20 = 0;
            						}
            						else {
HXLINE( 992)							this20 = value18;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this20);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this21;
HXDLIN( 992)					if ((value19 > 255)) {
HXLINE( 992)						this21 = 255;
            					}
            					else {
HXLINE( 992)						if ((value19 < 0)) {
HXLINE( 992)							this21 = 0;
            						}
            						else {
HXLINE( 992)							this21 = value19;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 992)				{
HXLINE( 992)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -16711681);
HXDLIN( 992)					int this22;
HXDLIN( 992)					if ((value20 > 255)) {
HXLINE( 992)						this22 = 255;
            					}
            					else {
HXLINE( 992)						if ((value20 < 0)) {
HXLINE( 992)							this22 = 0;
            						}
            						else {
HXLINE( 992)							this22 = value20;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -65281);
HXDLIN( 992)					int this23;
HXDLIN( 992)					if ((value21 > 255)) {
HXLINE( 992)						this23 = 255;
            					}
            					else {
HXLINE( 992)						if ((value21 < 0)) {
HXLINE( 992)							this23 = 0;
            						}
            						else {
HXLINE( 992)							this23 = value21;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & -256);
HXDLIN( 992)					int this24;
HXDLIN( 992)					if ((value22 > 255)) {
HXLINE( 992)						this24 = 255;
            					}
            					else {
HXLINE( 992)						if ((value22 < 0)) {
HXLINE( 992)							this24 = 0;
            						}
            						else {
HXLINE( 992)							this24 = value22;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | this24);
            				}
HXDLIN( 992)				{
HXLINE( 992)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 992)					this1 = (this1 & 16777215);
HXDLIN( 992)					int this25;
HXDLIN( 992)					if ((value23 > 255)) {
HXLINE( 992)						this25 = 255;
            					}
            					else {
HXLINE( 992)						if ((value23 < 0)) {
HXLINE( 992)							this25 = 0;
            						}
            						else {
HXLINE( 992)							this25 = value23;
            						}
            					}
HXDLIN( 992)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 992)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setHSL,return )

int Color_Impl__obj::setHSChromaMatch(int this1,Float Hue,Float Saturation,Float Chroma,Float Match,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_998_setHSChromaMatch)
HXLINE( 999)		Hue = ::hx::Mod(Hue,360);
HXLINE(1000)		Float hueD = (Hue / ( (Float)(60) ));
HXLINE(1001)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + Match);
HXLINE(1002)		Chroma = (Chroma + Match);
HXLINE(1004)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE(1005)				{
HXLINE(1005)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1005)					this1 = (this1 & -16711681);
HXDLIN(1005)					int this2;
HXDLIN(1005)					if ((value > 255)) {
HXLINE(1005)						this2 = 255;
            					}
            					else {
HXLINE(1005)						if ((value < 0)) {
HXLINE(1005)							this2 = 0;
            						}
            						else {
HXLINE(1005)							this2 = value;
            						}
            					}
HXDLIN(1005)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN(1005)				{
HXLINE(1005)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1005)					this1 = (this1 & -65281);
HXDLIN(1005)					int this3;
HXDLIN(1005)					if ((value1 > 255)) {
HXLINE(1005)						this3 = 255;
            					}
            					else {
HXLINE(1005)						if ((value1 < 0)) {
HXLINE(1005)							this3 = 0;
            						}
            						else {
HXLINE(1005)							this3 = value1;
            						}
            					}
HXDLIN(1005)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN(1005)				{
HXLINE(1005)					int value2 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1005)					this1 = (this1 & -256);
HXDLIN(1005)					int this4;
HXDLIN(1005)					if ((value2 > 255)) {
HXLINE(1005)						this4 = 255;
            					}
            					else {
HXLINE(1005)						if ((value2 < 0)) {
HXLINE(1005)							this4 = 0;
            						}
            						else {
HXLINE(1005)							this4 = value2;
            						}
            					}
HXDLIN(1005)					this1 = (this1 | this4);
            				}
HXDLIN(1005)				{
HXLINE(1005)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1005)					this1 = (this1 & 16777215);
HXDLIN(1005)					int this5;
HXDLIN(1005)					if ((value3 > 255)) {
HXLINE(1005)						this5 = 255;
            					}
            					else {
HXLINE(1005)						if ((value3 < 0)) {
HXLINE(1005)							this5 = 0;
            						}
            						else {
HXLINE(1005)							this5 = value3;
            						}
            					}
HXDLIN(1005)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(1006)				{
HXLINE(1006)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1006)					this1 = (this1 & -16711681);
HXDLIN(1006)					int this6;
HXDLIN(1006)					if ((value4 > 255)) {
HXLINE(1006)						this6 = 255;
            					}
            					else {
HXLINE(1006)						if ((value4 < 0)) {
HXLINE(1006)							this6 = 0;
            						}
            						else {
HXLINE(1006)							this6 = value4;
            						}
            					}
HXDLIN(1006)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN(1006)				{
HXLINE(1006)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1006)					this1 = (this1 & -65281);
HXDLIN(1006)					int this7;
HXDLIN(1006)					if ((value5 > 255)) {
HXLINE(1006)						this7 = 255;
            					}
            					else {
HXLINE(1006)						if ((value5 < 0)) {
HXLINE(1006)							this7 = 0;
            						}
            						else {
HXLINE(1006)							this7 = value5;
            						}
            					}
HXDLIN(1006)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN(1006)				{
HXLINE(1006)					int value6 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1006)					this1 = (this1 & -256);
HXDLIN(1006)					int this8;
HXDLIN(1006)					if ((value6 > 255)) {
HXLINE(1006)						this8 = 255;
            					}
            					else {
HXLINE(1006)						if ((value6 < 0)) {
HXLINE(1006)							this8 = 0;
            						}
            						else {
HXLINE(1006)							this8 = value6;
            						}
            					}
HXDLIN(1006)					this1 = (this1 | this8);
            				}
HXDLIN(1006)				{
HXLINE(1006)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1006)					this1 = (this1 & 16777215);
HXDLIN(1006)					int this9;
HXDLIN(1006)					if ((value7 > 255)) {
HXLINE(1006)						this9 = 255;
            					}
            					else {
HXLINE(1006)						if ((value7 < 0)) {
HXLINE(1006)							this9 = 0;
            						}
            						else {
HXLINE(1006)							this9 = value7;
            						}
            					}
HXDLIN(1006)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(1007)				{
HXLINE(1007)					int value8 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1007)					this1 = (this1 & -16711681);
HXDLIN(1007)					int this10;
HXDLIN(1007)					if ((value8 > 255)) {
HXLINE(1007)						this10 = 255;
            					}
            					else {
HXLINE(1007)						if ((value8 < 0)) {
HXLINE(1007)							this10 = 0;
            						}
            						else {
HXLINE(1007)							this10 = value8;
            						}
            					}
HXDLIN(1007)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN(1007)				{
HXLINE(1007)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1007)					this1 = (this1 & -65281);
HXDLIN(1007)					int this11;
HXDLIN(1007)					if ((value9 > 255)) {
HXLINE(1007)						this11 = 255;
            					}
            					else {
HXLINE(1007)						if ((value9 < 0)) {
HXLINE(1007)							this11 = 0;
            						}
            						else {
HXLINE(1007)							this11 = value9;
            						}
            					}
HXDLIN(1007)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN(1007)				{
HXLINE(1007)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1007)					this1 = (this1 & -256);
HXDLIN(1007)					int this12;
HXDLIN(1007)					if ((value10 > 255)) {
HXLINE(1007)						this12 = 255;
            					}
            					else {
HXLINE(1007)						if ((value10 < 0)) {
HXLINE(1007)							this12 = 0;
            						}
            						else {
HXLINE(1007)							this12 = value10;
            						}
            					}
HXDLIN(1007)					this1 = (this1 | this12);
            				}
HXDLIN(1007)				{
HXLINE(1007)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1007)					this1 = (this1 & 16777215);
HXDLIN(1007)					int this13;
HXDLIN(1007)					if ((value11 > 255)) {
HXLINE(1007)						this13 = 255;
            					}
            					else {
HXLINE(1007)						if ((value11 < 0)) {
HXLINE(1007)							this13 = 0;
            						}
            						else {
HXLINE(1007)							this13 = value11;
            						}
            					}
HXDLIN(1007)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(1008)				{
HXLINE(1008)					int value12 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1008)					this1 = (this1 & -16711681);
HXDLIN(1008)					int this14;
HXDLIN(1008)					if ((value12 > 255)) {
HXLINE(1008)						this14 = 255;
            					}
            					else {
HXLINE(1008)						if ((value12 < 0)) {
HXLINE(1008)							this14 = 0;
            						}
            						else {
HXLINE(1008)							this14 = value12;
            						}
            					}
HXDLIN(1008)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN(1008)				{
HXLINE(1008)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1008)					this1 = (this1 & -65281);
HXDLIN(1008)					int this15;
HXDLIN(1008)					if ((value13 > 255)) {
HXLINE(1008)						this15 = 255;
            					}
            					else {
HXLINE(1008)						if ((value13 < 0)) {
HXLINE(1008)							this15 = 0;
            						}
            						else {
HXLINE(1008)							this15 = value13;
            						}
            					}
HXDLIN(1008)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN(1008)				{
HXLINE(1008)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1008)					this1 = (this1 & -256);
HXDLIN(1008)					int this16;
HXDLIN(1008)					if ((value14 > 255)) {
HXLINE(1008)						this16 = 255;
            					}
            					else {
HXLINE(1008)						if ((value14 < 0)) {
HXLINE(1008)							this16 = 0;
            						}
            						else {
HXLINE(1008)							this16 = value14;
            						}
            					}
HXDLIN(1008)					this1 = (this1 | this16);
            				}
HXDLIN(1008)				{
HXLINE(1008)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1008)					this1 = (this1 & 16777215);
HXDLIN(1008)					int this17;
HXDLIN(1008)					if ((value15 > 255)) {
HXLINE(1008)						this17 = 255;
            					}
            					else {
HXLINE(1008)						if ((value15 < 0)) {
HXLINE(1008)							this17 = 0;
            						}
            						else {
HXLINE(1008)							this17 = value15;
            						}
            					}
HXDLIN(1008)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(1009)				{
HXLINE(1009)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1009)					this1 = (this1 & -16711681);
HXDLIN(1009)					int this18;
HXDLIN(1009)					if ((value16 > 255)) {
HXLINE(1009)						this18 = 255;
            					}
            					else {
HXLINE(1009)						if ((value16 < 0)) {
HXLINE(1009)							this18 = 0;
            						}
            						else {
HXLINE(1009)							this18 = value16;
            						}
            					}
HXDLIN(1009)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN(1009)				{
HXLINE(1009)					int value17 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1009)					this1 = (this1 & -65281);
HXDLIN(1009)					int this19;
HXDLIN(1009)					if ((value17 > 255)) {
HXLINE(1009)						this19 = 255;
            					}
            					else {
HXLINE(1009)						if ((value17 < 0)) {
HXLINE(1009)							this19 = 0;
            						}
            						else {
HXLINE(1009)							this19 = value17;
            						}
            					}
HXDLIN(1009)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN(1009)				{
HXLINE(1009)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1009)					this1 = (this1 & -256);
HXDLIN(1009)					int this20;
HXDLIN(1009)					if ((value18 > 255)) {
HXLINE(1009)						this20 = 255;
            					}
            					else {
HXLINE(1009)						if ((value18 < 0)) {
HXLINE(1009)							this20 = 0;
            						}
            						else {
HXLINE(1009)							this20 = value18;
            						}
            					}
HXDLIN(1009)					this1 = (this1 | this20);
            				}
HXDLIN(1009)				{
HXLINE(1009)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1009)					this1 = (this1 & 16777215);
HXDLIN(1009)					int this21;
HXDLIN(1009)					if ((value19 > 255)) {
HXLINE(1009)						this21 = 255;
            					}
            					else {
HXLINE(1009)						if ((value19 < 0)) {
HXLINE(1009)							this21 = 0;
            						}
            						else {
HXLINE(1009)							this21 = value19;
            						}
            					}
HXDLIN(1009)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE(1010)				{
HXLINE(1010)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1010)					this1 = (this1 & -16711681);
HXDLIN(1010)					int this22;
HXDLIN(1010)					if ((value20 > 255)) {
HXLINE(1010)						this22 = 255;
            					}
            					else {
HXLINE(1010)						if ((value20 < 0)) {
HXLINE(1010)							this22 = 0;
            						}
            						else {
HXLINE(1010)							this22 = value20;
            						}
            					}
HXDLIN(1010)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN(1010)				{
HXLINE(1010)					int value21 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN(1010)					this1 = (this1 & -65281);
HXDLIN(1010)					int this23;
HXDLIN(1010)					if ((value21 > 255)) {
HXLINE(1010)						this23 = 255;
            					}
            					else {
HXLINE(1010)						if ((value21 < 0)) {
HXLINE(1010)							this23 = 0;
            						}
            						else {
HXLINE(1010)							this23 = value21;
            						}
            					}
HXDLIN(1010)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN(1010)				{
HXLINE(1010)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1010)					this1 = (this1 & -256);
HXDLIN(1010)					int this24;
HXDLIN(1010)					if ((value22 > 255)) {
HXLINE(1010)						this24 = 255;
            					}
            					else {
HXLINE(1010)						if ((value22 < 0)) {
HXLINE(1010)							this24 = 0;
            						}
            						else {
HXLINE(1010)							this24 = value22;
            						}
            					}
HXDLIN(1010)					this1 = (this1 | this24);
            				}
HXDLIN(1010)				{
HXLINE(1010)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1010)					this1 = (this1 & 16777215);
HXDLIN(1010)					int this25;
HXDLIN(1010)					if ((value23 > 255)) {
HXLINE(1010)						this25 = 255;
            					}
            					else {
HXLINE(1010)						if ((value23 < 0)) {
HXLINE(1010)							this25 = 0;
            						}
            						else {
HXLINE(1010)							this25 = value23;
            						}
            					}
HXDLIN(1010)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXLINE(1013)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Color_Impl__obj,setHSChromaMatch,return )

int Color_Impl__obj::grayscale(int this1,::hx::Null< bool >  __o_simple){
            		bool simple = __o_simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1019_grayscale)
HXLINE(1020)		int gray;
HXDLIN(1020)		if (simple) {
HXLINE(1020)			gray = ::Std_obj::_hx_int((( (Float)(((((this1 >> 16) & 255) + ((this1 >> 8) & 255)) + (this1 & 255))) ) / ( (Float)(3) )));
            		}
            		else {
HXLINE(1020)			gray = ::Std_obj::_hx_int((((((Float)0.2126) * ( (Float)(((this1 >> 16) & 255)) )) + (((Float)0.7152) * ( (Float)(((this1 >> 8) & 255)) ))) + (((Float)0.0722) * ( (Float)((this1 & 255)) ))));
            		}
HXLINE(1021)		int Alpha = ((this1 >> 24) & 255);
HXDLIN(1021)		{
HXLINE(1021)			this1 = (this1 & -16711681);
HXDLIN(1021)			int this2;
HXDLIN(1021)			if ((gray > 255)) {
HXLINE(1021)				this2 = 255;
            			}
            			else {
HXLINE(1021)				if ((gray < 0)) {
HXLINE(1021)					this2 = 0;
            				}
            				else {
HXLINE(1021)					this2 = gray;
            				}
            			}
HXDLIN(1021)			this1 = (this1 | (this2 << 16));
            		}
HXDLIN(1021)		{
HXLINE(1021)			this1 = (this1 & -65281);
HXDLIN(1021)			int this3;
HXDLIN(1021)			if ((gray > 255)) {
HXLINE(1021)				this3 = 255;
            			}
            			else {
HXLINE(1021)				if ((gray < 0)) {
HXLINE(1021)					this3 = 0;
            				}
            				else {
HXLINE(1021)					this3 = gray;
            				}
            			}
HXDLIN(1021)			this1 = (this1 | (this3 << 8));
            		}
HXDLIN(1021)		{
HXLINE(1021)			this1 = (this1 & -256);
HXDLIN(1021)			int this4;
HXDLIN(1021)			if ((gray > 255)) {
HXLINE(1021)				this4 = 255;
            			}
            			else {
HXLINE(1021)				if ((gray < 0)) {
HXLINE(1021)					this4 = 0;
            				}
            				else {
HXLINE(1021)					this4 = gray;
            				}
            			}
HXDLIN(1021)			this1 = (this1 | this4);
            		}
HXDLIN(1021)		{
HXLINE(1021)			this1 = (this1 & 16777215);
HXDLIN(1021)			int this5;
HXDLIN(1021)			if ((Alpha > 255)) {
HXLINE(1021)				this5 = 255;
            			}
            			else {
HXLINE(1021)				if ((Alpha < 0)) {
HXLINE(1021)					this5 = 0;
            				}
            				else {
HXLINE(1021)					this5 = Alpha;
            				}
            			}
HXDLIN(1021)			this1 = (this1 | (this5 << 24));
            		}
HXDLIN(1021)		this1 = this1;
HXDLIN(1021)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,grayscale,return )

int Color_Impl__obj::blackOrWhite(int this1,::hx::Null< int >  __o_threshold){
            		int threshold = __o_threshold.Default(128);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1029_blackOrWhite)
HXLINE(1030)		::Array< int > values = ::Array_obj< int >::__new(3)->init(0,((this1 >> 16) & 255))->init(1,((this1 >> 8) & 255))->init(2,(this1 & 255));
HXDLIN(1030)		int max = values->__get(0);
HXDLIN(1030)		{
HXLINE(1030)			int _g = 0;
HXDLIN(1030)			int _g1 = values->length;
HXDLIN(1030)			while((_g < _g1)){
HXLINE(1030)				_g = (_g + 1);
HXDLIN(1030)				int i = (_g - 1);
HXDLIN(1030)				if ((values->__get(i) > max)) {
HXLINE(1030)					max = values->__get(i);
            				}
            			}
            		}
HXDLIN(1030)		int colorValue = max;
HXLINE(1031)		int a = ((this1 >> 24) & 255);
HXLINE(1032)		if ((colorValue > threshold)) {
HXLINE(1033)			this1 = -1;
            		}
            		else {
HXLINE(1035)			this1 = -16777216;
            		}
HXLINE(1037)		{
HXLINE(1037)			this1 = (this1 & 16777215);
HXDLIN(1037)			int this2;
HXDLIN(1037)			if ((a > 255)) {
HXLINE(1037)				this2 = 255;
            			}
            			else {
HXLINE(1037)				if ((a < 0)) {
HXLINE(1037)					this2 = 0;
            				}
            				else {
HXLINE(1037)					this2 = a;
            				}
            			}
HXDLIN(1037)			this1 = (this1 | (this2 << 24));
            		}
HXLINE(1038)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,blackOrWhite,return )

int Color_Impl__obj::_new(::hx::Null< int >  __o_value){
            		int value = __o_value.Default(0);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1041__new)
HXDLIN(1041)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,_new,return )

int Color_Impl__obj::getThis(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1049_getThis)
HXDLIN(1049)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getThis,return )

void Color_Impl__obj::validate(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1053_validate)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,validate,(void))

int Color_Impl__obj::get_red(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1060_get_red)
HXDLIN(1060)		return ((this1 >> 16) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_red,return )

int Color_Impl__obj::get_green(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1064_get_green)
HXDLIN(1064)		return ((this1 >> 8) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_green,return )

int Color_Impl__obj::get_blue(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1068_get_blue)
HXDLIN(1068)		return (this1 & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_blue,return )

int Color_Impl__obj::get_alpha(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1072_get_alpha)
HXDLIN(1072)		return ((this1 >> 24) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_alpha,return )

Float Color_Impl__obj::get_redFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1076_get_redFloat)
HXDLIN(1076)		return (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_redFloat,return )

Float Color_Impl__obj::get_greenFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1080_get_greenFloat)
HXDLIN(1080)		return (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_greenFloat,return )

Float Color_Impl__obj::get_blueFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1084_get_blueFloat)
HXDLIN(1084)		return (( (Float)((this1 & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_blueFloat,return )

Float Color_Impl__obj::get_alphaFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1088_get_alphaFloat)
HXDLIN(1088)		return (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_alphaFloat,return )

int Color_Impl__obj::set_red(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1091_set_red)
HXLINE(1093)		this1 = (this1 & -16711681);
HXLINE(1094)		int this2;
HXDLIN(1094)		if ((value > 255)) {
HXLINE(1094)			this2 = 255;
            		}
            		else {
HXLINE(1094)			if ((value < 0)) {
HXLINE(1094)				this2 = 0;
            			}
            			else {
HXLINE(1094)				this2 = value;
            			}
            		}
HXDLIN(1094)		this1 = (this1 | (this2 << 16));
HXLINE(1095)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_red,return )

int Color_Impl__obj::set_green(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1098_set_green)
HXLINE(1100)		this1 = (this1 & -65281);
HXLINE(1101)		int this2;
HXDLIN(1101)		if ((value > 255)) {
HXLINE(1101)			this2 = 255;
            		}
            		else {
HXLINE(1101)			if ((value < 0)) {
HXLINE(1101)				this2 = 0;
            			}
            			else {
HXLINE(1101)				this2 = value;
            			}
            		}
HXDLIN(1101)		this1 = (this1 | (this2 << 8));
HXLINE(1102)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_green,return )

int Color_Impl__obj::set_blue(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1105_set_blue)
HXLINE(1107)		this1 = (this1 & -256);
HXLINE(1108)		int this2;
HXDLIN(1108)		if ((value > 255)) {
HXLINE(1108)			this2 = 255;
            		}
            		else {
HXLINE(1108)			if ((value < 0)) {
HXLINE(1108)				this2 = 0;
            			}
            			else {
HXLINE(1108)				this2 = value;
            			}
            		}
HXDLIN(1108)		this1 = (this1 | this2);
HXLINE(1109)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_blue,return )

int Color_Impl__obj::set_alpha(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1112_set_alpha)
HXLINE(1114)		this1 = (this1 & 16777215);
HXLINE(1115)		int this2;
HXDLIN(1115)		if ((value > 255)) {
HXLINE(1115)			this2 = 255;
            		}
            		else {
HXLINE(1115)			if ((value < 0)) {
HXLINE(1115)				this2 = 0;
            			}
            			else {
HXLINE(1115)				this2 = value;
            			}
            		}
HXDLIN(1115)		this1 = (this1 | (this2 << 24));
HXLINE(1116)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_alpha,return )

Float Color_Impl__obj::set_redFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1119_set_redFloat)
HXLINE(1120)		{
HXLINE(1120)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN(1120)			this1 = (this1 & -16711681);
HXDLIN(1120)			int this2;
HXDLIN(1120)			if ((value1 > 255)) {
HXLINE(1120)				this2 = 255;
            			}
            			else {
HXLINE(1120)				if ((value1 < 0)) {
HXLINE(1120)					this2 = 0;
            				}
            				else {
HXLINE(1120)					this2 = value1;
            				}
            			}
HXDLIN(1120)			this1 = (this1 | (this2 << 16));
            		}
HXLINE(1121)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_redFloat,return )

Float Color_Impl__obj::set_greenFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1124_set_greenFloat)
HXLINE(1125)		{
HXLINE(1125)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN(1125)			this1 = (this1 & -65281);
HXDLIN(1125)			int this2;
HXDLIN(1125)			if ((value1 > 255)) {
HXLINE(1125)				this2 = 255;
            			}
            			else {
HXLINE(1125)				if ((value1 < 0)) {
HXLINE(1125)					this2 = 0;
            				}
            				else {
HXLINE(1125)					this2 = value1;
            				}
            			}
HXDLIN(1125)			this1 = (this1 | (this2 << 8));
            		}
HXLINE(1126)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_greenFloat,return )

Float Color_Impl__obj::set_blueFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1129_set_blueFloat)
HXLINE(1130)		{
HXLINE(1130)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN(1130)			this1 = (this1 & -256);
HXDLIN(1130)			int this2;
HXDLIN(1130)			if ((value1 > 255)) {
HXLINE(1130)				this2 = 255;
            			}
            			else {
HXLINE(1130)				if ((value1 < 0)) {
HXLINE(1130)					this2 = 0;
            				}
            				else {
HXLINE(1130)					this2 = value1;
            				}
            			}
HXDLIN(1130)			this1 = (this1 | this2);
            		}
HXLINE(1131)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_blueFloat,return )

Float Color_Impl__obj::set_alphaFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1134_set_alphaFloat)
HXLINE(1135)		{
HXLINE(1135)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN(1135)			this1 = (this1 & 16777215);
HXDLIN(1135)			int this2;
HXDLIN(1135)			if ((value1 > 255)) {
HXLINE(1135)				this2 = 255;
            			}
            			else {
HXLINE(1135)				if ((value1 < 0)) {
HXLINE(1135)					this2 = 0;
            				}
            				else {
HXLINE(1135)					this2 = value1;
            				}
            			}
HXDLIN(1135)			this1 = (this1 | (this2 << 24));
            		}
HXLINE(1136)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_alphaFloat,return )

Float Color_Impl__obj::get_cyan(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1140_get_cyan)
HXDLIN(1140)		return (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_cyan,return )

Float Color_Impl__obj::get_magenta(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1144_get_magenta)
HXDLIN(1144)		return (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_magenta,return )

Float Color_Impl__obj::get_yellow(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1148_get_yellow)
HXDLIN(1148)		return (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_yellow,return )

Float Color_Impl__obj::get_black(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1152_get_black)
HXDLIN(1152)		return (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_black,return )

Float Color_Impl__obj::set_cyan(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1155_set_cyan)
HXLINE(1156)		{
HXLINE(1156)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1156)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1156)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1156)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1156)			{
HXLINE(1156)				Float value1 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN(1156)				{
HXLINE(1156)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN(1156)					this1 = (this1 & -16711681);
HXDLIN(1156)					int this2;
HXDLIN(1156)					if ((value2 > 255)) {
HXLINE(1156)						this2 = 255;
            					}
            					else {
HXLINE(1156)						if ((value2 < 0)) {
HXLINE(1156)							this2 = 0;
            						}
            						else {
HXLINE(1156)							this2 = value2;
            						}
            					}
HXDLIN(1156)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN(1156)			{
HXLINE(1156)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN(1156)				{
HXLINE(1156)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN(1156)					this1 = (this1 & -65281);
HXDLIN(1156)					int this3;
HXDLIN(1156)					if ((value4 > 255)) {
HXLINE(1156)						this3 = 255;
            					}
            					else {
HXLINE(1156)						if ((value4 < 0)) {
HXLINE(1156)							this3 = 0;
            						}
            						else {
HXLINE(1156)							this3 = value4;
            						}
            					}
HXDLIN(1156)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN(1156)			{
HXLINE(1156)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN(1156)				{
HXLINE(1156)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN(1156)					this1 = (this1 & -256);
HXDLIN(1156)					int this4;
HXDLIN(1156)					if ((value6 > 255)) {
HXLINE(1156)						this4 = 255;
            					}
            					else {
HXLINE(1156)						if ((value6 < 0)) {
HXLINE(1156)							this4 = 0;
            						}
            						else {
HXLINE(1156)							this4 = value6;
            						}
            					}
HXDLIN(1156)					this1 = (this1 | this4);
            				}
            			}
HXDLIN(1156)			{
HXLINE(1156)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1156)				this1 = (this1 & 16777215);
HXDLIN(1156)				int this5;
HXDLIN(1156)				if ((value7 > 255)) {
HXLINE(1156)					this5 = 255;
            				}
            				else {
HXLINE(1156)					if ((value7 < 0)) {
HXLINE(1156)						this5 = 0;
            					}
            					else {
HXLINE(1156)						this5 = value7;
            					}
            				}
HXDLIN(1156)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE(1157)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_cyan,return )

Float Color_Impl__obj::set_magenta(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1160_set_magenta)
HXLINE(1161)		{
HXLINE(1161)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1161)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1161)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1161)			{
HXLINE(1161)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - Black));
HXDLIN(1161)				{
HXLINE(1161)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN(1161)					this1 = (this1 & -16711681);
HXDLIN(1161)					int this2;
HXDLIN(1161)					if ((value2 > 255)) {
HXLINE(1161)						this2 = 255;
            					}
            					else {
HXLINE(1161)						if ((value2 < 0)) {
HXLINE(1161)							this2 = 0;
            						}
            						else {
HXLINE(1161)							this2 = value2;
            						}
            					}
HXDLIN(1161)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN(1161)			{
HXLINE(1161)				Float value3 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN(1161)				{
HXLINE(1161)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN(1161)					this1 = (this1 & -65281);
HXDLIN(1161)					int this3;
HXDLIN(1161)					if ((value4 > 255)) {
HXLINE(1161)						this3 = 255;
            					}
            					else {
HXLINE(1161)						if ((value4 < 0)) {
HXLINE(1161)							this3 = 0;
            						}
            						else {
HXLINE(1161)							this3 = value4;
            						}
            					}
HXDLIN(1161)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN(1161)			{
HXLINE(1161)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN(1161)				{
HXLINE(1161)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN(1161)					this1 = (this1 & -256);
HXDLIN(1161)					int this4;
HXDLIN(1161)					if ((value6 > 255)) {
HXLINE(1161)						this4 = 255;
            					}
            					else {
HXLINE(1161)						if ((value6 < 0)) {
HXLINE(1161)							this4 = 0;
            						}
            						else {
HXLINE(1161)							this4 = value6;
            						}
            					}
HXDLIN(1161)					this1 = (this1 | this4);
            				}
            			}
HXDLIN(1161)			{
HXLINE(1161)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1161)				this1 = (this1 & 16777215);
HXDLIN(1161)				int this5;
HXDLIN(1161)				if ((value7 > 255)) {
HXLINE(1161)					this5 = 255;
            				}
            				else {
HXLINE(1161)					if ((value7 < 0)) {
HXLINE(1161)						this5 = 0;
            					}
            					else {
HXLINE(1161)						this5 = value7;
            					}
            				}
HXDLIN(1161)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE(1162)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_magenta,return )

Float Color_Impl__obj::set_yellow(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1165_set_yellow)
HXLINE(1166)		{
HXLINE(1166)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1166)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1166)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1166)			{
HXLINE(1166)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - Black));
HXDLIN(1166)				{
HXLINE(1166)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN(1166)					this1 = (this1 & -16711681);
HXDLIN(1166)					int this2;
HXDLIN(1166)					if ((value2 > 255)) {
HXLINE(1166)						this2 = 255;
            					}
            					else {
HXLINE(1166)						if ((value2 < 0)) {
HXLINE(1166)							this2 = 0;
            						}
            						else {
HXLINE(1166)							this2 = value2;
            						}
            					}
HXDLIN(1166)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN(1166)			{
HXLINE(1166)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN(1166)				{
HXLINE(1166)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN(1166)					this1 = (this1 & -65281);
HXDLIN(1166)					int this3;
HXDLIN(1166)					if ((value4 > 255)) {
HXLINE(1166)						this3 = 255;
            					}
            					else {
HXLINE(1166)						if ((value4 < 0)) {
HXLINE(1166)							this3 = 0;
            						}
            						else {
HXLINE(1166)							this3 = value4;
            						}
            					}
HXDLIN(1166)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN(1166)			{
HXLINE(1166)				Float value5 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN(1166)				{
HXLINE(1166)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN(1166)					this1 = (this1 & -256);
HXDLIN(1166)					int this4;
HXDLIN(1166)					if ((value6 > 255)) {
HXLINE(1166)						this4 = 255;
            					}
            					else {
HXLINE(1166)						if ((value6 < 0)) {
HXLINE(1166)							this4 = 0;
            						}
            						else {
HXLINE(1166)							this4 = value6;
            						}
            					}
HXDLIN(1166)					this1 = (this1 | this4);
            				}
            			}
HXDLIN(1166)			{
HXLINE(1166)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1166)				this1 = (this1 & 16777215);
HXDLIN(1166)				int this5;
HXDLIN(1166)				if ((value7 > 255)) {
HXLINE(1166)					this5 = 255;
            				}
            				else {
HXLINE(1166)					if ((value7 < 0)) {
HXLINE(1166)						this5 = 0;
            					}
            					else {
HXLINE(1166)						this5 = value7;
            					}
            				}
HXDLIN(1166)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE(1167)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_yellow,return )

Float Color_Impl__obj::set_black(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1170_set_black)
HXLINE(1171)		{
HXLINE(1171)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1171)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN(1171)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1171)			{
HXLINE(1171)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - value));
HXDLIN(1171)				{
HXLINE(1171)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN(1171)					this1 = (this1 & -16711681);
HXDLIN(1171)					int this2;
HXDLIN(1171)					if ((value2 > 255)) {
HXLINE(1171)						this2 = 255;
            					}
            					else {
HXLINE(1171)						if ((value2 < 0)) {
HXLINE(1171)							this2 = 0;
            						}
            						else {
HXLINE(1171)							this2 = value2;
            						}
            					}
HXDLIN(1171)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN(1171)			{
HXLINE(1171)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - value));
HXDLIN(1171)				{
HXLINE(1171)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN(1171)					this1 = (this1 & -65281);
HXDLIN(1171)					int this3;
HXDLIN(1171)					if ((value4 > 255)) {
HXLINE(1171)						this3 = 255;
            					}
            					else {
HXLINE(1171)						if ((value4 < 0)) {
HXLINE(1171)							this3 = 0;
            						}
            						else {
HXLINE(1171)							this3 = value4;
            						}
            					}
HXDLIN(1171)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN(1171)			{
HXLINE(1171)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - value));
HXDLIN(1171)				{
HXLINE(1171)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN(1171)					this1 = (this1 & -256);
HXDLIN(1171)					int this4;
HXDLIN(1171)					if ((value6 > 255)) {
HXLINE(1171)						this4 = 255;
            					}
            					else {
HXLINE(1171)						if ((value6 < 0)) {
HXLINE(1171)							this4 = 0;
            						}
            						else {
HXLINE(1171)							this4 = value6;
            						}
            					}
HXDLIN(1171)					this1 = (this1 | this4);
            				}
            			}
HXDLIN(1171)			{
HXLINE(1171)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1171)				this1 = (this1 & 16777215);
HXDLIN(1171)				int this5;
HXDLIN(1171)				if ((value7 > 255)) {
HXLINE(1171)					this5 = 255;
            				}
            				else {
HXLINE(1171)					if ((value7 < 0)) {
HXLINE(1171)						this5 = 0;
            					}
            					else {
HXLINE(1171)						this5 = value7;
            					}
            				}
HXDLIN(1171)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE(1172)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_black,return )

Float Color_Impl__obj::get_hue(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1175_get_hue)
HXLINE(1176)		Float hueRad = ::Math_obj::atan2((::Math_obj::sqrt(( (Float)(3) )) * ((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(((( (Float)(2) ) * (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXLINE(1177)		Float hue = ( (Float)(0) );
HXLINE(1178)		if ((hueRad != 0)) {
HXLINE(1179)			hue = ((( (Float)(180) ) / ::Math_obj::PI) * ::Math_obj::atan2((::Math_obj::sqrt(( (Float)(3) )) * ((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(((( (Float)(2) ) * (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            		}
HXLINE(1182)		if ((hue < 0)) {
HXLINE(1182)			return (hue + 360);
            		}
            		else {
HXLINE(1182)			return hue;
            		}
HXDLIN(1182)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_hue,return )

Float Color_Impl__obj::get_brightness(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1186_get_brightness)
HXDLIN(1186)		return ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_brightness,return )

Float Color_Impl__obj::get_saturation(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1190_get_saturation)
HXDLIN(1190)		return ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_saturation,return )

Float Color_Impl__obj::get_lightness(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1194_get_lightness)
HXDLIN(1194)		return ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_lightness,return )

Float Color_Impl__obj::set_hue(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1197_set_hue)
HXLINE(1198)		{
HXLINE(1198)			Float Brightness = ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXDLIN(1198)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1198)			Float chroma = (Brightness * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN(1198)			Float match = (Brightness - chroma);
HXDLIN(1198)			{
HXLINE(1198)				Float Hue = value;
HXDLIN(1198)				Float Chroma = chroma;
HXDLIN(1198)				Hue = ::hx::Mod(Hue,360);
HXDLIN(1198)				Float hueD = (Hue / ( (Float)(60) ));
HXDLIN(1198)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(1198)				Chroma = (Chroma + match);
HXDLIN(1198)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE(1198)						{
HXLINE(1198)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this2;
HXDLIN(1198)							if ((value1 > 255)) {
HXLINE(1198)								this2 = 255;
            							}
            							else {
HXLINE(1198)								if ((value1 < 0)) {
HXLINE(1198)									this2 = 0;
            								}
            								else {
HXLINE(1198)									this2 = value1;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this3;
HXDLIN(1198)							if ((value2 > 255)) {
HXLINE(1198)								this3 = 255;
            							}
            							else {
HXLINE(1198)								if ((value2 < 0)) {
HXLINE(1198)									this3 = 0;
            								}
            								else {
HXLINE(1198)									this3 = value2;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this4;
HXDLIN(1198)							if ((value3 > 255)) {
HXLINE(1198)								this4 = 255;
            							}
            							else {
HXLINE(1198)								if ((value3 < 0)) {
HXLINE(1198)									this4 = 0;
            								}
            								else {
HXLINE(1198)									this4 = value3;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this4);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this5;
HXDLIN(1198)							if ((value4 > 255)) {
HXLINE(1198)								this5 = 255;
            							}
            							else {
HXLINE(1198)								if ((value4 < 0)) {
HXLINE(1198)									this5 = 0;
            								}
            								else {
HXLINE(1198)									this5 = value4;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1198)						{
HXLINE(1198)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this6;
HXDLIN(1198)							if ((value5 > 255)) {
HXLINE(1198)								this6 = 255;
            							}
            							else {
HXLINE(1198)								if ((value5 < 0)) {
HXLINE(1198)									this6 = 0;
            								}
            								else {
HXLINE(1198)									this6 = value5;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this7;
HXDLIN(1198)							if ((value6 > 255)) {
HXLINE(1198)								this7 = 255;
            							}
            							else {
HXLINE(1198)								if ((value6 < 0)) {
HXLINE(1198)									this7 = 0;
            								}
            								else {
HXLINE(1198)									this7 = value6;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this8;
HXDLIN(1198)							if ((value7 > 255)) {
HXLINE(1198)								this8 = 255;
            							}
            							else {
HXLINE(1198)								if ((value7 < 0)) {
HXLINE(1198)									this8 = 0;
            								}
            								else {
HXLINE(1198)									this8 = value7;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this8);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this9;
HXDLIN(1198)							if ((value8 > 255)) {
HXLINE(1198)								this9 = 255;
            							}
            							else {
HXLINE(1198)								if ((value8 < 0)) {
HXLINE(1198)									this9 = 0;
            								}
            								else {
HXLINE(1198)									this9 = value8;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(1198)						{
HXLINE(1198)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this10;
HXDLIN(1198)							if ((value9 > 255)) {
HXLINE(1198)								this10 = 255;
            							}
            							else {
HXLINE(1198)								if ((value9 < 0)) {
HXLINE(1198)									this10 = 0;
            								}
            								else {
HXLINE(1198)									this10 = value9;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this11;
HXDLIN(1198)							if ((value10 > 255)) {
HXLINE(1198)								this11 = 255;
            							}
            							else {
HXLINE(1198)								if ((value10 < 0)) {
HXLINE(1198)									this11 = 0;
            								}
            								else {
HXLINE(1198)									this11 = value10;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this12;
HXDLIN(1198)							if ((value11 > 255)) {
HXLINE(1198)								this12 = 255;
            							}
            							else {
HXLINE(1198)								if ((value11 < 0)) {
HXLINE(1198)									this12 = 0;
            								}
            								else {
HXLINE(1198)									this12 = value11;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this12);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this13;
HXDLIN(1198)							if ((value12 > 255)) {
HXLINE(1198)								this13 = 255;
            							}
            							else {
HXLINE(1198)								if ((value12 < 0)) {
HXLINE(1198)									this13 = 0;
            								}
            								else {
HXLINE(1198)									this13 = value12;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1198)						{
HXLINE(1198)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this14;
HXDLIN(1198)							if ((value13 > 255)) {
HXLINE(1198)								this14 = 255;
            							}
            							else {
HXLINE(1198)								if ((value13 < 0)) {
HXLINE(1198)									this14 = 0;
            								}
            								else {
HXLINE(1198)									this14 = value13;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this15;
HXDLIN(1198)							if ((value14 > 255)) {
HXLINE(1198)								this15 = 255;
            							}
            							else {
HXLINE(1198)								if ((value14 < 0)) {
HXLINE(1198)									this15 = 0;
            								}
            								else {
HXLINE(1198)									this15 = value14;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this16;
HXDLIN(1198)							if ((value15 > 255)) {
HXLINE(1198)								this16 = 255;
            							}
            							else {
HXLINE(1198)								if ((value15 < 0)) {
HXLINE(1198)									this16 = 0;
            								}
            								else {
HXLINE(1198)									this16 = value15;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this16);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this17;
HXDLIN(1198)							if ((value16 > 255)) {
HXLINE(1198)								this17 = 255;
            							}
            							else {
HXLINE(1198)								if ((value16 < 0)) {
HXLINE(1198)									this17 = 0;
            								}
            								else {
HXLINE(1198)									this17 = value16;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1198)						{
HXLINE(1198)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this18;
HXDLIN(1198)							if ((value17 > 255)) {
HXLINE(1198)								this18 = 255;
            							}
            							else {
HXLINE(1198)								if ((value17 < 0)) {
HXLINE(1198)									this18 = 0;
            								}
            								else {
HXLINE(1198)									this18 = value17;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this19;
HXDLIN(1198)							if ((value18 > 255)) {
HXLINE(1198)								this19 = 255;
            							}
            							else {
HXLINE(1198)								if ((value18 < 0)) {
HXLINE(1198)									this19 = 0;
            								}
            								else {
HXLINE(1198)									this19 = value18;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this20;
HXDLIN(1198)							if ((value19 > 255)) {
HXLINE(1198)								this20 = 255;
            							}
            							else {
HXLINE(1198)								if ((value19 < 0)) {
HXLINE(1198)									this20 = 0;
            								}
            								else {
HXLINE(1198)									this20 = value19;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this20);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this21;
HXDLIN(1198)							if ((value20 > 255)) {
HXLINE(1198)								this21 = 255;
            							}
            							else {
HXLINE(1198)								if ((value20 < 0)) {
HXLINE(1198)									this21 = 0;
            								}
            								else {
HXLINE(1198)									this21 = value20;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1198)						{
HXLINE(1198)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -16711681);
HXDLIN(1198)							int this22;
HXDLIN(1198)							if ((value21 > 255)) {
HXLINE(1198)								this22 = 255;
            							}
            							else {
HXLINE(1198)								if ((value21 < 0)) {
HXLINE(1198)									this22 = 0;
            								}
            								else {
HXLINE(1198)									this22 = value21;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -65281);
HXDLIN(1198)							int this23;
HXDLIN(1198)							if ((value22 > 255)) {
HXLINE(1198)								this23 = 255;
            							}
            							else {
HXLINE(1198)								if ((value22 < 0)) {
HXLINE(1198)									this23 = 0;
            								}
            								else {
HXLINE(1198)									this23 = value22;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & -256);
HXDLIN(1198)							int this24;
HXDLIN(1198)							if ((value23 > 255)) {
HXLINE(1198)								this24 = 255;
            							}
            							else {
HXLINE(1198)								if ((value23 < 0)) {
HXLINE(1198)									this24 = 0;
            								}
            								else {
HXLINE(1198)									this24 = value23;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | this24);
            						}
HXDLIN(1198)						{
HXLINE(1198)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1198)							this1 = (this1 & 16777215);
HXDLIN(1198)							int this25;
HXDLIN(1198)							if ((value24 > 255)) {
HXLINE(1198)								this25 = 255;
            							}
            							else {
HXLINE(1198)								if ((value24 < 0)) {
HXLINE(1198)									this25 = 0;
            								}
            								else {
HXLINE(1198)									this25 = value24;
            								}
            							}
HXDLIN(1198)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE(1199)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_hue,return )

Float Color_Impl__obj::set_saturation(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1202_set_saturation)
HXLINE(1203)		{
HXLINE(1203)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN(1203)			Float Brightness = ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXDLIN(1203)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1203)			Float chroma = (Brightness * value);
HXDLIN(1203)			Float match = (Brightness - chroma);
HXDLIN(1203)			{
HXLINE(1203)				Float Hue1 = Hue;
HXDLIN(1203)				Float Chroma = chroma;
HXDLIN(1203)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN(1203)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN(1203)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(1203)				Chroma = (Chroma + match);
HXDLIN(1203)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE(1203)						{
HXLINE(1203)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this2;
HXDLIN(1203)							if ((value1 > 255)) {
HXLINE(1203)								this2 = 255;
            							}
            							else {
HXLINE(1203)								if ((value1 < 0)) {
HXLINE(1203)									this2 = 0;
            								}
            								else {
HXLINE(1203)									this2 = value1;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this3;
HXDLIN(1203)							if ((value2 > 255)) {
HXLINE(1203)								this3 = 255;
            							}
            							else {
HXLINE(1203)								if ((value2 < 0)) {
HXLINE(1203)									this3 = 0;
            								}
            								else {
HXLINE(1203)									this3 = value2;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this4;
HXDLIN(1203)							if ((value3 > 255)) {
HXLINE(1203)								this4 = 255;
            							}
            							else {
HXLINE(1203)								if ((value3 < 0)) {
HXLINE(1203)									this4 = 0;
            								}
            								else {
HXLINE(1203)									this4 = value3;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this4);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this5;
HXDLIN(1203)							if ((value4 > 255)) {
HXLINE(1203)								this5 = 255;
            							}
            							else {
HXLINE(1203)								if ((value4 < 0)) {
HXLINE(1203)									this5 = 0;
            								}
            								else {
HXLINE(1203)									this5 = value4;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1203)						{
HXLINE(1203)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this6;
HXDLIN(1203)							if ((value5 > 255)) {
HXLINE(1203)								this6 = 255;
            							}
            							else {
HXLINE(1203)								if ((value5 < 0)) {
HXLINE(1203)									this6 = 0;
            								}
            								else {
HXLINE(1203)									this6 = value5;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this7;
HXDLIN(1203)							if ((value6 > 255)) {
HXLINE(1203)								this7 = 255;
            							}
            							else {
HXLINE(1203)								if ((value6 < 0)) {
HXLINE(1203)									this7 = 0;
            								}
            								else {
HXLINE(1203)									this7 = value6;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this8;
HXDLIN(1203)							if ((value7 > 255)) {
HXLINE(1203)								this8 = 255;
            							}
            							else {
HXLINE(1203)								if ((value7 < 0)) {
HXLINE(1203)									this8 = 0;
            								}
            								else {
HXLINE(1203)									this8 = value7;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this8);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this9;
HXDLIN(1203)							if ((value8 > 255)) {
HXLINE(1203)								this9 = 255;
            							}
            							else {
HXLINE(1203)								if ((value8 < 0)) {
HXLINE(1203)									this9 = 0;
            								}
            								else {
HXLINE(1203)									this9 = value8;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(1203)						{
HXLINE(1203)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this10;
HXDLIN(1203)							if ((value9 > 255)) {
HXLINE(1203)								this10 = 255;
            							}
            							else {
HXLINE(1203)								if ((value9 < 0)) {
HXLINE(1203)									this10 = 0;
            								}
            								else {
HXLINE(1203)									this10 = value9;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this11;
HXDLIN(1203)							if ((value10 > 255)) {
HXLINE(1203)								this11 = 255;
            							}
            							else {
HXLINE(1203)								if ((value10 < 0)) {
HXLINE(1203)									this11 = 0;
            								}
            								else {
HXLINE(1203)									this11 = value10;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this12;
HXDLIN(1203)							if ((value11 > 255)) {
HXLINE(1203)								this12 = 255;
            							}
            							else {
HXLINE(1203)								if ((value11 < 0)) {
HXLINE(1203)									this12 = 0;
            								}
            								else {
HXLINE(1203)									this12 = value11;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this12);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this13;
HXDLIN(1203)							if ((value12 > 255)) {
HXLINE(1203)								this13 = 255;
            							}
            							else {
HXLINE(1203)								if ((value12 < 0)) {
HXLINE(1203)									this13 = 0;
            								}
            								else {
HXLINE(1203)									this13 = value12;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1203)						{
HXLINE(1203)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this14;
HXDLIN(1203)							if ((value13 > 255)) {
HXLINE(1203)								this14 = 255;
            							}
            							else {
HXLINE(1203)								if ((value13 < 0)) {
HXLINE(1203)									this14 = 0;
            								}
            								else {
HXLINE(1203)									this14 = value13;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this15;
HXDLIN(1203)							if ((value14 > 255)) {
HXLINE(1203)								this15 = 255;
            							}
            							else {
HXLINE(1203)								if ((value14 < 0)) {
HXLINE(1203)									this15 = 0;
            								}
            								else {
HXLINE(1203)									this15 = value14;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this16;
HXDLIN(1203)							if ((value15 > 255)) {
HXLINE(1203)								this16 = 255;
            							}
            							else {
HXLINE(1203)								if ((value15 < 0)) {
HXLINE(1203)									this16 = 0;
            								}
            								else {
HXLINE(1203)									this16 = value15;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this16);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this17;
HXDLIN(1203)							if ((value16 > 255)) {
HXLINE(1203)								this17 = 255;
            							}
            							else {
HXLINE(1203)								if ((value16 < 0)) {
HXLINE(1203)									this17 = 0;
            								}
            								else {
HXLINE(1203)									this17 = value16;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1203)						{
HXLINE(1203)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this18;
HXDLIN(1203)							if ((value17 > 255)) {
HXLINE(1203)								this18 = 255;
            							}
            							else {
HXLINE(1203)								if ((value17 < 0)) {
HXLINE(1203)									this18 = 0;
            								}
            								else {
HXLINE(1203)									this18 = value17;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this19;
HXDLIN(1203)							if ((value18 > 255)) {
HXLINE(1203)								this19 = 255;
            							}
            							else {
HXLINE(1203)								if ((value18 < 0)) {
HXLINE(1203)									this19 = 0;
            								}
            								else {
HXLINE(1203)									this19 = value18;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this20;
HXDLIN(1203)							if ((value19 > 255)) {
HXLINE(1203)								this20 = 255;
            							}
            							else {
HXLINE(1203)								if ((value19 < 0)) {
HXLINE(1203)									this20 = 0;
            								}
            								else {
HXLINE(1203)									this20 = value19;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this20);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this21;
HXDLIN(1203)							if ((value20 > 255)) {
HXLINE(1203)								this21 = 255;
            							}
            							else {
HXLINE(1203)								if ((value20 < 0)) {
HXLINE(1203)									this21 = 0;
            								}
            								else {
HXLINE(1203)									this21 = value20;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1203)						{
HXLINE(1203)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -16711681);
HXDLIN(1203)							int this22;
HXDLIN(1203)							if ((value21 > 255)) {
HXLINE(1203)								this22 = 255;
            							}
            							else {
HXLINE(1203)								if ((value21 < 0)) {
HXLINE(1203)									this22 = 0;
            								}
            								else {
HXLINE(1203)									this22 = value21;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -65281);
HXDLIN(1203)							int this23;
HXDLIN(1203)							if ((value22 > 255)) {
HXLINE(1203)								this23 = 255;
            							}
            							else {
HXLINE(1203)								if ((value22 < 0)) {
HXLINE(1203)									this23 = 0;
            								}
            								else {
HXLINE(1203)									this23 = value22;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & -256);
HXDLIN(1203)							int this24;
HXDLIN(1203)							if ((value23 > 255)) {
HXLINE(1203)								this24 = 255;
            							}
            							else {
HXLINE(1203)								if ((value23 < 0)) {
HXLINE(1203)									this24 = 0;
            								}
            								else {
HXLINE(1203)									this24 = value23;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | this24);
            						}
HXDLIN(1203)						{
HXLINE(1203)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1203)							this1 = (this1 & 16777215);
HXDLIN(1203)							int this25;
HXDLIN(1203)							if ((value24 > 255)) {
HXLINE(1203)								this25 = 255;
            							}
            							else {
HXLINE(1203)								if ((value24 < 0)) {
HXLINE(1203)									this25 = 0;
            								}
            								else {
HXLINE(1203)									this25 = value24;
            								}
            							}
HXDLIN(1203)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE(1204)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_saturation,return )

Float Color_Impl__obj::set_brightness(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1207_set_brightness)
HXLINE(1208)		{
HXLINE(1208)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN(1208)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1208)			Float chroma = (value * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN(1208)			Float match = (value - chroma);
HXDLIN(1208)			{
HXLINE(1208)				Float Hue1 = Hue;
HXDLIN(1208)				Float Chroma = chroma;
HXDLIN(1208)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN(1208)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN(1208)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(1208)				Chroma = (Chroma + match);
HXDLIN(1208)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE(1208)						{
HXLINE(1208)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this2;
HXDLIN(1208)							if ((value1 > 255)) {
HXLINE(1208)								this2 = 255;
            							}
            							else {
HXLINE(1208)								if ((value1 < 0)) {
HXLINE(1208)									this2 = 0;
            								}
            								else {
HXLINE(1208)									this2 = value1;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this3;
HXDLIN(1208)							if ((value2 > 255)) {
HXLINE(1208)								this3 = 255;
            							}
            							else {
HXLINE(1208)								if ((value2 < 0)) {
HXLINE(1208)									this3 = 0;
            								}
            								else {
HXLINE(1208)									this3 = value2;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this4;
HXDLIN(1208)							if ((value3 > 255)) {
HXLINE(1208)								this4 = 255;
            							}
            							else {
HXLINE(1208)								if ((value3 < 0)) {
HXLINE(1208)									this4 = 0;
            								}
            								else {
HXLINE(1208)									this4 = value3;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this4);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this5;
HXDLIN(1208)							if ((value4 > 255)) {
HXLINE(1208)								this5 = 255;
            							}
            							else {
HXLINE(1208)								if ((value4 < 0)) {
HXLINE(1208)									this5 = 0;
            								}
            								else {
HXLINE(1208)									this5 = value4;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1208)						{
HXLINE(1208)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this6;
HXDLIN(1208)							if ((value5 > 255)) {
HXLINE(1208)								this6 = 255;
            							}
            							else {
HXLINE(1208)								if ((value5 < 0)) {
HXLINE(1208)									this6 = 0;
            								}
            								else {
HXLINE(1208)									this6 = value5;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this7;
HXDLIN(1208)							if ((value6 > 255)) {
HXLINE(1208)								this7 = 255;
            							}
            							else {
HXLINE(1208)								if ((value6 < 0)) {
HXLINE(1208)									this7 = 0;
            								}
            								else {
HXLINE(1208)									this7 = value6;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this8;
HXDLIN(1208)							if ((value7 > 255)) {
HXLINE(1208)								this8 = 255;
            							}
            							else {
HXLINE(1208)								if ((value7 < 0)) {
HXLINE(1208)									this8 = 0;
            								}
            								else {
HXLINE(1208)									this8 = value7;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this8);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this9;
HXDLIN(1208)							if ((value8 > 255)) {
HXLINE(1208)								this9 = 255;
            							}
            							else {
HXLINE(1208)								if ((value8 < 0)) {
HXLINE(1208)									this9 = 0;
            								}
            								else {
HXLINE(1208)									this9 = value8;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(1208)						{
HXLINE(1208)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this10;
HXDLIN(1208)							if ((value9 > 255)) {
HXLINE(1208)								this10 = 255;
            							}
            							else {
HXLINE(1208)								if ((value9 < 0)) {
HXLINE(1208)									this10 = 0;
            								}
            								else {
HXLINE(1208)									this10 = value9;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this11;
HXDLIN(1208)							if ((value10 > 255)) {
HXLINE(1208)								this11 = 255;
            							}
            							else {
HXLINE(1208)								if ((value10 < 0)) {
HXLINE(1208)									this11 = 0;
            								}
            								else {
HXLINE(1208)									this11 = value10;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this12;
HXDLIN(1208)							if ((value11 > 255)) {
HXLINE(1208)								this12 = 255;
            							}
            							else {
HXLINE(1208)								if ((value11 < 0)) {
HXLINE(1208)									this12 = 0;
            								}
            								else {
HXLINE(1208)									this12 = value11;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this12);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this13;
HXDLIN(1208)							if ((value12 > 255)) {
HXLINE(1208)								this13 = 255;
            							}
            							else {
HXLINE(1208)								if ((value12 < 0)) {
HXLINE(1208)									this13 = 0;
            								}
            								else {
HXLINE(1208)									this13 = value12;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1208)						{
HXLINE(1208)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this14;
HXDLIN(1208)							if ((value13 > 255)) {
HXLINE(1208)								this14 = 255;
            							}
            							else {
HXLINE(1208)								if ((value13 < 0)) {
HXLINE(1208)									this14 = 0;
            								}
            								else {
HXLINE(1208)									this14 = value13;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this15;
HXDLIN(1208)							if ((value14 > 255)) {
HXLINE(1208)								this15 = 255;
            							}
            							else {
HXLINE(1208)								if ((value14 < 0)) {
HXLINE(1208)									this15 = 0;
            								}
            								else {
HXLINE(1208)									this15 = value14;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this16;
HXDLIN(1208)							if ((value15 > 255)) {
HXLINE(1208)								this16 = 255;
            							}
            							else {
HXLINE(1208)								if ((value15 < 0)) {
HXLINE(1208)									this16 = 0;
            								}
            								else {
HXLINE(1208)									this16 = value15;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this16);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this17;
HXDLIN(1208)							if ((value16 > 255)) {
HXLINE(1208)								this17 = 255;
            							}
            							else {
HXLINE(1208)								if ((value16 < 0)) {
HXLINE(1208)									this17 = 0;
            								}
            								else {
HXLINE(1208)									this17 = value16;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1208)						{
HXLINE(1208)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this18;
HXDLIN(1208)							if ((value17 > 255)) {
HXLINE(1208)								this18 = 255;
            							}
            							else {
HXLINE(1208)								if ((value17 < 0)) {
HXLINE(1208)									this18 = 0;
            								}
            								else {
HXLINE(1208)									this18 = value17;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this19;
HXDLIN(1208)							if ((value18 > 255)) {
HXLINE(1208)								this19 = 255;
            							}
            							else {
HXLINE(1208)								if ((value18 < 0)) {
HXLINE(1208)									this19 = 0;
            								}
            								else {
HXLINE(1208)									this19 = value18;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this20;
HXDLIN(1208)							if ((value19 > 255)) {
HXLINE(1208)								this20 = 255;
            							}
            							else {
HXLINE(1208)								if ((value19 < 0)) {
HXLINE(1208)									this20 = 0;
            								}
            								else {
HXLINE(1208)									this20 = value19;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this20);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this21;
HXDLIN(1208)							if ((value20 > 255)) {
HXLINE(1208)								this21 = 255;
            							}
            							else {
HXLINE(1208)								if ((value20 < 0)) {
HXLINE(1208)									this21 = 0;
            								}
            								else {
HXLINE(1208)									this21 = value20;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1208)						{
HXLINE(1208)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -16711681);
HXDLIN(1208)							int this22;
HXDLIN(1208)							if ((value21 > 255)) {
HXLINE(1208)								this22 = 255;
            							}
            							else {
HXLINE(1208)								if ((value21 < 0)) {
HXLINE(1208)									this22 = 0;
            								}
            								else {
HXLINE(1208)									this22 = value21;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -65281);
HXDLIN(1208)							int this23;
HXDLIN(1208)							if ((value22 > 255)) {
HXLINE(1208)								this23 = 255;
            							}
            							else {
HXLINE(1208)								if ((value22 < 0)) {
HXLINE(1208)									this23 = 0;
            								}
            								else {
HXLINE(1208)									this23 = value22;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & -256);
HXDLIN(1208)							int this24;
HXDLIN(1208)							if ((value23 > 255)) {
HXLINE(1208)								this24 = 255;
            							}
            							else {
HXLINE(1208)								if ((value23 < 0)) {
HXLINE(1208)									this24 = 0;
            								}
            								else {
HXLINE(1208)									this24 = value23;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | this24);
            						}
HXDLIN(1208)						{
HXLINE(1208)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1208)							this1 = (this1 & 16777215);
HXDLIN(1208)							int this25;
HXDLIN(1208)							if ((value24 > 255)) {
HXLINE(1208)								this25 = 255;
            							}
            							else {
HXLINE(1208)								if ((value24 < 0)) {
HXLINE(1208)									this25 = 0;
            								}
            								else {
HXLINE(1208)									this25 = value24;
            								}
            							}
HXDLIN(1208)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE(1209)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_brightness,return )

Float Color_Impl__obj::set_lightness(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1212_set_lightness)
HXLINE(1213)		{
HXLINE(1213)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN(1213)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1213)			Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN(1213)			Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN(1213)			{
HXLINE(1213)				Float Hue1 = Hue;
HXDLIN(1213)				Float Chroma = chroma;
HXDLIN(1213)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN(1213)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN(1213)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(1213)				Chroma = (Chroma + match);
HXDLIN(1213)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE(1213)						{
HXLINE(1213)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this2;
HXDLIN(1213)							if ((value1 > 255)) {
HXLINE(1213)								this2 = 255;
            							}
            							else {
HXLINE(1213)								if ((value1 < 0)) {
HXLINE(1213)									this2 = 0;
            								}
            								else {
HXLINE(1213)									this2 = value1;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this3;
HXDLIN(1213)							if ((value2 > 255)) {
HXLINE(1213)								this3 = 255;
            							}
            							else {
HXLINE(1213)								if ((value2 < 0)) {
HXLINE(1213)									this3 = 0;
            								}
            								else {
HXLINE(1213)									this3 = value2;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this4;
HXDLIN(1213)							if ((value3 > 255)) {
HXLINE(1213)								this4 = 255;
            							}
            							else {
HXLINE(1213)								if ((value3 < 0)) {
HXLINE(1213)									this4 = 0;
            								}
            								else {
HXLINE(1213)									this4 = value3;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this4);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this5;
HXDLIN(1213)							if ((value4 > 255)) {
HXLINE(1213)								this5 = 255;
            							}
            							else {
HXLINE(1213)								if ((value4 < 0)) {
HXLINE(1213)									this5 = 0;
            								}
            								else {
HXLINE(1213)									this5 = value4;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1213)						{
HXLINE(1213)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this6;
HXDLIN(1213)							if ((value5 > 255)) {
HXLINE(1213)								this6 = 255;
            							}
            							else {
HXLINE(1213)								if ((value5 < 0)) {
HXLINE(1213)									this6 = 0;
            								}
            								else {
HXLINE(1213)									this6 = value5;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this7;
HXDLIN(1213)							if ((value6 > 255)) {
HXLINE(1213)								this7 = 255;
            							}
            							else {
HXLINE(1213)								if ((value6 < 0)) {
HXLINE(1213)									this7 = 0;
            								}
            								else {
HXLINE(1213)									this7 = value6;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this8;
HXDLIN(1213)							if ((value7 > 255)) {
HXLINE(1213)								this8 = 255;
            							}
            							else {
HXLINE(1213)								if ((value7 < 0)) {
HXLINE(1213)									this8 = 0;
            								}
            								else {
HXLINE(1213)									this8 = value7;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this8);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this9;
HXDLIN(1213)							if ((value8 > 255)) {
HXLINE(1213)								this9 = 255;
            							}
            							else {
HXLINE(1213)								if ((value8 < 0)) {
HXLINE(1213)									this9 = 0;
            								}
            								else {
HXLINE(1213)									this9 = value8;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(1213)						{
HXLINE(1213)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this10;
HXDLIN(1213)							if ((value9 > 255)) {
HXLINE(1213)								this10 = 255;
            							}
            							else {
HXLINE(1213)								if ((value9 < 0)) {
HXLINE(1213)									this10 = 0;
            								}
            								else {
HXLINE(1213)									this10 = value9;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this11;
HXDLIN(1213)							if ((value10 > 255)) {
HXLINE(1213)								this11 = 255;
            							}
            							else {
HXLINE(1213)								if ((value10 < 0)) {
HXLINE(1213)									this11 = 0;
            								}
            								else {
HXLINE(1213)									this11 = value10;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this12;
HXDLIN(1213)							if ((value11 > 255)) {
HXLINE(1213)								this12 = 255;
            							}
            							else {
HXLINE(1213)								if ((value11 < 0)) {
HXLINE(1213)									this12 = 0;
            								}
            								else {
HXLINE(1213)									this12 = value11;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this12);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this13;
HXDLIN(1213)							if ((value12 > 255)) {
HXLINE(1213)								this13 = 255;
            							}
            							else {
HXLINE(1213)								if ((value12 < 0)) {
HXLINE(1213)									this13 = 0;
            								}
            								else {
HXLINE(1213)									this13 = value12;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1213)						{
HXLINE(1213)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this14;
HXDLIN(1213)							if ((value13 > 255)) {
HXLINE(1213)								this14 = 255;
            							}
            							else {
HXLINE(1213)								if ((value13 < 0)) {
HXLINE(1213)									this14 = 0;
            								}
            								else {
HXLINE(1213)									this14 = value13;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this15;
HXDLIN(1213)							if ((value14 > 255)) {
HXLINE(1213)								this15 = 255;
            							}
            							else {
HXLINE(1213)								if ((value14 < 0)) {
HXLINE(1213)									this15 = 0;
            								}
            								else {
HXLINE(1213)									this15 = value14;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this16;
HXDLIN(1213)							if ((value15 > 255)) {
HXLINE(1213)								this16 = 255;
            							}
            							else {
HXLINE(1213)								if ((value15 < 0)) {
HXLINE(1213)									this16 = 0;
            								}
            								else {
HXLINE(1213)									this16 = value15;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this16);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this17;
HXDLIN(1213)							if ((value16 > 255)) {
HXLINE(1213)								this17 = 255;
            							}
            							else {
HXLINE(1213)								if ((value16 < 0)) {
HXLINE(1213)									this17 = 0;
            								}
            								else {
HXLINE(1213)									this17 = value16;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1213)						{
HXLINE(1213)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this18;
HXDLIN(1213)							if ((value17 > 255)) {
HXLINE(1213)								this18 = 255;
            							}
            							else {
HXLINE(1213)								if ((value17 < 0)) {
HXLINE(1213)									this18 = 0;
            								}
            								else {
HXLINE(1213)									this18 = value17;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this19;
HXDLIN(1213)							if ((value18 > 255)) {
HXLINE(1213)								this19 = 255;
            							}
            							else {
HXLINE(1213)								if ((value18 < 0)) {
HXLINE(1213)									this19 = 0;
            								}
            								else {
HXLINE(1213)									this19 = value18;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this20;
HXDLIN(1213)							if ((value19 > 255)) {
HXLINE(1213)								this20 = 255;
            							}
            							else {
HXLINE(1213)								if ((value19 < 0)) {
HXLINE(1213)									this20 = 0;
            								}
            								else {
HXLINE(1213)									this20 = value19;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this20);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this21;
HXDLIN(1213)							if ((value20 > 255)) {
HXLINE(1213)								this21 = 255;
            							}
            							else {
HXLINE(1213)								if ((value20 < 0)) {
HXLINE(1213)									this21 = 0;
            								}
            								else {
HXLINE(1213)									this21 = value20;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1213)						{
HXLINE(1213)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -16711681);
HXDLIN(1213)							int this22;
HXDLIN(1213)							if ((value21 > 255)) {
HXLINE(1213)								this22 = 255;
            							}
            							else {
HXLINE(1213)								if ((value21 < 0)) {
HXLINE(1213)									this22 = 0;
            								}
            								else {
HXLINE(1213)									this22 = value21;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -65281);
HXDLIN(1213)							int this23;
HXDLIN(1213)							if ((value22 > 255)) {
HXLINE(1213)								this23 = 255;
            							}
            							else {
HXLINE(1213)								if ((value22 < 0)) {
HXLINE(1213)									this23 = 0;
            								}
            								else {
HXLINE(1213)									this23 = value22;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & -256);
HXDLIN(1213)							int this24;
HXDLIN(1213)							if ((value23 > 255)) {
HXLINE(1213)								this24 = 255;
            							}
            							else {
HXLINE(1213)								if ((value23 < 0)) {
HXLINE(1213)									this24 = 0;
            								}
            								else {
HXLINE(1213)									this24 = value23;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | this24);
            						}
HXDLIN(1213)						{
HXLINE(1213)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1213)							this1 = (this1 & 16777215);
HXDLIN(1213)							int this25;
HXDLIN(1213)							if ((value24 > 255)) {
HXLINE(1213)								this25 = 255;
            							}
            							else {
HXLINE(1213)								if ((value24 < 0)) {
HXLINE(1213)									this25 = 0;
            								}
            								else {
HXLINE(1213)									this25 = value24;
            								}
            							}
HXDLIN(1213)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE(1214)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_lightness,return )

int Color_Impl__obj::set_rgb(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1217_set_rgb)
HXLINE(1219)		this1 = ((this1 & -16777216) | (value & 16777215));
HXLINE(1220)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_rgb,return )

int Color_Impl__obj::get_rgb(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1224_get_rgb)
HXDLIN(1224)		return (this1 & 16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_rgb,return )

Float Color_Impl__obj::maxColor(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1228_maxColor)
HXDLIN(1228)		return ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,maxColor,return )

Float Color_Impl__obj::minColor(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1232_minColor)
HXDLIN(1232)		return ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,minColor,return )

int Color_Impl__obj::boundChannel(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1236_boundChannel)
HXDLIN(1236)		if ((value > 255)) {
HXDLIN(1236)			return 255;
            		}
            		else {
HXDLIN(1236)			if ((value < 0)) {
HXDLIN(1236)				return 0;
            			}
            			else {
HXDLIN(1236)				return value;
            			}
            		}
HXDLIN(1236)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,boundChannel,return )

::String Color_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1243_toString)
HXDLIN(1243)		::String _hx_tmp = (HX_("0x",48,2a,00,00) + ::StringTools_obj::hex(((this1 >> 24) & 255),2));
HXDLIN(1243)		::String _hx_tmp1 = (_hx_tmp + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN(1243)		::String _hx_tmp2 = (_hx_tmp1 + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN(1243)		return (_hx_tmp2 + ::StringTools_obj::hex((this1 & 255),2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toString,return )

int Color_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1248_toInt)
HXDLIN(1248)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toInt,return )

bool Color_Impl__obj::color_greater_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1257_color_greater_than_color)
HXDLIN(1257)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1262_color_greater_than_int)
HXDLIN(1262)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_int,return )

bool Color_Impl__obj::int_greater_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1267_int_greater_than_color)
HXDLIN(1267)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1272_color_greater_than_float)
HXDLIN(1272)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_float,return )

bool Color_Impl__obj::float_greater_than_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1277_float_greater_than_color)
HXDLIN(1277)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1282_color_greater_than_equal_color)
HXDLIN(1282)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_color,return )

bool Color_Impl__obj::color_greater_than_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1287_color_greater_than_equal_int)
HXDLIN(1287)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_int,return )

bool Color_Impl__obj::int_greater_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1292_int_greater_than_equal_color)
HXDLIN(1292)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_greater_than_equal_color,return )

bool Color_Impl__obj::color_greater_than_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1297_color_greater_than_equal_float)
HXDLIN(1297)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_float,return )

bool Color_Impl__obj::float_greater_than_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1302_float_greater_than_equal_color)
HXDLIN(1302)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_greater_than_equal_color,return )

bool Color_Impl__obj::color_less_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1307_color_less_than_color)
HXDLIN(1307)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_color,return )

bool Color_Impl__obj::color_less_than_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1312_color_less_than_int)
HXDLIN(1312)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_int,return )

bool Color_Impl__obj::int_less_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1317_int_less_than_color)
HXDLIN(1317)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_less_than_color,return )

bool Color_Impl__obj::color_less_than_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1322_color_less_than_float)
HXDLIN(1322)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_float,return )

bool Color_Impl__obj::float_less_than_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1327_float_less_than_color)
HXDLIN(1327)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_less_than_color,return )

bool Color_Impl__obj::color_less_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1332_color_less_than_equal_color)
HXDLIN(1332)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_color,return )

bool Color_Impl__obj::color_less_than_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1337_color_less_than_equal_int)
HXDLIN(1337)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_int,return )

bool Color_Impl__obj::int_less_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1342_int_less_than_equal_color)
HXDLIN(1342)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_less_than_equal_color,return )

bool Color_Impl__obj::color_less_than_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1347_color_less_than_equal_float)
HXDLIN(1347)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_float,return )

bool Color_Impl__obj::float_less_than_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1352_float_less_than_equal_color)
HXDLIN(1352)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_less_than_equal_color,return )

bool Color_Impl__obj::color_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1357_color_equal_color)
HXDLIN(1357)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_color,return )

bool Color_Impl__obj::color_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1362_color_equal_int)
HXDLIN(1362)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_int,return )

bool Color_Impl__obj::int_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1367_int_equal_color)
HXDLIN(1367)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_equal_color,return )

bool Color_Impl__obj::color_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1372_color_equal_float)
HXDLIN(1372)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_float,return )

bool Color_Impl__obj::float_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1377_float_equal_color)
HXDLIN(1377)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_equal_color,return )

bool Color_Impl__obj::color_not_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1382_color_not_equal_color)
HXDLIN(1382)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_color,return )

bool Color_Impl__obj::color_not_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1387_color_not_equal_int)
HXDLIN(1387)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_int,return )

bool Color_Impl__obj::int_not_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1392_int_not_equal_color)
HXDLIN(1392)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_not_equal_color,return )

bool Color_Impl__obj::color_not_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1397_color_not_equal_float)
HXDLIN(1397)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_float,return )

bool Color_Impl__obj::float_not_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1402_float_not_equal_color)
HXDLIN(1402)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_not_equal_color,return )

int Color_Impl__obj::color_bitwise_and_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1407_color_bitwise_and_color)
HXDLIN(1407)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_and_color,return )

int Color_Impl__obj::color_bitwise_and_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1412_color_bitwise_and_int)
HXDLIN(1412)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_and_int,return )

int Color_Impl__obj::int_bitwise_and_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1417_int_bitwise_and_color)
HXDLIN(1417)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_and_color,return )

int Color_Impl__obj::color_bitwise_or_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1422_color_bitwise_or_color)
HXDLIN(1422)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_or_color,return )

int Color_Impl__obj::color_bitwise_or_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1427_color_bitwise_or_int)
HXDLIN(1427)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_or_int,return )

int Color_Impl__obj::int_bitwise_or_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1432_int_bitwise_or_color)
HXDLIN(1432)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_or_color,return )

int Color_Impl__obj::color_bitwise_xor_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1437_color_bitwise_xor_color)
HXDLIN(1437)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_xor_color,return )

int Color_Impl__obj::color_bitwise_xor_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1442_color_bitwise_xor_int)
HXDLIN(1442)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_xor_int,return )

int Color_Impl__obj::int_bitwise_xor_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1447_int_bitwise_xor_color)
HXDLIN(1447)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_xor_color,return )

int Color_Impl__obj::color_bitwise_left_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1452_color_bitwise_left_shift_color)
HXDLIN(1452)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_left_shift_color,return )

int Color_Impl__obj::color_bitwise_left_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1457_color_bitwise_left_shift_int)
HXDLIN(1457)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_left_shift_int,return )

int Color_Impl__obj::int_bitwise_left_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1462_int_bitwise_left_shift_color)
HXDLIN(1462)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_left_shift_color,return )

int Color_Impl__obj::color_bitwise_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1467_color_bitwise_right_shift_color)
HXDLIN(1467)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_right_shift_color,return )

int Color_Impl__obj::color_bitwise_right_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1472_color_bitwise_right_shift_int)
HXDLIN(1472)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_right_shift_int,return )

int Color_Impl__obj::int_bitwise_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1477_int_bitwise_right_shift_color)
HXDLIN(1477)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_right_shift_color,return )

int Color_Impl__obj::color_bitwise_unsigned_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1482_color_bitwise_unsigned_right_shift_color)
HXDLIN(1482)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_unsigned_right_shift_color,return )

int Color_Impl__obj::color_bitwise_unsigned_right_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1487_color_bitwise_unsigned_right_shift_int)
HXDLIN(1487)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_unsigned_right_shift_int,return )

int Color_Impl__obj::int_bitwise_unsigned_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1492_int_bitwise_unsigned_right_shift_color)
HXDLIN(1492)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_unsigned_right_shift_color,return )


Color_Impl__obj::Color_Impl__obj()
{
}

bool Color_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darken") ) { outValue = darken_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSB") ) { outValue = setHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSL") ) { outValue = setHSL_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSB") ) { outValue = fromHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSL") ) { outValue = fromHSL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"to24Bit") ) { outValue = to24Bit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lighten") ) { outValue = lighten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRGBA") ) { outValue = setRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCMYK") ) { outValue = setCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getThis") ) { outValue = getThis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_red") ) { outValue = set_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_hue") ) { outValue = set_hue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_rgb") ) { outValue = set_rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rgb") ) { outValue = get_rgb_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromRGBA") ) { outValue = fromRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"from8Bit") ) { outValue = from8Bit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCMYK") ) { outValue = fromCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gradient") ) { outValue = gradient_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blue") ) { outValue = set_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cyan") ) { outValue = get_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cyan") ) { outValue = set_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxColor") ) { outValue = maxColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minColor") ) { outValue = minColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"grayscale") ) { outValue = grayscale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_green") ) { outValue = set_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { outValue = set_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_black") ) { outValue = get_black_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_black") ) { outValue = set_black_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeRandom") ) { outValue = makeRandom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yellow") ) { outValue = get_yellow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_yellow") ) { outValue = set_yellow_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHexString") ) { outValue = toHexString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toWebString") ) { outValue = toWebString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_magenta") ) { outValue = get_magenta_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_magenta") ) { outValue = set_magenta_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setRGBAFloat") ) { outValue = setRGBAFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blackOrWhite") ) { outValue = blackOrWhite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redFloat") ) { outValue = get_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redFloat") ) { outValue = set_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boundChannel") ) { outValue = boundChannel_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromRGBAFloat") ) { outValue = fromRGBAFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blueFloat") ) { outValue = get_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blueFloat") ) { outValue = set_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_lightness") ) { outValue = set_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_greenFloat") ) { outValue = get_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alphaFloat") ) { outValue = get_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_greenFloat") ) { outValue = set_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alphaFloat") ) { outValue = set_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_brightness") ) { outValue = get_brightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_saturation") ) { outValue = set_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_brightness") ) { outValue = set_brightness_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"color_equal_int") ) { outValue = color_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_equal_color") ) { outValue = int_equal_color_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getHSBColorWheel") ) { outValue = getHSBColorWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSChromaMatch") ) { outValue = setHSChromaMatch_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getTriadicHarmony") ) { outValue = getTriadicHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_equal_color") ) { outValue = color_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_equal_float") ) { outValue = color_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_equal_color") ) { outValue = float_equal_color_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getAnalogousHarmony") ) { outValue = getAnalogousHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_int") ) { outValue = color_less_than_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_less_than_color") ) { outValue = int_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_int") ) { outValue = color_not_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_not_equal_color") ) { outValue = int_not_equal_color_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getComplementHarmony") ) { outValue = getComplementHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_or_int") ) { outValue = color_bitwise_or_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_or_color") ) { outValue = int_bitwise_or_color_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"color_less_than_color") ) { outValue = color_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_float") ) { outValue = color_less_than_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_less_than_color") ) { outValue = float_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_color") ) { outValue = color_not_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_float") ) { outValue = color_not_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_not_equal_color") ) { outValue = float_not_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_and_int") ) { outValue = color_bitwise_and_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_and_color") ) { outValue = int_bitwise_and_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_xor_int") ) { outValue = color_bitwise_xor_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_xor_color") ) { outValue = int_bitwise_xor_color_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"color_greater_than_int") ) { outValue = color_greater_than_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_greater_than_color") ) { outValue = int_greater_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_or_color") ) { outValue = color_bitwise_or_color_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"color_bitwise_and_color") ) { outValue = color_bitwise_and_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_xor_color") ) { outValue = color_bitwise_xor_color_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"color_greater_than_color") ) { outValue = color_greater_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_greater_than_float") ) { outValue = color_greater_than_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_greater_than_color") ) { outValue = float_greater_than_color_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getSplitComplementHarmony") ) { outValue = getSplitComplementHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_equal_int") ) { outValue = color_less_than_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_less_than_equal_color") ) { outValue = int_less_than_equal_color_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"color_less_than_equal_color") ) { outValue = color_less_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_equal_float") ) { outValue = color_less_than_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_less_than_equal_color") ) { outValue = float_less_than_equal_color_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_int") ) { outValue = color_greater_than_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_greater_than_equal_color") ) { outValue = int_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_left_shift_int") ) { outValue = color_bitwise_left_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_left_shift_color") ) { outValue = int_bitwise_left_shift_color_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"color_bitwise_right_shift_int") ) { outValue = color_bitwise_right_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_right_shift_color") ) { outValue = int_bitwise_right_shift_color_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_color") ) { outValue = color_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_float") ) { outValue = color_greater_than_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_greater_than_equal_color") ) { outValue = float_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_left_shift_color") ) { outValue = color_bitwise_left_shift_color_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"color_bitwise_right_shift_color") ) { outValue = color_bitwise_right_shift_color_dyn(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"color_bitwise_unsigned_right_shift_int") ) { outValue = color_bitwise_unsigned_right_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_unsigned_right_shift_color") ) { outValue = int_bitwise_unsigned_right_shift_color_dyn(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"color_bitwise_unsigned_right_shift_color") ) { outValue = color_bitwise_unsigned_right_shift_color_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Color_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Color_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Color_Impl__obj::TRANSPARENT,HX_("TRANSPARENT",32,37,f6,f8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TRANSPARENT_COLOR,HX_("TRANSPARENT_COLOR",36,99,5c,15)},
	{::hx::fsInt,(void *) &Color_Impl__obj::WHITE,HX_("WHITE",89,82,ab,47)},
	{::hx::fsInt,(void *) &Color_Impl__obj::OFFWHITE,HX_("OFFWHITE",da,74,16,4a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GRAY,HX_("GRAY",e3,97,2c,2f)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BLACK,HX_("BLACK",9f,0d,e0,32)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GREEN,HX_("GREEN",a3,46,db,17)},
	{::hx::fsInt,(void *) &Color_Impl__obj::YELLOW,HX_("YELLOW",74,4b,df,82)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ORANGE,HX_("ORANGE",ee,5e,3f,f8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::RED,HX_("RED",31,75,3e,00)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PURPLE,HX_("PURPLE",3c,a2,0c,24)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BLUE,HX_("BLUE",9a,0a,da,2b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BROWN,HX_("BROWN",56,06,e2,36)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SEPIA,HX_("SEPIA",d6,d2,1a,f8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PINK,HX_("PINK",76,ba,18,35)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAGENTA,HX_("MAGENTA",09,8e,71,8e)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CYAN,HX_("CYAN",23,0d,8d,2c)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SILVER,HX_("SILVER",0d,01,5d,6a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GOLD,HX_("GOLD",a0,5a,2a,2f)},
	{::hx::fsInt,(void *) &Color_Impl__obj::OLIVE,HX_("OLIVE",bb,ba,1b,af)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAROON,HX_("MAROON",70,33,f6,6c)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BORDEAUX,HX_("BORDEAUX",fe,6f,71,b2)},
	{::hx::fsInt,(void *) &Color_Impl__obj::NAVY,HX_("NAVY",36,42,c0,33)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TEAL,HX_("TEAL",9c,80,ba,37)},
	{::hx::fsInt,(void *) &Color_Impl__obj::FUCHSIA,HX_("FUCHSIA",b7,99,e3,1e)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AQUA,HX_("AQUA",3c,9f,34,2b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LIME,HX_("LIME",15,df,73,32)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CHARCOAL,HX_("CHARCOAL",6d,c0,d0,0a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ONYX,HX_("ONYX",be,58,73,34)},
	{::hx::fsInt,(void *) &Color_Impl__obj::JET,HX_("JET",39,63,38,00)},
	{::hx::fsInt,(void *) &Color_Impl__obj::JET_BLACK,HX_("JET_BLACK",d9,68,33,38)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ROYAL_BLUE,HX_("ROYAL_BLUE",32,33,e1,63)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CHARTREUSE,HX_("CHARTREUSE",d6,4c,c4,79)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CERULEAN,HX_("CERULEAN",0b,91,40,1a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PERIWINKLE,HX_("PERIWINKLE",f4,ba,32,25)},
	{::hx::fsInt,(void *) &Color_Impl__obj::VERMILION,HX_("VERMILION",bb,14,c1,9d)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAUVE,HX_("MAUVE",f0,53,12,81)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AZURE,HX_("AZURE",ef,af,c9,a8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TANGERINE,HX_("TANGERINE",cd,69,f7,bc)},
	{::hx::fsInt,(void *) &Color_Impl__obj::INDIGO,HX_("INDIGO",52,bb,78,46)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MARIGOLD,HX_("MARIGOLD",2b,c4,cd,c3)},
	{::hx::fsInt,(void *) &Color_Impl__obj::COBALT,HX_("COBALT",b3,aa,62,72)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LAVENDER,HX_("LAVENDER",07,91,06,db)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TURQUOISE,HX_("TURQUOISE",81,73,3d,0f)},
	{::hx::fsInt,(void *) &Color_Impl__obj::OCHRE,HX_("OCHRE",67,09,28,a9)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AQUAMARINE,HX_("AQUAMARINE",3e,59,ef,8a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::RUSSET,HX_("RUSSET",52,d2,6e,f1)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TOPAZ,HX_("TOPAZ",ae,82,1d,92)},
	{::hx::fsInt,(void *) &Color_Impl__obj::APRICOT,HX_("APRICOT",82,45,cf,f2)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AMETHYST,HX_("AMETHYST",cd,7f,e7,2b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SAFFRON,HX_("SAFFRON",63,fd,37,f5)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LILAC,HX_("LILAC",d1,8d,ee,f2)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CRIMSON,HX_("CRIMSON",bf,b1,c6,e6)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SLATE,HX_("SLATE",f9,f8,af,fc)},
	{::hx::fsInt,(void *) &Color_Impl__obj::JADE,HX_("JADE",f8,57,1b,31)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CORAL,HX_("CORAL",91,2a,4f,c8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BURGUNDY,HX_("BURGUNDY",76,2e,c3,70)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SIENNA,HX_("SIENNA",72,78,b6,65)},
	{::hx::fsInt,(void *) &Color_Impl__obj::IVORY,HX_("IVORY",09,ec,54,41)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MULBERRY,HX_("MULBERRY",52,b0,38,94)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SANDALWOOD,HX_("SANDALWOOD",dc,28,e7,59)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GARNET,HX_("GARNET",45,3e,d1,06)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PEWTER,HX_("PEWTER",3f,6e,f4,f0)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CARNATION,HX_("CARNATION",7b,ee,7c,e1)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CITRINE,HX_("CITRINE",9c,4d,3f,a6)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CELADON,HX_("CELADON",2c,cd,5c,66)},
	{::hx::fsInt,(void *) &Color_Impl__obj::HELIOTROPE,HX_("HELIOTROPE",d1,b4,e5,f0)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PUCE,HX_("PUCE",e7,cb,21,35)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CINNABAR,HX_("CINNABAR",78,4b,13,18)},
	{::hx::fsInt,(void *) &Color_Impl__obj::VIRIDIAN,HX_("VIRIDIAN",5c,42,3f,11)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ECRU,HX_("ECRU",a1,d7,ce,2d)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ALABASTER,HX_("ALABASTER",03,e6,ee,20)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SAPPHIRE,HX_("SAPPHIRE",02,76,b8,56)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PEARL,HX_("PEARL",66,bb,db,3d)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SALMON,HX_("SALMON",6e,91,21,cf)},
	{::hx::fsInt,(void *) &Color_Impl__obj::UMBER,HX_("UMBER",d7,0d,27,24)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TURMERIC,HX_("TURMERIC",03,53,26,e0)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAHOGANY,HX_("MAHOGANY",c0,05,99,38)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PERSIMMON,HX_("PERSIMMON",92,08,e9,12)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ROSEWOOD,HX_("ROSEWOOD",3c,f4,4a,4b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CARAMEL,HX_("CARAMEL",47,a2,5d,41)},
	{::hx::fsInt,(void *) &Color_Impl__obj::DANDELION,HX_("DANDELION",ce,7d,d7,56)},
	{::hx::fsInt,(void *) &Color_Impl__obj::FERN,HX_("FERN",bb,92,79,2e)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LAPIS,HX_("LAPIS",e5,e8,a7,ed)},
	{::hx::fsInt,(void *) &Color_Impl__obj::DENIM,HX_("DENIM",d1,9a,16,55)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SABLE,HX_("SABLE",6d,5b,6b,f5)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ORCHID,HX_("ORCHID",63,40,8d,f9)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TAWNY,HX_("TAWNY",15,e1,e1,88)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PINE,HX_("PINE",70,ba,18,35)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LEMON,HX_("LEMON",d3,81,4a,f0)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SCARLET,HX_("SCARLET",da,c8,d7,e8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TAUPE,HX_("TAUPE",3d,5e,e0,88)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CERISE,HX_("CERISE",ab,5f,fa,ba)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AMBER,HX_("AMBER",c3,73,23,a0)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CINNAMON,HX_("CINNAMON",71,b0,1b,18)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SADDLE_BROWN,HX_("SADDLE_BROWN",5e,b2,7d,88)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TOMATO,HX_("TOMATO",ca,2c,b9,45)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CORNSILK,HX_("CORNSILK",fd,b5,ec,b6)},
	{::hx::fsInt,(void *) &Color_Impl__obj::VIOLET,HX_("VIOLET",7f,23,63,9f)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &Color_Impl__obj::COLOR_REGEX,HX_("COLOR_REGEX",6b,2b,e2,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Color_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TRANSPARENT_COLOR,"TRANSPARENT_COLOR");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::OFFWHITE,"OFFWHITE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ORANGE,"ORANGE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::RED,"RED");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PURPLE,"PURPLE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BROWN,"BROWN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SEPIA,"SEPIA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PINK,"PINK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CYAN,"CYAN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SILVER,"SILVER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GOLD,"GOLD");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::OLIVE,"OLIVE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAROON,"MAROON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BORDEAUX,"BORDEAUX");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::NAVY,"NAVY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TEAL,"TEAL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::FUCHSIA,"FUCHSIA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AQUA,"AQUA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LIME,"LIME");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CHARCOAL,"CHARCOAL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ONYX,"ONYX");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::JET,"JET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::JET_BLACK,"JET_BLACK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ROYAL_BLUE,"ROYAL_BLUE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CHARTREUSE,"CHARTREUSE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CERULEAN,"CERULEAN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PERIWINKLE,"PERIWINKLE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::VERMILION,"VERMILION");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAUVE,"MAUVE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AZURE,"AZURE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TANGERINE,"TANGERINE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::INDIGO,"INDIGO");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MARIGOLD,"MARIGOLD");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::COBALT,"COBALT");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LAVENDER,"LAVENDER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TURQUOISE,"TURQUOISE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::OCHRE,"OCHRE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AQUAMARINE,"AQUAMARINE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::RUSSET,"RUSSET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TOPAZ,"TOPAZ");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::APRICOT,"APRICOT");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AMETHYST,"AMETHYST");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SAFFRON,"SAFFRON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LILAC,"LILAC");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CRIMSON,"CRIMSON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SLATE,"SLATE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::JADE,"JADE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CORAL,"CORAL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BURGUNDY,"BURGUNDY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SIENNA,"SIENNA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::IVORY,"IVORY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MULBERRY,"MULBERRY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SANDALWOOD,"SANDALWOOD");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GARNET,"GARNET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PEWTER,"PEWTER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CARNATION,"CARNATION");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CITRINE,"CITRINE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CELADON,"CELADON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::HELIOTROPE,"HELIOTROPE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PUCE,"PUCE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CINNABAR,"CINNABAR");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::VIRIDIAN,"VIRIDIAN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ECRU,"ECRU");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ALABASTER,"ALABASTER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SAPPHIRE,"SAPPHIRE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PEARL,"PEARL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SALMON,"SALMON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::UMBER,"UMBER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TURMERIC,"TURMERIC");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAHOGANY,"MAHOGANY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PERSIMMON,"PERSIMMON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ROSEWOOD,"ROSEWOOD");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CARAMEL,"CARAMEL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::DANDELION,"DANDELION");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::FERN,"FERN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LAPIS,"LAPIS");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::DENIM,"DENIM");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SABLE,"SABLE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ORCHID,"ORCHID");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TAWNY,"TAWNY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PINE,"PINE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LEMON,"LEMON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SCARLET,"SCARLET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TAUPE,"TAUPE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CERISE,"CERISE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AMBER,"AMBER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CINNAMON,"CINNAMON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SADDLE_BROWN,"SADDLE_BROWN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TOMATO,"TOMATO");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CORNSILK,"CORNSILK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::VIOLET,"VIOLET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TRANSPARENT_COLOR,"TRANSPARENT_COLOR");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::OFFWHITE,"OFFWHITE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ORANGE,"ORANGE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PURPLE,"PURPLE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BROWN,"BROWN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SEPIA,"SEPIA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PINK,"PINK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CYAN,"CYAN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SILVER,"SILVER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GOLD,"GOLD");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::OLIVE,"OLIVE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAROON,"MAROON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BORDEAUX,"BORDEAUX");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::NAVY,"NAVY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TEAL,"TEAL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::FUCHSIA,"FUCHSIA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AQUA,"AQUA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LIME,"LIME");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CHARCOAL,"CHARCOAL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ONYX,"ONYX");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::JET,"JET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::JET_BLACK,"JET_BLACK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ROYAL_BLUE,"ROYAL_BLUE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CHARTREUSE,"CHARTREUSE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CERULEAN,"CERULEAN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PERIWINKLE,"PERIWINKLE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::VERMILION,"VERMILION");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAUVE,"MAUVE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AZURE,"AZURE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TANGERINE,"TANGERINE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::INDIGO,"INDIGO");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MARIGOLD,"MARIGOLD");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::COBALT,"COBALT");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LAVENDER,"LAVENDER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TURQUOISE,"TURQUOISE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::OCHRE,"OCHRE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AQUAMARINE,"AQUAMARINE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::RUSSET,"RUSSET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TOPAZ,"TOPAZ");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::APRICOT,"APRICOT");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AMETHYST,"AMETHYST");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SAFFRON,"SAFFRON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LILAC,"LILAC");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CRIMSON,"CRIMSON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SLATE,"SLATE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::JADE,"JADE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CORAL,"CORAL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BURGUNDY,"BURGUNDY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SIENNA,"SIENNA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::IVORY,"IVORY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MULBERRY,"MULBERRY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SANDALWOOD,"SANDALWOOD");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GARNET,"GARNET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PEWTER,"PEWTER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CARNATION,"CARNATION");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CITRINE,"CITRINE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CELADON,"CELADON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::HELIOTROPE,"HELIOTROPE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PUCE,"PUCE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CINNABAR,"CINNABAR");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::VIRIDIAN,"VIRIDIAN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ECRU,"ECRU");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ALABASTER,"ALABASTER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SAPPHIRE,"SAPPHIRE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PEARL,"PEARL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SALMON,"SALMON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::UMBER,"UMBER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TURMERIC,"TURMERIC");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAHOGANY,"MAHOGANY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PERSIMMON,"PERSIMMON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ROSEWOOD,"ROSEWOOD");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CARAMEL,"CARAMEL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::DANDELION,"DANDELION");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::FERN,"FERN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LAPIS,"LAPIS");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::DENIM,"DENIM");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SABLE,"SABLE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ORCHID,"ORCHID");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TAWNY,"TAWNY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PINE,"PINE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LEMON,"LEMON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SCARLET,"SCARLET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TAUPE,"TAUPE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CERISE,"CERISE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AMBER,"AMBER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CINNAMON,"CINNAMON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SADDLE_BROWN,"SADDLE_BROWN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TOMATO,"TOMATO");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CORNSILK,"CORNSILK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::VIOLET,"VIOLET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#endif

::hx::Class Color_Impl__obj::__mClass;

static ::String Color_Impl__obj_sStaticFields[] = {
	HX_("TRANSPARENT",32,37,f6,f8),
	HX_("TRANSPARENT_COLOR",36,99,5c,15),
	HX_("WHITE",89,82,ab,47),
	HX_("OFFWHITE",da,74,16,4a),
	HX_("GRAY",e3,97,2c,2f),
	HX_("BLACK",9f,0d,e0,32),
	HX_("GREEN",a3,46,db,17),
	HX_("YELLOW",74,4b,df,82),
	HX_("ORANGE",ee,5e,3f,f8),
	HX_("RED",31,75,3e,00),
	HX_("PURPLE",3c,a2,0c,24),
	HX_("BLUE",9a,0a,da,2b),
	HX_("BROWN",56,06,e2,36),
	HX_("SEPIA",d6,d2,1a,f8),
	HX_("PINK",76,ba,18,35),
	HX_("MAGENTA",09,8e,71,8e),
	HX_("CYAN",23,0d,8d,2c),
	HX_("SILVER",0d,01,5d,6a),
	HX_("GOLD",a0,5a,2a,2f),
	HX_("OLIVE",bb,ba,1b,af),
	HX_("MAROON",70,33,f6,6c),
	HX_("BORDEAUX",fe,6f,71,b2),
	HX_("NAVY",36,42,c0,33),
	HX_("TEAL",9c,80,ba,37),
	HX_("FUCHSIA",b7,99,e3,1e),
	HX_("AQUA",3c,9f,34,2b),
	HX_("LIME",15,df,73,32),
	HX_("CHARCOAL",6d,c0,d0,0a),
	HX_("ONYX",be,58,73,34),
	HX_("JET",39,63,38,00),
	HX_("JET_BLACK",d9,68,33,38),
	HX_("ROYAL_BLUE",32,33,e1,63),
	HX_("CHARTREUSE",d6,4c,c4,79),
	HX_("CERULEAN",0b,91,40,1a),
	HX_("PERIWINKLE",f4,ba,32,25),
	HX_("VERMILION",bb,14,c1,9d),
	HX_("MAUVE",f0,53,12,81),
	HX_("AZURE",ef,af,c9,a8),
	HX_("TANGERINE",cd,69,f7,bc),
	HX_("INDIGO",52,bb,78,46),
	HX_("MARIGOLD",2b,c4,cd,c3),
	HX_("COBALT",b3,aa,62,72),
	HX_("LAVENDER",07,91,06,db),
	HX_("TURQUOISE",81,73,3d,0f),
	HX_("OCHRE",67,09,28,a9),
	HX_("AQUAMARINE",3e,59,ef,8a),
	HX_("RUSSET",52,d2,6e,f1),
	HX_("TOPAZ",ae,82,1d,92),
	HX_("APRICOT",82,45,cf,f2),
	HX_("AMETHYST",cd,7f,e7,2b),
	HX_("SAFFRON",63,fd,37,f5),
	HX_("LILAC",d1,8d,ee,f2),
	HX_("CRIMSON",bf,b1,c6,e6),
	HX_("SLATE",f9,f8,af,fc),
	HX_("JADE",f8,57,1b,31),
	HX_("CORAL",91,2a,4f,c8),
	HX_("BURGUNDY",76,2e,c3,70),
	HX_("SIENNA",72,78,b6,65),
	HX_("IVORY",09,ec,54,41),
	HX_("MULBERRY",52,b0,38,94),
	HX_("SANDALWOOD",dc,28,e7,59),
	HX_("GARNET",45,3e,d1,06),
	HX_("PEWTER",3f,6e,f4,f0),
	HX_("CARNATION",7b,ee,7c,e1),
	HX_("CITRINE",9c,4d,3f,a6),
	HX_("CELADON",2c,cd,5c,66),
	HX_("HELIOTROPE",d1,b4,e5,f0),
	HX_("PUCE",e7,cb,21,35),
	HX_("CINNABAR",78,4b,13,18),
	HX_("VIRIDIAN",5c,42,3f,11),
	HX_("ECRU",a1,d7,ce,2d),
	HX_("ALABASTER",03,e6,ee,20),
	HX_("SAPPHIRE",02,76,b8,56),
	HX_("PEARL",66,bb,db,3d),
	HX_("SALMON",6e,91,21,cf),
	HX_("UMBER",d7,0d,27,24),
	HX_("TURMERIC",03,53,26,e0),
	HX_("MAHOGANY",c0,05,99,38),
	HX_("PERSIMMON",92,08,e9,12),
	HX_("ROSEWOOD",3c,f4,4a,4b),
	HX_("CARAMEL",47,a2,5d,41),
	HX_("DANDELION",ce,7d,d7,56),
	HX_("FERN",bb,92,79,2e),
	HX_("LAPIS",e5,e8,a7,ed),
	HX_("DENIM",d1,9a,16,55),
	HX_("SABLE",6d,5b,6b,f5),
	HX_("ORCHID",63,40,8d,f9),
	HX_("TAWNY",15,e1,e1,88),
	HX_("PINE",70,ba,18,35),
	HX_("LEMON",d3,81,4a,f0),
	HX_("SCARLET",da,c8,d7,e8),
	HX_("TAUPE",3d,5e,e0,88),
	HX_("CERISE",ab,5f,fa,ba),
	HX_("AMBER",c3,73,23,a0),
	HX_("CINNAMON",71,b0,1b,18),
	HX_("SADDLE_BROWN",5e,b2,7d,88),
	HX_("TOMATO",ca,2c,b9,45),
	HX_("CORNSILK",fd,b5,ec,b6),
	HX_("VIOLET",7f,23,63,9f),
	HX_("COLOR_REGEX",6b,2b,e2,09),
	HX_("fromInt",a5,dd,fa,57),
	HX_("fromRGBA",1e,3b,5c,a9),
	HX_("from8Bit",df,05,29,98),
	HX_("fromRGBAFloat",9e,ed,e6,8b),
	HX_("fromCMYK",66,a9,76,9f),
	HX_("fromHSB",ad,03,fa,57),
	HX_("fromHSL",b7,03,fa,57),
	HX_("fromString",db,2d,74,54),
	HX_("getHSBColorWheel",99,27,93,2f),
	HX_("interpolate",c1,d4,32,1f),
	HX_("gradient",f0,39,3f,2a),
	HX_("makeRandom",91,f6,5e,09),
	HX_("multiply",24,e2,8c,9a),
	HX_("add",21,f2,49,00),
	HX_("subtract",14,75,11,f8),
	HX_("divide",79,2f,12,bf),
	HX_("getComplementHarmony",4a,20,b6,d3),
	HX_("getAnalogousHarmony",df,79,e2,a4),
	HX_("getSplitComplementHarmony",bc,be,30,75),
	HX_("getTriadicHarmony",f4,5d,d3,ab),
	HX_("to24Bit",d0,66,f1,25),
	HX_("toHexString",11,69,b3,6d),
	HX_("toWebString",8a,5b,00,37),
	HX_("darken",5f,36,3a,21),
	HX_("lighten",bf,4a,e3,19),
	HX_("invert",16,e7,d8,9f),
	HX_("setRGBA",56,ad,14,11),
	HX_("setRGBAFloat",66,70,4d,3c),
	HX_("setCMYK",9e,1b,2f,07),
	HX_("setHSB",75,c0,66,6f),
	HX_("setHSL",7f,c0,66,6f),
	HX_("setHSChromaMatch",c2,69,0f,10),
	HX_("grayscale",c7,87,37,f3),
	HX_("blackOrWhite",87,72,7f,a7),
	HX_("_new",61,15,1f,3f),
	HX_("getThis",14,b6,7e,1f),
	HX_("validate",96,d0,e3,04),
	HX_("get_red",e8,a1,cb,26),
	HX_("get_green",1a,6b,96,dd),
	HX_("get_blue",23,fe,d3,c0),
	HX_("get_alpha",b5,03,40,65),
	HX_("get_redFloat",94,aa,fc,26),
	HX_("get_greenFloat",22,4c,51,4d),
	HX_("get_blueFloat",79,18,35,9c),
	HX_("get_alphaFloat",a7,a1,31,99),
	HX_("set_red",f4,32,cd,19),
	HX_("set_green",26,57,e7,c0),
	HX_("set_blue",97,57,31,6f),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_redFloat",08,ce,f5,3b),
	HX_("set_greenFloat",96,34,71,6d),
	HX_("set_blueFloat",85,fa,3a,e1),
	HX_("set_alphaFloat",1b,8a,51,b9),
	HX_("get_cyan",ac,00,87,c1),
	HX_("get_magenta",40,1a,98,94),
	HX_("get_yellow",3d,0f,e4,c0),
	HX_("get_black",16,32,9b,f8),
	HX_("set_cyan",20,5a,e4,6f),
	HX_("set_magenta",4c,21,05,9f),
	HX_("set_yellow",b1,ad,61,c4),
	HX_("set_black",22,1e,ec,db),
	HX_("get_hue",4f,19,c4,26),
	HX_("get_brightness",1a,16,67,db),
	HX_("get_saturation",1b,5c,97,6c),
	HX_("get_lightness",44,08,ab,98),
	HX_("set_hue",5b,aa,c5,19),
	HX_("set_saturation",8f,44,b7,8c),
	HX_("set_brightness",8e,fe,86,fb),
	HX_("set_lightness",50,ea,b0,dd),
	HX_("set_rgb",b0,34,cd,19),
	HX_("get_rgb",a4,a3,cb,26),
	HX_("maxColor",1f,c4,79,f4),
	HX_("minColor",71,de,93,41),
	HX_("boundChannel",25,1c,54,83),
	HX_("toString",ac,d0,6e,38),
	HX_("toInt",34,be,11,14),
	HX_("color_greater_than_color",c6,9d,63,3e),
	HX_("color_greater_than_int",92,4a,12,91),
	HX_("int_greater_than_color",ba,e9,06,db),
	HX_("color_greater_than_float",ff,f1,9d,f6),
	HX_("float_greater_than_color",2d,71,d6,a4),
	HX_("color_greater_than_equal_color",fb,5f,e0,96),
	HX_("color_greater_than_equal_int",87,a5,8a,56),
	HX_("int_greater_than_equal_color",ef,1a,03,3c),
	HX_("color_greater_than_equal_float",34,b4,1a,4f),
	HX_("float_greater_than_equal_color",a2,3a,d6,4a),
	HX_("color_less_than_color",0f,97,2c,ef),
	HX_("color_less_than_int",9b,2f,91,38),
	HX_("int_less_than_color",9b,0a,9d,38),
	HX_("color_less_than_float",48,eb,66,a7),
	HX_("float_less_than_color",48,ad,98,64),
	HX_("color_less_than_equal_color",04,f6,c8,49),
	HX_("color_less_than_equal_int",50,77,04,da),
	HX_("int_less_than_equal_color",90,9a,4e,29),
	HX_("color_less_than_equal_float",3d,4a,03,02),
	HX_("float_less_than_equal_color",fd,fc,b0,b2),
	HX_("color_equal_color",3c,6f,9f,59),
	HX_("color_equal_int",88,b2,2b,65),
	HX_("int_equal_color",c8,2c,54,61),
	HX_("color_equal_float",75,c3,d9,11),
	HX_("float_equal_color",f5,b4,e3,31),
	HX_("color_not_equal_color",d0,88,23,fe),
	HX_("color_not_equal_int",1c,7f,74,0c),
	HX_("int_not_equal_color",5c,fc,93,47),
	HX_("color_not_equal_float",09,dd,5d,b6),
	HX_("float_not_equal_color",09,9f,8f,73),
	HX_("color_bitwise_and_color",11,05,3f,d1),
	HX_("color_bitwise_and_int",1d,b9,8c,3d),
	HX_("int_bitwise_and_color",9d,73,5c,ae),
	HX_("color_bitwise_or_color",71,9c,74,b6),
	HX_("color_bitwise_or_int",7d,b8,7b,09),
	HX_("int_bitwise_or_color",65,43,69,af),
	HX_("color_bitwise_xor_color",d5,64,4e,44),
	HX_("color_bitwise_xor_int",e1,df,f1,6f),
	HX_("int_bitwise_xor_color",61,d3,6b,21),
	HX_("color_bitwise_left_shift_color",98,17,dd,36),
	HX_("color_bitwise_left_shift_int",e4,4b,4b,88),
	HX_("int_bitwise_left_shift_color",8c,d2,ff,db),
	HX_("color_bitwise_right_shift_color",d9,62,16,0e),
	HX_("color_bitwise_right_shift_int",e5,94,1f,cb),
	HX_("int_bitwise_right_shift_color",65,3d,57,e7),
	HX_("color_bitwise_unsigned_right_shift_color",63,d6,09,61),
	HX_("color_bitwise_unsigned_right_shift_int",ef,31,6a,40),
	HX_("int_bitwise_unsigned_right_shift_color",57,4a,97,f2),
	::String(null())
};

void Color_Impl__obj::__register()
{
	Color_Impl__obj _hx_dummy;
	Color_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds._Color.Color_Impl_",b2,c3,c7,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Color_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Color_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Color_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Color_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_29_boot)
HXDLIN(  29)		TRANSPARENT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_45_boot)
HXDLIN(  45)		TRANSPARENT_COLOR = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_50_boot)
HXDLIN(  50)		WHITE = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_55_boot)
HXDLIN(  55)		OFFWHITE = -28;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_60_boot)
HXDLIN(  60)		GRAY = -8355712;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_65_boot)
HXDLIN(  65)		BLACK = -16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_70_boot)
HXDLIN(  70)		GREEN = -16711936;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_75_boot)
HXDLIN(  75)		YELLOW = -256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_80_boot)
HXDLIN(  80)		ORANGE = -23296;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_85_boot)
HXDLIN(  85)		RED = -65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_90_boot)
HXDLIN(  90)		PURPLE = -8388480;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_95_boot)
HXDLIN(  95)		BLUE = -16776961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_100_boot)
HXDLIN( 100)		BROWN = -7650029;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_105_boot)
HXDLIN( 105)		SEPIA = -9420268;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_110_boot)
HXDLIN( 110)		PINK = -16181;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_115_boot)
HXDLIN( 115)		MAGENTA = -65281;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_120_boot)
HXDLIN( 120)		CYAN = -16711681;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_125_boot)
HXDLIN( 125)		SILVER = 12632256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_130_boot)
HXDLIN( 130)		GOLD = -10496;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_135_boot)
HXDLIN( 135)		OLIVE = -8355840;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_140_boot)
HXDLIN( 140)		MAROON = -8388608;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_145_boot)
HXDLIN( 145)		BORDEAUX = -9294025;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_150_boot)
HXDLIN( 150)		NAVY = -16777088;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_155_boot)
HXDLIN( 155)		TEAL = -16744320;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_160_boot)
HXDLIN( 160)		FUCHSIA = -65281;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_165_boot)
HXDLIN( 165)		AQUA = -16711681;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_170_boot)
HXDLIN( 170)		LIME = -13447886;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_175_boot)
HXDLIN( 175)		CHARCOAL = -13220529;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_180_boot)
HXDLIN( 180)		ONYX = -13289415;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_185_boot)
HXDLIN( 185)		JET = -13355980;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_190_boot)
HXDLIN( 190)		JET_BLACK = -15856112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_195_boot)
HXDLIN( 195)		ROYAL_BLUE = -12490271;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_200_boot)
HXDLIN( 200)		CHARTREUSE = -8388864;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_205_boot)
HXDLIN( 205)		CERULEAN = -16745561;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_210_boot)
HXDLIN( 210)		PERIWINKLE = -3355393;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_215_boot)
HXDLIN( 215)		VERMILION = -1883596;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_220_boot)
HXDLIN( 220)		MAUVE = -2051841;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_225_boot)
HXDLIN( 225)		AZURE = -16744449;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_230_boot)
HXDLIN( 230)		TANGERINE = -883456;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_235_boot)
HXDLIN( 235)		INDIGO = -11861886;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_240_boot)
HXDLIN( 240)		MARIGOLD = -1400287;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_245_boot)
HXDLIN( 245)		COBALT = -16758869;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_250_boot)
HXDLIN( 250)		LAVENDER = -1644806;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_255_boot)
HXDLIN( 255)		TURQUOISE = -12525360;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_260_boot)
HXDLIN( 260)		OCHRE = -3377374;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_265_boot)
HXDLIN( 265)		AQUAMARINE = -8388652;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_270_boot)
HXDLIN( 270)		RUSSET = -8370661;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_275_boot)
HXDLIN( 275)		TOPAZ = -14212;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_280_boot)
HXDLIN( 280)		APRICOT = -274767;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_285_boot)
HXDLIN( 285)		AMETHYST = -6723892;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_290_boot)
HXDLIN( 290)		SAFFRON = -736208;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_295_boot)
HXDLIN( 295)		LILAC = -3628344;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_300_boot)
HXDLIN( 300)		CRIMSON = -2354116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_305_boot)
HXDLIN( 305)		SLATE = -9404272;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_310_boot)
HXDLIN( 310)		JADE = -16734101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_315_boot)
HXDLIN( 315)		CORAL = -32944;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_320_boot)
HXDLIN( 320)		BURGUNDY = -8388576;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_325_boot)
HXDLIN( 325)		SIENNA = -7852777;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_330_boot)
HXDLIN( 330)		IVORY = -16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_335_boot)
HXDLIN( 335)		MULBERRY = -3847284;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_340_boot)
HXDLIN( 340)		SANDALWOOD = -5599889;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_345_boot)
HXDLIN( 345)		GARNET = -9226699;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_350_boot)
HXDLIN( 350)		PEWTER = -7624521;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_355_boot)
HXDLIN( 355)		CARNATION = -22839;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_360_boot)
HXDLIN( 360)		CITRINE = -1781750;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_365_boot)
HXDLIN( 365)		CELADON = -5447249;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_370_boot)
HXDLIN( 370)		HELIOTROPE = -2132993;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_375_boot)
HXDLIN( 375)		PUCE = -3372903;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_380_boot)
HXDLIN( 380)		CINNABAR = -1883596;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_385_boot)
HXDLIN( 385)		VIRIDIAN = -12549523;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_390_boot)
HXDLIN( 390)		ECRU = -4017536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_395_boot)
HXDLIN( 395)		ALABASTER = -1185056;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_400_boot)
HXDLIN( 400)		SAPPHIRE = -15772998;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_405_boot)
HXDLIN( 405)		PEARL = -1384248;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_410_boot)
HXDLIN( 410)		SALMON = -360334;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_415_boot)
HXDLIN( 415)		UMBER = -10268345;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_420_boot)
HXDLIN( 420)		TURMERIC = -1781750;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_425_boot)
HXDLIN( 425)		MAHOGANY = -4177920;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_430_boot)
HXDLIN( 430)		PERSIMMON = -40121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_435_boot)
HXDLIN( 435)		ROSEWOOD = -10158069;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_440_boot)
HXDLIN( 440)		CARAMEL = -10496;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_445_boot)
HXDLIN( 445)		DANDELION = -990928;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_450_boot)
HXDLIN( 450)		FERN = -9323400;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_455_boot)
HXDLIN( 455)		LAPIS = -14261860;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_460_boot)
HXDLIN( 460)		DENIM = -15376195;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_465_boot)
HXDLIN( 465)		SABLE = -7443077;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_470_boot)
HXDLIN( 470)		ORCHID = -2461482;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_475_boot)
HXDLIN( 475)		TAWNY = -3320064;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_480_boot)
HXDLIN( 480)		PINE = -16680593;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_485_boot)
HXDLIN( 485)		LEMON = -2304;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_490_boot)
HXDLIN( 490)		SCARLET = -56320;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_495_boot)
HXDLIN( 495)		TAUPE = -12043214;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_500_boot)
HXDLIN( 500)		CERISE = -2215581;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_505_boot)
HXDLIN( 505)		AMBER = -16640;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_510_boot)
HXDLIN( 510)		CINNAMON = -2987746;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_515_boot)
HXDLIN( 515)		SADDLE_BROWN = -7650029;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_520_boot)
HXDLIN( 520)		TOMATO = -40121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_525_boot)
HXDLIN( 525)		CORNSILK = -9543;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_530_boot)
HXDLIN( 530)		VIOLET = -8453889;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9279add21e623cc0_572_boot)
HXDLIN( 572)		COLOR_REGEX =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(0x|#)(([A-F0-9]{2}){3,4})$",25,93,28,2c),HX_("i",69,00,00,00));
            	}
}

} // end namespace vision
} // end namespace ds
} // end namespace _Color
