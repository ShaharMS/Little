// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_vision_ds__Color_Color_Impl_
#include <vision/ds/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_vision_tools_MathTools
#include <vision/tools/MathTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_210_fromInt,"vision.ds._Color.Color_Impl_","fromInt",0x8ea924e9,"vision.ds._Color.Color_Impl_.fromInt","vision/ds/Color.hx",210,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_222_fromRGBA,"vision.ds._Color.Color_Impl_","fromRGBA",0x4b2c4f5a,"vision.ds._Color.Color_Impl_.fromRGBA","vision/ds/Color.hx",222,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_233_from8Bit,"vision.ds._Color.Color_Impl_","from8Bit",0x39f91a1b,"vision.ds._Color.Color_Impl_.from8Bit","vision/ds/Color.hx",233,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_247_fromRGBAFloat,"vision.ds._Color.Color_Impl_","fromRGBAFloat",0x78b7ffe2,"vision.ds._Color.Color_Impl_.fromRGBAFloat","vision/ds/Color.hx",247,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_262_fromCMYK,"vision.ds._Color.Color_Impl_","fromCMYK",0x4146bda2,"vision.ds._Color.Color_Impl_.fromCMYK","vision/ds/Color.hx",262,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_276_fromHSB,"vision.ds._Color.Color_Impl_","fromHSB",0x8ea84af1,"vision.ds._Color.Color_Impl_.fromHSB","vision/ds/Color.hx",276,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_290_fromHSL,"vision.ds._Color.Color_Impl_","fromHSL",0x8ea84afb,"vision.ds._Color.Color_Impl_.fromHSL","vision/ds/Color.hx",290,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_310_fromString,"vision.ds._Color.Color_Impl_","fromString",0x199ec917,"vision.ds._Color.Color_Impl_.fromString","vision/ds/Color.hx",310,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_332_getHSBColorWheel,"vision.ds._Color.Color_Impl_","getHSBColorWheel",0x6e2bd7d5,"vision.ds._Color.Color_Impl_.getHSBColorWheel","vision/ds/Color.hx",332,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_343_interpolate,"vision.ds._Color.Color_Impl_","interpolate",0xdf500e05,"vision.ds._Color.Color_Impl_.interpolate","vision/ds/Color.hx",343,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_361_gradient,"vision.ds._Color.Color_Impl_","gradient",0xcc0f4e2c,"vision.ds._Color.Color_Impl_.gradient","vision/ds/Color.hx",361,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_366_gradient,"vision.ds._Color.Color_Impl_","gradient",0xcc0f4e2c,"vision.ds._Color.Color_Impl_.gradient","vision/ds/Color.hx",366,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_384_makeRandom,"vision.ds._Color.Color_Impl_","makeRandom",0xce8991cd,"vision.ds._Color.Color_Impl_.makeRandom","vision/ds/Color.hx",384,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_392_multiply,"vision.ds._Color.Color_Impl_","multiply",0x3c5cf660,"vision.ds._Color.Color_Impl_.multiply","vision/ds/Color.hx",392,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_401_add,"vision.ds._Color.Color_Impl_","add",0x706a4765,"vision.ds._Color.Color_Impl_.add","vision/ds/Color.hx",401,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_409_subtract,"vision.ds._Color.Color_Impl_","subtract",0x99e18950,"vision.ds._Color.Color_Impl_.subtract","vision/ds/Color.hx",409,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_419_divide,"vision.ds._Color.Color_Impl_","divide",0x7f077cb5,"vision.ds._Color.Color_Impl_.divide","vision/ds/Color.hx",419,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_429_getComplementHarmony,"vision.ds._Color.Color_Impl_","getComplementHarmony",0x50719e86,"vision.ds._Color.Color_Impl_.getComplementHarmony","vision/ds/Color.hx",429,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_439_getAnalogousHarmony,"vision.ds._Color.Color_Impl_","getAnalogousHarmony",0x12809723,"vision.ds._Color.Color_Impl_.getAnalogousHarmony","vision/ds/Color.hx",439,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_453_getSplitComplementHarmony,"vision.ds._Color.Color_Impl_","getSplitComplementHarmony",0xe7762700,"vision.ds._Color.Color_Impl_.getSplitComplementHarmony","vision/ds/Color.hx",453,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_467_getTriadicHarmony,"vision.ds._Color.Color_Impl_","getTriadicHarmony",0x32d4e238,"vision.ds._Color.Color_Impl_.getTriadicHarmony","vision/ds/Color.hx",467,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_480_to24Bit,"vision.ds._Color.Color_Impl_","to24Bit",0x5c9fae14,"vision.ds._Color.Color_Impl_.to24Bit","vision/ds/Color.hx",480,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_491_toHexString,"vision.ds._Color.Color_Impl_","toHexString",0x2dd0a255,"vision.ds._Color.Color_Impl_.toHexString","vision/ds/Color.hx",491,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_501_toWebString,"vision.ds._Color.Color_Impl_","toWebString",0xf71d94ce,"vision.ds._Color.Color_Impl_.toWebString","vision/ds/Color.hx",501,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_510_darken,"vision.ds._Color.Color_Impl_","darken",0xe12f839b,"vision.ds._Color.Color_Impl_.darken","vision/ds/Color.hx",510,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_523_lighten,"vision.ds._Color.Color_Impl_","lighten",0x50919203,"vision.ds._Color.Color_Impl_.lighten","vision/ds/Color.hx",523,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_535_invert,"vision.ds._Color.Color_Impl_","invert",0x5fce3452,"vision.ds._Color.Color_Impl_.invert","vision/ds/Color.hx",535,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_551_setRGBA,"vision.ds._Color.Color_Impl_","setRGBA",0x47c2f49a,"vision.ds._Color.Color_Impl_.setRGBA","vision/ds/Color.hx",551,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_568_setRGBAFloat,"vision.ds._Color.Color_Impl_","setRGBAFloat",0x95c252a2,"vision.ds._Color.Color_Impl_.setRGBAFloat","vision/ds/Color.hx",568,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_586_setCMYK,"vision.ds._Color.Color_Impl_","setCMYK",0x3ddd62e2,"vision.ds._Color.Color_Impl_.setCMYK","vision/ds/Color.hx",586,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_603_setHSB,"vision.ds._Color.Color_Impl_","setHSB",0x2f5c0db1,"vision.ds._Color.Color_Impl_.setHSB","vision/ds/Color.hx",603,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_618_setHSL,"vision.ds._Color.Color_Impl_","setHSL",0x2f5c0dbb,"vision.ds._Color.Color_Impl_.setHSL","vision/ds/Color.hx",618,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_627_setHSChromaMatch,"vision.ds._Color.Color_Impl_","setHSChromaMatch",0x4ea819fe,"vision.ds._Color.Color_Impl_.setHSChromaMatch","vision/ds/Color.hx",627,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_654_grayscale,"vision.ds._Color.Color_Impl_","grayscale",0xe779280b,"vision.ds._Color.Color_Impl_.grayscale","vision/ds/Color.hx",654,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_664_blackOrWhite,"vision.ds._Color.Color_Impl_","blackOrWhite",0x00f454c3,"vision.ds._Color.Color_Impl_.blackOrWhite","vision/ds/Color.hx",664,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_676__new,"vision.ds._Color.Color_Impl_","_new",0xeb495b9d,"vision.ds._Color.Color_Impl_._new","vision/ds/Color.hx",676,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_684_getThis,"vision.ds._Color.Color_Impl_","getThis",0x562cfd58,"vision.ds._Color.Color_Impl_.getThis","vision/ds/Color.hx",684,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_688_validate,"vision.ds._Color.Color_Impl_","validate",0xa6b3e4d2,"vision.ds._Color.Color_Impl_.validate","vision/ds/Color.hx",688,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_695_get_red,"vision.ds._Color.Color_Impl_","get_red",0x5d79e92c,"vision.ds._Color.Color_Impl_.get_red","vision/ds/Color.hx",695,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_699_get_green,"vision.ds._Color.Color_Impl_","get_green",0xd1d80b5e,"vision.ds._Color.Color_Impl_.get_green","vision/ds/Color.hx",699,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_703_get_blue,"vision.ds._Color.Color_Impl_","get_blue",0x62a4125f,"vision.ds._Color.Color_Impl_.get_blue","vision/ds/Color.hx",703,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_707_get_alpha,"vision.ds._Color.Color_Impl_","get_alpha",0x5981a3f9,"vision.ds._Color.Color_Impl_.get_alpha","vision/ds/Color.hx",707,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_711_get_redFloat,"vision.ds._Color.Color_Impl_","get_redFloat",0x80718cd0,"vision.ds._Color.Color_Impl_.get_redFloat","vision/ds/Color.hx",711,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_715_get_greenFloat,"vision.ds._Color.Color_Impl_","get_greenFloat",0x9770355e,"vision.ds._Color.Color_Impl_.get_greenFloat","vision/ds/Color.hx",715,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_719_get_blueFloat,"vision.ds._Color.Color_Impl_","get_blueFloat",0x89062abd,"vision.ds._Color.Color_Impl_.get_blueFloat","vision/ds/Color.hx",719,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_723_get_alphaFloat,"vision.ds._Color.Color_Impl_","get_alphaFloat",0xe3508ae3,"vision.ds._Color.Color_Impl_.get_alphaFloat","vision/ds/Color.hx",723,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_726_set_red,"vision.ds._Color.Color_Impl_","set_red",0x507b7a38,"vision.ds._Color.Color_Impl_.set_red","vision/ds/Color.hx",726,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_733_set_green,"vision.ds._Color.Color_Impl_","set_green",0xb528f76a,"vision.ds._Color.Color_Impl_.set_green","vision/ds/Color.hx",733,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_740_set_blue,"vision.ds._Color.Color_Impl_","set_blue",0x11016bd3,"vision.ds._Color.Color_Impl_.set_blue","vision/ds/Color.hx",740,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_747_set_alpha,"vision.ds._Color.Color_Impl_","set_alpha",0x3cd29005,"vision.ds._Color.Color_Impl_.set_alpha","vision/ds/Color.hx",747,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_754_set_redFloat,"vision.ds._Color.Color_Impl_","set_redFloat",0x956ab044,"vision.ds._Color.Color_Impl_.set_redFloat","vision/ds/Color.hx",754,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_759_set_greenFloat,"vision.ds._Color.Color_Impl_","set_greenFloat",0xb7901dd2,"vision.ds._Color.Color_Impl_.set_greenFloat","vision/ds/Color.hx",759,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_764_set_blueFloat,"vision.ds._Color.Color_Impl_","set_blueFloat",0xce0c0cc9,"vision.ds._Color.Color_Impl_.set_blueFloat","vision/ds/Color.hx",764,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_769_set_alphaFloat,"vision.ds._Color.Color_Impl_","set_alphaFloat",0x03707357,"vision.ds._Color.Color_Impl_.set_alphaFloat","vision/ds/Color.hx",769,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_775_get_cyan,"vision.ds._Color.Color_Impl_","get_cyan",0x635714e8,"vision.ds._Color.Color_Impl_.get_cyan","vision/ds/Color.hx",775,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_779_get_magenta,"vision.ds._Color.Color_Impl_","get_magenta",0x54b55384,"vision.ds._Color.Color_Impl_.get_magenta","vision/ds/Color.hx",779,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_783_get_yellow,"vision.ds._Color.Color_Impl_","get_yellow",0x860eaa79,"vision.ds._Color.Color_Impl_.get_yellow","vision/ds/Color.hx",783,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_787_get_black,"vision.ds._Color.Color_Impl_","get_black",0xecdcd25a,"vision.ds._Color.Color_Impl_.get_black","vision/ds/Color.hx",787,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_790_set_cyan,"vision.ds._Color.Color_Impl_","set_cyan",0x11b46e5c,"vision.ds._Color.Color_Impl_.set_cyan","vision/ds/Color.hx",790,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_795_set_magenta,"vision.ds._Color.Color_Impl_","set_magenta",0x5f225a90,"vision.ds._Color.Color_Impl_.set_magenta","vision/ds/Color.hx",795,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_800_set_yellow,"vision.ds._Color.Color_Impl_","set_yellow",0x898c48ed,"vision.ds._Color.Color_Impl_.set_yellow","vision/ds/Color.hx",800,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_805_set_black,"vision.ds._Color.Color_Impl_","set_black",0xd02dbe66,"vision.ds._Color.Color_Impl_.set_black","vision/ds/Color.hx",805,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_810_get_hue,"vision.ds._Color.Color_Impl_","get_hue",0x5d726093,"vision.ds._Color.Color_Impl_.get_hue","vision/ds/Color.hx",810,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_821_get_brightness,"vision.ds._Color.Color_Impl_","get_brightness",0x2585ff56,"vision.ds._Color.Color_Impl_.get_brightness","vision/ds/Color.hx",821,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_825_get_saturation,"vision.ds._Color.Color_Impl_","get_saturation",0xb6b64557,"vision.ds._Color.Color_Impl_.get_saturation","vision/ds/Color.hx",825,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_829_get_lightness,"vision.ds._Color.Color_Impl_","get_lightness",0x857c1a88,"vision.ds._Color.Color_Impl_.get_lightness","vision/ds/Color.hx",829,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_832_set_hue,"vision.ds._Color.Color_Impl_","set_hue",0x5073f19f,"vision.ds._Color.Color_Impl_.set_hue","vision/ds/Color.hx",832,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_837_set_saturation,"vision.ds._Color.Color_Impl_","set_saturation",0xd6d62dcb,"vision.ds._Color.Color_Impl_.set_saturation","vision/ds/Color.hx",837,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_842_set_brightness,"vision.ds._Color.Color_Impl_","set_brightness",0x45a5e7ca,"vision.ds._Color.Color_Impl_.set_brightness","vision/ds/Color.hx",842,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_847_set_lightness,"vision.ds._Color.Color_Impl_","set_lightness",0xca81fc94,"vision.ds._Color.Color_Impl_.set_lightness","vision/ds/Color.hx",847,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_852_set_rgb,"vision.ds._Color.Color_Impl_","set_rgb",0x507b7bf4,"vision.ds._Color.Color_Impl_.set_rgb","vision/ds/Color.hx",852,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_859_get_rgb,"vision.ds._Color.Color_Impl_","get_rgb",0x5d79eae8,"vision.ds._Color.Color_Impl_.get_rgb","vision/ds/Color.hx",859,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_863_maxColor,"vision.ds._Color.Color_Impl_","maxColor",0x9649d85b,"vision.ds._Color.Color_Impl_.maxColor","vision/ds/Color.hx",863,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_867_minColor,"vision.ds._Color.Color_Impl_","minColor",0xe363f2ad,"vision.ds._Color.Color_Impl_.minColor","vision/ds/Color.hx",867,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_871_boundChannel,"vision.ds._Color.Color_Impl_","boundChannel",0xdcc8fe61,"vision.ds._Color.Color_Impl_.boundChannel","vision/ds/Color.hx",871,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_878_toString,"vision.ds._Color.Color_Impl_","toString",0xda3ee4e8,"vision.ds._Color.Color_Impl_.toString","vision/ds/Color.hx",878,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_883_toInt,"vision.ds._Color.Color_Impl_","toInt",0x0ce4ec78,"vision.ds._Color.Color_Impl_.toInt","vision/ds/Color.hx",883,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_892_color_greater_than_color,"vision.ds._Color.Color_Impl_","color_greater_than_color",0x3dc0ea02,"vision.ds._Color.Color_Impl_.color_greater_than_color","vision/ds/Color.hx",892,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_897_color_greater_than_int,"vision.ds._Color.Color_Impl_","color_greater_than_int",0x5256cfce,"vision.ds._Color.Color_Impl_.color_greater_than_int","vision/ds/Color.hx",897,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_902_int_greater_than_color,"vision.ds._Color.Color_Impl_","int_greater_than_color",0x9c4b6ef6,"vision.ds._Color.Color_Impl_.int_greater_than_color","vision/ds/Color.hx",902,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_907_color_greater_than_float,"vision.ds._Color.Color_Impl_","color_greater_than_float",0xf5fb3e3b,"vision.ds._Color.Color_Impl_.color_greater_than_float","vision/ds/Color.hx",907,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_912_float_greater_than_color,"vision.ds._Color.Color_Impl_","float_greater_than_color",0xa433bd69,"vision.ds._Color.Color_Impl_.float_greater_than_color","vision/ds/Color.hx",912,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_917_color_greater_than_equal_color,"vision.ds._Color.Color_Impl_","color_greater_than_equal_color",0x18468137,"vision.ds._Color.Color_Impl_.color_greater_than_equal_color","vision/ds/Color.hx",917,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_922_color_greater_than_equal_int,"vision.ds._Color.Color_Impl_","color_greater_than_equal_int",0xc888bfc3,"vision.ds._Color.Color_Impl_.color_greater_than_equal_int","vision/ds/Color.hx",922,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_927_int_greater_than_equal_color,"vision.ds._Color.Color_Impl_","int_greater_than_equal_color",0xae01352b,"vision.ds._Color.Color_Impl_.int_greater_than_equal_color","vision/ds/Color.hx",927,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_932_color_greater_than_equal_float,"vision.ds._Color.Color_Impl_","color_greater_than_equal_float",0xd080d570,"vision.ds._Color.Color_Impl_.color_greater_than_equal_float","vision/ds/Color.hx",932,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_937_float_greater_than_equal_color,"vision.ds._Color.Color_Impl_","float_greater_than_equal_color",0xcc3c5bde,"vision.ds._Color.Color_Impl_.float_greater_than_equal_color","vision/ds/Color.hx",937,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_942_color_less_than_color,"vision.ds._Color.Color_Impl_","color_less_than_color",0x967f8d53,"vision.ds._Color.Color_Impl_.color_less_than_color","vision/ds/Color.hx",942,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_947_color_less_than_int,"vision.ds._Color.Color_Impl_","color_less_than_int",0xa62f4cdf,"vision.ds._Color.Color_Impl_.color_less_than_int","vision/ds/Color.hx",947,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_952_int_less_than_color,"vision.ds._Color.Color_Impl_","int_less_than_color",0xa63b27df,"vision.ds._Color.Color_Impl_.int_less_than_color","vision/ds/Color.hx",952,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_957_color_less_than_float,"vision.ds._Color.Color_Impl_","color_less_than_float",0x4eb9e18c,"vision.ds._Color.Color_Impl_.color_less_than_float","vision/ds/Color.hx",957,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_962_float_less_than_color,"vision.ds._Color.Color_Impl_","float_less_than_color",0x0beba38c,"vision.ds._Color.Color_Impl_.float_less_than_color","vision/ds/Color.hx",962,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_967_color_less_than_equal_color,"vision.ds._Color.Color_Impl_","color_less_than_equal_color",0xe66bf748,"vision.ds._Color.Color_Impl_.color_less_than_equal_color","vision/ds/Color.hx",967,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_972_color_less_than_equal_int,"vision.ds._Color.Color_Impl_","color_less_than_equal_int",0x4c49df94,"vision.ds._Color.Color_Impl_.color_less_than_equal_int","vision/ds/Color.hx",972,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_977_int_less_than_equal_color,"vision.ds._Color.Color_Impl_","int_less_than_equal_color",0x9b9402d4,"vision.ds._Color.Color_Impl_.int_less_than_equal_color","vision/ds/Color.hx",977,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_982_color_less_than_equal_float,"vision.ds._Color.Color_Impl_","color_less_than_equal_float",0x9ea64b81,"vision.ds._Color.Color_Impl_.color_less_than_equal_float","vision/ds/Color.hx",982,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_987_float_less_than_equal_color,"vision.ds._Color.Color_Impl_","float_less_than_equal_color",0x4f53fe41,"vision.ds._Color.Color_Impl_.float_less_than_equal_color","vision/ds/Color.hx",987,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_992_color_equal_color,"vision.ds._Color.Color_Impl_","color_equal_color",0xe0a0f380,"vision.ds._Color.Color_Impl_.color_equal_color","vision/ds/Color.hx",992,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_997_color_equal_int,"vision.ds._Color.Color_Impl_","color_equal_int",0xf618ddcc,"vision.ds._Color.Color_Impl_.color_equal_int","vision/ds/Color.hx",997,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1002_int_equal_color,"vision.ds._Color.Color_Impl_","int_equal_color",0xf241580c,"vision.ds._Color.Color_Impl_.int_equal_color","vision/ds/Color.hx",1002,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1007_color_equal_float,"vision.ds._Color.Color_Impl_","color_equal_float",0x98db47b9,"vision.ds._Color.Color_Impl_.color_equal_float","vision/ds/Color.hx",1007,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1012_float_equal_color,"vision.ds._Color.Color_Impl_","float_equal_color",0xb8e53939,"vision.ds._Color.Color_Impl_.float_equal_color","vision/ds/Color.hx",1012,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1017_color_not_equal_color,"vision.ds._Color.Color_Impl_","color_not_equal_color",0xa5767f14,"vision.ds._Color.Color_Impl_.color_not_equal_color","vision/ds/Color.hx",1017,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1022_color_not_equal_int,"vision.ds._Color.Color_Impl_","color_not_equal_int",0x7a129c60,"vision.ds._Color.Color_Impl_.color_not_equal_int","vision/ds/Color.hx",1022,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1027_int_not_equal_color,"vision.ds._Color.Color_Impl_","int_not_equal_color",0xb53219a0,"vision.ds._Color.Color_Impl_.int_not_equal_color","vision/ds/Color.hx",1027,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1032_color_not_equal_float,"vision.ds._Color.Color_Impl_","color_not_equal_float",0x5db0d34d,"vision.ds._Color.Color_Impl_.color_not_equal_float","vision/ds/Color.hx",1032,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1037_float_not_equal_color,"vision.ds._Color.Color_Impl_","float_not_equal_color",0x1ae2954d,"vision.ds._Color.Color_Impl_.float_not_equal_color","vision/ds/Color.hx",1037,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1042_color_bitwise_and_color,"vision.ds._Color.Color_Impl_","color_bitwise_and_color",0x2bef1455,"vision.ds._Color.Color_Impl_.color_bitwise_and_color","vision/ds/Color.hx",1042,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1047_color_bitwise_and_int,"vision.ds._Color.Color_Impl_","color_bitwise_and_int",0xe4dfaf61,"vision.ds._Color.Color_Impl_.color_bitwise_and_int","vision/ds/Color.hx",1047,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1052_int_bitwise_and_color,"vision.ds._Color.Color_Impl_","int_bitwise_and_color",0x55af69e1,"vision.ds._Color.Color_Impl_.int_bitwise_and_color","vision/ds/Color.hx",1052,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1057_color_bitwise_or_color,"vision.ds._Color.Color_Impl_","color_bitwise_or_color",0x77b921ad,"vision.ds._Color.Color_Impl_.color_bitwise_or_color","vision/ds/Color.hx",1057,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1062_color_bitwise_or_int,"vision.ds._Color.Color_Impl_","color_bitwise_or_int",0x863736b9,"vision.ds._Color.Color_Impl_.color_bitwise_or_int","vision/ds/Color.hx",1062,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1067_int_bitwise_or_color,"vision.ds._Color.Color_Impl_","int_bitwise_or_color",0x2c24c1a1,"vision.ds._Color.Color_Impl_.int_bitwise_or_color","vision/ds/Color.hx",1067,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1072_color_bitwise_xor_color,"vision.ds._Color.Color_Impl_","color_bitwise_xor_color",0x9efe7419,"vision.ds._Color.Color_Impl_.color_bitwise_xor_color","vision/ds/Color.hx",1072,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1077_color_bitwise_xor_int,"vision.ds._Color.Color_Impl_","color_bitwise_xor_int",0x1744d625,"vision.ds._Color.Color_Impl_.color_bitwise_xor_int","vision/ds/Color.hx",1077,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1082_int_bitwise_xor_color,"vision.ds._Color.Color_Impl_","int_bitwise_xor_color",0xc8bec9a5,"vision.ds._Color.Color_Impl_.int_bitwise_xor_color","vision/ds/Color.hx",1082,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1087_color_bitwise_left_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_left_shift_color",0xb84338d4,"vision.ds._Color.Color_Impl_.color_bitwise_left_shift_color","vision/ds/Color.hx",1087,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1092_color_bitwise_left_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_left_shift_int",0xfa496620,"vision.ds._Color.Color_Impl_.color_bitwise_left_shift_int","vision/ds/Color.hx",1092,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1097_int_bitwise_left_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_left_shift_color",0x4dfdecc8,"vision.ds._Color.Color_Impl_.int_bitwise_left_shift_color","vision/ds/Color.hx",1097,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1102_color_bitwise_right_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_right_shift_color",0xc60d561d,"vision.ds._Color.Color_Impl_.color_bitwise_right_shift_color","vision/ds/Color.hx",1102,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1107_color_bitwise_right_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_right_shift_int",0x17786f29,"vision.ds._Color.Color_Impl_.color_bitwise_right_shift_int","vision/ds/Color.hx",1107,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1112_int_bitwise_right_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_right_shift_color",0x33b017a9,"vision.ds._Color.Color_Impl_.int_bitwise_right_shift_color","vision/ds/Color.hx",1112,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1117_color_bitwise_unsigned_right_shift_color,"vision.ds._Color.Color_Impl_","color_bitwise_unsigned_right_shift_color",0xbde45a9f,"vision.ds._Color.Color_Impl_.color_bitwise_unsigned_right_shift_color","vision/ds/Color.hx",1117,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1122_color_bitwise_unsigned_right_shift_int,"vision.ds._Color.Color_Impl_","color_bitwise_unsigned_right_shift_int",0x26edef2b,"vision.ds._Color.Color_Impl_.color_bitwise_unsigned_right_shift_int","vision/ds/Color.hx",1122,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_1127_int_bitwise_unsigned_right_shift_color,"vision.ds._Color.Color_Impl_","int_bitwise_unsigned_right_shift_color",0xd91b0793,"vision.ds._Color.Color_Impl_.int_bitwise_unsigned_right_shift_color","vision/ds/Color.hx",1127,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_19_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",19,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_24_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",24,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_29_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",29,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_34_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",34,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_39_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",39,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_44_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",44,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_49_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",49,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_54_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",54,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_59_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",59,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_64_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",64,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_69_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",69,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_74_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",74,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_79_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",79,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_84_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",84,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_89_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",89,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_94_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",94,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_99_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",99,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_104_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",104,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_109_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",109,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_114_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",114,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_119_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",119,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_124_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",124,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_129_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",129,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_134_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",134,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_139_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",139,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_144_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",144,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_149_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",149,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_154_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",154,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_159_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",159,0x1017c334)
HX_LOCAL_STACK_FRAME(_hx_pos_9279add21e623cc0_201_boot,"vision.ds._Color.Color_Impl_","boot",0xed45ca6e,"vision.ds._Color.Color_Impl_.boot","vision/ds/Color.hx",201,0x1017c334)
namespace vision{
namespace ds{
namespace _Color{

void Color_Impl__obj::__construct() { }

Dynamic Color_Impl__obj::__CreateEmpty() { return new Color_Impl__obj; }

void *Color_Impl__obj::_hx_vtable = 0;

Dynamic Color_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Color_Impl__obj > _hx_result = new Color_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Color_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19955d80;
}

int Color_Impl__obj::TRANSPARENT;

int Color_Impl__obj::WHITE;

int Color_Impl__obj::GRAY;

int Color_Impl__obj::BLACK;

int Color_Impl__obj::GREEN;

int Color_Impl__obj::YELLOW;

int Color_Impl__obj::ORANGE;

int Color_Impl__obj::RED;

int Color_Impl__obj::PURPLE;

int Color_Impl__obj::BLUE;

int Color_Impl__obj::BROWN;

int Color_Impl__obj::PINK;

int Color_Impl__obj::MAGENTA;

int Color_Impl__obj::CYAN;

int Color_Impl__obj::SILVER;

int Color_Impl__obj::GOLD;

int Color_Impl__obj::OLIVE;

int Color_Impl__obj::MAROON;

int Color_Impl__obj::BORDEAUX;

int Color_Impl__obj::NAVY;

int Color_Impl__obj::TEAL;

int Color_Impl__obj::FUCHSIA;

int Color_Impl__obj::AQUA;

int Color_Impl__obj::LIME;

int Color_Impl__obj::CHARCOAL;

int Color_Impl__obj::ONYX;

int Color_Impl__obj::JET;

int Color_Impl__obj::JET_BLACK;

int Color_Impl__obj::ROYAL_BLUE;

 ::EReg Color_Impl__obj::COLOR_REGEX;

int Color_Impl__obj::fromInt(int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_210_fromInt)
HXDLIN( 210)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,fromInt,return )

int Color_Impl__obj::fromRGBA(int Red,int Green,int Blue,::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_222_fromRGBA)
HXLINE( 223)		int color = 0;
HXLINE( 224)		{
HXLINE( 224)			color = (color & -16711681);
HXDLIN( 224)			int color1;
HXDLIN( 224)			if ((Red > 255)) {
HXLINE( 224)				color1 = 255;
            			}
            			else {
HXLINE( 224)				if ((Red < 0)) {
HXLINE( 224)					color1 = 0;
            				}
            				else {
HXLINE( 224)					color1 = Red;
            				}
            			}
HXDLIN( 224)			color = (color | (color1 << 16));
            		}
HXDLIN( 224)		{
HXLINE( 224)			color = (color & -65281);
HXDLIN( 224)			int color2;
HXDLIN( 224)			if ((Green > 255)) {
HXLINE( 224)				color2 = 255;
            			}
            			else {
HXLINE( 224)				if ((Green < 0)) {
HXLINE( 224)					color2 = 0;
            				}
            				else {
HXLINE( 224)					color2 = Green;
            				}
            			}
HXDLIN( 224)			color = (color | (color2 << 8));
            		}
HXDLIN( 224)		{
HXLINE( 224)			color = (color & -256);
HXDLIN( 224)			int color3;
HXDLIN( 224)			if ((Blue > 255)) {
HXLINE( 224)				color3 = 255;
            			}
            			else {
HXLINE( 224)				if ((Blue < 0)) {
HXLINE( 224)					color3 = 0;
            				}
            				else {
HXLINE( 224)					color3 = Blue;
            				}
            			}
HXDLIN( 224)			color = (color | color3);
            		}
HXDLIN( 224)		{
HXLINE( 224)			color = (color & 16777215);
HXDLIN( 224)			int color4;
HXDLIN( 224)			if ((Alpha > 255)) {
HXLINE( 224)				color4 = 255;
            			}
            			else {
HXLINE( 224)				if ((Alpha < 0)) {
HXLINE( 224)					color4 = 0;
            				}
            				else {
HXLINE( 224)					color4 = Alpha;
            				}
            			}
HXDLIN( 224)			color = (color | (color4 << 24));
            		}
HXDLIN( 224)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromRGBA,return )

int Color_Impl__obj::from8Bit(int Value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_233_from8Bit)
HXLINE( 234)		int color = 0;
HXLINE( 235)		{
HXLINE( 235)			color = (color & -16711681);
HXDLIN( 235)			int color1;
HXDLIN( 235)			if ((Value > 255)) {
HXLINE( 235)				color1 = 255;
            			}
            			else {
HXLINE( 235)				if ((Value < 0)) {
HXLINE( 235)					color1 = 0;
            				}
            				else {
HXLINE( 235)					color1 = Value;
            				}
            			}
HXDLIN( 235)			color = (color | (color1 << 16));
            		}
HXDLIN( 235)		{
HXLINE( 235)			color = (color & -65281);
HXDLIN( 235)			int color2;
HXDLIN( 235)			if ((Value > 255)) {
HXLINE( 235)				color2 = 255;
            			}
            			else {
HXLINE( 235)				if ((Value < 0)) {
HXLINE( 235)					color2 = 0;
            				}
            				else {
HXLINE( 235)					color2 = Value;
            				}
            			}
HXDLIN( 235)			color = (color | (color2 << 8));
            		}
HXDLIN( 235)		{
HXLINE( 235)			color = (color & -256);
HXDLIN( 235)			int color3;
HXDLIN( 235)			if ((Value > 255)) {
HXLINE( 235)				color3 = 255;
            			}
            			else {
HXLINE( 235)				if ((Value < 0)) {
HXLINE( 235)					color3 = 0;
            				}
            				else {
HXLINE( 235)					color3 = Value;
            				}
            			}
HXDLIN( 235)			color = (color | color3);
            		}
HXDLIN( 235)		{
HXLINE( 235)			color = (color & 16777215);
HXDLIN( 235)			color = (color | 16777216);
            		}
HXDLIN( 235)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,from8Bit,return )

int Color_Impl__obj::fromRGBAFloat(Float Red,Float Green,Float Blue,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_247_fromRGBAFloat)
HXLINE( 248)		int color = 0;
HXLINE( 249)		{
HXLINE( 249)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 249)			color = (color & -16711681);
HXDLIN( 249)			int color1;
HXDLIN( 249)			if ((value > 255)) {
HXLINE( 249)				color1 = 255;
            			}
            			else {
HXLINE( 249)				if ((value < 0)) {
HXLINE( 249)					color1 = 0;
            				}
            				else {
HXLINE( 249)					color1 = value;
            				}
            			}
HXDLIN( 249)			color = (color | (color1 << 16));
            		}
HXDLIN( 249)		{
HXLINE( 249)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 249)			color = (color & -65281);
HXDLIN( 249)			int color2;
HXDLIN( 249)			if ((value1 > 255)) {
HXLINE( 249)				color2 = 255;
            			}
            			else {
HXLINE( 249)				if ((value1 < 0)) {
HXLINE( 249)					color2 = 0;
            				}
            				else {
HXLINE( 249)					color2 = value1;
            				}
            			}
HXDLIN( 249)			color = (color | (color2 << 8));
            		}
HXDLIN( 249)		{
HXLINE( 249)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 249)			color = (color & -256);
HXDLIN( 249)			int color3;
HXDLIN( 249)			if ((value2 > 255)) {
HXLINE( 249)				color3 = 255;
            			}
            			else {
HXLINE( 249)				if ((value2 < 0)) {
HXLINE( 249)					color3 = 0;
            				}
            				else {
HXLINE( 249)					color3 = value2;
            				}
            			}
HXDLIN( 249)			color = (color | color3);
            		}
HXDLIN( 249)		{
HXLINE( 249)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 249)			color = (color & 16777215);
HXDLIN( 249)			int color4;
HXDLIN( 249)			if ((value3 > 255)) {
HXLINE( 249)				color4 = 255;
            			}
            			else {
HXLINE( 249)				if ((value3 < 0)) {
HXLINE( 249)					color4 = 0;
            				}
            				else {
HXLINE( 249)					color4 = value3;
            				}
            			}
HXDLIN( 249)			color = (color | (color4 << 24));
            		}
HXDLIN( 249)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromRGBAFloat,return )

int Color_Impl__obj::fromCMYK(Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_262_fromCMYK)
HXLINE( 263)		int color = 0;
HXLINE( 264)		{
HXLINE( 264)			Float value = ((( (Float)(1) ) - Cyan) * (( (Float)(1) ) - Black));
HXDLIN( 264)			{
HXLINE( 264)				int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 264)				color = (color & -16711681);
HXDLIN( 264)				int color1;
HXDLIN( 264)				if ((value1 > 255)) {
HXLINE( 264)					color1 = 255;
            				}
            				else {
HXLINE( 264)					if ((value1 < 0)) {
HXLINE( 264)						color1 = 0;
            					}
            					else {
HXLINE( 264)						color1 = value1;
            					}
            				}
HXDLIN( 264)				color = (color | (color1 << 16));
            			}
            		}
HXDLIN( 264)		{
HXLINE( 264)			Float value2 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 264)			{
HXLINE( 264)				int value3 = ::Math_obj::round((value2 * ( (Float)(255) )));
HXDLIN( 264)				color = (color & -65281);
HXDLIN( 264)				int color2;
HXDLIN( 264)				if ((value3 > 255)) {
HXLINE( 264)					color2 = 255;
            				}
            				else {
HXLINE( 264)					if ((value3 < 0)) {
HXLINE( 264)						color2 = 0;
            					}
            					else {
HXLINE( 264)						color2 = value3;
            					}
            				}
HXDLIN( 264)				color = (color | (color2 << 8));
            			}
            		}
HXDLIN( 264)		{
HXLINE( 264)			Float value4 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 264)			{
HXLINE( 264)				int value5 = ::Math_obj::round((value4 * ( (Float)(255) )));
HXDLIN( 264)				color = (color & -256);
HXDLIN( 264)				int color3;
HXDLIN( 264)				if ((value5 > 255)) {
HXLINE( 264)					color3 = 255;
            				}
            				else {
HXLINE( 264)					if ((value5 < 0)) {
HXLINE( 264)						color3 = 0;
            					}
            					else {
HXLINE( 264)						color3 = value5;
            					}
            				}
HXDLIN( 264)				color = (color | color3);
            			}
            		}
HXDLIN( 264)		{
HXLINE( 264)			int value6 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 264)			color = (color & 16777215);
HXDLIN( 264)			int color4;
HXDLIN( 264)			if ((value6 > 255)) {
HXLINE( 264)				color4 = 255;
            			}
            			else {
HXLINE( 264)				if ((value6 < 0)) {
HXLINE( 264)					color4 = 0;
            				}
            				else {
HXLINE( 264)					color4 = value6;
            				}
            			}
HXDLIN( 264)			color = (color | (color4 << 24));
            		}
HXDLIN( 264)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,fromCMYK,return )

int Color_Impl__obj::fromHSB(Float Hue,Float Saturation,Float Brightness,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_276_fromHSB)
HXLINE( 277)		int color = 0;
HXLINE( 278)		Float chroma = (Brightness * Saturation);
HXDLIN( 278)		Float match = (Brightness - chroma);
HXDLIN( 278)		Float Hue1 = Hue;
HXDLIN( 278)		Float Chroma = chroma;
HXDLIN( 278)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 278)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 278)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 278)		Chroma = (Chroma + match);
HXDLIN( 278)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 278)				{
HXLINE( 278)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color1;
HXDLIN( 278)					if ((value > 255)) {
HXLINE( 278)						color1 = 255;
            					}
            					else {
HXLINE( 278)						if ((value < 0)) {
HXLINE( 278)							color1 = 0;
            						}
            						else {
HXLINE( 278)							color1 = value;
            						}
            					}
HXDLIN( 278)					color = (color | (color1 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color2;
HXDLIN( 278)					if ((value1 > 255)) {
HXLINE( 278)						color2 = 255;
            					}
            					else {
HXLINE( 278)						if ((value1 < 0)) {
HXLINE( 278)							color2 = 0;
            						}
            						else {
HXLINE( 278)							color2 = value1;
            						}
            					}
HXDLIN( 278)					color = (color | (color2 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color3;
HXDLIN( 278)					if ((value2 > 255)) {
HXLINE( 278)						color3 = 255;
            					}
            					else {
HXLINE( 278)						if ((value2 < 0)) {
HXLINE( 278)							color3 = 0;
            						}
            						else {
HXLINE( 278)							color3 = value2;
            						}
            					}
HXDLIN( 278)					color = (color | color3);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color4;
HXDLIN( 278)					if ((value3 > 255)) {
HXLINE( 278)						color4 = 255;
            					}
            					else {
HXLINE( 278)						if ((value3 < 0)) {
HXLINE( 278)							color4 = 0;
            						}
            						else {
HXLINE( 278)							color4 = value3;
            						}
            					}
HXDLIN( 278)					color = (color | (color4 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 278)				{
HXLINE( 278)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color5;
HXDLIN( 278)					if ((value4 > 255)) {
HXLINE( 278)						color5 = 255;
            					}
            					else {
HXLINE( 278)						if ((value4 < 0)) {
HXLINE( 278)							color5 = 0;
            						}
            						else {
HXLINE( 278)							color5 = value4;
            						}
            					}
HXDLIN( 278)					color = (color | (color5 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color6;
HXDLIN( 278)					if ((value5 > 255)) {
HXLINE( 278)						color6 = 255;
            					}
            					else {
HXLINE( 278)						if ((value5 < 0)) {
HXLINE( 278)							color6 = 0;
            						}
            						else {
HXLINE( 278)							color6 = value5;
            						}
            					}
HXDLIN( 278)					color = (color | (color6 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color7;
HXDLIN( 278)					if ((value6 > 255)) {
HXLINE( 278)						color7 = 255;
            					}
            					else {
HXLINE( 278)						if ((value6 < 0)) {
HXLINE( 278)							color7 = 0;
            						}
            						else {
HXLINE( 278)							color7 = value6;
            						}
            					}
HXDLIN( 278)					color = (color | color7);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color8;
HXDLIN( 278)					if ((value7 > 255)) {
HXLINE( 278)						color8 = 255;
            					}
            					else {
HXLINE( 278)						if ((value7 < 0)) {
HXLINE( 278)							color8 = 0;
            						}
            						else {
HXLINE( 278)							color8 = value7;
            						}
            					}
HXDLIN( 278)					color = (color | (color8 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 278)				{
HXLINE( 278)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color9;
HXDLIN( 278)					if ((value8 > 255)) {
HXLINE( 278)						color9 = 255;
            					}
            					else {
HXLINE( 278)						if ((value8 < 0)) {
HXLINE( 278)							color9 = 0;
            						}
            						else {
HXLINE( 278)							color9 = value8;
            						}
            					}
HXDLIN( 278)					color = (color | (color9 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color10;
HXDLIN( 278)					if ((value9 > 255)) {
HXLINE( 278)						color10 = 255;
            					}
            					else {
HXLINE( 278)						if ((value9 < 0)) {
HXLINE( 278)							color10 = 0;
            						}
            						else {
HXLINE( 278)							color10 = value9;
            						}
            					}
HXDLIN( 278)					color = (color | (color10 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color11;
HXDLIN( 278)					if ((value10 > 255)) {
HXLINE( 278)						color11 = 255;
            					}
            					else {
HXLINE( 278)						if ((value10 < 0)) {
HXLINE( 278)							color11 = 0;
            						}
            						else {
HXLINE( 278)							color11 = value10;
            						}
            					}
HXDLIN( 278)					color = (color | color11);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color12;
HXDLIN( 278)					if ((value11 > 255)) {
HXLINE( 278)						color12 = 255;
            					}
            					else {
HXLINE( 278)						if ((value11 < 0)) {
HXLINE( 278)							color12 = 0;
            						}
            						else {
HXLINE( 278)							color12 = value11;
            						}
            					}
HXDLIN( 278)					color = (color | (color12 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 278)				{
HXLINE( 278)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color13;
HXDLIN( 278)					if ((value12 > 255)) {
HXLINE( 278)						color13 = 255;
            					}
            					else {
HXLINE( 278)						if ((value12 < 0)) {
HXLINE( 278)							color13 = 0;
            						}
            						else {
HXLINE( 278)							color13 = value12;
            						}
            					}
HXDLIN( 278)					color = (color | (color13 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color14;
HXDLIN( 278)					if ((value13 > 255)) {
HXLINE( 278)						color14 = 255;
            					}
            					else {
HXLINE( 278)						if ((value13 < 0)) {
HXLINE( 278)							color14 = 0;
            						}
            						else {
HXLINE( 278)							color14 = value13;
            						}
            					}
HXDLIN( 278)					color = (color | (color14 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color15;
HXDLIN( 278)					if ((value14 > 255)) {
HXLINE( 278)						color15 = 255;
            					}
            					else {
HXLINE( 278)						if ((value14 < 0)) {
HXLINE( 278)							color15 = 0;
            						}
            						else {
HXLINE( 278)							color15 = value14;
            						}
            					}
HXDLIN( 278)					color = (color | color15);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color16;
HXDLIN( 278)					if ((value15 > 255)) {
HXLINE( 278)						color16 = 255;
            					}
            					else {
HXLINE( 278)						if ((value15 < 0)) {
HXLINE( 278)							color16 = 0;
            						}
            						else {
HXLINE( 278)							color16 = value15;
            						}
            					}
HXDLIN( 278)					color = (color | (color16 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 278)				{
HXLINE( 278)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color17;
HXDLIN( 278)					if ((value16 > 255)) {
HXLINE( 278)						color17 = 255;
            					}
            					else {
HXLINE( 278)						if ((value16 < 0)) {
HXLINE( 278)							color17 = 0;
            						}
            						else {
HXLINE( 278)							color17 = value16;
            						}
            					}
HXDLIN( 278)					color = (color | (color17 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color18;
HXDLIN( 278)					if ((value17 > 255)) {
HXLINE( 278)						color18 = 255;
            					}
            					else {
HXLINE( 278)						if ((value17 < 0)) {
HXLINE( 278)							color18 = 0;
            						}
            						else {
HXLINE( 278)							color18 = value17;
            						}
            					}
HXDLIN( 278)					color = (color | (color18 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color19;
HXDLIN( 278)					if ((value18 > 255)) {
HXLINE( 278)						color19 = 255;
            					}
            					else {
HXLINE( 278)						if ((value18 < 0)) {
HXLINE( 278)							color19 = 0;
            						}
            						else {
HXLINE( 278)							color19 = value18;
            						}
            					}
HXDLIN( 278)					color = (color | color19);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color20;
HXDLIN( 278)					if ((value19 > 255)) {
HXLINE( 278)						color20 = 255;
            					}
            					else {
HXLINE( 278)						if ((value19 < 0)) {
HXLINE( 278)							color20 = 0;
            						}
            						else {
HXLINE( 278)							color20 = value19;
            						}
            					}
HXDLIN( 278)					color = (color | (color20 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 278)				{
HXLINE( 278)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -16711681);
HXDLIN( 278)					int color21;
HXDLIN( 278)					if ((value20 > 255)) {
HXLINE( 278)						color21 = 255;
            					}
            					else {
HXLINE( 278)						if ((value20 < 0)) {
HXLINE( 278)							color21 = 0;
            						}
            						else {
HXLINE( 278)							color21 = value20;
            						}
            					}
HXDLIN( 278)					color = (color | (color21 << 16));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -65281);
HXDLIN( 278)					int color22;
HXDLIN( 278)					if ((value21 > 255)) {
HXLINE( 278)						color22 = 255;
            					}
            					else {
HXLINE( 278)						if ((value21 < 0)) {
HXLINE( 278)							color22 = 0;
            						}
            						else {
HXLINE( 278)							color22 = value21;
            						}
            					}
HXDLIN( 278)					color = (color | (color22 << 8));
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 278)					color = (color & -256);
HXDLIN( 278)					int color23;
HXDLIN( 278)					if ((value22 > 255)) {
HXLINE( 278)						color23 = 255;
            					}
            					else {
HXLINE( 278)						if ((value22 < 0)) {
HXLINE( 278)							color23 = 0;
            						}
            						else {
HXLINE( 278)							color23 = value22;
            						}
            					}
HXDLIN( 278)					color = (color | color23);
            				}
HXDLIN( 278)				{
HXLINE( 278)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 278)					color = (color & 16777215);
HXDLIN( 278)					int color24;
HXDLIN( 278)					if ((value23 > 255)) {
HXLINE( 278)						color24 = 255;
            					}
            					else {
HXLINE( 278)						if ((value23 < 0)) {
HXLINE( 278)							color24 = 0;
            						}
            						else {
HXLINE( 278)							color24 = value23;
            						}
            					}
HXDLIN( 278)					color = (color | (color24 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 278)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromHSB,return )

int Color_Impl__obj::fromHSL(Float Hue,Float Saturation,Float Lightness,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_290_fromHSL)
HXLINE( 291)		int color = 0;
HXLINE( 292)		Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * Lightness) - ( (Float)(1) )))) * Saturation);
HXDLIN( 292)		Float match = (Lightness - (chroma / ( (Float)(2) )));
HXDLIN( 292)		Float Hue1 = Hue;
HXDLIN( 292)		Float Chroma = chroma;
HXDLIN( 292)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 292)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 292)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 292)		Chroma = (Chroma + match);
HXDLIN( 292)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 292)				{
HXLINE( 292)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color1;
HXDLIN( 292)					if ((value > 255)) {
HXLINE( 292)						color1 = 255;
            					}
            					else {
HXLINE( 292)						if ((value < 0)) {
HXLINE( 292)							color1 = 0;
            						}
            						else {
HXLINE( 292)							color1 = value;
            						}
            					}
HXDLIN( 292)					color = (color | (color1 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color2;
HXDLIN( 292)					if ((value1 > 255)) {
HXLINE( 292)						color2 = 255;
            					}
            					else {
HXLINE( 292)						if ((value1 < 0)) {
HXLINE( 292)							color2 = 0;
            						}
            						else {
HXLINE( 292)							color2 = value1;
            						}
            					}
HXDLIN( 292)					color = (color | (color2 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color3;
HXDLIN( 292)					if ((value2 > 255)) {
HXLINE( 292)						color3 = 255;
            					}
            					else {
HXLINE( 292)						if ((value2 < 0)) {
HXLINE( 292)							color3 = 0;
            						}
            						else {
HXLINE( 292)							color3 = value2;
            						}
            					}
HXDLIN( 292)					color = (color | color3);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color4;
HXDLIN( 292)					if ((value3 > 255)) {
HXLINE( 292)						color4 = 255;
            					}
            					else {
HXLINE( 292)						if ((value3 < 0)) {
HXLINE( 292)							color4 = 0;
            						}
            						else {
HXLINE( 292)							color4 = value3;
            						}
            					}
HXDLIN( 292)					color = (color | (color4 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 292)				{
HXLINE( 292)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color5;
HXDLIN( 292)					if ((value4 > 255)) {
HXLINE( 292)						color5 = 255;
            					}
            					else {
HXLINE( 292)						if ((value4 < 0)) {
HXLINE( 292)							color5 = 0;
            						}
            						else {
HXLINE( 292)							color5 = value4;
            						}
            					}
HXDLIN( 292)					color = (color | (color5 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color6;
HXDLIN( 292)					if ((value5 > 255)) {
HXLINE( 292)						color6 = 255;
            					}
            					else {
HXLINE( 292)						if ((value5 < 0)) {
HXLINE( 292)							color6 = 0;
            						}
            						else {
HXLINE( 292)							color6 = value5;
            						}
            					}
HXDLIN( 292)					color = (color | (color6 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color7;
HXDLIN( 292)					if ((value6 > 255)) {
HXLINE( 292)						color7 = 255;
            					}
            					else {
HXLINE( 292)						if ((value6 < 0)) {
HXLINE( 292)							color7 = 0;
            						}
            						else {
HXLINE( 292)							color7 = value6;
            						}
            					}
HXDLIN( 292)					color = (color | color7);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color8;
HXDLIN( 292)					if ((value7 > 255)) {
HXLINE( 292)						color8 = 255;
            					}
            					else {
HXLINE( 292)						if ((value7 < 0)) {
HXLINE( 292)							color8 = 0;
            						}
            						else {
HXLINE( 292)							color8 = value7;
            						}
            					}
HXDLIN( 292)					color = (color | (color8 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 292)				{
HXLINE( 292)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color9;
HXDLIN( 292)					if ((value8 > 255)) {
HXLINE( 292)						color9 = 255;
            					}
            					else {
HXLINE( 292)						if ((value8 < 0)) {
HXLINE( 292)							color9 = 0;
            						}
            						else {
HXLINE( 292)							color9 = value8;
            						}
            					}
HXDLIN( 292)					color = (color | (color9 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color10;
HXDLIN( 292)					if ((value9 > 255)) {
HXLINE( 292)						color10 = 255;
            					}
            					else {
HXLINE( 292)						if ((value9 < 0)) {
HXLINE( 292)							color10 = 0;
            						}
            						else {
HXLINE( 292)							color10 = value9;
            						}
            					}
HXDLIN( 292)					color = (color | (color10 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color11;
HXDLIN( 292)					if ((value10 > 255)) {
HXLINE( 292)						color11 = 255;
            					}
            					else {
HXLINE( 292)						if ((value10 < 0)) {
HXLINE( 292)							color11 = 0;
            						}
            						else {
HXLINE( 292)							color11 = value10;
            						}
            					}
HXDLIN( 292)					color = (color | color11);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color12;
HXDLIN( 292)					if ((value11 > 255)) {
HXLINE( 292)						color12 = 255;
            					}
            					else {
HXLINE( 292)						if ((value11 < 0)) {
HXLINE( 292)							color12 = 0;
            						}
            						else {
HXLINE( 292)							color12 = value11;
            						}
            					}
HXDLIN( 292)					color = (color | (color12 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 292)				{
HXLINE( 292)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color13;
HXDLIN( 292)					if ((value12 > 255)) {
HXLINE( 292)						color13 = 255;
            					}
            					else {
HXLINE( 292)						if ((value12 < 0)) {
HXLINE( 292)							color13 = 0;
            						}
            						else {
HXLINE( 292)							color13 = value12;
            						}
            					}
HXDLIN( 292)					color = (color | (color13 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color14;
HXDLIN( 292)					if ((value13 > 255)) {
HXLINE( 292)						color14 = 255;
            					}
            					else {
HXLINE( 292)						if ((value13 < 0)) {
HXLINE( 292)							color14 = 0;
            						}
            						else {
HXLINE( 292)							color14 = value13;
            						}
            					}
HXDLIN( 292)					color = (color | (color14 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color15;
HXDLIN( 292)					if ((value14 > 255)) {
HXLINE( 292)						color15 = 255;
            					}
            					else {
HXLINE( 292)						if ((value14 < 0)) {
HXLINE( 292)							color15 = 0;
            						}
            						else {
HXLINE( 292)							color15 = value14;
            						}
            					}
HXDLIN( 292)					color = (color | color15);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color16;
HXDLIN( 292)					if ((value15 > 255)) {
HXLINE( 292)						color16 = 255;
            					}
            					else {
HXLINE( 292)						if ((value15 < 0)) {
HXLINE( 292)							color16 = 0;
            						}
            						else {
HXLINE( 292)							color16 = value15;
            						}
            					}
HXDLIN( 292)					color = (color | (color16 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 292)				{
HXLINE( 292)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color17;
HXDLIN( 292)					if ((value16 > 255)) {
HXLINE( 292)						color17 = 255;
            					}
            					else {
HXLINE( 292)						if ((value16 < 0)) {
HXLINE( 292)							color17 = 0;
            						}
            						else {
HXLINE( 292)							color17 = value16;
            						}
            					}
HXDLIN( 292)					color = (color | (color17 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color18;
HXDLIN( 292)					if ((value17 > 255)) {
HXLINE( 292)						color18 = 255;
            					}
            					else {
HXLINE( 292)						if ((value17 < 0)) {
HXLINE( 292)							color18 = 0;
            						}
            						else {
HXLINE( 292)							color18 = value17;
            						}
            					}
HXDLIN( 292)					color = (color | (color18 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color19;
HXDLIN( 292)					if ((value18 > 255)) {
HXLINE( 292)						color19 = 255;
            					}
            					else {
HXLINE( 292)						if ((value18 < 0)) {
HXLINE( 292)							color19 = 0;
            						}
            						else {
HXLINE( 292)							color19 = value18;
            						}
            					}
HXDLIN( 292)					color = (color | color19);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color20;
HXDLIN( 292)					if ((value19 > 255)) {
HXLINE( 292)						color20 = 255;
            					}
            					else {
HXLINE( 292)						if ((value19 < 0)) {
HXLINE( 292)							color20 = 0;
            						}
            						else {
HXLINE( 292)							color20 = value19;
            						}
            					}
HXDLIN( 292)					color = (color | (color20 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 292)				{
HXLINE( 292)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -16711681);
HXDLIN( 292)					int color21;
HXDLIN( 292)					if ((value20 > 255)) {
HXLINE( 292)						color21 = 255;
            					}
            					else {
HXLINE( 292)						if ((value20 < 0)) {
HXLINE( 292)							color21 = 0;
            						}
            						else {
HXLINE( 292)							color21 = value20;
            						}
            					}
HXDLIN( 292)					color = (color | (color21 << 16));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -65281);
HXDLIN( 292)					int color22;
HXDLIN( 292)					if ((value21 > 255)) {
HXLINE( 292)						color22 = 255;
            					}
            					else {
HXLINE( 292)						if ((value21 < 0)) {
HXLINE( 292)							color22 = 0;
            						}
            						else {
HXLINE( 292)							color22 = value21;
            						}
            					}
HXDLIN( 292)					color = (color | (color22 << 8));
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 292)					color = (color & -256);
HXDLIN( 292)					int color23;
HXDLIN( 292)					if ((value22 > 255)) {
HXLINE( 292)						color23 = 255;
            					}
            					else {
HXLINE( 292)						if ((value22 < 0)) {
HXLINE( 292)							color23 = 0;
            						}
            						else {
HXLINE( 292)							color23 = value22;
            						}
            					}
HXDLIN( 292)					color = (color | color23);
            				}
HXDLIN( 292)				{
HXLINE( 292)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 292)					color = (color & 16777215);
HXDLIN( 292)					int color24;
HXDLIN( 292)					if ((value23 > 255)) {
HXLINE( 292)						color24 = 255;
            					}
            					else {
HXLINE( 292)						if ((value23 < 0)) {
HXLINE( 292)							color24 = 0;
            						}
            						else {
HXLINE( 292)							color24 = value23;
            						}
            					}
HXDLIN( 292)					color = (color | (color24 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 292)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,fromHSL,return )

 ::Dynamic Color_Impl__obj::fromString(::String str){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_310_fromString)
HXLINE( 311)		 ::Dynamic result = null();
HXLINE( 312)		str = ::StringTools_obj::trim(str);
HXLINE( 314)		if (::vision::ds::_Color::Color_Impl__obj::COLOR_REGEX->match(str)) {
HXLINE( 315)			::String hexColor = (HX_("0x",48,2a,00,00) + ::vision::ds::_Color::Color_Impl__obj::COLOR_REGEX->matched(2));
HXLINE( 316)			result = ( (int)(::Std_obj::parseInt(hexColor)) );
HXLINE( 317)			if ((hexColor.length == 8)) {
HXLINE( 318)				int value = ::Math_obj::round(( (Float)(255) ));
HXDLIN( 318)				result = (( (int)(result) ) & 16777215);
HXDLIN( 318)				int result1;
HXDLIN( 318)				if ((value > 255)) {
HXLINE( 318)					result1 = 255;
            				}
            				else {
HXLINE( 318)					if ((value < 0)) {
HXLINE( 318)						result1 = 0;
            					}
            					else {
HXLINE( 318)						result1 = value;
            					}
            				}
HXDLIN( 318)				result = (( (int)(result) ) | (result1 << 24));
            			}
            		}
HXLINE( 322)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,fromString,return )

::Array< int > Color_Impl__obj::getHSBColorWheel(::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_332_getHSBColorWheel)
HXDLIN( 332)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 332)		{
HXDLIN( 332)			int _g1 = 0;
HXDLIN( 332)			while((_g1 < 360)){
HXDLIN( 332)				_g1 = (_g1 + 1);
HXDLIN( 332)				int c = (_g1 - 1);
HXDLIN( 332)				_g->push(::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(c) ),((Float)1.0),((Float)1.0),Alpha));
            			}
            		}
HXDLIN( 332)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getHSBColorWheel,return )

int Color_Impl__obj::interpolate(int Color1,int Color2,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_343_interpolate)
HXLINE( 344)		int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * Factor) + ((Color1 >> 16) & 255)));
HXLINE( 345)		int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * Factor) + ((Color1 >> 8) & 255)));
HXLINE( 346)		int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * Factor) + (Color1 & 255)));
HXLINE( 347)		int a = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * Factor) + ((Color1 >> 24) & 255)));
HXLINE( 349)		int color = 0;
HXDLIN( 349)		{
HXLINE( 349)			color = (color & -16711681);
HXDLIN( 349)			int color1;
HXDLIN( 349)			if ((r > 255)) {
HXLINE( 349)				color1 = 255;
            			}
            			else {
HXLINE( 349)				if ((r < 0)) {
HXLINE( 349)					color1 = 0;
            				}
            				else {
HXLINE( 349)					color1 = r;
            				}
            			}
HXDLIN( 349)			color = (color | (color1 << 16));
            		}
HXDLIN( 349)		{
HXLINE( 349)			color = (color & -65281);
HXDLIN( 349)			int color2;
HXDLIN( 349)			if ((g > 255)) {
HXLINE( 349)				color2 = 255;
            			}
            			else {
HXLINE( 349)				if ((g < 0)) {
HXLINE( 349)					color2 = 0;
            				}
            				else {
HXLINE( 349)					color2 = g;
            				}
            			}
HXDLIN( 349)			color = (color | (color2 << 8));
            		}
HXDLIN( 349)		{
HXLINE( 349)			color = (color & -256);
HXDLIN( 349)			int color3;
HXDLIN( 349)			if ((b > 255)) {
HXLINE( 349)				color3 = 255;
            			}
            			else {
HXLINE( 349)				if ((b < 0)) {
HXLINE( 349)					color3 = 0;
            				}
            				else {
HXLINE( 349)					color3 = b;
            				}
            			}
HXDLIN( 349)			color = (color | color3);
            		}
HXDLIN( 349)		{
HXLINE( 349)			color = (color & 16777215);
HXDLIN( 349)			int color4;
HXDLIN( 349)			if ((a > 255)) {
HXLINE( 349)				color4 = 255;
            			}
            			else {
HXLINE( 349)				if ((a < 0)) {
HXLINE( 349)					color4 = 0;
            				}
            				else {
HXLINE( 349)					color4 = a;
            				}
            			}
HXDLIN( 349)			color = (color | (color4 << 24));
            		}
HXDLIN( 349)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_Impl__obj,interpolate,return )

::Array< int > Color_Impl__obj::gradient(int Color1,int Color2,int Steps, ::Dynamic Ease){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_361_gradient)
HXLINE( 362)		::Array< int > output = ::Array_obj< int >::__new();
HXLINE( 364)		if (::hx::IsNull( Ease )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Float _hx_run(Float t){
            				HX_STACKFRAME(&_hx_pos_9279add21e623cc0_366_gradient)
HXLINE( 366)				return t;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 365)			Ease =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 370)		{
HXLINE( 370)			int _g = 0;
HXDLIN( 370)			int _g1 = Steps;
HXDLIN( 370)			while((_g < _g1)){
HXLINE( 370)				_g = (_g + 1);
HXDLIN( 370)				int step = (_g - 1);
HXLINE( 371)				Float Factor = ( (Float)(Ease((( (Float)(step) ) / ( (Float)((Steps - 1)) )))) );
HXDLIN( 371)				int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * Factor) + ((Color1 >> 16) & 255)));
HXDLIN( 371)				int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * Factor) + ((Color1 >> 8) & 255)));
HXDLIN( 371)				int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * Factor) + (Color1 & 255)));
HXDLIN( 371)				int a = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * Factor) + ((Color1 >> 24) & 255)));
HXDLIN( 371)				int color = 0;
HXDLIN( 371)				{
HXLINE( 371)					color = (color & -16711681);
HXDLIN( 371)					int color1;
HXDLIN( 371)					if ((r > 255)) {
HXLINE( 371)						color1 = 255;
            					}
            					else {
HXLINE( 371)						if ((r < 0)) {
HXLINE( 371)							color1 = 0;
            						}
            						else {
HXLINE( 371)							color1 = r;
            						}
            					}
HXDLIN( 371)					color = (color | (color1 << 16));
            				}
HXDLIN( 371)				{
HXLINE( 371)					color = (color & -65281);
HXDLIN( 371)					int color2;
HXDLIN( 371)					if ((g > 255)) {
HXLINE( 371)						color2 = 255;
            					}
            					else {
HXLINE( 371)						if ((g < 0)) {
HXLINE( 371)							color2 = 0;
            						}
            						else {
HXLINE( 371)							color2 = g;
            						}
            					}
HXDLIN( 371)					color = (color | (color2 << 8));
            				}
HXDLIN( 371)				{
HXLINE( 371)					color = (color & -256);
HXDLIN( 371)					int color3;
HXDLIN( 371)					if ((b > 255)) {
HXLINE( 371)						color3 = 255;
            					}
            					else {
HXLINE( 371)						if ((b < 0)) {
HXLINE( 371)							color3 = 0;
            						}
            						else {
HXLINE( 371)							color3 = b;
            						}
            					}
HXDLIN( 371)					color = (color | color3);
            				}
HXDLIN( 371)				{
HXLINE( 371)					color = (color & 16777215);
HXDLIN( 371)					int color4;
HXDLIN( 371)					if ((a > 255)) {
HXLINE( 371)						color4 = 255;
            					}
            					else {
HXLINE( 371)						if ((a < 0)) {
HXLINE( 371)							color4 = 0;
            						}
            						else {
HXLINE( 371)							color4 = a;
            						}
            					}
HXDLIN( 371)					color = (color | (color4 << 24));
            				}
HXDLIN( 371)				output[step] = color;
            			}
            		}
HXLINE( 374)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_Impl__obj,gradient,return )

int Color_Impl__obj::makeRandom( ::Dynamic __o_alphaLock,::hx::Null< int >  __o_alphaValue){
            		 ::Dynamic alphaLock = __o_alphaLock;
            		if (::hx::IsNull(__o_alphaLock)) alphaLock = true;
            		int alphaValue = __o_alphaValue.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_384_makeRandom)
HXDLIN( 384)		Float Red = ::Math_obj::random();
HXDLIN( 384)		Float Green = ::Math_obj::random();
HXDLIN( 384)		Float Blue = ::Math_obj::random();
HXDLIN( 384)		Float Alpha;
HXDLIN( 384)		if (( (bool)(alphaLock) )) {
HXDLIN( 384)			Alpha = ( (Float)(alphaValue) );
            		}
            		else {
HXDLIN( 384)			Alpha = ::Math_obj::random();
            		}
HXDLIN( 384)		int color = 0;
HXDLIN( 384)		{
HXDLIN( 384)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 384)			color = (color & -16711681);
HXDLIN( 384)			int color1;
HXDLIN( 384)			if ((value > 255)) {
HXDLIN( 384)				color1 = 255;
            			}
            			else {
HXDLIN( 384)				if ((value < 0)) {
HXDLIN( 384)					color1 = 0;
            				}
            				else {
HXDLIN( 384)					color1 = value;
            				}
            			}
HXDLIN( 384)			color = (color | (color1 << 16));
            		}
HXDLIN( 384)		{
HXDLIN( 384)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 384)			color = (color & -65281);
HXDLIN( 384)			int color2;
HXDLIN( 384)			if ((value1 > 255)) {
HXDLIN( 384)				color2 = 255;
            			}
            			else {
HXDLIN( 384)				if ((value1 < 0)) {
HXDLIN( 384)					color2 = 0;
            				}
            				else {
HXDLIN( 384)					color2 = value1;
            				}
            			}
HXDLIN( 384)			color = (color | (color2 << 8));
            		}
HXDLIN( 384)		{
HXDLIN( 384)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 384)			color = (color & -256);
HXDLIN( 384)			int color3;
HXDLIN( 384)			if ((value2 > 255)) {
HXDLIN( 384)				color3 = 255;
            			}
            			else {
HXDLIN( 384)				if ((value2 < 0)) {
HXDLIN( 384)					color3 = 0;
            				}
            				else {
HXDLIN( 384)					color3 = value2;
            				}
            			}
HXDLIN( 384)			color = (color | color3);
            		}
HXDLIN( 384)		{
HXDLIN( 384)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 384)			color = (color & 16777215);
HXDLIN( 384)			int color4;
HXDLIN( 384)			if ((value3 > 255)) {
HXDLIN( 384)				color4 = 255;
            			}
            			else {
HXDLIN( 384)				if ((value3 < 0)) {
HXDLIN( 384)					color4 = 0;
            				}
            				else {
HXDLIN( 384)					color4 = value3;
            				}
            			}
HXDLIN( 384)			color = (color | (color4 << 24));
            		}
HXDLIN( 384)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,makeRandom,return )

int Color_Impl__obj::multiply(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_392_multiply)
HXDLIN( 392)		Float Red = ((( (Float)(((lhs >> 16) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN( 392)		Float Green = ((( (Float)(((lhs >> 8) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 8) & 255)) ) / ( (Float)(255) )));
HXDLIN( 392)		Float Blue = ((( (Float)((lhs & 255)) ) / ( (Float)(255) )) * (( (Float)((rhs & 255)) ) / ( (Float)(255) )));
HXDLIN( 392)		Float Alpha = ((( (Float)(((lhs >> 24) & 255)) ) / ( (Float)(255) )) * (( (Float)(((rhs >> 24) & 255)) ) / ( (Float)(255) )));
HXDLIN( 392)		int color = 0;
HXDLIN( 392)		{
HXDLIN( 392)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 392)			color = (color & -16711681);
HXDLIN( 392)			int color1;
HXDLIN( 392)			if ((value > 255)) {
HXDLIN( 392)				color1 = 255;
            			}
            			else {
HXDLIN( 392)				if ((value < 0)) {
HXDLIN( 392)					color1 = 0;
            				}
            				else {
HXDLIN( 392)					color1 = value;
            				}
            			}
HXDLIN( 392)			color = (color | (color1 << 16));
            		}
HXDLIN( 392)		{
HXDLIN( 392)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 392)			color = (color & -65281);
HXDLIN( 392)			int color2;
HXDLIN( 392)			if ((value1 > 255)) {
HXDLIN( 392)				color2 = 255;
            			}
            			else {
HXDLIN( 392)				if ((value1 < 0)) {
HXDLIN( 392)					color2 = 0;
            				}
            				else {
HXDLIN( 392)					color2 = value1;
            				}
            			}
HXDLIN( 392)			color = (color | (color2 << 8));
            		}
HXDLIN( 392)		{
HXDLIN( 392)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 392)			color = (color & -256);
HXDLIN( 392)			int color3;
HXDLIN( 392)			if ((value2 > 255)) {
HXDLIN( 392)				color3 = 255;
            			}
            			else {
HXDLIN( 392)				if ((value2 < 0)) {
HXDLIN( 392)					color3 = 0;
            				}
            				else {
HXDLIN( 392)					color3 = value2;
            				}
            			}
HXDLIN( 392)			color = (color | color3);
            		}
HXDLIN( 392)		{
HXDLIN( 392)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 392)			color = (color & 16777215);
HXDLIN( 392)			int color4;
HXDLIN( 392)			if ((value3 > 255)) {
HXDLIN( 392)				color4 = 255;
            			}
            			else {
HXDLIN( 392)				if ((value3 < 0)) {
HXDLIN( 392)					color4 = 0;
            				}
            				else {
HXDLIN( 392)					color4 = value3;
            				}
            			}
HXDLIN( 392)			color = (color | (color4 << 24));
            		}
HXDLIN( 392)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,multiply,return )

int Color_Impl__obj::add(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_401_add)
HXDLIN( 401)		int Red = (((lhs >> 16) & 255) + ((rhs >> 16) & 255));
HXDLIN( 401)		int Green = (((lhs >> 8) & 255) + ((rhs >> 8) & 255));
HXDLIN( 401)		int Blue = ((lhs & 255) + (rhs & 255));
HXDLIN( 401)		int Alpha = (((lhs >> 24) & 255) + ((rhs >> 24) & 255));
HXDLIN( 401)		int color = 0;
HXDLIN( 401)		{
HXDLIN( 401)			color = (color & -16711681);
HXDLIN( 401)			int color1;
HXDLIN( 401)			if ((Red > 255)) {
HXDLIN( 401)				color1 = 255;
            			}
            			else {
HXDLIN( 401)				if ((Red < 0)) {
HXDLIN( 401)					color1 = 0;
            				}
            				else {
HXDLIN( 401)					color1 = Red;
            				}
            			}
HXDLIN( 401)			color = (color | (color1 << 16));
            		}
HXDLIN( 401)		{
HXDLIN( 401)			color = (color & -65281);
HXDLIN( 401)			int color2;
HXDLIN( 401)			if ((Green > 255)) {
HXDLIN( 401)				color2 = 255;
            			}
            			else {
HXDLIN( 401)				if ((Green < 0)) {
HXDLIN( 401)					color2 = 0;
            				}
            				else {
HXDLIN( 401)					color2 = Green;
            				}
            			}
HXDLIN( 401)			color = (color | (color2 << 8));
            		}
HXDLIN( 401)		{
HXDLIN( 401)			color = (color & -256);
HXDLIN( 401)			int color3;
HXDLIN( 401)			if ((Blue > 255)) {
HXDLIN( 401)				color3 = 255;
            			}
            			else {
HXDLIN( 401)				if ((Blue < 0)) {
HXDLIN( 401)					color3 = 0;
            				}
            				else {
HXDLIN( 401)					color3 = Blue;
            				}
            			}
HXDLIN( 401)			color = (color | color3);
            		}
HXDLIN( 401)		{
HXDLIN( 401)			color = (color & 16777215);
HXDLIN( 401)			int color4;
HXDLIN( 401)			if ((Alpha > 255)) {
HXDLIN( 401)				color4 = 255;
            			}
            			else {
HXDLIN( 401)				if ((Alpha < 0)) {
HXDLIN( 401)					color4 = 0;
            				}
            				else {
HXDLIN( 401)					color4 = Alpha;
            				}
            			}
HXDLIN( 401)			color = (color | (color4 << 24));
            		}
HXDLIN( 401)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,add,return )

int Color_Impl__obj::subtract(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_409_subtract)
HXDLIN( 409)		int Red = (((lhs >> 16) & 255) - ((rhs >> 16) & 255));
HXDLIN( 409)		int Green = (((lhs >> 8) & 255) - ((rhs >> 8) & 255));
HXDLIN( 409)		int Blue = ((lhs & 255) - (rhs & 255));
HXDLIN( 409)		int Alpha = (((lhs >> 24) & 255) - ((rhs >> 24) & 255));
HXDLIN( 409)		int color = 0;
HXDLIN( 409)		{
HXDLIN( 409)			color = (color & -16711681);
HXDLIN( 409)			int color1;
HXDLIN( 409)			if ((Red > 255)) {
HXDLIN( 409)				color1 = 255;
            			}
            			else {
HXDLIN( 409)				if ((Red < 0)) {
HXDLIN( 409)					color1 = 0;
            				}
            				else {
HXDLIN( 409)					color1 = Red;
            				}
            			}
HXDLIN( 409)			color = (color | (color1 << 16));
            		}
HXDLIN( 409)		{
HXDLIN( 409)			color = (color & -65281);
HXDLIN( 409)			int color2;
HXDLIN( 409)			if ((Green > 255)) {
HXDLIN( 409)				color2 = 255;
            			}
            			else {
HXDLIN( 409)				if ((Green < 0)) {
HXDLIN( 409)					color2 = 0;
            				}
            				else {
HXDLIN( 409)					color2 = Green;
            				}
            			}
HXDLIN( 409)			color = (color | (color2 << 8));
            		}
HXDLIN( 409)		{
HXDLIN( 409)			color = (color & -256);
HXDLIN( 409)			int color3;
HXDLIN( 409)			if ((Blue > 255)) {
HXDLIN( 409)				color3 = 255;
            			}
            			else {
HXDLIN( 409)				if ((Blue < 0)) {
HXDLIN( 409)					color3 = 0;
            				}
            				else {
HXDLIN( 409)					color3 = Blue;
            				}
            			}
HXDLIN( 409)			color = (color | color3);
            		}
HXDLIN( 409)		{
HXDLIN( 409)			color = (color & 16777215);
HXDLIN( 409)			int color4;
HXDLIN( 409)			if ((Alpha > 255)) {
HXDLIN( 409)				color4 = 255;
            			}
            			else {
HXDLIN( 409)				if ((Alpha < 0)) {
HXDLIN( 409)					color4 = 0;
            				}
            				else {
HXDLIN( 409)					color4 = Alpha;
            				}
            			}
HXDLIN( 409)			color = (color | (color4 << 24));
            		}
HXDLIN( 409)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,subtract,return )

int Color_Impl__obj::divide(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_419_divide)
HXDLIN( 419)		Float Red;
HXDLIN( 419)		if (((( (Float)(((lhs >> 16) & 255)) ) / ( (Float)(((rhs >> 16) & 255)) )) == 0)) {
HXDLIN( 419)			Red = ( (Float)(1) );
            		}
            		else {
HXDLIN( 419)			Red = ( (Float)(((rhs >> 16) & 255)) );
            		}
HXDLIN( 419)		int Red1 = ::Std_obj::_hx_int(Red);
HXDLIN( 419)		Float Green;
HXDLIN( 419)		if (((( (Float)(((lhs >> 8) & 255)) ) / ( (Float)(((rhs >> 8) & 255)) )) == 0)) {
HXDLIN( 419)			Green = ( (Float)(1) );
            		}
            		else {
HXDLIN( 419)			Green = ( (Float)(((rhs >> 8) & 255)) );
            		}
HXDLIN( 419)		int Green1 = ::Std_obj::_hx_int(Green);
HXDLIN( 419)		Float Blue;
HXDLIN( 419)		if (((( (Float)((lhs & 255)) ) / ( (Float)((rhs & 255)) )) == 0)) {
HXDLIN( 419)			Blue = ( (Float)(1) );
            		}
            		else {
HXDLIN( 419)			Blue = ( (Float)((rhs & 255)) );
            		}
HXDLIN( 419)		int Blue1 = ::Std_obj::_hx_int(Blue);
HXDLIN( 419)		Float Alpha;
HXDLIN( 419)		if (((( (Float)(((lhs >> 24) & 255)) ) / ( (Float)(((rhs >> 24) & 255)) )) == 0)) {
HXDLIN( 419)			Alpha = ( (Float)(1) );
            		}
            		else {
HXDLIN( 419)			Alpha = ( (Float)(((rhs >> 24) & 255)) );
            		}
HXDLIN( 419)		int Alpha1 = ::Std_obj::_hx_int(Alpha);
HXDLIN( 419)		int color = 0;
HXDLIN( 419)		{
HXDLIN( 419)			color = (color & -16711681);
HXDLIN( 419)			int color1;
HXDLIN( 419)			if ((Red1 > 255)) {
HXDLIN( 419)				color1 = 255;
            			}
            			else {
HXDLIN( 419)				if ((Red1 < 0)) {
HXDLIN( 419)					color1 = 0;
            				}
            				else {
HXDLIN( 419)					color1 = Red1;
            				}
            			}
HXDLIN( 419)			color = (color | (color1 << 16));
            		}
HXDLIN( 419)		{
HXDLIN( 419)			color = (color & -65281);
HXDLIN( 419)			int color2;
HXDLIN( 419)			if ((Green1 > 255)) {
HXDLIN( 419)				color2 = 255;
            			}
            			else {
HXDLIN( 419)				if ((Green1 < 0)) {
HXDLIN( 419)					color2 = 0;
            				}
            				else {
HXDLIN( 419)					color2 = Green1;
            				}
            			}
HXDLIN( 419)			color = (color | (color2 << 8));
            		}
HXDLIN( 419)		{
HXDLIN( 419)			color = (color & -256);
HXDLIN( 419)			int color3;
HXDLIN( 419)			if ((Blue1 > 255)) {
HXDLIN( 419)				color3 = 255;
            			}
            			else {
HXDLIN( 419)				if ((Blue1 < 0)) {
HXDLIN( 419)					color3 = 0;
            				}
            				else {
HXDLIN( 419)					color3 = Blue1;
            				}
            			}
HXDLIN( 419)			color = (color | color3);
            		}
HXDLIN( 419)		{
HXDLIN( 419)			color = (color & 16777215);
HXDLIN( 419)			int color4;
HXDLIN( 419)			if ((Alpha1 > 255)) {
HXDLIN( 419)				color4 = 255;
            			}
            			else {
HXDLIN( 419)				if ((Alpha1 < 0)) {
HXDLIN( 419)					color4 = 0;
            				}
            				else {
HXDLIN( 419)					color4 = Alpha1;
            				}
            			}
HXDLIN( 419)			color = (color | (color4 << 24));
            		}
HXDLIN( 419)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,divide,return )

int Color_Impl__obj::getComplementHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_429_getComplementHarmony)
HXDLIN( 429)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 180);
HXDLIN( 429)		int range = 351;
HXDLIN( 429)		if ((value < 0)) {
HXDLIN( 429)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 429)		return ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getComplementHarmony,return )

 ::Dynamic Color_Impl__obj::getAnalogousHarmony(int this1,::hx::Null< int >  __o_Threshold){
            		int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_439_getAnalogousHarmony)
HXLINE( 440)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) - Threshold);
HXDLIN( 440)		int range = 351;
HXDLIN( 440)		if ((value < 0)) {
HXLINE( 440)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 440)		int warmer = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 441)		int value1 = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + Threshold);
HXDLIN( 441)		int range1 = 351;
HXDLIN( 441)		if ((value1 < 0)) {
HXLINE( 441)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 441)		int colder = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 443)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,getAnalogousHarmony,return )

 ::Dynamic Color_Impl__obj::getSplitComplementHarmony(int this1,::hx::Null< int >  __o_Threshold){
            		int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_453_getSplitComplementHarmony)
HXLINE( 454)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 180);
HXDLIN( 454)		int range = 351;
HXDLIN( 454)		if ((value < 0)) {
HXLINE( 454)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 454)		int oppositeHue = ::hx::Mod(value,range);
HXLINE( 455)		int value1 = (oppositeHue - Threshold);
HXDLIN( 455)		int range1 = 351;
HXDLIN( 455)		if ((value1 < 0)) {
HXLINE( 455)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 455)		int warmer = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 456)		int value2 = (oppositeHue + Threshold);
HXDLIN( 456)		int range2 = 351;
HXDLIN( 456)		if ((value2 < 0)) {
HXLINE( 456)			value2 = (value2 + (range2 * ::Std_obj::_hx_int(((( (Float)((0 - value2)) ) / ( (Float)(range2) )) + 1))));
            		}
HXDLIN( 456)		int colder = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value2,range2)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 458)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,getSplitComplementHarmony,return )

 ::Dynamic Color_Impl__obj::getTriadicHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_467_getTriadicHarmony)
HXLINE( 468)		int value = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(this1)) + 120);
HXDLIN( 468)		int range = 360;
HXDLIN( 468)		if ((value < 0)) {
HXLINE( 468)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((0 - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXDLIN( 468)		int triadic1 = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value,range)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 469)		int value1 = (::Std_obj::_hx_int(::vision::ds::_Color::Color_Impl__obj::get_hue(triadic1)) + 120);
HXDLIN( 469)		int range1 = 360;
HXDLIN( 469)		if ((value1 < 0)) {
HXLINE( 469)			value1 = (value1 + (range1 * ::Std_obj::_hx_int(((( (Float)((0 - value1)) ) / ( (Float)(range1) )) + 1))));
            		}
HXDLIN( 469)		int triadic2 = ::vision::ds::_Color::Color_Impl__obj::fromHSB(( (Float)(::hx::Mod(value1,range1)) ),((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))),::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 471)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("color1",6e,c5,86,c6),this1)
            			->setFixed(1,HX_("color2",6f,c5,86,c6),triadic1)
            			->setFixed(2,HX_("color3",70,c5,86,c6),triadic2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getTriadicHarmony,return )

int Color_Impl__obj::to24Bit(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_480_to24Bit)
HXDLIN( 480)		return (this1 & 16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,to24Bit,return )

::String Color_Impl__obj::toHexString(int this1,::hx::Null< bool >  __o_Alpha,::hx::Null< bool >  __o_Prefix){
            		bool Alpha = __o_Alpha.Default(true);
            		bool Prefix = __o_Prefix.Default(true);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_491_toHexString)
HXDLIN( 491)		::String _hx_tmp;
HXDLIN( 491)		if (Prefix) {
HXDLIN( 491)			_hx_tmp = HX_("0x",48,2a,00,00);
            		}
            		else {
HXDLIN( 491)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 491)		::String _hx_tmp1;
HXDLIN( 491)		if (Alpha) {
HXDLIN( 491)			_hx_tmp1 = ::StringTools_obj::hex(((this1 >> 24) & 255),2);
            		}
            		else {
HXDLIN( 491)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 491)		::String _hx_tmp2 = ((_hx_tmp + _hx_tmp1) + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 491)		::String _hx_tmp3 = (_hx_tmp2 + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 491)		return (_hx_tmp3 + ::StringTools_obj::hex((this1 & 255),2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_Impl__obj,toHexString,return )

::String Color_Impl__obj::toWebString(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_501_toWebString)
HXDLIN( 501)		::String _hx_tmp = (HX_("",00,00,00,00) + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 501)		::String _hx_tmp1 = (_hx_tmp + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 501)		return (HX_("#",23,00,00,00) + (_hx_tmp1 + ::StringTools_obj::hex((this1 & 255),2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toWebString,return )

int Color_Impl__obj::darken(int this1,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_510_darken)
HXLINE( 511)		Factor = ::vision::tools::MathTools_obj::boundFloat(Factor,( (Float)(0) ),( (Float)(1) ));
HXLINE( 512)		int output = this1;
HXLINE( 513)		{
HXLINE( 513)			Float value = (((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) )) * (( (Float)(1) ) - Factor));
HXDLIN( 513)			{
HXLINE( 513)				Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(output);
HXDLIN( 513)				Float Alpha = (( (Float)(((output >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 513)				Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 513)				Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN( 513)				{
HXLINE( 513)					Float Hue1 = Hue;
HXDLIN( 513)					Float Chroma = chroma;
HXDLIN( 513)					Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 513)					Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 513)					Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 513)					Chroma = (Chroma + match);
HXDLIN( 513)					switch((int)(::Std_obj::_hx_int(hueD))){
            						case (int)0: {
HXLINE( 513)							{
HXLINE( 513)								int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output1;
HXDLIN( 513)								if ((value1 > 255)) {
HXLINE( 513)									output1 = 255;
            								}
            								else {
HXLINE( 513)									if ((value1 < 0)) {
HXLINE( 513)										output1 = 0;
            									}
            									else {
HXLINE( 513)										output1 = value1;
            									}
            								}
HXDLIN( 513)								output = (output | (output1 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output2;
HXDLIN( 513)								if ((value2 > 255)) {
HXLINE( 513)									output2 = 255;
            								}
            								else {
HXLINE( 513)									if ((value2 < 0)) {
HXLINE( 513)										output2 = 0;
            									}
            									else {
HXLINE( 513)										output2 = value2;
            									}
            								}
HXDLIN( 513)								output = (output | (output2 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output3;
HXDLIN( 513)								if ((value3 > 255)) {
HXLINE( 513)									output3 = 255;
            								}
            								else {
HXLINE( 513)									if ((value3 < 0)) {
HXLINE( 513)										output3 = 0;
            									}
            									else {
HXLINE( 513)										output3 = value3;
            									}
            								}
HXDLIN( 513)								output = (output | output3);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output4;
HXDLIN( 513)								if ((value4 > 255)) {
HXLINE( 513)									output4 = 255;
            								}
            								else {
HXLINE( 513)									if ((value4 < 0)) {
HXLINE( 513)										output4 = 0;
            									}
            									else {
HXLINE( 513)										output4 = value4;
            									}
            								}
HXDLIN( 513)								output = (output | (output4 << 24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 513)							{
HXLINE( 513)								int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output5;
HXDLIN( 513)								if ((value5 > 255)) {
HXLINE( 513)									output5 = 255;
            								}
            								else {
HXLINE( 513)									if ((value5 < 0)) {
HXLINE( 513)										output5 = 0;
            									}
            									else {
HXLINE( 513)										output5 = value5;
            									}
            								}
HXDLIN( 513)								output = (output | (output5 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output6;
HXDLIN( 513)								if ((value6 > 255)) {
HXLINE( 513)									output6 = 255;
            								}
            								else {
HXLINE( 513)									if ((value6 < 0)) {
HXLINE( 513)										output6 = 0;
            									}
            									else {
HXLINE( 513)										output6 = value6;
            									}
            								}
HXDLIN( 513)								output = (output | (output6 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output7;
HXDLIN( 513)								if ((value7 > 255)) {
HXLINE( 513)									output7 = 255;
            								}
            								else {
HXLINE( 513)									if ((value7 < 0)) {
HXLINE( 513)										output7 = 0;
            									}
            									else {
HXLINE( 513)										output7 = value7;
            									}
            								}
HXDLIN( 513)								output = (output | output7);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output8;
HXDLIN( 513)								if ((value8 > 255)) {
HXLINE( 513)									output8 = 255;
            								}
            								else {
HXLINE( 513)									if ((value8 < 0)) {
HXLINE( 513)										output8 = 0;
            									}
            									else {
HXLINE( 513)										output8 = value8;
            									}
            								}
HXDLIN( 513)								output = (output | (output8 << 24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 513)							{
HXLINE( 513)								int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output9;
HXDLIN( 513)								if ((value9 > 255)) {
HXLINE( 513)									output9 = 255;
            								}
            								else {
HXLINE( 513)									if ((value9 < 0)) {
HXLINE( 513)										output9 = 0;
            									}
            									else {
HXLINE( 513)										output9 = value9;
            									}
            								}
HXDLIN( 513)								output = (output | (output9 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output10;
HXDLIN( 513)								if ((value10 > 255)) {
HXLINE( 513)									output10 = 255;
            								}
            								else {
HXLINE( 513)									if ((value10 < 0)) {
HXLINE( 513)										output10 = 0;
            									}
            									else {
HXLINE( 513)										output10 = value10;
            									}
            								}
HXDLIN( 513)								output = (output | (output10 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output11;
HXDLIN( 513)								if ((value11 > 255)) {
HXLINE( 513)									output11 = 255;
            								}
            								else {
HXLINE( 513)									if ((value11 < 0)) {
HXLINE( 513)										output11 = 0;
            									}
            									else {
HXLINE( 513)										output11 = value11;
            									}
            								}
HXDLIN( 513)								output = (output | output11);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output12;
HXDLIN( 513)								if ((value12 > 255)) {
HXLINE( 513)									output12 = 255;
            								}
            								else {
HXLINE( 513)									if ((value12 < 0)) {
HXLINE( 513)										output12 = 0;
            									}
            									else {
HXLINE( 513)										output12 = value12;
            									}
            								}
HXDLIN( 513)								output = (output | (output12 << 24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 513)							{
HXLINE( 513)								int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output13;
HXDLIN( 513)								if ((value13 > 255)) {
HXLINE( 513)									output13 = 255;
            								}
            								else {
HXLINE( 513)									if ((value13 < 0)) {
HXLINE( 513)										output13 = 0;
            									}
            									else {
HXLINE( 513)										output13 = value13;
            									}
            								}
HXDLIN( 513)								output = (output | (output13 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output14;
HXDLIN( 513)								if ((value14 > 255)) {
HXLINE( 513)									output14 = 255;
            								}
            								else {
HXLINE( 513)									if ((value14 < 0)) {
HXLINE( 513)										output14 = 0;
            									}
            									else {
HXLINE( 513)										output14 = value14;
            									}
            								}
HXDLIN( 513)								output = (output | (output14 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output15;
HXDLIN( 513)								if ((value15 > 255)) {
HXLINE( 513)									output15 = 255;
            								}
            								else {
HXLINE( 513)									if ((value15 < 0)) {
HXLINE( 513)										output15 = 0;
            									}
            									else {
HXLINE( 513)										output15 = value15;
            									}
            								}
HXDLIN( 513)								output = (output | output15);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output16;
HXDLIN( 513)								if ((value16 > 255)) {
HXLINE( 513)									output16 = 255;
            								}
            								else {
HXLINE( 513)									if ((value16 < 0)) {
HXLINE( 513)										output16 = 0;
            									}
            									else {
HXLINE( 513)										output16 = value16;
            									}
            								}
HXDLIN( 513)								output = (output | (output16 << 24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 513)							{
HXLINE( 513)								int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output17;
HXDLIN( 513)								if ((value17 > 255)) {
HXLINE( 513)									output17 = 255;
            								}
            								else {
HXLINE( 513)									if ((value17 < 0)) {
HXLINE( 513)										output17 = 0;
            									}
            									else {
HXLINE( 513)										output17 = value17;
            									}
            								}
HXDLIN( 513)								output = (output | (output17 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output18;
HXDLIN( 513)								if ((value18 > 255)) {
HXLINE( 513)									output18 = 255;
            								}
            								else {
HXLINE( 513)									if ((value18 < 0)) {
HXLINE( 513)										output18 = 0;
            									}
            									else {
HXLINE( 513)										output18 = value18;
            									}
            								}
HXDLIN( 513)								output = (output | (output18 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output19;
HXDLIN( 513)								if ((value19 > 255)) {
HXLINE( 513)									output19 = 255;
            								}
            								else {
HXLINE( 513)									if ((value19 < 0)) {
HXLINE( 513)										output19 = 0;
            									}
            									else {
HXLINE( 513)										output19 = value19;
            									}
            								}
HXDLIN( 513)								output = (output | output19);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output20;
HXDLIN( 513)								if ((value20 > 255)) {
HXLINE( 513)									output20 = 255;
            								}
            								else {
HXLINE( 513)									if ((value20 < 0)) {
HXLINE( 513)										output20 = 0;
            									}
            									else {
HXLINE( 513)										output20 = value20;
            									}
            								}
HXDLIN( 513)								output = (output | (output20 << 24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 513)							{
HXLINE( 513)								int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -16711681);
HXDLIN( 513)								int output21;
HXDLIN( 513)								if ((value21 > 255)) {
HXLINE( 513)									output21 = 255;
            								}
            								else {
HXLINE( 513)									if ((value21 < 0)) {
HXLINE( 513)										output21 = 0;
            									}
            									else {
HXLINE( 513)										output21 = value21;
            									}
            								}
HXDLIN( 513)								output = (output | (output21 << 16));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -65281);
HXDLIN( 513)								int output22;
HXDLIN( 513)								if ((value22 > 255)) {
HXLINE( 513)									output22 = 255;
            								}
            								else {
HXLINE( 513)									if ((value22 < 0)) {
HXLINE( 513)										output22 = 0;
            									}
            									else {
HXLINE( 513)										output22 = value22;
            									}
            								}
HXDLIN( 513)								output = (output | (output22 << 8));
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 513)								output = (output & -256);
HXDLIN( 513)								int output23;
HXDLIN( 513)								if ((value23 > 255)) {
HXLINE( 513)									output23 = 255;
            								}
            								else {
HXLINE( 513)									if ((value23 < 0)) {
HXLINE( 513)										output23 = 0;
            									}
            									else {
HXLINE( 513)										output23 = value23;
            									}
            								}
HXDLIN( 513)								output = (output | output23);
            							}
HXDLIN( 513)							{
HXLINE( 513)								int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 513)								output = (output & 16777215);
HXDLIN( 513)								int output24;
HXDLIN( 513)								if ((value24 > 255)) {
HXLINE( 513)									output24 = 255;
            								}
            								else {
HXLINE( 513)									if ((value24 < 0)) {
HXLINE( 513)										output24 = 0;
            									}
            									else {
HXLINE( 513)										output24 = value24;
            									}
            								}
HXDLIN( 513)								output = (output | (output24 << 24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 514)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,darken,return )

int Color_Impl__obj::lighten(int this1,::hx::Null< Float >  __o_Factor){
            		Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_523_lighten)
HXLINE( 524)		Factor = ::vision::tools::MathTools_obj::boundFloat(Factor,( (Float)(0) ),( (Float)(1) ));
HXLINE( 525)		int output = this1;
HXLINE( 526)		{
HXLINE( 526)			Float value = (((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) )) + ((( (Float)(1) ) - ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) ))) * Factor));
HXDLIN( 526)			{
HXLINE( 526)				Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(output);
HXDLIN( 526)				Float Alpha = (( (Float)(((output >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 526)				Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((output >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((output >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((output & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 526)				Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN( 526)				{
HXLINE( 526)					Float Hue1 = Hue;
HXDLIN( 526)					Float Chroma = chroma;
HXDLIN( 526)					Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 526)					Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 526)					Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 526)					Chroma = (Chroma + match);
HXDLIN( 526)					switch((int)(::Std_obj::_hx_int(hueD))){
            						case (int)0: {
HXLINE( 526)							{
HXLINE( 526)								int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output1;
HXDLIN( 526)								if ((value1 > 255)) {
HXLINE( 526)									output1 = 255;
            								}
            								else {
HXLINE( 526)									if ((value1 < 0)) {
HXLINE( 526)										output1 = 0;
            									}
            									else {
HXLINE( 526)										output1 = value1;
            									}
            								}
HXDLIN( 526)								output = (output | (output1 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output2;
HXDLIN( 526)								if ((value2 > 255)) {
HXLINE( 526)									output2 = 255;
            								}
            								else {
HXLINE( 526)									if ((value2 < 0)) {
HXLINE( 526)										output2 = 0;
            									}
            									else {
HXLINE( 526)										output2 = value2;
            									}
            								}
HXDLIN( 526)								output = (output | (output2 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output3;
HXDLIN( 526)								if ((value3 > 255)) {
HXLINE( 526)									output3 = 255;
            								}
            								else {
HXLINE( 526)									if ((value3 < 0)) {
HXLINE( 526)										output3 = 0;
            									}
            									else {
HXLINE( 526)										output3 = value3;
            									}
            								}
HXDLIN( 526)								output = (output | output3);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output4;
HXDLIN( 526)								if ((value4 > 255)) {
HXLINE( 526)									output4 = 255;
            								}
            								else {
HXLINE( 526)									if ((value4 < 0)) {
HXLINE( 526)										output4 = 0;
            									}
            									else {
HXLINE( 526)										output4 = value4;
            									}
            								}
HXDLIN( 526)								output = (output | (output4 << 24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 526)							{
HXLINE( 526)								int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output5;
HXDLIN( 526)								if ((value5 > 255)) {
HXLINE( 526)									output5 = 255;
            								}
            								else {
HXLINE( 526)									if ((value5 < 0)) {
HXLINE( 526)										output5 = 0;
            									}
            									else {
HXLINE( 526)										output5 = value5;
            									}
            								}
HXDLIN( 526)								output = (output | (output5 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output6;
HXDLIN( 526)								if ((value6 > 255)) {
HXLINE( 526)									output6 = 255;
            								}
            								else {
HXLINE( 526)									if ((value6 < 0)) {
HXLINE( 526)										output6 = 0;
            									}
            									else {
HXLINE( 526)										output6 = value6;
            									}
            								}
HXDLIN( 526)								output = (output | (output6 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output7;
HXDLIN( 526)								if ((value7 > 255)) {
HXLINE( 526)									output7 = 255;
            								}
            								else {
HXLINE( 526)									if ((value7 < 0)) {
HXLINE( 526)										output7 = 0;
            									}
            									else {
HXLINE( 526)										output7 = value7;
            									}
            								}
HXDLIN( 526)								output = (output | output7);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output8;
HXDLIN( 526)								if ((value8 > 255)) {
HXLINE( 526)									output8 = 255;
            								}
            								else {
HXLINE( 526)									if ((value8 < 0)) {
HXLINE( 526)										output8 = 0;
            									}
            									else {
HXLINE( 526)										output8 = value8;
            									}
            								}
HXDLIN( 526)								output = (output | (output8 << 24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 526)							{
HXLINE( 526)								int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output9;
HXDLIN( 526)								if ((value9 > 255)) {
HXLINE( 526)									output9 = 255;
            								}
            								else {
HXLINE( 526)									if ((value9 < 0)) {
HXLINE( 526)										output9 = 0;
            									}
            									else {
HXLINE( 526)										output9 = value9;
            									}
            								}
HXDLIN( 526)								output = (output | (output9 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output10;
HXDLIN( 526)								if ((value10 > 255)) {
HXLINE( 526)									output10 = 255;
            								}
            								else {
HXLINE( 526)									if ((value10 < 0)) {
HXLINE( 526)										output10 = 0;
            									}
            									else {
HXLINE( 526)										output10 = value10;
            									}
            								}
HXDLIN( 526)								output = (output | (output10 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output11;
HXDLIN( 526)								if ((value11 > 255)) {
HXLINE( 526)									output11 = 255;
            								}
            								else {
HXLINE( 526)									if ((value11 < 0)) {
HXLINE( 526)										output11 = 0;
            									}
            									else {
HXLINE( 526)										output11 = value11;
            									}
            								}
HXDLIN( 526)								output = (output | output11);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output12;
HXDLIN( 526)								if ((value12 > 255)) {
HXLINE( 526)									output12 = 255;
            								}
            								else {
HXLINE( 526)									if ((value12 < 0)) {
HXLINE( 526)										output12 = 0;
            									}
            									else {
HXLINE( 526)										output12 = value12;
            									}
            								}
HXDLIN( 526)								output = (output | (output12 << 24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 526)							{
HXLINE( 526)								int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output13;
HXDLIN( 526)								if ((value13 > 255)) {
HXLINE( 526)									output13 = 255;
            								}
            								else {
HXLINE( 526)									if ((value13 < 0)) {
HXLINE( 526)										output13 = 0;
            									}
            									else {
HXLINE( 526)										output13 = value13;
            									}
            								}
HXDLIN( 526)								output = (output | (output13 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output14;
HXDLIN( 526)								if ((value14 > 255)) {
HXLINE( 526)									output14 = 255;
            								}
            								else {
HXLINE( 526)									if ((value14 < 0)) {
HXLINE( 526)										output14 = 0;
            									}
            									else {
HXLINE( 526)										output14 = value14;
            									}
            								}
HXDLIN( 526)								output = (output | (output14 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output15;
HXDLIN( 526)								if ((value15 > 255)) {
HXLINE( 526)									output15 = 255;
            								}
            								else {
HXLINE( 526)									if ((value15 < 0)) {
HXLINE( 526)										output15 = 0;
            									}
            									else {
HXLINE( 526)										output15 = value15;
            									}
            								}
HXDLIN( 526)								output = (output | output15);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output16;
HXDLIN( 526)								if ((value16 > 255)) {
HXLINE( 526)									output16 = 255;
            								}
            								else {
HXLINE( 526)									if ((value16 < 0)) {
HXLINE( 526)										output16 = 0;
            									}
            									else {
HXLINE( 526)										output16 = value16;
            									}
            								}
HXDLIN( 526)								output = (output | (output16 << 24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 526)							{
HXLINE( 526)								int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output17;
HXDLIN( 526)								if ((value17 > 255)) {
HXLINE( 526)									output17 = 255;
            								}
            								else {
HXLINE( 526)									if ((value17 < 0)) {
HXLINE( 526)										output17 = 0;
            									}
            									else {
HXLINE( 526)										output17 = value17;
            									}
            								}
HXDLIN( 526)								output = (output | (output17 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output18;
HXDLIN( 526)								if ((value18 > 255)) {
HXLINE( 526)									output18 = 255;
            								}
            								else {
HXLINE( 526)									if ((value18 < 0)) {
HXLINE( 526)										output18 = 0;
            									}
            									else {
HXLINE( 526)										output18 = value18;
            									}
            								}
HXDLIN( 526)								output = (output | (output18 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output19;
HXDLIN( 526)								if ((value19 > 255)) {
HXLINE( 526)									output19 = 255;
            								}
            								else {
HXLINE( 526)									if ((value19 < 0)) {
HXLINE( 526)										output19 = 0;
            									}
            									else {
HXLINE( 526)										output19 = value19;
            									}
            								}
HXDLIN( 526)								output = (output | output19);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output20;
HXDLIN( 526)								if ((value20 > 255)) {
HXLINE( 526)									output20 = 255;
            								}
            								else {
HXLINE( 526)									if ((value20 < 0)) {
HXLINE( 526)										output20 = 0;
            									}
            									else {
HXLINE( 526)										output20 = value20;
            									}
            								}
HXDLIN( 526)								output = (output | (output20 << 24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 526)							{
HXLINE( 526)								int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -16711681);
HXDLIN( 526)								int output21;
HXDLIN( 526)								if ((value21 > 255)) {
HXLINE( 526)									output21 = 255;
            								}
            								else {
HXLINE( 526)									if ((value21 < 0)) {
HXLINE( 526)										output21 = 0;
            									}
            									else {
HXLINE( 526)										output21 = value21;
            									}
            								}
HXDLIN( 526)								output = (output | (output21 << 16));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -65281);
HXDLIN( 526)								int output22;
HXDLIN( 526)								if ((value22 > 255)) {
HXLINE( 526)									output22 = 255;
            								}
            								else {
HXLINE( 526)									if ((value22 < 0)) {
HXLINE( 526)										output22 = 0;
            									}
            									else {
HXLINE( 526)										output22 = value22;
            									}
            								}
HXDLIN( 526)								output = (output | (output22 << 8));
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 526)								output = (output & -256);
HXDLIN( 526)								int output23;
HXDLIN( 526)								if ((value23 > 255)) {
HXLINE( 526)									output23 = 255;
            								}
            								else {
HXLINE( 526)									if ((value23 < 0)) {
HXLINE( 526)										output23 = 0;
            									}
            									else {
HXLINE( 526)										output23 = value23;
            									}
            								}
HXDLIN( 526)								output = (output | output23);
            							}
HXDLIN( 526)							{
HXLINE( 526)								int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 526)								output = (output & 16777215);
HXDLIN( 526)								int output24;
HXDLIN( 526)								if ((value24 > 255)) {
HXLINE( 526)									output24 = 255;
            								}
            								else {
HXLINE( 526)									if ((value24 < 0)) {
HXLINE( 526)										output24 = 0;
            									}
            									else {
HXLINE( 526)										output24 = value24;
            									}
            								}
HXDLIN( 526)								output = (output | (output24 << 24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 527)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,lighten,return )

int Color_Impl__obj::invert(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_535_invert)
HXLINE( 536)		int oldAlpha = ((this1 >> 24) & 255);
HXLINE( 537)		int lhs = -1;
HXDLIN( 537)		int Red = (((lhs >> 16) & 255) - ((this1 >> 16) & 255));
HXDLIN( 537)		int Green = (((lhs >> 8) & 255) - ((this1 >> 8) & 255));
HXDLIN( 537)		int Blue = ((lhs & 255) - (this1 & 255));
HXDLIN( 537)		int Alpha = (((lhs >> 24) & 255) - ((this1 >> 24) & 255));
HXDLIN( 537)		int color = 0;
HXDLIN( 537)		{
HXLINE( 537)			color = (color & -16711681);
HXDLIN( 537)			int color1;
HXDLIN( 537)			if ((Red > 255)) {
HXLINE( 537)				color1 = 255;
            			}
            			else {
HXLINE( 537)				if ((Red < 0)) {
HXLINE( 537)					color1 = 0;
            				}
            				else {
HXLINE( 537)					color1 = Red;
            				}
            			}
HXDLIN( 537)			color = (color | (color1 << 16));
            		}
HXDLIN( 537)		{
HXLINE( 537)			color = (color & -65281);
HXDLIN( 537)			int color2;
HXDLIN( 537)			if ((Green > 255)) {
HXLINE( 537)				color2 = 255;
            			}
            			else {
HXLINE( 537)				if ((Green < 0)) {
HXLINE( 537)					color2 = 0;
            				}
            				else {
HXLINE( 537)					color2 = Green;
            				}
            			}
HXDLIN( 537)			color = (color | (color2 << 8));
            		}
HXDLIN( 537)		{
HXLINE( 537)			color = (color & -256);
HXDLIN( 537)			int color3;
HXDLIN( 537)			if ((Blue > 255)) {
HXLINE( 537)				color3 = 255;
            			}
            			else {
HXLINE( 537)				if ((Blue < 0)) {
HXLINE( 537)					color3 = 0;
            				}
            				else {
HXLINE( 537)					color3 = Blue;
            				}
            			}
HXDLIN( 537)			color = (color | color3);
            		}
HXDLIN( 537)		{
HXLINE( 537)			color = (color & 16777215);
HXDLIN( 537)			int color4;
HXDLIN( 537)			if ((Alpha > 255)) {
HXLINE( 537)				color4 = 255;
            			}
            			else {
HXLINE( 537)				if ((Alpha < 0)) {
HXLINE( 537)					color4 = 0;
            				}
            				else {
HXLINE( 537)					color4 = Alpha;
            				}
            			}
HXDLIN( 537)			color = (color | (color4 << 24));
            		}
HXDLIN( 537)		int output = color;
HXLINE( 538)		{
HXLINE( 538)			output = (output & 16777215);
HXDLIN( 538)			int output1;
HXDLIN( 538)			if ((oldAlpha > 255)) {
HXLINE( 538)				output1 = 255;
            			}
            			else {
HXLINE( 538)				if ((oldAlpha < 0)) {
HXLINE( 538)					output1 = 0;
            				}
            				else {
HXLINE( 538)					output1 = oldAlpha;
            				}
            			}
HXDLIN( 538)			output = (output | (output1 << 24));
            		}
HXLINE( 539)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,invert,return )

int Color_Impl__obj::setRGBA(int this1,int Red,int Green,int Blue,::hx::Null< int >  __o_Alpha){
            		int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_551_setRGBA)
HXLINE( 552)		{
HXLINE( 552)			this1 = (this1 & -16711681);
HXDLIN( 552)			int this2;
HXDLIN( 552)			if ((Red > 255)) {
HXLINE( 552)				this2 = 255;
            			}
            			else {
HXLINE( 552)				if ((Red < 0)) {
HXLINE( 552)					this2 = 0;
            				}
            				else {
HXLINE( 552)					this2 = Red;
            				}
            			}
HXDLIN( 552)			this1 = (this1 | (this2 << 16));
            		}
HXLINE( 553)		{
HXLINE( 553)			this1 = (this1 & -65281);
HXDLIN( 553)			int this3;
HXDLIN( 553)			if ((Green > 255)) {
HXLINE( 553)				this3 = 255;
            			}
            			else {
HXLINE( 553)				if ((Green < 0)) {
HXLINE( 553)					this3 = 0;
            				}
            				else {
HXLINE( 553)					this3 = Green;
            				}
            			}
HXDLIN( 553)			this1 = (this1 | (this3 << 8));
            		}
HXLINE( 554)		{
HXLINE( 554)			this1 = (this1 & -256);
HXDLIN( 554)			int this4;
HXDLIN( 554)			if ((Blue > 255)) {
HXLINE( 554)				this4 = 255;
            			}
            			else {
HXLINE( 554)				if ((Blue < 0)) {
HXLINE( 554)					this4 = 0;
            				}
            				else {
HXLINE( 554)					this4 = Blue;
            				}
            			}
HXDLIN( 554)			this1 = (this1 | this4);
            		}
HXLINE( 555)		{
HXLINE( 555)			this1 = (this1 & 16777215);
HXDLIN( 555)			int this5;
HXDLIN( 555)			if ((Alpha > 255)) {
HXLINE( 555)				this5 = 255;
            			}
            			else {
HXLINE( 555)				if ((Alpha < 0)) {
HXLINE( 555)					this5 = 0;
            				}
            				else {
HXLINE( 555)					this5 = Alpha;
            				}
            			}
HXDLIN( 555)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 556)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setRGBA,return )

int Color_Impl__obj::setRGBAFloat(int this1,Float Red,Float Green,Float Blue,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_568_setRGBAFloat)
HXLINE( 569)		{
HXLINE( 569)			int value = ::Math_obj::round((Red * ( (Float)(255) )));
HXDLIN( 569)			this1 = (this1 & -16711681);
HXDLIN( 569)			int this2;
HXDLIN( 569)			if ((value > 255)) {
HXLINE( 569)				this2 = 255;
            			}
            			else {
HXLINE( 569)				if ((value < 0)) {
HXLINE( 569)					this2 = 0;
            				}
            				else {
HXLINE( 569)					this2 = value;
            				}
            			}
HXDLIN( 569)			this1 = (this1 | (this2 << 16));
            		}
HXLINE( 570)		{
HXLINE( 570)			int value1 = ::Math_obj::round((Green * ( (Float)(255) )));
HXDLIN( 570)			this1 = (this1 & -65281);
HXDLIN( 570)			int this3;
HXDLIN( 570)			if ((value1 > 255)) {
HXLINE( 570)				this3 = 255;
            			}
            			else {
HXLINE( 570)				if ((value1 < 0)) {
HXLINE( 570)					this3 = 0;
            				}
            				else {
HXLINE( 570)					this3 = value1;
            				}
            			}
HXDLIN( 570)			this1 = (this1 | (this3 << 8));
            		}
HXLINE( 571)		{
HXLINE( 571)			int value2 = ::Math_obj::round((Blue * ( (Float)(255) )));
HXDLIN( 571)			this1 = (this1 & -256);
HXDLIN( 571)			int this4;
HXDLIN( 571)			if ((value2 > 255)) {
HXLINE( 571)				this4 = 255;
            			}
            			else {
HXLINE( 571)				if ((value2 < 0)) {
HXLINE( 571)					this4 = 0;
            				}
            				else {
HXLINE( 571)					this4 = value2;
            				}
            			}
HXDLIN( 571)			this1 = (this1 | this4);
            		}
HXLINE( 572)		{
HXLINE( 572)			int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 572)			this1 = (this1 & 16777215);
HXDLIN( 572)			int this5;
HXDLIN( 572)			if ((value3 > 255)) {
HXLINE( 572)				this5 = 255;
            			}
            			else {
HXLINE( 572)				if ((value3 < 0)) {
HXLINE( 572)					this5 = 0;
            				}
            				else {
HXLINE( 572)					this5 = value3;
            				}
            			}
HXDLIN( 572)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 573)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setRGBAFloat,return )

int Color_Impl__obj::setCMYK(int this1,Float Cyan,Float Magenta,Float Yellow,Float Black,::hx::Null< Float >  __o_Alpha){
            		Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_586_setCMYK)
HXLINE( 587)		{
HXLINE( 587)			Float value = ((( (Float)(1) ) - Cyan) * (( (Float)(1) ) - Black));
HXDLIN( 587)			{
HXLINE( 587)				int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 587)				this1 = (this1 & -16711681);
HXDLIN( 587)				int this2;
HXDLIN( 587)				if ((value1 > 255)) {
HXLINE( 587)					this2 = 255;
            				}
            				else {
HXLINE( 587)					if ((value1 < 0)) {
HXLINE( 587)						this2 = 0;
            					}
            					else {
HXLINE( 587)						this2 = value1;
            					}
            				}
HXDLIN( 587)				this1 = (this1 | (this2 << 16));
            			}
            		}
HXLINE( 588)		{
HXLINE( 588)			Float value2 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 588)			{
HXLINE( 588)				int value3 = ::Math_obj::round((value2 * ( (Float)(255) )));
HXDLIN( 588)				this1 = (this1 & -65281);
HXDLIN( 588)				int this3;
HXDLIN( 588)				if ((value3 > 255)) {
HXLINE( 588)					this3 = 255;
            				}
            				else {
HXLINE( 588)					if ((value3 < 0)) {
HXLINE( 588)						this3 = 0;
            					}
            					else {
HXLINE( 588)						this3 = value3;
            					}
            				}
HXDLIN( 588)				this1 = (this1 | (this3 << 8));
            			}
            		}
HXLINE( 589)		{
HXLINE( 589)			Float value4 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 589)			{
HXLINE( 589)				int value5 = ::Math_obj::round((value4 * ( (Float)(255) )));
HXDLIN( 589)				this1 = (this1 & -256);
HXDLIN( 589)				int this4;
HXDLIN( 589)				if ((value5 > 255)) {
HXLINE( 589)					this4 = 255;
            				}
            				else {
HXLINE( 589)					if ((value5 < 0)) {
HXLINE( 589)						this4 = 0;
            					}
            					else {
HXLINE( 589)						this4 = value5;
            					}
            				}
HXDLIN( 589)				this1 = (this1 | this4);
            			}
            		}
HXLINE( 590)		{
HXLINE( 590)			int value6 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 590)			this1 = (this1 & 16777215);
HXDLIN( 590)			int this5;
HXDLIN( 590)			if ((value6 > 255)) {
HXLINE( 590)				this5 = 255;
            			}
            			else {
HXLINE( 590)				if ((value6 < 0)) {
HXLINE( 590)					this5 = 0;
            				}
            				else {
HXLINE( 590)					this5 = value6;
            				}
            			}
HXDLIN( 590)			this1 = (this1 | (this5 << 24));
            		}
HXLINE( 591)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Color_Impl__obj,setCMYK,return )

int Color_Impl__obj::setHSB(int this1,Float Hue,Float Saturation,Float Brightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_603_setHSB)
HXLINE( 604)		Float chroma = (Brightness * Saturation);
HXLINE( 605)		Float match = (Brightness - chroma);
HXLINE( 606)		Float Hue1 = Hue;
HXDLIN( 606)		Float Chroma = chroma;
HXDLIN( 606)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 606)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 606)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 606)		Chroma = (Chroma + match);
HXDLIN( 606)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 606)				{
HXLINE( 606)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this2;
HXDLIN( 606)					if ((value > 255)) {
HXLINE( 606)						this2 = 255;
            					}
            					else {
HXLINE( 606)						if ((value < 0)) {
HXLINE( 606)							this2 = 0;
            						}
            						else {
HXLINE( 606)							this2 = value;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this3;
HXDLIN( 606)					if ((value1 > 255)) {
HXLINE( 606)						this3 = 255;
            					}
            					else {
HXLINE( 606)						if ((value1 < 0)) {
HXLINE( 606)							this3 = 0;
            						}
            						else {
HXLINE( 606)							this3 = value1;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this4;
HXDLIN( 606)					if ((value2 > 255)) {
HXLINE( 606)						this4 = 255;
            					}
            					else {
HXLINE( 606)						if ((value2 < 0)) {
HXLINE( 606)							this4 = 0;
            						}
            						else {
HXLINE( 606)							this4 = value2;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this4);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this5;
HXDLIN( 606)					if ((value3 > 255)) {
HXLINE( 606)						this5 = 255;
            					}
            					else {
HXLINE( 606)						if ((value3 < 0)) {
HXLINE( 606)							this5 = 0;
            						}
            						else {
HXLINE( 606)							this5 = value3;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 606)				{
HXLINE( 606)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this6;
HXDLIN( 606)					if ((value4 > 255)) {
HXLINE( 606)						this6 = 255;
            					}
            					else {
HXLINE( 606)						if ((value4 < 0)) {
HXLINE( 606)							this6 = 0;
            						}
            						else {
HXLINE( 606)							this6 = value4;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this7;
HXDLIN( 606)					if ((value5 > 255)) {
HXLINE( 606)						this7 = 255;
            					}
            					else {
HXLINE( 606)						if ((value5 < 0)) {
HXLINE( 606)							this7 = 0;
            						}
            						else {
HXLINE( 606)							this7 = value5;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this8;
HXDLIN( 606)					if ((value6 > 255)) {
HXLINE( 606)						this8 = 255;
            					}
            					else {
HXLINE( 606)						if ((value6 < 0)) {
HXLINE( 606)							this8 = 0;
            						}
            						else {
HXLINE( 606)							this8 = value6;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this8);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this9;
HXDLIN( 606)					if ((value7 > 255)) {
HXLINE( 606)						this9 = 255;
            					}
            					else {
HXLINE( 606)						if ((value7 < 0)) {
HXLINE( 606)							this9 = 0;
            						}
            						else {
HXLINE( 606)							this9 = value7;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 606)				{
HXLINE( 606)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this10;
HXDLIN( 606)					if ((value8 > 255)) {
HXLINE( 606)						this10 = 255;
            					}
            					else {
HXLINE( 606)						if ((value8 < 0)) {
HXLINE( 606)							this10 = 0;
            						}
            						else {
HXLINE( 606)							this10 = value8;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this11;
HXDLIN( 606)					if ((value9 > 255)) {
HXLINE( 606)						this11 = 255;
            					}
            					else {
HXLINE( 606)						if ((value9 < 0)) {
HXLINE( 606)							this11 = 0;
            						}
            						else {
HXLINE( 606)							this11 = value9;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this12;
HXDLIN( 606)					if ((value10 > 255)) {
HXLINE( 606)						this12 = 255;
            					}
            					else {
HXLINE( 606)						if ((value10 < 0)) {
HXLINE( 606)							this12 = 0;
            						}
            						else {
HXLINE( 606)							this12 = value10;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this12);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this13;
HXDLIN( 606)					if ((value11 > 255)) {
HXLINE( 606)						this13 = 255;
            					}
            					else {
HXLINE( 606)						if ((value11 < 0)) {
HXLINE( 606)							this13 = 0;
            						}
            						else {
HXLINE( 606)							this13 = value11;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 606)				{
HXLINE( 606)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this14;
HXDLIN( 606)					if ((value12 > 255)) {
HXLINE( 606)						this14 = 255;
            					}
            					else {
HXLINE( 606)						if ((value12 < 0)) {
HXLINE( 606)							this14 = 0;
            						}
            						else {
HXLINE( 606)							this14 = value12;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this15;
HXDLIN( 606)					if ((value13 > 255)) {
HXLINE( 606)						this15 = 255;
            					}
            					else {
HXLINE( 606)						if ((value13 < 0)) {
HXLINE( 606)							this15 = 0;
            						}
            						else {
HXLINE( 606)							this15 = value13;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this16;
HXDLIN( 606)					if ((value14 > 255)) {
HXLINE( 606)						this16 = 255;
            					}
            					else {
HXLINE( 606)						if ((value14 < 0)) {
HXLINE( 606)							this16 = 0;
            						}
            						else {
HXLINE( 606)							this16 = value14;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this16);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this17;
HXDLIN( 606)					if ((value15 > 255)) {
HXLINE( 606)						this17 = 255;
            					}
            					else {
HXLINE( 606)						if ((value15 < 0)) {
HXLINE( 606)							this17 = 0;
            						}
            						else {
HXLINE( 606)							this17 = value15;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 606)				{
HXLINE( 606)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this18;
HXDLIN( 606)					if ((value16 > 255)) {
HXLINE( 606)						this18 = 255;
            					}
            					else {
HXLINE( 606)						if ((value16 < 0)) {
HXLINE( 606)							this18 = 0;
            						}
            						else {
HXLINE( 606)							this18 = value16;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this19;
HXDLIN( 606)					if ((value17 > 255)) {
HXLINE( 606)						this19 = 255;
            					}
            					else {
HXLINE( 606)						if ((value17 < 0)) {
HXLINE( 606)							this19 = 0;
            						}
            						else {
HXLINE( 606)							this19 = value17;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this20;
HXDLIN( 606)					if ((value18 > 255)) {
HXLINE( 606)						this20 = 255;
            					}
            					else {
HXLINE( 606)						if ((value18 < 0)) {
HXLINE( 606)							this20 = 0;
            						}
            						else {
HXLINE( 606)							this20 = value18;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this20);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this21;
HXDLIN( 606)					if ((value19 > 255)) {
HXLINE( 606)						this21 = 255;
            					}
            					else {
HXLINE( 606)						if ((value19 < 0)) {
HXLINE( 606)							this21 = 0;
            						}
            						else {
HXLINE( 606)							this21 = value19;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 606)				{
HXLINE( 606)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -16711681);
HXDLIN( 606)					int this22;
HXDLIN( 606)					if ((value20 > 255)) {
HXLINE( 606)						this22 = 255;
            					}
            					else {
HXLINE( 606)						if ((value20 < 0)) {
HXLINE( 606)							this22 = 0;
            						}
            						else {
HXLINE( 606)							this22 = value20;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -65281);
HXDLIN( 606)					int this23;
HXDLIN( 606)					if ((value21 > 255)) {
HXLINE( 606)						this23 = 255;
            					}
            					else {
HXLINE( 606)						if ((value21 < 0)) {
HXLINE( 606)							this23 = 0;
            						}
            						else {
HXLINE( 606)							this23 = value21;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & -256);
HXDLIN( 606)					int this24;
HXDLIN( 606)					if ((value22 > 255)) {
HXLINE( 606)						this24 = 255;
            					}
            					else {
HXLINE( 606)						if ((value22 < 0)) {
HXLINE( 606)							this24 = 0;
            						}
            						else {
HXLINE( 606)							this24 = value22;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | this24);
            				}
HXDLIN( 606)				{
HXLINE( 606)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 606)					this1 = (this1 & 16777215);
HXDLIN( 606)					int this25;
HXDLIN( 606)					if ((value23 > 255)) {
HXLINE( 606)						this25 = 255;
            					}
            					else {
HXLINE( 606)						if ((value23 < 0)) {
HXLINE( 606)							this25 = 0;
            						}
            						else {
HXLINE( 606)							this25 = value23;
            						}
            					}
HXDLIN( 606)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 606)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setHSB,return )

int Color_Impl__obj::setHSL(int this1,Float Hue,Float Saturation,Float Lightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_618_setHSL)
HXLINE( 619)		Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * Lightness) - ( (Float)(1) )))) * Saturation);
HXLINE( 620)		Float match = (Lightness - (chroma / ( (Float)(2) )));
HXLINE( 621)		Float Hue1 = Hue;
HXDLIN( 621)		Float Chroma = chroma;
HXDLIN( 621)		Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 621)		Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 621)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 621)		Chroma = (Chroma + match);
HXDLIN( 621)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 621)				{
HXLINE( 621)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this2;
HXDLIN( 621)					if ((value > 255)) {
HXLINE( 621)						this2 = 255;
            					}
            					else {
HXLINE( 621)						if ((value < 0)) {
HXLINE( 621)							this2 = 0;
            						}
            						else {
HXLINE( 621)							this2 = value;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this3;
HXDLIN( 621)					if ((value1 > 255)) {
HXLINE( 621)						this3 = 255;
            					}
            					else {
HXLINE( 621)						if ((value1 < 0)) {
HXLINE( 621)							this3 = 0;
            						}
            						else {
HXLINE( 621)							this3 = value1;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this4;
HXDLIN( 621)					if ((value2 > 255)) {
HXLINE( 621)						this4 = 255;
            					}
            					else {
HXLINE( 621)						if ((value2 < 0)) {
HXLINE( 621)							this4 = 0;
            						}
            						else {
HXLINE( 621)							this4 = value2;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this4);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this5;
HXDLIN( 621)					if ((value3 > 255)) {
HXLINE( 621)						this5 = 255;
            					}
            					else {
HXLINE( 621)						if ((value3 < 0)) {
HXLINE( 621)							this5 = 0;
            						}
            						else {
HXLINE( 621)							this5 = value3;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 621)				{
HXLINE( 621)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this6;
HXDLIN( 621)					if ((value4 > 255)) {
HXLINE( 621)						this6 = 255;
            					}
            					else {
HXLINE( 621)						if ((value4 < 0)) {
HXLINE( 621)							this6 = 0;
            						}
            						else {
HXLINE( 621)							this6 = value4;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this7;
HXDLIN( 621)					if ((value5 > 255)) {
HXLINE( 621)						this7 = 255;
            					}
            					else {
HXLINE( 621)						if ((value5 < 0)) {
HXLINE( 621)							this7 = 0;
            						}
            						else {
HXLINE( 621)							this7 = value5;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this8;
HXDLIN( 621)					if ((value6 > 255)) {
HXLINE( 621)						this8 = 255;
            					}
            					else {
HXLINE( 621)						if ((value6 < 0)) {
HXLINE( 621)							this8 = 0;
            						}
            						else {
HXLINE( 621)							this8 = value6;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this8);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this9;
HXDLIN( 621)					if ((value7 > 255)) {
HXLINE( 621)						this9 = 255;
            					}
            					else {
HXLINE( 621)						if ((value7 < 0)) {
HXLINE( 621)							this9 = 0;
            						}
            						else {
HXLINE( 621)							this9 = value7;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 621)				{
HXLINE( 621)					int value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this10;
HXDLIN( 621)					if ((value8 > 255)) {
HXLINE( 621)						this10 = 255;
            					}
            					else {
HXLINE( 621)						if ((value8 < 0)) {
HXLINE( 621)							this10 = 0;
            						}
            						else {
HXLINE( 621)							this10 = value8;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this11;
HXDLIN( 621)					if ((value9 > 255)) {
HXLINE( 621)						this11 = 255;
            					}
            					else {
HXLINE( 621)						if ((value9 < 0)) {
HXLINE( 621)							this11 = 0;
            						}
            						else {
HXLINE( 621)							this11 = value9;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this12;
HXDLIN( 621)					if ((value10 > 255)) {
HXLINE( 621)						this12 = 255;
            					}
            					else {
HXLINE( 621)						if ((value10 < 0)) {
HXLINE( 621)							this12 = 0;
            						}
            						else {
HXLINE( 621)							this12 = value10;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this12);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this13;
HXDLIN( 621)					if ((value11 > 255)) {
HXLINE( 621)						this13 = 255;
            					}
            					else {
HXLINE( 621)						if ((value11 < 0)) {
HXLINE( 621)							this13 = 0;
            						}
            						else {
HXLINE( 621)							this13 = value11;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 621)				{
HXLINE( 621)					int value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this14;
HXDLIN( 621)					if ((value12 > 255)) {
HXLINE( 621)						this14 = 255;
            					}
            					else {
HXLINE( 621)						if ((value12 < 0)) {
HXLINE( 621)							this14 = 0;
            						}
            						else {
HXLINE( 621)							this14 = value12;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this15;
HXDLIN( 621)					if ((value13 > 255)) {
HXLINE( 621)						this15 = 255;
            					}
            					else {
HXLINE( 621)						if ((value13 < 0)) {
HXLINE( 621)							this15 = 0;
            						}
            						else {
HXLINE( 621)							this15 = value13;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this16;
HXDLIN( 621)					if ((value14 > 255)) {
HXLINE( 621)						this16 = 255;
            					}
            					else {
HXLINE( 621)						if ((value14 < 0)) {
HXLINE( 621)							this16 = 0;
            						}
            						else {
HXLINE( 621)							this16 = value14;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this16);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this17;
HXDLIN( 621)					if ((value15 > 255)) {
HXLINE( 621)						this17 = 255;
            					}
            					else {
HXLINE( 621)						if ((value15 < 0)) {
HXLINE( 621)							this17 = 0;
            						}
            						else {
HXLINE( 621)							this17 = value15;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 621)				{
HXLINE( 621)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this18;
HXDLIN( 621)					if ((value16 > 255)) {
HXLINE( 621)						this18 = 255;
            					}
            					else {
HXLINE( 621)						if ((value16 < 0)) {
HXLINE( 621)							this18 = 0;
            						}
            						else {
HXLINE( 621)							this18 = value16;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this19;
HXDLIN( 621)					if ((value17 > 255)) {
HXLINE( 621)						this19 = 255;
            					}
            					else {
HXLINE( 621)						if ((value17 < 0)) {
HXLINE( 621)							this19 = 0;
            						}
            						else {
HXLINE( 621)							this19 = value17;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this20;
HXDLIN( 621)					if ((value18 > 255)) {
HXLINE( 621)						this20 = 255;
            					}
            					else {
HXLINE( 621)						if ((value18 < 0)) {
HXLINE( 621)							this20 = 0;
            						}
            						else {
HXLINE( 621)							this20 = value18;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this20);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this21;
HXDLIN( 621)					if ((value19 > 255)) {
HXLINE( 621)						this21 = 255;
            					}
            					else {
HXLINE( 621)						if ((value19 < 0)) {
HXLINE( 621)							this21 = 0;
            						}
            						else {
HXLINE( 621)							this21 = value19;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 621)				{
HXLINE( 621)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -16711681);
HXDLIN( 621)					int this22;
HXDLIN( 621)					if ((value20 > 255)) {
HXLINE( 621)						this22 = 255;
            					}
            					else {
HXLINE( 621)						if ((value20 < 0)) {
HXLINE( 621)							this22 = 0;
            						}
            						else {
HXLINE( 621)							this22 = value20;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -65281);
HXDLIN( 621)					int this23;
HXDLIN( 621)					if ((value21 > 255)) {
HXLINE( 621)						this23 = 255;
            					}
            					else {
HXLINE( 621)						if ((value21 < 0)) {
HXLINE( 621)							this23 = 0;
            						}
            						else {
HXLINE( 621)							this23 = value21;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & -256);
HXDLIN( 621)					int this24;
HXDLIN( 621)					if ((value22 > 255)) {
HXLINE( 621)						this24 = 255;
            					}
            					else {
HXLINE( 621)						if ((value22 < 0)) {
HXLINE( 621)							this24 = 0;
            						}
            						else {
HXLINE( 621)							this24 = value22;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | this24);
            				}
HXDLIN( 621)				{
HXLINE( 621)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 621)					this1 = (this1 & 16777215);
HXDLIN( 621)					int this25;
HXDLIN( 621)					if ((value23 > 255)) {
HXLINE( 621)						this25 = 255;
            					}
            					else {
HXLINE( 621)						if ((value23 < 0)) {
HXLINE( 621)							this25 = 0;
            						}
            						else {
HXLINE( 621)							this25 = value23;
            						}
            					}
HXDLIN( 621)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXDLIN( 621)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Color_Impl__obj,setHSL,return )

int Color_Impl__obj::setHSChromaMatch(int this1,Float Hue,Float Saturation,Float Chroma,Float Match,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_627_setHSChromaMatch)
HXLINE( 628)		Hue = ::hx::Mod(Hue,360);
HXLINE( 629)		Float hueD = (Hue / ( (Float)(60) ));
HXLINE( 630)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + Match);
HXLINE( 631)		Chroma = (Chroma + Match);
HXLINE( 633)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE( 635)				{
HXLINE( 635)					int value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 635)					this1 = (this1 & -16711681);
HXDLIN( 635)					int this2;
HXDLIN( 635)					if ((value > 255)) {
HXLINE( 635)						this2 = 255;
            					}
            					else {
HXLINE( 635)						if ((value < 0)) {
HXLINE( 635)							this2 = 0;
            						}
            						else {
HXLINE( 635)							this2 = value;
            						}
            					}
HXDLIN( 635)					this1 = (this1 | (this2 << 16));
            				}
HXDLIN( 635)				{
HXLINE( 635)					int value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 635)					this1 = (this1 & -65281);
HXDLIN( 635)					int this3;
HXDLIN( 635)					if ((value1 > 255)) {
HXLINE( 635)						this3 = 255;
            					}
            					else {
HXLINE( 635)						if ((value1 < 0)) {
HXLINE( 635)							this3 = 0;
            						}
            						else {
HXLINE( 635)							this3 = value1;
            						}
            					}
HXDLIN( 635)					this1 = (this1 | (this3 << 8));
            				}
HXDLIN( 635)				{
HXLINE( 635)					int value2 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 635)					this1 = (this1 & -256);
HXDLIN( 635)					int this4;
HXDLIN( 635)					if ((value2 > 255)) {
HXLINE( 635)						this4 = 255;
            					}
            					else {
HXLINE( 635)						if ((value2 < 0)) {
HXLINE( 635)							this4 = 0;
            						}
            						else {
HXLINE( 635)							this4 = value2;
            						}
            					}
HXDLIN( 635)					this1 = (this1 | this4);
            				}
HXDLIN( 635)				{
HXLINE( 635)					int value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 635)					this1 = (this1 & 16777215);
HXDLIN( 635)					int this5;
HXDLIN( 635)					if ((value3 > 255)) {
HXLINE( 635)						this5 = 255;
            					}
            					else {
HXLINE( 635)						if ((value3 < 0)) {
HXLINE( 635)							this5 = 0;
            						}
            						else {
HXLINE( 635)							this5 = value3;
            						}
            					}
HXDLIN( 635)					this1 = (this1 | (this5 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 637)				{
HXLINE( 637)					int value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 637)					this1 = (this1 & -16711681);
HXDLIN( 637)					int this6;
HXDLIN( 637)					if ((value4 > 255)) {
HXLINE( 637)						this6 = 255;
            					}
            					else {
HXLINE( 637)						if ((value4 < 0)) {
HXLINE( 637)							this6 = 0;
            						}
            						else {
HXLINE( 637)							this6 = value4;
            						}
            					}
HXDLIN( 637)					this1 = (this1 | (this6 << 16));
            				}
HXDLIN( 637)				{
HXLINE( 637)					int value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 637)					this1 = (this1 & -65281);
HXDLIN( 637)					int this7;
HXDLIN( 637)					if ((value5 > 255)) {
HXLINE( 637)						this7 = 255;
            					}
            					else {
HXLINE( 637)						if ((value5 < 0)) {
HXLINE( 637)							this7 = 0;
            						}
            						else {
HXLINE( 637)							this7 = value5;
            						}
            					}
HXDLIN( 637)					this1 = (this1 | (this7 << 8));
            				}
HXDLIN( 637)				{
HXLINE( 637)					int value6 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 637)					this1 = (this1 & -256);
HXDLIN( 637)					int this8;
HXDLIN( 637)					if ((value6 > 255)) {
HXLINE( 637)						this8 = 255;
            					}
            					else {
HXLINE( 637)						if ((value6 < 0)) {
HXLINE( 637)							this8 = 0;
            						}
            						else {
HXLINE( 637)							this8 = value6;
            						}
            					}
HXDLIN( 637)					this1 = (this1 | this8);
            				}
HXDLIN( 637)				{
HXLINE( 637)					int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 637)					this1 = (this1 & 16777215);
HXDLIN( 637)					int this9;
HXDLIN( 637)					if ((value7 > 255)) {
HXLINE( 637)						this9 = 255;
            					}
            					else {
HXLINE( 637)						if ((value7 < 0)) {
HXLINE( 637)							this9 = 0;
            						}
            						else {
HXLINE( 637)							this9 = value7;
            						}
            					}
HXDLIN( 637)					this1 = (this1 | (this9 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 639)				{
HXLINE( 639)					int value8 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 639)					this1 = (this1 & -16711681);
HXDLIN( 639)					int this10;
HXDLIN( 639)					if ((value8 > 255)) {
HXLINE( 639)						this10 = 255;
            					}
            					else {
HXLINE( 639)						if ((value8 < 0)) {
HXLINE( 639)							this10 = 0;
            						}
            						else {
HXLINE( 639)							this10 = value8;
            						}
            					}
HXDLIN( 639)					this1 = (this1 | (this10 << 16));
            				}
HXDLIN( 639)				{
HXLINE( 639)					int value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 639)					this1 = (this1 & -65281);
HXDLIN( 639)					int this11;
HXDLIN( 639)					if ((value9 > 255)) {
HXLINE( 639)						this11 = 255;
            					}
            					else {
HXLINE( 639)						if ((value9 < 0)) {
HXLINE( 639)							this11 = 0;
            						}
            						else {
HXLINE( 639)							this11 = value9;
            						}
            					}
HXDLIN( 639)					this1 = (this1 | (this11 << 8));
            				}
HXDLIN( 639)				{
HXLINE( 639)					int value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 639)					this1 = (this1 & -256);
HXDLIN( 639)					int this12;
HXDLIN( 639)					if ((value10 > 255)) {
HXLINE( 639)						this12 = 255;
            					}
            					else {
HXLINE( 639)						if ((value10 < 0)) {
HXLINE( 639)							this12 = 0;
            						}
            						else {
HXLINE( 639)							this12 = value10;
            						}
            					}
HXDLIN( 639)					this1 = (this1 | this12);
            				}
HXDLIN( 639)				{
HXLINE( 639)					int value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 639)					this1 = (this1 & 16777215);
HXDLIN( 639)					int this13;
HXDLIN( 639)					if ((value11 > 255)) {
HXLINE( 639)						this13 = 255;
            					}
            					else {
HXLINE( 639)						if ((value11 < 0)) {
HXLINE( 639)							this13 = 0;
            						}
            						else {
HXLINE( 639)							this13 = value11;
            						}
            					}
HXDLIN( 639)					this1 = (this1 | (this13 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 641)				{
HXLINE( 641)					int value12 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 641)					this1 = (this1 & -16711681);
HXDLIN( 641)					int this14;
HXDLIN( 641)					if ((value12 > 255)) {
HXLINE( 641)						this14 = 255;
            					}
            					else {
HXLINE( 641)						if ((value12 < 0)) {
HXLINE( 641)							this14 = 0;
            						}
            						else {
HXLINE( 641)							this14 = value12;
            						}
            					}
HXDLIN( 641)					this1 = (this1 | (this14 << 16));
            				}
HXDLIN( 641)				{
HXLINE( 641)					int value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 641)					this1 = (this1 & -65281);
HXDLIN( 641)					int this15;
HXDLIN( 641)					if ((value13 > 255)) {
HXLINE( 641)						this15 = 255;
            					}
            					else {
HXLINE( 641)						if ((value13 < 0)) {
HXLINE( 641)							this15 = 0;
            						}
            						else {
HXLINE( 641)							this15 = value13;
            						}
            					}
HXDLIN( 641)					this1 = (this1 | (this15 << 8));
            				}
HXDLIN( 641)				{
HXLINE( 641)					int value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 641)					this1 = (this1 & -256);
HXDLIN( 641)					int this16;
HXDLIN( 641)					if ((value14 > 255)) {
HXLINE( 641)						this16 = 255;
            					}
            					else {
HXLINE( 641)						if ((value14 < 0)) {
HXLINE( 641)							this16 = 0;
            						}
            						else {
HXLINE( 641)							this16 = value14;
            						}
            					}
HXDLIN( 641)					this1 = (this1 | this16);
            				}
HXDLIN( 641)				{
HXLINE( 641)					int value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 641)					this1 = (this1 & 16777215);
HXDLIN( 641)					int this17;
HXDLIN( 641)					if ((value15 > 255)) {
HXLINE( 641)						this17 = 255;
            					}
            					else {
HXLINE( 641)						if ((value15 < 0)) {
HXLINE( 641)							this17 = 0;
            						}
            						else {
HXLINE( 641)							this17 = value15;
            						}
            					}
HXDLIN( 641)					this1 = (this1 | (this17 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 643)				{
HXLINE( 643)					int value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 643)					this1 = (this1 & -16711681);
HXDLIN( 643)					int this18;
HXDLIN( 643)					if ((value16 > 255)) {
HXLINE( 643)						this18 = 255;
            					}
            					else {
HXLINE( 643)						if ((value16 < 0)) {
HXLINE( 643)							this18 = 0;
            						}
            						else {
HXLINE( 643)							this18 = value16;
            						}
            					}
HXDLIN( 643)					this1 = (this1 | (this18 << 16));
            				}
HXDLIN( 643)				{
HXLINE( 643)					int value17 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 643)					this1 = (this1 & -65281);
HXDLIN( 643)					int this19;
HXDLIN( 643)					if ((value17 > 255)) {
HXLINE( 643)						this19 = 255;
            					}
            					else {
HXLINE( 643)						if ((value17 < 0)) {
HXLINE( 643)							this19 = 0;
            						}
            						else {
HXLINE( 643)							this19 = value17;
            						}
            					}
HXDLIN( 643)					this1 = (this1 | (this19 << 8));
            				}
HXDLIN( 643)				{
HXLINE( 643)					int value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 643)					this1 = (this1 & -256);
HXDLIN( 643)					int this20;
HXDLIN( 643)					if ((value18 > 255)) {
HXLINE( 643)						this20 = 255;
            					}
            					else {
HXLINE( 643)						if ((value18 < 0)) {
HXLINE( 643)							this20 = 0;
            						}
            						else {
HXLINE( 643)							this20 = value18;
            						}
            					}
HXDLIN( 643)					this1 = (this1 | this20);
            				}
HXDLIN( 643)				{
HXLINE( 643)					int value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 643)					this1 = (this1 & 16777215);
HXDLIN( 643)					int this21;
HXDLIN( 643)					if ((value19 > 255)) {
HXLINE( 643)						this21 = 255;
            					}
            					else {
HXLINE( 643)						if ((value19 < 0)) {
HXLINE( 643)							this21 = 0;
            						}
            						else {
HXLINE( 643)							this21 = value19;
            						}
            					}
HXDLIN( 643)					this1 = (this1 | (this21 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 645)				{
HXLINE( 645)					int value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 645)					this1 = (this1 & -16711681);
HXDLIN( 645)					int this22;
HXDLIN( 645)					if ((value20 > 255)) {
HXLINE( 645)						this22 = 255;
            					}
            					else {
HXLINE( 645)						if ((value20 < 0)) {
HXLINE( 645)							this22 = 0;
            						}
            						else {
HXLINE( 645)							this22 = value20;
            						}
            					}
HXDLIN( 645)					this1 = (this1 | (this22 << 16));
            				}
HXDLIN( 645)				{
HXLINE( 645)					int value21 = ::Math_obj::round((Match * ( (Float)(255) )));
HXDLIN( 645)					this1 = (this1 & -65281);
HXDLIN( 645)					int this23;
HXDLIN( 645)					if ((value21 > 255)) {
HXLINE( 645)						this23 = 255;
            					}
            					else {
HXLINE( 645)						if ((value21 < 0)) {
HXLINE( 645)							this23 = 0;
            						}
            						else {
HXLINE( 645)							this23 = value21;
            						}
            					}
HXDLIN( 645)					this1 = (this1 | (this23 << 8));
            				}
HXDLIN( 645)				{
HXLINE( 645)					int value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 645)					this1 = (this1 & -256);
HXDLIN( 645)					int this24;
HXDLIN( 645)					if ((value22 > 255)) {
HXLINE( 645)						this24 = 255;
            					}
            					else {
HXLINE( 645)						if ((value22 < 0)) {
HXLINE( 645)							this24 = 0;
            						}
            						else {
HXLINE( 645)							this24 = value22;
            						}
            					}
HXDLIN( 645)					this1 = (this1 | this24);
            				}
HXDLIN( 645)				{
HXLINE( 645)					int value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 645)					this1 = (this1 & 16777215);
HXDLIN( 645)					int this25;
HXDLIN( 645)					if ((value23 > 255)) {
HXLINE( 645)						this25 = 255;
            					}
            					else {
HXLINE( 645)						if ((value23 < 0)) {
HXLINE( 645)							this25 = 0;
            						}
            						else {
HXLINE( 645)							this25 = value23;
            						}
            					}
HXDLIN( 645)					this1 = (this1 | (this25 << 24));
            				}
            			}
            			break;
            		}
HXLINE( 648)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Color_Impl__obj,setHSChromaMatch,return )

int Color_Impl__obj::grayscale(int this1,::hx::Null< bool >  __o_simple){
            		bool simple = __o_simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_654_grayscale)
HXLINE( 655)		int gray;
HXDLIN( 655)		if (simple) {
HXLINE( 655)			gray = ::Std_obj::_hx_int((( (Float)(((((this1 >> 16) & 255) + ((this1 >> 8) & 255)) + (this1 & 255))) ) / ( (Float)(3) )));
            		}
            		else {
HXLINE( 655)			gray = ::Std_obj::_hx_int((((((Float)0.2126) * ( (Float)(((this1 >> 16) & 255)) )) + (((Float)0.7152) * ( (Float)(((this1 >> 8) & 255)) ))) + (((Float)0.0722) * ( (Float)((this1 & 255)) ))));
            		}
HXLINE( 656)		int Alpha = ((this1 >> 24) & 255);
HXDLIN( 656)		{
HXLINE( 656)			this1 = (this1 & -16711681);
HXDLIN( 656)			int this2;
HXDLIN( 656)			if ((gray > 255)) {
HXLINE( 656)				this2 = 255;
            			}
            			else {
HXLINE( 656)				if ((gray < 0)) {
HXLINE( 656)					this2 = 0;
            				}
            				else {
HXLINE( 656)					this2 = gray;
            				}
            			}
HXDLIN( 656)			this1 = (this1 | (this2 << 16));
            		}
HXDLIN( 656)		{
HXLINE( 656)			this1 = (this1 & -65281);
HXDLIN( 656)			int this3;
HXDLIN( 656)			if ((gray > 255)) {
HXLINE( 656)				this3 = 255;
            			}
            			else {
HXLINE( 656)				if ((gray < 0)) {
HXLINE( 656)					this3 = 0;
            				}
            				else {
HXLINE( 656)					this3 = gray;
            				}
            			}
HXDLIN( 656)			this1 = (this1 | (this3 << 8));
            		}
HXDLIN( 656)		{
HXLINE( 656)			this1 = (this1 & -256);
HXDLIN( 656)			int this4;
HXDLIN( 656)			if ((gray > 255)) {
HXLINE( 656)				this4 = 255;
            			}
            			else {
HXLINE( 656)				if ((gray < 0)) {
HXLINE( 656)					this4 = 0;
            				}
            				else {
HXLINE( 656)					this4 = gray;
            				}
            			}
HXDLIN( 656)			this1 = (this1 | this4);
            		}
HXDLIN( 656)		{
HXLINE( 656)			this1 = (this1 & 16777215);
HXDLIN( 656)			int this5;
HXDLIN( 656)			if ((Alpha > 255)) {
HXLINE( 656)				this5 = 255;
            			}
            			else {
HXLINE( 656)				if ((Alpha < 0)) {
HXLINE( 656)					this5 = 0;
            				}
            				else {
HXLINE( 656)					this5 = Alpha;
            				}
            			}
HXDLIN( 656)			this1 = (this1 | (this5 << 24));
            		}
HXDLIN( 656)		this1 = this1;
HXDLIN( 656)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,grayscale,return )

int Color_Impl__obj::blackOrWhite(int this1,::hx::Null< int >  __o_threshold){
            		int threshold = __o_threshold.Default(128);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_664_blackOrWhite)
HXLINE( 665)		::Array< int > values = ::Array_obj< int >::__new(3)->init(0,((this1 >> 16) & 255))->init(1,((this1 >> 8) & 255))->init(2,(this1 & 255));
HXDLIN( 665)		int max = values->__get(0);
HXDLIN( 665)		{
HXLINE( 665)			int _g = 0;
HXDLIN( 665)			int _g1 = values->length;
HXDLIN( 665)			while((_g < _g1)){
HXLINE( 665)				_g = (_g + 1);
HXDLIN( 665)				int i = (_g - 1);
HXDLIN( 665)				if ((values->__get(i) > max)) {
HXLINE( 665)					max = values->__get(i);
            				}
            			}
            		}
HXDLIN( 665)		int colorValue = max;
HXLINE( 666)		int a = ((this1 >> 24) & 255);
HXLINE( 667)		if ((colorValue > threshold)) {
HXLINE( 668)			this1 = -1;
            		}
            		else {
HXLINE( 670)			this1 = -16777216;
            		}
HXLINE( 672)		{
HXLINE( 672)			this1 = (this1 & 16777215);
HXDLIN( 672)			int this2;
HXDLIN( 672)			if ((a > 255)) {
HXLINE( 672)				this2 = 255;
            			}
            			else {
HXLINE( 672)				if ((a < 0)) {
HXLINE( 672)					this2 = 0;
            				}
            				else {
HXLINE( 672)					this2 = a;
            				}
            			}
HXDLIN( 672)			this1 = (this1 | (this2 << 24));
            		}
HXLINE( 673)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,blackOrWhite,return )

int Color_Impl__obj::_new(::hx::Null< int >  __o_value){
            		int value = __o_value.Default(0);
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_676__new)
HXDLIN( 676)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,_new,return )

int Color_Impl__obj::getThis(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_684_getThis)
HXDLIN( 684)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,getThis,return )

void Color_Impl__obj::validate(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_688_validate)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,validate,(void))

int Color_Impl__obj::get_red(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_695_get_red)
HXDLIN( 695)		return ((this1 >> 16) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_red,return )

int Color_Impl__obj::get_green(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_699_get_green)
HXDLIN( 699)		return ((this1 >> 8) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_green,return )

int Color_Impl__obj::get_blue(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_703_get_blue)
HXDLIN( 703)		return (this1 & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_blue,return )

int Color_Impl__obj::get_alpha(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_707_get_alpha)
HXDLIN( 707)		return ((this1 >> 24) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_alpha,return )

Float Color_Impl__obj::get_redFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_711_get_redFloat)
HXDLIN( 711)		return (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_redFloat,return )

Float Color_Impl__obj::get_greenFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_715_get_greenFloat)
HXDLIN( 715)		return (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_greenFloat,return )

Float Color_Impl__obj::get_blueFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_719_get_blueFloat)
HXDLIN( 719)		return (( (Float)((this1 & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_blueFloat,return )

Float Color_Impl__obj::get_alphaFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_723_get_alphaFloat)
HXDLIN( 723)		return (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_alphaFloat,return )

int Color_Impl__obj::set_red(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_726_set_red)
HXLINE( 728)		this1 = (this1 & -16711681);
HXLINE( 729)		int this2;
HXDLIN( 729)		if ((value > 255)) {
HXLINE( 729)			this2 = 255;
            		}
            		else {
HXLINE( 729)			if ((value < 0)) {
HXLINE( 729)				this2 = 0;
            			}
            			else {
HXLINE( 729)				this2 = value;
            			}
            		}
HXDLIN( 729)		this1 = (this1 | (this2 << 16));
HXLINE( 730)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_red,return )

int Color_Impl__obj::set_green(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_733_set_green)
HXLINE( 735)		this1 = (this1 & -65281);
HXLINE( 736)		int this2;
HXDLIN( 736)		if ((value > 255)) {
HXLINE( 736)			this2 = 255;
            		}
            		else {
HXLINE( 736)			if ((value < 0)) {
HXLINE( 736)				this2 = 0;
            			}
            			else {
HXLINE( 736)				this2 = value;
            			}
            		}
HXDLIN( 736)		this1 = (this1 | (this2 << 8));
HXLINE( 737)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_green,return )

int Color_Impl__obj::set_blue(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_740_set_blue)
HXLINE( 742)		this1 = (this1 & -256);
HXLINE( 743)		int this2;
HXDLIN( 743)		if ((value > 255)) {
HXLINE( 743)			this2 = 255;
            		}
            		else {
HXLINE( 743)			if ((value < 0)) {
HXLINE( 743)				this2 = 0;
            			}
            			else {
HXLINE( 743)				this2 = value;
            			}
            		}
HXDLIN( 743)		this1 = (this1 | this2);
HXLINE( 744)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_blue,return )

int Color_Impl__obj::set_alpha(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_747_set_alpha)
HXLINE( 749)		this1 = (this1 & 16777215);
HXLINE( 750)		int this2;
HXDLIN( 750)		if ((value > 255)) {
HXLINE( 750)			this2 = 255;
            		}
            		else {
HXLINE( 750)			if ((value < 0)) {
HXLINE( 750)				this2 = 0;
            			}
            			else {
HXLINE( 750)				this2 = value;
            			}
            		}
HXDLIN( 750)		this1 = (this1 | (this2 << 24));
HXLINE( 751)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_alpha,return )

Float Color_Impl__obj::set_redFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_754_set_redFloat)
HXLINE( 755)		{
HXLINE( 755)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 755)			this1 = (this1 & -16711681);
HXDLIN( 755)			int this2;
HXDLIN( 755)			if ((value1 > 255)) {
HXLINE( 755)				this2 = 255;
            			}
            			else {
HXLINE( 755)				if ((value1 < 0)) {
HXLINE( 755)					this2 = 0;
            				}
            				else {
HXLINE( 755)					this2 = value1;
            				}
            			}
HXDLIN( 755)			this1 = (this1 | (this2 << 16));
            		}
HXLINE( 756)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_redFloat,return )

Float Color_Impl__obj::set_greenFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_759_set_greenFloat)
HXLINE( 760)		{
HXLINE( 760)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 760)			this1 = (this1 & -65281);
HXDLIN( 760)			int this2;
HXDLIN( 760)			if ((value1 > 255)) {
HXLINE( 760)				this2 = 255;
            			}
            			else {
HXLINE( 760)				if ((value1 < 0)) {
HXLINE( 760)					this2 = 0;
            				}
            				else {
HXLINE( 760)					this2 = value1;
            				}
            			}
HXDLIN( 760)			this1 = (this1 | (this2 << 8));
            		}
HXLINE( 761)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_greenFloat,return )

Float Color_Impl__obj::set_blueFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_764_set_blueFloat)
HXLINE( 765)		{
HXLINE( 765)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 765)			this1 = (this1 & -256);
HXDLIN( 765)			int this2;
HXDLIN( 765)			if ((value1 > 255)) {
HXLINE( 765)				this2 = 255;
            			}
            			else {
HXLINE( 765)				if ((value1 < 0)) {
HXLINE( 765)					this2 = 0;
            				}
            				else {
HXLINE( 765)					this2 = value1;
            				}
            			}
HXDLIN( 765)			this1 = (this1 | this2);
            		}
HXLINE( 766)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_blueFloat,return )

Float Color_Impl__obj::set_alphaFloat(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_769_set_alphaFloat)
HXLINE( 770)		{
HXLINE( 770)			int value1 = ::Math_obj::round((value * ( (Float)(255) )));
HXDLIN( 770)			this1 = (this1 & 16777215);
HXDLIN( 770)			int this2;
HXDLIN( 770)			if ((value1 > 255)) {
HXLINE( 770)				this2 = 255;
            			}
            			else {
HXLINE( 770)				if ((value1 < 0)) {
HXLINE( 770)					this2 = 0;
            				}
            				else {
HXLINE( 770)					this2 = value1;
            				}
            			}
HXDLIN( 770)			this1 = (this1 | (this2 << 24));
            		}
HXLINE( 771)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_alphaFloat,return )

Float Color_Impl__obj::get_cyan(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_775_get_cyan)
HXDLIN( 775)		return (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_cyan,return )

Float Color_Impl__obj::get_magenta(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_779_get_magenta)
HXDLIN( 779)		return (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_magenta,return )

Float Color_Impl__obj::get_yellow(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_783_get_yellow)
HXDLIN( 783)		return (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_yellow,return )

Float Color_Impl__obj::get_black(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_787_get_black)
HXDLIN( 787)		return (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_black,return )

Float Color_Impl__obj::set_cyan(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_790_set_cyan)
HXLINE( 791)		{
HXLINE( 791)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 791)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 791)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 791)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 791)			{
HXLINE( 791)				Float value1 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN( 791)				{
HXLINE( 791)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN( 791)					this1 = (this1 & -16711681);
HXDLIN( 791)					int this2;
HXDLIN( 791)					if ((value2 > 255)) {
HXLINE( 791)						this2 = 255;
            					}
            					else {
HXLINE( 791)						if ((value2 < 0)) {
HXLINE( 791)							this2 = 0;
            						}
            						else {
HXLINE( 791)							this2 = value2;
            						}
            					}
HXDLIN( 791)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN( 791)			{
HXLINE( 791)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 791)				{
HXLINE( 791)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN( 791)					this1 = (this1 & -65281);
HXDLIN( 791)					int this3;
HXDLIN( 791)					if ((value4 > 255)) {
HXLINE( 791)						this3 = 255;
            					}
            					else {
HXLINE( 791)						if ((value4 < 0)) {
HXLINE( 791)							this3 = 0;
            						}
            						else {
HXLINE( 791)							this3 = value4;
            						}
            					}
HXDLIN( 791)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN( 791)			{
HXLINE( 791)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 791)				{
HXLINE( 791)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN( 791)					this1 = (this1 & -256);
HXDLIN( 791)					int this4;
HXDLIN( 791)					if ((value6 > 255)) {
HXLINE( 791)						this4 = 255;
            					}
            					else {
HXLINE( 791)						if ((value6 < 0)) {
HXLINE( 791)							this4 = 0;
            						}
            						else {
HXLINE( 791)							this4 = value6;
            						}
            					}
HXDLIN( 791)					this1 = (this1 | this4);
            				}
            			}
HXDLIN( 791)			{
HXLINE( 791)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 791)				this1 = (this1 & 16777215);
HXDLIN( 791)				int this5;
HXDLIN( 791)				if ((value7 > 255)) {
HXLINE( 791)					this5 = 255;
            				}
            				else {
HXLINE( 791)					if ((value7 < 0)) {
HXLINE( 791)						this5 = 0;
            					}
            					else {
HXLINE( 791)						this5 = value7;
            					}
            				}
HXDLIN( 791)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE( 792)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_cyan,return )

Float Color_Impl__obj::set_magenta(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_795_set_magenta)
HXLINE( 796)		{
HXLINE( 796)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 796)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 796)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 796)			{
HXLINE( 796)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - Black));
HXDLIN( 796)				{
HXLINE( 796)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN( 796)					this1 = (this1 & -16711681);
HXDLIN( 796)					int this2;
HXDLIN( 796)					if ((value2 > 255)) {
HXLINE( 796)						this2 = 255;
            					}
            					else {
HXLINE( 796)						if ((value2 < 0)) {
HXLINE( 796)							this2 = 0;
            						}
            						else {
HXLINE( 796)							this2 = value2;
            						}
            					}
HXDLIN( 796)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN( 796)			{
HXLINE( 796)				Float value3 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN( 796)				{
HXLINE( 796)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN( 796)					this1 = (this1 & -65281);
HXDLIN( 796)					int this3;
HXDLIN( 796)					if ((value4 > 255)) {
HXLINE( 796)						this3 = 255;
            					}
            					else {
HXLINE( 796)						if ((value4 < 0)) {
HXLINE( 796)							this3 = 0;
            						}
            						else {
HXLINE( 796)							this3 = value4;
            						}
            					}
HXDLIN( 796)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN( 796)			{
HXLINE( 796)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - Black));
HXDLIN( 796)				{
HXLINE( 796)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN( 796)					this1 = (this1 & -256);
HXDLIN( 796)					int this4;
HXDLIN( 796)					if ((value6 > 255)) {
HXLINE( 796)						this4 = 255;
            					}
            					else {
HXLINE( 796)						if ((value6 < 0)) {
HXLINE( 796)							this4 = 0;
            						}
            						else {
HXLINE( 796)							this4 = value6;
            						}
            					}
HXDLIN( 796)					this1 = (this1 | this4);
            				}
            			}
HXDLIN( 796)			{
HXLINE( 796)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 796)				this1 = (this1 & 16777215);
HXDLIN( 796)				int this5;
HXDLIN( 796)				if ((value7 > 255)) {
HXLINE( 796)					this5 = 255;
            				}
            				else {
HXLINE( 796)					if ((value7 < 0)) {
HXLINE( 796)						this5 = 0;
            					}
            					else {
HXLINE( 796)						this5 = value7;
            					}
            				}
HXDLIN( 796)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE( 797)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_magenta,return )

Float Color_Impl__obj::set_yellow(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_800_set_yellow)
HXLINE( 801)		{
HXLINE( 801)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 801)			Float Black = (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 801)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 801)			{
HXLINE( 801)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - Black));
HXDLIN( 801)				{
HXLINE( 801)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN( 801)					this1 = (this1 & -16711681);
HXDLIN( 801)					int this2;
HXDLIN( 801)					if ((value2 > 255)) {
HXLINE( 801)						this2 = 255;
            					}
            					else {
HXLINE( 801)						if ((value2 < 0)) {
HXLINE( 801)							this2 = 0;
            						}
            						else {
HXLINE( 801)							this2 = value2;
            						}
            					}
HXDLIN( 801)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN( 801)			{
HXLINE( 801)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - Black));
HXDLIN( 801)				{
HXLINE( 801)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN( 801)					this1 = (this1 & -65281);
HXDLIN( 801)					int this3;
HXDLIN( 801)					if ((value4 > 255)) {
HXLINE( 801)						this3 = 255;
            					}
            					else {
HXLINE( 801)						if ((value4 < 0)) {
HXLINE( 801)							this3 = 0;
            						}
            						else {
HXLINE( 801)							this3 = value4;
            						}
            					}
HXDLIN( 801)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN( 801)			{
HXLINE( 801)				Float value5 = ((( (Float)(1) ) - value) * (( (Float)(1) ) - Black));
HXDLIN( 801)				{
HXLINE( 801)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN( 801)					this1 = (this1 & -256);
HXDLIN( 801)					int this4;
HXDLIN( 801)					if ((value6 > 255)) {
HXLINE( 801)						this4 = 255;
            					}
            					else {
HXLINE( 801)						if ((value6 < 0)) {
HXLINE( 801)							this4 = 0;
            						}
            						else {
HXLINE( 801)							this4 = value6;
            						}
            					}
HXDLIN( 801)					this1 = (this1 | this4);
            				}
            			}
HXDLIN( 801)			{
HXLINE( 801)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 801)				this1 = (this1 & 16777215);
HXDLIN( 801)				int this5;
HXDLIN( 801)				if ((value7 > 255)) {
HXLINE( 801)					this5 = 255;
            				}
            				else {
HXLINE( 801)					if ((value7 < 0)) {
HXLINE( 801)						this5 = 0;
            					}
            					else {
HXLINE( 801)						this5 = value7;
            					}
            				}
HXDLIN( 801)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE( 802)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_yellow,return )

Float Color_Impl__obj::set_black(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_805_set_black)
HXLINE( 806)		{
HXLINE( 806)			Float Magenta = (((( (Float)(1) ) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 806)			Float Yellow = (((( (Float)(1) ) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
HXDLIN( 806)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 806)			{
HXLINE( 806)				Float value1 = ((( (Float)(1) ) - (((( (Float)(1) ) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(1) ) - ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))))) * (( (Float)(1) ) - value));
HXDLIN( 806)				{
HXLINE( 806)					int value2 = ::Math_obj::round((value1 * ( (Float)(255) )));
HXDLIN( 806)					this1 = (this1 & -16711681);
HXDLIN( 806)					int this2;
HXDLIN( 806)					if ((value2 > 255)) {
HXLINE( 806)						this2 = 255;
            					}
            					else {
HXLINE( 806)						if ((value2 < 0)) {
HXLINE( 806)							this2 = 0;
            						}
            						else {
HXLINE( 806)							this2 = value2;
            						}
            					}
HXDLIN( 806)					this1 = (this1 | (this2 << 16));
            				}
            			}
HXDLIN( 806)			{
HXLINE( 806)				Float value3 = ((( (Float)(1) ) - Magenta) * (( (Float)(1) ) - value));
HXDLIN( 806)				{
HXLINE( 806)					int value4 = ::Math_obj::round((value3 * ( (Float)(255) )));
HXDLIN( 806)					this1 = (this1 & -65281);
HXDLIN( 806)					int this3;
HXDLIN( 806)					if ((value4 > 255)) {
HXLINE( 806)						this3 = 255;
            					}
            					else {
HXLINE( 806)						if ((value4 < 0)) {
HXLINE( 806)							this3 = 0;
            						}
            						else {
HXLINE( 806)							this3 = value4;
            						}
            					}
HXDLIN( 806)					this1 = (this1 | (this3 << 8));
            				}
            			}
HXDLIN( 806)			{
HXLINE( 806)				Float value5 = ((( (Float)(1) ) - Yellow) * (( (Float)(1) ) - value));
HXDLIN( 806)				{
HXLINE( 806)					int value6 = ::Math_obj::round((value5 * ( (Float)(255) )));
HXDLIN( 806)					this1 = (this1 & -256);
HXDLIN( 806)					int this4;
HXDLIN( 806)					if ((value6 > 255)) {
HXLINE( 806)						this4 = 255;
            					}
            					else {
HXLINE( 806)						if ((value6 < 0)) {
HXLINE( 806)							this4 = 0;
            						}
            						else {
HXLINE( 806)							this4 = value6;
            						}
            					}
HXDLIN( 806)					this1 = (this1 | this4);
            				}
            			}
HXDLIN( 806)			{
HXLINE( 806)				int value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 806)				this1 = (this1 & 16777215);
HXDLIN( 806)				int this5;
HXDLIN( 806)				if ((value7 > 255)) {
HXLINE( 806)					this5 = 255;
            				}
            				else {
HXLINE( 806)					if ((value7 < 0)) {
HXLINE( 806)						this5 = 0;
            					}
            					else {
HXLINE( 806)						this5 = value7;
            					}
            				}
HXDLIN( 806)				this1 = (this1 | (this5 << 24));
            			}
            		}
HXLINE( 807)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_black,return )

Float Color_Impl__obj::get_hue(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_810_get_hue)
HXLINE( 811)		Float hueRad = ::Math_obj::atan2((::Math_obj::sqrt(( (Float)(3) )) * ((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(((( (Float)(2) ) * (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXLINE( 812)		Float hue = ( (Float)(0) );
HXLINE( 813)		if ((hueRad != 0)) {
HXLINE( 814)			hue = ((( (Float)(180) ) / ::Math_obj::PI) * ::Math_obj::atan2((::Math_obj::sqrt(( (Float)(3) )) * ((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))),(((( (Float)(2) ) * (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - (( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            		}
HXLINE( 817)		if ((hue < 0)) {
HXLINE( 817)			return (hue + 360);
            		}
            		else {
HXLINE( 817)			return hue;
            		}
HXDLIN( 817)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_hue,return )

Float Color_Impl__obj::get_brightness(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_821_get_brightness)
HXDLIN( 821)		return ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_brightness,return )

Float Color_Impl__obj::get_saturation(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_825_get_saturation)
HXDLIN( 825)		return ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_saturation,return )

Float Color_Impl__obj::get_lightness(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_829_get_lightness)
HXDLIN( 829)		return ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) + ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_lightness,return )

Float Color_Impl__obj::set_hue(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_832_set_hue)
HXLINE( 833)		{
HXLINE( 833)			Float Brightness = ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXDLIN( 833)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 833)			Float chroma = (Brightness * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 833)			Float match = (Brightness - chroma);
HXDLIN( 833)			{
HXLINE( 833)				Float Hue = value;
HXDLIN( 833)				Float Chroma = chroma;
HXDLIN( 833)				Hue = ::hx::Mod(Hue,360);
HXDLIN( 833)				Float hueD = (Hue / ( (Float)(60) ));
HXDLIN( 833)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 833)				Chroma = (Chroma + match);
HXDLIN( 833)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE( 833)						{
HXLINE( 833)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this2;
HXDLIN( 833)							if ((value1 > 255)) {
HXLINE( 833)								this2 = 255;
            							}
            							else {
HXLINE( 833)								if ((value1 < 0)) {
HXLINE( 833)									this2 = 0;
            								}
            								else {
HXLINE( 833)									this2 = value1;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this3;
HXDLIN( 833)							if ((value2 > 255)) {
HXLINE( 833)								this3 = 255;
            							}
            							else {
HXLINE( 833)								if ((value2 < 0)) {
HXLINE( 833)									this3 = 0;
            								}
            								else {
HXLINE( 833)									this3 = value2;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this4;
HXDLIN( 833)							if ((value3 > 255)) {
HXLINE( 833)								this4 = 255;
            							}
            							else {
HXLINE( 833)								if ((value3 < 0)) {
HXLINE( 833)									this4 = 0;
            								}
            								else {
HXLINE( 833)									this4 = value3;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this4);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this5;
HXDLIN( 833)							if ((value4 > 255)) {
HXLINE( 833)								this5 = 255;
            							}
            							else {
HXLINE( 833)								if ((value4 < 0)) {
HXLINE( 833)									this5 = 0;
            								}
            								else {
HXLINE( 833)									this5 = value4;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 833)						{
HXLINE( 833)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this6;
HXDLIN( 833)							if ((value5 > 255)) {
HXLINE( 833)								this6 = 255;
            							}
            							else {
HXLINE( 833)								if ((value5 < 0)) {
HXLINE( 833)									this6 = 0;
            								}
            								else {
HXLINE( 833)									this6 = value5;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this7;
HXDLIN( 833)							if ((value6 > 255)) {
HXLINE( 833)								this7 = 255;
            							}
            							else {
HXLINE( 833)								if ((value6 < 0)) {
HXLINE( 833)									this7 = 0;
            								}
            								else {
HXLINE( 833)									this7 = value6;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this8;
HXDLIN( 833)							if ((value7 > 255)) {
HXLINE( 833)								this8 = 255;
            							}
            							else {
HXLINE( 833)								if ((value7 < 0)) {
HXLINE( 833)									this8 = 0;
            								}
            								else {
HXLINE( 833)									this8 = value7;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this8);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this9;
HXDLIN( 833)							if ((value8 > 255)) {
HXLINE( 833)								this9 = 255;
            							}
            							else {
HXLINE( 833)								if ((value8 < 0)) {
HXLINE( 833)									this9 = 0;
            								}
            								else {
HXLINE( 833)									this9 = value8;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 833)						{
HXLINE( 833)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this10;
HXDLIN( 833)							if ((value9 > 255)) {
HXLINE( 833)								this10 = 255;
            							}
            							else {
HXLINE( 833)								if ((value9 < 0)) {
HXLINE( 833)									this10 = 0;
            								}
            								else {
HXLINE( 833)									this10 = value9;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this11;
HXDLIN( 833)							if ((value10 > 255)) {
HXLINE( 833)								this11 = 255;
            							}
            							else {
HXLINE( 833)								if ((value10 < 0)) {
HXLINE( 833)									this11 = 0;
            								}
            								else {
HXLINE( 833)									this11 = value10;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this12;
HXDLIN( 833)							if ((value11 > 255)) {
HXLINE( 833)								this12 = 255;
            							}
            							else {
HXLINE( 833)								if ((value11 < 0)) {
HXLINE( 833)									this12 = 0;
            								}
            								else {
HXLINE( 833)									this12 = value11;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this12);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this13;
HXDLIN( 833)							if ((value12 > 255)) {
HXLINE( 833)								this13 = 255;
            							}
            							else {
HXLINE( 833)								if ((value12 < 0)) {
HXLINE( 833)									this13 = 0;
            								}
            								else {
HXLINE( 833)									this13 = value12;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 833)						{
HXLINE( 833)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this14;
HXDLIN( 833)							if ((value13 > 255)) {
HXLINE( 833)								this14 = 255;
            							}
            							else {
HXLINE( 833)								if ((value13 < 0)) {
HXLINE( 833)									this14 = 0;
            								}
            								else {
HXLINE( 833)									this14 = value13;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this15;
HXDLIN( 833)							if ((value14 > 255)) {
HXLINE( 833)								this15 = 255;
            							}
            							else {
HXLINE( 833)								if ((value14 < 0)) {
HXLINE( 833)									this15 = 0;
            								}
            								else {
HXLINE( 833)									this15 = value14;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this16;
HXDLIN( 833)							if ((value15 > 255)) {
HXLINE( 833)								this16 = 255;
            							}
            							else {
HXLINE( 833)								if ((value15 < 0)) {
HXLINE( 833)									this16 = 0;
            								}
            								else {
HXLINE( 833)									this16 = value15;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this16);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this17;
HXDLIN( 833)							if ((value16 > 255)) {
HXLINE( 833)								this17 = 255;
            							}
            							else {
HXLINE( 833)								if ((value16 < 0)) {
HXLINE( 833)									this17 = 0;
            								}
            								else {
HXLINE( 833)									this17 = value16;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 833)						{
HXLINE( 833)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this18;
HXDLIN( 833)							if ((value17 > 255)) {
HXLINE( 833)								this18 = 255;
            							}
            							else {
HXLINE( 833)								if ((value17 < 0)) {
HXLINE( 833)									this18 = 0;
            								}
            								else {
HXLINE( 833)									this18 = value17;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this19;
HXDLIN( 833)							if ((value18 > 255)) {
HXLINE( 833)								this19 = 255;
            							}
            							else {
HXLINE( 833)								if ((value18 < 0)) {
HXLINE( 833)									this19 = 0;
            								}
            								else {
HXLINE( 833)									this19 = value18;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this20;
HXDLIN( 833)							if ((value19 > 255)) {
HXLINE( 833)								this20 = 255;
            							}
            							else {
HXLINE( 833)								if ((value19 < 0)) {
HXLINE( 833)									this20 = 0;
            								}
            								else {
HXLINE( 833)									this20 = value19;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this20);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this21;
HXDLIN( 833)							if ((value20 > 255)) {
HXLINE( 833)								this21 = 255;
            							}
            							else {
HXLINE( 833)								if ((value20 < 0)) {
HXLINE( 833)									this21 = 0;
            								}
            								else {
HXLINE( 833)									this21 = value20;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE( 833)						{
HXLINE( 833)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -16711681);
HXDLIN( 833)							int this22;
HXDLIN( 833)							if ((value21 > 255)) {
HXLINE( 833)								this22 = 255;
            							}
            							else {
HXLINE( 833)								if ((value21 < 0)) {
HXLINE( 833)									this22 = 0;
            								}
            								else {
HXLINE( 833)									this22 = value21;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -65281);
HXDLIN( 833)							int this23;
HXDLIN( 833)							if ((value22 > 255)) {
HXLINE( 833)								this23 = 255;
            							}
            							else {
HXLINE( 833)								if ((value22 < 0)) {
HXLINE( 833)									this23 = 0;
            								}
            								else {
HXLINE( 833)									this23 = value22;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & -256);
HXDLIN( 833)							int this24;
HXDLIN( 833)							if ((value23 > 255)) {
HXLINE( 833)								this24 = 255;
            							}
            							else {
HXLINE( 833)								if ((value23 < 0)) {
HXLINE( 833)									this24 = 0;
            								}
            								else {
HXLINE( 833)									this24 = value23;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | this24);
            						}
HXDLIN( 833)						{
HXLINE( 833)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 833)							this1 = (this1 & 16777215);
HXDLIN( 833)							int this25;
HXDLIN( 833)							if ((value24 > 255)) {
HXLINE( 833)								this25 = 255;
            							}
            							else {
HXLINE( 833)								if ((value24 < 0)) {
HXLINE( 833)									this25 = 0;
            								}
            								else {
HXLINE( 833)									this25 = value24;
            								}
            							}
HXDLIN( 833)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 834)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_hue,return )

Float Color_Impl__obj::set_saturation(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_837_set_saturation)
HXLINE( 838)		{
HXLINE( 838)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN( 838)			Float Brightness = ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
HXDLIN( 838)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 838)			Float chroma = (Brightness * value);
HXDLIN( 838)			Float match = (Brightness - chroma);
HXDLIN( 838)			{
HXLINE( 838)				Float Hue1 = Hue;
HXDLIN( 838)				Float Chroma = chroma;
HXDLIN( 838)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 838)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 838)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 838)				Chroma = (Chroma + match);
HXDLIN( 838)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE( 838)						{
HXLINE( 838)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this2;
HXDLIN( 838)							if ((value1 > 255)) {
HXLINE( 838)								this2 = 255;
            							}
            							else {
HXLINE( 838)								if ((value1 < 0)) {
HXLINE( 838)									this2 = 0;
            								}
            								else {
HXLINE( 838)									this2 = value1;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this3;
HXDLIN( 838)							if ((value2 > 255)) {
HXLINE( 838)								this3 = 255;
            							}
            							else {
HXLINE( 838)								if ((value2 < 0)) {
HXLINE( 838)									this3 = 0;
            								}
            								else {
HXLINE( 838)									this3 = value2;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this4;
HXDLIN( 838)							if ((value3 > 255)) {
HXLINE( 838)								this4 = 255;
            							}
            							else {
HXLINE( 838)								if ((value3 < 0)) {
HXLINE( 838)									this4 = 0;
            								}
            								else {
HXLINE( 838)									this4 = value3;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this4);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this5;
HXDLIN( 838)							if ((value4 > 255)) {
HXLINE( 838)								this5 = 255;
            							}
            							else {
HXLINE( 838)								if ((value4 < 0)) {
HXLINE( 838)									this5 = 0;
            								}
            								else {
HXLINE( 838)									this5 = value4;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 838)						{
HXLINE( 838)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this6;
HXDLIN( 838)							if ((value5 > 255)) {
HXLINE( 838)								this6 = 255;
            							}
            							else {
HXLINE( 838)								if ((value5 < 0)) {
HXLINE( 838)									this6 = 0;
            								}
            								else {
HXLINE( 838)									this6 = value5;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this7;
HXDLIN( 838)							if ((value6 > 255)) {
HXLINE( 838)								this7 = 255;
            							}
            							else {
HXLINE( 838)								if ((value6 < 0)) {
HXLINE( 838)									this7 = 0;
            								}
            								else {
HXLINE( 838)									this7 = value6;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this8;
HXDLIN( 838)							if ((value7 > 255)) {
HXLINE( 838)								this8 = 255;
            							}
            							else {
HXLINE( 838)								if ((value7 < 0)) {
HXLINE( 838)									this8 = 0;
            								}
            								else {
HXLINE( 838)									this8 = value7;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this8);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this9;
HXDLIN( 838)							if ((value8 > 255)) {
HXLINE( 838)								this9 = 255;
            							}
            							else {
HXLINE( 838)								if ((value8 < 0)) {
HXLINE( 838)									this9 = 0;
            								}
            								else {
HXLINE( 838)									this9 = value8;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 838)						{
HXLINE( 838)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this10;
HXDLIN( 838)							if ((value9 > 255)) {
HXLINE( 838)								this10 = 255;
            							}
            							else {
HXLINE( 838)								if ((value9 < 0)) {
HXLINE( 838)									this10 = 0;
            								}
            								else {
HXLINE( 838)									this10 = value9;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this11;
HXDLIN( 838)							if ((value10 > 255)) {
HXLINE( 838)								this11 = 255;
            							}
            							else {
HXLINE( 838)								if ((value10 < 0)) {
HXLINE( 838)									this11 = 0;
            								}
            								else {
HXLINE( 838)									this11 = value10;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this12;
HXDLIN( 838)							if ((value11 > 255)) {
HXLINE( 838)								this12 = 255;
            							}
            							else {
HXLINE( 838)								if ((value11 < 0)) {
HXLINE( 838)									this12 = 0;
            								}
            								else {
HXLINE( 838)									this12 = value11;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this12);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this13;
HXDLIN( 838)							if ((value12 > 255)) {
HXLINE( 838)								this13 = 255;
            							}
            							else {
HXLINE( 838)								if ((value12 < 0)) {
HXLINE( 838)									this13 = 0;
            								}
            								else {
HXLINE( 838)									this13 = value12;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 838)						{
HXLINE( 838)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this14;
HXDLIN( 838)							if ((value13 > 255)) {
HXLINE( 838)								this14 = 255;
            							}
            							else {
HXLINE( 838)								if ((value13 < 0)) {
HXLINE( 838)									this14 = 0;
            								}
            								else {
HXLINE( 838)									this14 = value13;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this15;
HXDLIN( 838)							if ((value14 > 255)) {
HXLINE( 838)								this15 = 255;
            							}
            							else {
HXLINE( 838)								if ((value14 < 0)) {
HXLINE( 838)									this15 = 0;
            								}
            								else {
HXLINE( 838)									this15 = value14;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this16;
HXDLIN( 838)							if ((value15 > 255)) {
HXLINE( 838)								this16 = 255;
            							}
            							else {
HXLINE( 838)								if ((value15 < 0)) {
HXLINE( 838)									this16 = 0;
            								}
            								else {
HXLINE( 838)									this16 = value15;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this16);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this17;
HXDLIN( 838)							if ((value16 > 255)) {
HXLINE( 838)								this17 = 255;
            							}
            							else {
HXLINE( 838)								if ((value16 < 0)) {
HXLINE( 838)									this17 = 0;
            								}
            								else {
HXLINE( 838)									this17 = value16;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 838)						{
HXLINE( 838)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this18;
HXDLIN( 838)							if ((value17 > 255)) {
HXLINE( 838)								this18 = 255;
            							}
            							else {
HXLINE( 838)								if ((value17 < 0)) {
HXLINE( 838)									this18 = 0;
            								}
            								else {
HXLINE( 838)									this18 = value17;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this19;
HXDLIN( 838)							if ((value18 > 255)) {
HXLINE( 838)								this19 = 255;
            							}
            							else {
HXLINE( 838)								if ((value18 < 0)) {
HXLINE( 838)									this19 = 0;
            								}
            								else {
HXLINE( 838)									this19 = value18;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this20;
HXDLIN( 838)							if ((value19 > 255)) {
HXLINE( 838)								this20 = 255;
            							}
            							else {
HXLINE( 838)								if ((value19 < 0)) {
HXLINE( 838)									this20 = 0;
            								}
            								else {
HXLINE( 838)									this20 = value19;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this20);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this21;
HXDLIN( 838)							if ((value20 > 255)) {
HXLINE( 838)								this21 = 255;
            							}
            							else {
HXLINE( 838)								if ((value20 < 0)) {
HXLINE( 838)									this21 = 0;
            								}
            								else {
HXLINE( 838)									this21 = value20;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE( 838)						{
HXLINE( 838)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -16711681);
HXDLIN( 838)							int this22;
HXDLIN( 838)							if ((value21 > 255)) {
HXLINE( 838)								this22 = 255;
            							}
            							else {
HXLINE( 838)								if ((value21 < 0)) {
HXLINE( 838)									this22 = 0;
            								}
            								else {
HXLINE( 838)									this22 = value21;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -65281);
HXDLIN( 838)							int this23;
HXDLIN( 838)							if ((value22 > 255)) {
HXLINE( 838)								this23 = 255;
            							}
            							else {
HXLINE( 838)								if ((value22 < 0)) {
HXLINE( 838)									this23 = 0;
            								}
            								else {
HXLINE( 838)									this23 = value22;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & -256);
HXDLIN( 838)							int this24;
HXDLIN( 838)							if ((value23 > 255)) {
HXLINE( 838)								this24 = 255;
            							}
            							else {
HXLINE( 838)								if ((value23 < 0)) {
HXLINE( 838)									this24 = 0;
            								}
            								else {
HXLINE( 838)									this24 = value23;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | this24);
            						}
HXDLIN( 838)						{
HXLINE( 838)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 838)							this1 = (this1 & 16777215);
HXDLIN( 838)							int this25;
HXDLIN( 838)							if ((value24 > 255)) {
HXLINE( 838)								this25 = 255;
            							}
            							else {
HXLINE( 838)								if ((value24 < 0)) {
HXLINE( 838)									this25 = 0;
            								}
            								else {
HXLINE( 838)									this25 = value24;
            								}
            							}
HXDLIN( 838)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 839)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_saturation,return )

Float Color_Impl__obj::set_brightness(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_842_set_brightness)
HXLINE( 843)		{
HXLINE( 843)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN( 843)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 843)			Float chroma = (value * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 843)			Float match = (value - chroma);
HXDLIN( 843)			{
HXLINE( 843)				Float Hue1 = Hue;
HXDLIN( 843)				Float Chroma = chroma;
HXDLIN( 843)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 843)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 843)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 843)				Chroma = (Chroma + match);
HXDLIN( 843)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE( 843)						{
HXLINE( 843)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this2;
HXDLIN( 843)							if ((value1 > 255)) {
HXLINE( 843)								this2 = 255;
            							}
            							else {
HXLINE( 843)								if ((value1 < 0)) {
HXLINE( 843)									this2 = 0;
            								}
            								else {
HXLINE( 843)									this2 = value1;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this3;
HXDLIN( 843)							if ((value2 > 255)) {
HXLINE( 843)								this3 = 255;
            							}
            							else {
HXLINE( 843)								if ((value2 < 0)) {
HXLINE( 843)									this3 = 0;
            								}
            								else {
HXLINE( 843)									this3 = value2;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this4;
HXDLIN( 843)							if ((value3 > 255)) {
HXLINE( 843)								this4 = 255;
            							}
            							else {
HXLINE( 843)								if ((value3 < 0)) {
HXLINE( 843)									this4 = 0;
            								}
            								else {
HXLINE( 843)									this4 = value3;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this4);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this5;
HXDLIN( 843)							if ((value4 > 255)) {
HXLINE( 843)								this5 = 255;
            							}
            							else {
HXLINE( 843)								if ((value4 < 0)) {
HXLINE( 843)									this5 = 0;
            								}
            								else {
HXLINE( 843)									this5 = value4;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 843)						{
HXLINE( 843)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this6;
HXDLIN( 843)							if ((value5 > 255)) {
HXLINE( 843)								this6 = 255;
            							}
            							else {
HXLINE( 843)								if ((value5 < 0)) {
HXLINE( 843)									this6 = 0;
            								}
            								else {
HXLINE( 843)									this6 = value5;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this7;
HXDLIN( 843)							if ((value6 > 255)) {
HXLINE( 843)								this7 = 255;
            							}
            							else {
HXLINE( 843)								if ((value6 < 0)) {
HXLINE( 843)									this7 = 0;
            								}
            								else {
HXLINE( 843)									this7 = value6;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this8;
HXDLIN( 843)							if ((value7 > 255)) {
HXLINE( 843)								this8 = 255;
            							}
            							else {
HXLINE( 843)								if ((value7 < 0)) {
HXLINE( 843)									this8 = 0;
            								}
            								else {
HXLINE( 843)									this8 = value7;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this8);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this9;
HXDLIN( 843)							if ((value8 > 255)) {
HXLINE( 843)								this9 = 255;
            							}
            							else {
HXLINE( 843)								if ((value8 < 0)) {
HXLINE( 843)									this9 = 0;
            								}
            								else {
HXLINE( 843)									this9 = value8;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 843)						{
HXLINE( 843)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this10;
HXDLIN( 843)							if ((value9 > 255)) {
HXLINE( 843)								this10 = 255;
            							}
            							else {
HXLINE( 843)								if ((value9 < 0)) {
HXLINE( 843)									this10 = 0;
            								}
            								else {
HXLINE( 843)									this10 = value9;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this11;
HXDLIN( 843)							if ((value10 > 255)) {
HXLINE( 843)								this11 = 255;
            							}
            							else {
HXLINE( 843)								if ((value10 < 0)) {
HXLINE( 843)									this11 = 0;
            								}
            								else {
HXLINE( 843)									this11 = value10;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this12;
HXDLIN( 843)							if ((value11 > 255)) {
HXLINE( 843)								this12 = 255;
            							}
            							else {
HXLINE( 843)								if ((value11 < 0)) {
HXLINE( 843)									this12 = 0;
            								}
            								else {
HXLINE( 843)									this12 = value11;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this12);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this13;
HXDLIN( 843)							if ((value12 > 255)) {
HXLINE( 843)								this13 = 255;
            							}
            							else {
HXLINE( 843)								if ((value12 < 0)) {
HXLINE( 843)									this13 = 0;
            								}
            								else {
HXLINE( 843)									this13 = value12;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 843)						{
HXLINE( 843)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this14;
HXDLIN( 843)							if ((value13 > 255)) {
HXLINE( 843)								this14 = 255;
            							}
            							else {
HXLINE( 843)								if ((value13 < 0)) {
HXLINE( 843)									this14 = 0;
            								}
            								else {
HXLINE( 843)									this14 = value13;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this15;
HXDLIN( 843)							if ((value14 > 255)) {
HXLINE( 843)								this15 = 255;
            							}
            							else {
HXLINE( 843)								if ((value14 < 0)) {
HXLINE( 843)									this15 = 0;
            								}
            								else {
HXLINE( 843)									this15 = value14;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this16;
HXDLIN( 843)							if ((value15 > 255)) {
HXLINE( 843)								this16 = 255;
            							}
            							else {
HXLINE( 843)								if ((value15 < 0)) {
HXLINE( 843)									this16 = 0;
            								}
            								else {
HXLINE( 843)									this16 = value15;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this16);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this17;
HXDLIN( 843)							if ((value16 > 255)) {
HXLINE( 843)								this17 = 255;
            							}
            							else {
HXLINE( 843)								if ((value16 < 0)) {
HXLINE( 843)									this17 = 0;
            								}
            								else {
HXLINE( 843)									this17 = value16;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 843)						{
HXLINE( 843)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this18;
HXDLIN( 843)							if ((value17 > 255)) {
HXLINE( 843)								this18 = 255;
            							}
            							else {
HXLINE( 843)								if ((value17 < 0)) {
HXLINE( 843)									this18 = 0;
            								}
            								else {
HXLINE( 843)									this18 = value17;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this19;
HXDLIN( 843)							if ((value18 > 255)) {
HXLINE( 843)								this19 = 255;
            							}
            							else {
HXLINE( 843)								if ((value18 < 0)) {
HXLINE( 843)									this19 = 0;
            								}
            								else {
HXLINE( 843)									this19 = value18;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this20;
HXDLIN( 843)							if ((value19 > 255)) {
HXLINE( 843)								this20 = 255;
            							}
            							else {
HXLINE( 843)								if ((value19 < 0)) {
HXLINE( 843)									this20 = 0;
            								}
            								else {
HXLINE( 843)									this20 = value19;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this20);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this21;
HXDLIN( 843)							if ((value20 > 255)) {
HXLINE( 843)								this21 = 255;
            							}
            							else {
HXLINE( 843)								if ((value20 < 0)) {
HXLINE( 843)									this21 = 0;
            								}
            								else {
HXLINE( 843)									this21 = value20;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE( 843)						{
HXLINE( 843)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -16711681);
HXDLIN( 843)							int this22;
HXDLIN( 843)							if ((value21 > 255)) {
HXLINE( 843)								this22 = 255;
            							}
            							else {
HXLINE( 843)								if ((value21 < 0)) {
HXLINE( 843)									this22 = 0;
            								}
            								else {
HXLINE( 843)									this22 = value21;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -65281);
HXDLIN( 843)							int this23;
HXDLIN( 843)							if ((value22 > 255)) {
HXLINE( 843)								this23 = 255;
            							}
            							else {
HXLINE( 843)								if ((value22 < 0)) {
HXLINE( 843)									this23 = 0;
            								}
            								else {
HXLINE( 843)									this23 = value22;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & -256);
HXDLIN( 843)							int this24;
HXDLIN( 843)							if ((value23 > 255)) {
HXLINE( 843)								this24 = 255;
            							}
            							else {
HXLINE( 843)								if ((value23 < 0)) {
HXLINE( 843)									this24 = 0;
            								}
            								else {
HXLINE( 843)									this24 = value23;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | this24);
            						}
HXDLIN( 843)						{
HXLINE( 843)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 843)							this1 = (this1 & 16777215);
HXDLIN( 843)							int this25;
HXDLIN( 843)							if ((value24 > 255)) {
HXLINE( 843)								this25 = 255;
            							}
            							else {
HXLINE( 843)								if ((value24 < 0)) {
HXLINE( 843)									this25 = 0;
            								}
            								else {
HXLINE( 843)									this25 = value24;
            								}
            							}
HXDLIN( 843)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 844)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_brightness,return )

Float Color_Impl__obj::set_lightness(int this1,Float value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_847_set_lightness)
HXLINE( 848)		{
HXLINE( 848)			Float Hue = ::vision::ds::_Color::Color_Impl__obj::get_hue(this1);
HXDLIN( 848)			Float Alpha = (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 848)			Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * value) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 848)			Float match = (value - (chroma / ( (Float)(2) )));
HXDLIN( 848)			{
HXLINE( 848)				Float Hue1 = Hue;
HXDLIN( 848)				Float Chroma = chroma;
HXDLIN( 848)				Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 848)				Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 848)				Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 848)				Chroma = (Chroma + match);
HXDLIN( 848)				switch((int)(::Std_obj::_hx_int(hueD))){
            					case (int)0: {
HXLINE( 848)						{
HXLINE( 848)							int value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this2;
HXDLIN( 848)							if ((value1 > 255)) {
HXLINE( 848)								this2 = 255;
            							}
            							else {
HXLINE( 848)								if ((value1 < 0)) {
HXLINE( 848)									this2 = 0;
            								}
            								else {
HXLINE( 848)									this2 = value1;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this2 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this3;
HXDLIN( 848)							if ((value2 > 255)) {
HXLINE( 848)								this3 = 255;
            							}
            							else {
HXLINE( 848)								if ((value2 < 0)) {
HXLINE( 848)									this3 = 0;
            								}
            								else {
HXLINE( 848)									this3 = value2;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this3 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value3 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this4;
HXDLIN( 848)							if ((value3 > 255)) {
HXLINE( 848)								this4 = 255;
            							}
            							else {
HXLINE( 848)								if ((value3 < 0)) {
HXLINE( 848)									this4 = 0;
            								}
            								else {
HXLINE( 848)									this4 = value3;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this4);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value4 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this5;
HXDLIN( 848)							if ((value4 > 255)) {
HXLINE( 848)								this5 = 255;
            							}
            							else {
HXLINE( 848)								if ((value4 < 0)) {
HXLINE( 848)									this5 = 0;
            								}
            								else {
HXLINE( 848)									this5 = value4;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this5 << 24));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 848)						{
HXLINE( 848)							int value5 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this6;
HXDLIN( 848)							if ((value5 > 255)) {
HXLINE( 848)								this6 = 255;
            							}
            							else {
HXLINE( 848)								if ((value5 < 0)) {
HXLINE( 848)									this6 = 0;
            								}
            								else {
HXLINE( 848)									this6 = value5;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this6 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value6 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this7;
HXDLIN( 848)							if ((value6 > 255)) {
HXLINE( 848)								this7 = 255;
            							}
            							else {
HXLINE( 848)								if ((value6 < 0)) {
HXLINE( 848)									this7 = 0;
            								}
            								else {
HXLINE( 848)									this7 = value6;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this7 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value7 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this8;
HXDLIN( 848)							if ((value7 > 255)) {
HXLINE( 848)								this8 = 255;
            							}
            							else {
HXLINE( 848)								if ((value7 < 0)) {
HXLINE( 848)									this8 = 0;
            								}
            								else {
HXLINE( 848)									this8 = value7;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this8);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value8 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this9;
HXDLIN( 848)							if ((value8 > 255)) {
HXLINE( 848)								this9 = 255;
            							}
            							else {
HXLINE( 848)								if ((value8 < 0)) {
HXLINE( 848)									this9 = 0;
            								}
            								else {
HXLINE( 848)									this9 = value8;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this9 << 24));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 848)						{
HXLINE( 848)							int value9 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this10;
HXDLIN( 848)							if ((value9 > 255)) {
HXLINE( 848)								this10 = 255;
            							}
            							else {
HXLINE( 848)								if ((value9 < 0)) {
HXLINE( 848)									this10 = 0;
            								}
            								else {
HXLINE( 848)									this10 = value9;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this10 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value10 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this11;
HXDLIN( 848)							if ((value10 > 255)) {
HXLINE( 848)								this11 = 255;
            							}
            							else {
HXLINE( 848)								if ((value10 < 0)) {
HXLINE( 848)									this11 = 0;
            								}
            								else {
HXLINE( 848)									this11 = value10;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this11 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value11 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this12;
HXDLIN( 848)							if ((value11 > 255)) {
HXLINE( 848)								this12 = 255;
            							}
            							else {
HXLINE( 848)								if ((value11 < 0)) {
HXLINE( 848)									this12 = 0;
            								}
            								else {
HXLINE( 848)									this12 = value11;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this12);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value12 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this13;
HXDLIN( 848)							if ((value12 > 255)) {
HXLINE( 848)								this13 = 255;
            							}
            							else {
HXLINE( 848)								if ((value12 < 0)) {
HXLINE( 848)									this13 = 0;
            								}
            								else {
HXLINE( 848)									this13 = value12;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this13 << 24));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 848)						{
HXLINE( 848)							int value13 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this14;
HXDLIN( 848)							if ((value13 > 255)) {
HXLINE( 848)								this14 = 255;
            							}
            							else {
HXLINE( 848)								if ((value13 < 0)) {
HXLINE( 848)									this14 = 0;
            								}
            								else {
HXLINE( 848)									this14 = value13;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this14 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value14 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this15;
HXDLIN( 848)							if ((value14 > 255)) {
HXLINE( 848)								this15 = 255;
            							}
            							else {
HXLINE( 848)								if ((value14 < 0)) {
HXLINE( 848)									this15 = 0;
            								}
            								else {
HXLINE( 848)									this15 = value14;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this15 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value15 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this16;
HXDLIN( 848)							if ((value15 > 255)) {
HXLINE( 848)								this16 = 255;
            							}
            							else {
HXLINE( 848)								if ((value15 < 0)) {
HXLINE( 848)									this16 = 0;
            								}
            								else {
HXLINE( 848)									this16 = value15;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this16);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value16 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this17;
HXDLIN( 848)							if ((value16 > 255)) {
HXLINE( 848)								this17 = 255;
            							}
            							else {
HXLINE( 848)								if ((value16 < 0)) {
HXLINE( 848)									this17 = 0;
            								}
            								else {
HXLINE( 848)									this17 = value16;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this17 << 24));
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 848)						{
HXLINE( 848)							int value17 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this18;
HXDLIN( 848)							if ((value17 > 255)) {
HXLINE( 848)								this18 = 255;
            							}
            							else {
HXLINE( 848)								if ((value17 < 0)) {
HXLINE( 848)									this18 = 0;
            								}
            								else {
HXLINE( 848)									this18 = value17;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this18 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value18 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this19;
HXDLIN( 848)							if ((value18 > 255)) {
HXLINE( 848)								this19 = 255;
            							}
            							else {
HXLINE( 848)								if ((value18 < 0)) {
HXLINE( 848)									this19 = 0;
            								}
            								else {
HXLINE( 848)									this19 = value18;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this19 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value19 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this20;
HXDLIN( 848)							if ((value19 > 255)) {
HXLINE( 848)								this20 = 255;
            							}
            							else {
HXLINE( 848)								if ((value19 < 0)) {
HXLINE( 848)									this20 = 0;
            								}
            								else {
HXLINE( 848)									this20 = value19;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this20);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value20 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this21;
HXDLIN( 848)							if ((value20 > 255)) {
HXLINE( 848)								this21 = 255;
            							}
            							else {
HXLINE( 848)								if ((value20 < 0)) {
HXLINE( 848)									this21 = 0;
            								}
            								else {
HXLINE( 848)									this21 = value20;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this21 << 24));
            						}
            					}
            					break;
            					case (int)5: {
HXLINE( 848)						{
HXLINE( 848)							int value21 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -16711681);
HXDLIN( 848)							int this22;
HXDLIN( 848)							if ((value21 > 255)) {
HXLINE( 848)								this22 = 255;
            							}
            							else {
HXLINE( 848)								if ((value21 < 0)) {
HXLINE( 848)									this22 = 0;
            								}
            								else {
HXLINE( 848)									this22 = value21;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this22 << 16));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value22 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -65281);
HXDLIN( 848)							int this23;
HXDLIN( 848)							if ((value22 > 255)) {
HXLINE( 848)								this23 = 255;
            							}
            							else {
HXLINE( 848)								if ((value22 < 0)) {
HXLINE( 848)									this23 = 0;
            								}
            								else {
HXLINE( 848)									this23 = value22;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this23 << 8));
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value23 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & -256);
HXDLIN( 848)							int this24;
HXDLIN( 848)							if ((value23 > 255)) {
HXLINE( 848)								this24 = 255;
            							}
            							else {
HXLINE( 848)								if ((value23 < 0)) {
HXLINE( 848)									this24 = 0;
            								}
            								else {
HXLINE( 848)									this24 = value23;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | this24);
            						}
HXDLIN( 848)						{
HXLINE( 848)							int value24 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 848)							this1 = (this1 & 16777215);
HXDLIN( 848)							int this25;
HXDLIN( 848)							if ((value24 > 255)) {
HXLINE( 848)								this25 = 255;
            							}
            							else {
HXLINE( 848)								if ((value24 < 0)) {
HXLINE( 848)									this25 = 0;
            								}
            								else {
HXLINE( 848)									this25 = value24;
            								}
            							}
HXDLIN( 848)							this1 = (this1 | (this25 << 24));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 849)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_lightness,return )

int Color_Impl__obj::set_rgb(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_852_set_rgb)
HXLINE( 854)		this1 = ((this1 & -16777216) | (value & 16777215));
HXLINE( 855)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,set_rgb,return )

int Color_Impl__obj::get_rgb(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_859_get_rgb)
HXDLIN( 859)		return (this1 & 16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,get_rgb,return )

Float Color_Impl__obj::maxColor(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_863_maxColor)
HXDLIN( 863)		return ::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,maxColor,return )

Float Color_Impl__obj::minColor(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_867_minColor)
HXDLIN( 867)		return ::Math_obj::min((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,minColor,return )

int Color_Impl__obj::boundChannel(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_871_boundChannel)
HXDLIN( 871)		if ((value > 255)) {
HXDLIN( 871)			return 255;
            		}
            		else {
HXDLIN( 871)			if ((value < 0)) {
HXDLIN( 871)				return 0;
            			}
            			else {
HXDLIN( 871)				return value;
            			}
            		}
HXDLIN( 871)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,boundChannel,return )

::String Color_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_878_toString)
HXDLIN( 878)		::String _hx_tmp = (HX_("0x",48,2a,00,00) + ::StringTools_obj::hex(((this1 >> 24) & 255),2));
HXDLIN( 878)		::String _hx_tmp1 = (_hx_tmp + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 878)		::String _hx_tmp2 = (_hx_tmp1 + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 878)		return (_hx_tmp2 + ::StringTools_obj::hex((this1 & 255),2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toString,return )

int Color_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_883_toInt)
HXDLIN( 883)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_Impl__obj,toInt,return )

bool Color_Impl__obj::color_greater_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_892_color_greater_than_color)
HXDLIN( 892)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_897_color_greater_than_int)
HXDLIN( 897)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_int,return )

bool Color_Impl__obj::int_greater_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_902_int_greater_than_color)
HXDLIN( 902)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_907_color_greater_than_float)
HXDLIN( 907)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_float,return )

bool Color_Impl__obj::float_greater_than_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_912_float_greater_than_color)
HXDLIN( 912)		return (lhs > rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_greater_than_color,return )

bool Color_Impl__obj::color_greater_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_917_color_greater_than_equal_color)
HXDLIN( 917)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_color,return )

bool Color_Impl__obj::color_greater_than_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_922_color_greater_than_equal_int)
HXDLIN( 922)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_int,return )

bool Color_Impl__obj::int_greater_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_927_int_greater_than_equal_color)
HXDLIN( 927)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_greater_than_equal_color,return )

bool Color_Impl__obj::color_greater_than_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_932_color_greater_than_equal_float)
HXDLIN( 932)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_greater_than_equal_float,return )

bool Color_Impl__obj::float_greater_than_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_937_float_greater_than_equal_color)
HXDLIN( 937)		return (lhs >= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_greater_than_equal_color,return )

bool Color_Impl__obj::color_less_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_942_color_less_than_color)
HXDLIN( 942)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_color,return )

bool Color_Impl__obj::color_less_than_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_947_color_less_than_int)
HXDLIN( 947)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_int,return )

bool Color_Impl__obj::int_less_than_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_952_int_less_than_color)
HXDLIN( 952)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_less_than_color,return )

bool Color_Impl__obj::color_less_than_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_957_color_less_than_float)
HXDLIN( 957)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_float,return )

bool Color_Impl__obj::float_less_than_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_962_float_less_than_color)
HXDLIN( 962)		return (lhs < rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_less_than_color,return )

bool Color_Impl__obj::color_less_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_967_color_less_than_equal_color)
HXDLIN( 967)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_color,return )

bool Color_Impl__obj::color_less_than_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_972_color_less_than_equal_int)
HXDLIN( 972)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_int,return )

bool Color_Impl__obj::int_less_than_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_977_int_less_than_equal_color)
HXDLIN( 977)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_less_than_equal_color,return )

bool Color_Impl__obj::color_less_than_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_982_color_less_than_equal_float)
HXDLIN( 982)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_less_than_equal_float,return )

bool Color_Impl__obj::float_less_than_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_987_float_less_than_equal_color)
HXDLIN( 987)		return (lhs <= rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_less_than_equal_color,return )

bool Color_Impl__obj::color_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_992_color_equal_color)
HXDLIN( 992)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_color,return )

bool Color_Impl__obj::color_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_997_color_equal_int)
HXDLIN( 997)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_int,return )

bool Color_Impl__obj::int_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1002_int_equal_color)
HXDLIN(1002)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_equal_color,return )

bool Color_Impl__obj::color_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1007_color_equal_float)
HXDLIN(1007)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_equal_float,return )

bool Color_Impl__obj::float_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1012_float_equal_color)
HXDLIN(1012)		return (lhs == rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_equal_color,return )

bool Color_Impl__obj::color_not_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1017_color_not_equal_color)
HXDLIN(1017)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_color,return )

bool Color_Impl__obj::color_not_equal_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1022_color_not_equal_int)
HXDLIN(1022)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_int,return )

bool Color_Impl__obj::int_not_equal_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1027_int_not_equal_color)
HXDLIN(1027)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_not_equal_color,return )

bool Color_Impl__obj::color_not_equal_float(int lhs,Float rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1032_color_not_equal_float)
HXDLIN(1032)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_not_equal_float,return )

bool Color_Impl__obj::float_not_equal_color(Float lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1037_float_not_equal_color)
HXDLIN(1037)		return (lhs != rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,float_not_equal_color,return )

int Color_Impl__obj::color_bitwise_and_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1042_color_bitwise_and_color)
HXDLIN(1042)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_and_color,return )

int Color_Impl__obj::color_bitwise_and_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1047_color_bitwise_and_int)
HXDLIN(1047)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_and_int,return )

int Color_Impl__obj::int_bitwise_and_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1052_int_bitwise_and_color)
HXDLIN(1052)		return (lhs & rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_and_color,return )

int Color_Impl__obj::color_bitwise_or_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1057_color_bitwise_or_color)
HXDLIN(1057)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_or_color,return )

int Color_Impl__obj::color_bitwise_or_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1062_color_bitwise_or_int)
HXDLIN(1062)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_or_int,return )

int Color_Impl__obj::int_bitwise_or_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1067_int_bitwise_or_color)
HXDLIN(1067)		return (lhs | rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_or_color,return )

int Color_Impl__obj::color_bitwise_xor_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1072_color_bitwise_xor_color)
HXDLIN(1072)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_xor_color,return )

int Color_Impl__obj::color_bitwise_xor_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1077_color_bitwise_xor_int)
HXDLIN(1077)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_xor_int,return )

int Color_Impl__obj::int_bitwise_xor_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1082_int_bitwise_xor_color)
HXDLIN(1082)		return (lhs ^ rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_xor_color,return )

int Color_Impl__obj::color_bitwise_left_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1087_color_bitwise_left_shift_color)
HXDLIN(1087)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_left_shift_color,return )

int Color_Impl__obj::color_bitwise_left_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1092_color_bitwise_left_shift_int)
HXDLIN(1092)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_left_shift_int,return )

int Color_Impl__obj::int_bitwise_left_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1097_int_bitwise_left_shift_color)
HXDLIN(1097)		return (lhs << rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_left_shift_color,return )

int Color_Impl__obj::color_bitwise_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1102_color_bitwise_right_shift_color)
HXDLIN(1102)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_right_shift_color,return )

int Color_Impl__obj::color_bitwise_right_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1107_color_bitwise_right_shift_int)
HXDLIN(1107)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_right_shift_int,return )

int Color_Impl__obj::int_bitwise_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1112_int_bitwise_right_shift_color)
HXDLIN(1112)		return (lhs >> rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_right_shift_color,return )

int Color_Impl__obj::color_bitwise_unsigned_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1117_color_bitwise_unsigned_right_shift_color)
HXDLIN(1117)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_unsigned_right_shift_color,return )

int Color_Impl__obj::color_bitwise_unsigned_right_shift_int(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1122_color_bitwise_unsigned_right_shift_int)
HXDLIN(1122)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,color_bitwise_unsigned_right_shift_int,return )

int Color_Impl__obj::int_bitwise_unsigned_right_shift_color(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_1127_int_bitwise_unsigned_right_shift_color)
HXDLIN(1127)		return ::hx::UShr(lhs,rhs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_Impl__obj,int_bitwise_unsigned_right_shift_color,return )


Color_Impl__obj::Color_Impl__obj()
{
}

bool Color_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darken") ) { outValue = darken_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSB") ) { outValue = setHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSL") ) { outValue = setHSL_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSB") ) { outValue = fromHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSL") ) { outValue = fromHSL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"to24Bit") ) { outValue = to24Bit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lighten") ) { outValue = lighten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRGBA") ) { outValue = setRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCMYK") ) { outValue = setCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getThis") ) { outValue = getThis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_red") ) { outValue = set_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_hue") ) { outValue = set_hue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_rgb") ) { outValue = set_rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rgb") ) { outValue = get_rgb_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromRGBA") ) { outValue = fromRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"from8Bit") ) { outValue = from8Bit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCMYK") ) { outValue = fromCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gradient") ) { outValue = gradient_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blue") ) { outValue = set_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cyan") ) { outValue = get_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cyan") ) { outValue = set_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxColor") ) { outValue = maxColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minColor") ) { outValue = minColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"grayscale") ) { outValue = grayscale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_green") ) { outValue = set_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { outValue = set_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_black") ) { outValue = get_black_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_black") ) { outValue = set_black_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeRandom") ) { outValue = makeRandom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yellow") ) { outValue = get_yellow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_yellow") ) { outValue = set_yellow_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHexString") ) { outValue = toHexString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toWebString") ) { outValue = toWebString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_magenta") ) { outValue = get_magenta_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_magenta") ) { outValue = set_magenta_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setRGBAFloat") ) { outValue = setRGBAFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blackOrWhite") ) { outValue = blackOrWhite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redFloat") ) { outValue = get_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redFloat") ) { outValue = set_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boundChannel") ) { outValue = boundChannel_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromRGBAFloat") ) { outValue = fromRGBAFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blueFloat") ) { outValue = get_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blueFloat") ) { outValue = set_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_lightness") ) { outValue = set_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_greenFloat") ) { outValue = get_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alphaFloat") ) { outValue = get_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_greenFloat") ) { outValue = set_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alphaFloat") ) { outValue = set_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_brightness") ) { outValue = get_brightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_saturation") ) { outValue = set_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_brightness") ) { outValue = set_brightness_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"color_equal_int") ) { outValue = color_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_equal_color") ) { outValue = int_equal_color_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getHSBColorWheel") ) { outValue = getHSBColorWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSChromaMatch") ) { outValue = setHSChromaMatch_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getTriadicHarmony") ) { outValue = getTriadicHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_equal_color") ) { outValue = color_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_equal_float") ) { outValue = color_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_equal_color") ) { outValue = float_equal_color_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getAnalogousHarmony") ) { outValue = getAnalogousHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_int") ) { outValue = color_less_than_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_less_than_color") ) { outValue = int_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_int") ) { outValue = color_not_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_not_equal_color") ) { outValue = int_not_equal_color_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getComplementHarmony") ) { outValue = getComplementHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_or_int") ) { outValue = color_bitwise_or_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_or_color") ) { outValue = int_bitwise_or_color_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"color_less_than_color") ) { outValue = color_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_float") ) { outValue = color_less_than_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_less_than_color") ) { outValue = float_less_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_color") ) { outValue = color_not_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_not_equal_float") ) { outValue = color_not_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_not_equal_color") ) { outValue = float_not_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_and_int") ) { outValue = color_bitwise_and_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_and_color") ) { outValue = int_bitwise_and_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_xor_int") ) { outValue = color_bitwise_xor_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_xor_color") ) { outValue = int_bitwise_xor_color_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"color_greater_than_int") ) { outValue = color_greater_than_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_greater_than_color") ) { outValue = int_greater_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_or_color") ) { outValue = color_bitwise_or_color_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"color_bitwise_and_color") ) { outValue = color_bitwise_and_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_xor_color") ) { outValue = color_bitwise_xor_color_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"color_greater_than_color") ) { outValue = color_greater_than_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_greater_than_float") ) { outValue = color_greater_than_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_greater_than_color") ) { outValue = float_greater_than_color_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getSplitComplementHarmony") ) { outValue = getSplitComplementHarmony_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_equal_int") ) { outValue = color_less_than_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_less_than_equal_color") ) { outValue = int_less_than_equal_color_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"color_less_than_equal_color") ) { outValue = color_less_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_less_than_equal_float") ) { outValue = color_less_than_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_less_than_equal_color") ) { outValue = float_less_than_equal_color_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_int") ) { outValue = color_greater_than_equal_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_greater_than_equal_color") ) { outValue = int_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_left_shift_int") ) { outValue = color_bitwise_left_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_left_shift_color") ) { outValue = int_bitwise_left_shift_color_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"color_bitwise_right_shift_int") ) { outValue = color_bitwise_right_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_right_shift_color") ) { outValue = int_bitwise_right_shift_color_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_color") ) { outValue = color_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_greater_than_equal_float") ) { outValue = color_greater_than_equal_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float_greater_than_equal_color") ) { outValue = float_greater_than_equal_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color_bitwise_left_shift_color") ) { outValue = color_bitwise_left_shift_color_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"color_bitwise_right_shift_color") ) { outValue = color_bitwise_right_shift_color_dyn(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"color_bitwise_unsigned_right_shift_int") ) { outValue = color_bitwise_unsigned_right_shift_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int_bitwise_unsigned_right_shift_color") ) { outValue = int_bitwise_unsigned_right_shift_color_dyn(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"color_bitwise_unsigned_right_shift_color") ) { outValue = color_bitwise_unsigned_right_shift_color_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Color_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Color_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Color_Impl__obj::TRANSPARENT,HX_("TRANSPARENT",32,37,f6,f8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::WHITE,HX_("WHITE",89,82,ab,47)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GRAY,HX_("GRAY",e3,97,2c,2f)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BLACK,HX_("BLACK",9f,0d,e0,32)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GREEN,HX_("GREEN",a3,46,db,17)},
	{::hx::fsInt,(void *) &Color_Impl__obj::YELLOW,HX_("YELLOW",74,4b,df,82)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ORANGE,HX_("ORANGE",ee,5e,3f,f8)},
	{::hx::fsInt,(void *) &Color_Impl__obj::RED,HX_("RED",31,75,3e,00)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PURPLE,HX_("PURPLE",3c,a2,0c,24)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BLUE,HX_("BLUE",9a,0a,da,2b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BROWN,HX_("BROWN",56,06,e2,36)},
	{::hx::fsInt,(void *) &Color_Impl__obj::PINK,HX_("PINK",76,ba,18,35)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAGENTA,HX_("MAGENTA",09,8e,71,8e)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CYAN,HX_("CYAN",23,0d,8d,2c)},
	{::hx::fsInt,(void *) &Color_Impl__obj::SILVER,HX_("SILVER",0d,01,5d,6a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::GOLD,HX_("GOLD",a0,5a,2a,2f)},
	{::hx::fsInt,(void *) &Color_Impl__obj::OLIVE,HX_("OLIVE",bb,ba,1b,af)},
	{::hx::fsInt,(void *) &Color_Impl__obj::MAROON,HX_("MAROON",70,33,f6,6c)},
	{::hx::fsInt,(void *) &Color_Impl__obj::BORDEAUX,HX_("BORDEAUX",fe,6f,71,b2)},
	{::hx::fsInt,(void *) &Color_Impl__obj::NAVY,HX_("NAVY",36,42,c0,33)},
	{::hx::fsInt,(void *) &Color_Impl__obj::TEAL,HX_("TEAL",9c,80,ba,37)},
	{::hx::fsInt,(void *) &Color_Impl__obj::FUCHSIA,HX_("FUCHSIA",b7,99,e3,1e)},
	{::hx::fsInt,(void *) &Color_Impl__obj::AQUA,HX_("AQUA",3c,9f,34,2b)},
	{::hx::fsInt,(void *) &Color_Impl__obj::LIME,HX_("LIME",15,df,73,32)},
	{::hx::fsInt,(void *) &Color_Impl__obj::CHARCOAL,HX_("CHARCOAL",6d,c0,d0,0a)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ONYX,HX_("ONYX",be,58,73,34)},
	{::hx::fsInt,(void *) &Color_Impl__obj::JET,HX_("JET",39,63,38,00)},
	{::hx::fsInt,(void *) &Color_Impl__obj::JET_BLACK,HX_("JET_BLACK",d9,68,33,38)},
	{::hx::fsInt,(void *) &Color_Impl__obj::ROYAL_BLUE,HX_("ROYAL_BLUE",32,33,e1,63)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &Color_Impl__obj::COLOR_REGEX,HX_("COLOR_REGEX",6b,2b,e2,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Color_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ORANGE,"ORANGE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::RED,"RED");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PURPLE,"PURPLE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BROWN,"BROWN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::PINK,"PINK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CYAN,"CYAN");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::SILVER,"SILVER");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::GOLD,"GOLD");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::OLIVE,"OLIVE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::MAROON,"MAROON");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::BORDEAUX,"BORDEAUX");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::NAVY,"NAVY");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::TEAL,"TEAL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::FUCHSIA,"FUCHSIA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::AQUA,"AQUA");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::LIME,"LIME");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::CHARCOAL,"CHARCOAL");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ONYX,"ONYX");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::JET,"JET");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::JET_BLACK,"JET_BLACK");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::ROYAL_BLUE,"ROYAL_BLUE");
	HX_MARK_MEMBER_NAME(Color_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ORANGE,"ORANGE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PURPLE,"PURPLE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BROWN,"BROWN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::PINK,"PINK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CYAN,"CYAN");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::SILVER,"SILVER");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::GOLD,"GOLD");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::OLIVE,"OLIVE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::MAROON,"MAROON");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::BORDEAUX,"BORDEAUX");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::NAVY,"NAVY");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::TEAL,"TEAL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::FUCHSIA,"FUCHSIA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::AQUA,"AQUA");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::LIME,"LIME");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::CHARCOAL,"CHARCOAL");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ONYX,"ONYX");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::JET,"JET");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::JET_BLACK,"JET_BLACK");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::ROYAL_BLUE,"ROYAL_BLUE");
	HX_VISIT_MEMBER_NAME(Color_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#endif

::hx::Class Color_Impl__obj::__mClass;

static ::String Color_Impl__obj_sStaticFields[] = {
	HX_("TRANSPARENT",32,37,f6,f8),
	HX_("WHITE",89,82,ab,47),
	HX_("GRAY",e3,97,2c,2f),
	HX_("BLACK",9f,0d,e0,32),
	HX_("GREEN",a3,46,db,17),
	HX_("YELLOW",74,4b,df,82),
	HX_("ORANGE",ee,5e,3f,f8),
	HX_("RED",31,75,3e,00),
	HX_("PURPLE",3c,a2,0c,24),
	HX_("BLUE",9a,0a,da,2b),
	HX_("BROWN",56,06,e2,36),
	HX_("PINK",76,ba,18,35),
	HX_("MAGENTA",09,8e,71,8e),
	HX_("CYAN",23,0d,8d,2c),
	HX_("SILVER",0d,01,5d,6a),
	HX_("GOLD",a0,5a,2a,2f),
	HX_("OLIVE",bb,ba,1b,af),
	HX_("MAROON",70,33,f6,6c),
	HX_("BORDEAUX",fe,6f,71,b2),
	HX_("NAVY",36,42,c0,33),
	HX_("TEAL",9c,80,ba,37),
	HX_("FUCHSIA",b7,99,e3,1e),
	HX_("AQUA",3c,9f,34,2b),
	HX_("LIME",15,df,73,32),
	HX_("CHARCOAL",6d,c0,d0,0a),
	HX_("ONYX",be,58,73,34),
	HX_("JET",39,63,38,00),
	HX_("JET_BLACK",d9,68,33,38),
	HX_("ROYAL_BLUE",32,33,e1,63),
	HX_("COLOR_REGEX",6b,2b,e2,09),
	HX_("fromInt",a5,dd,fa,57),
	HX_("fromRGBA",1e,3b,5c,a9),
	HX_("from8Bit",df,05,29,98),
	HX_("fromRGBAFloat",9e,ed,e6,8b),
	HX_("fromCMYK",66,a9,76,9f),
	HX_("fromHSB",ad,03,fa,57),
	HX_("fromHSL",b7,03,fa,57),
	HX_("fromString",db,2d,74,54),
	HX_("getHSBColorWheel",99,27,93,2f),
	HX_("interpolate",c1,d4,32,1f),
	HX_("gradient",f0,39,3f,2a),
	HX_("makeRandom",91,f6,5e,09),
	HX_("multiply",24,e2,8c,9a),
	HX_("add",21,f2,49,00),
	HX_("subtract",14,75,11,f8),
	HX_("divide",79,2f,12,bf),
	HX_("getComplementHarmony",4a,20,b6,d3),
	HX_("getAnalogousHarmony",df,79,e2,a4),
	HX_("getSplitComplementHarmony",bc,be,30,75),
	HX_("getTriadicHarmony",f4,5d,d3,ab),
	HX_("to24Bit",d0,66,f1,25),
	HX_("toHexString",11,69,b3,6d),
	HX_("toWebString",8a,5b,00,37),
	HX_("darken",5f,36,3a,21),
	HX_("lighten",bf,4a,e3,19),
	HX_("invert",16,e7,d8,9f),
	HX_("setRGBA",56,ad,14,11),
	HX_("setRGBAFloat",66,70,4d,3c),
	HX_("setCMYK",9e,1b,2f,07),
	HX_("setHSB",75,c0,66,6f),
	HX_("setHSL",7f,c0,66,6f),
	HX_("setHSChromaMatch",c2,69,0f,10),
	HX_("grayscale",c7,87,37,f3),
	HX_("blackOrWhite",87,72,7f,a7),
	HX_("_new",61,15,1f,3f),
	HX_("getThis",14,b6,7e,1f),
	HX_("validate",96,d0,e3,04),
	HX_("get_red",e8,a1,cb,26),
	HX_("get_green",1a,6b,96,dd),
	HX_("get_blue",23,fe,d3,c0),
	HX_("get_alpha",b5,03,40,65),
	HX_("get_redFloat",94,aa,fc,26),
	HX_("get_greenFloat",22,4c,51,4d),
	HX_("get_blueFloat",79,18,35,9c),
	HX_("get_alphaFloat",a7,a1,31,99),
	HX_("set_red",f4,32,cd,19),
	HX_("set_green",26,57,e7,c0),
	HX_("set_blue",97,57,31,6f),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_redFloat",08,ce,f5,3b),
	HX_("set_greenFloat",96,34,71,6d),
	HX_("set_blueFloat",85,fa,3a,e1),
	HX_("set_alphaFloat",1b,8a,51,b9),
	HX_("get_cyan",ac,00,87,c1),
	HX_("get_magenta",40,1a,98,94),
	HX_("get_yellow",3d,0f,e4,c0),
	HX_("get_black",16,32,9b,f8),
	HX_("set_cyan",20,5a,e4,6f),
	HX_("set_magenta",4c,21,05,9f),
	HX_("set_yellow",b1,ad,61,c4),
	HX_("set_black",22,1e,ec,db),
	HX_("get_hue",4f,19,c4,26),
	HX_("get_brightness",1a,16,67,db),
	HX_("get_saturation",1b,5c,97,6c),
	HX_("get_lightness",44,08,ab,98),
	HX_("set_hue",5b,aa,c5,19),
	HX_("set_saturation",8f,44,b7,8c),
	HX_("set_brightness",8e,fe,86,fb),
	HX_("set_lightness",50,ea,b0,dd),
	HX_("set_rgb",b0,34,cd,19),
	HX_("get_rgb",a4,a3,cb,26),
	HX_("maxColor",1f,c4,79,f4),
	HX_("minColor",71,de,93,41),
	HX_("boundChannel",25,1c,54,83),
	HX_("toString",ac,d0,6e,38),
	HX_("toInt",34,be,11,14),
	HX_("color_greater_than_color",c6,9d,63,3e),
	HX_("color_greater_than_int",92,4a,12,91),
	HX_("int_greater_than_color",ba,e9,06,db),
	HX_("color_greater_than_float",ff,f1,9d,f6),
	HX_("float_greater_than_color",2d,71,d6,a4),
	HX_("color_greater_than_equal_color",fb,5f,e0,96),
	HX_("color_greater_than_equal_int",87,a5,8a,56),
	HX_("int_greater_than_equal_color",ef,1a,03,3c),
	HX_("color_greater_than_equal_float",34,b4,1a,4f),
	HX_("float_greater_than_equal_color",a2,3a,d6,4a),
	HX_("color_less_than_color",0f,97,2c,ef),
	HX_("color_less_than_int",9b,2f,91,38),
	HX_("int_less_than_color",9b,0a,9d,38),
	HX_("color_less_than_float",48,eb,66,a7),
	HX_("float_less_than_color",48,ad,98,64),
	HX_("color_less_than_equal_color",04,f6,c8,49),
	HX_("color_less_than_equal_int",50,77,04,da),
	HX_("int_less_than_equal_color",90,9a,4e,29),
	HX_("color_less_than_equal_float",3d,4a,03,02),
	HX_("float_less_than_equal_color",fd,fc,b0,b2),
	HX_("color_equal_color",3c,6f,9f,59),
	HX_("color_equal_int",88,b2,2b,65),
	HX_("int_equal_color",c8,2c,54,61),
	HX_("color_equal_float",75,c3,d9,11),
	HX_("float_equal_color",f5,b4,e3,31),
	HX_("color_not_equal_color",d0,88,23,fe),
	HX_("color_not_equal_int",1c,7f,74,0c),
	HX_("int_not_equal_color",5c,fc,93,47),
	HX_("color_not_equal_float",09,dd,5d,b6),
	HX_("float_not_equal_color",09,9f,8f,73),
	HX_("color_bitwise_and_color",11,05,3f,d1),
	HX_("color_bitwise_and_int",1d,b9,8c,3d),
	HX_("int_bitwise_and_color",9d,73,5c,ae),
	HX_("color_bitwise_or_color",71,9c,74,b6),
	HX_("color_bitwise_or_int",7d,b8,7b,09),
	HX_("int_bitwise_or_color",65,43,69,af),
	HX_("color_bitwise_xor_color",d5,64,4e,44),
	HX_("color_bitwise_xor_int",e1,df,f1,6f),
	HX_("int_bitwise_xor_color",61,d3,6b,21),
	HX_("color_bitwise_left_shift_color",98,17,dd,36),
	HX_("color_bitwise_left_shift_int",e4,4b,4b,88),
	HX_("int_bitwise_left_shift_color",8c,d2,ff,db),
	HX_("color_bitwise_right_shift_color",d9,62,16,0e),
	HX_("color_bitwise_right_shift_int",e5,94,1f,cb),
	HX_("int_bitwise_right_shift_color",65,3d,57,e7),
	HX_("color_bitwise_unsigned_right_shift_color",63,d6,09,61),
	HX_("color_bitwise_unsigned_right_shift_int",ef,31,6a,40),
	HX_("int_bitwise_unsigned_right_shift_color",57,4a,97,f2),
	::String(null())
};

void Color_Impl__obj::__register()
{
	Color_Impl__obj _hx_dummy;
	Color_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds._Color.Color_Impl_",b2,c3,c7,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Color_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Color_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Color_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Color_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_19_boot)
HXDLIN(  19)		TRANSPARENT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_24_boot)
HXDLIN(  24)		WHITE = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_29_boot)
HXDLIN(  29)		GRAY = -8355712;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_34_boot)
HXDLIN(  34)		BLACK = -16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_39_boot)
HXDLIN(  39)		GREEN = -16711936;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_44_boot)
HXDLIN(  44)		YELLOW = -256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_49_boot)
HXDLIN(  49)		ORANGE = -23296;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_54_boot)
HXDLIN(  54)		RED = -65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_59_boot)
HXDLIN(  59)		PURPLE = -8388480;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_64_boot)
HXDLIN(  64)		BLUE = -16776961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_69_boot)
HXDLIN(  69)		BROWN = -7650029;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_74_boot)
HXDLIN(  74)		PINK = -16181;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_79_boot)
HXDLIN(  79)		MAGENTA = -65281;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_84_boot)
HXDLIN(  84)		CYAN = -16711681;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_89_boot)
HXDLIN(  89)		SILVER = 12632256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_94_boot)
HXDLIN(  94)		GOLD = -10496;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_99_boot)
HXDLIN(  99)		OLIVE = -8355840;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_104_boot)
HXDLIN( 104)		MAROON = -8388608;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_109_boot)
HXDLIN( 109)		BORDEAUX = -9294025;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_114_boot)
HXDLIN( 114)		NAVY = -16777088;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_119_boot)
HXDLIN( 119)		TEAL = -16744320;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_124_boot)
HXDLIN( 124)		FUCHSIA = -65281;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_129_boot)
HXDLIN( 129)		AQUA = -16711681;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_134_boot)
HXDLIN( 134)		LIME = -13447886;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_139_boot)
HXDLIN( 139)		CHARCOAL = -13220529;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_144_boot)
HXDLIN( 144)		ONYX = -13289415;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_149_boot)
HXDLIN( 149)		JET = -13355980;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_154_boot)
HXDLIN( 154)		JET_BLACK = -15856112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9279add21e623cc0_159_boot)
HXDLIN( 159)		ROYAL_BLUE = -12490271;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9279add21e623cc0_201_boot)
HXDLIN( 201)		COLOR_REGEX =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(0x|#)(([A-F0-9]{2}){3,4})$",25,93,28,2c),HX_("i",69,00,00,00));
            	}
}

} // end namespace vision
} // end namespace ds
} // end namespace _Color
