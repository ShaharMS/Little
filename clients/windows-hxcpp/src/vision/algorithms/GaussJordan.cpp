// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_vision_algorithms_GaussJordan
#include <vision/algorithms/GaussJordan.h>
#endif
#ifndef INCLUDED_vision_ds_Array2D
#include <vision/ds/Array2D.h>
#endif
#ifndef INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_
#include <vision/ds/_Matrix2D/Matrix2D_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a842bad19816d733_12_invert,"vision.algorithms.GaussJordan","invert",0xc2a02889,"vision.algorithms.GaussJordan.invert","vision/algorithms/GaussJordan.hx",12,0x87ef2ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_a842bad19816d733_64_createIdentityMatrix,"vision.algorithms.GaussJordan","createIdentityMatrix",0x9f9cf2ee,"vision.algorithms.GaussJordan.createIdentityMatrix","vision/algorithms/GaussJordan.hx",64,0x87ef2ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_a842bad19816d733_82_augmentMatrix,"vision.algorithms.GaussJordan","augmentMatrix",0x1d5cec1f,"vision.algorithms.GaussJordan.augmentMatrix","vision/algorithms/GaussJordan.hx",82,0x87ef2ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_a842bad19816d733_92_swapRows,"vision.algorithms.GaussJordan","swapRows",0x565b557f,"vision.algorithms.GaussJordan.swapRows","vision/algorithms/GaussJordan.hx",92,0x87ef2ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_a842bad19816d733_98_extractMatrix,"vision.algorithms.GaussJordan","extractMatrix",0x856c694f,"vision.algorithms.GaussJordan.extractMatrix","vision/algorithms/GaussJordan.hx",98,0x87ef2ca3)
namespace vision{
namespace algorithms{

void GaussJordan_obj::__construct() { }

Dynamic GaussJordan_obj::__CreateEmpty() { return new GaussJordan_obj; }

void *GaussJordan_obj::_hx_vtable = 0;

Dynamic GaussJordan_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GaussJordan_obj > _hx_result = new GaussJordan_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GaussJordan_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02957853;
}

 ::vision::ds::Array2D GaussJordan_obj::invert( ::vision::ds::Array2D matrix){
            	HX_STACKFRAME(&_hx_pos_a842bad19816d733_12_invert)
HXLINE(  13)		int n = matrix->height;
HXLINE(  16)		 ::vision::ds::Array2D identity = ::vision::algorithms::GaussJordan_obj::createIdentityMatrix(n);
HXLINE(  19)		::Array< ::Dynamic> augmentedMatrix = ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::to_array_array_float(matrix);
HXDLIN(  19)		 ::vision::ds::Array2D augmentedMatrix1 = ::vision::algorithms::GaussJordan_obj::augmentMatrix(augmentedMatrix,::vision::ds::_Matrix2D::Matrix2D_Impl__obj::to_array_array_float(identity));
HXLINE(  22)		{
HXLINE(  22)			int _g = 0;
HXDLIN(  22)			int _g1 = n;
HXDLIN(  22)			while((_g < _g1)){
HXLINE(  22)				_g = (_g + 1);
HXDLIN(  22)				int i = (_g - 1);
HXLINE(  24)				int pivotRow = i;
HXLINE(  25)				{
HXLINE(  25)					int _g2 = (i + 1);
HXDLIN(  25)					int _g3 = n;
HXDLIN(  25)					while((_g2 < _g3)){
HXLINE(  25)						_g2 = (_g2 + 1);
HXDLIN(  25)						int j = (_g2 - 1);
HXLINE(  26)						if ((::Math_obj::abs(( (Float)(augmentedMatrix1->inner->__get(((i * augmentedMatrix1->width) + j))) )) > ::Math_obj::abs(( (Float)(augmentedMatrix1->inner->__get(((i * augmentedMatrix1->width) + pivotRow))) )))) {
HXLINE(  27)							pivotRow = j;
            						}
            					}
            				}
HXLINE(  32)				if ((::Math_obj::abs(( (Float)(augmentedMatrix1->inner->__get(((i * augmentedMatrix1->width) + pivotRow))) )) < ((Float)1e-12))) {
HXLINE(  33)					HX_STACK_DO_THROW(HX_("Matrix is not invertible",8c,e4,2f,a5));
            				}
HXLINE(  37)				if ((pivotRow != i)) {
HXLINE(  38)					::vision::algorithms::GaussJordan_obj::swapRows(::vision::ds::_Matrix2D::Matrix2D_Impl__obj::to_array_array_float(augmentedMatrix1),i,pivotRow);
            				}
HXLINE(  42)				Float pivot = ( (Float)(augmentedMatrix1->inner->__get(((i * augmentedMatrix1->width) + i))) );
HXLINE(  43)				{
HXLINE(  43)					int _g4 = 0;
HXDLIN(  43)					int _g5 = (2 * n);
HXDLIN(  43)					while((_g4 < _g5)){
HXLINE(  43)						_g4 = (_g4 + 1);
HXDLIN(  43)						int j1 = (_g4 - 1);
HXLINE(  44)						augmentedMatrix1->inner->set((i + (j1 * augmentedMatrix1->width)),pivot);
            					}
            				}
HXLINE(  48)				{
HXLINE(  48)					int _g6 = 0;
HXDLIN(  48)					int _g7 = n;
HXDLIN(  48)					while((_g6 < _g7)){
HXLINE(  48)						_g6 = (_g6 + 1);
HXDLIN(  48)						int j2 = (_g6 - 1);
HXLINE(  49)						if ((j2 != i)) {
HXLINE(  50)							Float factor = ( (Float)(augmentedMatrix1->inner->__get(((i * augmentedMatrix1->width) + j2))) );
HXLINE(  51)							{
HXLINE(  51)								int _g8 = 0;
HXDLIN(  51)								int _g9 = (2 * n);
HXDLIN(  51)								while((_g8 < _g9)){
HXLINE(  51)									_g8 = (_g8 + 1);
HXDLIN(  51)									int k = (_g8 - 1);
HXLINE(  52)									augmentedMatrix1->inner->set((j2 + (k * augmentedMatrix1->width)),(factor * ( (Float)(augmentedMatrix1->inner->__get(((k * augmentedMatrix1->width) + i))) )));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  59)		::Array< int > _g10 = ::Array_obj< int >::__new(0);
HXDLIN(  59)		{
HXLINE(  59)			int _g11 = (n + 1);
HXDLIN(  59)			int _g12 = (2 * n);
HXDLIN(  59)			while((_g11 < _g12)){
HXLINE(  59)				_g11 = (_g11 + 1);
HXDLIN(  59)				int l = (_g11 - 1);
HXDLIN(  59)				_g10->push(l);
            			}
            		}
HXDLIN(  59)		 ::vision::ds::Array2D invertedMatrix = ::vision::algorithms::GaussJordan_obj::extractMatrix(augmentedMatrix1,n,_g10);
HXLINE(  61)		return invertedMatrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GaussJordan_obj,invert,return )

 ::vision::ds::Array2D GaussJordan_obj::createIdentityMatrix(int size){
            	HX_STACKFRAME(&_hx_pos_a842bad19816d733_64_createIdentityMatrix)
HXLINE(  65)		::Array< ::Dynamic> matrix = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			int _g1 = size;
HXDLIN(  67)			while((_g < _g1)){
HXLINE(  67)				_g = (_g + 1);
HXDLIN(  67)				int i = (_g - 1);
HXLINE(  68)				matrix->push(::Array_obj< Float >::__new());
HXLINE(  70)				{
HXLINE(  70)					int _g2 = 0;
HXDLIN(  70)					int _g3 = size;
HXDLIN(  70)					while((_g2 < _g3)){
HXLINE(  70)						_g2 = (_g2 + 1);
HXDLIN(  70)						int j = (_g2 - 1);
HXLINE(  71)						if ((i == j)) {
HXLINE(  72)							matrix->__get(i).StaticCast< ::Array< Float > >()->push(((Float)1.0));
            						}
            						else {
HXLINE(  74)							matrix->__get(i).StaticCast< ::Array< Float > >()->push(((Float)0.0));
            						}
            					}
            				}
            			}
            		}
HXLINE(  79)		return ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::from_array_array_float(matrix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GaussJordan_obj,createIdentityMatrix,return )

 ::vision::ds::Array2D GaussJordan_obj::augmentMatrix(::Array< ::Dynamic> matrix,::Array< ::Dynamic> augmentation){
            	HX_STACKFRAME(&_hx_pos_a842bad19816d733_82_augmentMatrix)
HXLINE(  83)		::Array< ::Dynamic> augmentedMatrix = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  85)		{
HXLINE(  85)			int _g = 0;
HXDLIN(  85)			int _g1 = matrix->length;
HXDLIN(  85)			while((_g < _g1)){
HXLINE(  85)				_g = (_g + 1);
HXDLIN(  85)				int i = (_g - 1);
HXLINE(  86)				augmentedMatrix->push(matrix->__get(i).StaticCast< ::Array< Float > >()->concat(augmentation->__get(i).StaticCast< ::Array< Float > >()));
            			}
            		}
HXLINE(  89)		return ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::from_array_array_float(augmentedMatrix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GaussJordan_obj,augmentMatrix,return )

void GaussJordan_obj::swapRows(::Array< ::Dynamic> matrix,int row1,int row2){
            	HX_STACKFRAME(&_hx_pos_a842bad19816d733_92_swapRows)
HXLINE(  93)		::Array< Float > temp = matrix->__get(row1).StaticCast< ::Array< Float > >();
HXLINE(  94)		matrix[row1] = matrix->__get(row2).StaticCast< ::Array< Float > >();
HXLINE(  95)		matrix[row2] = temp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GaussJordan_obj,swapRows,(void))

 ::vision::ds::Array2D GaussJordan_obj::extractMatrix( ::vision::ds::Array2D matrix,int rows,::Array< int > columns){
            	HX_STACKFRAME(&_hx_pos_a842bad19816d733_98_extractMatrix)
HXLINE(  99)		::Array< ::Dynamic> extractedMatrix = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 101)		{
HXLINE( 101)			int _g = 0;
HXDLIN( 101)			int _g1 = rows;
HXDLIN( 101)			while((_g < _g1)){
HXLINE( 101)				_g = (_g + 1);
HXDLIN( 101)				int i = (_g - 1);
HXLINE( 102)				extractedMatrix->push(::Array_obj< Float >::__new());
HXLINE( 104)				{
HXLINE( 104)					int _g2 = 0;
HXDLIN( 104)					while((_g2 < columns->length)){
HXLINE( 104)						int j = columns->__get(_g2);
HXDLIN( 104)						_g2 = (_g2 + 1);
HXLINE( 105)						extractedMatrix->__get(i).StaticCast< ::Array< Float > >()->push(( (Float)(matrix->inner->__get(((j * matrix->width) + i))) ));
            					}
            				}
            			}
            		}
HXLINE( 109)		return ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::from_array_array_float(extractedMatrix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GaussJordan_obj,extractMatrix,return )


GaussJordan_obj::GaussJordan_obj()
{
}

bool GaussJordan_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"swapRows") ) { outValue = swapRows_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"augmentMatrix") ) { outValue = augmentMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractMatrix") ) { outValue = extractMatrix_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createIdentityMatrix") ) { outValue = createIdentityMatrix_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GaussJordan_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GaussJordan_obj_sStaticStorageInfo = 0;
#endif

::hx::Class GaussJordan_obj::__mClass;

static ::String GaussJordan_obj_sStaticFields[] = {
	HX_("invert",16,e7,d8,9f),
	HX_("createIdentityMatrix",3b,2e,fd,fd),
	HX_("augmentMatrix",32,c9,a0,c8),
	HX_("swapRows",4c,91,2a,82),
	HX_("extractMatrix",62,46,b0,30),
	::String(null())
};

void GaussJordan_obj::__register()
{
	GaussJordan_obj _hx_dummy;
	GaussJordan_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.algorithms.GaussJordan",9b,ee,b8,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GaussJordan_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GaussJordan_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GaussJordan_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GaussJordan_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GaussJordan_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace algorithms
