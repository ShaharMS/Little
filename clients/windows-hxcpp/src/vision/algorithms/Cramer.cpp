// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_vision_algorithms_Cramer
#include <vision/algorithms/Cramer.h>
#endif
#ifndef INCLUDED_vision_ds_Array2D
#include <vision/ds/Array2D.h>
#endif
#ifndef INCLUDED_vision_ds__Matrix2D_Matrix2D_Impl_
#include <vision/ds/_Matrix2D/Matrix2D_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_75d4fa074b736d42_56_solveVariablesFor,"vision.algorithms.Cramer","solveVariablesFor",0x3fb5b46f,"vision.algorithms.Cramer.solveVariablesFor","vision/algorithms/Cramer.hx",56,0xb2c09df2)
namespace vision{
namespace algorithms{

void Cramer_obj::__construct() { }

Dynamic Cramer_obj::__CreateEmpty() { return new Cramer_obj; }

void *Cramer_obj::_hx_vtable = 0;

Dynamic Cramer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Cramer_obj > _hx_result = new Cramer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Cramer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0481d658;
}

::Array< Float > Cramer_obj::solveVariablesFor( ::vision::ds::Array2D coefficients,::Array< Float > solutions){
            	HX_GC_STACKFRAME(&_hx_pos_75d4fa074b736d42_56_solveVariablesFor)
HXLINE(  58)		if ((coefficients->width != solutions->length)) {
HXLINE(  58)			HX_STACK_DO_THROW(HX_("",00,00,00,00));
            		}
HXLINE(  59)		if ((coefficients->height != solutions->length)) {
HXLINE(  59)			HX_STACK_DO_THROW(HX_("",00,00,00,00));
            		}
HXLINE(  61)		 ::vision::ds::Array2D arr =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,coefficients->width,coefficients->height,null());
HXDLIN(  61)		arr->inner = coefficients->inner->copy();
HXDLIN(  61)		 ::vision::ds::Array2D A = arr;
HXLINE(  62)		 ::vision::ds::Array2D arr1 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,A->width,A->height,null());
HXDLIN(  62)		arr1->inner = A->inner->copy();
HXDLIN(  62)		 ::vision::ds::Array2D replacedA = arr1;
HXLINE(  64)		::Array< Float > variables = ::Array_obj< Float >::__new(0);
HXLINE(  66)		{
HXLINE(  66)			int _g = 0;
HXDLIN(  66)			int _g1 = solutions->length;
HXDLIN(  66)			while((_g < _g1)){
HXLINE(  66)				_g = (_g + 1);
HXDLIN(  66)				int i = (_g - 1);
HXLINE(  67)				 ::vision::ds::Array2D arr2 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,A->width,A->height,null());
HXDLIN(  67)				arr2->inner = A->inner->copy();
HXDLIN(  67)				replacedA = arr2;
HXLINE(  68)				{
HXLINE(  68)					if ((solutions->length < replacedA->height)) {
HXLINE(  68)						HX_STACK_DO_THROW(HX_("",00,00,00,00));
            					}
HXDLIN(  68)					{
HXLINE(  68)						int _g2 = 0;
HXDLIN(  68)						int _g3 = replacedA->height;
HXDLIN(  68)						while((_g2 < _g3)){
HXLINE(  68)							_g2 = (_g2 + 1);
HXDLIN(  68)							int y = (_g2 - 1);
HXDLIN(  68)							replacedA->inner->set((i + (y * replacedA->width)),solutions->__get(y));
            						}
            					}
            				}
HXLINE(  69)				int len = replacedA->width;
HXDLIN(  69)				Float _hx_tmp;
HXDLIN(  69)				switch((int)(len)){
            					case (int)0: {
HXLINE(  69)						_hx_tmp = ( (Float)(1) );
            					}
            					break;
            					case (int)1: {
HXLINE(  69)						_hx_tmp = ( (Float)(replacedA->inner->__get((0 * replacedA->width))) );
            					}
            					break;
            					case (int)2: {
HXLINE(  69)						_hx_tmp = ((( (Float)(replacedA->inner->__get((0 * replacedA->width))) ) * ( (Float)(replacedA->inner->__get((replacedA->width + 1))) )) - (( (Float)(replacedA->inner->__get(replacedA->width)) ) * ( (Float)(replacedA->inner->__get(((0 * replacedA->width) + 1))) )));
            					}
            					break;
            					default:{
HXLINE(  69)						Float determinantSum = ((Float)0.);
HXDLIN(  69)						int sign = 1;
HXDLIN(  69)						{
HXLINE(  69)							int _g4 = 0;
HXDLIN(  69)							int _g5 = replacedA->width;
HXDLIN(  69)							while((_g4 < _g5)){
HXLINE(  69)								_g4 = (_g4 + 1);
HXDLIN(  69)								int i1 = (_g4 - 1);
HXDLIN(  69)								Float current = ( (Float)(replacedA->inner->__get(((0 * replacedA->width) + i1))) );
HXDLIN(  69)								 ::Dynamic toX = null();
HXDLIN(  69)								 ::Dynamic toY = null();
HXDLIN(  69)								::Array< ::Dynamic> copy = replacedA->to2DArray();
HXDLIN(  69)								if (::hx::IsNull( toX )) {
HXLINE(  69)									toX = replacedA->width;
            								}
HXDLIN(  69)								if (::hx::IsNull( toY )) {
HXLINE(  69)									toY = replacedA->height;
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g6 = 0;
HXDLIN(  69)									int _g7 = 1;
HXDLIN(  69)									while((_g6 < _g7)){
HXLINE(  69)										_g6 = (_g6 + 1);
HXDLIN(  69)										int _ = (_g6 - 1);
HXDLIN(  69)										copy->shift();
            									}
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g8 = ( (int)(toX) );
HXDLIN(  69)									int _g9 = copy->length;
HXDLIN(  69)									while((_g8 < _g9)){
HXLINE(  69)										_g8 = (_g8 + 1);
HXDLIN(  69)										int _1 = (_g8 - 1);
HXDLIN(  69)										copy->pop();
            									}
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g10 = 0;
HXDLIN(  69)									while((_g10 < copy->length)){
HXLINE(  69)										::Array< Float > row = copy->__get(_g10).StaticCast< ::Array< Float > >();
HXDLIN(  69)										_g10 = (_g10 + 1);
HXDLIN(  69)										{
HXLINE(  69)											int _g11 = 0;
HXDLIN(  69)											int _g12 = 0;
HXDLIN(  69)											while((_g11 < _g12)){
HXLINE(  69)												_g11 = (_g11 + 1);
HXDLIN(  69)												int _2 = (_g11 - 1);
HXDLIN(  69)												row->shift();
            											}
            										}
HXDLIN(  69)										{
HXLINE(  69)											int _g13 = ( (int)(toY) );
HXDLIN(  69)											int _g14 = row->length;
HXDLIN(  69)											while((_g13 < _g14)){
HXLINE(  69)												_g13 = (_g13 + 1);
HXDLIN(  69)												int _3 = (_g13 - 1);
HXDLIN(  69)												row->pop();
            											}
            										}
            									}
            								}
HXDLIN(  69)								 ::vision::ds::Array2D childMatrix;
HXDLIN(  69)								if ((copy->length == 0)) {
HXLINE(  69)									childMatrix =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            								}
            								else {
HXLINE(  69)									 ::vision::ds::Array2D arr2d =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy->__get(0).StaticCast< ::Array< Float > >()->length,copy->length,null());
HXDLIN(  69)									::Array< Float > flat = ::Array_obj< Float >::__new(0);
HXDLIN(  69)									{
HXLINE(  69)										int _g15 = 0;
HXDLIN(  69)										while((_g15 < copy->length)){
HXLINE(  69)											::Array< Float > item = copy->__get(_g15).StaticCast< ::Array< Float > >();
HXDLIN(  69)											_g15 = (_g15 + 1);
HXDLIN(  69)											flat = flat->concat(item);
            										}
            									}
HXDLIN(  69)									arr2d->inner = flat;
HXDLIN(  69)									childMatrix = arr2d;
            								}
HXDLIN(  69)								{
HXLINE(  69)									::Array< ::Dynamic> underlyingArray = childMatrix->inner->copy();
HXDLIN(  69)									{
HXLINE(  69)										int _g16 = 0;
HXDLIN(  69)										int _g17 = childMatrix->height;
HXDLIN(  69)										while((_g16 < _g17)){
HXLINE(  69)											_g16 = (_g16 + 1);
HXDLIN(  69)											int i2 = (_g16 - 1);
HXDLIN(  69)											underlyingArray[(i1 + (i2 * childMatrix->width))] = null();
            										}
            									}
HXDLIN(  69)									::Array< ::Dynamic> _g18 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  69)									{
HXLINE(  69)										int _g19 = 0;
HXDLIN(  69)										::Array< ::Dynamic> _g20 = underlyingArray;
HXDLIN(  69)										while((_g19 < _g20->length)){
HXLINE(  69)											 ::Dynamic v = _g20->__get(_g19);
HXDLIN(  69)											_g19 = (_g19 + 1);
HXDLIN(  69)											if (::hx::IsNotNull( v )) {
HXLINE(  69)												_g18->push(v);
            											}
            										}
            									}
HXDLIN(  69)									underlyingArray = _g18;
HXDLIN(  69)									{
HXLINE(  69)										int value = (childMatrix->width - 1);
HXDLIN(  69)										childMatrix->inner->resize((value * childMatrix->height));
HXDLIN(  69)										childMatrix->width = value;
            									}
HXDLIN(  69)									childMatrix->inner = underlyingArray;
            								}
HXDLIN(  69)								Float determinantSum1 = (( (Float)(sign) ) * current);
HXDLIN(  69)								int len1 = childMatrix->width;
HXDLIN(  69)								Float determinantSum2;
HXDLIN(  69)								switch((int)(len1)){
            									case (int)0: {
HXLINE(  69)										determinantSum2 = ( (Float)(1) );
            									}
            									break;
            									case (int)1: {
HXLINE(  69)										determinantSum2 = ( (Float)(childMatrix->inner->__get((0 * childMatrix->width))) );
            									}
            									break;
            									case (int)2: {
HXLINE(  69)										determinantSum2 = ((( (Float)(childMatrix->inner->__get((0 * childMatrix->width))) ) * ( (Float)(childMatrix->inner->__get((childMatrix->width + 1))) )) - (( (Float)(childMatrix->inner->__get(childMatrix->width)) ) * ( (Float)(childMatrix->inner->__get(((0 * childMatrix->width) + 1))) )));
            									}
            									break;
            									default:{
HXLINE(  69)										Float determinantSum3 = ((Float)0.);
HXDLIN(  69)										int sign1 = 1;
HXDLIN(  69)										{
HXLINE(  69)											int _g21 = 0;
HXDLIN(  69)											int _g22 = childMatrix->width;
HXDLIN(  69)											while((_g21 < _g22)){
HXLINE(  69)												_g21 = (_g21 + 1);
HXDLIN(  69)												int i3 = (_g21 - 1);
HXDLIN(  69)												Float current1 = ( (Float)(childMatrix->inner->__get(((0 * childMatrix->width) + i3))) );
HXDLIN(  69)												 ::Dynamic toX1 = null();
HXDLIN(  69)												 ::Dynamic toY1 = null();
HXDLIN(  69)												::Array< ::Dynamic> copy1 = childMatrix->to2DArray();
HXDLIN(  69)												if (::hx::IsNull( toX1 )) {
HXLINE(  69)													toX1 = childMatrix->width;
            												}
HXDLIN(  69)												if (::hx::IsNull( toY1 )) {
HXLINE(  69)													toY1 = childMatrix->height;
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g23 = 0;
HXDLIN(  69)													int _g24 = 1;
HXDLIN(  69)													while((_g23 < _g24)){
HXLINE(  69)														_g23 = (_g23 + 1);
HXDLIN(  69)														int _4 = (_g23 - 1);
HXDLIN(  69)														copy1->shift();
            													}
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g25 = ( (int)(toX1) );
HXDLIN(  69)													int _g26 = copy1->length;
HXDLIN(  69)													while((_g25 < _g26)){
HXLINE(  69)														_g25 = (_g25 + 1);
HXDLIN(  69)														int _5 = (_g25 - 1);
HXDLIN(  69)														copy1->pop();
            													}
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g27 = 0;
HXDLIN(  69)													while((_g27 < copy1->length)){
HXLINE(  69)														::Array< Float > row1 = copy1->__get(_g27).StaticCast< ::Array< Float > >();
HXDLIN(  69)														_g27 = (_g27 + 1);
HXDLIN(  69)														{
HXLINE(  69)															int _g28 = 0;
HXDLIN(  69)															int _g29 = 0;
HXDLIN(  69)															while((_g28 < _g29)){
HXLINE(  69)																_g28 = (_g28 + 1);
HXDLIN(  69)																int _6 = (_g28 - 1);
HXDLIN(  69)																row1->shift();
            															}
            														}
HXDLIN(  69)														{
HXLINE(  69)															int _g30 = ( (int)(toY1) );
HXDLIN(  69)															int _g31 = row1->length;
HXDLIN(  69)															while((_g30 < _g31)){
HXLINE(  69)																_g30 = (_g30 + 1);
HXDLIN(  69)																int _7 = (_g30 - 1);
HXDLIN(  69)																row1->pop();
            															}
            														}
            													}
            												}
HXDLIN(  69)												 ::vision::ds::Array2D childMatrix1;
HXDLIN(  69)												if ((copy1->length == 0)) {
HXLINE(  69)													childMatrix1 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            												}
            												else {
HXLINE(  69)													 ::vision::ds::Array2D arr2d1 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy1->__get(0).StaticCast< ::Array< Float > >()->length,copy1->length,null());
HXDLIN(  69)													::Array< Float > flat1 = ::Array_obj< Float >::__new(0);
HXDLIN(  69)													{
HXLINE(  69)														int _g32 = 0;
HXDLIN(  69)														while((_g32 < copy1->length)){
HXLINE(  69)															::Array< Float > item1 = copy1->__get(_g32).StaticCast< ::Array< Float > >();
HXDLIN(  69)															_g32 = (_g32 + 1);
HXDLIN(  69)															flat1 = flat1->concat(item1);
            														}
            													}
HXDLIN(  69)													arr2d1->inner = flat1;
HXDLIN(  69)													childMatrix1 = arr2d1;
            												}
HXDLIN(  69)												{
HXLINE(  69)													::Array< ::Dynamic> underlyingArray1 = childMatrix1->inner->copy();
HXDLIN(  69)													{
HXLINE(  69)														int _g33 = 0;
HXDLIN(  69)														int _g34 = childMatrix1->height;
HXDLIN(  69)														while((_g33 < _g34)){
HXLINE(  69)															_g33 = (_g33 + 1);
HXDLIN(  69)															int i4 = (_g33 - 1);
HXDLIN(  69)															underlyingArray1[(i3 + (i4 * childMatrix1->width))] = null();
            														}
            													}
HXDLIN(  69)													::Array< ::Dynamic> _g35 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  69)													{
HXLINE(  69)														int _g36 = 0;
HXDLIN(  69)														::Array< ::Dynamic> _g37 = underlyingArray1;
HXDLIN(  69)														while((_g36 < _g37->length)){
HXLINE(  69)															 ::Dynamic v1 = _g37->__get(_g36);
HXDLIN(  69)															_g36 = (_g36 + 1);
HXDLIN(  69)															if (::hx::IsNotNull( v1 )) {
HXLINE(  69)																_g35->push(v1);
            															}
            														}
            													}
HXDLIN(  69)													underlyingArray1 = _g35;
HXDLIN(  69)													{
HXLINE(  69)														int value1 = (childMatrix1->width - 1);
HXDLIN(  69)														childMatrix1->inner->resize((value1 * childMatrix1->height));
HXDLIN(  69)														childMatrix1->width = value1;
            													}
HXDLIN(  69)													childMatrix1->inner = underlyingArray1;
            												}
HXDLIN(  69)												determinantSum3 = (determinantSum3 + ((( (Float)(sign1) ) * current1) * ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::getDeterminant(childMatrix1)));
HXDLIN(  69)												sign1 = (sign1 * -1);
            											}
            										}
HXDLIN(  69)										determinantSum2 = determinantSum3;
            									}
            								}
HXDLIN(  69)								determinantSum = (determinantSum + (determinantSum1 * determinantSum2));
HXDLIN(  69)								sign = (sign * -1);
            							}
            						}
HXDLIN(  69)						_hx_tmp = determinantSum;
            					}
            				}
HXDLIN(  69)				int len2 = A->width;
HXDLIN(  69)				Float _hx_tmp1;
HXDLIN(  69)				switch((int)(len2)){
            					case (int)0: {
HXLINE(  69)						_hx_tmp1 = ( (Float)(1) );
            					}
            					break;
            					case (int)1: {
HXLINE(  69)						_hx_tmp1 = ( (Float)(A->inner->__get((0 * A->width))) );
            					}
            					break;
            					case (int)2: {
HXLINE(  69)						_hx_tmp1 = ((( (Float)(A->inner->__get((0 * A->width))) ) * ( (Float)(A->inner->__get((A->width + 1))) )) - (( (Float)(A->inner->__get(A->width)) ) * ( (Float)(A->inner->__get(((0 * A->width) + 1))) )));
            					}
            					break;
            					default:{
HXLINE(  69)						Float determinantSum4 = ((Float)0.);
HXDLIN(  69)						int sign2 = 1;
HXDLIN(  69)						{
HXLINE(  69)							int _g38 = 0;
HXDLIN(  69)							int _g39 = A->width;
HXDLIN(  69)							while((_g38 < _g39)){
HXLINE(  69)								_g38 = (_g38 + 1);
HXDLIN(  69)								int i5 = (_g38 - 1);
HXDLIN(  69)								Float current2 = ( (Float)(A->inner->__get(((0 * A->width) + i5))) );
HXDLIN(  69)								 ::Dynamic toX2 = null();
HXDLIN(  69)								 ::Dynamic toY2 = null();
HXDLIN(  69)								::Array< ::Dynamic> copy2 = A->to2DArray();
HXDLIN(  69)								if (::hx::IsNull( toX2 )) {
HXLINE(  69)									toX2 = A->width;
            								}
HXDLIN(  69)								if (::hx::IsNull( toY2 )) {
HXLINE(  69)									toY2 = A->height;
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g40 = 0;
HXDLIN(  69)									int _g41 = 1;
HXDLIN(  69)									while((_g40 < _g41)){
HXLINE(  69)										_g40 = (_g40 + 1);
HXDLIN(  69)										int _8 = (_g40 - 1);
HXDLIN(  69)										copy2->shift();
            									}
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g42 = ( (int)(toX2) );
HXDLIN(  69)									int _g43 = copy2->length;
HXDLIN(  69)									while((_g42 < _g43)){
HXLINE(  69)										_g42 = (_g42 + 1);
HXDLIN(  69)										int _9 = (_g42 - 1);
HXDLIN(  69)										copy2->pop();
            									}
            								}
HXDLIN(  69)								{
HXLINE(  69)									int _g44 = 0;
HXDLIN(  69)									while((_g44 < copy2->length)){
HXLINE(  69)										::Array< Float > row2 = copy2->__get(_g44).StaticCast< ::Array< Float > >();
HXDLIN(  69)										_g44 = (_g44 + 1);
HXDLIN(  69)										{
HXLINE(  69)											int _g45 = 0;
HXDLIN(  69)											int _g46 = 0;
HXDLIN(  69)											while((_g45 < _g46)){
HXLINE(  69)												_g45 = (_g45 + 1);
HXDLIN(  69)												int _10 = (_g45 - 1);
HXDLIN(  69)												row2->shift();
            											}
            										}
HXDLIN(  69)										{
HXLINE(  69)											int _g47 = ( (int)(toY2) );
HXDLIN(  69)											int _g48 = row2->length;
HXDLIN(  69)											while((_g47 < _g48)){
HXLINE(  69)												_g47 = (_g47 + 1);
HXDLIN(  69)												int _11 = (_g47 - 1);
HXDLIN(  69)												row2->pop();
            											}
            										}
            									}
            								}
HXDLIN(  69)								 ::vision::ds::Array2D childMatrix2;
HXDLIN(  69)								if ((copy2->length == 0)) {
HXLINE(  69)									childMatrix2 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            								}
            								else {
HXLINE(  69)									 ::vision::ds::Array2D arr2d2 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy2->__get(0).StaticCast< ::Array< Float > >()->length,copy2->length,null());
HXDLIN(  69)									::Array< Float > flat2 = ::Array_obj< Float >::__new(0);
HXDLIN(  69)									{
HXLINE(  69)										int _g49 = 0;
HXDLIN(  69)										while((_g49 < copy2->length)){
HXLINE(  69)											::Array< Float > item2 = copy2->__get(_g49).StaticCast< ::Array< Float > >();
HXDLIN(  69)											_g49 = (_g49 + 1);
HXDLIN(  69)											flat2 = flat2->concat(item2);
            										}
            									}
HXDLIN(  69)									arr2d2->inner = flat2;
HXDLIN(  69)									childMatrix2 = arr2d2;
            								}
HXDLIN(  69)								{
HXLINE(  69)									::Array< ::Dynamic> underlyingArray2 = childMatrix2->inner->copy();
HXDLIN(  69)									{
HXLINE(  69)										int _g50 = 0;
HXDLIN(  69)										int _g51 = childMatrix2->height;
HXDLIN(  69)										while((_g50 < _g51)){
HXLINE(  69)											_g50 = (_g50 + 1);
HXDLIN(  69)											int i6 = (_g50 - 1);
HXDLIN(  69)											underlyingArray2[(i5 + (i6 * childMatrix2->width))] = null();
            										}
            									}
HXDLIN(  69)									::Array< ::Dynamic> _g52 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  69)									{
HXLINE(  69)										int _g53 = 0;
HXDLIN(  69)										::Array< ::Dynamic> _g54 = underlyingArray2;
HXDLIN(  69)										while((_g53 < _g54->length)){
HXLINE(  69)											 ::Dynamic v2 = _g54->__get(_g53);
HXDLIN(  69)											_g53 = (_g53 + 1);
HXDLIN(  69)											if (::hx::IsNotNull( v2 )) {
HXLINE(  69)												_g52->push(v2);
            											}
            										}
            									}
HXDLIN(  69)									underlyingArray2 = _g52;
HXDLIN(  69)									{
HXLINE(  69)										int value2 = (childMatrix2->width - 1);
HXDLIN(  69)										childMatrix2->inner->resize((value2 * childMatrix2->height));
HXDLIN(  69)										childMatrix2->width = value2;
            									}
HXDLIN(  69)									childMatrix2->inner = underlyingArray2;
            								}
HXDLIN(  69)								Float determinantSum5 = (( (Float)(sign2) ) * current2);
HXDLIN(  69)								int len3 = childMatrix2->width;
HXDLIN(  69)								Float determinantSum6;
HXDLIN(  69)								switch((int)(len3)){
            									case (int)0: {
HXLINE(  69)										determinantSum6 = ( (Float)(1) );
            									}
            									break;
            									case (int)1: {
HXLINE(  69)										determinantSum6 = ( (Float)(childMatrix2->inner->__get((0 * childMatrix2->width))) );
            									}
            									break;
            									case (int)2: {
HXLINE(  69)										determinantSum6 = ((( (Float)(childMatrix2->inner->__get((0 * childMatrix2->width))) ) * ( (Float)(childMatrix2->inner->__get((childMatrix2->width + 1))) )) - (( (Float)(childMatrix2->inner->__get(childMatrix2->width)) ) * ( (Float)(childMatrix2->inner->__get(((0 * childMatrix2->width) + 1))) )));
            									}
            									break;
            									default:{
HXLINE(  69)										Float determinantSum7 = ((Float)0.);
HXDLIN(  69)										int sign3 = 1;
HXDLIN(  69)										{
HXLINE(  69)											int _g55 = 0;
HXDLIN(  69)											int _g56 = childMatrix2->width;
HXDLIN(  69)											while((_g55 < _g56)){
HXLINE(  69)												_g55 = (_g55 + 1);
HXDLIN(  69)												int i7 = (_g55 - 1);
HXDLIN(  69)												Float current3 = ( (Float)(childMatrix2->inner->__get(((0 * childMatrix2->width) + i7))) );
HXDLIN(  69)												 ::Dynamic toX3 = null();
HXDLIN(  69)												 ::Dynamic toY3 = null();
HXDLIN(  69)												::Array< ::Dynamic> copy3 = childMatrix2->to2DArray();
HXDLIN(  69)												if (::hx::IsNull( toX3 )) {
HXLINE(  69)													toX3 = childMatrix2->width;
            												}
HXDLIN(  69)												if (::hx::IsNull( toY3 )) {
HXLINE(  69)													toY3 = childMatrix2->height;
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g57 = 0;
HXDLIN(  69)													int _g58 = 1;
HXDLIN(  69)													while((_g57 < _g58)){
HXLINE(  69)														_g57 = (_g57 + 1);
HXDLIN(  69)														int _12 = (_g57 - 1);
HXDLIN(  69)														copy3->shift();
            													}
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g59 = ( (int)(toX3) );
HXDLIN(  69)													int _g60 = copy3->length;
HXDLIN(  69)													while((_g59 < _g60)){
HXLINE(  69)														_g59 = (_g59 + 1);
HXDLIN(  69)														int _13 = (_g59 - 1);
HXDLIN(  69)														copy3->pop();
            													}
            												}
HXDLIN(  69)												{
HXLINE(  69)													int _g61 = 0;
HXDLIN(  69)													while((_g61 < copy3->length)){
HXLINE(  69)														::Array< Float > row3 = copy3->__get(_g61).StaticCast< ::Array< Float > >();
HXDLIN(  69)														_g61 = (_g61 + 1);
HXDLIN(  69)														{
HXLINE(  69)															int _g62 = 0;
HXDLIN(  69)															int _g63 = 0;
HXDLIN(  69)															while((_g62 < _g63)){
HXLINE(  69)																_g62 = (_g62 + 1);
HXDLIN(  69)																int _14 = (_g62 - 1);
HXDLIN(  69)																row3->shift();
            															}
            														}
HXDLIN(  69)														{
HXLINE(  69)															int _g64 = ( (int)(toY3) );
HXDLIN(  69)															int _g65 = row3->length;
HXDLIN(  69)															while((_g64 < _g65)){
HXLINE(  69)																_g64 = (_g64 + 1);
HXDLIN(  69)																int _15 = (_g64 - 1);
HXDLIN(  69)																row3->pop();
            															}
            														}
            													}
            												}
HXDLIN(  69)												 ::vision::ds::Array2D childMatrix3;
HXDLIN(  69)												if ((copy3->length == 0)) {
HXLINE(  69)													childMatrix3 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,0,0,null());
            												}
            												else {
HXLINE(  69)													 ::vision::ds::Array2D arr2d3 =  ::vision::ds::Array2D_obj::__alloc( HX_CTX ,copy3->__get(0).StaticCast< ::Array< Float > >()->length,copy3->length,null());
HXDLIN(  69)													::Array< Float > flat3 = ::Array_obj< Float >::__new(0);
HXDLIN(  69)													{
HXLINE(  69)														int _g66 = 0;
HXDLIN(  69)														while((_g66 < copy3->length)){
HXLINE(  69)															::Array< Float > item3 = copy3->__get(_g66).StaticCast< ::Array< Float > >();
HXDLIN(  69)															_g66 = (_g66 + 1);
HXDLIN(  69)															flat3 = flat3->concat(item3);
            														}
            													}
HXDLIN(  69)													arr2d3->inner = flat3;
HXDLIN(  69)													childMatrix3 = arr2d3;
            												}
HXDLIN(  69)												{
HXLINE(  69)													::Array< ::Dynamic> underlyingArray3 = childMatrix3->inner->copy();
HXDLIN(  69)													{
HXLINE(  69)														int _g67 = 0;
HXDLIN(  69)														int _g68 = childMatrix3->height;
HXDLIN(  69)														while((_g67 < _g68)){
HXLINE(  69)															_g67 = (_g67 + 1);
HXDLIN(  69)															int i8 = (_g67 - 1);
HXDLIN(  69)															underlyingArray3[(i7 + (i8 * childMatrix3->width))] = null();
            														}
            													}
HXDLIN(  69)													::Array< ::Dynamic> _g69 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  69)													{
HXLINE(  69)														int _g70 = 0;
HXDLIN(  69)														::Array< ::Dynamic> _g71 = underlyingArray3;
HXDLIN(  69)														while((_g70 < _g71->length)){
HXLINE(  69)															 ::Dynamic v3 = _g71->__get(_g70);
HXDLIN(  69)															_g70 = (_g70 + 1);
HXDLIN(  69)															if (::hx::IsNotNull( v3 )) {
HXLINE(  69)																_g69->push(v3);
            															}
            														}
            													}
HXDLIN(  69)													underlyingArray3 = _g69;
HXDLIN(  69)													{
HXLINE(  69)														int value3 = (childMatrix3->width - 1);
HXDLIN(  69)														childMatrix3->inner->resize((value3 * childMatrix3->height));
HXDLIN(  69)														childMatrix3->width = value3;
            													}
HXDLIN(  69)													childMatrix3->inner = underlyingArray3;
            												}
HXDLIN(  69)												determinantSum7 = (determinantSum7 + ((( (Float)(sign3) ) * current3) * ::vision::ds::_Matrix2D::Matrix2D_Impl__obj::getDeterminant(childMatrix3)));
HXDLIN(  69)												sign3 = (sign3 * -1);
            											}
            										}
HXDLIN(  69)										determinantSum6 = determinantSum7;
            									}
            								}
HXDLIN(  69)								determinantSum4 = (determinantSum4 + (determinantSum5 * determinantSum6));
HXDLIN(  69)								sign2 = (sign2 * -1);
            							}
            						}
HXDLIN(  69)						_hx_tmp1 = determinantSum4;
            					}
            				}
HXDLIN(  69)				variables->push((_hx_tmp / _hx_tmp1));
            			}
            		}
HXLINE(  72)		return variables;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Cramer_obj,solveVariablesFor,return )


Cramer_obj::Cramer_obj()
{
}

bool Cramer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"solveVariablesFor") ) { outValue = solveVariablesFor_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Cramer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Cramer_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Cramer_obj::__mClass;

static ::String Cramer_obj_sStaticFields[] = {
	HX_("solveVariablesFor",b1,b6,ba,96),
	::String(null())
};

void Cramer_obj::__register()
{
	Cramer_obj _hx_dummy;
	Cramer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.algorithms.Cramer",ac,f6,46,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Cramer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Cramer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Cramer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cramer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cramer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace algorithms
