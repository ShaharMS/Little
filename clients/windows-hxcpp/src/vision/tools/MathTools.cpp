// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_vision_ds_Line2D
#include <vision/ds/Line2D.h>
#endif
#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif
#ifndef INCLUDED_vision_ds_Ray2D
#include <vision/ds/Ray2D.h>
#endif
#ifndef INCLUDED_vision_ds_Rectangle
#include <vision/ds/Rectangle.h>
#endif
#ifndef INCLUDED_vision_tools_MathTools
#include <vision/tools/MathTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_39_distanceFromRayToPoint2D,"vision.tools.MathTools","distanceFromRayToPoint2D",0x7e0ba2f0,"vision.tools.MathTools.distanceFromRayToPoint2D","vision/tools/MathTools.hx",39,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_42_intersectionBetweenRay2Ds,"vision.tools.MathTools","intersectionBetweenRay2Ds",0x615a01a2,"vision.tools.MathTools.intersectionBetweenRay2Ds","vision/tools/MathTools.hx",42,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_71_distanceBetweenRays2D,"vision.tools.MathTools","distanceBetweenRays2D",0xef77b9da,"vision.tools.MathTools.distanceBetweenRays2D","vision/tools/MathTools.hx",71,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_91_findPointAtDistanceUsingX,"vision.tools.MathTools","findPointAtDistanceUsingX",0xe2d08c7f,"vision.tools.MathTools.findPointAtDistanceUsingX","vision/tools/MathTools.hx",91,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_115_findPointAtDistanceUsingY,"vision.tools.MathTools","findPointAtDistanceUsingY",0xe2d08c80,"vision.tools.MathTools.findPointAtDistanceUsingY","vision/tools/MathTools.hx",115,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_130_distanceFromLineToPoint2D,"vision.tools.MathTools","distanceFromLineToPoint2D",0x98e923a0,"vision.tools.MathTools.distanceFromLineToPoint2D","vision/tools/MathTools.hx",130,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_140_distanceBetweenLines2D,"vision.tools.MathTools","distanceBetweenLines2D",0x742ce432,"vision.tools.MathTools.distanceBetweenLines2D","vision/tools/MathTools.hx",140,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_154_radiansFromLineToPoint2D,"vision.tools.MathTools","radiansFromLineToPoint2D",0x7764a72b,"vision.tools.MathTools.radiansFromLineToPoint2D","vision/tools/MathTools.hx",154,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_157_intersectionBetweenLine2Ds,"vision.tools.MathTools","intersectionBetweenLine2Ds",0xd30135a2,"vision.tools.MathTools.intersectionBetweenLine2Ds","vision/tools/MathTools.hx",157,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_183_mirrorInsideRectangle,"vision.tools.MathTools","mirrorInsideRectangle",0x6e78f020,"vision.tools.MathTools.mirrorInsideRectangle","vision/tools/MathTools.hx",183,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_192_flipInsideRectangle,"vision.tools.MathTools","flipInsideRectangle",0x6fb6e072,"vision.tools.MathTools.flipInsideRectangle","vision/tools/MathTools.hx",192,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_201_invertInsideRectangle,"vision.tools.MathTools","invertInsideRectangle",0xe41f8529,"vision.tools.MathTools.invertInsideRectangle","vision/tools/MathTools.hx",201,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_422_clamp,"vision.tools.MathTools","clamp",0x1b8c0207,"vision.tools.MathTools.clamp","vision/tools/MathTools.hx",422,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_425_isBetweenRanges,"vision.tools.MathTools","isBetweenRanges",0x106b8bc0,"vision.tools.MathTools.isBetweenRanges","vision/tools/MathTools.hx",425,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_441_isBetweenRange,"vision.tools.MathTools","isBetweenRange",0xdfee1d53,"vision.tools.MathTools.isBetweenRange","vision/tools/MathTools.hx",441,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_448_wrapInt,"vision.tools.MathTools","wrapInt",0xbfc5af51,"vision.tools.MathTools.wrapInt","vision/tools/MathTools.hx",448,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_461_wrapFloat,"vision.tools.MathTools","wrapFloat",0xc483447e,"vision.tools.MathTools.wrapFloat","vision/tools/MathTools.hx",461,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_473_boundInt,"vision.tools.MathTools","boundInt",0xc962afc5,"vision.tools.MathTools.boundInt","vision/tools/MathTools.hx",473,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_482_boundFloat,"vision.tools.MathTools","boundFloat",0x2fb849f2,"vision.tools.MathTools.boundFloat","vision/tools/MathTools.hx",482,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_494_gamma,"vision.tools.MathTools","gamma",0x61ea1633,"vision.tools.MathTools.gamma","vision/tools/MathTools.hx",494,0x8e7fbe46)
static const Float _hx_array_data_8053de7a_25[] = {
	0.99999999999980993,676.5203681218851,-1259.1392167224028,771.32342877765313,-176.61502916214059,12.507343278686905,-0.13857109526572012,9.9843695780195716e-6,1.5056327351493116e-7,
};
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_512_factorial,"vision.tools.MathTools","factorial",0x821a9931,"vision.tools.MathTools.factorial","vision/tools/MathTools.hx",512,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_522_slopeToDegrees,"vision.tools.MathTools","slopeToDegrees",0xf8645035,"vision.tools.MathTools.slopeToDegrees","vision/tools/MathTools.hx",522,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_526_slopeToRadians,"vision.tools.MathTools","slopeToRadians",0xe4f9b300,"vision.tools.MathTools.slopeToRadians","vision/tools/MathTools.hx",526,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_530_degreesToSlope,"vision.tools.MathTools","degreesToSlope",0x9381f03d,"vision.tools.MathTools.degreesToSlope","vision/tools/MathTools.hx",530,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_534_degreesToRadians,"vision.tools.MathTools","degreesToRadians",0x027e4204,"vision.tools.MathTools.degreesToRadians","vision/tools/MathTools.hx",534,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_538_radiansToDegrees,"vision.tools.MathTools","radiansToDegrees",0x6ba44b0e,"vision.tools.MathTools.radiansToDegrees","vision/tools/MathTools.hx",538,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_542_radiansToSlope,"vision.tools.MathTools","radiansToSlope",0x3e3d4cd2,"vision.tools.MathTools.radiansToSlope","vision/tools/MathTools.hx",542,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_550_cotan,"vision.tools.MathTools","cotan",0x1d960641,"vision.tools.MathTools.cotan","vision/tools/MathTools.hx",550,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_554_cosec,"vision.tools.MathTools","cosec",0x1d954771,"vision.tools.MathTools.cosec","vision/tools/MathTools.hx",554,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_558_sec,"vision.tools.MathTools","sec",0xf83d0f9d,"vision.tools.MathTools.sec","vision/tools/MathTools.hx",558,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_562_sind,"vision.tools.MathTools","sind",0x3d33acc0,"vision.tools.MathTools.sind","vision/tools/MathTools.hx",562,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_566_cosd,"vision.tools.MathTools","cosd",0x32a4d4b1,"vision.tools.MathTools.cosd","vision/tools/MathTools.hx",566,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_570_tand,"vision.tools.MathTools","tand",0x3dd6d157,"vision.tools.MathTools.tand","vision/tools/MathTools.hx",570,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_574_cotand,"vision.tools.MathTools","cotand",0xc5af7303,"vision.tools.MathTools.cotand","vision/tools/MathTools.hx",574,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_578_cosecd,"vision.tools.MathTools","cosecd",0xc5093bd3,"vision.tools.MathTools.cosecd","vision/tools/MathTools.hx",578,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_582_secd,"vision.tools.MathTools","secd",0x3d309a27,"vision.tools.MathTools.secd","vision/tools/MathTools.hx",582,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_589_truncate,"vision.tools.MathTools","truncate",0x4b181eda,"vision.tools.MathTools.truncate","vision/tools/MathTools.hx",589,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_594_cropDecimal,"vision.tools.MathTools","cropDecimal",0xd3da8ced,"vision.tools.MathTools.cropDecimal","vision/tools/MathTools.hx",594,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_761_isInt,"vision.tools.MathTools","isInt",0x9481c631,"vision.tools.MathTools.isInt","vision/tools/MathTools.hx",761,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_774_get_NEGATIVE_INFINITY,"vision.tools.MathTools","get_NEGATIVE_INFINITY",0x10bc5b15,"vision.tools.MathTools.get_NEGATIVE_INFINITY","vision/tools/MathTools.hx",774,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_775_get_POSITIVE_INFINITY,"vision.tools.MathTools","get_POSITIVE_INFINITY",0xefbbb251,"vision.tools.MathTools.get_POSITIVE_INFINITY","vision/tools/MathTools.hx",775,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_776_get_NaN,"vision.tools.MathTools","get_NaN",0xd92eb73e,"vision.tools.MathTools.get_NaN","vision/tools/MathTools.hx",776,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_777_get_PI_OVER_2,"vision.tools.MathTools","get_PI_OVER_2",0x2e5b64f0,"vision.tools.MathTools.get_PI_OVER_2","vision/tools/MathTools.hx",777,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_778_get_PI,"vision.tools.MathTools","get_PI",0x9d1978b6,"vision.tools.MathTools.get_PI","vision/tools/MathTools.hx",778,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_781_abs,"vision.tools.MathTools","abs",0xf82f647e,"vision.tools.MathTools.abs","vision/tools/MathTools.hx",781,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_784_acos,"vision.tools.MathTools","acos",0x314948fa,"vision.tools.MathTools.acos","vision/tools/MathTools.hx",784,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_787_asin,"vision.tools.MathTools","asin",0x315567cb,"vision.tools.MathTools.asin","vision/tools/MathTools.hx",787,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_790_atan,"vision.tools.MathTools","atan",0x31562314,"vision.tools.MathTools.atan","vision/tools/MathTools.hx",790,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_793_atan2,"vision.tools.MathTools","atan2",0xfa088e9e,"vision.tools.MathTools.atan2","vision/tools/MathTools.hx",793,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_796_ceil,"vision.tools.MathTools","ceil",0x329d3579,"vision.tools.MathTools.ceil","vision/tools/MathTools.hx",796,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_799_cos,"vision.tools.MathTools","cos",0xf830f453,"vision.tools.MathTools.cos","vision/tools/MathTools.hx",799,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_802_exp,"vision.tools.MathTools","exp",0xf83280a9,"vision.tools.MathTools.exp","vision/tools/MathTools.hx",802,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_805_floor,"vision.tools.MathTools","floor",0xd5ca60d8,"vision.tools.MathTools.floor","vision/tools/MathTools.hx",805,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_808_log,"vision.tools.MathTools","log",0xf837c890,"vision.tools.MathTools.log","vision/tools/MathTools.hx",808,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_811_pow,"vision.tools.MathTools","pow",0xf83ad1a4,"vision.tools.MathTools.pow","vision/tools/MathTools.hx",811,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_814_random,"vision.tools.MathTools","random",0xb178bd77,"vision.tools.MathTools.random","vision/tools/MathTools.hx",814,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_817_round,"vision.tools.MathTools","round",0xc099875a,"vision.tools.MathTools.round","vision/tools/MathTools.hx",817,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_820_sin,"vision.tools.MathTools","sin",0xf83d1324,"vision.tools.MathTools.sin","vision/tools/MathTools.hx",820,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_823_sqrt,"vision.tools.MathTools","sqrt",0x3d39c254,"vision.tools.MathTools.sqrt","vision/tools/MathTools.hx",823,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_826_tan,"vision.tools.MathTools","tan",0xf83dce6d,"vision.tools.MathTools.tan","vision/tools/MathTools.hx",826,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_829_ffloor,"vision.tools.MathTools","ffloor",0xc4e73b1a,"vision.tools.MathTools.ffloor","vision/tools/MathTools.hx",829,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_832_fceil,"vision.tools.MathTools","fceil",0xcfcfd977,"vision.tools.MathTools.fceil","vision/tools/MathTools.hx",832,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_835_fround,"vision.tools.MathTools","fround",0xafb6619c,"vision.tools.MathTools.fround","vision/tools/MathTools.hx",835,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_838_isFinite,"vision.tools.MathTools","isFinite",0x5b073d2d,"vision.tools.MathTools.isFinite","vision/tools/MathTools.hx",838,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_841_isNaN,"vision.tools.MathTools","isNaN",0x948585fd,"vision.tools.MathTools.isNaN","vision/tools/MathTools.hx",841,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_853_parseFloat,"vision.tools.MathTools","parseFloat",0xb54671dd,"vision.tools.MathTools.parseFloat","vision/tools/MathTools.hx",853,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_856_parseInt,"vision.tools.MathTools","parseInt",0x529076f0,"vision.tools.MathTools.parseInt","vision/tools/MathTools.hx",856,0x8e7fbe46)
HX_LOCAL_STACK_FRAME(_hx_pos_14dd7a2e7e1483d6_858_parseBool,"vision.tools.MathTools","parseBool",0xe737db09,"vision.tools.MathTools.parseBool","vision/tools/MathTools.hx",858,0x8e7fbe46)
namespace vision{
namespace tools{

void MathTools_obj::__construct() { }

Dynamic MathTools_obj::__CreateEmpty() { return new MathTools_obj; }

void *MathTools_obj::_hx_vtable = 0;

Dynamic MathTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MathTools_obj > _hx_result = new MathTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MathTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23de0c48;
}

Float MathTools_obj::PI;

Float MathTools_obj::NEGATIVE_INFINITY;

Float MathTools_obj::POSITIVE_INFINITY;

Float MathTools_obj::NaN;

Float MathTools_obj::distanceFromRayToPoint2D( ::vision::ds::Ray2D ray, ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_39_distanceFromRayToPoint2D)
HXDLIN(  39)		Float vx = (point->x - ray->point->x);
HXDLIN(  39)		Float vy = (point->y - ray->point->y);
HXDLIN(  39)		Float projection = ((vx + (vy * ray->slope)) / (1 + ::Math_obj::pow(ray->slope,( (Float)(2) ))));
HXDLIN(  39)		Float x = (ray->point->x + projection);
HXDLIN(  39)		Float y = (ray->point->y + (projection * ray->slope));
HXDLIN(  39)		Float closestPoint_x = x;
HXDLIN(  39)		Float closestPoint_y = y;
HXDLIN(  39)		Float dx = (closestPoint_x - point->x);
HXDLIN(  39)		Float dy = (closestPoint_y - point->y);
HXDLIN(  39)		Float distance = ::Math_obj::sqrt((::Math_obj::pow(dx,( (Float)(2) )) + ::Math_obj::pow(dy,( (Float)(2) ))));
HXDLIN(  39)		return distance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,distanceFromRayToPoint2D,return )

 ::vision::ds::Point2D MathTools_obj::intersectionBetweenRay2Ds( ::vision::ds::Ray2D ray, ::vision::ds::Ray2D ray2){
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_42_intersectionBetweenRay2Ds)
HXLINE(  43)		Float line1StartX = ray->point->x;
HXLINE(  44)		Float line1StartY = ray->point->y;
HXLINE(  45)		Float line1EndX = (ray->point->x + (::Math_obj::cos(ray->radians) * ( (Float)(1000) )));
HXLINE(  46)		Float line1EndY = (ray->point->y + (::Math_obj::sin(ray->radians) * ( (Float)(1000) )));
HXLINE(  47)		Float line2StartX = ray2->point->x;
HXLINE(  48)		Float line2StartY = ray2->point->y;
HXLINE(  49)		Float line2EndX = (ray2->point->x + (::Math_obj::cos(ray2->radians) * ( (Float)(1000) )));
HXLINE(  50)		Float line2EndY = (ray2->point->y + (::Math_obj::sin(ray2->radians) * ( (Float)(1000) )));
HXLINE(  52)		 ::vision::ds::Point2D result = null();
HXDLIN(  52)		Float denominator = (((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY)));
HXLINE(  54)		if ((denominator == 0)) {
HXLINE(  55)			return result;
            		}
HXLINE(  52)		Float a = (line1StartY - line2StartY);
HXDLIN(  52)		Float b = (line1StartX - line2StartX);
HXDLIN(  52)		Float numerator1 = (((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b));
HXDLIN(  52)		Float numerator2 = (((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b));
HXLINE(  61)		a = (numerator1 / denominator);
HXLINE(  62)		b = (numerator2 / denominator);
HXLINE(  65)		result =  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  66)		result->x = (line1StartX + (a * (line1EndX - line1StartX)));
HXLINE(  67)		result->y = (line1StartY + (a * (line1EndY - line1StartY)));
HXLINE(  68)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,intersectionBetweenRay2Ds,return )

Float MathTools_obj::distanceBetweenRays2D( ::vision::ds::Ray2D ray, ::vision::ds::Ray2D ray2){
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_71_distanceBetweenRays2D)
HXLINE(  72)		if ((ray->radians != ray2->radians)) {
HXLINE(  72)			return ( (Float)(0) );
            		}
HXLINE(  73)		 ::vision::ds::Point2D point = ray->point;
HXLINE(  74)		Float ray2_slope;
HXDLIN(  74)		Float ray2_radians;
HXDLIN(  74)		Float ray2_degrees;
HXDLIN(  74)		 ::Dynamic m = null();
HXDLIN(  74)		 ::Dynamic degrees = (ray->degrees + 90);
HXDLIN(  74)		 ::Dynamic radians = null();
HXDLIN(  74)		 ::vision::ds::Point2D ray2_point = point;
HXDLIN(  74)		if (::hx::IsNotNull( m )) {
HXLINE(  74)			{
HXLINE(  74)				Float value = ( (Float)(m) );
HXDLIN(  74)				ray2_degrees = ((::Math_obj::atan(value) * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)				ray2_radians = ::Math_obj::atan(value);
HXDLIN(  74)				ray2_slope = value;
            			}
HXDLIN(  74)			{
HXLINE(  74)				Float value1 = ((::Math_obj::atan(( (Float)(m) )) * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)				ray2_slope = ::Math_obj::tan(((value1 * ::Math_obj::PI) / ( (Float)(180) )));
HXDLIN(  74)				ray2_radians = ((value1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN(  74)				ray2_degrees = value1;
            			}
HXDLIN(  74)			{
HXLINE(  74)				Float value2 = ::Math_obj::atan(( (Float)(m) ));
HXDLIN(  74)				ray2_slope = ::Math_obj::tan(value2);
HXDLIN(  74)				ray2_degrees = ((value2 * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)				ray2_radians = value2;
            			}
            		}
            		else {
HXLINE(  74)			if (::hx::IsNotNull( degrees )) {
HXLINE(  74)				{
HXLINE(  74)					Float value3 = ( (Float)(degrees) );
HXDLIN(  74)					ray2_slope = ::Math_obj::tan(((value3 * ::Math_obj::PI) / ( (Float)(180) )));
HXDLIN(  74)					ray2_radians = ((value3 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN(  74)					ray2_degrees = value3;
            				}
HXDLIN(  74)				{
HXLINE(  74)					Float value4 = ::Math_obj::tan(((( (Float)(degrees) ) * ::Math_obj::PI) / ( (Float)(180) )));
HXDLIN(  74)					ray2_degrees = ((::Math_obj::atan(value4) * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)					ray2_radians = ::Math_obj::atan(value4);
HXDLIN(  74)					ray2_slope = value4;
            				}
HXDLIN(  74)				{
HXLINE(  74)					Float value5 = ((( (Float)(degrees) ) * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN(  74)					ray2_slope = ::Math_obj::tan(value5);
HXDLIN(  74)					ray2_degrees = ((value5 * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)					ray2_radians = value5;
            				}
            			}
            			else {
HXLINE(  74)				if (::hx::IsNotNull( radians )) {
HXLINE(  74)					{
HXLINE(  74)						Float value6 = ( (Float)(radians) );
HXDLIN(  74)						ray2_slope = ::Math_obj::tan(value6);
HXDLIN(  74)						ray2_degrees = ((value6 * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)						ray2_radians = value6;
            					}
HXDLIN(  74)					{
HXLINE(  74)						Float value7 = ::Math_obj::tan(( (Float)(radians) ));
HXDLIN(  74)						ray2_degrees = ((::Math_obj::atan(value7) * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)						ray2_radians = ::Math_obj::atan(value7);
HXDLIN(  74)						ray2_slope = value7;
            					}
HXDLIN(  74)					{
HXLINE(  74)						Float value8 = ((( (Float)(radians) ) * ( (Float)(180) )) / ::Math_obj::PI);
HXDLIN(  74)						ray2_slope = ::Math_obj::tan(((value8 * ::Math_obj::PI) / ( (Float)(180) )));
HXDLIN(  74)						ray2_radians = ((value8 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN(  74)						ray2_degrees = value8;
            					}
            				}
            			}
            		}
HXDLIN(  74)		Float line1StartX = ray2->point->x;
HXDLIN(  74)		Float line1StartY = ray2->point->y;
HXDLIN(  74)		Float line1EndX = (ray2->point->x + (::Math_obj::cos(ray2->radians) * ( (Float)(1000) )));
HXDLIN(  74)		Float line1EndY = (ray2->point->y + (::Math_obj::sin(ray2->radians) * ( (Float)(1000) )));
HXDLIN(  74)		Float line2StartX = ray2_point->x;
HXDLIN(  74)		Float line2StartY = ray2_point->y;
HXDLIN(  74)		Float line2EndX = (ray2_point->x + (::Math_obj::cos(ray2_radians) * ( (Float)(1000) )));
HXDLIN(  74)		Float line2EndY = (ray2_point->y + (::Math_obj::sin(ray2_radians) * ( (Float)(1000) )));
HXDLIN(  74)		Float a;
HXDLIN(  74)		Float b;
HXDLIN(  74)		Float numerator1;
HXDLIN(  74)		Float numerator2;
HXDLIN(  74)		 ::vision::ds::Point2D result = null();
HXDLIN(  74)		Float denominator = (((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY)));
HXDLIN(  74)		 ::vision::ds::Point2D intersectionOfPerpendicularWithRay2;
HXDLIN(  74)		if ((denominator == 0)) {
HXLINE(  74)			intersectionOfPerpendicularWithRay2 = result;
            		}
            		else {
HXLINE(  57)			a = (line1StartY - line2StartY);
HXLINE(  58)			b = (line1StartX - line2StartX);
HXLINE(  59)			numerator1 = (((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b));
HXLINE(  60)			numerator2 = (((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b));
HXLINE(  61)			a = (numerator1 / denominator);
HXLINE(  62)			b = (numerator2 / denominator);
HXLINE(  65)			result =  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  74)			result->x = (line1StartX + (a * (line1EndX - line1StartX)));
HXDLIN(  74)			result->y = (line1StartY + (a * (line1EndY - line1StartY)));
HXDLIN(  74)			intersectionOfPerpendicularWithRay2 = result;
            		}
HXLINE(  75)		Float x = (intersectionOfPerpendicularWithRay2->x - point->x);
HXDLIN(  75)		Float y = (intersectionOfPerpendicularWithRay2->y - point->y);
HXDLIN(  75)		return ::Math_obj::sqrt(((x * x) + (y * y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,distanceBetweenRays2D,return )

 ::vision::ds::Point2D MathTools_obj::findPointAtDistanceUsingX( ::vision::ds::Ray2D ray,Float startXPos,Float distance,::hx::Null< bool >  __o_goPositive){
            		bool goPositive = __o_goPositive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_91_findPointAtDistanceUsingX)
HXLINE(  95)		distance = ::Math_obj::abs(distance);
HXLINE(  96)		Float px = ray->point->x;
HXDLIN(  96)		Float py = ray->point->y;
HXDLIN(  96)		Float y;
HXDLIN(  96)		if ((px > 0)) {
HXLINE(  96)			y = (py - (ray->slope * px));
            		}
            		else {
HXLINE(  96)			y = (py + (ray->slope * px));
            		}
HXDLIN(  96)		Float start_x = startXPos;
HXDLIN(  96)		Float start_y = ((ray->slope * startXPos) + y);
HXLINE(  97)		Float x = (start_y + 1);
HXDLIN(  97)		Float px1 = ray->point->x;
HXDLIN(  97)		Float py1 = ray->point->y;
HXDLIN(  97)		Float y1;
HXDLIN(  97)		if ((px1 > 0)) {
HXLINE(  97)			y1 = (py1 - (ray->slope * px1));
            		}
            		else {
HXLINE(  97)			y1 = (py1 + (ray->slope * px1));
            		}
HXDLIN(  97)		Float point1_x = x;
HXDLIN(  97)		Float point1_y = ((ray->slope * x) + y1);
HXDLIN(  97)		Float x1 = (start_x - point1_x);
HXDLIN(  97)		Float y2 = (start_y - point1_y);
HXDLIN(  97)		Float step = ::Math_obj::sqrt(((x1 * x1) + (y2 * y2)));
HXLINE(  98)		Float diff = (distance / step);
HXLINE(  99)		Float y3;
HXDLIN(  99)		if (goPositive) {
HXLINE(  99)			y3 = diff;
            		}
            		else {
HXLINE(  99)			y3 = -(diff);
            		}
HXDLIN(  99)		Float y4 = (start_y + y3);
HXDLIN(  99)		Float px2 = ray->point->x;
HXDLIN(  99)		Float py2 = ray->point->y;
HXDLIN(  99)		Float _hx_tmp;
HXDLIN(  99)		if ((px2 > 0)) {
HXLINE(  99)			_hx_tmp = (py2 - (ray->slope * px2));
            		}
            		else {
HXLINE(  99)			_hx_tmp = (py2 + (ray->slope * px2));
            		}
HXDLIN(  99)		return  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,((y4 - _hx_tmp) / ray->slope),y4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(MathTools_obj,findPointAtDistanceUsingX,return )

 ::vision::ds::Point2D MathTools_obj::findPointAtDistanceUsingY( ::vision::ds::Ray2D ray,Float startYPos,Float distance,::hx::Null< bool >  __o_goPositive){
            		bool goPositive = __o_goPositive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_115_findPointAtDistanceUsingY)
HXLINE( 119)		distance = ::Math_obj::abs(distance);
HXLINE( 120)		Float px = ray->point->x;
HXDLIN( 120)		Float py = ray->point->y;
HXDLIN( 120)		Float x;
HXDLIN( 120)		if ((px > 0)) {
HXLINE( 120)			x = (py - (ray->slope * px));
            		}
            		else {
HXLINE( 120)			x = (py + (ray->slope * px));
            		}
HXDLIN( 120)		Float start_x = ((startYPos - x) / ray->slope);
HXDLIN( 120)		Float start_y = startYPos;
HXLINE( 121)		Float y = (start_x + 1);
HXDLIN( 121)		Float px1 = ray->point->x;
HXDLIN( 121)		Float py1 = ray->point->y;
HXDLIN( 121)		Float x1;
HXDLIN( 121)		if ((px1 > 0)) {
HXLINE( 121)			x1 = (py1 - (ray->slope * px1));
            		}
            		else {
HXLINE( 121)			x1 = (py1 + (ray->slope * px1));
            		}
HXDLIN( 121)		Float point1_x = ((y - x1) / ray->slope);
HXDLIN( 121)		Float point1_y = y;
HXDLIN( 121)		Float x2 = (start_x - point1_x);
HXDLIN( 121)		Float y1 = (start_y - point1_y);
HXDLIN( 121)		Float step = ::Math_obj::sqrt(((x2 * x2) + (y1 * y1)));
HXLINE( 122)		Float diff = (distance / step);
HXLINE( 123)		Float x3;
HXDLIN( 123)		if (goPositive) {
HXLINE( 123)			x3 = diff;
            		}
            		else {
HXLINE( 123)			x3 = -(diff);
            		}
HXDLIN( 123)		Float x4 = (start_x + x3);
HXDLIN( 123)		Float px2 = ray->point->x;
HXDLIN( 123)		Float py2 = ray->point->y;
HXDLIN( 123)		Float _hx_tmp;
HXDLIN( 123)		if ((px2 > 0)) {
HXLINE( 123)			_hx_tmp = (py2 - (ray->slope * px2));
            		}
            		else {
HXLINE( 123)			_hx_tmp = (py2 + (ray->slope * px2));
            		}
HXDLIN( 123)		return  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,x4,((ray->slope * x4) + _hx_tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(MathTools_obj,findPointAtDistanceUsingY,return )

Float MathTools_obj::distanceFromLineToPoint2D( ::vision::ds::Line2D line, ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_130_distanceFromLineToPoint2D)
HXLINE( 131)		Float ch = ((((line->start->y - line->end->y) * point->x) + ((line->end->x - line->start->x) * point->y)) + ((line->start->x * line->end->y) - (line->end->x * line->start->y)));
HXLINE( 135)		Float del = ::Math_obj::sqrt((::Math_obj::pow((line->end->x - line->start->x),( (Float)(2) )) + ::Math_obj::pow((line->end->y - line->start->y),( (Float)(2) ))));
HXLINE( 136)		Float d = (ch / del);
HXLINE( 137)		return d;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,distanceFromLineToPoint2D,return )

Float MathTools_obj::distanceBetweenLines2D( ::vision::ds::Line2D line1, ::vision::ds::Line2D line2){
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_140_distanceBetweenLines2D)
HXLINE( 141)		Float x1 = line1->start->x;
HXDLIN( 141)		Float y1 = line1->start->y;
HXDLIN( 141)		Float x2 = line1->end->x;
HXDLIN( 141)		Float y2 = line1->end->y;
HXDLIN( 141)		Float x3 = line2->start->x;
HXDLIN( 141)		Float y3 = line2->start->y;
HXDLIN( 141)		Float x4 = line2->end->x;
HXDLIN( 141)		Float y4 = line2->end->y;
HXDLIN( 141)		Float denominator = (((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1)));
HXDLIN( 141)		 ::vision::ds::Point2D _hx_tmp;
HXDLIN( 141)		bool _hx_tmp1;
HXDLIN( 141)		bool _hx_tmp2;
HXDLIN( 141)		if ((x1 == x2)) {
HXLINE( 141)			_hx_tmp2 = (y1 == y2);
            		}
            		else {
HXLINE( 141)			_hx_tmp2 = false;
            		}
HXDLIN( 141)		if (!(_hx_tmp2)) {
HXLINE( 141)			if ((x3 == x4)) {
HXLINE( 141)				_hx_tmp1 = (y3 == y4);
            			}
            			else {
HXLINE( 141)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = true;
            		}
HXDLIN( 141)		if (_hx_tmp1) {
HXLINE( 141)			_hx_tmp = null();
            		}
            		else {
HXLINE( 141)			if ((denominator == 0)) {
HXLINE( 141)				_hx_tmp = null();
            			}
            			else {
HXLINE( 141)				Float ua = ((((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3))) / denominator);
HXDLIN( 141)				Float ub = ((((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3))) / denominator);
HXDLIN( 141)				bool _hx_tmp3;
HXDLIN( 141)				bool _hx_tmp4;
HXDLIN( 141)				bool _hx_tmp5;
HXDLIN( 141)				if (!((ua < 0))) {
HXLINE( 141)					_hx_tmp5 = (ua > 1);
            				}
            				else {
HXLINE( 141)					_hx_tmp5 = true;
            				}
HXDLIN( 141)				if (!(_hx_tmp5)) {
HXLINE( 141)					_hx_tmp4 = (ub < 0);
            				}
            				else {
HXLINE( 141)					_hx_tmp4 = true;
            				}
HXDLIN( 141)				if (!(_hx_tmp4)) {
HXLINE( 141)					_hx_tmp3 = (ub > 1);
            				}
            				else {
HXLINE( 141)					_hx_tmp3 = true;
            				}
HXDLIN( 141)				if (_hx_tmp3) {
HXLINE( 141)					_hx_tmp = null();
            				}
            				else {
HXLINE( 141)					Float x = (x1 + (ua * (x2 - x1)));
HXDLIN( 141)					Float y = (y1 + (ua * (y2 - y1)));
HXDLIN( 141)					Float _g = ( (Float)(::Std_obj::_hx_int(x)) );
HXDLIN( 141)					_hx_tmp =  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_g,( (Float)(::Std_obj::_hx_int(y)) ));
            				}
            			}
            		}
HXDLIN( 141)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 142)			return ( (Float)(0) );
            		}
HXLINE( 144)		 ::vision::ds::Point2D point = line2->start;
HXDLIN( 144)		Float ch = ((((line1->start->y - line1->end->y) * point->x) + ((line1->end->x - line1->start->x) * point->y)) + ((line1->start->x * line1->end->y) - (line1->end->x * line1->start->y)));
HXDLIN( 144)		Float del = ::Math_obj::sqrt((::Math_obj::pow((line1->end->x - line1->start->x),( (Float)(2) )) + ::Math_obj::pow((line1->end->y - line1->start->y),( (Float)(2) ))));
HXDLIN( 144)		Float d = (ch / del);
HXDLIN( 144)		Float distance1 = d;
HXLINE( 145)		 ::vision::ds::Point2D point1 = line2->end;
HXDLIN( 145)		Float ch1 = ((((line1->start->y - line1->end->y) * point1->x) + ((line1->end->x - line1->start->x) * point1->y)) + ((line1->start->x * line1->end->y) - (line1->end->x * line1->start->y)));
HXDLIN( 145)		Float del1 = ::Math_obj::sqrt((::Math_obj::pow((line1->end->x - line1->start->x),( (Float)(2) )) + ::Math_obj::pow((line1->end->y - line1->start->y),( (Float)(2) ))));
HXDLIN( 145)		Float d1 = (ch1 / del1);
HXDLIN( 145)		Float distance2 = d1;
HXLINE( 146)		 ::vision::ds::Point2D point2 = line1->start;
HXDLIN( 146)		Float ch2 = ((((line2->start->y - line2->end->y) * point2->x) + ((line2->end->x - line2->start->x) * point2->y)) + ((line2->start->x * line2->end->y) - (line2->end->x * line2->start->y)));
HXDLIN( 146)		Float del2 = ::Math_obj::sqrt((::Math_obj::pow((line2->end->x - line2->start->x),( (Float)(2) )) + ::Math_obj::pow((line2->end->y - line2->start->y),( (Float)(2) ))));
HXDLIN( 146)		Float d2 = (ch2 / del2);
HXDLIN( 146)		Float distance3 = d2;
HXLINE( 147)		 ::vision::ds::Point2D point3 = line1->end;
HXDLIN( 147)		Float ch3 = ((((line2->start->y - line2->end->y) * point3->x) + ((line2->end->x - line2->start->x) * point3->y)) + ((line2->start->x * line2->end->y) - (line2->end->x * line2->start->y)));
HXDLIN( 147)		Float del3 = ::Math_obj::sqrt((::Math_obj::pow((line2->end->x - line2->start->x),( (Float)(2) )) + ::Math_obj::pow((line2->end->y - line2->start->y),( (Float)(2) ))));
HXDLIN( 147)		Float d3 = (ch3 / del3);
HXDLIN( 147)		Float distance4 = d3;
HXLINE( 149)		::Array< Float > values = ::Array_obj< Float >::__new(4)->init(0,distance1)->init(1,distance2)->init(2,distance3)->init(3,distance4);
HXDLIN( 149)		Float min = values->__get(0);
HXDLIN( 149)		{
HXLINE( 149)			int _g1 = 0;
HXDLIN( 149)			int _g2 = values->length;
HXDLIN( 149)			while((_g1 < _g2)){
HXLINE( 149)				_g1 = (_g1 + 1);
HXDLIN( 149)				int i = (_g1 - 1);
HXDLIN( 149)				if ((values->__get(i) < min)) {
HXLINE( 149)					min = values->__get(i);
            				}
            			}
            		}
HXDLIN( 149)		Float distance = min;
HXLINE( 150)		return distance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,distanceBetweenLines2D,return )

Float MathTools_obj::radiansFromLineToPoint2D( ::vision::ds::Line2D line, ::vision::ds::Point2D point){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_154_radiansFromLineToPoint2D)
HXDLIN( 154)		Float angle = ::Math_obj::atan2((line->end->x - line->start->x),(line->end->y - line->start->y));
HXDLIN( 154)		Float angle2 = ::Math_obj::atan2((point->x - line->start->x),(point->y - line->start->y));
HXDLIN( 154)		return (angle2 - angle);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,radiansFromLineToPoint2D,return )

 ::vision::ds::Point2D MathTools_obj::intersectionBetweenLine2Ds( ::vision::ds::Line2D line1, ::vision::ds::Line2D line2){
            	HX_GC_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_157_intersectionBetweenLine2Ds)
HXLINE( 158)		Float x1 = line1->start->x;
HXDLIN( 158)		Float y1 = line1->start->y;
HXLINE( 159)		Float x2 = line1->end->x;
HXDLIN( 159)		Float y2 = line1->end->y;
HXLINE( 160)		Float x3 = line2->start->x;
HXDLIN( 160)		Float y3 = line2->start->y;
HXLINE( 161)		Float x4 = line2->end->x;
HXDLIN( 161)		Float y4 = line2->end->y;
HXLINE( 162)		Float denominator = (((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1)));
HXLINE( 164)		bool _hx_tmp;
HXDLIN( 164)		bool _hx_tmp1;
HXDLIN( 164)		if ((x1 == x2)) {
HXLINE( 164)			_hx_tmp1 = (y1 == y2);
            		}
            		else {
HXLINE( 164)			_hx_tmp1 = false;
            		}
HXDLIN( 164)		if (!(_hx_tmp1)) {
HXLINE( 164)			if ((x3 == x4)) {
HXLINE( 164)				_hx_tmp = (y3 == y4);
            			}
            			else {
HXLINE( 164)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 164)			_hx_tmp = true;
            		}
HXDLIN( 164)		if (_hx_tmp) {
HXLINE( 165)			return null();
            		}
HXLINE( 166)		if ((denominator == 0)) {
HXLINE( 167)			return null();
            		}
HXLINE( 169)		Float ua = ((((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3))) / denominator);
HXLINE( 170)		Float ub = ((((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3))) / denominator);
HXLINE( 173)		bool _hx_tmp2;
HXDLIN( 173)		bool _hx_tmp3;
HXDLIN( 173)		bool _hx_tmp4;
HXDLIN( 173)		if (!((ua < 0))) {
HXLINE( 173)			_hx_tmp4 = (ua > 1);
            		}
            		else {
HXLINE( 173)			_hx_tmp4 = true;
            		}
HXDLIN( 173)		if (!(_hx_tmp4)) {
HXLINE( 173)			_hx_tmp3 = (ub < 0);
            		}
            		else {
HXLINE( 173)			_hx_tmp3 = true;
            		}
HXDLIN( 173)		if (!(_hx_tmp3)) {
HXLINE( 173)			_hx_tmp2 = (ub > 1);
            		}
            		else {
HXLINE( 173)			_hx_tmp2 = true;
            		}
HXDLIN( 173)		if (_hx_tmp2) {
HXLINE( 174)			return null();
            		}
HXLINE( 177)		Float x = (x1 + (ua * (x2 - x1)));
HXLINE( 178)		Float y = (y1 + (ua * (y2 - y1)));
HXLINE( 180)		Float _g = ( (Float)(::Std_obj::_hx_int(x)) );
HXDLIN( 180)		return  ::vision::ds::Point2D_obj::__alloc( HX_CTX ,_g,( (Float)(::Std_obj::_hx_int(y)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,intersectionBetweenLine2Ds,return )

 ::vision::ds::Line2D MathTools_obj::mirrorInsideRectangle( ::vision::ds::Line2D line, ::vision::ds::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_183_mirrorInsideRectangle)
HXLINE( 184)		Float diffSX = (line->start->x - ( (Float)(rect->x) ));
HXLINE( 185)		Float diffEX = (line->end->x - ( (Float)(rect->x) ));
HXLINE( 187)		line->start->x = (( (Float)((rect->x + rect->width)) ) - diffSX);
HXLINE( 188)		line->end->x = (( (Float)((rect->x + rect->width)) ) - diffEX);
HXLINE( 189)		return line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,mirrorInsideRectangle,return )

 ::vision::ds::Line2D MathTools_obj::flipInsideRectangle( ::vision::ds::Line2D line, ::vision::ds::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_192_flipInsideRectangle)
HXLINE( 193)		Float diffSY = (line->start->y - ( (Float)(rect->y) ));
HXLINE( 194)		Float diffEY = (line->end->y - ( (Float)(rect->y) ));
HXLINE( 196)		line->start->y = (( (Float)((rect->y + rect->width)) ) - diffSY);
HXLINE( 197)		line->end->y = (( (Float)((rect->y + rect->width)) ) - diffEY);
HXLINE( 198)		return line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,flipInsideRectangle,return )

 ::vision::ds::Line2D MathTools_obj::invertInsideRectangle( ::vision::ds::Line2D line, ::vision::ds::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_201_invertInsideRectangle)
HXLINE( 202)		Float diffSY = (line->start->y - ( (Float)(rect->y) ));
HXLINE( 203)		Float diffEY = (line->end->y - ( (Float)(rect->y) ));
HXLINE( 204)		Float diffSX = (line->start->x - ( (Float)(rect->x) ));
HXLINE( 205)		Float diffEX = (line->end->x - ( (Float)(rect->x) ));
HXLINE( 207)		line->start->x = (( (Float)((rect->x + rect->width)) ) - diffSX);
HXLINE( 208)		line->end->x = (( (Float)((rect->x + rect->width)) ) - diffEX);
HXLINE( 209)		line->start->y = (( (Float)((rect->y + rect->width)) ) - diffSY);
HXLINE( 210)		line->end->y = (( (Float)((rect->y + rect->width)) ) - diffEY);
HXLINE( 211)		return line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,invertInsideRectangle,return )

int MathTools_obj::clamp(int value,int mi,int ma){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_422_clamp)
HXDLIN( 422)		::Array< int > values = ::Array_obj< int >::__new(2)->init(0,value)->init(1,mi);
HXDLIN( 422)		int max = values->__get(0);
HXDLIN( 422)		{
HXDLIN( 422)			int _g = 0;
HXDLIN( 422)			int _g1 = values->length;
HXDLIN( 422)			while((_g < _g1)){
HXDLIN( 422)				_g = (_g + 1);
HXDLIN( 422)				int i = (_g - 1);
HXDLIN( 422)				if ((values->__get(i) > max)) {
HXDLIN( 422)					max = values->__get(i);
            				}
            			}
            		}
HXDLIN( 422)		::Array< int > values1 = ::Array_obj< int >::__new(2)->init(0,max)->init(1,ma);
HXDLIN( 422)		int min = values1->__get(0);
HXDLIN( 422)		{
HXDLIN( 422)			int _g2 = 0;
HXDLIN( 422)			int _g3 = values1->length;
HXDLIN( 422)			while((_g2 < _g3)){
HXDLIN( 422)				_g2 = (_g2 + 1);
HXDLIN( 422)				int i1 = (_g2 - 1);
HXDLIN( 422)				if ((values1->__get(i1) < min)) {
HXDLIN( 422)					min = values1->__get(i1);
            				}
            			}
            		}
HXDLIN( 422)		return min;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,clamp,return )

bool MathTools_obj::isBetweenRanges(Float value,::Array< ::Dynamic> ranges){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_425_isBetweenRanges)
HXLINE( 426)		bool between = false;
HXLINE( 427)		{
HXLINE( 427)			int _g_current = 0;
HXDLIN( 427)			::Array< ::Dynamic> _g_args = ranges;
HXDLIN( 427)			while((_g_current < _g_args->length)){
HXLINE( 427)				_g_current = (_g_current + 1);
HXDLIN( 427)				 ::Dynamic range = _g_args->__get((_g_current - 1));
HXLINE( 428)				if (::hx::IsLess( range->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),range->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic) )) {
HXLINE( 429)					Float temp = ( (Float)(range->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) );
HXLINE( 430)					range->__SetField(HX_("start",62,74,0b,84),range->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 431)					range->__SetField(HX_("end",db,03,4d,00),temp,::hx::paccDynamic);
            				}
HXLINE( 433)				if (::hx::IsGreater( value,range->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic) )) {
HXLINE( 433)					between = ::hx::IsGreater( value,range->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 433)					between = false;
            				}
HXLINE( 434)				if (between) {
HXLINE( 435)					return true;
            				}
            			}
            		}
HXLINE( 437)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,isBetweenRanges,return )

bool MathTools_obj::isBetweenRange(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_441_isBetweenRange)
HXDLIN( 441)		if ((value > min)) {
HXDLIN( 441)			return (value > max);
            		}
            		else {
HXDLIN( 441)			return false;
            		}
HXDLIN( 441)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,isBetweenRange,return )

int MathTools_obj::wrapInt(int value,int min,int max){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_448_wrapInt)
HXLINE( 449)		int range = ((max - min) + 1);
HXLINE( 451)		if ((value < min)) {
HXLINE( 452)			value = (value + (range * ::Std_obj::_hx_int(((( (Float)((min - value)) ) / ( (Float)(range) )) + 1))));
            		}
HXLINE( 454)		return (min + ::hx::Mod((value - min),range));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,wrapInt,return )

Float MathTools_obj::wrapFloat(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_461_wrapFloat)
HXLINE( 462)		Float range = (max - min);
HXLINE( 464)		if ((value < min)) {
HXLINE( 465)			value = (value + (((range * (min - value)) / range) + 1));
            		}
HXLINE( 467)		return (min + ::hx::Mod((value - min),range));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,wrapFloat,return )

int MathTools_obj::boundInt(int value,int min,int max){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_473_boundInt)
HXLINE( 474)		if ((value < min)) {
HXLINE( 474)			return min;
            		}
HXLINE( 475)		if ((value > max)) {
HXLINE( 475)			return max;
            		}
HXLINE( 476)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,boundInt,return )

Float MathTools_obj::boundFloat(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_482_boundFloat)
HXLINE( 483)		Float t;
HXDLIN( 483)		if ((value < min)) {
HXLINE( 483)			t = min;
            		}
            		else {
HXLINE( 483)			t = value;
            		}
HXLINE( 484)		if ((t > max)) {
HXLINE( 484)			return max;
            		}
            		else {
HXLINE( 484)			return t;
            		}
HXDLIN( 484)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathTools_obj,boundFloat,return )

Float MathTools_obj::gamma(Float x){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_494_gamma)
HXLINE( 495)		Float g = ((Float)7.0);
HXDLIN( 495)		::Array< Float > p = ::Array_obj< Float >::fromData( _hx_array_data_8053de7a_25,9);
HXLINE( 500)		if ((x < ((Float)0.5))) {
HXLINE( 500)			Float _hx_tmp = ::Math_obj::PI;
HXDLIN( 500)			Float _hx_tmp1 = ::Math_obj::sin((::Math_obj::PI * x));
HXDLIN( 500)			return (_hx_tmp / (_hx_tmp1 * ::vision::tools::MathTools_obj::gamma((( (Float)(1) ) - x))));
            		}
            		else {
HXLINE( 502)			x = (x - ( (Float)(1) ));
HXLINE( 503)			Float a = p->__get(0);
HXLINE( 504)			Float t = ((x + g) + ((Float)0.5));
HXLINE( 505)			{
HXLINE( 505)				int _g = 1;
HXDLIN( 505)				int _g1 = p->length;
HXDLIN( 505)				while((_g < _g1)){
HXLINE( 505)					_g = (_g + 1);
HXDLIN( 505)					int i = (_g - 1);
HXLINE( 506)					a = (a + (p->__get(i) / (x + i)));
            				}
            			}
HXLINE( 508)			return (((::Math_obj::sqrt((::Math_obj::PI * ( (Float)(2) ))) * ::Math_obj::pow(t,(x + ((Float)0.5)))) * ::Math_obj::exp(-(t))) * a);
            		}
HXLINE( 500)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,gamma,return )

Float MathTools_obj::factorial(Float value){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_512_factorial)
HXLINE( 513)		Float val = ::vision::tools::MathTools_obj::gamma((value + 1));
HXLINE( 514)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,factorial,return )

Float MathTools_obj::slopeToDegrees(Float slope){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_522_slopeToDegrees)
HXDLIN( 522)		return ((::Math_obj::atan(slope) * ( (Float)(180) )) / ::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,slopeToDegrees,return )

Float MathTools_obj::slopeToRadians(Float slope){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_526_slopeToRadians)
HXDLIN( 526)		return ::Math_obj::atan(slope);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,slopeToRadians,return )

Float MathTools_obj::degreesToSlope(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_530_degreesToSlope)
HXDLIN( 530)		return ::Math_obj::tan(((degrees * ::Math_obj::PI) / ( (Float)(180) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,degreesToSlope,return )

Float MathTools_obj::degreesToRadians(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_534_degreesToRadians)
HXDLIN( 534)		return ((degrees * ::Math_obj::PI) / ( (Float)(180) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,degreesToRadians,return )

Float MathTools_obj::radiansToDegrees(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_538_radiansToDegrees)
HXDLIN( 538)		return ((radians * ( (Float)(180) )) / ::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,radiansToDegrees,return )

Float MathTools_obj::radiansToSlope(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_542_radiansToSlope)
HXDLIN( 542)		return ::Math_obj::tan(radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,radiansToSlope,return )

Float MathTools_obj::cotan(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_550_cotan)
HXDLIN( 550)		return (( (Float)(1) ) / ::Math_obj::tan(radians));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cotan,return )

Float MathTools_obj::cosec(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_554_cosec)
HXDLIN( 554)		return (( (Float)(1) ) / ::Math_obj::sin(radians));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cosec,return )

Float MathTools_obj::sec(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_558_sec)
HXDLIN( 558)		return (( (Float)(1) ) / ::Math_obj::cos(radians));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,sec,return )

Float MathTools_obj::sind(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_562_sind)
HXDLIN( 562)		return ::Math_obj::sin(((degrees * ::Math_obj::PI) / ( (Float)(180) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,sind,return )

Float MathTools_obj::cosd(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_566_cosd)
HXDLIN( 566)		return ::Math_obj::cos(((degrees * ::Math_obj::PI) / ( (Float)(180) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cosd,return )

Float MathTools_obj::tand(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_570_tand)
HXDLIN( 570)		return ::Math_obj::tan(((degrees * ::Math_obj::PI) / ( (Float)(180) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,tand,return )

Float MathTools_obj::cotand(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_574_cotand)
HXDLIN( 574)		return (( (Float)(1) ) / ::Math_obj::tan(((degrees * ::Math_obj::PI) / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cotand,return )

Float MathTools_obj::cosecd(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_578_cosecd)
HXDLIN( 578)		return (( (Float)(1) ) / ::Math_obj::sin(((degrees * ::Math_obj::PI) / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cosecd,return )

Float MathTools_obj::secd(Float degrees){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_582_secd)
HXDLIN( 582)		return (( (Float)(1) ) / ::Math_obj::cos(((degrees * ::Math_obj::PI) / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,secd,return )

Float MathTools_obj::truncate(Float num,int numbersAfterDecimal){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_589_truncate)
HXLINE( 590)		Float multiplier = ::Math_obj::pow(( (Float)(10) ),( (Float)(numbersAfterDecimal) ));
HXLINE( 591)		return (( (Float)(::Math_obj::round((num * multiplier))) ) / multiplier);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,truncate,return )

int MathTools_obj::cropDecimal(Float number){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_594_cropDecimal)
HXLINE( 595)		if ((number < 0)) {
HXLINE( 595)			return ::Math_obj::ceil(number);
            		}
HXLINE( 596)		return ::Math_obj::floor(number);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cropDecimal,return )

bool MathTools_obj::isInt(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_761_isInt)
HXDLIN( 761)		return (v == ::Std_obj::_hx_int(v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,isInt,return )

Float MathTools_obj::get_NEGATIVE_INFINITY(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_774_get_NEGATIVE_INFINITY)
HXDLIN( 774)		return ::Math_obj::NEGATIVE_INFINITY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,get_NEGATIVE_INFINITY,return )

Float MathTools_obj::get_POSITIVE_INFINITY(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_775_get_POSITIVE_INFINITY)
HXDLIN( 775)		return ::Math_obj::POSITIVE_INFINITY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,get_POSITIVE_INFINITY,return )

Float MathTools_obj::get_NaN(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_776_get_NaN)
HXDLIN( 776)		return ::Math_obj::NaN;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,get_NaN,return )

Float MathTools_obj::get_PI_OVER_2(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_777_get_PI_OVER_2)
HXDLIN( 777)		return (::Math_obj::PI / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,get_PI_OVER_2,return )

Float MathTools_obj::get_PI(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_778_get_PI)
HXDLIN( 778)		return ::Math_obj::PI;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,get_PI,return )

Float MathTools_obj::abs(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_781_abs)
HXDLIN( 781)		return ::Math_obj::abs(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,abs,return )

Float MathTools_obj::acos(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_784_acos)
HXDLIN( 784)		return ::Math_obj::acos(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,acos,return )

Float MathTools_obj::asin(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_787_asin)
HXDLIN( 787)		return ::Math_obj::asin(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,asin,return )

Float MathTools_obj::atan(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_790_atan)
HXDLIN( 790)		return ::Math_obj::atan(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,atan,return )

Float MathTools_obj::atan2(Float y,Float x){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_793_atan2)
HXDLIN( 793)		return ::Math_obj::atan2(x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,atan2,return )

int MathTools_obj::ceil(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_796_ceil)
HXDLIN( 796)		return ::Math_obj::ceil(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,ceil,return )

Float MathTools_obj::cos(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_799_cos)
HXDLIN( 799)		return ::Math_obj::cos(radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,cos,return )

Float MathTools_obj::exp(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_802_exp)
HXDLIN( 802)		return ::Math_obj::exp(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,exp,return )

int MathTools_obj::floor(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_805_floor)
HXDLIN( 805)		return ::Math_obj::floor(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,floor,return )

Float MathTools_obj::log(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_808_log)
HXDLIN( 808)		return ::Math_obj::log(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,log,return )

Float MathTools_obj::pow(Float v,Float exp){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_811_pow)
HXDLIN( 811)		return ::Math_obj::pow(v,exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathTools_obj,pow,return )

Float MathTools_obj::random(){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_814_random)
HXDLIN( 814)		return ::Math_obj::random();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathTools_obj,random,return )

int MathTools_obj::round(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_817_round)
HXDLIN( 817)		return ::Math_obj::round(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,round,return )

Float MathTools_obj::sin(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_820_sin)
HXDLIN( 820)		return ::Math_obj::sin(radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,sin,return )

Float MathTools_obj::sqrt(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_823_sqrt)
HXDLIN( 823)		return ::Math_obj::sqrt(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,sqrt,return )

Float MathTools_obj::tan(Float radians){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_826_tan)
HXDLIN( 826)		return ::Math_obj::tan(radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,tan,return )

Float MathTools_obj::ffloor(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_829_ffloor)
HXDLIN( 829)		return ( (Float)(::Math_obj::floor(v)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,ffloor,return )

Float MathTools_obj::fceil(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_832_fceil)
HXDLIN( 832)		return ( (Float)(::Math_obj::ceil(v)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,fceil,return )

Float MathTools_obj::fround(Float v){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_835_fround)
HXDLIN( 835)		return ( (Float)(::Math_obj::round(v)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,fround,return )

bool MathTools_obj::isFinite(Float f){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_838_isFinite)
HXDLIN( 838)		return ::Math_obj::isFinite(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,isFinite,return )

bool MathTools_obj::isNaN(Float f){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_841_isNaN)
HXDLIN( 841)		return ::Math_obj::isNaN(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,isNaN,return )

Float MathTools_obj::parseFloat(::String s){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_853_parseFloat)
HXDLIN( 853)		return ::Std_obj::parseFloat(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,parseFloat,return )

Float MathTools_obj::parseInt(::String s){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_856_parseInt)
HXDLIN( 856)		return ( (Float)(::Std_obj::parseInt(s)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,parseInt,return )

bool MathTools_obj::parseBool(::String s){
            	HX_STACKFRAME(&_hx_pos_14dd7a2e7e1483d6_858_parseBool)
HXLINE( 859)		s = ::StringTools_obj::trim(s).toLowerCase();
HXLINE( 860)		if ((s == HX_("true",4e,a7,03,4d))) {
HXLINE( 860)			return true;
            		}
HXLINE( 862)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathTools_obj,parseBool,return )


MathTools_obj::MathTools_obj()
{
}

bool MathTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"PI") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_PI() : PI ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"NaN") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_NaN() : NaN ); return true; }
		if (HX_FIELD_EQ(inName,"sec") ) { outValue = sec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cos") ) { outValue = cos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exp") ) { outValue = exp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pow") ) { outValue = pow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sin") ) { outValue = sin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tan") ) { outValue = tan_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sind") ) { outValue = sind_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cosd") ) { outValue = cosd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tand") ) { outValue = tand_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"secd") ) { outValue = secd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"acos") ) { outValue = acos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"asin") ) { outValue = asin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"atan") ) { outValue = atan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sqrt") ) { outValue = sqrt_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamma") ) { outValue = gamma_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cotan") ) { outValue = cotan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cosec") ) { outValue = cosec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isInt") ) { outValue = isInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"atan2") ) { outValue = atan2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fceil") ) { outValue = fceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNaN") ) { outValue = isNaN_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cotand") ) { outValue = cotand_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cosecd") ) { outValue = cosecd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_PI") ) { outValue = get_PI_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ffloor") ) { outValue = ffloor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fround") ) { outValue = fround_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapInt") ) { outValue = wrapInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_NaN") ) { outValue = get_NaN_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"boundInt") ) { outValue = boundInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"truncate") ) { outValue = truncate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFinite") ) { outValue = isFinite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseInt") ) { outValue = parseInt_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"PI_OVER_2") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_PI_OVER_2() ); return true; } }
		if (HX_FIELD_EQ(inName,"wrapFloat") ) { outValue = wrapFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"factorial") ) { outValue = factorial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseBool") ) { outValue = parseBool_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"boundFloat") ) { outValue = boundFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseFloat") ) { outValue = parseFloat_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cropDecimal") ) { outValue = cropDecimal_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_PI_OVER_2") ) { outValue = get_PI_OVER_2_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isBetweenRange") ) { outValue = isBetweenRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slopeToDegrees") ) { outValue = slopeToDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slopeToRadians") ) { outValue = slopeToRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreesToSlope") ) { outValue = degreesToSlope_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansToSlope") ) { outValue = radiansToSlope_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isBetweenRanges") ) { outValue = isBetweenRanges_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"degreesToRadians") ) { outValue = degreesToRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansToDegrees") ) { outValue = radiansToDegrees_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"NEGATIVE_INFINITY") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_NEGATIVE_INFINITY() : NEGATIVE_INFINITY ); return true; }
		if (HX_FIELD_EQ(inName,"POSITIVE_INFINITY") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_POSITIVE_INFINITY() : POSITIVE_INFINITY ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"flipInsideRectangle") ) { outValue = flipInsideRectangle_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"distanceBetweenRays2D") ) { outValue = distanceBetweenRays2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mirrorInsideRectangle") ) { outValue = mirrorInsideRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invertInsideRectangle") ) { outValue = invertInsideRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_NEGATIVE_INFINITY") ) { outValue = get_NEGATIVE_INFINITY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_POSITIVE_INFINITY") ) { outValue = get_POSITIVE_INFINITY_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"distanceBetweenLines2D") ) { outValue = distanceBetweenLines2D_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"distanceFromRayToPoint2D") ) { outValue = distanceFromRayToPoint2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansFromLineToPoint2D") ) { outValue = radiansFromLineToPoint2D_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"intersectionBetweenRay2Ds") ) { outValue = intersectionBetweenRay2Ds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"findPointAtDistanceUsingX") ) { outValue = findPointAtDistanceUsingX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"findPointAtDistanceUsingY") ) { outValue = findPointAtDistanceUsingY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceFromLineToPoint2D") ) { outValue = distanceFromLineToPoint2D_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"intersectionBetweenLine2Ds") ) { outValue = intersectionBetweenLine2Ds_dyn(); return true; }
	}
	return false;
}

bool MathTools_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"PI") ) { PI=ioValue.Cast< Float >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"NaN") ) { NaN=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"NEGATIVE_INFINITY") ) { NEGATIVE_INFINITY=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"POSITIVE_INFINITY") ) { POSITIVE_INFINITY=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MathTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MathTools_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &MathTools_obj::PI,HX_("PI",f9,45,00,00)},
	{::hx::fsFloat,(void *) &MathTools_obj::NEGATIVE_INFINITY,HX_("NEGATIVE_INFINITY",32,f1,1e,93)},
	{::hx::fsFloat,(void *) &MathTools_obj::POSITIVE_INFINITY,HX_("POSITIVE_INFINITY",6e,48,1e,72)},
	{::hx::fsFloat,(void *) &MathTools_obj::NaN,HX_("NaN",9b,84,3b,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void MathTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathTools_obj::PI,"PI");
	HX_MARK_MEMBER_NAME(MathTools_obj::NEGATIVE_INFINITY,"NEGATIVE_INFINITY");
	HX_MARK_MEMBER_NAME(MathTools_obj::POSITIVE_INFINITY,"POSITIVE_INFINITY");
	HX_MARK_MEMBER_NAME(MathTools_obj::NaN,"NaN");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathTools_obj::PI,"PI");
	HX_VISIT_MEMBER_NAME(MathTools_obj::NEGATIVE_INFINITY,"NEGATIVE_INFINITY");
	HX_VISIT_MEMBER_NAME(MathTools_obj::POSITIVE_INFINITY,"POSITIVE_INFINITY");
	HX_VISIT_MEMBER_NAME(MathTools_obj::NaN,"NaN");
};

#endif

::hx::Class MathTools_obj::__mClass;

static ::String MathTools_obj_sStaticFields[] = {
	HX_("PI",f9,45,00,00),
	HX_("NEGATIVE_INFINITY",32,f1,1e,93),
	HX_("POSITIVE_INFINITY",6e,48,1e,72),
	HX_("NaN",9b,84,3b,00),
	HX_("distanceFromRayToPoint2D",7c,1a,b2,a0),
	HX_("intersectionBetweenRay2Ds",96,24,5c,90),
	HX_("distanceBetweenRays2D",ce,52,88,f0),
	HX_("findPointAtDistanceUsingX",73,af,d2,11),
	HX_("findPointAtDistanceUsingY",74,af,d2,11),
	HX_("distanceFromLineToPoint2D",94,46,eb,c7),
	HX_("distanceBetweenLines2D",be,20,a2,61),
	HX_("radiansFromLineToPoint2D",b7,1e,0b,9a),
	HX_("intersectionBetweenLine2Ds",2e,a8,dd,c5),
	HX_("mirrorInsideRectangle",14,89,89,6f),
	HX_("flipInsideRectangle",66,94,3b,ff),
	HX_("invertInsideRectangle",1d,1e,30,e5),
	HX_("clamp",fb,72,58,48),
	HX_("isBetweenRanges",b4,35,22,d7),
	HX_("isBetweenRange",df,ed,0d,95),
	HX_("wrapInt",45,45,47,0d),
	HX_("wrapFloat",72,3f,0d,a6),
	HX_("boundInt",51,4f,44,4d),
	HX_("boundFloat",7e,e4,e9,a6),
	HX_("gamma",27,87,b6,8e),
	HX_("factorial",25,94,a4,63),
	HX_("slopeToDegrees",c1,20,84,ad),
	HX_("slopeToRadians",8c,83,19,9a),
	HX_("degreesToSlope",c9,c0,a1,48),
	HX_("degreesToRadians",90,4d,9c,1b),
	HX_("radiansToDegrees",9a,56,c2,84),
	HX_("radiansToSlope",5e,1d,5d,f3),
	HX_("cotan",35,77,62,4a),
	HX_("cosec",65,b8,61,4a),
	HX_("sec",91,9b,57,00),
	HX_("sind",4c,96,53,4c),
	HX_("cosd",3d,be,c4,41),
	HX_("tand",e3,ba,f6,4c),
	HX_("cotand",8f,d7,c5,cb),
	HX_("cosecd",5f,a0,1f,cb),
	HX_("secd",b3,83,50,4c),
	HX_("truncate",66,be,f9,ce),
	HX_("cropDecimal",e1,2c,10,a8),
	HX_("isInt",25,37,4e,c1),
	HX_("get_NEGATIVE_INFINITY",09,f4,cc,11),
	HX_("get_POSITIVE_INFINITY",45,4b,cc,f0),
	HX_("get_NaN",32,4d,b0,26),
	HX_("get_PI_OVER_2",e4,e9,2f,b3),
	HX_("get_PI",42,dd,2f,a3),
	HX_("abs",72,f0,49,00),
	HX_("acos",86,32,69,40),
	HX_("asin",57,51,75,40),
	HX_("atan",a0,0c,76,40),
	HX_("atan2",92,ff,d4,26),
	HX_("ceil",05,1f,bd,41),
	HX_("cos",47,80,4b,00),
	HX_("exp",9d,0c,4d,00),
	HX_("floor",cc,d1,96,02),
	HX_("log",84,54,52,00),
	HX_("pow",98,5d,55,00),
	HX_("random",03,22,8f,b7),
	HX_("round",4e,f8,65,ed),
	HX_("sin",18,9f,57,00),
	HX_("sqrt",e0,ab,59,4c),
	HX_("tan",61,5a,58,00),
	HX_("ffloor",a6,9f,fd,ca),
	HX_("fceil",6b,4a,9c,fc),
	HX_("fround",28,c6,cc,b5),
	HX_("isFinite",b9,dc,e8,de),
	HX_("isNaN",f1,f6,51,c1),
	HX_("parseFloat",69,0c,78,2c),
	HX_("parseInt",7c,16,72,d6),
	HX_("parseBool",fd,d5,c1,c8),
	::String(null())
};

void MathTools_obj::__register()
{
	MathTools_obj _hx_dummy;
	MathTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.tools.MathTools",7a,de,53,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathTools_obj::__GetStatic;
	__mClass->mSetStaticField = &MathTools_obj::__SetStatic;
	__mClass->mMarkFunc = MathTools_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MathTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MathTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace tools
