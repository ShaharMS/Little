// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_hash_Murmur1
#include <haxe/hash/Murmur1.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ffe01fa47c0de20d_9_new,"haxe.hash.Murmur1","new",0xf4c6b7eb,"haxe.hash.Murmur1.new","haxe/hash/Murmur1.hx",9,0x537c8245)
HX_LOCAL_STACK_FRAME(_hx_pos_ffe01fa47c0de20d_11_hash,"haxe.hash.Murmur1","hash",0x351fe1e3,"haxe.hash.Murmur1.hash","haxe/hash/Murmur1.hx",11,0x537c8245)
HX_LOCAL_STACK_FRAME(_hx_pos_ffe01fa47c0de20d_7_boot,"haxe.hash.Murmur1","boot",0x31333647,"haxe.hash.Murmur1.boot","haxe/hash/Murmur1.hx",7,0x537c8245)
namespace haxe{
namespace hash{

void Murmur1_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ffe01fa47c0de20d_9_new)
            	}

Dynamic Murmur1_obj::__CreateEmpty() { return new Murmur1_obj; }

void *Murmur1_obj::_hx_vtable = 0;

Dynamic Murmur1_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Murmur1_obj > _hx_result = new Murmur1_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Murmur1_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33c697b9;
}

int Murmur1_obj::m;

int Murmur1_obj::hash( ::haxe::io::Bytes b,::hx::Null< int >  __o_seed){
            		int seed = __o_seed.Default(0);
            	HX_STACKFRAME(&_hx_pos_ffe01fa47c0de20d_11_hash)
HXLINE(  12)		int length = b->length;
HXLINE(  13)		int h = (seed ^ (length * -962287725));
HXLINE(  14)		int quarterLength = (length >> 2);
HXLINE(  15)		{
HXLINE(  15)			int _g = 0;
HXDLIN(  15)			int _g1 = quarterLength;
HXDLIN(  15)			while((_g < _g1)){
HXLINE(  15)				_g = (_g + 1);
HXDLIN(  15)				int i = (_g - 1);
HXLINE(  16)				int pos = (i << 2);
HXLINE(  17)				int k = ( (int)(b->b->__get(pos)) );
HXLINE(  18)				k = (k | (( (int)(b->b->__get((pos + 1))) ) << 8));
HXLINE(  19)				k = (k | (( (int)(b->b->__get((pos + 2))) ) << 16));
HXLINE(  20)				k = (k | (( (int)(b->b->__get((pos + 3))) ) << 24));
HXLINE(  21)				h = (h + k);
HXLINE(  22)				h = (h * -962287725);
HXLINE(  23)				h = (h ^ ::hx::UShr(h,16));
            			}
            		}
HXLINE(  25)		int offset = (quarterLength << 2);
HXLINE(  26)		int rlen = (length & 3);
HXLINE(  27)		if ((rlen == 3)) {
HXLINE(  28)			h = (h + (( (int)(b->b->__get((offset + 2))) ) << 16));
            		}
HXLINE(  30)		if ((rlen >= 2)) {
HXLINE(  31)			h = (h + (( (int)(b->b->__get((offset + 1))) ) << 8));
            		}
HXLINE(  33)		if ((rlen >= 1)) {
HXLINE(  34)			h = (h + ( (int)(b->b->__get(offset)) ));
HXLINE(  35)			h = (h * -962287725);
HXLINE(  36)			h = (h ^ ::hx::UShr(h,16));
            		}
HXLINE(  38)		h = (h * -962287725);
HXLINE(  39)		h = (h ^ ::hx::UShr(h,10));
HXLINE(  40)		h = (h * -962287725);
HXLINE(  41)		h = (h ^ ::hx::UShr(h,17));
HXLINE(  42)		return h;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Murmur1_obj,hash,return )


Murmur1_obj::Murmur1_obj()
{
}

bool Murmur1_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hash") ) { outValue = hash_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Murmur1_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Murmur1_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Murmur1_obj::m,HX_("m",6d,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Murmur1_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Murmur1_obj::m,"m");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Murmur1_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Murmur1_obj::m,"m");
};

#endif

::hx::Class Murmur1_obj::__mClass;

static ::String Murmur1_obj_sStaticFields[] = {
	HX_("m",6d,00,00,00),
	HX_("hash",ce,2f,08,45),
	::String(null())
};

void Murmur1_obj::__register()
{
	Murmur1_obj _hx_dummy;
	Murmur1_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.hash.Murmur1",79,e6,a3,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Murmur1_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Murmur1_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Murmur1_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Murmur1_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Murmur1_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Murmur1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Murmur1_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Murmur1_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ffe01fa47c0de20d_7_boot)
HXDLIN(   7)		m = -962287725;
            	}
}

} // end namespace haxe
} // end namespace hash
