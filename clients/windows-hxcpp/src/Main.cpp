// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_interpreter_StdOut
#include <little/interpreter/StdOut.h>
#endif
#ifndef INCLUDED_little_lexer_Lexer
#include <little/lexer/Lexer.h>
#endif
#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
#ifndef INCLUDED_little_parser_Parser
#include <little/parser/Parser.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_PrettyPrinter
#include <little/tools/PrettyPrinter.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_59_main,"Main","main",0xed0e206e,"Main.main","Main.hx",59,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_59_main)
HXDLIN(  59)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  60)			::String preDefInput = null();
HXLINE(  62)			::Sys_obj::print((((HX_("Little Interpreter v",e6,9f,53,99) + ::little::Little_obj::version) + HX_("\n\n",c0,08,00,00)) + HX_("Type \"ml!\" for multi-line mode, \"default!\" for single-line mode, or \"ast!\" for abstract syntax tree mode.\nPress `Ctrl`+`C` to exit at any time.\n\n",51,1a,b0,a7)));
HXLINE(  67)			::Sys_obj::print(HX_("If You're new to the language, type \"printSample!\" to print a file of sample code.\n\n",65,60,74,62));
HXLINE(  68)			::Sys_obj::println(HX_("-------------SINGLE-LINE MODE--------------\n",93,82,2d,7c));
HXLINE(  69)			while(true){
HXLINE(  70)				if (::hx::IsNull( preDefInput )) {
HXLINE(  71)					::Sys_obj::print(HX_("  >> ",e0,a5,28,82));
            				}
HXLINE(  72)				::String input;
HXDLIN(  72)				::String tmp = preDefInput;
HXDLIN(  72)				if (::hx::IsNotNull( tmp )) {
HXLINE(  72)					input = tmp;
            				}
            				else {
HXLINE(  72)					input = ::Sys_obj::_hx_stdin()->readLine();
            				}
HXLINE(  73)				if ((input == HX_("ml!",e2,13,53,00))) {
HXLINE(  74)					::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE(  75)					::Sys_obj::print(HX_("--------------MULTI-LINE MODE--------------\n",8f,9d,0d,23));
HXLINE(  76)					::Sys_obj::println(HX_("Commands:\n\t- \"run!\": runs the code\n\t- \"clear!\": resets the code\n\t- \"clearLine!\": deletes the last line\n",bf,65,1b,b0));
HXLINE(  77)					::Sys_obj::println(HX_("Command \"printSample!\" is temporarily disabled. return to single-line or ast mode to use it again\n",20,15,ac,5b));
HXLINE(  78)					::String code = HX_("",00,00,00,00);
HXLINE(  79)					while(true){
HXLINE(  80)						::Sys_obj::print(HX_("  >> ",e0,a5,28,82));
HXLINE(  81)						::String input1 = ::Sys_obj::_hx_stdin()->readLine();
HXLINE(  82)						if ((input1 == HX_("run!",76,7a,b3,4b))) {
HXLINE(  83)							::little::Little_obj::run(code,true);
HXLINE(  84)							::Sys_obj::println(HX_("Output:",f9,39,bd,b1));
HXLINE(  85)							::Sys_obj::println((::little::Little_obj::runtime->_hx_stdout->output + HX_("\n",0a,00,00,00)));
HXLINE(  86)							::little::Little_obj::reset();
HXLINE(  87)							::Sys_obj::print((::little::tools::TextTools_obj::replace(::little::tools::TextTools_obj::replaceFirst(code,HX_("\n",0a,00,00,00),HX_("  >> ",e0,a5,28,82)),HX_("\n",0a,00,00,00),HX_("\n  >> ",96,41,ba,81)) + HX_("\n",0a,00,00,00)));
            						}
            						else {
HXLINE(  88)							if ((input1 == HX_("default!",40,d0,99,af))) {
HXLINE(  89)								::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE(  90)								::Sys_obj::println(HX_("-------------SINGLE-LINE MODE--------------\n",93,82,2d,7c));
HXLINE(  91)								goto _hx_goto_1;
            							}
            							else {
HXLINE(  92)								if ((input1 == HX_("ast!",9f,5a,75,40))) {
HXLINE(  93)									::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE(  94)									preDefInput = HX_("ast!",9f,5a,75,40);
HXLINE(  95)									goto _hx_goto_1;
            								}
            								else {
HXLINE(  96)									if ((input1 == HX_("clear!",f4,e9,a7,07))) {
HXLINE(  97)										code = HX_("",00,00,00,00);
HXLINE(  98)										::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE(  99)										::Sys_obj::println(HX_("--------------MULTI-LINE MODE--------------\n",8f,9d,0d,23));
            									}
            									else {
HXLINE( 100)										if ((input1 == HX_("clearLine!",e0,1c,0c,4a))) {
HXLINE( 101)											::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE( 102)											::Sys_obj::println(HX_("--------------MULTI-LINE MODE--------------\n",8f,9d,0d,23));
HXLINE( 103)											::Sys_obj::print((::little::tools::TextTools_obj::replace(::little::tools::TextTools_obj::replaceFirst(code,HX_("\n",0a,00,00,00),HX_("  >> ",e0,a5,28,82)),HX_("\n",0a,00,00,00),HX_("\n  >> ",96,41,ba,81)) + HX_("\n",0a,00,00,00)));
HXLINE( 104)											code = code.split(HX_("\n",0a,00,00,00))->slice(0,-1)->join(HX_("\n",0a,00,00,00));
            										}
            										else {
HXLINE( 106)											code = (code + (HX_("\n",0a,00,00,00) + input1));
            										}
            									}
            								}
            							}
            						}
            					}
            					_hx_goto_1:;
HXLINE( 109)					if ((preDefInput == HX_("ast!",9f,5a,75,40))) {
HXLINE( 110)						continue;
            					}
            				}
            				else {
HXLINE( 111)					if ((input == HX_("ast!",9f,5a,75,40))) {
HXLINE( 112)						::String _hx_tmp;
HXDLIN( 112)						if ((preDefInput == HX_("ast!",9f,5a,75,40))) {
HXLINE( 112)							_hx_tmp = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 112)							_hx_tmp = HX_("\n",0a,00,00,00);
            						}
HXDLIN( 112)						::Sys_obj::println(((HX_("",00,00,00,00) + _hx_tmp) + HX_("---------ABSTRACT SYNTAX TREE MODE---------\n",16,2e,48,b2)));
HXLINE( 113)						while(true){
HXLINE( 114)							::Sys_obj::print(HX_("  >> ",e0,a5,28,82));
HXLINE( 115)							::String input2 = ::Sys_obj::_hx_stdin()->readLine();
HXLINE( 116)							if ((input2 == HX_("default!",40,d0,99,af))) {
HXLINE( 117)								::Sys_obj::println(HX_("\n-------------SINGLE-LINE MODE--------------\n",9d,d1,62,d4));
HXLINE( 118)								goto _hx_goto_2;
            							}
            							else {
HXLINE( 119)								if ((input2 == HX_("printSample!",0a,a4,08,e5))) {
HXLINE( 120)									::Sys_obj::println(HX_("\n---------------SAMPLE CODE-----------------\n",3d,0c,4e,83));
HXLINE( 121)									::Sys_obj::println(::haxe::Resource_obj::getString(HX_("sample",2a,60,4a,1d)));
HXLINE( 122)									::Sys_obj::println(HX_("\n---------ABSTRACT SYNTAX TREE MODE---------\n",20,7d,7d,0a));
HXLINE( 123)									continue;
            								}
            							}
HXLINE( 125)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 126)								::Sys_obj::println(HX_("Output:",f9,39,bd,b1));
HXLINE( 127)								 ::Dynamic array = ::little::parser::Parser_obj::parse;
HXDLIN( 127)								::Sys_obj::println((::little::tools::PrettyPrinter_obj::printInterpreterAst(::little::interpreter::Interpreter_obj::convert(( (::Array< ::Dynamic>)(array(::little::lexer::Lexer_obj::lex(input2))) )),null()) + HX_("\n",0a,00,00,00)));
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g = _hx_e;
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            						_hx_goto_2:;
            					}
            					else {
HXLINE( 130)						if ((input == HX_("printSample!",0a,a4,08,e5))) {
HXLINE( 131)							::Sys_obj::println(HX_("\n---------------SAMPLE CODE-----------------\n",3d,0c,4e,83));
HXLINE( 132)							::Sys_obj::println(::haxe::Resource_obj::getString(HX_("sample",2a,60,4a,1d)));
HXLINE( 133)							::Sys_obj::println(HX_("\n-------------SINGLE-LINE MODE--------------\n",9d,d1,62,d4));
            						}
            						else {
HXLINE( 135)							::little::Little_obj::run(input,true);
HXLINE( 136)							::Sys_obj::println(HX_("Output:",f9,39,bd,b1));
HXLINE( 137)							::Sys_obj::println((::little::Little_obj::runtime->_hx_stdout->output + HX_("\n",0a,00,00,00)));
HXLINE( 138)							::little::Little_obj::reset();
            						}
            					}
            				}
HXLINE( 140)				preDefInput = null();
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 144)				::Sys_obj::println(HX_("\n\nExiting...",ca,5a,95,32));
HXLINE( 145)				::Sys_obj::exit(0);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

