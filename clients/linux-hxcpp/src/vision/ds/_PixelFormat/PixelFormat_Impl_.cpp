// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_vision_ds__PixelFormat_PixelFormat_Impl_
#include <vision/ds/_PixelFormat/PixelFormat_Impl_.h>
#endif
#ifndef INCLUDED_vision_exceptions_VisionException
#include <vision/exceptions/VisionException.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9d3a106b7ae3503d_24_convertPixelFormat,"vision.ds._PixelFormat.PixelFormat_Impl_","convertPixelFormat",0xf3a44632,"vision.ds._PixelFormat.PixelFormat_Impl_.convertPixelFormat","vision/ds/PixelFormat.hx",24,0xeb135b3a)
HX_LOCAL_STACK_FRAME(_hx_pos_14246fbd42ada6b0_1_boot,"vision.ds._PixelFormat.PixelFormat_Impl_","boot",0x7d25d13a,"vision.ds._PixelFormat.PixelFormat_Impl_.boot","?",1,0x0000003f)
namespace vision{
namespace ds{
namespace _PixelFormat{

void PixelFormat_Impl__obj::__construct() { }

Dynamic PixelFormat_Impl__obj::__CreateEmpty() { return new PixelFormat_Impl__obj; }

void *PixelFormat_Impl__obj::_hx_vtable = 0;

Dynamic PixelFormat_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PixelFormat_Impl__obj > _hx_result = new PixelFormat_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PixelFormat_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f8a6be4;
}

int PixelFormat_Impl__obj::ARGB;

int PixelFormat_Impl__obj::RGBA;

int PixelFormat_Impl__obj::ABGR;

int PixelFormat_Impl__obj::BGRA;

int PixelFormat_Impl__obj::RGB;

int PixelFormat_Impl__obj::BGR;

 ::haxe::io::Bytes PixelFormat_Impl__obj::convertPixelFormat( ::haxe::io::Bytes bytes,int from, ::Dynamic __o_to){
            		 ::Dynamic to = __o_to;
            		if (::hx::IsNull(__o_to)) to = 0;
            	HX_GC_STACKFRAME(&_hx_pos_9d3a106b7ae3503d_24_convertPixelFormat)
HXLINE(  26)		if (::hx::IsEq( from,to )) {
HXLINE(  26)			return bytes;
            		}
HXLINE(  28)		int i = 0;
HXLINE(  29)		while((i < bytes->length)){
HXLINE(  30)			int red;
HXDLIN(  30)			bool red1;
HXDLIN(  30)			if ((from != 1)) {
HXLINE(  30)				red1 = (from == 4);
            			}
            			else {
HXLINE(  30)				red1 = true;
            			}
HXDLIN(  30)			if (red1) {
HXLINE(  30)				red = ( (int)(bytes->b->__get(i)) );
            			}
            			else {
HXLINE(  30)				if ((from == 0)) {
HXLINE(  30)					red = ( (int)(bytes->b->__get((i + 1))) );
            				}
            				else {
HXLINE(  30)					bool red2;
HXDLIN(  30)					if ((from != 5)) {
HXLINE(  30)						red2 = (from == 3);
            					}
            					else {
HXLINE(  30)						red2 = true;
            					}
HXDLIN(  30)					if (red2) {
HXLINE(  30)						red = ( (int)(bytes->b->__get((i + 2))) );
            					}
            					else {
HXLINE(  30)						if ((from == 2)) {
HXLINE(  30)							red = ( (int)(bytes->b->__get((i + 3))) );
            						}
            						else {
HXLINE(  30)							HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            						}
            					}
            				}
            			}
HXLINE(  31)			int green;
HXDLIN(  31)			bool green1;
HXDLIN(  31)			bool green2;
HXDLIN(  31)			bool green3;
HXDLIN(  31)			if ((from != 5)) {
HXLINE(  31)				green3 = (from == 3);
            			}
            			else {
HXLINE(  31)				green3 = true;
            			}
HXDLIN(  31)			if (!(green3)) {
HXLINE(  31)				green2 = (from == 4);
            			}
            			else {
HXLINE(  31)				green2 = true;
            			}
HXDLIN(  31)			if (!(green2)) {
HXLINE(  31)				green1 = (from == 1);
            			}
            			else {
HXLINE(  31)				green1 = true;
            			}
HXDLIN(  31)			if (green1) {
HXLINE(  31)				green = ( (int)(bytes->b->__get((i + 1))) );
            			}
            			else {
HXLINE(  31)				bool green4;
HXDLIN(  31)				if ((from != 2)) {
HXLINE(  31)					green4 = (from == 0);
            				}
            				else {
HXLINE(  31)					green4 = true;
            				}
HXDLIN(  31)				if (green4) {
HXLINE(  31)					green = ( (int)(bytes->b->__get((i + 2))) );
            				}
            				else {
HXLINE(  31)					HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            				}
            			}
HXLINE(  32)			int blue;
HXDLIN(  32)			bool blue1;
HXDLIN(  32)			if ((from != 5)) {
HXLINE(  32)				blue1 = (from == 3);
            			}
            			else {
HXLINE(  32)				blue1 = true;
            			}
HXDLIN(  32)			if (blue1) {
HXLINE(  32)				blue = ( (int)(bytes->b->__get(i)) );
            			}
            			else {
HXLINE(  32)				if ((from == 2)) {
HXLINE(  32)					blue = ( (int)(bytes->b->__get((i + 1))) );
            				}
            				else {
HXLINE(  32)					bool blue2;
HXDLIN(  32)					if ((from != 4)) {
HXLINE(  32)						blue2 = (from == 1);
            					}
            					else {
HXLINE(  32)						blue2 = true;
            					}
HXDLIN(  32)					if (blue2) {
HXLINE(  32)						blue = ( (int)(bytes->b->__get((i + 2))) );
            					}
            					else {
HXLINE(  32)						if ((from == 0)) {
HXLINE(  32)							blue = ( (int)(bytes->b->__get((i + 3))) );
            						}
            						else {
HXLINE(  32)							HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            						}
            					}
            				}
            			}
HXLINE(  33)			int alpha;
HXDLIN(  33)			bool alpha1;
HXDLIN(  33)			if ((from != 0)) {
HXLINE(  33)				alpha1 = (from == 2);
            			}
            			else {
HXLINE(  33)				alpha1 = true;
            			}
HXDLIN(  33)			if (alpha1) {
HXLINE(  33)				alpha = ( (int)(bytes->b->__get(i)) );
            			}
            			else {
HXLINE(  33)				bool alpha2;
HXDLIN(  33)				if ((from != 1)) {
HXLINE(  33)					alpha2 = (from == 3);
            				}
            				else {
HXLINE(  33)					alpha2 = true;
            				}
HXDLIN(  33)				if (alpha2) {
HXLINE(  33)					alpha = ( (int)(bytes->b->__get((i + 3))) );
            				}
            				else {
HXLINE(  33)					alpha = -1;
            				}
            			}
HXLINE(  35)			int redIndex;
HXDLIN(  35)			bool redIndex1;
HXDLIN(  35)			if (::hx::IsNotEq( to,1 )) {
HXLINE(  35)				redIndex1 = ::hx::IsEq( to,4 );
            			}
            			else {
HXLINE(  35)				redIndex1 = true;
            			}
HXDLIN(  35)			if (redIndex1) {
HXLINE(  35)				redIndex = i;
            			}
            			else {
HXLINE(  35)				if (::hx::IsEq( to,0 )) {
HXLINE(  35)					redIndex = (i + 1);
            				}
            				else {
HXLINE(  35)					bool redIndex2;
HXDLIN(  35)					if (::hx::IsNotEq( to,5 )) {
HXLINE(  35)						redIndex2 = ::hx::IsEq( to,3 );
            					}
            					else {
HXLINE(  35)						redIndex2 = true;
            					}
HXDLIN(  35)					if (redIndex2) {
HXLINE(  35)						redIndex = (i + 2);
            					}
            					else {
HXLINE(  35)						if (::hx::IsEq( to,2 )) {
HXLINE(  35)							redIndex = (i + 3);
            						}
            						else {
HXLINE(  35)							HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            						}
            					}
            				}
            			}
HXLINE(  36)			int greenIndex;
HXDLIN(  36)			bool greenIndex1;
HXDLIN(  36)			bool greenIndex2;
HXDLIN(  36)			bool greenIndex3;
HXDLIN(  36)			if (::hx::IsNotEq( to,5 )) {
HXLINE(  36)				greenIndex3 = ::hx::IsEq( to,3 );
            			}
            			else {
HXLINE(  36)				greenIndex3 = true;
            			}
HXDLIN(  36)			if (!(greenIndex3)) {
HXLINE(  36)				greenIndex2 = ::hx::IsEq( to,4 );
            			}
            			else {
HXLINE(  36)				greenIndex2 = true;
            			}
HXDLIN(  36)			if (!(greenIndex2)) {
HXLINE(  36)				greenIndex1 = ::hx::IsEq( to,1 );
            			}
            			else {
HXLINE(  36)				greenIndex1 = true;
            			}
HXDLIN(  36)			if (greenIndex1) {
HXLINE(  36)				greenIndex = (i + 1);
            			}
            			else {
HXLINE(  36)				bool greenIndex4;
HXDLIN(  36)				if (::hx::IsNotEq( to,2 )) {
HXLINE(  36)					greenIndex4 = ::hx::IsEq( to,0 );
            				}
            				else {
HXLINE(  36)					greenIndex4 = true;
            				}
HXDLIN(  36)				if (greenIndex4) {
HXLINE(  36)					greenIndex = (i + 2);
            				}
            				else {
HXLINE(  36)					HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            				}
            			}
HXLINE(  37)			int blueIndex;
HXDLIN(  37)			bool blueIndex1;
HXDLIN(  37)			if (::hx::IsNotEq( to,5 )) {
HXLINE(  37)				blueIndex1 = ::hx::IsEq( to,3 );
            			}
            			else {
HXLINE(  37)				blueIndex1 = true;
            			}
HXDLIN(  37)			if (blueIndex1) {
HXLINE(  37)				blueIndex = i;
            			}
            			else {
HXLINE(  37)				if (::hx::IsEq( to,2 )) {
HXLINE(  37)					blueIndex = (i + 1);
            				}
            				else {
HXLINE(  37)					bool blueIndex2;
HXDLIN(  37)					if (::hx::IsNotEq( to,4 )) {
HXLINE(  37)						blueIndex2 = ::hx::IsEq( to,1 );
            					}
            					else {
HXLINE(  37)						blueIndex2 = true;
            					}
HXDLIN(  37)					if (blueIndex2) {
HXLINE(  37)						blueIndex = (i + 2);
            					}
            					else {
HXLINE(  37)						if (::hx::IsEq( to,0 )) {
HXLINE(  37)							blueIndex = (i + 3);
            						}
            						else {
HXLINE(  37)							HX_STACK_DO_THROW( ::vision::exceptions::VisionException_obj::__alloc( HX_CTX ,HX_("Unknown Pixel Format",47,e8,41,66),HX_("Pixel Conversion",b0,76,ca,d3)));
            						}
            					}
            				}
            			}
HXLINE(  38)			int alphaIndex;
HXDLIN(  38)			bool alphaIndex1;
HXDLIN(  38)			if (::hx::IsNotEq( to,0 )) {
HXLINE(  38)				alphaIndex1 = ::hx::IsEq( to,2 );
            			}
            			else {
HXLINE(  38)				alphaIndex1 = true;
            			}
HXDLIN(  38)			if (alphaIndex1) {
HXLINE(  38)				alphaIndex = i;
            			}
            			else {
HXLINE(  38)				bool alphaIndex2;
HXDLIN(  38)				if (::hx::IsNotEq( to,1 )) {
HXLINE(  38)					alphaIndex2 = ::hx::IsEq( to,3 );
            				}
            				else {
HXLINE(  38)					alphaIndex2 = true;
            				}
HXDLIN(  38)				if (alphaIndex2) {
HXLINE(  38)					alphaIndex = (i + 3);
            				}
            				else {
HXLINE(  38)					alphaIndex = -1;
            				}
            			}
HXLINE(  40)			bytes->b[redIndex] = ( (unsigned char)(red) );
HXLINE(  41)			bytes->b[greenIndex] = ( (unsigned char)(green) );
HXLINE(  42)			bytes->b[blueIndex] = ( (unsigned char)(blue) );
HXLINE(  43)			if ((alphaIndex != -1)) {
HXLINE(  43)				bytes->b[alphaIndex] = ( (unsigned char)(alpha) );
            			}
HXLINE(  45)			if ((from > 3)) {
HXLINE(  45)				i = (i + 3);
            			}
            			else {
HXLINE(  46)				i = (i + 4);
            			}
            		}
HXLINE(  49)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PixelFormat_Impl__obj,convertPixelFormat,return )


PixelFormat_Impl__obj::PixelFormat_Impl__obj()
{
}

bool PixelFormat_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"convertPixelFormat") ) { outValue = convertPixelFormat_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PixelFormat_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PixelFormat_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::ARGB,HX_("ARGB",4c,55,35,2b)},
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::RGBA,HX_("RGBA",b4,98,69,36)},
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::ABGR,HX_("ABGR",4c,31,29,2b)},
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::BGRA,HX_("BGRA",b4,3c,d6,2b)},
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::RGB,HX_("RGB",ed,76,3e,00)},
	{::hx::fsInt,(void *) &PixelFormat_Impl__obj::BGR,HX_("BGR",ed,52,32,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PixelFormat_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::ARGB,"ARGB");
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::RGBA,"RGBA");
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::ABGR,"ABGR");
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::BGRA,"BGRA");
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::RGB,"RGB");
	HX_MARK_MEMBER_NAME(PixelFormat_Impl__obj::BGR,"BGR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PixelFormat_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::ARGB,"ARGB");
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::RGBA,"RGBA");
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::ABGR,"ABGR");
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::BGRA,"BGRA");
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::RGB,"RGB");
	HX_VISIT_MEMBER_NAME(PixelFormat_Impl__obj::BGR,"BGR");
};

#endif

::hx::Class PixelFormat_Impl__obj::__mClass;

static ::String PixelFormat_Impl__obj_sStaticFields[] = {
	HX_("ARGB",4c,55,35,2b),
	HX_("RGBA",b4,98,69,36),
	HX_("ABGR",4c,31,29,2b),
	HX_("BGRA",b4,3c,d6,2b),
	HX_("RGB",ed,76,3e,00),
	HX_("BGR",ed,52,32,00),
	HX_("convertPixelFormat",2a,3b,30,23),
	::String(null())
};

void PixelFormat_Impl__obj::__register()
{
	PixelFormat_Impl__obj _hx_dummy;
	PixelFormat_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds._PixelFormat.PixelFormat_Impl_",66,30,fd,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PixelFormat_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PixelFormat_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PixelFormat_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PixelFormat_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PixelFormat_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PixelFormat_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PixelFormat_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PixelFormat_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		ARGB = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		RGBA = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		ABGR = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		BGRA = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		RGB = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_14246fbd42ada6b0_1_boot)
HXDLIN(   1)		BGR = 5;
            	}
}

} // end namespace vision
} // end namespace ds
} // end namespace _PixelFormat
