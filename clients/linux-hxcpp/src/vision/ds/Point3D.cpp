// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_vision_ds_Point3D
#include <vision/ds/Point3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c6ffb352778f5b9_31_new,"vision.ds.Point3D","new",0x49bdccba,"vision.ds.Point3D.new","vision/ds/Point3D.hx",31,0x9c456696)
HX_LOCAL_STACK_FRAME(_hx_pos_7c6ffb352778f5b9_46_distanceTo,"vision.ds.Point3D","distanceTo",0xf5b676f6,"vision.ds.Point3D.distanceTo","vision/ds/Point3D.hx",46,0x9c456696)
HX_LOCAL_STACK_FRAME(_hx_pos_7c6ffb352778f5b9_53_copy,"vision.ds.Point3D","copy",0x35178e1b,"vision.ds.Point3D.copy","vision/ds/Point3D.hx",53,0x9c456696)
HX_LOCAL_STACK_FRAME(_hx_pos_7c6ffb352778f5b9_60_toString,"vision.ds.Point3D","toString",0x1d71ce12,"vision.ds.Point3D.toString","vision/ds/Point3D.hx",60,0x9c456696)
namespace vision{
namespace ds{

void Point3D_obj::__construct(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_7c6ffb352778f5b9_31_new)
HXLINE(  32)		this->x = x;
HXLINE(  33)		this->y = y;
HXLINE(  34)		this->z = z;
            	}

Dynamic Point3D_obj::__CreateEmpty() { return new Point3D_obj; }

void *Point3D_obj::_hx_vtable = 0;

Dynamic Point3D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Point3D_obj > _hx_result = new Point3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Point3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6266864a;
}

Float Point3D_obj::distanceTo( ::vision::ds::Point3D point){
            	HX_STACKFRAME(&_hx_pos_7c6ffb352778f5b9_46_distanceTo)
HXDLIN(  46)		Float x = (point->x - this->x);
HXDLIN(  46)		Float y = (point->y - this->y);
HXDLIN(  46)		Float z = (point->z - this->z);
HXDLIN(  46)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point3D_obj,distanceTo,return )

 ::vision::ds::Point3D Point3D_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_7c6ffb352778f5b9_53_copy)
HXDLIN(  53)		return  ::vision::ds::Point3D_obj::__alloc( HX_CTX ,this->x,this->y,this->z);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point3D_obj,copy,return )

::String Point3D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7c6ffb352778f5b9_60_toString)
HXDLIN(  60)		return ((((((HX_("(",28,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point3D_obj,toString,return )


::hx::ObjectPtr< Point3D_obj > Point3D_obj::__new(Float x,Float y,Float z) {
	::hx::ObjectPtr< Point3D_obj > __this = new Point3D_obj();
	__this->__construct(x,y,z);
	return __this;
}

::hx::ObjectPtr< Point3D_obj > Point3D_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,Float z) {
	Point3D_obj *__this = (Point3D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Point3D_obj), false, "vision.ds.Point3D"));
	*(void **)__this = Point3D_obj::_hx_vtable;
	__this->__construct(x,y,z);
	return __this;
}

Point3D_obj::Point3D_obj()
{
}

::hx::Val Point3D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return ::hx::Val( distanceTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Point3D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Point3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Point3D_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Point3D_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point3D_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point3D_obj,z),HX_("z",7a,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Point3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Point3D_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("distanceTo",10,d4,ec,8b),
	HX_("copy",b5,bb,c4,41),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Point3D_obj::__mClass;

void Point3D_obj::__register()
{
	Point3D_obj _hx_dummy;
	Point3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.Point3D",c8,a7,fe,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Point3D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Point3D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point3D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
