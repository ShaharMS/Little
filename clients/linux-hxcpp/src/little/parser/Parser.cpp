// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_little_KeywordConfig
#include <little/KeywordConfig.h>
#endif
#ifndef INCLUDED_little_Little
#include <little/Little.h>
#endif
#ifndef INCLUDED_little_interpreter_InterpTokens
#include <little/interpreter/InterpTokens.h>
#endif
#ifndef INCLUDED_little_interpreter_Interpreter
#include <little/interpreter/Interpreter.h>
#endif
#ifndef INCLUDED_little_interpreter_Runtime
#include <little/interpreter/Runtime.h>
#endif
#ifndef INCLUDED_little_lexer_LexerTokens
#include <little/lexer/LexerTokens.h>
#endif
#ifndef INCLUDED_little_parser_Parser
#include <little/parser/Parser.h>
#endif
#ifndef INCLUDED_little_parser_ParserTokens
#include <little/parser/ParserTokens.h>
#endif
#ifndef INCLUDED_little_tools_ParserTokensSimple
#include <little/tools/ParserTokensSimple.h>
#endif
#ifndef INCLUDED_little_tools_TextTools
#include <little/tools/TextTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_37___default_parse,"little.parser.Parser","__default_parse",0xbb46569d,"little.parser.Parser.__default_parse","little/parser/Parser.hx",37,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_73_convert,"little.parser.Parser","convert",0xcf94dcbb,"little.parser.Parser.convert","little/parser/Parser.hx",73,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_117_mergeBlocks,"little.parser.Parser","mergeBlocks",0xf20e0226,"little.parser.Parser.mergeBlocks","little/parser/Parser.hx",117,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_175_mergeExpressions,"little.parser.Parser","mergeExpressions",0xf9c95c3b,"little.parser.Parser.mergeExpressions","little/parser/Parser.hx",175,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_235_mergePropertyOperations,"little.parser.Parser","mergePropertyOperations",0xbb82cac1,"little.parser.Parser.mergePropertyOperations","little/parser/Parser.hx",235,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_325_mergeTypeDecls,"little.parser.Parser","mergeTypeDecls",0xeb7c980f,"little.parser.Parser.mergeTypeDecls","little/parser/Parser.hx",325,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_375_mergeComplexStructures,"little.parser.Parser","mergeComplexStructures",0x49a7ef90,"little.parser.Parser.mergeComplexStructures","little/parser/Parser.hx",375,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_615_mergeCalls,"little.parser.Parser","mergeCalls",0xa9e7f275,"little.parser.Parser.mergeCalls","little/parser/Parser.hx",615,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_666_mergeWrites,"little.parser.Parser","mergeWrites",0xc809aa54,"little.parser.Parser.mergeWrites","little/parser/Parser.hx",666,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_750_mergeValuesWithTypeDecls,"little.parser.Parser","mergeValuesWithTypeDecls",0x9fb24fe7,"little.parser.Parser.mergeValuesWithTypeDecls","little/parser/Parser.hx",750,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_809_mergeNonBlockBodies,"little.parser.Parser","mergeNonBlockBodies",0x799ce040,"little.parser.Parser.mergeNonBlockBodies","little/parser/Parser.hx",809,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_862_mergeElses,"little.parser.Parser","mergeElses",0xd7ffbdfa,"little.parser.Parser.mergeElses","little/parser/Parser.hx",862,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_935_get_line,"little.parser.Parser","get_line",0x4425e3b5,"little.parser.Parser.get_line","little/parser/Parser.hx",935,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_936_set_line,"little.parser.Parser","set_line",0xf2833d29,"little.parser.Parser.set_line","little/parser/Parser.hx",936,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_938_get_module,"little.parser.Parser","get_module",0xd86132ad,"little.parser.Parser.get_module","little/parser/Parser.hx",938,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_939_set_module,"little.parser.Parser","set_module",0xdbded121,"little.parser.Parser.set_module","little/parser/Parser.hx",939,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_945_setLine,"little.parser.Parser","setLine",0xc202377e,"little.parser.Parser.setLine","little/parser/Parser.hx",945,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_952_nextPart,"little.parser.Parser","nextPart",0x72d69abe,"little.parser.Parser.nextPart","little/parser/Parser.hx",952,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_957_resetLines,"little.parser.Parser","resetLines",0x84a4a3e8,"little.parser.Parser.resetLines","little/parser/Parser.hx",957,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_25_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",25,0x38f03b28)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f540063664edae_940_boot,"little.parser.Parser","boot",0x3709186a,"little.parser.Parser.boot","little/parser/Parser.hx",940,0x38f03b28)
namespace little{
namespace parser{

void Parser_obj::__construct() { }

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54a57e14;
}

::Array< ::Dynamic> Parser_obj::additionalParsingLevels;

HX_BEGIN_DEFAULT_FUNC(__default_parse,Parser_obj)
::Array< ::Dynamic> _hx_run(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_37___default_parse)
HXLINE(  38)		::Array< ::Dynamic> tokens = ::little::parser::Parser_obj::convert(lexerTokens);
HXLINE(  40)		tokens->unshift(::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()));
HXLINE(  43)		tokens = ::little::parser::Parser_obj::mergeBlocks(tokens);
HXLINE(  45)		tokens = ::little::parser::Parser_obj::mergeExpressions(tokens);
HXLINE(  47)		tokens = ::little::parser::Parser_obj::mergePropertyOperations(tokens);
HXLINE(  49)		tokens = ::little::parser::Parser_obj::mergeTypeDecls(tokens);
HXLINE(  51)		tokens = ::little::parser::Parser_obj::mergeComplexStructures(tokens);
HXLINE(  53)		tokens = ::little::parser::Parser_obj::mergeCalls(tokens);
HXLINE(  55)		tokens = ::little::parser::Parser_obj::mergeWrites(tokens);
HXLINE(  57)		tokens = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(tokens);
HXLINE(  59)		tokens = ::little::parser::Parser_obj::mergeNonBlockBodies(tokens);
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			::Array< ::Dynamic> _g1 = ::little::parser::Parser_obj::additionalParsingLevels;
HXDLIN(  61)			while((_g < _g1->length)){
HXLINE(  61)				 ::Dynamic level = _g1->__get(_g);
HXDLIN(  61)				_g = (_g + 1);
HXLINE(  62)				tokens = ( (::Array< ::Dynamic>)(level(tokens)) );
            			}
            		}
HXLINE(  67)		return tokens;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Parser_obj::parse;

::Array< ::Dynamic> Parser_obj::convert(::Array< ::Dynamic> lexerTokens){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_73_convert)
HXLINE(  74)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		int line = 1;
HXLINE(  78)		int i = 0;
HXLINE(  79)		while((i < lexerTokens->length)){
HXLINE(  80)			 ::little::lexer::LexerTokens token = lexerTokens->__get(i).StaticCast<  ::little::lexer::LexerTokens >();
HXLINE(  82)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE(  83)					::String name = token->_hx_getString(0);
HXDLIN(  83)					tokens->push(::little::parser::ParserTokens_obj::Identifier(name));
            				}
            				break;
            				case (int)1: {
HXLINE(  84)					::String _hx_char = token->_hx_getString(0);
HXDLIN(  84)					tokens->push(::little::parser::ParserTokens_obj::Sign(_hx_char));
            				}
            				break;
            				case (int)2: {
HXLINE(  85)					::String num = token->_hx_getString(0);
HXLINE(  86)					if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 0)) {
HXLINE(  86)						tokens->push(::little::parser::ParserTokens_obj::Number(num));
            					}
            					else {
HXLINE(  87)						if ((::little::tools::TextTools_obj::countOccurrencesOf(num,HX_(".",2e,00,00,00)) == 1)) {
HXLINE(  87)							tokens->push(::little::parser::ParserTokens_obj::Decimal(num));
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(  89)					::String value = token->_hx_getString(0);
HXLINE(  90)					if ((value == ::little::Little_obj::keywords->FALSE_VALUE)) {
HXLINE(  90)						tokens->push(::little::parser::ParserTokens_obj::FalseValue_dyn());
            					}
            					else {
HXLINE(  91)						if ((value == ::little::Little_obj::keywords->TRUE_VALUE)) {
HXLINE(  91)							tokens->push(::little::parser::ParserTokens_obj::TrueValue_dyn());
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(  93)					::String string = token->_hx_getString(0);
HXDLIN(  93)					tokens->push(::little::parser::ParserTokens_obj::Characters(string));
            				}
            				break;
            				case (int)5: {
HXLINE(  94)					tokens->push(::little::parser::ParserTokens_obj::NullValue_dyn());
            				}
            				break;
            				case (int)6: {
HXLINE(  96)					tokens->push(::little::parser::ParserTokens_obj::SetLine(line));
HXLINE(  97)					line = (line + 1);
            				}
            				break;
            				case (int)7: {
HXLINE(  99)					tokens->push(::little::parser::ParserTokens_obj::SplitLine_dyn());
            				}
            				break;
            				case (int)8: {
HXLINE( 100)					::String content = token->_hx_getString(0);
HXDLIN( 100)					tokens->push(::little::parser::ParserTokens_obj::Documentation(content));
            				}
            				break;
            			}
HXLINE( 103)			i = (i + 1);
            		}
HXLINE( 106)		return tokens;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,convert,return )

::Array< ::Dynamic> Parser_obj::mergeBlocks(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_117_mergeBlocks)
HXLINE( 119)		if (::hx::IsNull( pre )) {
HXLINE( 119)			return null();
            		}
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if ((pre->length == 1)) {
HXLINE( 120)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 120)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 122)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 124)		int i = 0;
HXLINE( 125)		while((i < pre->length)){
HXLINE( 126)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 127)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 128)					int line = token->_hx_getInt(0);
HXDLIN( 128)					{
HXLINE( 128)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 128)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 129)					::String module = token->_hx_getString(0);
HXDLIN( 129)					{
HXLINE( 129)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 129)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 130)					::little::parser::Parser_obj::nextPart();
HXDLIN( 130)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 156)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 156)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 156)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeBlocks(parts);
HXDLIN( 156)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 157)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 157)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 157)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeBlocks(body);
HXDLIN( 157)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 131)					if ((token->_hx_getString(0) == HX_("{",7b,00,00,00))) {
HXLINE( 132)						int blockStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 133)						::Array< ::Dynamic> blockBody = ::Array_obj< ::Dynamic>::__new(2)->init(0,::little::parser::ParserTokens_obj::SetModule(::little::parser::Parser_obj::get_module()))->init(1,::little::parser::ParserTokens_obj::SetLine(blockStartLine));
HXLINE( 134)						int blockStack = 1;
HXLINE( 135)						while(((i + 1) < pre->length)){
HXLINE( 136)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 137)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("{",7b,00,00,00)))) {
HXLINE( 138)								blockStack = (blockStack + 1);
HXLINE( 139)								blockBody->push(lookahead);
            							}
            							else {
HXLINE( 140)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("}",7d,00,00,00)))) {
HXLINE( 141)									blockStack = (blockStack - 1);
HXLINE( 142)									if ((blockStack == 0)) {
HXLINE( 142)										goto _hx_goto_5;
            									}
HXLINE( 143)									blockBody->push(lookahead);
            								}
            								else {
HXLINE( 144)									blockBody->push(lookahead);
            								}
            							}
HXLINE( 145)							i = (i + 1);
            						}
            						_hx_goto_5:;
HXLINE( 148)						if (((i + 1) == pre->length)) {
HXLINE( 149)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed code block, starting at line ",d6,5b,eb,82) + blockStartLine)),null());
HXLINE( 150)							return null();
            						}
HXLINE( 153)						post->push(::little::parser::ParserTokens_obj::Block(::little::parser::Parser_obj::mergeBlocks(blockBody),null()));
HXLINE( 154)						i = (i + 1);
            					}
            					else {
HXLINE( 159)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 158)					::String name = token->_hx_getString(0);
HXDLIN( 158)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 158)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 158)					{
HXLINE( 158)						int _g = 0;
HXDLIN( 158)						int _g1 = params->length;
HXDLIN( 158)						while((_g < _g1)){
HXLINE( 158)							_g = (_g + 1);
HXDLIN( 158)							int i1 = (_g - 1);
HXDLIN( 158)							{
HXLINE( 158)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeBlocks(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 158)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 158)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 159)					post->push(token);
            				}
            			}
HXLINE( 161)			i = (i + 1);
            		}
HXLINE( 164)		::little::parser::Parser_obj::resetLines();
HXLINE( 165)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeBlocks,return )

::Array< ::Dynamic> Parser_obj::mergeExpressions(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_175_mergeExpressions)
HXLINE( 177)		if (::hx::IsNull( pre )) {
HXLINE( 177)			return null();
            		}
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		if ((pre->length == 1)) {
HXLINE( 178)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 178)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 180)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 182)		int i = 0;
HXLINE( 183)		while((i < pre->length)){
HXLINE( 184)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 185)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 186)					int line = token->_hx_getInt(0);
HXDLIN( 186)					{
HXLINE( 186)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 186)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 187)					::String module = token->_hx_getString(0);
HXDLIN( 187)					{
HXLINE( 187)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 187)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 188)					::little::parser::Parser_obj::nextPart();
HXDLIN( 188)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 214)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 214)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 214)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergeExpressions(parts);
HXDLIN( 214)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 215)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 215)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 215)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergeExpressions(body);
HXDLIN( 215)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 189)					if ((token->_hx_getString(0) == HX_("(",28,00,00,00))) {
HXLINE( 190)						int expressionStartLine = ::little::parser::Parser_obj::get_line();
HXLINE( 191)						::Array< ::Dynamic> expressionBody = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 192)						int expressionStack = 1;
HXLINE( 193)						while(((i + 1) < pre->length)){
HXLINE( 194)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 195)							if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_("(",28,00,00,00)))) {
HXLINE( 196)								expressionStack = (expressionStack + 1);
HXLINE( 197)								expressionBody->push(lookahead);
            							}
            							else {
HXLINE( 198)								if (__hxcpp_enum_eq(lookahead,::little::parser::ParserTokens_obj::Sign(HX_(")",29,00,00,00)))) {
HXLINE( 199)									expressionStack = (expressionStack - 1);
HXLINE( 200)									if ((expressionStack == 0)) {
HXLINE( 200)										goto _hx_goto_9;
            									}
HXLINE( 201)									expressionBody->push(lookahead);
            								}
            								else {
HXLINE( 202)									expressionBody->push(lookahead);
            								}
            							}
HXLINE( 203)							i = (i + 1);
            						}
            						_hx_goto_9:;
HXLINE( 206)						if (((i + 1) == pre->length)) {
HXLINE( 207)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage((HX_("Unclosed expression, starting at line ",18,03,d6,b2) + expressionStartLine)),null());
HXLINE( 208)							return null();
            						}
HXLINE( 210)						post->push(::little::parser::ParserTokens_obj::Expression(::little::parser::Parser_obj::mergeExpressions(expressionBody),null()));
HXLINE( 211)						i = (i + 1);
            					}
            					else {
HXLINE( 217)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 216)					::String name = token->_hx_getString(0);
HXDLIN( 216)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 216)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 216)					{
HXLINE( 216)						int _g = 0;
HXDLIN( 216)						int _g1 = params->length;
HXDLIN( 216)						while((_g < _g1)){
HXLINE( 216)							_g = (_g + 1);
HXDLIN( 216)							int i1 = (_g - 1);
HXDLIN( 216)							{
HXLINE( 216)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeExpressions(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 216)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 216)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 217)					post->push(token);
            				}
            			}
HXLINE( 219)			i = (i + 1);
            		}
HXLINE( 222)		::little::parser::Parser_obj::resetLines();
HXLINE( 223)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeExpressions,return )

::Array< ::Dynamic> Parser_obj::mergePropertyOperations(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_235_mergePropertyOperations)
HXLINE( 237)		if (::hx::IsNull( pre )) {
HXLINE( 237)			return null();
            		}
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if ((pre->length == 1)) {
HXLINE( 238)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 238)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 240)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 241)		int i = 0;
HXLINE( 242)		while((i < pre->length)){
HXLINE( 244)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 245)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 246)					int line = token->_hx_getInt(0);
HXDLIN( 246)					{
HXLINE( 246)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 246)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 247)					::String module = token->_hx_getString(0);
HXDLIN( 247)					{
HXLINE( 247)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 247)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 248)					::little::parser::Parser_obj::nextPart();
HXDLIN( 248)					post->push(token);
            				}
            				break;
            				case (int)12: {
HXLINE( 311)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 311)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 311)					::Array< ::Dynamic> _hx_tmp1 = ::little::parser::Parser_obj::mergePropertyOperations(parts);
HXDLIN( 311)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp1,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 310)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 310)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 310)					::Array< ::Dynamic> _hx_tmp2 = ::little::parser::Parser_obj::mergePropertyOperations(body);
HXDLIN( 310)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp2,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 249)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->PROPERTY_ACCESS_SIGN) == true)) {
HXLINE( 250)						if ((post->length == 0)) {
HXLINE( 251)							::Array< ::Dynamic> _hx_tmp3 = ::little::Little_obj::runtime->callStack;
HXDLIN( 251)							::String _hx_tmp4 = ::little::parser::Parser_obj::get_module();
HXDLIN( 251)							int _hx_tmp5 = ::little::parser::Parser_obj::get_line();
HXDLIN( 251)							_hx_tmp3->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp4)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp5)));
HXLINE( 252)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of file, block or expression.",af,27,2e,fc)),HX_("Parser",ff,10,1d,22));
HXLINE( 253)							return null();
            						}
HXLINE( 255)						if (((i + 1) >= pre->length)) {
HXLINE( 256)							::Array< ::Dynamic> _hx_tmp6 = ::little::Little_obj::runtime->callStack;
HXDLIN( 256)							::String _hx_tmp7 = ::little::parser::Parser_obj::get_module();
HXDLIN( 256)							int _hx_tmp8 = ::little::parser::Parser_obj::get_line();
HXDLIN( 256)							int _hx_tmp9 = ::little::parser::Parser_obj::linePart;
HXDLIN( 256)							_hx_tmp6->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp9)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp7)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,post->pop().StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp8)));
HXLINE( 257)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the end of file, block or expression.",e8,e8,19,3f)),HX_("Parser",ff,10,1d,22));
HXLINE( 258)							return null();
            						}
HXLINE( 260)						 ::little::parser::ParserTokens lookbehind = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 261)						if (::hx::IsNull( lookbehind )) {
HXLINE( 305)							i = (i + 1);
HXDLIN( 305)							 ::little::parser::ParserTokens field = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 306)							post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field));
            						}
            						else {
HXLINE( 261)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 262)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp10 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp11 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp12 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp13 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp10->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp13)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp11)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp12)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 262)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp14 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp15 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp16 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp17 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp14->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp17)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp15)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp16)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 263)									::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 263)									::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 263)									int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 263)									int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 263)									_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::PropertyAccess(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 264)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Property access cut off by the start of a line, or by a line split (; or ,).",d4,e2,fb,1d)),HX_("Parser",ff,10,1d,22));
HXLINE( 265)									return null();
            								}
            								break;
            								case (int)12: {
HXLINE( 267)									::Array< ::Dynamic> _g2 = lookbehind->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 267)									 ::little::parser::ParserTokens _g3 = lookbehind->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 267)									{
HXLINE( 268)										i = (i + 1);
HXDLIN( 268)										 ::little::parser::ParserTokens field1 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 274)										::Array< ::Dynamic> beforePropertyCalls = ::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind);
HXLINE( 275)										while((post->length > 0)){
HXLINE( 276)											 ::little::parser::ParserTokens last = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 277)											if (::hx::IsNull( last )) {
HXLINE( 288)												post->push(last);
HXLINE( 289)												goto _hx_goto_13;
            											}
            											else {
HXLINE( 277)												switch((int)(last->_hx_getIndex())){
            													case (int)8: {
HXLINE( 278)														::String _g4 = last->_hx_getString(0);
HXLINE( 279)														beforePropertyCalls->push(last);
HXLINE( 280)														goto _hx_goto_13;
            													}
            													break;
            													case (int)12: {
HXLINE( 286)														::Array< ::Dynamic> parts1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 286)														 ::little::parser::ParserTokens type2 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 286)														::Array< ::Dynamic> _hx_tmp22 = ::little::parser::Parser_obj::mergePropertyOperations(parts1);
HXDLIN( 286)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp22,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            													}
            													break;
            													case (int)13: {
HXLINE( 282)														::Array< ::Dynamic> body1 = last->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 282)														 ::little::parser::ParserTokens type3 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 283)														::Array< ::Dynamic> _hx_tmp23 = ::little::parser::Parser_obj::mergePropertyOperations(body1);
HXDLIN( 283)														beforePropertyCalls->push(::little::parser::ParserTokens_obj::Block(_hx_tmp23,::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 284)														goto _hx_goto_13;
            													}
            													break;
            													case (int)15: {
HXLINE( 278)														 ::little::parser::ParserTokens _g5 = last->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 278)														 ::little::parser::ParserTokens _g6 = last->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 279)														beforePropertyCalls->push(last);
HXLINE( 280)														goto _hx_goto_13;
            													}
            													break;
            													default:{
HXLINE( 288)														post->push(last);
HXLINE( 289)														goto _hx_goto_13;
            													}
            												}
            											}
            										}
            										_hx_goto_13:;
HXLINE( 294)										 ::little::parser::ParserTokens parent = lookbehind;
HXLINE( 296)										if ((beforePropertyCalls->length > 0)) {
HXLINE( 297)											parent = beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 298)											while((beforePropertyCalls->length > 0)){
HXLINE( 299)												parent = ::little::parser::ParserTokens_obj::FunctionCall(parent,beforePropertyCalls->pop().StaticCast<  ::little::parser::ParserTokens >());
            											}
            										}
HXLINE( 302)										post->push(::little::parser::ParserTokens_obj::PropertyAccess(parent,field1));
            									}
            								}
            								break;
            								default:{
HXLINE( 305)									i = (i + 1);
HXDLIN( 305)									 ::little::parser::ParserTokens field2 = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 306)									post->push(::little::parser::ParserTokens_obj::PropertyAccess(lookbehind,field2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 313)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 312)					::String name = token->_hx_getString(0);
HXDLIN( 312)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 312)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 312)					{
HXLINE( 312)						int _g7 = 0;
HXDLIN( 312)						int _g8 = params->length;
HXDLIN( 312)						while((_g7 < _g8)){
HXLINE( 312)							_g7 = (_g7 + 1);
HXDLIN( 312)							int i1 = (_g7 - 1);
HXDLIN( 312)							{
HXLINE( 312)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergePropertyOperations(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 312)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 312)					post->push(::little::parser::ParserTokens_obj::Custom(name,result));
            				}
            				break;
            				default:{
HXLINE( 313)					post->push(token);
            				}
            			}
HXLINE( 315)			i = (i + 1);
            		}
HXLINE( 318)		::little::parser::Parser_obj::resetLines();
HXLINE( 319)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergePropertyOperations,return )

::Array< ::Dynamic> Parser_obj::mergeTypeDecls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_325_mergeTypeDecls)
HXLINE( 327)		if (::hx::IsNull( pre )) {
HXLINE( 327)			return null();
            		}
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if ((pre->length == 1)) {
HXLINE( 328)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 328)			_hx_tmp = false;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 328)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 330)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 332)		int i = 0;
HXLINE( 333)		while((i < pre->length)){
HXLINE( 334)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 335)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 336)					int line = token->_hx_getInt(0);
HXDLIN( 336)					{
HXLINE( 336)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 336)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 337)					::String module = token->_hx_getString(0);
HXDLIN( 337)					{
HXLINE( 337)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 337)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 338)					::little::parser::Parser_obj::nextPart();
HXDLIN( 338)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 339)					::String word = token->_hx_getString(0);
HXLINE( 340)					bool _hx_tmp1;
HXDLIN( 340)					if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 340)						_hx_tmp1 = ((i + 1) < pre->length);
            					}
            					else {
HXLINE( 340)						_hx_tmp1 = false;
            					}
HXDLIN( 340)					if (_hx_tmp1) {
HXLINE( 341)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 342)						post->push(::little::parser::ParserTokens_obj::TypeDeclaration(null(),::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 343)						i = (i + 1);
            					}
            					else {
HXLINE( 344)						if ((word == ::little::Little_obj::keywords->TYPE_DECL_OR_CAST)) {
HXLINE( 346)							if (((i + 1) == pre->length)) {
HXLINE( 347)								::Array< ::Dynamic> _hx_tmp2 = ::little::Little_obj::runtime->callStack;
HXDLIN( 347)								::String _hx_tmp3 = ::little::parser::Parser_obj::get_module();
HXDLIN( 347)								int _hx_tmp4 = ::little::parser::Parser_obj::get_line();
HXDLIN( 347)								_hx_tmp2->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp3)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp4)));
HXLINE( 348)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("Incomplete type declaration, make sure to input a type after the `",fe,76,87,0d) + ::little::Little_obj::keywords->TYPE_DECL_OR_CAST) + HX_("`.",ce,53,00,00))),null());
HXLINE( 349)								return null();
            							}
            						}
            						else {
HXLINE( 352)							post->push(token);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 355)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 355)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 355)					::Array< ::Dynamic> _hx_tmp5 = ::little::parser::Parser_obj::mergeTypeDecls(parts);
HXDLIN( 355)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp5,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 356)					::Array< ::Dynamic> body = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 356)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 356)					::Array< ::Dynamic> _hx_tmp6 = ::little::parser::Parser_obj::mergeTypeDecls(body);
HXDLIN( 356)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp6,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 357)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 357)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp7,::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 358)					::String name1 = token->_hx_getString(0);
HXDLIN( 358)					::Array< ::Dynamic> params = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 358)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params->length);
HXDLIN( 358)					{
HXLINE( 358)						int _g = 0;
HXDLIN( 358)						int _g1 = params->length;
HXDLIN( 358)						while((_g < _g1)){
HXLINE( 358)							_g = (_g + 1);
HXDLIN( 358)							int i1 = (_g - 1);
HXDLIN( 358)							{
HXLINE( 358)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 358)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 358)					post->push(::little::parser::ParserTokens_obj::Custom(name1,result));
            				}
            				break;
            				default:{
HXLINE( 359)					post->push(token);
            				}
            			}
HXLINE( 361)			i = (i + 1);
            		}
HXLINE( 364)		::little::parser::Parser_obj::resetLines();
HXLINE( 365)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeTypeDecls,return )

::Array< ::Dynamic> Parser_obj::mergeComplexStructures(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_375_mergeComplexStructures)
HXLINE( 377)		if (::hx::IsNull( pre )) {
HXLINE( 377)			return null();
            		}
HXLINE( 378)		bool _hx_tmp;
HXDLIN( 378)		if ((pre->length == 1)) {
HXLINE( 378)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 378)			_hx_tmp = false;
            		}
HXDLIN( 378)		if (_hx_tmp) {
HXLINE( 378)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 380)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 382)		int i = 0;
HXLINE( 383)		while((i < pre->length)){
HXLINE( 384)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 386)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 387)					int line = token->_hx_getInt(0);
HXDLIN( 387)					{
HXLINE( 387)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 387)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 388)					::String module = token->_hx_getString(0);
HXDLIN( 388)					{
HXLINE( 388)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 388)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 389)					::little::parser::Parser_obj::nextPart();
HXDLIN( 389)					post->push(token);
            				}
            				break;
            				case (int)8: {
HXLINE( 547)					::String _g = token->_hx_getString(0);
HXLINE( 391)					{
HXLINE( 522)						bool _hx_tmp1;
HXLINE( 450)						bool _hx_tmp2;
HXLINE( 391)						if (((_g == ::little::Little_obj::keywords->VARIABLE_DECLARATION) == true)) {
HXLINE( 392)							i = (i + 1);
HXLINE( 393)							if ((i >= pre->length)) {
HXLINE( 394)								::Array< ::Dynamic> _hx_tmp3 = ::little::Little_obj::runtime->callStack;
HXDLIN( 394)								::String _hx_tmp4 = ::little::parser::Parser_obj::get_module();
HXDLIN( 394)								int _hx_tmp5 = ::little::parser::Parser_obj::get_line();
HXDLIN( 394)								_hx_tmp3->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp4)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp5)));
HXLINE( 395)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
HXLINE( 396)								return null();
            							}
HXLINE( 399)							 ::little::parser::ParserTokens name = null();
HXLINE( 400)							 ::little::parser::ParserTokens type = null();
HXLINE( 402)							while((i < pre->length)){
HXLINE( 403)								 ::little::parser::ParserTokens lookahead = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 404)								switch((int)(lookahead->_hx_getIndex())){
            									case (int)0: {
HXLINE( 414)										int _g1 = lookahead->_hx_getInt(0);
HXDLIN( 414)										i = (i - 1);
HXDLIN( 414)										goto _hx_goto_21;
            									}
            									break;
            									case (int)1: {
HXLINE( 414)										::String _g2 = lookahead->_hx_getString(0);
HXDLIN( 414)										i = (i - 1);
HXDLIN( 414)										goto _hx_goto_21;
            									}
            									break;
            									case (int)2: {
HXLINE( 414)										i = (i - 1);
HXDLIN( 414)										goto _hx_goto_21;
            									}
            									break;
            									case (int)9: {
HXLINE( 405)										 ::little::parser::ParserTokens _g3 = lookahead->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 405)										 ::little::parser::ParserTokens typeToken = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 406)										if (::hx::IsNull( name )) {
HXLINE( 407)											::Array< ::Dynamic> _hx_tmp6 = ::little::Little_obj::runtime->callStack;
HXDLIN( 407)											::String _hx_tmp7 = ::little::parser::Parser_obj::get_module();
HXDLIN( 407)											int _hx_tmp8 = ::little::parser::Parser_obj::get_line();
HXDLIN( 407)											int _hx_tmp9 = ::little::parser::Parser_obj::linePart;
HXDLIN( 407)											_hx_tmp6->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp9)
            												->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp7)
            												->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            												->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp8)));
HXLINE( 408)											::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name before type declaration.",64,1e,a6,f5)),HX_("Parser",ff,10,1d,22));
HXLINE( 409)											return null();
            										}
HXLINE( 411)										type = typeToken;
HXLINE( 412)										goto _hx_goto_21;
            									}
            									break;
            									case (int)12: {
HXLINE( 423)										::Array< ::Dynamic> body = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 423)										 ::little::parser::ParserTokens type1 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 424)										if (::hx::IsNull( name )) {
HXLINE( 424)											::Array< ::Dynamic> name1 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 424)											name = ::little::parser::ParserTokens_obj::Expression(name1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 425)											if (::hx::IsNull( type1 )) {
HXLINE( 425)												::Array< ::Dynamic> type2 = ::little::parser::Parser_obj::mergeComplexStructures(body);
HXDLIN( 425)												type1 = ::little::parser::ParserTokens_obj::Expression(type2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 427)												i = (i - 1);
HXLINE( 428)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)13: {
HXLINE( 415)										::Array< ::Dynamic> body1 = lookahead->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 415)										 ::little::parser::ParserTokens type3 = lookahead->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 416)										if (::hx::IsNull( name )) {
HXLINE( 416)											::Array< ::Dynamic> name2 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 416)											name = ::little::parser::ParserTokens_obj::Block(name2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            										}
            										else {
HXLINE( 417)											if (::hx::IsNull( type3 )) {
HXLINE( 417)												::Array< ::Dynamic> type4 = ::little::parser::Parser_obj::mergeComplexStructures(body1);
HXDLIN( 417)												type3 = ::little::parser::ParserTokens_obj::Block(type4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 419)												i = (i - 1);
HXLINE( 420)												goto _hx_goto_21;
            											}
            										}
            									}
            									break;
            									case (int)16: {
HXLINE( 414)										if ((lookahead->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 414)											i = (i - 1);
HXDLIN( 414)											goto _hx_goto_21;
            										}
            										else {
HXLINE( 432)											if (::hx::IsNull( name )) {
HXLINE( 432)												name = lookahead;
            											}
            											else {
HXLINE( 433)												bool _hx_tmp10;
HXDLIN( 433)												if (::hx::IsNull( type )) {
HXLINE( 433)													::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 433)													::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 433)													{
HXLINE( 433)														int _g4 = 0;
HXDLIN( 433)														int _g5 = _this->length;
HXDLIN( 433)														while((_g4 < _g5)){
HXLINE( 433)															_g4 = (_g4 + 1);
HXDLIN( 433)															int i1 = (_g4 - 1);
HXDLIN( 433)															{
HXLINE( 433)																::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 433)																result->__unsafe_set(i1,inValue);
            															}
            														}
            													}
HXDLIN( 433)													_hx_tmp10 = result->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            												}
            												else {
HXLINE( 433)													_hx_tmp10 = false;
            												}
HXDLIN( 433)												if (_hx_tmp10) {
HXLINE( 433)													type = lookahead;
            												}
            												else {
HXLINE( 435)													i = (i - 1);
HXLINE( 436)													goto _hx_goto_21;
            												}
            											}
            										}
            									}
            									break;
            									default:{
HXLINE( 432)										if (::hx::IsNull( name )) {
HXLINE( 432)											name = lookahead;
            										}
            										else {
HXLINE( 433)											bool _hx_tmp11;
HXDLIN( 433)											if (::hx::IsNull( type )) {
HXLINE( 433)												::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::TYPE_DECLARATION_dyn())->copy();
HXDLIN( 433)												::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 433)												{
HXLINE( 433)													int _g6 = 0;
HXDLIN( 433)													int _g7 = _this1->length;
HXDLIN( 433)													while((_g6 < _g7)){
HXLINE( 433)														_g6 = (_g6 + 1);
HXDLIN( 433)														int i2 = (_g6 - 1);
HXDLIN( 433)														{
HXLINE( 433)															::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 433)															result1->__unsafe_set(i2,inValue1);
            														}
            													}
            												}
HXDLIN( 433)												_hx_tmp11 = result1->contains(::Type_obj::enumConstructor(lookahead).toLowerCase());
            											}
            											else {
HXLINE( 433)												_hx_tmp11 = false;
            											}
HXDLIN( 433)											if (_hx_tmp11) {
HXLINE( 433)												type = lookahead;
            											}
            											else {
HXLINE( 435)												i = (i - 1);
HXLINE( 436)												goto _hx_goto_21;
            											}
            										}
            									}
            								}
HXLINE( 440)								i = (i + 1);
            							}
            							_hx_goto_21:;
HXLINE( 442)							if (::hx::IsNull( name )) {
HXLINE( 443)								::Array< ::Dynamic> _hx_tmp12 = ::little::Little_obj::runtime->callStack;
HXDLIN( 443)								::String _hx_tmp13 = ::little::parser::Parser_obj::get_module();
HXDLIN( 443)								int _hx_tmp14 = ::little::parser::Parser_obj::get_line();
HXDLIN( 443)								_hx_tmp12->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp13)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::VariableDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp14)));
HXLINE( 444)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing variable name, variable is cut off by the end of the file, block or expression.",81,1e,ff,ea)),HX_("Parser",ff,10,1d,22));
HXLINE( 445)								return null();
            							}
HXLINE( 448)							 ::little::parser::ParserTokens _hx_tmp15;
HXDLIN( 448)							bool _hx_tmp16;
HXDLIN( 448)							if ((post->length > 0)) {
HXLINE( 448)								 ::little::parser::ParserTokens token1 = post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 448)								::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::DOCUMENTATION_dyn())->copy();
HXDLIN( 448)								::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 448)								{
HXLINE( 448)									int _g8 = 0;
HXDLIN( 448)									int _g9 = _this2->length;
HXDLIN( 448)									while((_g8 < _g9)){
HXLINE( 448)										_g8 = (_g8 + 1);
HXDLIN( 448)										int i3 = (_g8 - 1);
HXDLIN( 448)										{
HXLINE( 448)											::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 448)											result2->__unsafe_set(i3,inValue2);
            										}
            									}
            								}
HXDLIN( 448)								_hx_tmp16 = result2->contains(::Type_obj::enumConstructor(token1).toLowerCase());
            							}
            							else {
HXLINE( 448)								_hx_tmp16 = false;
            							}
HXDLIN( 448)							if (_hx_tmp16) {
HXLINE( 448)								_hx_tmp15 = post->pop().StaticCast<  ::little::parser::ParserTokens >();
            							}
            							else {
HXLINE( 448)								_hx_tmp15 = null();
            							}
HXDLIN( 448)							post->push(::little::parser::ParserTokens_obj::Variable(name,type,_hx_tmp15));
            						}
            						else {
HXLINE( 450)							_hx_tmp2 = (_g == ::little::Little_obj::keywords->FUNCTION_DECLARATION);
HXDLIN( 450)							if ((_hx_tmp2 == true)) {
HXLINE( 451)								i = (i + 1);
HXLINE( 452)								if ((i >= pre->length)) {
HXLINE( 453)									::Array< ::Dynamic> _hx_tmp17 = ::little::Little_obj::runtime->callStack;
HXDLIN( 453)									::String _hx_tmp18 = ::little::parser::Parser_obj::get_module();
HXDLIN( 453)									int _hx_tmp19 = ::little::parser::Parser_obj::get_line();
HXDLIN( 453)									_hx_tmp17->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp18)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp19)));
HXLINE( 454)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name, function is cut off by the end of the file, block or expression.",01,f6,a5,95)),HX_("Parser",ff,10,1d,22));
HXLINE( 455)									return null();
            								}
HXLINE( 457)								if (((i + 1) >= pre->length)) {
HXLINE( 458)									::Array< ::Dynamic> _hx_tmp20 = ::little::Little_obj::runtime->callStack;
HXDLIN( 458)									::String _hx_tmp21 = ::little::parser::Parser_obj::get_module();
HXDLIN( 458)									int _hx_tmp22 = ::little::parser::Parser_obj::get_line();
HXDLIN( 458)									int _hx_tmp23 = ::little::parser::Parser_obj::linePart;
HXDLIN( 458)									_hx_tmp20->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp23)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp21)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,pre->__get(i).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp22)));
HXLINE( 459)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameter body, function is cut off by the end of the file, block or expression.",2f,91,cb,1a)),HX_("Parser",ff,10,1d,22));
HXLINE( 460)									return null();
            								}
HXLINE( 463)								 ::little::parser::ParserTokens name3 = null();
HXLINE( 464)								 ::little::parser::ParserTokens params = null();
HXLINE( 465)								 ::little::parser::ParserTokens type5 = null();
HXLINE( 466)								while((i < pre->length)){
HXLINE( 467)									 ::little::parser::ParserTokens lookahead1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 468)									switch((int)(lookahead1->_hx_getIndex())){
            										case (int)9: {
HXLINE( 469)											 ::little::parser::ParserTokens _g10 = lookahead1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 469)											 ::little::parser::ParserTokens typeToken1 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 470)											if (::hx::IsNull( name3 )) {
HXLINE( 471)												::Array< ::Dynamic> _hx_tmp24 = ::little::Little_obj::runtime->callStack;
HXDLIN( 471)												::String _hx_tmp25 = ::little::parser::Parser_obj::get_module();
HXDLIN( 471)												int _hx_tmp26 = ::little::parser::Parser_obj::get_line();
HXDLIN( 471)												int _hx_tmp27 = ::little::parser::Parser_obj::linePart;
HXDLIN( 471)												_hx_tmp24->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp27)
            													->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp25)
            													->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            													->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp26)));
HXLINE( 472)												::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters before type declaration.",7f,98,8f,9a)),HX_("Parser",ff,10,1d,22));
HXLINE( 473)												return null();
            											}
            											else {
HXLINE( 475)												if (::hx::IsNull( params )) {
HXLINE( 476)													::Array< ::Dynamic> _hx_tmp28 = ::little::Little_obj::runtime->callStack;
HXDLIN( 476)													::String _hx_tmp29 = ::little::parser::Parser_obj::get_module();
HXDLIN( 476)													int _hx_tmp30 = ::little::parser::Parser_obj::get_line();
HXDLIN( 476)													int _hx_tmp31 = ::little::parser::Parser_obj::linePart;
HXDLIN( 476)													 ::little::interpreter::InterpTokens _hx_tmp32 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 476)													_hx_tmp28->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            														->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp31)
            														->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp29)
            														->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(_hx_tmp32,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null()))
            														->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp30)));
HXLINE( 477)													::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters before type declaration.",81,b3,5a,87)),HX_("Parser",ff,10,1d,22));
HXLINE( 478)													return null();
            												}
            											}
HXLINE( 480)											type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,typeToken1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 481)											goto _hx_goto_25;
            										}
            										break;
            										case (int)12: {
HXLINE( 492)											::Array< ::Dynamic> body2 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 492)											 ::little::parser::ParserTokens type6 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 493)											if (::hx::IsNull( name3 )) {
HXLINE( 493)												::Array< ::Dynamic> name4 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 493)												name3 = ::little::parser::ParserTokens_obj::Expression(name4,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 494)												if (::hx::IsNull( params )) {
HXLINE( 494)													::Array< ::Dynamic> params1 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 494)													params = ::little::parser::ParserTokens_obj::Expression(params1,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 495)													if (::hx::IsNull( type6 )) {
HXLINE( 495)														::Array< ::Dynamic> type7 = ::little::parser::Parser_obj::mergeComplexStructures(body2);
HXDLIN( 495)														type6 = ::little::parser::ParserTokens_obj::Expression(type7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type6))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 497)														goto _hx_goto_25;
            													}
            												}
            											}
            										}
            										break;
            										case (int)13: {
HXLINE( 484)											::Array< ::Dynamic> body3 = lookahead1->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 484)											 ::little::parser::ParserTokens type8 = lookahead1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 485)											if (::hx::IsNull( name3 )) {
HXLINE( 485)												::Array< ::Dynamic> name5 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 485)												name3 = ::little::parser::ParserTokens_obj::Block(name5,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            											}
            											else {
HXLINE( 486)												if (::hx::IsNull( params )) {
HXLINE( 486)													::Array< ::Dynamic> params2 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 486)													params = ::little::parser::ParserTokens_obj::Block(params2,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            												}
            												else {
HXLINE( 487)													if (::hx::IsNull( type8 )) {
HXLINE( 487)														::Array< ::Dynamic> type9 = ::little::parser::Parser_obj::mergeComplexStructures(body3);
HXDLIN( 487)														type8 = ::little::parser::ParserTokens_obj::Block(type9,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type8))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            													else {
HXLINE( 489)														goto _hx_goto_25;
            													}
            												}
            											}
            										}
            										break;
            										case (int)16: {
HXLINE( 483)											if ((lookahead1->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 483)												i = (i - 1);
HXDLIN( 483)												goto _hx_goto_25;
            											}
            											else {
HXLINE( 501)												if (::hx::IsNull( name3 )) {
HXLINE( 501)													name3 = lookahead1;
            												}
            												else {
HXLINE( 502)													if (::hx::IsNull( params )) {
HXLINE( 502)														params = lookahead1;
            													}
            													else {
HXLINE( 503)														bool _hx_tmp33;
HXDLIN( 503)														if (::hx::IsNull( type5 )) {
HXLINE( 503)															_hx_tmp33 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            														}
            														else {
HXLINE( 503)															_hx_tmp33 = false;
            														}
HXDLIN( 503)														if (_hx_tmp33) {
HXLINE( 503)															type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            														}
            														else {
HXLINE( 505)															goto _hx_goto_25;
            														}
            													}
            												}
            											}
            										}
            										break;
            										default:{
HXLINE( 501)											if (::hx::IsNull( name3 )) {
HXLINE( 501)												name3 = lookahead1;
            											}
            											else {
HXLINE( 502)												if (::hx::IsNull( params )) {
HXLINE( 502)													params = lookahead1;
            												}
            												else {
HXLINE( 503)													bool _hx_tmp34;
HXDLIN( 503)													if (::hx::IsNull( type5 )) {
HXLINE( 503)														_hx_tmp34 = (::Type_obj::enumConstructor(lookahead1) == HX_("TypeDeclaration",40,b8,7f,a5));
            													}
            													else {
HXLINE( 503)														_hx_tmp34 = false;
            													}
HXDLIN( 503)													if (_hx_tmp34) {
HXLINE( 503)														type5 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(lookahead1)->__get(1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            													}
            													else {
HXLINE( 505)														goto _hx_goto_25;
            													}
            												}
            											}
            										}
            									}
HXLINE( 509)									i = (i + 1);
            								}
            								_hx_goto_25:;
HXLINE( 511)								if (::hx::IsNull( name3 )) {
HXLINE( 512)									::Array< ::Dynamic> _hx_tmp35 = ::little::Little_obj::runtime->callStack;
HXDLIN( 512)									::String _hx_tmp36 = ::little::parser::Parser_obj::get_module();
HXDLIN( 512)									int _hx_tmp37 = ::little::parser::Parser_obj::get_line();
HXDLIN( 512)									_hx_tmp35->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp36)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null(),null(),null()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp37)));
HXLINE( 513)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function name and parameters, function is cut off by the end of the file, block or expression.",e2,79,3a,ec)),HX_("Parser",ff,10,1d,22));
HXLINE( 514)									return null();
            								}
            								else {
HXLINE( 515)									if (::hx::IsNull( params )) {
HXLINE( 516)										::Array< ::Dynamic> _hx_tmp38 = ::little::Little_obj::runtime->callStack;
HXDLIN( 516)										::String _hx_tmp39 = ::little::parser::Parser_obj::get_module();
HXDLIN( 516)										int _hx_tmp40 = ::little::parser::Parser_obj::get_line();
HXDLIN( 516)										int _hx_tmp41 = ::little::parser::Parser_obj::linePart;
HXDLIN( 516)										_hx_tmp38->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp41)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp39)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionDeclaration(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >(),null(),null(),null()))
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp40)));
HXLINE( 517)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing function parameters, function is cut off by the end of the file, block or expression.",a0,a6,fc,8b)),HX_("Parser",ff,10,1d,22));
HXLINE( 518)										return null();
            									}
            								}
HXLINE( 520)								 ::little::parser::ParserTokens _hx_tmp42;
HXDLIN( 520)								bool _hx_tmp43;
HXDLIN( 520)								if ((post->length > 0)) {
HXLINE( 520)									 ::little::parser::ParserTokens token2 = post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 520)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::DOCUMENTATION_dyn())->copy();
HXDLIN( 520)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 520)									{
HXLINE( 520)										int _g11 = 0;
HXDLIN( 520)										int _g12 = _this3->length;
HXDLIN( 520)										while((_g11 < _g12)){
HXLINE( 520)											_g11 = (_g11 + 1);
HXDLIN( 520)											int i4 = (_g11 - 1);
HXDLIN( 520)											{
HXLINE( 520)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 520)												result3->__unsafe_set(i4,inValue3);
            											}
            										}
            									}
HXDLIN( 520)									_hx_tmp43 = result3->contains(::Type_obj::enumConstructor(token2).toLowerCase());
            								}
            								else {
HXLINE( 520)									_hx_tmp43 = false;
            								}
HXDLIN( 520)								if (_hx_tmp43) {
HXLINE( 520)									_hx_tmp42 = post->pop().StaticCast<  ::little::parser::ParserTokens >();
            								}
            								else {
HXLINE( 520)									_hx_tmp42 = null();
            								}
HXDLIN( 520)								post->push(::little::parser::ParserTokens_obj::Function(name3,params,type5,_hx_tmp42));
            							}
            							else {
HXLINE( 522)								_hx_tmp1 = (_g == ::little::Little_obj::keywords->FUNCTION_RETURN);
HXDLIN( 522)								if ((_hx_tmp1 == true)) {
HXLINE( 523)									i = (i + 1);
HXLINE( 524)									if ((i >= pre->length)) {
HXLINE( 525)										::Array< ::Dynamic> _hx_tmp44 = ::little::Little_obj::runtime->callStack;
HXDLIN( 525)										::String _hx_tmp45 = ::little::parser::Parser_obj::get_module();
HXDLIN( 525)										int _hx_tmp46 = ::little::parser::Parser_obj::get_line();
HXDLIN( 525)										_hx_tmp44->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp45)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::FunctionReturn(::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00)),null()))
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp46)));
HXLINE( 526)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing return value, value is cut off by the end of the file, block or expression.",fe,14,08,44)),HX_("Parser",ff,10,1d,22));
HXLINE( 527)										return null();
            									}
HXLINE( 530)									::Array< ::Dynamic> valueToReturn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 531)									while((i < pre->length)){
HXLINE( 532)										 ::little::parser::ParserTokens lookahead2 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 533)										switch((int)(lookahead2->_hx_getIndex())){
            											case (int)0: {
HXLINE( 534)												int _g13 = lookahead2->_hx_getInt(0);
HXDLIN( 534)												i = (i - 1);
HXDLIN( 534)												goto _hx_goto_27;
            											}
            											break;
            											case (int)1: {
HXLINE( 534)												::String _g14 = lookahead2->_hx_getString(0);
HXDLIN( 534)												i = (i - 1);
HXDLIN( 534)												goto _hx_goto_27;
            											}
            											break;
            											case (int)2: {
HXLINE( 534)												i = (i - 1);
HXDLIN( 534)												goto _hx_goto_27;
            											}
            											break;
            											case (int)12: {
HXLINE( 538)												::Array< ::Dynamic> body4 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 538)												 ::little::parser::ParserTokens type10 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 539)												::Array< ::Dynamic> _hx_tmp47 = ::little::parser::Parser_obj::mergeComplexStructures(body4);
HXDLIN( 539)												valueToReturn->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp47,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type10))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											case (int)13: {
HXLINE( 535)												::Array< ::Dynamic> body5 = lookahead2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 535)												 ::little::parser::ParserTokens type11 = lookahead2->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 536)												::Array< ::Dynamic> _hx_tmp48 = ::little::parser::Parser_obj::mergeComplexStructures(body5);
HXDLIN( 536)												valueToReturn->push(::little::parser::ParserTokens_obj::Block(_hx_tmp48,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type11))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            											}
            											break;
            											default:{
HXLINE( 541)												valueToReturn->push(lookahead2);
            											}
            										}
HXLINE( 543)										i = (i + 1);
            									}
            									_hx_goto_27:;
HXLINE( 545)									 ::little::parser::ParserTokens _hx_tmp49;
HXDLIN( 545)									if ((valueToReturn->length == 1)) {
HXLINE( 545)										_hx_tmp49 = valueToReturn->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            									}
            									else {
HXLINE( 545)										_hx_tmp49 = ::little::parser::ParserTokens_obj::Expression(valueToReturn->copy(),null());
            									}
HXDLIN( 545)									post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp49,null()));
            								}
            								else {
HXLINE( 548)									i = (i + 1);
HXLINE( 550)									 ::little::parser::ParserTokens name6 = ::little::parser::ParserTokens_obj::Identifier(::Type_obj::enumParameters(token)->__get(0));
HXLINE( 551)									 ::little::parser::ParserTokens exp = null();
HXLINE( 552)									 ::little::parser::ParserTokens body6 = null();
HXLINE( 554)									int fallback = (i - 1);
HXLINE( 556)									while(::hx::IsNull( body6 )){
HXLINE( 558)										if ((i >= pre->length)) {
HXLINE( 559)											i = fallback;
HXLINE( 560)											goto _hx_goto_28;
            										}
HXLINE( 562)										 ::little::parser::ParserTokens lookahead3 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 563)										switch((int)(lookahead3->_hx_getIndex())){
            											case (int)0: {
HXLINE( 564)												int _g15 = lookahead3->_hx_getInt(0);
HXLINE( 565)												bool _hx_tmp50;
HXDLIN( 565)												if (::hx::IsNotNull( exp )) {
HXLINE( 565)													_hx_tmp50 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 565)													_hx_tmp50 = false;
            												}
HXDLIN( 565)												if (_hx_tmp50) {
HXLINE( 565)													goto _hx_goto_28;
            												}
HXLINE( 566)												i = fallback;
HXLINE( 567)												goto _hx_goto_28;
            											}
            											break;
            											case (int)1: {
HXLINE( 564)												::String _g16 = lookahead3->_hx_getString(0);
HXLINE( 565)												bool _hx_tmp51;
HXDLIN( 565)												if (::hx::IsNotNull( exp )) {
HXLINE( 565)													_hx_tmp51 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 565)													_hx_tmp51 = false;
            												}
HXDLIN( 565)												if (_hx_tmp51) {
HXLINE( 565)													goto _hx_goto_28;
            												}
HXLINE( 566)												i = fallback;
HXLINE( 567)												goto _hx_goto_28;
            											}
            											break;
            											case (int)2: {
HXLINE( 565)												bool _hx_tmp52;
HXDLIN( 565)												if (::hx::IsNotNull( exp )) {
HXLINE( 565)													_hx_tmp52 = ::hx::IsNotNull( body6 );
            												}
            												else {
HXLINE( 565)													_hx_tmp52 = false;
            												}
HXDLIN( 565)												if (_hx_tmp52) {
HXLINE( 565)													goto _hx_goto_28;
            												}
HXLINE( 566)												i = fallback;
HXLINE( 567)												goto _hx_goto_28;
            											}
            											break;
            											case (int)12: {
HXLINE( 576)												::Array< ::Dynamic> parts = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 576)												 ::little::parser::ParserTokens type12 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 577)												if (::hx::IsNull( exp )) {
HXLINE( 577)													exp = ::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeComplexStructures(parts));
            												}
            												else {
HXLINE( 578)													if (::hx::IsNull( body6 )) {
HXLINE( 579)														i = fallback;
HXLINE( 580)														goto _hx_goto_28;
            													}
            												}
            											}
            											break;
            											case (int)13: {
HXLINE( 569)												::Array< ::Dynamic> b = lookahead3->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 569)												 ::little::parser::ParserTokens type13 = lookahead3->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 570)												if (::hx::IsNull( exp )) {
HXLINE( 571)													i = fallback;
HXLINE( 572)													goto _hx_goto_28;
            												}
            												else {
HXLINE( 574)													if (::hx::IsNull( body6 )) {
HXLINE( 574)														::Array< ::Dynamic> body7 = ::little::parser::Parser_obj::mergeComplexStructures(b);
HXDLIN( 574)														body6 = ::little::parser::ParserTokens_obj::Block(body7,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type13))->__get(0).StaticCast<  ::little::parser::ParserTokens >());
            													}
            												}
            											}
            											break;
            											default:{
HXLINE( 584)												bool _hx_tmp53;
HXDLIN( 584)												if (::hx::IsNotNull( exp )) {
HXLINE( 584)													_hx_tmp53 = ::hx::IsNull( body6 );
            												}
            												else {
HXLINE( 584)													_hx_tmp53 = true;
            												}
HXDLIN( 584)												if (_hx_tmp53) {
HXLINE( 585)													i = fallback;
HXLINE( 586)													goto _hx_goto_28;
            												}
            											}
            										}
HXLINE( 590)										i = (i + 1);
            									}
            									_hx_goto_28:;
HXLINE( 592)									if ((i == fallback)) {
HXLINE( 593)										post->push(token);
            									}
            									else {
HXLINE( 595)										i = (i - 1);
HXLINE( 596)										post->push(::little::parser::ParserTokens_obj::ConditionCall(name6,exp,body6));
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 599)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 599)					 ::little::parser::ParserTokens type14 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 599)					::Array< ::Dynamic> _hx_tmp54 = ::little::parser::Parser_obj::mergeComplexStructures(parts1);
HXDLIN( 599)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp54,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type14))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 600)					::Array< ::Dynamic> body8 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 600)					 ::little::parser::ParserTokens type15 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 600)					::Array< ::Dynamic> _hx_tmp55 = ::little::parser::Parser_obj::mergeComplexStructures(body8);
HXDLIN( 600)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp55,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,type15))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)15: {
HXLINE( 601)					 ::little::parser::ParserTokens name7 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 601)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 601)					 ::little::parser::ParserTokens _hx_tmp56 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,name7))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 601)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp56,::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)20: {
HXLINE( 390)					::String doc = token->_hx_getString(0);
HXDLIN( 390)					post->push(token);
            				}
            				break;
            				case (int)25: {
HXLINE( 602)					::String name8 = token->_hx_getString(0);
HXDLIN( 602)					::Array< ::Dynamic> params3 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 602)					::Array< ::Dynamic> result4 = ::Array_obj< ::Dynamic>::__new(params3->length);
HXDLIN( 602)					{
HXLINE( 602)						int _g17 = 0;
HXDLIN( 602)						int _g18 = params3->length;
HXDLIN( 602)						while((_g17 < _g18)){
HXLINE( 602)							_g17 = (_g17 + 1);
HXDLIN( 602)							int i5 = (_g17 - 1);
HXDLIN( 602)							{
HXLINE( 602)								 ::little::parser::ParserTokens inValue4 = ::little::parser::Parser_obj::mergeComplexStructures(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params3,i5)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 602)								result4->__unsafe_set(i5,inValue4);
            							}
            						}
            					}
HXDLIN( 602)					post->push(::little::parser::ParserTokens_obj::Custom(name8,result4));
            				}
            				break;
            				default:{
HXLINE( 603)					post->push(token);
            				}
            			}
HXLINE( 605)			i = (i + 1);
            		}
HXLINE( 608)		::little::parser::Parser_obj::resetLines();
HXLINE( 609)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeComplexStructures,return )

::Array< ::Dynamic> Parser_obj::mergeCalls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_615_mergeCalls)
HXLINE( 617)		if (::hx::IsNull( pre )) {
HXLINE( 617)			return null();
            		}
HXLINE( 618)		bool _hx_tmp;
HXDLIN( 618)		if ((pre->length == 1)) {
HXLINE( 618)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 618)			_hx_tmp = false;
            		}
HXDLIN( 618)		if (_hx_tmp) {
HXLINE( 618)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 620)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 622)		int i = 0;
HXLINE( 623)		while((i < pre->length)){
HXLINE( 625)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 626)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 627)					int line = token->_hx_getInt(0);
HXDLIN( 627)					{
HXLINE( 627)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 627)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 628)					::String module = token->_hx_getString(0);
HXDLIN( 628)					{
HXLINE( 628)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 628)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 629)					::little::parser::Parser_obj::nextPart();
HXDLIN( 629)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 647)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 647)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 647)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 647)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 647)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 647)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 648)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 648)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 649)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 649)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 649)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 649)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 649)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 649)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 650)					 ::little::parser::ParserTokens value = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 650)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 650)					 ::little::parser::ParserTokens _hx_tmp8 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 650)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp8,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 630)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 630)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 630)					{
HXLINE( 631)						parts = ::little::parser::Parser_obj::mergeCalls(parts);
HXLINE( 632)						if ((i == 0)) {
HXLINE( 633)							post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            						}
            						else {
HXLINE( 635)							 ::little::parser::ParserTokens lookbehind = pre->__get((i - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 636)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 637)									int _g = lookbehind->_hx_getInt(0);
HXDLIN( 637)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)1: {
HXLINE( 637)									::String _g1 = lookbehind->_hx_getString(0);
HXDLIN( 637)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)2: {
HXLINE( 637)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								case (int)16: {
HXLINE( 637)									::String _g2 = lookbehind->_hx_getString(0);
HXDLIN( 637)									post->push(::little::parser::ParserTokens_obj::Expression(parts,type3));
            								}
            								break;
            								default:{
HXLINE( 639)									 ::little::parser::ParserTokens previous = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 640)									token = ::little::parser::ParserTokens_obj::PartArray(parts);
HXLINE( 641)									post->push(::little::parser::ParserTokens_obj::FunctionCall(previous,token));
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 646)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 646)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 646)					::Array< ::Dynamic> _hx_tmp9 = ::little::parser::Parser_obj::mergeCalls(body1);
HXDLIN( 646)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp9,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 652)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 652)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeCalls(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 651)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 651)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp10,::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 653)					::String name4 = token->_hx_getString(0);
HXDLIN( 653)					::Array< ::Dynamic> params1 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 653)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params1->length);
HXDLIN( 653)					{
HXLINE( 653)						int _g3 = 0;
HXDLIN( 653)						int _g4 = params1->length;
HXDLIN( 653)						while((_g3 < _g4)){
HXLINE( 653)							_g3 = (_g3 + 1);
HXDLIN( 653)							int i1 = (_g3 - 1);
HXDLIN( 653)							{
HXLINE( 653)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeCalls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params1,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 653)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 653)					post->push(::little::parser::ParserTokens_obj::Custom(name4,result));
            				}
            				break;
            				default:{
HXLINE( 654)					post->push(token);
            				}
            			}
HXLINE( 656)			i = (i + 1);
            		}
HXLINE( 659)		::little::parser::Parser_obj::resetLines();
HXLINE( 660)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeCalls,return )

::Array< ::Dynamic> Parser_obj::mergeWrites(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_666_mergeWrites)
HXLINE( 667)		if (::hx::IsNull( pre )) {
HXLINE( 667)			return null();
            		}
HXLINE( 668)		bool _hx_tmp;
HXDLIN( 668)		if ((pre->length == 1)) {
HXLINE( 668)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 668)			_hx_tmp = false;
            		}
HXDLIN( 668)		if (_hx_tmp) {
HXLINE( 668)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 670)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 672)		int i = 0;
HXLINE( 673)		while((i < pre->length)){
HXLINE( 674)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 675)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 676)					int line = token->_hx_getInt(0);
HXDLIN( 676)					{
HXLINE( 677)						::little::parser::Parser_obj::setLine(line);
HXLINE( 678)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 680)					::String module = token->_hx_getString(0);
HXDLIN( 680)					{
HXLINE( 681)						::little::parser::Parser_obj::set_module(module);
HXLINE( 682)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 685)					::little::parser::Parser_obj::nextPart();
HXLINE( 686)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 725)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 725)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 726)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 726)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 727)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 727)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)6: {
HXLINE( 728)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 728)					post->push(::little::parser::ParserTokens_obj::Read(::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 736)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 736)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 736)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeWrites(assignees);
HXDLIN( 736)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)9: {
HXLINE( 729)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 729)					post->push(::little::parser::ParserTokens_obj::TypeDeclaration(_hx_tmp9,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)10: {
HXLINE( 730)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 730)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 730)					 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 730)					post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp10,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 731)					 ::little::parser::ParserTokens value2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)					 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 731)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp11,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 732)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 732)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 732)					::Array< ::Dynamic> _hx_tmp12 = ::little::parser::Parser_obj::mergeWrites(parts);
HXDLIN( 732)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp12,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 733)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 733)					 ::little::parser::ParserTokens type5 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 733)					::Array< ::Dynamic> _hx_tmp13 = ::little::parser::Parser_obj::mergeWrites(body1);
HXDLIN( 733)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp13,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 734)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 734)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeWrites(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 735)					 ::little::parser::ParserTokens name5 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 735)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 735)					 ::little::parser::ParserTokens _hx_tmp14 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,name5))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 735)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp14,::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)16: {
HXLINE( 688)					if ((token->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 689)						if ((post->length == 0)) {
HXLINE( 690)							::Array< ::Dynamic> _hx_tmp15 = ::little::Little_obj::runtime->callStack;
HXDLIN( 690)							::String _hx_tmp16 = ::little::parser::Parser_obj::get_module();
HXDLIN( 690)							int _hx_tmp17 = ::little::parser::Parser_obj::get_line();
HXDLIN( 690)							_hx_tmp15->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp16)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(null(),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp17)));
HXLINE( 691)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing assignee before `=`",19,58,a3,a9)),HX_("Parser",ff,10,1d,22));
HXLINE( 692)							return null();
            						}
HXLINE( 694)						 ::little::parser::ParserTokens assignee = post->pop().StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 695)						::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(3)->init(0,::little::tools::ParserTokensSimple_obj::SET_MODULE_dyn())->init(1,::little::tools::ParserTokensSimple_obj::SPLIT_LINE_dyn())->init(2,::little::tools::ParserTokensSimple_obj::SET_LINE_dyn())->copy();
HXDLIN( 695)						::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 695)						{
HXLINE( 695)							int _g = 0;
HXDLIN( 695)							int _g1 = _this->length;
HXDLIN( 695)							while((_g < _g1)){
HXLINE( 695)								_g = (_g + 1);
HXDLIN( 695)								int i1 = (_g - 1);
HXDLIN( 695)								{
HXLINE( 695)									::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 695)									result->__unsafe_set(i1,inValue);
            								}
            							}
            						}
HXDLIN( 695)						if (result->contains(::Type_obj::enumConstructor(assignee).toLowerCase())) {
HXLINE( 696)							::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 696)							::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 696)							int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 696)							int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 696)							_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee)),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 697)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing assignee before `=`, assigning operation is cut off by a line split, a new file or a line.",eb,6d,ce,d6)),HX_("Parser",ff,10,1d,22));
            						}
HXLINE( 699)						if (((i + 1) >= pre->length)) {
HXLINE( 700)							::Array< ::Dynamic> _hx_tmp22 = ::little::Little_obj::runtime->callStack;
HXDLIN( 700)							::String _hx_tmp23 = ::little::parser::Parser_obj::get_module();
HXDLIN( 700)							int _hx_tmp24 = ::little::parser::Parser_obj::get_line();
HXDLIN( 700)							int _hx_tmp25 = ::little::parser::Parser_obj::linePart;
HXDLIN( 700)							_hx_tmp22->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp25)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp23)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::Write(::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee)),null()))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp24)));
HXLINE( 701)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
HXLINE( 702)							return null();
            						}
HXLINE( 704)						::Array< ::Dynamic> value3 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 705)						while(((i + 1) < pre->length)){
HXLINE( 706)							 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 707)							switch((int)(lookahead->_hx_getIndex())){
            								case (int)0: {
HXLINE( 708)									int _g2 = lookahead->_hx_getInt(0);
HXLINE( 709)									if ((value3->length == 0)) {
HXLINE( 710)										::Array< ::Dynamic> _hx_tmp26 = ::little::Little_obj::runtime->callStack;
HXDLIN( 710)										::String _hx_tmp27 = ::little::parser::Parser_obj::get_module();
HXDLIN( 710)										int _hx_tmp28 = ::little::parser::Parser_obj::get_line();
HXDLIN( 710)										int _hx_tmp29 = ::little::parser::Parser_obj::linePart;
HXDLIN( 710)										_hx_tmp26->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp29)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp27)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),lookahead)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp28)));
HXLINE( 711)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
            									}
HXLINE( 713)									goto _hx_goto_36;
            								}
            								break;
            								case (int)1: {
HXLINE( 708)									::String _g3 = lookahead->_hx_getString(0);
HXLINE( 709)									if ((value3->length == 0)) {
HXLINE( 710)										::Array< ::Dynamic> _hx_tmp30 = ::little::Little_obj::runtime->callStack;
HXDLIN( 710)										::String _hx_tmp31 = ::little::parser::Parser_obj::get_module();
HXDLIN( 710)										int _hx_tmp32 = ::little::parser::Parser_obj::get_line();
HXDLIN( 710)										int _hx_tmp33 = ::little::parser::Parser_obj::linePart;
HXDLIN( 710)										_hx_tmp30->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp33)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp31)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),lookahead)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp32)));
HXLINE( 711)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
            									}
HXLINE( 713)									goto _hx_goto_36;
            								}
            								break;
            								case (int)2: {
HXLINE( 709)									if ((value3->length == 0)) {
HXLINE( 710)										::Array< ::Dynamic> _hx_tmp34 = ::little::Little_obj::runtime->callStack;
HXDLIN( 710)										::String _hx_tmp35 = ::little::parser::Parser_obj::get_module();
HXDLIN( 710)										int _hx_tmp36 = ::little::parser::Parser_obj::get_line();
HXDLIN( 710)										int _hx_tmp37 = ::little::parser::Parser_obj::linePart;
HXDLIN( 710)										_hx_tmp34->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp37)
            											->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp35)
            											->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),lookahead)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())
            											->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp36)));
HXLINE( 711)										::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
            									}
HXLINE( 713)									goto _hx_goto_36;
            								}
            								break;
            								case (int)16: {
HXLINE( 708)									if ((lookahead->_hx_getString(0) == HX_("=",3d,00,00,00))) {
HXLINE( 709)										if ((value3->length == 0)) {
HXLINE( 710)											::Array< ::Dynamic> _hx_tmp38 = ::little::Little_obj::runtime->callStack;
HXDLIN( 710)											::String _hx_tmp39 = ::little::parser::Parser_obj::get_module();
HXDLIN( 710)											int _hx_tmp40 = ::little::parser::Parser_obj::get_line();
HXDLIN( 710)											int _hx_tmp41 = ::little::parser::Parser_obj::linePart;
HXDLIN( 710)											_hx_tmp38->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp41)
            												->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp39)
            												->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),lookahead)))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >())
            												->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp40)));
HXLINE( 711)											::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Missing value after the last `=`",95,a8,26,8f)),HX_("Parser",ff,10,1d,22));
            										}
HXLINE( 713)										goto _hx_goto_36;
            									}
            									else {
HXLINE( 715)										value3->push(lookahead);
            									}
            								}
            								break;
            								default:{
HXLINE( 715)									value3->push(lookahead);
            								}
            							}
HXLINE( 717)							i = (i + 1);
            						}
            						_hx_goto_36:;
HXLINE( 719)						 ::little::parser::ParserTokens token1;
HXDLIN( 719)						if ((value3->length == 1)) {
HXLINE( 719)							token1 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,value3->__get(0).StaticCast<  ::little::parser::ParserTokens >()))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
            						}
            						else {
HXLINE( 719)							token1 = ::little::parser::ParserTokens_obj::Expression(::little::parser::Parser_obj::mergeWrites(value3),null());
            						}
HXLINE( 720)						::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::WRITE_dyn())->copy();
HXDLIN( 720)						::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 720)						{
HXLINE( 720)							int _g4 = 0;
HXDLIN( 720)							int _g5 = _this1->length;
HXDLIN( 720)							while((_g4 < _g5)){
HXLINE( 720)								_g4 = (_g4 + 1);
HXDLIN( 720)								int i2 = (_g4 - 1);
HXDLIN( 720)								{
HXLINE( 720)									::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 720)									result1->__unsafe_set(i2,inValue1);
            								}
            							}
            						}
HXDLIN( 720)						if (result1->contains(::Type_obj::enumConstructor(assignee).toLowerCase())) {
HXLINE( 721)							::Array< ::Dynamic> assignees1 = ( (::Array< ::Dynamic>)(::Type_obj::enumParameters(assignee)->__get(0)) );
HXDLIN( 721)							::Array< ::Dynamic> assignees2 = assignees1->concat(::Array_obj< ::Dynamic>::__new(1)->init(0,::Type_obj::enumParameters(assignee)->__get(1)));
HXLINE( 722)							post->push(::little::parser::ParserTokens_obj::Write(assignees2,token1));
            						}
            						else {
HXLINE( 723)							post->push(::little::parser::ParserTokens_obj::Write(::Array_obj< ::Dynamic>::__new(1)->init(0,assignee),token1));
            						}
            					}
            					else {
HXLINE( 738)						post->push(token);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 737)					::String name6 = token->_hx_getString(0);
HXDLIN( 737)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 737)					::Array< ::Dynamic> result2 = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 737)					{
HXLINE( 737)						int _g6 = 0;
HXDLIN( 737)						int _g7 = params2->length;
HXDLIN( 737)						while((_g6 < _g7)){
HXLINE( 737)							_g6 = (_g6 + 1);
HXDLIN( 737)							int i3 = (_g6 - 1);
HXDLIN( 737)							{
HXLINE( 737)								 ::little::parser::ParserTokens inValue2 = ::little::parser::Parser_obj::mergeWrites(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i3)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 737)								result2->__unsafe_set(i3,inValue2);
            							}
            						}
            					}
HXDLIN( 737)					post->push(::little::parser::ParserTokens_obj::Custom(name6,result2));
            				}
            				break;
            				default:{
HXLINE( 738)					post->push(token);
            				}
            			}
HXLINE( 741)			i = (i + 1);
            		}
HXLINE( 744)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeWrites,return )

::Array< ::Dynamic> Parser_obj::mergeValuesWithTypeDecls(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_750_mergeValuesWithTypeDecls)
HXLINE( 752)		if (::hx::IsNull( pre )) {
HXLINE( 752)			return null();
            		}
HXLINE( 753)		bool _hx_tmp;
HXDLIN( 753)		if ((pre->length == 1)) {
HXLINE( 753)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 753)			_hx_tmp = false;
            		}
HXDLIN( 753)		if (_hx_tmp) {
HXLINE( 753)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 755)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 757)		int i = (pre->length - 1);
HXLINE( 758)		while((i >= 0)){
HXLINE( 759)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 760)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 761)					int line = token->_hx_getInt(0);
HXDLIN( 761)					{
HXLINE( 761)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 761)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 762)					::String module = token->_hx_getString(0);
HXDLIN( 762)					{
HXLINE( 762)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 762)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 763)					::little::parser::Parser_obj::nextPart();
HXDLIN( 763)					post->unshift(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 784)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 784)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 784)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 784)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 784)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 784)					post->unshift(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 785)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 785)					post->unshift(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 786)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 786)					post->unshift(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 790)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 790)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 790)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(assignees);
HXDLIN( 790)					post->unshift(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)9: {
HXLINE( 764)					if (::hx::IsNull( token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >() )) {
HXLINE( 764)						 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 764)						{
HXLINE( 765)							i = (i - 1);
HXDLIN( 765)							if (((i + 1) <= 0)) {
HXLINE( 766)								::Array< ::Dynamic> _hx_tmp9 = ::little::Little_obj::runtime->callStack;
HXDLIN( 766)								::String _hx_tmp10 = ::little::parser::Parser_obj::get_module();
HXDLIN( 766)								int _hx_tmp11 = ::little::parser::Parser_obj::get_line();
HXDLIN( 766)								int _hx_tmp12 = ::little::parser::Parser_obj::linePart;
HXDLIN( 766)								_hx_tmp9->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp12)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp10)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp11)));
HXLINE( 767)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration cut off by the start of file, block or expression.",87,ac,a0,5f)),HX_("Parser",ff,10,1d,22));
HXLINE( 768)								return null();
            							}
HXLINE( 770)							 ::little::parser::ParserTokens lookbehind = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 771)							switch((int)(lookbehind->_hx_getIndex())){
            								case (int)0: {
HXLINE( 772)									int _g = lookbehind->_hx_getInt(0);
HXLINE( 773)									::Array< ::Dynamic> _hx_tmp13 = ::little::Little_obj::runtime->callStack;
HXDLIN( 773)									::String _hx_tmp14 = ::little::parser::Parser_obj::get_module();
HXDLIN( 773)									int _hx_tmp15 = ::little::parser::Parser_obj::get_line();
HXDLIN( 773)									int _hx_tmp16 = ::little::parser::Parser_obj::linePart;
HXDLIN( 773)									 ::little::interpreter::InterpTokens _hx_tmp17 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 773)									_hx_tmp13->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp16)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp14)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp17,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp15)));
HXLINE( 774)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 775)									return null();
            								}
            								break;
            								case (int)1: {
HXLINE( 772)									::String _g1 = lookbehind->_hx_getString(0);
HXLINE( 773)									::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 773)									::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 773)									int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 773)									int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 773)									 ::little::interpreter::InterpTokens _hx_tmp22 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 773)									_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp22,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 774)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 775)									return null();
            								}
            								break;
            								case (int)2: {
HXLINE( 773)									::Array< ::Dynamic> _hx_tmp23 = ::little::Little_obj::runtime->callStack;
HXDLIN( 773)									::String _hx_tmp24 = ::little::parser::Parser_obj::get_module();
HXDLIN( 773)									int _hx_tmp25 = ::little::parser::Parser_obj::get_line();
HXDLIN( 773)									int _hx_tmp26 = ::little::parser::Parser_obj::linePart;
HXDLIN( 773)									 ::little::interpreter::InterpTokens _hx_tmp27 = ::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,lookbehind))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >();
HXDLIN( 773)									_hx_tmp23->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp26)
            										->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp24)
            										->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::TypeCast(_hx_tmp27,::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            										->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp25)));
HXLINE( 774)									::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(HX_("Value's type declaration access cut off by the start of a line, or by a line split (; or ,).",76,0d,74,e7)),HX_("Parser",ff,10,1d,22));
HXLINE( 775)									return null();
            								}
            								break;
            								default:{
HXLINE( 778)									post->unshift(::little::parser::ParserTokens_obj::TypeDeclaration(lookbehind,type2));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 793)						post->unshift(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 789)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 789)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 789)					 ::little::parser::ParserTokens _hx_tmp28 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 789)					post->unshift(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp28,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 787)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 787)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 787)					 ::little::parser::ParserTokens _hx_tmp29 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 787)					post->unshift(::little::parser::ParserTokens_obj::Return(_hx_tmp29,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 783)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 783)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 783)					::Array< ::Dynamic> _hx_tmp30 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(parts);
HXDLIN( 783)					post->unshift(::little::parser::ParserTokens_obj::Expression(_hx_tmp30,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 782)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 782)					 ::little::parser::ParserTokens type5 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 782)					::Array< ::Dynamic> _hx_tmp31 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(body1);
HXDLIN( 782)					post->unshift(::little::parser::ParserTokens_obj::Block(_hx_tmp31,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,type5))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 788)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 788)					post->unshift(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeValuesWithTypeDecls(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 791)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 791)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 791)					 ::little::parser::ParserTokens _hx_tmp32 = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 791)					post->unshift(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp32,::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 792)					::String name5 = token->_hx_getString(0);
HXDLIN( 792)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 792)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 792)					{
HXLINE( 792)						int _g2 = 0;
HXDLIN( 792)						int _g3 = params2->length;
HXDLIN( 792)						while((_g2 < _g3)){
HXLINE( 792)							_g2 = (_g2 + 1);
HXDLIN( 792)							int i1 = (_g2 - 1);
HXDLIN( 792)							{
HXLINE( 792)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeValuesWithTypeDecls(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 792)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 792)					post->unshift(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 793)					post->unshift(token);
            				}
            			}
HXLINE( 795)			i = (i - 1);
            		}
HXLINE( 798)		::little::parser::Parser_obj::resetLines();
HXLINE( 799)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeValuesWithTypeDecls,return )

::Array< ::Dynamic> Parser_obj::mergeNonBlockBodies(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_809_mergeNonBlockBodies)
HXLINE( 811)		if (::hx::IsNull( pre )) {
HXLINE( 811)			return null();
            		}
HXLINE( 812)		bool _hx_tmp;
HXDLIN( 812)		if ((pre->length == 1)) {
HXLINE( 812)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 812)			_hx_tmp = false;
            		}
HXDLIN( 812)		if (_hx_tmp) {
HXLINE( 812)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 814)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 816)		int i = 0;
HXLINE( 817)		while((i < pre->length)){
HXLINE( 818)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 819)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 820)					int line = token->_hx_getInt(0);
HXDLIN( 820)					{
HXLINE( 820)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 820)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 821)					::String module = token->_hx_getString(0);
HXDLIN( 821)					{
HXLINE( 821)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 821)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 822)					::little::parser::Parser_obj::nextPart();
HXDLIN( 822)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 842)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 842)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 842)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 842)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 842)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 842)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 843)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 843)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 844)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 844)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 844)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 844)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 844)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 844)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 847)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 847)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 847)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeNonBlockBodies(assignees);
HXDLIN( 847)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)10: {
HXLINE( 823)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 823)					{
HXLINE( 824)						if (((i + 1) >= pre->length)) {
HXLINE( 825)							 ::little::parser::ParserTokens _hx_tmp9 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 825)							post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp9,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 826)							i = (i + 1);
HXLINE( 827)							continue;
            						}
HXLINE( 829)						 ::little::parser::ParserTokens lookahead = pre->__get((i + 1)).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 830)						switch((int)(lookahead->_hx_getIndex())){
            							case (int)0: {
HXLINE( 831)								int _g = lookahead->_hx_getInt(0);
HXLINE( 832)								 ::little::parser::ParserTokens _hx_tmp10 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 832)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp10,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)1: {
HXLINE( 831)								::String _g1 = lookahead->_hx_getString(0);
HXLINE( 832)								 ::little::parser::ParserTokens _hx_tmp11 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 832)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp11,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)2: {
HXLINE( 832)								 ::little::parser::ParserTokens _hx_tmp12 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 832)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp12,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							case (int)16: {
HXLINE( 831)								::String _g2 = lookahead->_hx_getString(0);
HXLINE( 832)								 ::little::parser::ParserTokens _hx_tmp13 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 832)								post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp13,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            							}
            							break;
            							default:{
HXLINE( 835)								 ::little::parser::ParserTokens _hx_tmp14 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)								 ::little::parser::ParserTokens _hx_tmp15 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 835)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp14,_hx_tmp15,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,lookahead))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
HXLINE( 836)								i = (i + 1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 845)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 845)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 845)					 ::little::parser::ParserTokens _hx_tmp16 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 845)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp16,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 841)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 841)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 841)					::Array< ::Dynamic> _hx_tmp17 = ::little::parser::Parser_obj::mergeNonBlockBodies(parts);
HXDLIN( 841)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp17,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 840)					::Array< ::Dynamic> body1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 840)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 840)					::Array< ::Dynamic> _hx_tmp18 = ::little::parser::Parser_obj::mergeNonBlockBodies(body1);
HXDLIN( 840)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp18,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 846)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 846)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeNonBlockBodies(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 848)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 848)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 848)					 ::little::parser::ParserTokens _hx_tmp19 = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 848)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp19,::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 849)					::String name5 = token->_hx_getString(0);
HXDLIN( 849)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 849)					::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 849)					{
HXLINE( 849)						int _g3 = 0;
HXDLIN( 849)						int _g4 = params2->length;
HXDLIN( 849)						while((_g3 < _g4)){
HXLINE( 849)							_g3 = (_g3 + 1);
HXDLIN( 849)							int i1 = (_g3 - 1);
HXDLIN( 849)							{
HXLINE( 849)								 ::little::parser::ParserTokens inValue = ::little::parser::Parser_obj::mergeNonBlockBodies(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i1)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 849)								result->__unsafe_set(i1,inValue);
            							}
            						}
            					}
HXDLIN( 849)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result));
            				}
            				break;
            				default:{
HXLINE( 850)					post->push(token);
            				}
            			}
HXLINE( 852)			i = (i + 1);
            		}
HXLINE( 855)		::little::parser::Parser_obj::resetLines();
HXLINE( 856)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeNonBlockBodies,return )

::Array< ::Dynamic> Parser_obj::mergeElses(::Array< ::Dynamic> pre){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_862_mergeElses)
HXLINE( 864)		if (::hx::IsNull( pre )) {
HXLINE( 864)			return null();
            		}
HXLINE( 865)		bool _hx_tmp;
HXDLIN( 865)		if ((pre->length == 1)) {
HXLINE( 865)			_hx_tmp = ::hx::IsNull( pre->__get(0).StaticCast<  ::little::parser::ParserTokens >() );
            		}
            		else {
HXLINE( 865)			_hx_tmp = false;
            		}
HXDLIN( 865)		if (_hx_tmp) {
HXLINE( 865)			return ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
            		}
HXLINE( 867)		::Array< ::Dynamic> post = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 869)		int i = 0;
HXLINE( 870)		while((i < pre->length)){
HXLINE( 871)			 ::little::parser::ParserTokens token = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 872)			switch((int)(token->_hx_getIndex())){
            				case (int)0: {
HXLINE( 873)					int line = token->_hx_getInt(0);
HXDLIN( 873)					{
HXLINE( 873)						::little::parser::Parser_obj::setLine(line);
HXDLIN( 873)						post->push(token);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 874)					::String module = token->_hx_getString(0);
HXDLIN( 874)					{
HXLINE( 874)						::little::parser::Parser_obj::set_module(module);
HXDLIN( 874)						post->push(token);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 875)					::little::parser::Parser_obj::nextPart();
HXDLIN( 875)					post->push(token);
            				}
            				break;
            				case (int)3: {
HXLINE( 908)					 ::little::parser::ParserTokens name = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 908)					 ::little::parser::ParserTokens type = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 908)					 ::little::parser::ParserTokens doc = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 908)					 ::little::parser::ParserTokens _hx_tmp1 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 908)					 ::little::parser::ParserTokens _hx_tmp2 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 908)					post->push(::little::parser::ParserTokens_obj::Variable(_hx_tmp1,_hx_tmp2,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)4: {
HXLINE( 909)					 ::little::parser::ParserTokens name1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens params = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens type1 = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens doc1 = token->_hx_getObject(3).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens _hx_tmp3 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens _hx_tmp4 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					 ::little::parser::ParserTokens _hx_tmp5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 909)					post->push(::little::parser::ParserTokens_obj::Function(_hx_tmp3,_hx_tmp4,_hx_tmp5,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,doc1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)5: {
HXLINE( 910)					 ::little::parser::ParserTokens name2 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 910)					 ::little::parser::ParserTokens exp = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 910)					 ::little::parser::ParserTokens body = token->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 910)					 ::little::parser::ParserTokens _hx_tmp6 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name2))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 910)					 ::little::parser::ParserTokens _hx_tmp7 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,exp))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 910)					post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp6,_hx_tmp7,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,body))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)7: {
HXLINE( 914)					::Array< ::Dynamic> assignees = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 914)					 ::little::parser::ParserTokens value = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 914)					::Array< ::Dynamic> _hx_tmp8 = ::little::parser::Parser_obj::mergeElses(assignees);
HXDLIN( 914)					post->push(::little::parser::ParserTokens_obj::Write(_hx_tmp8,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)8: {
HXLINE( 876)					if (((token->_hx_getString(0) == ::little::Little_obj::keywords->CONDITION__ELSE) == true)) {
HXLINE( 877)						bool _hx_tmp9;
HXDLIN( 877)						if ((post->length != 0)) {
HXLINE( 877)							 ::little::parser::ParserTokens token1 = post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 877)							::Array< ::Dynamic> _this = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::CONDITION_CALL_dyn())->copy();
HXDLIN( 877)							::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 877)							{
HXLINE( 877)								int _g = 0;
HXDLIN( 877)								int _g1 = _this->length;
HXDLIN( 877)								while((_g < _g1)){
HXLINE( 877)									_g = (_g + 1);
HXDLIN( 877)									int i1 = (_g - 1);
HXDLIN( 877)									{
HXLINE( 877)										::String inValue = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this,i1)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 877)										result->__unsafe_set(i1,inValue);
            									}
            								}
            							}
HXDLIN( 877)							_hx_tmp9 = !(result->contains(::Type_obj::enumConstructor(token1).toLowerCase()));
            						}
            						else {
HXLINE( 877)							_hx_tmp9 = true;
            						}
HXDLIN( 877)						if (_hx_tmp9) {
HXLINE( 878)							post->push(token);
HXLINE( 879)							i = (i + 1);
HXLINE( 880)							continue;
            						}
HXLINE( 882)						if (((i + 1) >= pre->length)) {
HXLINE( 883)							::Array< ::Dynamic> _hx_tmp10 = ::little::Little_obj::runtime->callStack;
HXDLIN( 883)							::String _hx_tmp11 = ::little::parser::Parser_obj::get_module();
HXDLIN( 883)							int _hx_tmp12 = ::little::parser::Parser_obj::get_line();
HXDLIN( 883)							_hx_tmp10->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("linePart",07,32,7b,87),::little::parser::Parser_obj::linePart)
            								->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp11)
            								->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE),null(),::little::interpreter::InterpTokens_obj::Identifier(HX_("",00,00,00,00))))
            								->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp12)));
HXLINE( 884)							::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body may be cut off by the end of file, block or expression.",65,cb,d6,67))),HX_("Parser",ff,10,1d,22));
HXLINE( 885)							return null();
            						}
HXLINE( 887)						 ::little::parser::ParserTokens exp1 = ::Type_obj::enumParameters(post->__get((post->length - 1)).StaticCast<  ::little::parser::ParserTokens >())->__get(1);
HXLINE( 888)						exp1 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("!=",fc,1c,00,00)))->init(2,::little::parser::ParserTokens_obj::TrueValue_dyn()),null());
HXLINE( 889)						i = (i + 1);
HXLINE( 890)						 ::little::parser::ParserTokens body1 = pre->__get(i).StaticCast<  ::little::parser::ParserTokens >();
HXLINE( 891)						switch((int)(body1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 897)								int _g2 = body1->_hx_getInt(0);
HXLINE( 898)								::Array< ::Dynamic> _hx_tmp13 = ::little::Little_obj::runtime->callStack;
HXDLIN( 898)								::String _hx_tmp14 = ::little::parser::Parser_obj::get_module();
HXDLIN( 898)								int _hx_tmp15 = ::little::parser::Parser_obj::get_line();
HXDLIN( 898)								int _hx_tmp16 = ::little::parser::Parser_obj::linePart;
HXDLIN( 898)								 ::little::interpreter::InterpTokens _hx_tmp17 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 898)								_hx_tmp13->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp16)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp14)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp17,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp15)));
HXLINE( 899)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 900)								return null();
            							}
            							break;
            							case (int)1: {
HXLINE( 897)								::String _g3 = body1->_hx_getString(0);
HXLINE( 898)								::Array< ::Dynamic> _hx_tmp18 = ::little::Little_obj::runtime->callStack;
HXDLIN( 898)								::String _hx_tmp19 = ::little::parser::Parser_obj::get_module();
HXDLIN( 898)								int _hx_tmp20 = ::little::parser::Parser_obj::get_line();
HXDLIN( 898)								int _hx_tmp21 = ::little::parser::Parser_obj::linePart;
HXDLIN( 898)								 ::little::interpreter::InterpTokens _hx_tmp22 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 898)								_hx_tmp18->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp21)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp19)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp22,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp20)));
HXLINE( 899)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a new line, or does not exist",93,f3,7d,d7))),HX_("Parser",ff,10,1d,22));
HXLINE( 900)								return null();
            							}
            							break;
            							case (int)2: {
HXLINE( 893)								::Array< ::Dynamic> _hx_tmp23 = ::little::Little_obj::runtime->callStack;
HXDLIN( 893)								::String _hx_tmp24 = ::little::parser::Parser_obj::get_module();
HXDLIN( 893)								int _hx_tmp25 = ::little::parser::Parser_obj::get_line();
HXDLIN( 893)								int _hx_tmp26 = ::little::parser::Parser_obj::linePart;
HXDLIN( 893)								 ::little::interpreter::InterpTokens _hx_tmp27 = ::little::interpreter::InterpTokens_obj::Identifier(::little::Little_obj::keywords->CONDITION__ELSE);
HXDLIN( 893)								_hx_tmp23->unshift( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("linePart",07,32,7b,87),_hx_tmp26)
            									->setFixed(1,HX_("module",ac,34,d3,c0),_hx_tmp24)
            									->setFixed(2,HX_("token",f9,82,2b,14),::little::interpreter::InterpTokens_obj::ConditionCall(_hx_tmp27,null(),::little::interpreter::Interpreter_obj::convert(::Array_obj< ::Dynamic>::__new(1)->init(0,body1))->__get(0).StaticCast<  ::little::interpreter::InterpTokens >()))
            									->setFixed(3,HX_("line",f4,17,b3,47),_hx_tmp25)));
HXLINE( 894)								::little::Little_obj::runtime->throwError(::little::interpreter::InterpTokens_obj::ErrorMessage(((HX_("`",60,00,00,00) + ::little::Little_obj::keywords->CONDITION__ELSE) + HX_("` condition has no body, body cut off by a line split, or does not exist",99,32,ec,c1))),HX_("Parser",ff,10,1d,22));
HXLINE( 895)								return null();
            							}
            							break;
            							case (int)5: {
HXLINE( 902)								 ::little::parser::ParserTokens _g4 = body1->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)								if ((_g4->_hx_getIndex() == 8)) {
HXLINE( 902)									if ((_g4->_hx_getString(0) == HX_("if",dd,5b,00,00))) {
HXLINE( 902)										 ::little::parser::ParserTokens exp2 = body1->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)										 ::little::parser::ParserTokens body2 = body1->_hx_getObject(2).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 902)										 ::little::parser::ParserTokens _hx_tmp28 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 902)										 ::little::parser::ParserTokens _hx_tmp29 = ::little::parser::ParserTokens_obj::Expression(::Array_obj< ::Dynamic>::__new(3)->init(0,exp1)->init(1,::little::parser::ParserTokens_obj::Sign(HX_("&&",40,21,00,00)))->init(2,exp2),null());
HXDLIN( 902)										 ::little::parser::ParserTokens _hx_tmp30;
HXDLIN( 902)										::Array< ::Dynamic> _this1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 902)										::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this1->length);
HXDLIN( 902)										{
HXLINE( 902)											int _g5 = 0;
HXDLIN( 902)											int _g6 = _this1->length;
HXDLIN( 902)											while((_g5 < _g6)){
HXLINE( 902)												_g5 = (_g5 + 1);
HXDLIN( 902)												int i2 = (_g5 - 1);
HXDLIN( 902)												{
HXLINE( 902)													::String inValue1 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this1,i2)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 902)													result1->__unsafe_set(i2,inValue1);
            												}
            											}
            										}
HXDLIN( 902)										if (!(result1->contains(::Type_obj::enumConstructor(body2).toLowerCase()))) {
HXLINE( 902)											_hx_tmp30 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body2),null());
            										}
            										else {
HXLINE( 902)											_hx_tmp30 = body2;
            										}
HXDLIN( 902)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp28,_hx_tmp29,_hx_tmp30));
            									}
            									else {
HXLINE( 903)										 ::little::parser::ParserTokens _hx_tmp31 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 903)										 ::little::parser::ParserTokens _hx_tmp32;
HXDLIN( 903)										::Array< ::Dynamic> _this2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 903)										::Array< ::String > result2 = ::Array_obj< ::String >::__new(_this2->length);
HXDLIN( 903)										{
HXLINE( 903)											int _g7 = 0;
HXDLIN( 903)											int _g8 = _this2->length;
HXDLIN( 903)											while((_g7 < _g8)){
HXLINE( 903)												_g7 = (_g7 + 1);
HXDLIN( 903)												int i3 = (_g7 - 1);
HXDLIN( 903)												{
HXLINE( 903)													::String inValue2 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this2,i3)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 903)													result2->__unsafe_set(i3,inValue2);
            												}
            											}
            										}
HXDLIN( 903)										if (!(result2->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 903)											_hx_tmp32 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            										}
            										else {
HXLINE( 903)											_hx_tmp32 = body1;
            										}
HXDLIN( 903)										post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp31,exp1,_hx_tmp32));
            									}
            								}
            								else {
HXLINE( 903)									 ::little::parser::ParserTokens _hx_tmp33 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 903)									 ::little::parser::ParserTokens _hx_tmp34;
HXDLIN( 903)									::Array< ::Dynamic> _this3 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 903)									::Array< ::String > result3 = ::Array_obj< ::String >::__new(_this3->length);
HXDLIN( 903)									{
HXLINE( 903)										int _g9 = 0;
HXDLIN( 903)										int _g10 = _this3->length;
HXDLIN( 903)										while((_g9 < _g10)){
HXLINE( 903)											_g9 = (_g9 + 1);
HXDLIN( 903)											int i4 = (_g9 - 1);
HXDLIN( 903)											{
HXLINE( 903)												::String inValue3 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this3,i4)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 903)												result3->__unsafe_set(i4,inValue3);
            											}
            										}
            									}
HXDLIN( 903)									if (!(result3->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 903)										_hx_tmp34 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            									}
            									else {
HXLINE( 903)										_hx_tmp34 = body1;
            									}
HXDLIN( 903)									post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp33,exp1,_hx_tmp34));
            								}
            							}
            							break;
            							default:{
HXLINE( 903)								 ::little::parser::ParserTokens _hx_tmp35 = ::little::parser::ParserTokens_obj::Identifier(HX_("if",dd,5b,00,00));
HXDLIN( 903)								 ::little::parser::ParserTokens _hx_tmp36;
HXDLIN( 903)								::Array< ::Dynamic> _this4 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::tools::ParserTokensSimple_obj::BLOCK_dyn())->copy();
HXDLIN( 903)								::Array< ::String > result4 = ::Array_obj< ::String >::__new(_this4->length);
HXDLIN( 903)								{
HXLINE( 903)									int _g11 = 0;
HXDLIN( 903)									int _g12 = _this4->length;
HXDLIN( 903)									while((_g11 < _g12)){
HXLINE( 903)										_g11 = (_g11 + 1);
HXDLIN( 903)										int i5 = (_g11 - 1);
HXDLIN( 903)										{
HXLINE( 903)											::String inValue4 = ::little::tools::TextTools_obj::remove(::Type_obj::enumConstructor(_hx_array_unsafe_get(_this4,i5)),HX_("_",5f,00,00,00)).toLowerCase();
HXDLIN( 903)											result4->__unsafe_set(i5,inValue4);
            										}
            									}
            								}
HXDLIN( 903)								if (!(result4->contains(::Type_obj::enumConstructor(body1).toLowerCase()))) {
HXLINE( 903)									_hx_tmp36 = ::little::parser::ParserTokens_obj::Block(::Array_obj< ::Dynamic>::__new(1)->init(0,body1),null());
            								}
            								else {
HXLINE( 903)									_hx_tmp36 = body1;
            								}
HXDLIN( 903)								post->push(::little::parser::ParserTokens_obj::ConditionCall(_hx_tmp35,exp1,_hx_tmp36));
            							}
            						}
            					}
            					else {
HXLINE( 917)						post->push(token);
            					}
            				}
            				break;
            				case (int)10: {
HXLINE( 913)					 ::little::parser::ParserTokens name3 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 913)					 ::little::parser::ParserTokens params1 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 913)					 ::little::parser::ParserTokens _hx_tmp37 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name3))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 913)					post->push(::little::parser::ParserTokens_obj::FunctionCall(_hx_tmp37,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,params1))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)11: {
HXLINE( 911)					 ::little::parser::ParserTokens value1 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 911)					 ::little::parser::ParserTokens type2 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 911)					 ::little::parser::ParserTokens _hx_tmp38 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,value1))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 911)					post->push(::little::parser::ParserTokens_obj::Return(_hx_tmp38,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type2))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)12: {
HXLINE( 907)					::Array< ::Dynamic> parts = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 907)					 ::little::parser::ParserTokens type3 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 907)					::Array< ::Dynamic> _hx_tmp39 = ::little::parser::Parser_obj::mergeElses(parts);
HXDLIN( 907)					post->push(::little::parser::ParserTokens_obj::Expression(_hx_tmp39,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type3))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)13: {
HXLINE( 906)					::Array< ::Dynamic> body3 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 906)					 ::little::parser::ParserTokens type4 = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 906)					::Array< ::Dynamic> _hx_tmp40 = ::little::parser::Parser_obj::mergeElses(body3);
HXDLIN( 906)					post->push(::little::parser::ParserTokens_obj::Block(_hx_tmp40,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,type4))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)14: {
HXLINE( 912)					::Array< ::Dynamic> parts1 = token->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 912)					post->push(::little::parser::ParserTokens_obj::PartArray(::little::parser::Parser_obj::mergeElses(parts1)));
            				}
            				break;
            				case (int)15: {
HXLINE( 915)					 ::little::parser::ParserTokens name4 = token->_hx_getObject(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 915)					 ::little::parser::ParserTokens property = token->_hx_getObject(1).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 915)					 ::little::parser::ParserTokens _hx_tmp41 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,name4))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 915)					post->push(::little::parser::ParserTokens_obj::PropertyAccess(_hx_tmp41,::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,property))->__get(0).StaticCast<  ::little::parser::ParserTokens >()));
            				}
            				break;
            				case (int)25: {
HXLINE( 916)					::String name5 = token->_hx_getString(0);
HXDLIN( 916)					::Array< ::Dynamic> params2 = token->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 916)					::Array< ::Dynamic> result5 = ::Array_obj< ::Dynamic>::__new(params2->length);
HXDLIN( 916)					{
HXLINE( 916)						int _g13 = 0;
HXDLIN( 916)						int _g14 = params2->length;
HXDLIN( 916)						while((_g13 < _g14)){
HXLINE( 916)							_g13 = (_g13 + 1);
HXDLIN( 916)							int i6 = (_g13 - 1);
HXDLIN( 916)							{
HXLINE( 916)								 ::little::parser::ParserTokens inValue5 = ::little::parser::Parser_obj::mergeElses(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_array_unsafe_get(params2,i6)))->__get(0).StaticCast<  ::little::parser::ParserTokens >();
HXDLIN( 916)								result5->__unsafe_set(i6,inValue5);
            							}
            						}
            					}
HXDLIN( 916)					post->push(::little::parser::ParserTokens_obj::Custom(name5,result5));
            				}
            				break;
            				default:{
HXLINE( 917)					post->push(token);
            				}
            			}
HXLINE( 919)			i = (i + 1);
            		}
HXLINE( 922)		::little::parser::Parser_obj::resetLines();
HXLINE( 923)		return post;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,mergeElses,return )

int Parser_obj::get_line(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_935_get_line)
HXDLIN( 935)		return ::little::Little_obj::runtime->line;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_line,return )

int Parser_obj::set_line(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_936_set_line)
HXDLIN( 936)		return (::little::Little_obj::runtime->line = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_line,return )

::String Parser_obj::get_module(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_938_get_module)
HXDLIN( 938)		return ::little::Little_obj::runtime->module;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_module,return )

::String Parser_obj::set_module(::String l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_939_set_module)
HXDLIN( 939)		return (::little::Little_obj::runtime->module = l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,set_module,return )

int Parser_obj::linePart;

void Parser_obj::setLine(int l){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_945_setLine)
HXLINE( 946)		::little::parser::Parser_obj::set_line(l);
HXLINE( 947)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,setLine,(void))

void Parser_obj::nextPart(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_952_nextPart)
HXDLIN( 952)		::little::parser::Parser_obj::linePart++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,nextPart,(void))

void Parser_obj::resetLines(){
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_957_resetLines)
HXLINE( 958)		::little::parser::Parser_obj::set_line(0);
HXLINE( 959)		::little::parser::Parser_obj::linePart = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,resetLines,(void))


Parser_obj::Parser_obj()
{
}

bool Parser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_line() ); return true; } }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = ( parse ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_module() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setLine") ) { outValue = setLine_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_line") ) { outValue = get_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_line") ) { outValue = set_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linePart") ) { outValue = ( linePart ); return true; }
		if (HX_FIELD_EQ(inName,"nextPart") ) { outValue = nextPart_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mergeCalls") ) { outValue = mergeCalls_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeElses") ) { outValue = mergeElses_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_module") ) { outValue = get_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_module") ) { outValue = set_module_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetLines") ) { outValue = resetLines_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mergeBlocks") ) { outValue = mergeBlocks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mergeWrites") ) { outValue = mergeWrites_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mergeTypeDecls") ) { outValue = mergeTypeDecls_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mergeExpressions") ) { outValue = mergeExpressions_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeNonBlockBodies") ) { outValue = mergeNonBlockBodies_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mergeComplexStructures") ) { outValue = mergeComplexStructures_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { outValue = ( additionalParsingLevels ); return true; }
		if (HX_FIELD_EQ(inName,"mergePropertyOperations") ) { outValue = mergePropertyOperations_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"mergeValuesWithTypeDecls") ) { outValue = mergeValuesWithTypeDecls_dyn(); return true; }
	}
	return false;
}

bool Parser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_line(ioValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { parse=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_module(ioValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"linePart") ) { linePart=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"additionalParsingLevels") ) { additionalParsingLevels=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Parser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Parser_obj::additionalParsingLevels,HX_("additionalParsingLevels",58,b5,c0,96)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Parser_obj::parse,HX_("parse",33,90,55,bd)},
	{::hx::fsInt,(void *) &Parser_obj::linePart,HX_("linePart",07,32,7b,87)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_MARK_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_MARK_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::additionalParsingLevels,"additionalParsingLevels");
	HX_VISIT_MEMBER_NAME(Parser_obj::parse,"parse");
	HX_VISIT_MEMBER_NAME(Parser_obj::linePart,"linePart");
};

#endif

::hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_("additionalParsingLevels",58,b5,c0,96),
	HX_("parse",33,90,55,bd),
	HX_("convert",f3,fd,c9,1a),
	HX_("mergeBlocks",5e,1f,58,f3),
	HX_("mergeExpressions",03,54,b2,c9),
	HX_("mergePropertyOperations",f9,db,1f,94),
	HX_("mergeTypeDecls",d7,8d,a6,a4),
	HX_("mergeComplexStructures",58,ed,e8,a9),
	HX_("mergeCalls",3d,64,e1,82),
	HX_("mergeWrites",8c,c7,53,c9),
	HX_("mergeValuesWithTypeDecls",af,4f,84,50),
	HX_("mergeNonBlockBodies",78,f5,9a,52),
	HX_("mergeElses",c2,2f,f9,b0),
	HX_("get_line",7d,d3,6d,c7),
	HX_("set_line",f1,2c,cb,75),
	HX_("get_module",75,a4,5a,b1),
	HX_("set_module",e9,42,d8,b4),
	HX_("linePart",07,32,7b,87),
	HX_("setLine",b6,58,37,0d),
	HX_("nextPart",86,8a,1e,f6),
	HX_("resetLines",b0,15,9e,5d),
	::String(null())
};

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("little.parser.Parser",36,37,3f,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Parser_obj::__GetStatic;
	__mClass->mSetStaticField = &Parser_obj::__SetStatic;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_25_boot)
HXDLIN(  25)		additionalParsingLevels = ::Array_obj< ::Dynamic>::__new(1)->init(0,::little::parser::Parser_obj::mergeElses_dyn());
            	}
	parse = new __default_parse;

{
            	HX_STACKFRAME(&_hx_pos_b4f540063664edae_940_boot)
HXDLIN( 940)		linePart = 0;
            	}
}

} // end namespace little
} // end namespace parser
